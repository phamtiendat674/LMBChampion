!(function (t) {
  if ("object" == typeof exports) module.exports = t();
  else if ("function" == typeof define && define.amd) define(t);
  else {
    var e;
    "undefined" != typeof window
      ? (e = window)
      : "undefined" != typeof global
      ? (e = global)
      : "undefined" != typeof self && (e = self),
      (e.PF = t());
  }
})(function () {
  return (function t(e, i, n) {
    function o(a, s) {
      if (!i[a]) {
        if (!e[a]) {
          var l = "function" == typeof require && require;
          if (!s && l) return l(a, !0);
          if (r) return r(a, !0);
          throw new Error("Cannot find module '" + a + "'");
        }
        var h = (i[a] = { exports: {} });
        e[a][0].call(
          h.exports,
          function (t) {
            var i = e[a][1][t];
            return o(i || t);
          },
          h,
          h.exports,
          t,
          e,
          i,
          n
        );
      }
      return i[a].exports;
    }
    for (
      var r = "function" == typeof require && require, a = 0;
      a < n.length;
      a++
    )
      o(n[a]);
    return o;
  })(
    {
      1: [
        function (t, e, i) {
          e.exports = t("./lib/heap");
        },
        { "./lib/heap": 2 },
      ],
      2: [
        function (t, e, i) {
          (function () {
            var t, i, n, o, r, a, s, l, h, u, p, c, f, d, g;
            (n = Math.floor),
              (u = Math.min),
              (i = function (t, e) {
                return e > t ? -1 : t > e ? 1 : 0;
              }),
              (h = function (t, e, o, r, a) {
                var s;
                if ((null == o && (o = 0), null == a && (a = i), 0 > o))
                  throw new Error("lo must be non-negative");
                for (null == r && (r = t.length); r > o; )
                  a(e, t[(s = n((o + r) / 2))]) < 0 ? (r = s) : (o = s + 1);
                return [].splice.apply(t, [o, o - o].concat(e)), e;
              }),
              (a = function (t, e, n) {
                return (
                  null == n && (n = i), t.push(e), d(t, 0, t.length - 1, n)
                );
              }),
              (r = function (t, e) {
                var n, o;
                return (
                  null == e && (e = i),
                  (n = t.pop()),
                  t.length ? ((o = t[0]), (t[0] = n), g(t, 0, e)) : (o = n),
                  o
                );
              }),
              (l = function (t, e, n) {
                var o;
                return (
                  null == n && (n = i), (o = t[0]), (t[0] = e), g(t, 0, n), o
                );
              }),
              (s = function (t, e, n) {
                var o;
                return (
                  null == n && (n = i),
                  t.length &&
                    n(t[0], e) < 0 &&
                    ((e = (o = [t[0], e])[0]), (t[0] = o[1]), g(t, 0, n)),
                  e
                );
              }),
              (o = function (t, e) {
                var o, r, a, s, l, h;
                for (
                  null == e && (e = i),
                    l = [],
                    r = 0,
                    a = (s = function () {
                      h = [];
                      for (
                        var e = 0, i = n(t.length / 2);
                        i >= 0 ? i > e : e > i;
                        i >= 0 ? e++ : e--
                      )
                        h.push(e);
                      return h;
                    }
                      .apply(this)
                      .reverse()).length;
                  a > r;
                  r++
                )
                  (o = s[r]), l.push(g(t, o, e));
                return l;
              }),
              (f = function (t, e, n) {
                var o;
                return (
                  null == n && (n = i),
                  -1 !== (o = t.indexOf(e))
                    ? (d(t, 0, o, n), g(t, o, n))
                    : void 0
                );
              }),
              (p = function (t, e, n) {
                var r, a, l, h, u;
                if ((null == n && (n = i), !(a = t.slice(0, e)).length))
                  return a;
                for (o(a, n), l = 0, h = (u = t.slice(e)).length; h > l; l++)
                  (r = u[l]), s(a, r, n);
                return a.sort(n).reverse();
              }),
              (c = function (t, e, n) {
                var a, s, l, p, c, f, d, g, b;
                if ((null == n && (n = i), 10 * e <= t.length)) {
                  if (!(l = t.slice(0, e).sort(n)).length) return l;
                  for (
                    s = l[l.length - 1], p = 0, f = (d = t.slice(e)).length;
                    f > p;
                    p++
                  )
                    n((a = d[p]), s) < 0 &&
                      (h(l, a, 0, null, n), l.pop(), (s = l[l.length - 1]));
                  return l;
                }
                for (
                  o(t, n), b = [], c = 0, g = u(e, t.length);
                  g >= 0 ? g > c : c > g;
                  g >= 0 ? ++c : --c
                )
                  b.push(r(t, n));
                return b;
              }),
              (d = function (t, e, n, o) {
                var r, a, s;
                for (
                  null == o && (o = i), r = t[n];
                  n > e && o(r, (a = t[(s = (n - 1) >> 1)])) < 0;

                )
                  (t[n] = a), (n = s);
                return (t[n] = r);
              }),
              (g = function (t, e, n) {
                var o, r, a, s, l;
                for (
                  null == n && (n = i),
                    r = t.length,
                    l = e,
                    a = t[e],
                    o = 2 * e + 1;
                  r > o;

                )
                  r > (s = o + 1) && !(n(t[o], t[s]) < 0) && (o = s),
                    (t[e] = t[o]),
                    (o = 2 * (e = o) + 1);
                return (t[e] = a), d(t, l, e, n);
              }),
              (t = (function () {
                function t(t) {
                  (this.cmp = null != t ? t : i), (this.nodes = []);
                }
                return (
                  (t.push = a),
                  (t.pop = r),
                  (t.replace = l),
                  (t.pushpop = s),
                  (t.heapify = o),
                  (t.updateItem = f),
                  (t.nlargest = p),
                  (t.nsmallest = c),
                  (t.prototype.push = function (t) {
                    return a(this.nodes, t, this.cmp);
                  }),
                  (t.prototype.pop = function () {
                    return r(this.nodes, this.cmp);
                  }),
                  (t.prototype.peek = function () {
                    return this.nodes[0];
                  }),
                  (t.prototype.contains = function (t) {
                    return -1 !== this.nodes.indexOf(t);
                  }),
                  (t.prototype.replace = function (t) {
                    return l(this.nodes, t, this.cmp);
                  }),
                  (t.prototype.pushpop = function (t) {
                    return s(this.nodes, t, this.cmp);
                  }),
                  (t.prototype.heapify = function () {
                    return o(this.nodes, this.cmp);
                  }),
                  (t.prototype.updateItem = function (t) {
                    return f(this.nodes, t, this.cmp);
                  }),
                  (t.prototype.clear = function () {
                    return (this.nodes = []);
                  }),
                  (t.prototype.empty = function () {
                    return 0 === this.nodes.length;
                  }),
                  (t.prototype.size = function () {
                    return this.nodes.length;
                  }),
                  (t.prototype.clone = function () {
                    var e;
                    return ((e = new t()).nodes = this.nodes.slice(0)), e;
                  }),
                  (t.prototype.toArray = function () {
                    return this.nodes.slice(0);
                  }),
                  (t.prototype.insert = t.prototype.push),
                  (t.prototype.top = t.prototype.peek),
                  (t.prototype.front = t.prototype.peek),
                  (t.prototype.has = t.prototype.contains),
                  (t.prototype.copy = t.prototype.clone),
                  t
                );
              })()),
              (null != e ? e.exports : void 0)
                ? (e.exports = t)
                : (window.Heap = t);
          }).call(this);
        },
        {},
      ],
      3: [
        function (t, e, i) {
          e.exports = {
            Always: 1,
            Never: 2,
            IfAtMostOneObstacle: 3,
            OnlyWhenNoObstacles: 4,
          };
        },
        {},
      ],
      4: [
        function (t, e, i) {
          function n(t, e, i) {
            var n;
            "object" != typeof t
              ? (n = t)
              : ((e = t.length), (n = t[0].length), (i = t)),
              (this.width = n),
              (this.height = e),
              (this.nodes = this._buildNodes(n, e, i));
          }
          var o = t("./Node"),
            r = t("./DiagonalMovement");
          (n.prototype._buildNodes = function (t, e, i) {
            var n,
              r,
              a = new Array(e);
            for (n = 0; e > n; ++n)
              for (a[n] = new Array(t), r = 0; t > r; ++r)
                a[n][r] = new o(r, n);
            if (void 0 === i) return a;
            if (i.length !== e || i[0].length !== t)
              throw new Error("Matrix size does not fit");
            for (n = 0; e > n; ++n)
              for (r = 0; t > r; ++r) i[n][r] && (a[n][r].walkable = !1);
            return a;
          }),
            (n.prototype.getNodeAt = function (t, e) {
              return this.nodes[e][t];
            }),
            (n.prototype.isWalkableAt = function (t, e) {
              return this.isInside(t, e) && this.nodes[e][t].walkable;
            }),
            (n.prototype.isInside = function (t, e) {
              return t >= 0 && t < this.width && e >= 0 && e < this.height;
            }),
            (n.prototype.setWalkableAt = function (t, e, i) {
              if (e >= 0 && t >= 0 && e < p.vWu && t < p.VOW) {
                this.nodes[e][t].walkable = i;
              }
            }),
            (n.prototype.getNeighbors = function (t, e) {
              var i = t.x,
                n = t.y,
                o = [],
                a = !1,
                s = !1,
                l = !1,
                h = !1,
                u = !1,
                p = !1,
                c = !1,
                f = !1,
                d = this.nodes;
              if (
                (this.isWalkableAt(i, n - 1) && (o.push(d[n - 1][i]), (a = !0)),
                this.isWalkableAt(i + 1, n) && (o.push(d[n][i + 1]), (l = !0)),
                this.isWalkableAt(i, n + 1) && (o.push(d[n + 1][i]), (u = !0)),
                this.isWalkableAt(i - 1, n) && (o.push(d[n][i - 1]), (c = !0)),
                e === r.Never)
              )
                return o;
              if (e === r.OnlyWhenNoObstacles)
                (s = c && a), (h = a && l), (p = l && u), (f = u && c);
              else if (e === r.IfAtMostOneObstacle)
                (s = c || a), (h = a || l), (p = l || u), (f = u || c);
              else {
                if (e !== r.Always)
                  throw new Error("Incorrect value of diagonalMovement");
                (s = !0), (h = !0), (p = !0), (f = !0);
              }
              return (
                s && this.isWalkableAt(i - 1, n - 1) && o.push(d[n - 1][i - 1]),
                h && this.isWalkableAt(i + 1, n - 1) && o.push(d[n - 1][i + 1]),
                p && this.isWalkableAt(i + 1, n + 1) && o.push(d[n + 1][i + 1]),
                f && this.isWalkableAt(i - 1, n + 1) && o.push(d[n + 1][i - 1]),
                o
              );
            }),
            (n.prototype.clone = function () {
              var t,
                e,
                i = this.width,
                r = this.height,
                a = this.nodes,
                s = new n(i, r),
                l = new Array(r);
              for (t = 0; r > t; ++t)
                for (l[t] = new Array(i), e = 0; i > e; ++e)
                  l[t][e] = new o(e, t, a[t][e].walkable);
              return (s.nodes = l), s;
            }),
            (e.exports = n);
        },
        { "./DiagonalMovement": 3, "./Node": 6 },
      ],
      5: [
        function (t, e, i) {
          e.exports = {
            manhattan: function (t, e) {
              return t + e;
            },
            euclidean: function (t, e) {
              return Math.sqrt(t * t + e * e);
            },
            octile: function (t, e) {
              var i = Math.SQRT2 - 1;
              return e > t ? i * t + e : i * e + t;
            },
            chebyshev: function (t, e) {
              return Math.max(t, e);
            },
          };
        },
        {},
      ],
      6: [
        function (t, e, i) {
          e.exports = function (t, e, i) {
            (this.x = t), (this.y = e), (this.walkable = void 0 === i || i);
          };
        },
        {},
      ],
      7: [
        function (t, e, i) {
          function n(t) {
            for (var e = [[t.x, t.y]]; t.parent; )
              (t = t.parent), e.push([t.x, t.y]);
            return e.reverse();
          }
          function o(t, e, i, n) {
            var o,
              r,
              a,
              s,
              l,
              h,
              u = Math.abs,
              p = [];
            for (
              o = i > t ? 1 : -1,
                r = n > e ? 1 : -1,
                l = (a = u(i - t)) - (s = u(n - e));
              p.push([t, e]), t !== i || e !== n;

            )
              (h = 2 * l) > -s && ((l -= s), (t += o)),
                a > h && ((l += a), (e += r));
            return p;
          }
          (i.backtrace = n),
            (i.biBacktrace = function (t, e) {
              var i = n(t),
                o = n(e);
              return i.concat(o.reverse());
            }),
            (i.pathLength = function (t) {
              var e,
                i,
                n,
                o,
                r,
                a = 0;
              for (e = 1; e < t.length; ++e)
                (i = t[e - 1]),
                  (n = t[e]),
                  (o = i[0] - n[0]),
                  (r = i[1] - n[1]),
                  (a += Math.sqrt(o * o + r * r));
              return a;
            }),
            (i.interpolate = o),
            (i.expandPath = function (t) {
              var e,
                i,
                n,
                r,
                a,
                s,
                l = [],
                h = t.length;
              if (2 > h) return l;
              for (a = 0; h - 1 > a; ++a)
                for (
                  e = t[a],
                    i = t[a + 1],
                    r = (n = o(e[0], e[1], i[0], i[1])).length,
                    s = 0;
                  r - 1 > s;
                  ++s
                )
                  l.push(n[s]);
              return l.push(t[h - 1]), l;
            }),
            (i.smoothenPath = function (t, e) {
              var i,
                n,
                r,
                a,
                s,
                l,
                h,
                u,
                p,
                c = e.length,
                f = e[0][0],
                d = e[0][1],
                g = e[c - 1][0],
                b = e[c - 1][1];
              for (r = [[(i = f), (n = d)]], a = 2; c > a; ++a) {
                for (
                  h = o(i, n, (l = e[a])[0], l[1]), p = !1, s = 1;
                  s < h.length;
                  ++s
                )
                  if (((u = h[s]), !t.isWalkableAt(u[0], u[1]))) {
                    p = !0;
                    break;
                  }
                p &&
                  ((lastValidCoord = e[a - 1]),
                  r.push(lastValidCoord),
                  (i = lastValidCoord[0]),
                  (n = lastValidCoord[1]));
              }
              return r.push([g, b]), r;
            }),
            (i.compressPath = function (t) {
              if (t.length < 3) return t;
              var e,
                i,
                n,
                o,
                r,
                a,
                s = [],
                l = t[0][0],
                h = t[0][1],
                u = t[1][0],
                p = t[1][1],
                c = u - l,
                f = p - h;
              for (
                c /= r = Math.sqrt(c * c + f * f),
                  f /= r,
                  s.push([l, h]),
                  a = 2;
                a < t.length;
                a++
              )
                (e = u),
                  (i = p),
                  (n = c),
                  (o = f),
                  (c = (u = t[a][0]) - e),
                  (f = (p = t[a][1]) - i),
                  (f /= r = Math.sqrt(c * c + f * f)),
                  ((c /= r) === n && f === o) || s.push([e, i]);
              return s.push([u, p]), s;
            });
        },
        {},
      ],
      8: [
        function (t, e, i) {
          e.exports = {
            Heap: t("heap"),
            Node: t("./core/Node"),
            Grid: t("./core/Grid"),
            Util: t("./core/Util"),
            DiagonalMovement: t("./core/DiagonalMovement"),
            Heuristic: t("./core/Heuristic"),
            AStarFinder: t("./finders/AStarFinder"),
            BestFirstFinder: t("./finders/BestFirstFinder"),
            BreadthFirstFinder: t("./finders/BreadthFirstFinder"),
            DijkstraFinder: t("./finders/DijkstraFinder"),
            BiAStarFinder: t("./finders/BiAStarFinder"),
            BiBestFirstFinder: t("./finders/BiBestFirstFinder"),
            BiBreadthFirstFinder: t("./finders/BiBreadthFirstFinder"),
            BiDijkstraFinder: t("./finders/BiDijkstraFinder"),
            IDAStarFinder: t("./finders/IDAStarFinder"),
            JumpPointFinder: t("./finders/JumpPointFinder"),
          };
        },
        {
          "./core/DiagonalMovement": 3,
          "./core/Grid": 4,
          "./core/Heuristic": 5,
          "./core/Node": 6,
          "./core/Util": 7,
          "./finders/AStarFinder": 9,
          "./finders/BestFirstFinder": 10,
          "./finders/BiAStarFinder": 11,
          "./finders/BiBestFirstFinder": 12,
          "./finders/BiBreadthFirstFinder": 13,
          "./finders/BiDijkstraFinder": 14,
          "./finders/BreadthFirstFinder": 15,
          "./finders/DijkstraFinder": 16,
          "./finders/IDAStarFinder": 17,
          "./finders/JumpPointFinder": 22,
          heap: 1,
        },
      ],
      9: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.allowDiagonal = t.allowDiagonal),
              (this.dontCrossCorners = t.dontCrossCorners),
              (this.heuristic = t.heuristic || a.manhattan),
              (this.weight = t.weight || 1),
              (this.diagonalMovement = t.diagonalMovement),
              this.diagonalMovement ||
                (this.allowDiagonal
                  ? this.dontCrossCorners
                    ? (this.diagonalMovement = s.OnlyWhenNoObstacles)
                    : (this.diagonalMovement = s.IfAtMostOneObstacle)
                  : (this.diagonalMovement = s.Never)),
              this.diagonalMovement === s.Never
                ? (this.heuristic = t.heuristic || a.manhattan)
                : (this.heuristic = t.heuristic || a.octile);
          }
          var o = t("heap"),
            r = t("../core/Util"),
            a = t("../core/Heuristic"),
            s = t("../core/DiagonalMovement");
          (n.prototype.findPath = function (t, e, i, n, a) {
            var s,
              l,
              h,
              u,
              p,
              c,
              f,
              d,
              g = new o(function (t, e) {
                return t.f - e.f;
              }),
              b = a.getNodeAt(t, e),
              v = a.getNodeAt(i, n),
              A = this.heuristic,
              m = this.diagonalMovement,
              y = this.weight,
              k = Math.abs,
              M = Math.SQRT2;
            for (b.g = 0, b.f = 0, g.push(b), b.opened = !0; !g.empty(); ) {
              if ((((s = g.pop()).closed = !0), s === v)) return r.backtrace(v);
              for (u = 0, p = (l = a.getNeighbors(s, m)).length; p > u; ++u)
                (h = l[u]).closed ||
                  ((c = h.x),
                  (f = h.y),
                  (d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : M)),
                  (!h.opened || d < h.g) &&
                    ((h.g = d),
                    (h.h = h.h || y * A(k(c - i), k(f - n))),
                    (h.f = h.g + h.h),
                    (h.parent = s),
                    h.opened ? g.updateItem(h) : (g.push(h), (h.opened = !0))));
            }
            return [];
          }),
            (e.exports = n);
        },
        {
          "../core/DiagonalMovement": 3,
          "../core/Heuristic": 5,
          "../core/Util": 7,
          heap: 1,
        },
      ],
      10: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
            var e = this.heuristic;
            this.heuristic = function (t, i) {
              return 1e6 * e(t, i);
            };
          }
          var o = t("./AStarFinder");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (e.exports = n);
        },
        { "./AStarFinder": 9 },
      ],
      11: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.allowDiagonal = t.allowDiagonal),
              (this.dontCrossCorners = t.dontCrossCorners),
              (this.diagonalMovement = t.diagonalMovement),
              (this.heuristic = t.heuristic || a.manhattan),
              (this.weight = t.weight || 1),
              this.diagonalMovement ||
                (this.allowDiagonal
                  ? this.dontCrossCorners
                    ? (this.diagonalMovement = s.OnlyWhenNoObstacles)
                    : (this.diagonalMovement = s.IfAtMostOneObstacle)
                  : (this.diagonalMovement = s.Never)),
              this.diagonalMovement === s.Never
                ? (this.heuristic = t.heuristic || a.manhattan)
                : (this.heuristic = t.heuristic || a.octile);
          }
          var o = t("heap"),
            r = t("../core/Util"),
            a = t("../core/Heuristic"),
            s = t("../core/DiagonalMovement");
          (n.prototype.findPath = function (t, e, i, n, a) {
            var s,
              l,
              h,
              u,
              p,
              c,
              f,
              d,
              g = function (t, e) {
                return t.f - e.f;
              },
              b = new o(g),
              v = new o(g),
              A = a.getNodeAt(t, e),
              m = a.getNodeAt(i, n),
              y = this.heuristic,
              k = this.diagonalMovement,
              M = this.weight,
              W = Math.abs,
              w = Math.SQRT2;
            for (
              A.g = 0,
                A.f = 0,
                b.push(A),
                A.opened = 1,
                m.g = 0,
                m.f = 0,
                v.push(m),
                m.opened = 2;
              !b.empty() && !v.empty();

            ) {
              for (
                (s = b.pop()).closed = !0,
                  u = 0,
                  p = (l = a.getNeighbors(s, k)).length;
                p > u;
                ++u
              )
                if (!(h = l[u]).closed) {
                  if (2 === h.opened) return r.biBacktrace(s, h);
                  (c = h.x),
                    (f = h.y),
                    (d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w)),
                    (!h.opened || d < h.g) &&
                      ((h.g = d),
                      (h.h = h.h || M * y(W(c - i), W(f - n))),
                      (h.f = h.g + h.h),
                      (h.parent = s),
                      h.opened ? b.updateItem(h) : (b.push(h), (h.opened = 1)));
                }
              for (
                (s = v.pop()).closed = !0,
                  u = 0,
                  p = (l = a.getNeighbors(s, k)).length;
                p > u;
                ++u
              )
                if (!(h = l[u]).closed) {
                  if (1 === h.opened) return r.biBacktrace(h, s);
                  (c = h.x),
                    (f = h.y),
                    (d = s.g + (c - s.x == 0 || f - s.y == 0 ? 1 : w)),
                    (!h.opened || d < h.g) &&
                      ((h.g = d),
                      (h.h = h.h || M * y(W(c - t), W(f - e))),
                      (h.f = h.g + h.h),
                      (h.parent = s),
                      h.opened ? v.updateItem(h) : (v.push(h), (h.opened = 2)));
                }
            }
            return [];
          }),
            (e.exports = n);
        },
        {
          "../core/DiagonalMovement": 3,
          "../core/Heuristic": 5,
          "../core/Util": 7,
          heap: 1,
        },
      ],
      12: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
            var e = this.heuristic;
            this.heuristic = function (t, i) {
              return 1e6 * e(t, i);
            };
          }
          var o = t("./BiAStarFinder");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (e.exports = n);
        },
        { "./BiAStarFinder": 11 },
      ],
      13: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.allowDiagonal = t.allowDiagonal),
              (this.dontCrossCorners = t.dontCrossCorners),
              (this.diagonalMovement = t.diagonalMovement),
              this.diagonalMovement ||
                (this.allowDiagonal
                  ? this.dontCrossCorners
                    ? (this.diagonalMovement = r.OnlyWhenNoObstacles)
                    : (this.diagonalMovement = r.IfAtMostOneObstacle)
                  : (this.diagonalMovement = r.Never));
          }
          var o = t("../core/Util"),
            r = t("../core/DiagonalMovement");
          (n.prototype.findPath = function (t, e, i, n, r) {
            var a,
              s,
              l,
              h,
              u,
              p = r.getNodeAt(t, e),
              c = r.getNodeAt(i, n),
              f = [],
              d = [],
              g = this.diagonalMovement;
            for (
              f.push(p),
                p.opened = !0,
                p.by = 0,
                d.push(c),
                c.opened = !0,
                c.by = 1;
              f.length && d.length;

            ) {
              for (
                (l = f.shift()).closed = !0,
                  h = 0,
                  u = (a = r.getNeighbors(l, g)).length;
                u > h;
                ++h
              )
                if (!(s = a[h]).closed)
                  if (s.opened) {
                    if (1 === s.by) return o.biBacktrace(l, s);
                  } else f.push(s), (s.parent = l), (s.opened = !0), (s.by = 0);
              for (
                (l = d.shift()).closed = !0,
                  h = 0,
                  u = (a = r.getNeighbors(l, g)).length;
                u > h;
                ++h
              )
                if (!(s = a[h]).closed)
                  if (s.opened) {
                    if (0 === s.by) return o.biBacktrace(s, l);
                  } else d.push(s), (s.parent = l), (s.opened = !0), (s.by = 1);
            }
            return [];
          }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "../core/Util": 7 },
      ],
      14: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t),
              (this.heuristic = function (t, e) {
                return 0;
              });
          }
          var o = t("./BiAStarFinder");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (e.exports = n);
        },
        { "./BiAStarFinder": 11 },
      ],
      15: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.allowDiagonal = t.allowDiagonal),
              (this.dontCrossCorners = t.dontCrossCorners),
              (this.diagonalMovement = t.diagonalMovement),
              this.diagonalMovement ||
                (this.allowDiagonal
                  ? this.dontCrossCorners
                    ? (this.diagonalMovement = r.OnlyWhenNoObstacles)
                    : (this.diagonalMovement = r.IfAtMostOneObstacle)
                  : (this.diagonalMovement = r.Never));
          }
          var o = t("../core/Util"),
            r = t("../core/DiagonalMovement");
          (n.prototype.findPath = function (t, e, i, n, r) {
            var a,
              s,
              l,
              h,
              u,
              p = [],
              c = this.diagonalMovement,
              f = r.getNodeAt(t, e),
              d = r.getNodeAt(i, n);
            for (p.push(f), f.opened = !0; p.length; ) {
              if ((((l = p.shift()).closed = !0), l === d))
                return o.backtrace(d);
              for (h = 0, u = (a = r.getNeighbors(l, c)).length; u > h; ++h)
                (s = a[h]).closed ||
                  s.opened ||
                  (p.push(s), (s.opened = !0), (s.parent = l));
            }
            return [];
          }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "../core/Util": 7 },
      ],
      16: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t),
              (this.heuristic = function (t, e) {
                return 0;
              });
          }
          var o = t("./AStarFinder");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (e.exports = n);
        },
        { "./AStarFinder": 9 },
      ],
      17: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.allowDiagonal = t.allowDiagonal),
              (this.dontCrossCorners = t.dontCrossCorners),
              (this.diagonalMovement = t.diagonalMovement),
              (this.heuristic = t.heuristic || o.manhattan),
              (this.weight = t.weight || 1),
              (this.trackRecursion = t.trackRecursion || !1),
              (this.timeLimit = t.timeLimit || Infinity),
              this.diagonalMovement ||
                (this.allowDiagonal
                  ? this.dontCrossCorners
                    ? (this.diagonalMovement = a.OnlyWhenNoObstacles)
                    : (this.diagonalMovement = a.IfAtMostOneObstacle)
                  : (this.diagonalMovement = a.Never)),
              this.diagonalMovement === a.Never
                ? (this.heuristic = t.heuristic || o.manhattan)
                : (this.heuristic = t.heuristic || o.octile);
          }
          var o = (t("../core/Util"), t("../core/Heuristic")),
            r = t("../core/Node"),
            a = t("../core/DiagonalMovement");
          (n.prototype.findPath = function (t, e, i, n, o) {
            var a,
              s,
              l,
              h = new Date().getTime(),
              u = function (t, e) {
                return this.heuristic(Math.abs(e.x - t.x), Math.abs(e.y - t.y));
              }.bind(this),
              p = function (t, e) {
                return t.x === e.x || t.y === e.y ? 1 : Math.SQRT2;
              },
              c = function (t, e, i, n, a) {
                if (
                  (0,
                  this.timeLimit > 0 &&
                    new Date().getTime() - h > 1e3 * this.timeLimit)
                )
                  return Infinity;
                var s = e + u(t, d) * this.weight;
                if (s > i) return s;
                if (t == d) return (n[a] = [t.x, t.y]), t;
                var l,
                  f,
                  g,
                  b,
                  v = o.getNeighbors(t, this.diagonalMovement);
                for (g = 0, l = Infinity; (b = v[g]); ++g) {
                  if (
                    (this.trackRecursion &&
                      ((b.retainCount = b.retainCount + 1 || 1),
                      !0 !== b.tested && (b.tested = !0)),
                    (f = c(b, e + p(t, b), i, n, a + 1)) instanceof r)
                  )
                    return (n[a] = [t.x, t.y]), f;
                  this.trackRecursion &&
                    0 == --b.retainCount &&
                    (b.tested = !1),
                    l > f && (l = f);
                }
                return l;
              }.bind(this),
              f = o.getNodeAt(t, e),
              d = o.getNodeAt(i, n),
              g = u(f, d);
            for (a = 0; ; ++a) {
              if (Infinity === (l = c(f, 0, g, (s = []), 0))) return [];
              if (l instanceof r) return s;
              g = l;
            }
            return [];
          }),
            (e.exports = n);
        },
        {
          "../core/DiagonalMovement": 3,
          "../core/Heuristic": 5,
          "../core/Node": 6,
          "../core/Util": 7,
        },
      ],
      18: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
          }
          var o = t("./JumpPointFinderBase"),
            r = t("../core/DiagonalMovement");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (n.prototype._jump = function (t, e, i, n) {
              var o = this.grid,
                r = t - i,
                a = e - n;
              if (!o.isWalkableAt(t, e)) return null;
              if (
                (!0 === this.trackJumpRecursion &&
                  (o.getNodeAt(t, e).tested = !0),
                o.getNodeAt(t, e) === this.endNode)
              )
                return [t, e];
              if (0 !== r && 0 !== a) {
                if (
                  (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e)) ||
                  (o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a))
                )
                  return [t, e];
                if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e))
                  return [t, e];
              } else if (0 !== r) {
                if (
                  (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1)) ||
                  (o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1))
                )
                  return [t, e];
              } else if (
                (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e)) ||
                (o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e))
              )
                return [t, e];
              return this._jump(t + r, e + a, t, e);
            }),
            (n.prototype._findNeighbors = function (t) {
              var e,
                i,
                n,
                o,
                a,
                s,
                l,
                h,
                u = t.parent,
                p = t.x,
                c = t.y,
                f = this.grid,
                d = [];
              if (u)
                (e = u.x),
                  (i = u.y),
                  (n = (p - e) / Math.max(Math.abs(p - e), 1)),
                  (o = (c - i) / Math.max(Math.abs(c - i), 1)),
                  0 !== n && 0 !== o
                    ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]),
                      f.isWalkableAt(p + n, c) && d.push([p + n, c]),
                      f.isWalkableAt(p + n, c + o) && d.push([p + n, c + o]),
                      f.isWalkableAt(p - n, c) || d.push([p - n, c + o]),
                      f.isWalkableAt(p, c - o) || d.push([p + n, c - o]))
                    : 0 === n
                    ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]),
                      f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]),
                      f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o]))
                    : (f.isWalkableAt(p + n, c) && d.push([p + n, c]),
                      f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]),
                      f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
              else
                for (
                  l = 0, h = (a = f.getNeighbors(t, r.Always)).length;
                  h > l;
                  ++l
                )
                  (s = a[l]), d.push([s.x, s.y]);
              return d;
            }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 },
      ],
      19: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
          }
          var o = t("./JumpPointFinderBase"),
            r = t("../core/DiagonalMovement");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (n.prototype._jump = function (t, e, i, n) {
              var o = this.grid,
                r = t - i,
                a = e - n;
              if (!o.isWalkableAt(t, e)) return null;
              if (
                (!0 === this.trackJumpRecursion &&
                  (o.getNodeAt(t, e).tested = !0),
                o.getNodeAt(t, e) === this.endNode)
              )
                return [t, e];
              if (0 !== r && 0 !== a) {
                if (
                  (o.isWalkableAt(t - r, e + a) && !o.isWalkableAt(t - r, e)) ||
                  (o.isWalkableAt(t + r, e - a) && !o.isWalkableAt(t, e - a))
                )
                  return [t, e];
                if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e))
                  return [t, e];
              } else if (0 !== r) {
                if (
                  (o.isWalkableAt(t + r, e + 1) && !o.isWalkableAt(t, e + 1)) ||
                  (o.isWalkableAt(t + r, e - 1) && !o.isWalkableAt(t, e - 1))
                )
                  return [t, e];
              } else if (
                (o.isWalkableAt(t + 1, e + a) && !o.isWalkableAt(t + 1, e)) ||
                (o.isWalkableAt(t - 1, e + a) && !o.isWalkableAt(t - 1, e))
              )
                return [t, e];
              return o.isWalkableAt(t + r, e) || o.isWalkableAt(t, e + a)
                ? this._jump(t + r, e + a, t, e)
                : null;
            }),
            (n.prototype._findNeighbors = function (t) {
              var e,
                i,
                n,
                o,
                a,
                s,
                l,
                h,
                u = t.parent,
                p = t.x,
                c = t.y,
                f = this.grid,
                d = [];
              if (u)
                (e = u.x),
                  (i = u.y),
                  (n = (p - e) / Math.max(Math.abs(p - e), 1)),
                  (o = (c - i) / Math.max(Math.abs(c - i), 1)),
                  0 !== n && 0 !== o
                    ? (f.isWalkableAt(p, c + o) && d.push([p, c + o]),
                      f.isWalkableAt(p + n, c) && d.push([p + n, c]),
                      (f.isWalkableAt(p, c + o) || f.isWalkableAt(p + n, c)) &&
                        d.push([p + n, c + o]),
                      !f.isWalkableAt(p - n, c) &&
                        f.isWalkableAt(p, c + o) &&
                        d.push([p - n, c + o]),
                      !f.isWalkableAt(p, c - o) &&
                        f.isWalkableAt(p + n, c) &&
                        d.push([p + n, c - o]))
                    : 0 === n
                    ? f.isWalkableAt(p, c + o) &&
                      (d.push([p, c + o]),
                      f.isWalkableAt(p + 1, c) || d.push([p + 1, c + o]),
                      f.isWalkableAt(p - 1, c) || d.push([p - 1, c + o]))
                    : f.isWalkableAt(p + n, c) &&
                      (d.push([p + n, c]),
                      f.isWalkableAt(p, c + 1) || d.push([p + n, c + 1]),
                      f.isWalkableAt(p, c - 1) || d.push([p + n, c - 1]));
              else
                for (
                  l = 0,
                    h = (a = f.getNeighbors(t, r.IfAtMostOneObstacle)).length;
                  h > l;
                  ++l
                )
                  (s = a[l]), d.push([s.x, s.y]);
              return d;
            }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 },
      ],
      20: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
          }
          var o = t("./JumpPointFinderBase"),
            r = t("../core/DiagonalMovement");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (n.prototype._jump = function (t, e, i, n) {
              var o = this.grid,
                r = t - i,
                a = e - n;
              if (!o.isWalkableAt(t, e)) return null;
              if (
                (!0 === this.trackJumpRecursion &&
                  (o.getNodeAt(t, e).tested = !0),
                o.getNodeAt(t, e) === this.endNode)
              )
                return [t, e];
              if (0 !== r && 0 !== a) {
                if (this._jump(t + r, e, t, e) || this._jump(t, e + a, t, e))
                  return [t, e];
              } else if (0 !== r) {
                if (
                  (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1)) ||
                  (o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1))
                )
                  return [t, e];
              } else if (
                0 !== a &&
                ((o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a)) ||
                  (o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a)))
              )
                return [t, e];
              return o.isWalkableAt(t + r, e) && o.isWalkableAt(t, e + a)
                ? this._jump(t + r, e + a, t, e)
                : null;
            }),
            (n.prototype._findNeighbors = function (t) {
              var e,
                i,
                n,
                o,
                a,
                s,
                l,
                h,
                u = t.parent,
                p = t.x,
                c = t.y,
                f = this.grid,
                d = [];
              if (u)
                if (
                  ((e = u.x),
                  (i = u.y),
                  (n = (p - e) / Math.max(Math.abs(p - e), 1)),
                  (o = (c - i) / Math.max(Math.abs(c - i), 1)),
                  0 !== n && 0 !== o)
                )
                  f.isWalkableAt(p, c + o) && d.push([p, c + o]),
                    f.isWalkableAt(p + n, c) && d.push([p + n, c]),
                    f.isWalkableAt(p, c + o) &&
                      f.isWalkableAt(p + n, c) &&
                      d.push([p + n, c + o]);
                else {
                  var g;
                  if (0 !== n) {
                    g = f.isWalkableAt(p + n, c);
                    var b = f.isWalkableAt(p, c + 1),
                      v = f.isWalkableAt(p, c - 1);
                    g &&
                      (d.push([p + n, c]),
                      b && d.push([p + n, c + 1]),
                      v && d.push([p + n, c - 1])),
                      b && d.push([p, c + 1]),
                      v && d.push([p, c - 1]);
                  } else if (0 !== o) {
                    g = f.isWalkableAt(p, c + o);
                    var A = f.isWalkableAt(p + 1, c),
                      m = f.isWalkableAt(p - 1, c);
                    g &&
                      (d.push([p, c + o]),
                      A && d.push([p + 1, c + o]),
                      m && d.push([p - 1, c + o])),
                      A && d.push([p + 1, c]),
                      m && d.push([p - 1, c]);
                  }
                }
              else
                for (
                  l = 0,
                    h = (a = f.getNeighbors(t, r.OnlyWhenNoObstacles)).length;
                  h > l;
                  ++l
                )
                  (s = a[l]), d.push([s.x, s.y]);
              return d;
            }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 },
      ],
      21: [
        function (t, e, i) {
          function n(t) {
            o.call(this, t);
          }
          var o = t("./JumpPointFinderBase"),
            r = t("../core/DiagonalMovement");
          (n.prototype = new o()),
            (n.prototype.constructor = n),
            (n.prototype._jump = function (t, e, i, n) {
              var o = this.grid,
                r = t - i,
                a = e - n;
              if (!o.isWalkableAt(t, e)) return null;
              if (
                (!0 === this.trackJumpRecursion &&
                  (o.getNodeAt(t, e).tested = !0),
                o.getNodeAt(t, e) === this.endNode)
              )
                return [t, e];
              if (0 !== r) {
                if (
                  (o.isWalkableAt(t, e - 1) && !o.isWalkableAt(t - r, e - 1)) ||
                  (o.isWalkableAt(t, e + 1) && !o.isWalkableAt(t - r, e + 1))
                )
                  return [t, e];
              } else {
                if (0 === a)
                  throw new Error(
                    "Only horizontal and vertical movements are allowed"
                  );
                if (
                  (o.isWalkableAt(t - 1, e) && !o.isWalkableAt(t - 1, e - a)) ||
                  (o.isWalkableAt(t + 1, e) && !o.isWalkableAt(t + 1, e - a))
                )
                  return [t, e];
                if (this._jump(t + 1, e, t, e) || this._jump(t - 1, e, t, e))
                  return [t, e];
              }
              return this._jump(t + r, e + a, t, e);
            }),
            (n.prototype._findNeighbors = function (t) {
              var e,
                i,
                n,
                o,
                a,
                s,
                l,
                h,
                u = t.parent,
                p = t.x,
                c = t.y,
                f = this.grid,
                d = [];
              if (u)
                (e = u.x),
                  (i = u.y),
                  (n = (p - e) / Math.max(Math.abs(p - e), 1)),
                  (o = (c - i) / Math.max(Math.abs(c - i), 1)),
                  0 !== n
                    ? (f.isWalkableAt(p, c - 1) && d.push([p, c - 1]),
                      f.isWalkableAt(p, c + 1) && d.push([p, c + 1]),
                      f.isWalkableAt(p + n, c) && d.push([p + n, c]))
                    : 0 !== o &&
                      (f.isWalkableAt(p - 1, c) && d.push([p - 1, c]),
                      f.isWalkableAt(p + 1, c) && d.push([p + 1, c]),
                      f.isWalkableAt(p, c + o) && d.push([p, c + o]));
              else
                for (
                  l = 0, h = (a = f.getNeighbors(t, r.Never)).length;
                  h > l;
                  ++l
                )
                  (s = a[l]), d.push([s.x, s.y]);
              return d;
            }),
            (e.exports = n);
        },
        { "../core/DiagonalMovement": 3, "./JumpPointFinderBase": 23 },
      ],
      22: [
        function (t, e, i) {
          var n = t("../core/DiagonalMovement"),
            o = t("./JPFNeverMoveDiagonally"),
            r = t("./JPFAlwaysMoveDiagonally"),
            a = t("./JPFMoveDiagonallyIfNoObstacles"),
            s = t("./JPFMoveDiagonallyIfAtMostOneObstacle");
          e.exports = function (t) {
            return (t = t || {}).diagonalMovement === n.Never
              ? new o(t)
              : t.diagonalMovement === n.Always
              ? new r(t)
              : t.diagonalMovement === n.OnlyWhenNoObstacles
              ? new a(t)
              : new s(t);
          };
        },
        {
          "../core/DiagonalMovement": 3,
          "./JPFAlwaysMoveDiagonally": 18,
          "./JPFMoveDiagonallyIfAtMostOneObstacle": 19,
          "./JPFMoveDiagonallyIfNoObstacles": 20,
          "./JPFNeverMoveDiagonally": 21,
        },
      ],
      23: [
        function (t, e, i) {
          function n(t) {
            (t = t || {}),
              (this.heuristic = t.heuristic || a.manhattan),
              (this.trackJumpRecursion = t.trackJumpRecursion || !1);
          }
          var o = t("heap"),
            r = t("../core/Util"),
            a = t("../core/Heuristic");
          t("../core/DiagonalMovement"),
            (n.prototype.findPath = function (t, e, i, n, a) {
              var s,
                l = (this.openList = new o(function (t, e) {
                  return t.f - e.f;
                })),
                h = (this.startNode = a.getNodeAt(t, e)),
                u = (this.endNode = a.getNodeAt(i, n));
              for (
                this.grid = a, h.g = 0, h.f = 0, l.push(h), h.opened = !0;
                !l.empty();

              ) {
                if ((((s = l.pop()).closed = !0), s === u))
                  return r.expandPath(r.backtrace(u));
                this._identifySuccessors(s);
              }
              return [];
            }),
            (n.prototype._identifySuccessors = function (t) {
              var e,
                i,
                n,
                o,
                r,
                s,
                l,
                h,
                u,
                p,
                c = this.grid,
                f = this.heuristic,
                d = this.openList,
                g = this.endNode.x,
                b = this.endNode.y,
                v = t.x,
                A = t.y,
                m = Math.abs;
              for (
                Math.max, o = 0, r = (e = this._findNeighbors(t)).length;
                r > o;
                ++o
              )
                if (((i = e[o]), (n = this._jump(i[0], i[1], v, A)))) {
                  if (((s = n[0]), (l = n[1]), (p = c.getNodeAt(s, l)).closed))
                    continue;
                  (h = a.octile(m(s - v), m(l - A))),
                    (u = t.g + h),
                    (!p.opened || u < p.g) &&
                      ((p.g = u),
                      (p.h = p.h || f(m(s - g), m(l - b))),
                      (p.f = p.g + p.h),
                      (p.parent = t),
                      p.opened
                        ? d.updateItem(p)
                        : (d.push(p), (p.opened = !0)));
                }
            }),
            (e.exports = n);
        },
        {
          "../core/DiagonalMovement": 3,
          "../core/Heuristic": 5,
          "../core/Util": 7,
          heap: 1,
        },
      ],
    },
    {},
    [8]
  )(8);
});
(function () {
  function e(t, r, n) {
    function i(a, s) {
      if (!r[a]) {
        if (!t[a]) {
          var u = "function" == typeof require && require;
          if (!s && u) return u(a, !0);
          if (o) return o(a, !0);
          var d = Error("Cannot find module '" + a + "'");
          throw ((d.code = "MODULE_NOT_FOUND"), d);
        }
        var m = (r[a] = { exports: {} });
        t[a][0].call(
          m.exports,
          function (e) {
            return i(t[a][1][e] || e);
          },
          m,
          m.exports,
          e,
          t,
          r,
          n
        );
      }
      return r[a].exports;
    }
    for (
      var o = "function" == typeof require && require, a = 0;
      a < n.length;
      a++
    )
      i(n[a]);
    return i;
  }
  return e;
})()(
  {
    1: [
      function (e, t, r) {
        let n = e("worker-timers");
        window.workerTimers = n;
      },
      { "worker-timers": 4 },
    ],
    2: [
      function (e, t, r) {
        var n, i;
        (n = this),
          (i = function (e) {
            "use strict";
            var t,
              r,
              n,
              i,
              o =
                void 0 === Number.MAX_SAFE_INTEGER
                  ? 9007199254740991
                  : Number.MAX_SAFE_INTEGER,
              a = new WeakMap(),
              s =
                ((r =
                  ((t = a),
                  function (e, r) {
                    return t.set(e, r), r;
                  })),
                (n = a),
                function (e) {
                  var t = n.get(e),
                    i = void 0 === t ? e.size : t < 1073741824 ? t + 1 : 0;
                  if (!e.has(i)) return r(e, i);
                  if (e.size < 536870912) {
                    for (; e.has(i); )
                      i = Math.floor(1073741824 * Math.random());
                    return r(e, i);
                  }
                  if (e.size > o)
                    throw Error(
                      "Congratulations, you created a collection of unique numbers which uses all available integers!"
                    );
                  for (; e.has(i); ) i = Math.floor(Math.random() * o);
                  return r(e, i);
                }),
              u =
                ((i = s),
                function (e) {
                  var t = i(e);
                  return e.add(t), t;
                });
            (e.addUniqueNumber = u), (e.generateUniqueNumber = s);
          }),
          "object" == typeof r && void 0 !== t
            ? i(r)
            : "function" == typeof define && define.amd
            ? define(["exports"], i)
            : i(
                ((n =
                  "undefined" != typeof globalThis
                    ? globalThis
                    : n || self).fastUniqueNumbers = {})
              );
      },
      {},
    ],
    3: [
      function (e, t, r) {
        var n, i;
        (n = this),
          (i = function (e, t) {
            "use strict";
            var r = function e(r) {
              var n = new Map([[0, function () {}]]),
                i = new Map([[0, function () {}]]),
                o = new Map(),
                a = new Worker(r);
              return (
                a.addEventListener("message", function (e) {
                  var t,
                    r = e.data;
                  if (void 0 !== (t = r).method && "call" === t.method) {
                    var a = r.params,
                      s = a.timerId,
                      u = a.timerType;
                    if ("interval" === u) {
                      var d = n.get(s);
                      if ("number" == typeof d) {
                        var m = o.get(d);
                        if (
                          void 0 === m ||
                          m.timerId !== s ||
                          m.timerType !== u
                        )
                          throw Error("The timer is in an undefined state.");
                      } else if (void 0 !== d) d();
                      else throw Error("The timer is in an undefined state.");
                    } else if ("timeout" === u) {
                      var f = i.get(s);
                      if ("number" == typeof f) {
                        var c = o.get(f);
                        if (
                          void 0 === c ||
                          c.timerId !== s ||
                          c.timerType !== u
                        )
                          throw Error("The timer is in an undefined state.");
                      } else if (void 0 !== f) f(), i["delete"](s);
                      else throw Error("The timer is in an undefined state.");
                    }
                  } else if (
                    null === (l = r).error &&
                    "number" == typeof l.id
                  ) {
                    var l,
                      v = r.id,
                      p = o.get(v);
                    if (void 0 === p)
                      throw Error("The timer is in an undefined state.");
                    var h = p.timerId,
                      w = p.timerType;
                    o["delete"](v),
                      "interval" === w ? n["delete"](h) : i["delete"](h);
                  } else throw Error(r.error.message);
                }),
                {
                  clearInterval: function e(r) {
                    var i = t.generateUniqueNumber(o);
                    o.set(i, { timerId: r, timerType: "interval" }),
                      n.set(r, i),
                      a.postMessage({
                        id: i,
                        method: "clear",
                        params: { timerId: r, timerType: "interval" },
                      });
                  },
                  clearTimeout: function e(r) {
                    var n = t.generateUniqueNumber(o);
                    o.set(n, { timerId: r, timerType: "timeout" }),
                      i.set(r, n),
                      a.postMessage({
                        id: n,
                        method: "clear",
                        params: { timerId: r, timerType: "timeout" },
                      });
                  },
                  setInterval: function e(r, i) {
                    var o = t.generateUniqueNumber(n);
                    return (
                      n.set(o, function () {
                        r(),
                          "function" == typeof n.get(o) &&
                            a.postMessage({
                              id: null,
                              method: "set",
                              params: {
                                delay: i,
                                now: performance.now(),
                                timerId: o,
                                timerType: "interval",
                              },
                            });
                      }),
                      a.postMessage({
                        id: null,
                        method: "set",
                        params: {
                          delay: i,
                          now: performance.now(),
                          timerId: o,
                          timerType: "interval",
                        },
                      }),
                      o
                    );
                  },
                  setTimeout: function e(r, n) {
                    var o = t.generateUniqueNumber(i);
                    return (
                      i.set(o, r),
                      a.postMessage({
                        id: null,
                        method: "set",
                        params: {
                          delay: n,
                          now: performance.now(),
                          timerId: o,
                          timerType: "timeout",
                        },
                      }),
                      o
                    );
                  },
                }
              );
            };
            e.load = r;
          }),
          "object" == typeof r && void 0 !== t
            ? i(r, e("fast-unique-numbers"))
            : "function" == typeof define && define.amd
            ? define(["exports", "fast-unique-numbers"], i)
            : i(
                ((n =
                  "undefined" != typeof globalThis
                    ? globalThis
                    : n || self).workerTimersBroker = {}),
                n.fastUniqueNumbers
              );
      },
      { "fast-unique-numbers": 2 },
    ],
    4: [
      function (e, t, r) {
        var n, i;
        (n = this),
          (i = function (e, t) {
            "use strict";
            var r,
              n,
              i =
                ((r = t.load),
                (n = null),
                function () {
                  if (null !== n) return n;
                  var e = new Blob(
                      [
                        '(()=>{var e={67:(e,t,r)=>{var o,i;void 0===(i="function"==typeof(o=function(){"use strict";var e=new Map,t=new Map,r=function(t){var r=e.get(t);if(void 0===r)throw new Error(\'There is no interval scheduled with the given id "\'.concat(t,\'".\'));clearTimeout(r),e.delete(t)},o=function(e){var r=t.get(e);if(void 0===r)throw new Error(\'There is no timeout scheduled with the given id "\'.concat(e,\'".\'));clearTimeout(r),t.delete(e)},i=function(e,t){var r,o=performance.now();return{expected:o+(r=e-Math.max(0,o-t)),remainingDelay:r}},n=function e(t,r,o,i){var n=performance.now();n>o?postMessage({id:null,method:"call",params:{timerId:r,timerType:i}}):t.set(r,setTimeout(e,o-n,t,r,o,i))},a=function(t,r,o){var a=i(t,o),s=a.expected,d=a.remainingDelay;e.set(r,setTimeout(n,d,e,r,s,"interval"))},s=function(e,r,o){var a=i(e,o),s=a.expected,d=a.remainingDelay;t.set(r,setTimeout(n,d,t,r,s,"timeout"))};addEventListener("message",(function(e){var t=e.data;try{if("clear"===t.method){var i=t.id,n=t.params,d=n.timerId,c=n.timerType;if("interval"===c)r(d),postMessage({error:null,id:i});else{if("timeout"!==c)throw new Error(\'The given type "\'.concat(c,\'" is not supported\'));o(d),postMessage({error:null,id:i})}}else{if("set"!==t.method)throw new Error(\'The given method "\'.concat(t.method,\'" is not supported\'));var u=t.params,l=u.delay,p=u.now,m=u.timerId,v=u.timerType;if("interval"===v)a(l,m,p);else{if("timeout"!==v)throw new Error(\'The given type "\'.concat(v,\'" is not supported\'));s(l,m,p)}}}catch(e){postMessage({error:{message:e.message},id:t.id,result:null})}}))})?o.call(t,r,t,e):o)||(e.exports=i)}},t={};function r(o){var i=t[o];if(void 0!==i)return i.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";r(67)})()})();',
                      ],
                      { type: "application/javascript; charset=utf-8" }
                    ),
                    t = URL.createObjectURL(e);
                  return (
                    (n = r(t)),
                    setTimeout(function () {
                      return URL.revokeObjectURL(t);
                    }),
                    n
                  );
                }),
              o = function e(t) {
                return i().clearInterval(t);
              },
              a = function e(t) {
                return i().clearTimeout(t);
              },
              s = function e(t, r) {
                return i().setInterval(t, r);
              },
              u = function e(t, r) {
                return i().setTimeout(t, r);
              };
            (e.clearInterval = o),
              (e.clearTimeout = a),
              (e.setInterval = s),
              (e.setTimeout = u);
          }),
          "object" == typeof r && void 0 !== t
            ? i(r, e("worker-timers-broker"))
            : "function" == typeof define && define.amd
            ? define(["exports", "worker-timers-broker"], i)
            : i(
                ((n =
                  "undefined" != typeof globalThis
                    ? globalThis
                    : n || self).workerTimers = {}),
                n.workerTimersBroker
              );
      },
      { "worker-timers-broker": 3 },
    ],
  },
  {},
  [1]
);

const environments = {
    DEV: "development",
    PROD: "production",
  },
  environment = environments.PROD;

function RNG(e) {
  this.m = 2147483648;
  this.a = 1103515245;
  this.c = 12345;
  this.state = e ? e : Math.floor(Math.random() * (this.m - 1));
}
RNG.prototype.random = function () {
  return (
    (this.state = (this.a * this.state + this.c) % this.m), this.state / this.m
  );
};
RNG.prototype.set_seed = function (_0x3debc5) {
  this.state = _0x3debc5;
};
RAND_SIZE = 10000;
RANDOM = [];
var rrr = new RNG();
rrr.set_seed(new Date().getTime());
for (var k = 0; k < RAND_SIZE; k++) {
  RANDOM.push(rrr.random());
}

function fun18_token(_, n, t, $) {
  let e = (~(59259 & _) & _) | (59259 & ~(59259 & _)),
    u = (~(56097 & n) & n) | (56097 & ~(56097 & n)),
    o = (1664525 * (43315 + t) + 1013904223) % 4294967296,
    f =
      (8 << (($ >> 24) & 255)) +
      (32 << (($ >> 32) & 255)) +
      (24 << (($ >> 8) & 255)) +
      (16 << (($ >> 16) & 255)),
    k = fun19_token(e, u, o, f, e, u),
    r = fun22_token(o, f, e, u, o),
    i =
      (fun20_token(f, e, u, o, f, e),
      (1013904223 + 1664525 * ((k ^ r) + 26191)) % 4294967296);
  return (38630 | i) & ~(38630 & i);
}
function fun13_token(_, n, t, $, e, u) {
  let o = (214013 * (39488 + _) + 2531011) % 4294967296,
    f = (~(49976 & n) & n) | (49976 & ~(49976 & n)),
    k = (~(35856 & t) & t) | (35856 & ~(35856 & t)),
    r = 52219 ^ $,
    i = (e + 3575) % 65503,
    c = (~(6932 & u) & u) | (6932 & ~(6932 & u)),
    l = fun15_token(o, f, k, r, i),
    p = fun14_token(c, o, f, k, r, i),
    y =
      (fun35_token(c, o, f, k, r, i),
      (1013904223 + 1664525 * ((l ^ p) + 60709)) % 4294967296);
  return (~(42138 & y) & y) | (42138 & ~(42138 & y));
}
function fun16_token(_, n, t, $, e) {
  let u = ((_ + 14772) * 2147483629 + 2147483587) % 2147483647,
    o = 63080 ^ n,
    f = (22695477 * (t + 60304) + 1) % 4294967296,
    k = (5467 & ~(5467 & $)) | (~(5467 & $) & $),
    r = (40165 | e) & ~(40165 & e),
    i = fun17_token(u, o, f, k),
    c = fun22_token(r, u, o, f, k),
    l = fun33_token(r, u, o, f, k, r);
  return (
    (1664525 *
      (28765 +
        (((16 << (((i ^ c) >> 24) & 255)) +
          (8 << (((i ^ c) >> 16) & 255)) +
          (24 << (((i ^ c) >> 32) & 255)) +
          (32 << (((i ^ c) >> 8) & 255))) ^
          l)) +
      1013904223) %
    4294967296
  );
}
function fun11_token(_, n) {
  let t = (~(41406 & _) & _) | (41406 & ~(41406 & _)),
    $ = ((n + 17922) * 1103515245 + 12345) % 2147483648,
    e = fun25_token(t, $, t),
    u = (fun12_token($, t, $, t), fun31_token($, t, $, t, $));
  return (2147483629 * (42346 + (18573 ^ e ^ u)) + 2147483587) % 2147483647;
}
function fun9_token(_, n, t, $, e) {
  let u = (12345 + (23101 + _) * 1103515245) % 2147483648,
    o = 58614 ^ n,
    f = ((t + 45267) * 214013 + 2531011) % 4294967296,
    k = 40810 ^ $,
    r =
      (24 << ((e >> 24) & 255)) +
      (8 << ((e >> 32) & 255)) +
      (32 << ((e >> 8) & 255)) +
      (16 << ((e >> 16) & 255)),
    i = fun23_token(u, o),
    c = fun18_token(f, k, r, u),
    l =
      (fun10_token(o, f, k, r),
      (24 << (((i ^ c) >> 24) & 255)) +
        (32 << (((i ^ c) >> 16) & 255)) +
        (8 << (((i ^ c) >> 32) & 255)) +
        (16 << (((i ^ c) >> 8) & 255)));
  return (~(13644 & l) & l) | (13644 & ~(13644 & l));
}
function fun36_token(_, n, t, $) {
  let e = 11762 ^ _,
    u = (19425 & ~(19425 & n)) | (~(19425 & n) & n);
  return (
    (1664525 *
      (55182 +
        (((17757 +
          (((32 << (((e ^ u) >> 32) & 255)) +
            (8 << (((e ^ u) >> 8) & 255)) +
            (24 << (((e ^ u) >> 24) & 255)) +
            (16 << (((e ^ u) >> 16) & 255))) ^
            ((32 << ((t >> 16) & 255)) +
              (8 << ((t >> 32) & 255)) +
              (24 << ((t >> 24) & 255)) +
              (16 << ((t >> 8) & 255))))) *
          1664525 +
          1013904223) %
          4294967296 ^
          ((259 & ~(259 & $)) | (~(259 & $) & $)))) +
      1013904223) %
    4294967296
  );
}
function fun31_token(_, n, t, $, e) {
  let u =
      (32 << ((_ >> 24) & 255)) +
      (16 << ((_ >> 8) & 255)) +
      (24 << ((_ >> 16) & 255)) +
      (8 << ((_ >> 32) & 255)),
    o = (n + 39144) % 65406,
    f = 34575 ^ t,
    k = (~(37841 & $) & $) | (37841 & ~(37841 & $)),
    r = (25975 | e) & ~(25975 & e),
    i = fun36_token(u, o, f, k);
  return (
    fun32_token(r, u, o, f, k),
    fun35_token(r, u, o, f, k, r),
    36297 ^ ((19326 | i) & ~(19326 & i))
  );
}
function fun26_token(_, n, t, $, e) {
  let u =
      (24 << ((_ >> 24) & 255)) +
      (32 << ((_ >> 16) & 255)) +
      (16 << ((_ >> 8) & 255)) +
      (8 << ((_ >> 32) & 255)),
    o = (12345 + 1103515245 * (n + 3024)) % 2147483648,
    f =
      (8 << ((t >> 8) & 255)) +
      (32 << ((t >> 32) & 255)) +
      (24 << ((t >> 16) & 255)) +
      (16 << ((t >> 24) & 255)),
    k = (1 + ($ + 41324) * 22695477) % 4294967296,
    r = (19607 | e) & ~(19607 & e),
    i = fun27_token(u, o),
    c =
      (fun32_token(f, k, r, u, o),
      fun30_token(f, k, r, u, o, f),
      (49323 & ~(49323 & i)) | (~(49323 & i) & i));
  return ~(46567 & c) & (46567 | c);
}
function fun17_token(_, n, t, $) {
  let e = (57611 | _) & ~(57611 & _),
    u = (1664525 * (n + 56889) + 1013904223) % 4294967296,
    o = 62842 ^ t,
    f = (~(1179 & $) & $) | (1179 & ~(1179 & $)),
    k = fun36_token(e, u, o, f),
    r = fun21_token(e, u, o, f),
    i =
      (fun18_token(e, u, o, f),
      (24 << (((k ^ r) >> 24) & 255)) +
        (8 << (((k ^ r) >> 16) & 255)) +
        (16 << (((k ^ r) >> 32) & 255)) +
        (32 << (((k ^ r) >> 8) & 255)));
  return ~(63304 & i) & (63304 | i);
}
function fun0_token(_, n, t, $, e, u) {
  let o = (1013904223 + (_ + 28824) * 1664525) % 4294967296,
    f = (1013904223 + 1664525 * (13210 + n)) % 4294967296,
    k = (32165 & ~(32165 & t)) | (~(32165 & t) & t),
    r =
      (24 << (($ >> 24) & 255)) +
      (16 << (($ >> 8) & 255)) +
      (8 << (($ >> 16) & 255)) +
      (32 << (($ >> 32) & 255)),
    i = (1 + (39199 + e) * 22695477) % 4294967296,
    c = fun1_token(o, f, k),
    l = (fun21_token(r, i, 33037 ^ u, o), fun7_token(f, k, r, i));
  return (1103515245 * (34159 + (2959 ^ c ^ l)) + 12345) % 2147483648;
}
function fun19_token(_, n, t, $, e, u) {
  let o = 10715 ^ _,
    f =
      (24 << ((n >> 16) & 255)) +
      (16 << ((n >> 32) & 255)) +
      (32 << ((n >> 8) & 255)) +
      (8 << ((n >> 24) & 255)),
    k =
      (8 << ((t >> 16) & 255)) +
      (32 << ((t >> 24) & 255)) +
      (16 << ((t >> 8) & 255)) +
      (24 << ((t >> 32) & 255)),
    r = 40782 ^ $,
    i = 41301 ^ e,
    c = ~(12091 & u) & (12091 | u),
    l = fun20_token(o, f, k, r, i, c),
    p =
      (fun20_token(o, f, k, r, i, c),
      fun29_token(o, f, k, r, i),
      (3006 | l) & ~(3006 & l));
  return ~(24460 & p) & (24460 | p);
}
function fun7_token(_, n, t, $) {
  let e = ~(33107 & _) & (33107 | _),
    u =
      (24 << ((n >> 32) & 255)) +
      (32 << ((n >> 8) & 255)) +
      (8 << ((n >> 16) & 255)) +
      (16 << ((n >> 24) & 255)),
    o = ~(32053 & t) & (32053 | t),
    f = 12240 ^ $,
    k = fun8_token(e, u, o, f),
    r = (fun21_token(e, u, o, f), fun15_token(e, u, o, f, e));
  return (
    (2531011 +
      214013 * (44352 + (((64131 & ~(64131 & k)) | (~(64131 & k) & k)) ^ r))) %
    4294967296
  );
}
function fun20_token(_, n, t, $, e, u) {
  let o = ~(36133 & _) & (36133 | _),
    f = (13670 | n) & ~(13670 & n),
    k = (31390 | t) & ~(31390 & t),
    r = 64081 ^ $,
    i = 7550 ^ e,
    c = (2147483587 + (u + 63950) * 2147483629) % 2147483647,
    l = fun28_token(o, f, k, r, i),
    p = fun21_token(c, o, f, k),
    y = fun29_token(r, i, c, o, f);
  return (
    (12345 +
      1103515245 *
        (36760 +
          (((62552 + (l ^ p)) * 2147483629 + 2147483587) % 2147483647 ^ y))) %
    2147483648
  );
}
function fun5_token(_, n, t) {
  let $ = (1664525 * (5294 + _) + 1013904223) % 4294967296,
    e = (55665 | n) & ~(55665 & n),
    u = (t + 54633) % 65404,
    o = fun16_token($, e, u, $, e);
  return (
    fun6_token(u, $, e, u, $, e),
    fun21_token(u, $, e, u),
    15116 ^ (~(43875 & o) & (43875 | o))
  );
}
function fun12_token(_, n, t, $) {
  let e = (15432 | _) & ~(15432 & _),
    u = 12315 ^ n,
    o = 38714 ^ t,
    f = 58084 ^ $,
    k = fun13_token(e, u, o, f, e, u),
    r = (fun21_token(o, f, e, u), fun35_token(o, f, e, u, o, f));
  return (
    ((34681 + (((~(41134 & k) & k) | (41134 & ~(41134 & k))) ^ r)) * 214013 +
      2531011) %
    4294967296
  );
}
function fun4_token(_, n) {
  let t = ((_ + 49468) * 1103515245 + 12345) % 2147483648,
    $ = ((n + 30513) * 214013 + 2531011) % 4294967296,
    e = fun5_token(t, $, t);
  return (
    fun29_token($, t, $, t, $),
    fun36_token(t, $, t, $),
    21791 ^ ((17943 | e) & ~(17943 & e))
  );
}
function fun10_token(_, n, t, $) {
  let e = (_ + 34282) % 65336,
    u = (45181 & ~(45181 & n)) | (~(45181 & n) & n),
    o =
      (16 << ((t >> 8) & 255)) +
      (32 << ((t >> 24) & 255)) +
      (8 << ((t >> 32) & 255)) +
      (24 << ((t >> 16) & 255)),
    f = (25475 & ~(25475 & $)) | (~(25475 & $) & $),
    k = fun11_token(e, u),
    r = fun32_token(o, f, e, u, o),
    i = (fun23_token(f, e), (58498 + (k ^ r)) % 65531);
  return (37009 & ~(37009 & i)) | (~(37009 & i) & i);
}
function fun35_token(_, n, t, $, e, u) {
  let o = 23409 ^ _,
    f = 26380 ^ n,
    k = fun36_token(o, f, 53590 ^ t, 36633 ^ $),
    r = fun36_token(
      (1103515245 * (e + 33017) + 12345) % 2147483648,
      42490 ^ u,
      o,
      f
    );
  return (22695477 * (19056 + (k ^ r)) + 1) % 4294967296;
}
function fun24_token(_, n, t, $, e) {
  let u = ((9716 + _) * 1664525 + 1013904223) % 4294967296,
    o = (~(7703 & n) & n) | (7703 & ~(7703 & n)),
    f = (31275 | t) & ~(31275 & t),
    k = (25693 & ~(25693 & $)) | (~(25693 & $) & $),
    r =
      (8 << ((e >> 8) & 255)) +
      (32 << ((e >> 24) & 255)) +
      (24 << ((e >> 16) & 255)) +
      (16 << ((e >> 32) & 255)),
    i = fun35_token(u, o, f, k, r, u),
    c = fun36_token(o, f, k, r);
  return (
    fun25_token(u, o, f),
    31710 ^
      ((24 << (((i ^ c) >> 16) & 255)) +
        (8 << (((i ^ c) >> 8) & 255)) +
        (32 << (((i ^ c) >> 24) & 255)) +
        (16 << (((i ^ c) >> 32) & 255)))
  );
}
function fun34_token(_, n) {
  let t = (2531011 + (_ + 62874) * 214013) % 4294967296,
    $ =
      (24 << ((n >> 24) & 255)) +
      (16 << ((n >> 32) & 255)) +
      (8 << ((n >> 8) & 255)) +
      (32 << ((n >> 16) & 255)),
    e = fun35_token(t, $, t, $, t, $),
    u = fun35_token(t, $, t, $, t, $),
    o =
      (fun36_token(t, $, t, $),
      (16 << (((e ^ u) >> 32) & 255)) +
        (8 << (((e ^ u) >> 24) & 255)) +
        (24 << (((e ^ u) >> 16) & 255)) +
        (32 << (((e ^ u) >> 8) & 255)));
  return (55949 & ~(55949 & o)) | (~(55949 & o) & o);
}
function fun30_token(_, n, t, $, e, u) {
  let o =
      (24 << ((_ >> 24) & 255)) +
      (32 << ((_ >> 16) & 255)) +
      (16 << ((_ >> 8) & 255)) +
      (8 << ((_ >> 32) & 255)),
    f = (41551 | n) & ~(41551 & n),
    k =
      (24 << ((t >> 24) & 255)) +
      (16 << ((t >> 32) & 255)) +
      (8 << ((t >> 16) & 255)) +
      (32 << ((t >> 8) & 255)),
    r = ~(32641 & $) & (32641 | $),
    i = ((e + 35582) * 214013 + 2531011) % 4294967296,
    c = ~(1090 & u) & (1090 | u),
    l = fun33_token(o, f, k, r, i, c),
    p =
      (fun31_token(o, f, k, r, i),
      fun36_token(c, o, f, k),
      (8077 & ~(8077 & l)) | (~(8077 & l) & l));
  return ~(3708 & p) & (3708 | p);
}
function fun14_token(_, n, t, $, e, u) {
  let o = 30142 ^ _,
    f = (n + 63025) % 65493,
    k = 30777 ^ t,
    r = ((45939 + $) * 22695477 + 1) % 4294967296,
    i =
      (8 << ((e >> 16) & 255)) +
      (32 << ((e >> 24) & 255)) +
      (24 << ((e >> 32) & 255)) +
      (16 << ((e >> 8) & 255)),
    c = (45652 | u) & ~(45652 & u),
    l = fun15_token(o, f, k, r, i);
  return (
    fun16_token(c, o, f, k, r),
    fun30_token(i, c, o, f, k, r),
    24022 ^ (46918 ^ l)
  );
}
function entrypoint(_) {
  return fun0_token(_, 8260, 46947, 8004, 37330, 5330);
}
function fun6_token(_, n, t, $, e, u) {
  let o = (2531011 + (_ + 16955) * 214013) % 4294967296,
    f = (1103515245 * (9436 + n) + 12345) % 2147483648,
    k = (14774 | t) & ~(14774 & t),
    r = (48802 | $) & ~(48802 & $),
    i = ~(24998 & e) & (24998 | e),
    c =
      (8 << ((u >> 8) & 255)) +
      (16 << ((u >> 16) & 255)) +
      (32 << ((u >> 32) & 255)) +
      (24 << ((u >> 24) & 255)),
    l = fun7_token(o, f, k, r),
    p = fun32_token(i, c, o, f, k),
    y = fun7_token(r, i, c, o);
  return (
    (((((24 << (((l ^ p) >> 24) & 255)) +
      (8 << (((l ^ p) >> 32) & 255)) +
      (16 << (((l ^ p) >> 8) & 255)) +
      (32 << (((l ^ p) >> 16) & 255))) ^
      y) +
      35404) *
      214013 +
      2531011) %
    4294967296
  );
}
function fun3_token(_, n, t, $, e) {
  let u = 64570 ^ _,
    o = (2531011 + 214013 * (n + 41768)) % 4294967296,
    f = (1013904223 + (t + 43923) * 1664525) % 4294967296,
    k =
      (16 << (($ >> 32) & 255)) +
      (8 << (($ >> 24) & 255)) +
      (32 << (($ >> 16) & 255)) +
      (24 << (($ >> 8) & 255)),
    r = (21896 | e) & ~(21896 & e),
    i = fun4_token(u, o),
    c = (fun12_token(f, k, r, u), fun26_token(o, f, k, r, u));
  return (
    (12345 + (7491 + ((~(52206 & i) & (52206 | i)) ^ c)) * 1103515245) %
    2147483648
  );
}
function fun29_token(_, n, t, $, e) {
  let u = (2147483587 + 2147483629 * (_ + 64762)) % 2147483647,
    o = ((18197 + n) * 214013 + 2531011) % 4294967296,
    f = (2531011 + (22845 + t) * 214013) % 4294967296,
    k =
      (32 << (($ >> 16) & 255)) +
      (16 << (($ >> 8) & 255)) +
      (8 << (($ >> 32) & 255)) +
      (24 << (($ >> 24) & 255)),
    r = (~(11999 & e) & e) | (11999 & ~(11999 & e)),
    i = fun35_token(u, o, f, k, r, u),
    c = fun30_token(o, f, k, r, u, o);
  return (
    fun36_token(f, k, r, u),
    35444 ^
      ((8 << (((i ^ c) >> 24) & 255)) +
        (16 << (((i ^ c) >> 16) & 255)) +
        (24 << (((i ^ c) >> 8) & 255)) +
        (32 << (((i ^ c) >> 32) & 255)))
  );
}
function fun21_token(_, n, t, $) {
  let e = (2147483587 + 2147483629 * (37418 + _)) % 2147483647,
    u = 57623 ^ n,
    o = (~(40280 & t) & t) | (40280 & ~(40280 & t)),
    f = (~(24601 & $) & $) | (24601 & ~(24601 & $)),
    k = fun27_token(e, u),
    r =
      (fun27_token(o, f),
      fun22_token(e, u, o, f, e),
      (43902 & ~(43902 & k)) | (~(43902 & k) & k));
  return (8862 | r) & ~(8862 & r);
}
function fun8_token(_, n, t, $) {
  let e =
      (32 << ((_ >> 32) & 255)) +
      (16 << ((_ >> 16) & 255)) +
      (24 << ((_ >> 24) & 255)) +
      (8 << ((_ >> 8) & 255)),
    u = (1 + (50595 + n) * 22695477) % 4294967296,
    o = (~(40066 & t) & t) | (40066 & ~(40066 & t)),
    f = 18768 ^ $,
    k = fun15_token(e, u, o, f, e),
    r = fun9_token(u, o, f, e, u),
    i = fun34_token(o, f);
  return (
    ((((2531011 + ((k ^ r) + 35287) * 214013) % 4294967296 ^ i) + 16767) *
      1664525 +
      1013904223) %
    4294967296
  );
}
function fun1_token(_, n, t) {
  let $ = (12345 + (39051 + _) * 1103515245) % 2147483648,
    e = (44117 | n) & ~(44117 & n),
    u =
      (24 << ((t >> 24) & 255)) +
      (8 << ((t >> 16) & 255)) +
      (16 << ((t >> 32) & 255)) +
      (32 << ((t >> 8) & 255)),
    o = fun24_token($, e, u, $, e),
    f = fun33_token(u, $, e, u, $, e),
    k = fun2_token(u, $),
    r =
      (16 << (((o ^ f) >> 32) & 255)) +
      (24 << (((o ^ f) >> 24) & 255)) +
      (32 << (((o ^ f) >> 8) & 255)) +
      (8 << (((o ^ f) >> 16) & 255));
  return (
    (8 << (((r ^ k) >> 32) & 255)) +
    (16 << (((r ^ k) >> 8) & 255)) +
    (32 << (((r ^ k) >> 16) & 255)) +
    (24 << (((r ^ k) >> 24) & 255))
  );
}
function fun15_token(_, n, t, $, e) {
  let u = 62008 ^ _,
    o =
      (24 << ((n >> 32) & 255)) +
      (8 << ((n >> 16) & 255)) +
      (32 << ((n >> 8) & 255)) +
      (16 << ((n >> 24) & 255)),
    f = (22695477 * (t + 46531) + 1) % 4294967296,
    k = (1884 & ~(1884 & $)) | (~(1884 & $) & $),
    r = (55588 & ~(55588 & e)) | (~(55588 & e) & e),
    i = fun16_token(u, o, f, k, r),
    c = (fun33_token(u, o, f, k, r, u), fun22_token(o, f, k, r, u));
  return (1664525 * ((57467 ^ i ^ c) + 3037) + 1013904223) % 4294967296;
}
function fun27_token(_, n) {
  let t = (1664525 * (_ + 44664) + 1013904223) % 4294967296,
    $ = 53080 ^ n,
    e = fun28_token(t, $, t, $, t),
    u = fun32_token($, t, $, t, $),
    o = fun36_token(t, $, t, $);
  return (
    (1 + 22695477 * ((((e ^ u) + 17769) % 65357 ^ o) + 57525)) % 4294967296
  );
}
function fun32_token(_, n, t, $, e) {
  let u = (~(42203 & _) & _) | (42203 & ~(42203 & _)),
    o = 50118 ^ n,
    f = 41620 ^ t,
    k = (($ + 34240) * 2147483629 + 2147483587) % 2147483647,
    r =
      (32 << ((e >> 16) & 255)) +
      (16 << ((e >> 8) & 255)) +
      (8 << ((e >> 32) & 255)) +
      (24 << ((e >> 24) & 255)),
    i = fun33_token(u, o, f, k, r, u),
    c = (fun33_token(o, f, k, r, u, o), fun36_token(f, k, r, u));
  return (
    (2531011 + ((((43477 | i) & ~(43477 & i)) ^ c) + 53616) * 214013) %
    4294967296
  );
}
function fun28_token(_, n, t, $, e) {
  let u =
      (16 << ((_ >> 32) & 255)) +
      (24 << ((_ >> 24) & 255)) +
      (8 << ((_ >> 8) & 255)) +
      (32 << ((_ >> 16) & 255)),
    o = 55978 ^ n,
    f = (1664525 * (t + 2934) + 1013904223) % 4294967296,
    k = ~(30642 & $) & (30642 | $),
    r =
      (8 << ((e >> 8) & 255)) +
      (24 << ((e >> 32) & 255)) +
      (16 << ((e >> 24) & 255)) +
      (32 << ((e >> 16) & 255)),
    i = fun32_token(u, o, f, k, r),
    c = fun29_token(u, o, f, k, r),
    l =
      (fun36_token(u, o, f, k),
      (16 << (((i ^ c) >> 32) & 255)) +
        (24 << (((i ^ c) >> 8) & 255)) +
        (8 << (((i ^ c) >> 24) & 255)) +
        (32 << (((i ^ c) >> 16) & 255)));
  return ~(23686 & l) & (23686 | l);
}
function fun22_token(_, n, t, $, e) {
  let u = ((_ + 49173) * 1103515245 + 12345) % 2147483648,
    o = (n + 52922) % 65337,
    f = 25250 ^ t,
    k = (10903 & ~(10903 & $)) | (~(10903 & $) & $),
    r = (33814 & ~(33814 & e)) | (~(33814 & e) & e),
    i = fun31_token(u, o, f, k, r),
    c = fun23_token(u, o),
    l =
      (fun31_token(f, k, r, u, o),
      (1 + 22695477 * ((i ^ c) + 19675)) % 4294967296);
  return (~(7922 & l) & l) | (7922 & ~(7922 & l));
}
function fun23_token(_, n) {
  let t = 24508 ^ _,
    $ =
      (16 << ((n >> 16) & 255)) +
      (24 << ((n >> 8) & 255)) +
      (32 << ((n >> 32) & 255)) +
      (8 << ((n >> 24) & 255)),
    e = fun26_token(t, $, t, $, t),
    u = fun28_token($, t, $, t, $),
    o =
      (fun24_token(t, $, t, $, t),
      (2147483629 * ((e ^ u) + 11269) + 2147483587) % 2147483647);
  return (40927 & ~(40927 & o)) | (~(40927 & o) & o);
}
function fun25_token(_, n, t) {
  let $ = 23323 ^ _,
    e = (2531011 + (61713 + n) * 214013) % 4294967296,
    u = (24198 | t) & ~(24198 & t),
    o = fun26_token($, e, u, $, e),
    f = fun26_token(u, $, e, u, $);
  return (
    fun26_token(e, u, $, e, u),
    31181 ^
      ((16 << (((o ^ f) >> 32) & 255)) +
        (8 << (((o ^ f) >> 8) & 255)) +
        (24 << (((o ^ f) >> 24) & 255)) +
        (32 << (((o ^ f) >> 16) & 255)))
  );
}
function fun33_token(_, n, t, $, e, u) {
  let o = fun34_token(
      (_ + 52483) % 65496,
      (16 << ((n >> 16) & 255)) +
        (24 << ((n >> 8) & 255)) +
        (32 << ((n >> 24) & 255)) +
        (8 << ((n >> 32) & 255))
    ),
    f = fun34_token(
      8102 ^ t,
      (24 << (($ >> 16) & 255)) +
        (32 << (($ >> 32) & 255)) +
        (8 << (($ >> 24) & 255)) +
        (16 << (($ >> 8) & 255))
    );
  return (
    fun34_token(
      (29687 & ~(29687 & e)) | (~(29687 & e) & e),
      (1 + (62237 + u) * 22695477) % 4294967296
    ),
    55575 ^ (45290 + (o ^ f)) % 65334
  );
}
function fun2_token(_, n) {
  let t =
      (16 << ((_ >> 8) & 255)) +
      (32 << ((_ >> 16) & 255)) +
      (8 << ((_ >> 32) & 255)) +
      (24 << ((_ >> 24) & 255)),
    $ =
      (32 << ((n >> 32) & 255)) +
      (24 << ((n >> 24) & 255)) +
      (8 << ((n >> 8) & 255)) +
      (16 << ((n >> 16) & 255)),
    e = fun30_token(t, $, t, $, t, $);
  return (
    fun3_token(t, $, t, $, t),
    fun27_token($, t),
    8337 ^ ((58283 | e) & ~(58283 & e))
  );
}
const get_recaptcha_tokens = () =>
  new Promise((t, i) => {
    grecaptcha.ready(function () {
      grecaptcha
        .execute("6LdvBaEjAAAAAIKTgdecsZBehRxhVZOIDzG9MvXg", {
          action: "validate_recaptcha",
        })
        .then(function (e) {
          t(e);
        })
        .catch((e) => {
          console.log(e), i(e);
        });
    });
  });

Utils = {
  get_recaptcha_token: get_recaptcha_tokens,
  open_in_new_tab: function (e) {
    window.open(e, "_blank").focus();
  },
  open_in_new_box: function (e) {
    window.open(
      e,
      "_blank",
      "location=yes,height=570,width=520,scrollbars=yes,status=yes"
    );
  },
  compare_object: function (e, t) {
    for (var i in e) {
      if (e[i] != t[i]) {
        return false;
      }
    }
    return true;
  },
  compare_array: function (e, t) {
    if (e.length != t.length) {
      return false;
    }
    for (var i = 0; i < e.length; i++) {
      if (typeof e == "object") {
        if (!this.compare_object(e[i], t[i])) {
          return false;
        }
      } else {
        if (e[i] != t[i]) return false;
      }
    }
    return true;
  },
  copy_vector: function (e, t) {
    t.x = e.x;
    t.y = e.y;
  },
  get_vector: function (e, t) {
    return {
      x: e.x - t.x,
      y: e.y - t.y,
    };
  },
  mul_vector: function (e, t) {
    e.x *= t;
    e.y *= t;
  },
  scalar_product: function (e, t) {
    return e.x * t.x + e.y * t.y;
  },
  norm: function (e) {
    return Math.sqrt(e.x * e.x + e.y * e.y);
  },
  sign: function (e) {
    if (e < 0) {
      return -1;
    } else {
      return 1;
    }
  },
  cross_product: function (e, t) {
    return e.x * t.y - e.y * t.x;
  },
  get_angle_2: function (e, t, i, r) {
    return Math.atan2(r - t, i - e);
  },
  get_angle: function (e, t) {
    return (
      Math.acos(this.scalar_product(e, t) / (this.norm(e) * this.norm(t))) *
      this.sign(this.cross_product(e, t))
    );
  },
  getURLData: function (e) {
    _url = location.href;
    e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    e = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(_url);
    return e === null ? null : e[1];
  },
  reduceAngle: function (e, t) {
    var i = Math.PI * 2;
    t = ((t % i) + i) % i;
    if (Math.abs(e - t) > Math.PI) {
      if (e > t) {
        return t + i;
      } else {
        return t - i;
      }
    }
    return t;
  },
  get_std_angle: function (e, t) {
    return this.get_angle(
      {
        x: 1,
        y: 0,
      },
      this.get_vector(e, t)
    );
  },
  dist: function (e, t) {
    return Math.sqrt((t.x - e.x) * (t.x - e.x) + (t.y - e.y) * (t.y - e.y));
  },
  build_vector: function (e, t) {
    return {
      x: Math.cos(t) * e,
      y: Math.sin(t) * e,
    };
  },
  add_vector: function (e, t) {
    e.x += t.x;
    e.y += t.y;
  },
  sub_vector: function (e, t) {
    e.x -= t.x;
    e.y -= t.y;
  },
  translate_vector: function (e, t, i) {
    e.x += t;
    e.y += i;
  },
  translate_new_vector: function (e, t, i) {
    return {
      x: e.x + t,
      y: e.y + i,
    };
  },
  move: function (e, t, i) {
    e.x += Math.cos(i) * t;
    e.y += Math.sin(i) * t;
  },
  middle: function (e, t) {
    return Math.floor((e - t) / 2);
  },
  middle_point: function (e, t) {
    return {
      x: (e.x + t.x) / 2,
      y: (e.y + t.y) / 2,
    };
  },
  rand_sign: function () {
    return Math.random() > 0.5 ? 1 : -1;
  },
  get_rand_pos_in_circle: function (e, t, i) {
    var _0x2893cc = this.rand_sign(),
      _0x148a2f = this.rand_sign(),
      _0x1cc90a = (Math.random() * Math.PI) / 2;
    return {
      x: Math.floor(e + Math.cos(_0x1cc90a) * _0x2893cc * i),
      y: Math.floor(t + Math.sin(_0x1cc90a) * _0x148a2f * i),
    };
  },
  Box: function (e, t, i, r) {
    this.x = e;
    this.y = t;
    this.w = i;
    this.h = r;
  },
  randomize_list: function (e) {
    a = [];
    a.push.apply(a, e);
    var _0x13c4ea = [];
    while (a.length > 0) {
      var _0x23a9a7 = Math.floor(Math.random() * a.length);
      _0x13c4ea.push(a[_0x23a9a7]);
      a.splice(_0x23a9a7, 1);
    }
    return _0x13c4ea;
  },
  restore_number: function (e) {
    if (e >= 20000) {
      e = (e - 20000) * 1000;
    } else {
      if (e >= 10000) {
        e = (e - 10000) * 100;
      }
    }
    return e;
  },
  simplify_number: function (e) {
    if (typeof e !== "number") {
      return "0";
    } else {
      if (e >= 10000) {
        var _0x496e58 = Math.floor(Math.log10(e)) - 2,
          _0x1cce92 = Math.max(0, 3 - _0x496e58),
          _0x3ab572 = Math.floor(e / 1000).toString();
        if (_0x1cce92) {
          _0x3ab572 +=
            "." +
            ((e % 1000) / 1000).toString().substring(2).substring(0, _0x1cce92);
          for (
            var _0x447b3d = _0x3ab572.length - 1, _0x3a8904 = 0;
            _0x447b3d > 0;
            _0x447b3d--
          ) {
            if (_0x3ab572[_0x447b3d] != "0") {
              break;
            } else {
              _0x3a8904++;
            }
          }
          _0x3ab572 = _0x3ab572.substring(0, _0x3ab572.length - _0x3a8904);
          if (_0x3ab572[_0x3ab572.length - 1] == ".") {
            _0x3ab572 = _0x3ab572.substring(0, _0x3ab572.length - 1);
          }
        }
        return (_0x3ab572 += "k"), _0x3ab572;
      } else {
        return e.toString();
      }
    }
  },
  ease_out_quad: function (e) {
    return e * (2 - e);
  },
  ease_out_cubic: function (e) {
    return --e * e * e + 1;
  },
  ease_in_out_quad: function (e) {
    return e < 0.5 ? 2 * e * e : -1 + (4 - 2 * e) * e;
  },
  ease_in_out_cubic: function (e) {
    return e < 0.5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1;
  },
  ease_in_out_quart: function (e) {
    return e < 0.5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e;
  },
  ease_out_quart: function (e) {
    return 1 - --e * e * e * e;
  },
  ease_out_quint: function (e) {
    return 1 + --e * e * e * e * e;
  },
  LinearAnimation: function (
    _0x78c4cc,
    _0x4a2350,
    _0x3d52aa,
    _0x1461e2,
    _0x405efe,
    _0x1069d4
  ) {
    this.o = _0x78c4cc;
    this.v = _0x4a2350;
    this.max = _0x3d52aa;
    this.min = _0x1461e2;
    this.max_speed = _0x405efe;
    this.min_speed = _0x1069d4;
    this.last = 0;
    this.update = function () {
      if (this.o) {
        var _0x54d42d = this.v + delta * this.max_speed;
        if (_0x54d42d > this.max) {
          return (this.v = this.max), (this.o = false), true;
        } else {
          this.v = _0x54d42d;
        }
      } else {
        var _0x54d42d = this.v - delta * this.min_speed;
        if (_0x54d42d < this.min) {
          this.v = this.min;
          this.o = true;
        } else {
          this.v = _0x54d42d;
        }
      }
    };
    return false;
  },
  Ease: function (e, t, i, r, a, o) {
    this.fun = e;
    this.ed = t;
    this.em = i;
    this.sx = r;
    this.x = a;
    this.ex = o;
    this.restart = function () {
      this.x = this.sex;
      this.ed = 0;
    };
    this.ease = function (e) {
      e !== this.ex && ((this.ex = e), (this.sx = this.x), (this.ed = 0));
      if (this.ex !== this.x) {
        this.ed += delta;
        if (this.ed > this.em) {
          this.x = this.ex;
        } else {
          var e = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * e;
        }
      }
    };
  },
  Ease2d: function (e, t, i, r, a, o, n, s, _) {
    this.fun = e;
    this.ed = t;
    this.em = i;
    this.sx = r;
    this.sy = a;
    this.x = o;
    this.y = n;
    this.ex = s;
    this.ey = _;
    this.ease = function (_0x4dceaf) {
      if (_0x4dceaf.x != this.ex || _0x4dceaf.y != this.ey) {
        this.ex = _0x4dceaf.x;
        this.ey = _0x4dceaf.y;
        this.sx = this.x;
        this.sy = this.y;
        this.ed = 0;
      }
      if (this.ex != this.x || this.ey != this.y) {
        this.ed += delta;
        if (this.ed > this.em) {
          this.x = this.ex;
          this.y = this.ey;
        } else {
          var _0x1ebc43 = this.fun(this.ed / this.em);
          this.x = this.sx + (this.ex - this.sx) * _0x1ebc43;
          this.y = this.sy + (this.ey - this.sy) * _0x1ebc43;
        }
      }
    };
  },
  generate_token: function (e) {
    var t = "";
    for (var i = 0; i < e; i++) {
      t += String.fromCharCode(48 + Math.floor(Math.random() * 74));
    }
    return t;
  },
  gup: function (e, t) {
    if (!t) {
      t = location.href;
    }
    e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var _0x2fa8d4 = "[\\?&]" + e + "=([^&#]*)";
    var _0x292148 = new RegExp(_0x2fa8d4);
    var _0x3105f0 = _0x292148.exec(t);
    return _0x3105f0 == null ? null : _0x3105f0[1];
  },
  inside_box: function (e, t) {
    if (e.x >= t.x && e.x <= t.x + t.w && e.y >= t.y && e.y <= t.y + t.h) {
      return true;
    }
    return false;
  },
  intersect_aabb: function (
    _0x51caf2,
    _0x39b93d,
    _0x2315f4,
    _0x3b7202,
    _0x3fde8e,
    _0x3ec63e,
    _0x47b495,
    _0x50d940
  ) {
    if (
      Math.max(_0x51caf2, _0x3fde8e) < Math.min(_0x39b93d, _0x3ec63e) &&
      Math.max(_0x2315f4, _0x47b495) < Math.min(_0x3b7202, _0x50d940)
    ) {
      return 1;
    }
    return 0;
  },
  lerp: function (e, t, i) {
    return (1 - i) * e + i * t;
  },
  escape_html: function (e) {
    return e
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  },
};

Math.sign =
  Math.sign ||
  function (e) {
    if (e === 0) {
      return 0;
    } else {
      if (e > 0) {
        return 1;
      } else {
        return -1;
      }
    }
  };
Math.log10 =
  Math.log10 ||
  function (e) {
    return Math.log(e) / Math.LOG10;
  };

(function (e) {
  var t,
    i,
    r = !1;
  "function" == typeof define && define.amd && (define(e), (r = !0)),
    "object" == typeof exports && ((module.exports = e()), (r = !0)),
    r ||
      ((t = window.Cookies),
      ((i = window.Cookies = e()).noConflict = function () {
        return (window.Cookies = t), i;
      }));
})(function () {
  function d() {
    for (var e = 0, t = {}; e < arguments.length; e++) {
      var i,
        r = arguments[e];
      for (i in r) t[i] = r[i];
    }
    return t;
  }
  return (function e(I) {
    function l(e, t, i) {
      var r, a;
      if ("undefined" != typeof document) {
        if (1 < arguments.length) {
          "number" ==
            typeof (i = d(
              {
                path: "/",
              },
              l.defaults,
              i
            )).expires &&
            ((a = new Date()).setMilliseconds(
              a.getMilliseconds() + 864e5 * i.expires
            ),
            (i.expires = a));
          try {
            (r = JSON.stringify(t)), /^[\{\[]/.test(r) && (t = r);
          } catch (e) {}
          return (
            (t = I.write
              ? I.write(t, e)
              : encodeURIComponent(String(t)).replace(
                  /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                  decodeURIComponent
                )),
            (e = (e = (e = encodeURIComponent(String(e))).replace(
              /%(23|24|26|2B|5E|60|7C)/g,
              decodeURIComponent
            )).replace(/[\(\)]/g, escape)),
            (document.cookie = [
              e,
              "=",
              t,
              i.expires ? "; expires=" + i.expires.toUTCString() : "",
              i.path ? "; path=" + i.path : "",
              i.domain ? "; domain=" + i.domain : "",
              i.secure ? "; secure" : "",
            ].join(""))
          );
        }
        e || (r = {});
        for (
          var o = document.cookie ? document.cookie.split("; ") : [],
            n = /(%[0-9A-Z]{2})+/g,
            s = 0;
          s < o.length;
          s++
        ) {
          var _ = o[s].split("=");
          '"' === (E = _.slice(1).join("=")).charAt(0) && (E = E.slice(1, -1));
          try {
            var T = _[0].replace(n, decodeURIComponent),
              E = I.read
                ? I.read(E, T)
                : I(E, T) || E.replace(n, decodeURIComponent);
            if (this.json)
              try {
                E = JSON.parse(E);
              } catch (e) {}
            if (e === T) {
              r = E;
              break;
            }
            e || (r[T] = E);
          } catch (e) {}
        }
        return r;
      }
    }
    return (
      ((l.set = l).get = function (e) {
        return l.call(l, e);
      }),
      (l.getJSON = function () {
        return l.apply(
          {
            json: !0,
          },
          [].slice.call(arguments)
        );
      }),
      (l.defaults = {}),
      (l.remove = function (e, t) {
        l(
          e,
          "",
          d(t, {
            expires: -1,
          })
        );
      }),
      (l.withConverter = e),
      l
    );
  })(function () {});
});

function Mouse() {
  this.DOWN = 0;
  this.UP = 1;
  this.IDLE = 2;
  this.IN = 0;
  this.OUT = 1;
  this.pos = {
    x: 0,
    y: 0,
  };
  this.x_old = 0;
  this.y_old = 0;
  this.angle = 0;
  this.state = this.IDLE;
  this.dist = this.IN;
  this.down = function () {
    this.state = this.DOWN;
  };
  this.up = function () {
    this.state = this.UP;
  };
  this.update = function () {
    if (this.pos.x != this.x_old || this.pos.y != this.y_old) {
      return (this.x_old = this.pos.x), (this.y_old = this.pos.y), true;
    }
    return false;
  };
}
function Keyboard() {
  this.set_azerty = function () {
    this.LEFT = 81;
    this.RIGHT = 68;
    this.TOP = 90;
    this.DOWN = 83;
  };
  this.set_qwerty = function () {
    this.LEFT = 65;
    this.RIGHT = 68;
    this.TOP = 87;
    this.BOTTOM = 83;
  };
  this.UP = 0;
  this.DOWN = 1;
  this["_1"] = 49;
  this["_2"] = 50;
  this["_3"] = 51;
  this["_4"] = 52;
  this["_5"] = 53;
  this.CTRL = 17;
  this.ARROW_LEFT = 37;
  this.ARROW_RIGHT = 39;
  this.ARROW_TOP = 38;
  this.ARROW_BOTTOM = 40;
  this.SPACE = 32;
  this.R = 82;
  this.G = 71;
  this.V = 86;
  this.B = 66;
  this.set_qwerty();
  this.keys = new Array(255);
  for (var _0x7e0e15 = 0; _0x7e0e15 < 255; _0x7e0e15++) {
    this.keys[_0x7e0e15] = this.UP;
  }
  this.up = function (_0x1b52e1) {
    var _0xfac92b = Math.min(_0x1b52e1.charCode || _0x1b52e1.keyCode, 255);
    this.keys[_0xfac92b] = this.UP;
  };
  this.down = function (_0x4d9746) {
    var _0x4fe802 = Math.min(_0x4d9746.charCode || _0x4d9746.keyCode, 255);
    if (_0x4fe802 == this.LEFT || _0x4fe802 == this.ARROW_LEFT) {
      this.press_left();
    } else {
      if (_0x4fe802 == this.TOP || _0x4fe802 == this.ARROW_TOP) {
        this.press_top();
      } else {
        if (_0x4fe802 == this.DOWN || _0x4fe802 == this.ARROW_DOWN) {
          this.press_bottom();
        } else {
          if (_0x4fe802 == this.RIGHT || _0x4fe802 == this.ARROW_RIGHT) {
            this.press_right();
          }
        }
      }
    }
    return (this.keys[_0x4fe802] = this.DOWN), _0x4fe802;
  };
  this.press_left = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
  };
  this.press_right = function () {
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
  };
  this.press_bottom = function () {
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
  };
  this.press_top = function () {
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.clear_directionnal = function () {
    this.keys[this.RIGHT] = this.UP;
    this.keys[this.ARROW_RIGHT] = this.UP;
    this.keys[this.LEFT] = this.UP;
    this.keys[this.ARROW_LEFT] = this.UP;
    this.keys[this.TOP] = this.UP;
    this.keys[this.ARROW_TOP] = this.UP;
    this.keys[this.BOTTOM] = this.UP;
    this.keys[this.ARROW_BOTTOM] = this.UP;
  };
  this.is_left = function () {
    return this.keys[this.LEFT] || this.keys[this.ARROW_LEFT];
  };
  this.is_right = function () {
    return this.keys[this.RIGHT] || this.keys[this.ARROW_RIGHT];
  };
  this.is_top = function () {
    return this.keys[this.TOP] || this.keys[this.ARROW_TOP];
  };
  this.is_bottom = function () {
    return this.keys[this.BOTTOM] || this.keys[this.ARROW_BOTTOM];
  };
  this.is_ctrl = function () {
    return this.keys[this.CTRL];
  };
  this.is_1 = function () {
    return this.keys[this["_1"]];
  };
  this.is_2 = function () {
    return this.keys[this["_2"]];
  };
  this.is_3 = function () {
    return this.keys[this["_3"]];
  };
  this.is_4 = function () {
    return this.keys[this["_4"]];
  };
  this.is_space = function () {
    return this.keys[this.SPACE];
  };
  this.is_r = function () {
    return this.keys[this.R];
  };
  this.is_g = function () {
    return this.keys[this.G];
  };
  this.is_v = function () {
    return this.keys[this.V];
  };
  this.is_b = function () {
    return this.keys[this.B];
  };
}

var can = document.getElementById("game_canvas"),
  ctx = can.getContext("2d"),
  canw = can.width,
  canh = can.height,
  canw2 = can.width / 2,
  canh2 = can.height / 2,
  canm = {
    x: canw2,
    y: canh2,
  },
  scale = 1,
  ratio = 1,
  ratio_opt = -1,
  JUNK10,
  JUNK8 = "J" + JUNK3,
  JUNK6 = "S" + JUNK4,
  WINDOW1 = window,
  JUNK4,
  JSONWORD2,
  JUNK1 = "O",
  JUNK2 = JUNK1 + "N",
  JSONWORD1 = "O",
  JSONWORD12 = 0,
  JUNK3,
  WINDOW2 = WINDOW1,
  JUNK4,
  JSONWORD3,
  JUNK6 = "N",
  JUNK7 = "J",
  JUNK1 = "O" + JUNK3,
  JUNK8,
  WINDOW3 = WINDOW2,
  JUNK9,
  JUNK10,
  JSONWORD4,
  JUNK5,
  JUNK4,
  JUNK3,
  WINDOW4 = WINDOW3,
  JUNK2 = "N" + JUNK5,
  JUNK2,
  WINDOW5 = WINDOW4,
  JSONWORD5,
  JUNK1,
  JUNK10,
  JUNK9 = "",
  JSONWORD6,
  WINDOW6 = WINDOW5,
  JSONWORD7,
  JUNK4,
  JUNK3,
  WINDOW7 = WINDOW6,
  JUNK1,
  JSONWORD8,
  JUNK8,
  WINDOW8 = WINDOW7,
  JUNK7 = "O",
  JUNK10 = "J",
  JUNK6,
  JSONWORD9,
  JUNK10,
  WINDOW8 = WINDOW7,
  JSONWORD9 = "S",
  WINDOW9 = WINDOW8,
  JUNK5,
  JSONWORD10,
  WINDOW10 = WINDOW9,
  JUNK4 = JUNK10 + JSONWORD9;
can.oncontextmenu = function () {
  return false;
};
JUNK8 = JUNK10;
JUNK9 = JUNK8;
function CTI(e) {
  var _0x492bdf = new Image();
  _0x492bdf.src = e.toDataURL("image/png");
  _0x492bdf.width = e.width;
  _0x492bdf.height = e.height;
  _0x492bdf.isLoaded = 1;
  return _0x492bdf;
}
JUNK8 = JUNK6;
JUNK7 = JUNK7 + JUNK8;
JSONWORD1 = JUNK4 + JUNK7;
JSONWORD2 = JSONWORD1;
JUNK1 = JUNK2;
JSONWORD3 = JSONWORD2;
JUNK2 = JUNK3;
JUNK3 = JUNK4;
JSONWORD5 = JUNK4 + JUNK7;
JUNK3 = JUNK4;
JUNK1 = JUNK4;
JSONWORD4 = JSONWORD5;
JUNK6 = JUNK7 + JUNK8;
JSONWORD6 = JSONWORD2;
JUNK1 = JUNK4 + JUNK7;
JSONWORD7 = JSONWORD1;
JUNK2 = JUNK4 + JUNK7;
JSONWORD8 = JSONWORD3;
JUNK7 = JUNK3;
JSONWORD9 = JSONWORD1;
JSONWORD10 = JSONWORD2;
JUNK8 = JUNK1;
var devicePixelRatio = window.devicePixelRatio || 1,
  backingStoreRatio =
    ctx.webkitBackingStorePixelRatio ||
    ctx.mozBackingStorePixelRatio ||
    ctx.msBackingStorePixelRatio ||
    ctx.oBackingStorePixelRatio ||
    ctx.backingStorePixelRatio ||
    1;
function resize_canvas() {
  can.width != window.innerWidth &&
    ((can.width = window.innerWidth),
    (canw = can.width),
    (canw2 = can.width / 2));
  can.height != window.innerHeight &&
    ((can.height = window.innerHeight),
    (canh = can.height),
    (canh2 = can.height / 2));
  canm = {
    x: canw2,
    y: canh2,
  };
  var e = can.width;
  var t = can.height;
  if (ratio_opt === -1) {
    ratio = devicePixelRatio / backingStoreRatio;
  } else {
    ratio = ratio_opt;
  }
  can.width = e * ratio;
  can.height = t * ratio;
  can.style.width = e + "px";
  can.style.height = t + "px";
  ctx.scale(ratio, ratio);
  user && ((user.cam.rw = e), (user.cam.rh = t));
  if (loader.is_run) {
    loader.update();
  } else {
    if (ui.is_run) {
      ui.update();
    } else {
      if (game.is_run) {
        game.update();
      } else {
        if (scoreboard.is_run) {
          scoreboard.update();
        }
      }
    }
  }
}
var game_body = document.getElementById("game_body");
game_body.ondragstart = function () {
  return false;
};
game_body.ondrop = function () {
  return false;
};
game_body.onresize = resize_canvas;
(function () {
  var o = 0;
  var e = ["ms", "moz", "webkit", "o"];
  for (var i = 0; i < e.length && !window.requestAnimationFrame; ++i) {
    window.requestAnimationFrame = window[e[i] + "RequestAnimationFrame"];
    window.cancelAnimationFrame =
      window[e[i] + "CancelAnimationFrame"] ||
      window[e[i] + "CancelRequestAnimationFrame"];
  }
  if (!window.requestAnimationFrame) {
    window.requestAnimationFrame = function (_0x10bd2d, _0x542dac) {
      var _0xb67235 = new Date().getTime();
      var _0x5a92fb = Math.max(0, 16 - (_0xb67235 - o));
      var _0x31f10b = window.setTimeout(function () {
        _0x10bd2d(_0xb67235 + _0x5a92fb);
      }, _0x5a92fb);
      o = _0xb67235 + _0x5a92fb;
      return _0x31f10b;
    };
  }
  if (!window.cancelAnimationFrame) {
    window.cancelAnimationFrame = function (_0x298eae) {
      clearTimeout(_0x298eae);
    };
  }
})();
var lang = navigator.language || navigator.userLanguage,
  timezone = -(new Date().getTimezoneOffset() / 60),
  TZ_EU = "Europe",
  TZ_RU = "Russia",
  TZ_NA = "North America",
  TZ_SA = "South America",
  TZ_WA = "West America",
  TZ_AS = "Asia",
  TZ_AU = "Australia",
  TZ = TZ_EU;
if (timezone >= -2 && timezone <= 2) {
  TZ = TZ_EU;
} else {
  if (timezone > 2 && timezone <= 5) {
    TZ = TZ_RU;
  } else {
    if (timezone > 5 && timezone <= 9) {
      TZ = TZ_AS;
    } else {
      if (timezone > 9) {
        TZ = TZ_AU;
      } else {
        if (timezone >= -5 && timezone < -2) {
          if (
            lang === "pt-BR" ||
            lang === "pt-br" ||
            lang === "pt" ||
            lang === "pt-pt"
          ) {
            TZ = TZ_SA;
          } else {
            TZ = TZ_NA;
          }
        } else {
          if (timezone < -5) {
            if (
              lang === "pt-BR" ||
              lang === "pt-br" ||
              lang === "pt" ||
              lang === "pt-pt"
            ) {
              TZ = TZ_SA;
            } else {
              TZ = TZ_WA;
            }
          }
        }
      }
    }
  }
}
var RNG = (function () {
    function _0x49d01f(_0x51e50c) {
      var _0x380fed = _0x51e50c
        ? _0x51e50c
        : Math.floor(Math.random() * 2147483647);
      this.init = function (_0x496816) {
        _0x380fed = _0x496816
          ? _0x496816
          : Math.floor(Math.random() * 2147483647);
      };
      this.get = function () {
        return (
          (_0x380fed = (1103515245 * _0x380fed + 12345) % 2147483648),
          _0x380fed / 2147483648
        );
      };
    }
    return { Random: _0x49d01f };
  })(),
  ___MAP___ = [
    [0, "DRAGON", 18, 6, 66, 35, 0],
    [0, "WINTER", 91, 18, 5, 40, 8],
    [0, "DESERT", 135, 180, 89, 124, 5],
    [0, "LAVA", 142, 6, 82, 99, 6],
    [0, "FOREST", 6, 150, 90, 154, 8],
    [0, "WINTER", 6, 6, 90, 150, 0],
    [1, "b", 0, 5, 175, 0],
    [1, "t", 2, 5, 174, 0],
    [1, "t", 5, 5, 173, 0],
    [1, "b", 3, 5, 176, 0],
    [1, "t", 0, 5, 177, 0],
    [1, "t", 3, 5, 178, 0],
    [1, "t", 4, 5, 179, 0],
    [1, "b", 0, 5, 180, 0],
    [1, "t", 5, 5, 181, 0],
    [1, "b", 2, 5, 182, 0],
    [1, "b", 1, 5, 183, 0],
    [1, "b", 2, 5, 184, 0],
    [1, "t", 5, 5, 185, 0],
    [1, "t", 2, 5, 186, 0],
    [1, "t", 0, 5, 187, 0],
    [1, "t", 5, 5, 188, 0],
    [1, "t", 1, 5, 189, 0],
    [1, "b", 2, 5, 190, 0],
    [1, "t", 4, 5, 191, 0],
    [1, "b", 3, 5, 192, 0],
    [1, "t", 5, 5, 193, 0],
    [1, "t", 0, 5, 194, 0],
    [1, "t", 3, 5, 195, 0],
    [1, "b", 0, 5, 196, 0],
    [1, "t", 5, 5, 197, 0],
    [1, "t", 2, 5, 198, 0],
    [1, "b", 2, 5, 199, 0],
    [1, "t", 4, 5, 200, 0],
    [1, "t", 1, 5, 201, 0],
    [1, "b", 1, 5, 202, 0],
    [1, "t", 5, 5, 203, 0],
    [1, "t", 2, 5, 204, 0],
    [1, "t", 4, 5, 205, 0],
    [1, "b", 2, 5, 206, 0],
    [1, "t", 1, 5, 207, 0],
    [1, "t", 4, 5, 208, 0],
    [1, "t", 2, 5, 209, 0],
    [1, "b", 0, 5, 210, 0],
    [1, "t", 5, 5, 211, 0],
    [1, "t", 1, 5, 212, 0],
    [1, "t", 2, 5, 213, 0],
    [1, "b", 3, 5, 214, 0],
    [1, "t", 5, 5, 215, 0],
    [1, "b", 0, 5, 216, 0],
    [1, "t", 4, 5, 217, 0],
    [1, "t", 2, 5, 218, 0],
    [1, "t", 1, 5, 219, 0],
    [1, "t", 3, 5, 220, 0],
    [1, "t", 5, 5, 221, 0],
    [1, "t", 2, 5, 222, 0],
    [1, "t", 4, 5, 223, 0],
    [1, "b", 3, 5, 224, 0],
    [1, "t", 1, 5, 225, 0],
    [1, "t", 3, 5, 226, 0],
    [1, "b", 0, 5, 227, 0],
    [1, "t", 3, 5, 228, 0],
    [1, "t", 5, 5, 229, 0],
    [1, "t", 2, 5, 230, 0],
    [1, "t", 0, 5, 231, 0],
    [1, "b", 2, 5, 232, 0],
    [1, "t", 1, 5, 233, 0],
    [1, "t", 4, 5, 234, 0],
    [1, "b", 1, 5, 235, 0],
    [1, "t", 4, 5, 236, 0],
    [1, "t", 2, 5, 237, 0],
    [1, "t", 0, 5, 238, 0],
    [1, "t", 4, 5, 239, 0],
    [1, "b", 2, 5, 240, 0],
    [1, "t", 5, 5, 241, 0],
    [1, "b", 1, 5, 242, 0],
    [1, "t", 4, 5, 243, 0],
    [1, "t", 2, 5, 244, 0],
    [1, "t", 1, 5, 245, 0],
    [1, "b", 1, 5, 246, 0],
    [1, "t", 3, 5, 247, 0],
    [1, "b", 2, 5, 248, 0],
    [1, "t", 5, 5, 249, 0],
    [1, "t", 2, 5, 250, 0],
    [1, "t", 4, 5, 251, 0],
    [1, "b", 1, 5, 252, 0],
    [1, "t", 4, 5, 253, 0],
    [1, "t", 1, 5, 254, 0],
    [1, "t", 3, 5, 255, 0],
    [1, "t", 5, 5, 256, 0],
    [1, "b", 2, 5, 257, 0],
    [1, "t", 4, 5, 258, 0],
    [1, "b", 3, 5, 259, 0],
    [1, "t", 5, 5, 260, 0],
    [1, "b", 0, 5, 261, 0],
    [1, "t", 3, 5, 262, 0],
    [1, "t", 4, 5, 263, 0],
    [1, "t", 2, 5, 264, 0],
    [1, "b", 1, 5, 265, 0],
    [1, "b", 2, 5, 266, 0],
    [1, "t", 3, 5, 267, 0],
    [1, "t", 4, 5, 268, 0],
    [1, "t", 0, 5, 269, 0],
    [1, "t", 5, 5, 270, 0],
    [1, "t", 3, 5, 271, 0],
    [1, "t", 4, 5, 272, 0],
    [1, "t", 1, 5, 273, 0],
    [1, "b", 2, 5, 274, 0],
    [1, "t", 1, 5, 275, 0],
    [1, "t", 4, 5, 276, 0],
    [1, "b", 1, 5, 277, 0],
    [1, "b", 2, 5, 278, 0],
    [1, "t", 1, 5, 279, 0],
    [1, "t", 4, 5, 280, 0],
    [1, "t", 2, 5, 281, 0],
    [1, "t", 5, 5, 282, 0],
    [1, "b", 2, 5, 283, 0],
    [1, "t", 1, 5, 284, 0],
    [1, "b", 3, 5, 285, 0],
    [1, "t", 4, 5, 286, 0],
    [1, "t", 0, 5, 287, 0],
    [1, "t", 5, 5, 288, 0],
    [1, "t", 2, 5, 289, 0],
    [1, "b", 1, 5, 290, 0],
    [1, "t", 4, 5, 292, 0],
    [1, "t", 2, 5, 291, 0],
    [1, "b", 2, 5, 293, 0],
    [1, "t", 1, 5, 294, 0],
    [1, "t", 3, 5, 295, 0],
    [1, "t", 5, 5, 296, 0],
    [1, "b", 0, 5, 297, 0],
    [1, "b", 3, 5, 298, 0],
    [1, "t", 4, 5, 299, 0],
    [1, "t", 2, 5, 300, 0],
    [1, "t", 4, 5, 301, 0],
    [1, "b", 0, 5, 302, 0],
    [1, "b", 2, 5, 303, 0],
    [1, "t", 1, 6, 303, 0],
    [1, "t", 2, 7, 303, 0],
    [1, "t", 1, 5, 304, 0],
    [1, "t", 3, 6, 304, 0],
    [1, "t", 4, 7, 304, 0],
    [1, "t", 5, 8, 303, 0],
    [1, "b", 1, 8, 304, 0],
    [1, "b", 2, 9, 304, 0],
    [1, "b", 3, 12, 303, 0],
    [1, "b", 3, 17, 304, 0],
    [1, "t", 1, 9, 303, 0],
    [1, "t", 1, 15, 304, 0],
    [1, "t", 1, 13, 303, 0],
    [1, "t", 3, 10, 303, 0],
    [1, "t", 3, 14, 304, 0],
    [1, "t", 4, 10, 304, 0],
    [1, "t", 5, 11, 304, 0],
    [1, "t", 5, 14, 303, 0],
    [1, "t", 5, 16, 304, 0],
    [1, "t", 5, 13, 304, 0],
    [1, "t", 2, 12, 304, 0],
    [1, "t", 1, 11, 303, 0],
    [1, "b", 3, 15, 303, 0],
    [1, "b", 0, 16, 303, 0],
    [1, "t", 3, 17, 303, 0],
    [1, "t", 4, 18, 303, 0],
    [1, "t", 2, 19, 303, 0],
    [1, "t", 1, 20, 303, 0],
    [1, "b", 1, 21, 303, 0],
    [1, "t", 2, 22, 303, 0],
    [1, "t", 4, 23, 303, 0],
    [1, "b", 3, 24, 303, 0],
    [1, "t", 5, 25, 303, 0],
    [1, "t", 1, 26, 303, 0],
    [1, "t", 2, 27, 303, 0],
    [1, "t", 4, 28, 303, 0],
    [1, "b", 0, 18, 304, 0],
    [1, "t", 2, 19, 304, 0],
    [1, "t", 5, 20, 304, 0],
    [1, "b", 2, 21, 304, 0],
    [1, "t", 4, 22, 304, 0],
    [1, "t", 2, 23, 304, 0],
    [1, "t", 1, 24, 304, 0],
    [1, "t", 3, 25, 304, 0],
    [1, "t", 0, 27, 304, 0],
    [1, "t", 5, 26, 304, 0],
    [1, "b", 2, 28, 304, 0],
    [1, "t", 1, 29, 304, 0],
    [1, "b", 1, 29, 303, 0],
    [1, "b", 2, 30, 303, 0],
    [1, "t", 4, 31, 303, 0],
    [1, "t", 0, 32, 303, 0],
    [1, "t", 5, 33, 303, 0],
    [1, "t", 2, 34, 303, 0],
    [1, "t", 4, 35, 303, 0],
    [1, "t", 1, 36, 303, 0],
    [1, "b", 3, 37, 303, 0],
    [1, "t", 2, 32, 304, 0],
    [1, "t", 4, 30, 304, 0],
    [1, "t", 1, 31, 304, 0],
    [1, "b", 1, 33, 304, 0],
    [1, "t", 2, 35, 304, 0],
    [1, "t", 5, 34, 304, 0],
    [1, "b", 2, 36, 304, 0],
    [1, "t", 5, 37, 304, 0],
    [1, "t", 1, 38, 304, 0],
    [1, "b", 1, 40, 303, 0],
    [1, "t", 3, 39, 303, 0],
    [1, "t", 3, 42, 304, 0],
    [1, "t", 5, 38, 303, 0],
    [1, "t", 5, 39, 304, 0],
    [1, "t", 5, 41, 303, 0],
    [1, "t", 4, 41, 304, 0],
    [1, "t", 4, 44, 303, 0],
    [1, "b", 2, 40, 304, 0],
    [1, "b", 2, 43, 303, 0],
    [1, "t", 1, 42, 303, 0],
    [1, "t", 1, 43, 304, 0],
    [1, "t", 5, 44, 304, 0],
    [1, "b", 1, 45, 303, 0],
    [1, "t", 2, 45, 304, 0],
    [1, "t", 2, 46, 303, 0],
    [1, "t", 4, 47, 303, 0],
    [1, "b", 0, 48, 303, 0],
    [1, "t", 5, 49, 303, 0],
    [1, "t", 2, 50, 303, 0],
    [1, "t", 1, 51, 303, 0],
    [1, "t", 4, 52, 303, 0],
    [1, "t", 5, 46, 304, 0],
    [1, "t", 2, 47, 304, 0],
    [1, "t", 5, 48, 304, 0],
    [1, "t", 1, 49, 304, 0],
    [1, "t", 2, 50, 304, 0],
    [1, "b", 1, 53, 303, 0],
    [1, "b", 2, 51, 304, 0],
    [1, "t", 5, 52, 304, 0],
    [1, "t", 3, 53, 304, 0],
    [1, "b", 2, 54, 303, 0],
    [1, "t", 5, 54, 304, 0],
    [1, "t", 5, 55, 303, 0],
    [1, "t", 3, 56, 303, 0],
    [1, "t", 4, 57, 303, 0],
    [1, "t", 5, 58, 303, 0],
    [1, "b", 1, 55, 304, 0],
    [1, "t", 2, 56, 304, 0],
    [1, "t", 0, 57, 304, 0],
    [1, "t", 3, 58, 304, 0],
    [1, "t", 3, 63, 304, 0],
    [1, "t", 3, 59, 303, 0],
    [1, "t", 4, 59, 304, 0],
    [1, "t", 5, 60, 303, 0],
    [1, "t", 0, 60, 304, 0],
    [1, "t", 0, 66, 303, 0],
    [1, "t", 0, 70, 304, 0],
    [1, "t", 3, 61, 304, 0],
    [1, "t", 3, 67, 303, 0],
    [1, "t", 3, 73, 304, 0],
    [1, "t", 3, 76, 303, 0],
    [1, "t", 3, 78, 304, 0],
    [1, "t", 1, 61, 303, 0],
    [1, "t", 1, 73, 303, 0],
    [1, "t", 1, 79, 303, 0],
    [1, "b", 2, 62, 304, 0],
    [1, "b", 2, 70, 303, 0],
    [1, "t", 5, 62, 303, 0],
    [1, "t", 5, 68, 303, 0],
    [1, "t", 5, 71, 304, 0],
    [1, "t", 5, 77, 304, 0],
    [1, "t", 5, 75, 303, 0],
    [1, "t", 5, 64, 304, 0],
    [1, "t", 5, 65, 303, 0],
    [1, "t", 5, 80, 303, 0],
    [1, "t", 1, 76, 304, 0],
    [1, "t", 3, 63, 303, 0],
    [1, "t", 5, 82, 304, 0],
    [1, "b", 2, 65, 304, 0],
    [1, "t", 1, 64, 303, 0],
    [1, "t", 1, 68, 304, 0],
    [1, "t", 2, 69, 304, 0],
    [1, "t", 4, 69, 303, 0],
    [1, "t", 5, 66, 304, 0],
    [1, "t", 0, 67, 304, 0],
    [1, "b", 2, 72, 304, 0],
    [1, "t", 0, 71, 303, 0],
    [1, "t", 4, 72, 303, 0],
    [1, "t", 4, 74, 304, 0],
    [1, "t", 2, 74, 303, 0],
    [1, "t", 3, 75, 304, 0],
    [1, "t", 1, 77, 303, 0],
    [1, "t", 4, 78, 303, 0],
    [1, "t", 4, 79, 304, 0],
    [1, "t", 2, 80, 304, 0],
    [1, "b", 1, 81, 304, 0],
    [1, "t", 2, 81, 303, 0],
    [1, "t", 5, 82, 303, 0],
    [1, "t", 1, 83, 303, 0],
    [1, "b", 2, 83, 304, 0],
    [1, "t", 1, 84, 304, 0],
    [1, "t", 4, 84, 303, 0],
    [1, "t", 5, 85, 304, 0],
    [1, "t", 3, 85, 303, 0],
    [1, "b", 2, 86, 304, 0],
    [1, "t", 1, 86, 303, 0],
    [1, "b", 3, 87, 303, 0],
    [1, "t", 4, 87, 304, 0],
    [1, "t", 4, 88, 303, 0],
    [1, "t", 0, 88, 304, 0],
    [1, "b", 1, 89, 303, 0],
    [1, "t", 3, 89, 304, 0],
    [1, "t", 3, 90, 303, 0],
    [1, "t", 4, 90, 304, 0],
    [1, "t", 4, 91, 303, 0],
    [1, "t", 0, 91, 304, 0],
    [1, "b", 2, 92, 303, 0],
    [1, "t", 4, 92, 304, 0],
    [1, "t", 5, 93, 303, 0],
    [1, "t", 0, 93, 304, 0],
    [1, "b", 3, 94, 303, 0],
    [1, "b", 0, 94, 304, 0],
    [1, "b", 0, 95, 303, 0],
    [1, "t", 2, 95, 304, 0],
    [1, "f", 1, 5, 151, 1],
    [1, "f", 2, 5, 153, 1],
    [1, "f", 0, 5, 152, 1],
    [1, "f", 0, 5, 147, 1],
    [1, "f", 0, 5, 144, 1],
    [1, "f", 0, 5, 140, 1],
    [1, "f", 1, 5, 149, 1],
    [1, "f", 1, 5, 146, 1],
    [1, "f", 1, 5, 143, 1],
    [1, "f", 1, 5, 141, 1],
    [1, "f", 2, 5, 150, 1],
    [1, "f", 2, 5, 148, 1],
    [1, "f", 2, 5, 145, 1],
    [1, "f", 2, 5, 142, 1],
    [1, "f", 2, 5, 139, 1],
    [1, "f", 2, 5, 136, 1],
    [1, "f", 2, 5, 133, 1],
    [1, "f", 2, 5, 131, 1],
    [1, "f", 2, 5, 127, 1],
    [1, "f", 2, 5, 125, 1],
    [1, "f", 1, 5, 138, 1],
    [1, "f", 1, 5, 135, 1],
    [1, "f", 1, 5, 132, 1],
    [1, "f", 1, 5, 130, 1],
    [1, "f", 1, 5, 128, 1],
    [1, "f", 1, 5, 126, 1],
    [1, "f", 1, 5, 124, 1],
    [1, "f", 0, 5, 129, 1],
    [1, "f", 0, 5, 134, 1],
    [1, "f", 0, 5, 137, 1],
    [1, "f", 0, 5, 123, 1],
    [1, "f", 1, 5, 122, 1],
    [1, "f", 1, 5, 120, 1],
    [1, "f", 1, 5, 117, 1],
    [1, "f", 1, 5, 115, 1],
    [1, "f", 1, 5, 111, 1],
    [1, "f", 1, 5, 108, 1],
    [1, "f", 2, 5, 121, 1],
    [1, "f", 2, 5, 118, 1],
    [1, "f", 2, 5, 116, 1],
    [1, "f", 2, 5, 113, 1],
    [1, "f", 2, 5, 110, 1],
    [1, "f", 0, 5, 119, 1],
    [1, "f", 0, 5, 114, 1],
    [1, "f", 0, 5, 112, 1],
    [1, "f", 0, 5, 109, 1],
    [1, "f", 1, 5, 106, 1],
    [1, "f", 1, 5, 103, 1],
    [1, "f", 1, 5, 100, 1],
    [1, "f", 1, 5, 97, 1],
    [1, "f", 1, 5, 95, 1],
    [1, "f", 2, 5, 107, 1],
    [1, "f", 2, 5, 105, 1],
    [1, "f", 2, 5, 102, 1],
    [1, "f", 2, 5, 99, 1],
    [1, "f", 2, 5, 96, 1],
    [1, "f", 2, 5, 94, 1],
    [1, "f", 0, 5, 104, 1],
    [1, "f", 0, 5, 101, 1],
    [1, "f", 0, 5, 98, 1],
    [1, "f", 0, 5, 93, 1],
    [1, "f", 1, 5, 92, 1],
    [1, "f", 1, 5, 89, 1],
    [1, "f", 1, 5, 86, 1],
    [1, "f", 1, 5, 83, 1],
    [1, "f", 1, 5, 80, 1],
    [1, "f", 1, 5, 78, 1],
    [1, "f", 2, 5, 90, 1],
    [1, "f", 2, 5, 88, 1],
    [1, "f", 2, 5, 85, 1],
    [1, "f", 2, 5, 82, 1],
    [1, "f", 2, 5, 79, 1],
    [1, "f", 2, 5, 77, 1],
    [1, "f", 2, 5, 75, 1],
    [1, "f", 2, 5, 72, 1],
    [1, "f", 0, 5, 91, 1],
    [1, "f", 0, 5, 87, 1],
    [1, "f", 0, 5, 84, 1],
    [1, "f", 0, 5, 81, 1],
    [1, "f", 0, 5, 76, 1],
    [1, "f", 0, 5, 74, 1],
    [1, "f", 1, 5, 73, 1],
    [1, "f", 1, 5, 71, 1],
    [1, "f", 1, 5, 68, 1],
    [1, "f", 1, 5, 66, 1],
    [1, "f", 1, 5, 62, 1],
    [1, "f", 1, 5, 59, 1],
    [1, "f", 1, 5, 56, 1],
    [1, "f", 1, 5, 53, 1],
    [1, "f", 1, 5, 50, 1],
    [1, "f", 2, 5, 70, 1],
    [1, "f", 2, 5, 67, 1],
    [1, "f", 2, 5, 65, 1],
    [1, "f", 2, 5, 63, 1],
    [1, "f", 2, 5, 60, 1],
    [1, "f", 2, 5, 57, 1],
    [1, "f", 2, 5, 54, 1],
    [1, "f", 2, 5, 51, 1],
    [1, "f", 0, 5, 69, 1],
    [1, "f", 0, 5, 64, 1],
    [1, "f", 0, 5, 61, 1],
    [1, "f", 0, 5, 58, 1],
    [1, "f", 0, 5, 55, 1],
    [1, "f", 0, 5, 52, 1],
    [1, "f", 0, 5, 49, 1],
    [1, "f", 0, 5, 45, 1],
    [1, "f", 0, 5, 42, 1],
    [1, "f", 0, 5, 38, 1],
    [1, "f", 0, 5, 34, 1],
    [1, "f", 0, 5, 31, 1],
    [1, "f", 1, 5, 48, 1],
    [1, "f", 1, 5, 44, 1],
    [1, "f", 1, 5, 41, 1],
    [1, "f", 1, 5, 37, 1],
    [1, "f", 1, 5, 33, 1],
    [1, "f", 1, 5, 29, 1],
    [1, "f", 2, 5, 30, 1],
    [1, "f", 2, 5, 32, 1],
    [1, "f", 2, 5, 35, 1],
    [1, "f", 2, 5, 39, 1],
    [1, "f", 2, 5, 46, 1],
    [1, "f", 2, 5, 43, 1],
    [1, "f", 1, 5, 47, 1],
    [1, "f", 0, 5, 40, 1],
    [1, "f", 0, 5, 36, 1],
    [1, "f", 0, 5, 28, 1],
    [1, "f", 1, 5, 25, 1],
    [1, "f", 1, 5, 22, 1],
    [1, "f", 1, 5, 20, 1],
    [1, "f", 1, 5, 16, 1],
    [1, "f", 1, 5, 13, 1],
    [1, "f", 1, 5, 10, 1],
    [1, "f", 2, 5, 27, 1],
    [1, "f", 2, 5, 24, 1],
    [1, "f", 2, 5, 21, 1],
    [1, "f", 2, 5, 19, 1],
    [1, "f", 2, 5, 15, 1],
    [1, "f", 2, 5, 12, 1],
    [1, "f", 2, 5, 9, 1],
    [1, "f", 0, 5, 26, 1],
    [1, "f", 0, 5, 23, 1],
    [1, "f", 0, 5, 14, 1],
    [1, "f", 0, 5, 11, 1],
    [1, "f", 0, 5, 17, 1],
    [1, "f", 1, 5, 18, 1],
    [1, "f", 1, 5, 8, 1],
    [1, "f", 0, 5, 7, 1],
    [1, "f", 1, 5, 6, 1],
    [1, "f", 0, 5, 5, 1],
    [1, "f", 1, 6, 5, 1],
    [1, "f", 2, 7, 5, 1],
    [1, "f", 0, 8, 5, 1],
    [1, "f", 1, 9, 5, 1],
    [1, "f", 1, 12, 5, 1],
    [1, "f", 1, 15, 5, 1],
    [1, "f", 1, 17, 5, 1],
    [1, "f", 1, 22, 5, 1],
    [1, "f", 1, 26, 5, 1],
    [1, "f", 2, 10, 5, 1],
    [1, "f", 2, 13, 5, 1],
    [1, "f", 2, 16, 5, 1],
    [1, "f", 2, 18, 5, 1],
    [1, "f", 2, 21, 5, 1],
    [1, "f", 2, 23, 5, 1],
    [1, "f", 2, 25, 5, 1],
    [1, "f", 2, 27, 5, 1],
    [1, "f", 0, 11, 5, 1],
    [1, "f", 0, 14, 5, 1],
    [1, "f", 0, 19, 5, 1],
    [1, "f", 0, 24, 5, 1],
    [1, "f", 0, 28, 5, 1],
    [1, "f", 1, 20, 5, 1],
    [1, "f", 1, 29, 5, 1],
    [1, "f", 1, 32, 5, 1],
    [1, "f", 1, 35, 5, 1],
    [1, "f", 1, 38, 5, 1],
    [1, "f", 1, 41, 5, 1],
    [1, "f", 1, 45, 5, 1],
    [1, "f", 2, 30, 5, 1],
    [1, "f", 2, 33, 5, 1],
    [1, "f", 2, 36, 5, 1],
    [1, "f", 2, 39, 5, 1],
    [1, "f", 2, 42, 5, 1],
    [1, "f", 2, 44, 5, 1],
    [1, "f", 2, 46, 5, 1],
    [1, "f", 0, 43, 5, 1],
    [1, "f", 0, 40, 5, 1],
    [1, "f", 0, 37, 5, 1],
    [1, "f", 0, 34, 5, 1],
    [1, "f", 0, 31, 5, 1],
    [1, "f", 0, 47, 5, 1],
    [1, "f", 1, 48, 5, 1],
    [1, "f", 1, 51, 5, 1],
    [1, "f", 1, 53, 5, 1],
    [1, "f", 1, 57, 5, 1],
    [1, "f", 1, 60, 5, 1],
    [1, "f", 1, 63, 5, 1],
    [1, "f", 1, 65, 5, 1],
    [1, "f", 2, 64, 5, 1],
    [1, "f", 2, 62, 5, 1],
    [1, "f", 2, 59, 5, 1],
    [1, "f", 2, 56, 5, 1],
    [1, "f", 2, 52, 5, 1],
    [1, "f", 2, 49, 5, 1],
    [1, "f", 2, 54, 5, 1],
    [1, "f", 0, 50, 5, 1],
    [1, "f", 0, 55, 5, 1],
    [1, "f", 0, 58, 5, 1],
    [1, "f", 0, 61, 5, 1],
    [1, "f", 0, 66, 5, 1],
    [1, "f", 1, 67, 5, 1],
    [1, "f", 1, 70, 5, 1],
    [1, "f", 1, 72, 5, 1],
    [1, "f", 1, 75, 5, 1],
    [1, "f", 1, 79, 5, 1],
    [1, "f", 2, 68, 5, 1],
    [1, "f", 2, 71, 5, 1],
    [1, "f", 2, 74, 5, 1],
    [1, "f", 2, 76, 5, 1],
    [1, "f", 2, 78, 5, 1],
    [1, "f", 0, 69, 5, 1],
    [1, "f", 0, 73, 5, 1],
    [1, "f", 0, 77, 5, 1],
    [1, "f", 0, 80, 5, 1],
    [1, "f", 1, 81, 5, 1],
    [1, "f", 1, 84, 5, 1],
    [1, "f", 1, 87, 5, 1],
    [1, "f", 1, 89, 5, 1],
    [1, "f", 1, 92, 5, 1],
    [1, "f", 1, 94, 5, 1],
    [1, "f", 0, 82, 5, 1],
    [1, "f", 2, 83, 5, 1],
    [1, "f", 2, 85, 5, 1],
    [1, "f", 2, 88, 5, 1],
    [1, "f", 2, 90, 5, 1],
    [1, "f", 2, 93, 5, 1],
    [1, "f", 2, 95, 5, 1],
    [1, "f", 0, 86, 5, 1],
    [1, "f", 0, 91, 5, 1],
    [1, "f", 2, 6, 153, 1],
    [1, "f", 1, 6, 152, 1],
    [1, "t", 1, 93, 301, 0],
    [1, "t", 3, 94, 302, 0],
    [1, "t", 5, 95, 302, 0],
    [1, "t", 5, 93, 302, 0],
    [1, "b", 3, 92, 302, 0],
    [1, "t", 1, 91, 302, 0],
    [1, "t", 5, 90, 302, 0],
    [1, "b", 2, 92, 301, 0],
    [1, "t", 1, 91, 301, 0],
    [1, "t", 2, 90, 301, 0],
    [1, "b", 2, 89, 302, 0],
    [1, "t", 4, 89, 301, 0],
    [1, "t", 1, 88, 302, 0],
    [1, "t", 2, 88, 301, 0],
    [1, "t", 3, 87, 302, 0],
    [1, "t", 4, 87, 299, 0],
    [1, "t", 4, 86, 302, 0],
    [1, "t", 1, 85, 302, 0],
    [1, "t", 5, 85, 301, 0],
    [1, "b", 2, 84, 302, 0],
    [1, "t", 5, 83, 302, 0],
    [1, "t", 1, 82, 302, 0],
    [1, "t", 5, 81, 302, 0],
    [1, "t", 2, 80, 302, 0],
    [1, "t", 4, 79, 302, 0],
    [1, "t", 2, 78, 302, 0],
    [1, "b", 1, 77, 302, 0],
    [1, "b", 2, 76, 302, 0],
    [1, "t", 2, 75, 302, 0],
    [1, "t", 4, 74, 302, 0],
    [1, "b", 1, 73, 302, 0],
    [1, "t", 2, 72, 302, 0],
    [1, "t", 4, 71, 302, 0],
    [1, "b", 3, 70, 302, 0],
    [1, "t", 1, 69, 302, 0],
    [1, "t", 2, 68, 302, 0],
    [1, "t", 5, 67, 302, 0],
    [1, "b", 1, 66, 302, 0],
    [1, "t", 2, 65, 302, 0],
    [1, "t", 4, 64, 302, 0],
    [1, "b", 3, 63, 302, 0],
    [1, "t", 5, 62, 302, 0],
    [1, "b", 1, 61, 302, 0],
    [1, "t", 3, 60, 302, 0],
    [1, "t", 4, 59, 302, 0],
    [1, "b", 2, 58, 302, 0],
    [1, "t", 5, 57, 302, 0],
    [1, "t", 1, 56, 302, 0],
    [1, "t", 3, 55, 302, 0],
    [1, "t", 4, 54, 302, 0],
    [1, "t", 1, 53, 302, 0],
    [1, "t", 5, 52, 302, 0],
    [1, "t", 2, 51, 302, 0],
    [1, "t", 4, 50, 302, 0],
    [1, "t", 2, 49, 302, 0],
    [1, "b", 1, 48, 302, 0],
    [1, "t", 3, 47, 302, 0],
    [1, "t", 4, 46, 302, 0],
    [1, "t", 1, 45, 302, 0],
    [1, "t", 2, 44, 302, 0],
    [1, "t", 5, 43, 302, 0],
    [1, "t", 2, 42, 302, 0],
    [1, "t", 1, 41, 302, 0],
    [1, "t", 4, 40, 302, 0],
    [1, "b", 2, 39, 302, 0],
    [1, "t", 5, 38, 302, 0],
    [1, "t", 1, 37, 302, 0],
    [1, "t", 2, 36, 302, 0],
    [1, "t", 5, 35, 302, 0],
    [1, "t", 0, 34, 302, 0],
    [1, "t", 3, 33, 302, 0],
    [1, "t", 4, 32, 302, 0],
    [1, "b", 1, 31, 302, 0],
    [1, "t", 2, 30, 302, 0],
    [1, "t", 4, 29, 302, 0],
    [1, "t", 2, 28, 302, 0],
    [1, "t", 5, 27, 302, 0],
    [1, "b", 3, 26, 302, 0],
    [1, "t", 1, 25, 302, 0],
    [1, "t", 4, 24, 302, 0],
    [1, "t", 2, 23, 302, 0],
    [1, "t", 1, 22, 302, 0],
    [1, "t", 5, 21, 302, 0],
    [1, "t", 2, 20, 302, 0],
    [1, "t", 4, 19, 302, 0],
    [1, "b", 1, 18, 302, 0],
    [1, "t", 5, 17, 302, 0],
    [1, "t", 3, 16, 302, 0],
    [1, "t", 1, 15, 302, 0],
    [1, "t", 5, 14, 302, 0],
    [1, "t", 3, 13, 302, 0],
    [1, "t", 4, 12, 302, 0],
    [1, "t", 1, 11, 302, 0],
    [1, "t", 2, 10, 302, 0],
    [1, "t", 4, 9, 302, 0],
    [1, "b", 3, 8, 302, 0],
    [1, "t", 5, 8, 302, 0],
    [1, "t", 5, 7, 302, 0],
    [1, "b", 2, 6, 302, 0],
    [1, "t", 1, 6, 301, 0],
    [1, "t", 4, 6, 300, 0],
    [1, "t", 2, 6, 299, 0],
    [1, "b", 0, 6, 298, 0],
    [1, "t", 5, 6, 297, 0],
    [1, "t", 2, 6, 296, 0],
    [1, "t", 0, 6, 295, 0],
    [1, "b", 2, 6, 294, 0],
    [1, "t", 5, 6, 293, 0],
    [1, "t", 1, 6, 292, 0],
    [1, "b", 0, 6, 291, 0],
    [1, "t", 2, 6, 290, 0],
    [1, "t", 5, 6, 289, 0],
    [1, "t", 1, 6, 288, 0],
    [1, "t", 4, 6, 287, 0],
    [1, "t", 2, 6, 286, 0],
    [1, "t", 5, 6, 285, 0],
    [1, "t", 2, 6, 284, 0],
    [1, "b", 0, 6, 283, 0],
    [1, "t", 2, 6, 282, 0],
    [1, "t", 5, 6, 281, 0],
    [1, "b", 2, 6, 280, 0],
    [1, "t", 5, 6, 279, 0],
    [1, "t", 1, 6, 278, 0],
    [1, "t", 4, 6, 277, 0],
    [1, "t", 3, 6, 276, 0],
    [1, "t", 5, 6, 275, 0],
    [1, "b", 0, 6, 274, 0],
    [1, "t", 5, 6, 273, 0],
    [1, "t", 1, 6, 272, 0],
    [1, "t", 4, 6, 271, 0],
    [1, "b", 3, 6, 270, 0],
    [1, "t", 5, 6, 269, 0],
    [1, "t", 1, 6, 268, 0],
    [1, "t", 4, 6, 267, 0],
    [1, "t", 1, 6, 266, 0],
    [1, "t", 3, 6, 265, 0],
    [1, "t", 4, 6, 264, 0],
    [1, "b", 2, 6, 263, 0],
    [1, "t", 5, 6, 262, 0],
    [1, "t", 3, 6, 261, 0],
    [1, "t", 0, 6, 260, 0],
    [1, "t", 5, 6, 259, 0],
    [1, "t", 1, 6, 258, 0],
    [1, "t", 3, 6, 257, 0],
    [1, "t", 4, 6, 255, 0],
    [1, "t", 3, 6, 254, 0],
    [1, "t", 5, 6, 253, 0],
    [1, "b", 2, 6, 252, 0],
    [1, "t", 5, 6, 251, 0],
    [1, "t", 1, 6, 250, 0],
    [1, "t", 3, 6, 249, 0],
    [1, "t", 4, 6, 248, 0],
    [1, "b", 3, 6, 247, 0],
    [1, "t", 5, 6, 246, 0],
    [1, "t", 3, 6, 245, 0],
    [1, "t", 5, 6, 244, 0],
    [1, "t", 0, 6, 243, 0],
    [1, "t", 4, 6, 242, 0],
    [1, "t", 3, 6, 241, 0],
    [1, "t", 5, 6, 240, 0],
    [1, "b", 0, 6, 239, 0],
    [1, "t", 3, 6, 238, 0],
    [1, "t", 4, 6, 237, 0],
    [1, "t", 1, 6, 236, 0],
    [1, "t", 5, 6, 235, 0],
    [1, "b", 2, 6, 234, 0],
    [1, "t", 2, 6, 233, 0],
    [1, "t", 4, 6, 232, 0],
    [1, "b", 3, 6, 231, 0],
    [1, "t", 5, 6, 230, 0],
    [1, "t", 1, 6, 229, 0],
    [1, "t", 2, 6, 228, 0],
    [1, "t", 5, 6, 227, 0],
    [1, "b", 2, 6, 226, 0],
    [1, "t", 4, 6, 225, 0],
    [1, "t", 0, 6, 224, 0],
    [1, "t", 2, 6, 223, 0],
    [1, "t", 0, 6, 222, 0],
    [1, "b", 2, 6, 221, 0],
    [1, "t", 4, 6, 220, 0],
    [1, "b", 3, 6, 219, 0],
    [1, "t", 5, 6, 218, 0],
    [1, "t", 0, 6, 217, 0],
    [1, "t", 3, 6, 216, 0],
    [1, "b", 0, 6, 215, 0],
    [1, "t", 4, 6, 214, 0],
    [1, "t", 2, 6, 213, 0],
    [1, "t", 0, 6, 212, 0],
    [1, "t", 2, 6, 211, 0],
    [1, "b", 3, 6, 210, 0],
    [1, "t", 0, 6, 209, 0],
    [1, "t", 5, 6, 207, 0],
    [1, "t", 2, 6, 208, 0],
    [1, "t", 0, 6, 206, 0],
    [1, "t", 2, 6, 205, 0],
    [1, "t", 2, 6, 203, 0],
    [1, "b", 0, 6, 202, 0],
    [1, "t", 3, 6, 201, 0],
    [1, "t", 4, 6, 199, 0],
    [1, "t", 0, 6, 198, 0],
    [1, "t", 2, 6, 197, 0],
    [1, "t", 4, 6, 196, 0],
    [1, "t", 1, 6, 195, 0],
    [1, "t", 3, 6, 194, 0],
    [1, "t", 4, 6, 192, 0],
    [1, "t", 2, 6, 191, 0],
    [1, "b", 0, 6, 190, 0],
    [1, "t", 3, 6, 189, 0],
    [1, "t", 4, 6, 187, 0],
    [1, "b", 0, 6, 186, 0],
    [1, "t", 2, 6, 185, 0],
    [1, "t", 4, 6, 184, 0],
    [1, "t", 2, 6, 183, 0],
    [1, "t", 0, 6, 182, 0],
    [1, "b", 2, 6, 181, 0],
    [1, "t", 5, 6, 180, 0],
    [1, "t", 2, 6, 179, 0],
    [1, "t", 0, 6, 178, 0],
    [1, "t", 2, 6, 177, 0],
    [1, "t", 4, 6, 176, 0],
    [1, "b", 2, 6, 175, 0],
    [1, "t", 1, 6, 174, 0],
    [1, "t", 5, 6, 173, 0],
    [1, "t", 2, 6, 256, 0],
    [1, "t", 4, 6, 204, 0],
    [1, "t", 4, 6, 200, 0],
    [1, "t", 2, 6, 193, 0],
    [1, "t", 2, 6, 188, 0],
    [1, "f", 1, 6, 150, 1],
    [1, "f", 2, 6, 151, 1],
    [1, "f", 2, 6, 149, 1],
    [1, "f", 1, 6, 148, 1],
    [1, "f", 2, 6, 147, 1],
    [1, "f", 2, 6, 145, 1],
    [1, "f", 2, 6, 143, 1],
    [1, "f", 1, 6, 146, 1],
    [1, "f", 1, 6, 144, 1],
    [1, "f", 1, 6, 142, 1],
    [1, "f", 2, 6, 141, 1],
    [1, "f", 2, 6, 139, 1],
    [1, "f", 2, 6, 137, 1],
    [1, "f", 2, 6, 135, 1],
    [1, "f", 2, 6, 133, 1],
    [1, "f", 1, 6, 140, 1],
    [1, "f", 1, 6, 138, 1],
    [1, "f", 1, 6, 136, 1],
    [1, "f", 1, 6, 134, 1],
    [1, "f", 1, 6, 132, 1],
    [1, "f", 2, 6, 131, 1],
    [1, "f", 2, 6, 129, 1],
    [1, "f", 2, 6, 127, 1],
    [1, "f", 2, 6, 125, 1],
    [1, "f", 2, 6, 123, 1],
    [1, "f", 2, 6, 121, 1],
    [1, "f", 1, 6, 130, 1],
    [1, "f", 1, 6, 128, 1],
    [1, "f", 1, 6, 126, 1],
    [1, "f", 1, 6, 124, 1],
    [1, "f", 1, 6, 122, 1],
    [1, "f", 1, 6, 120, 1],
    [1, "f", 2, 6, 119, 1],
    [1, "f", 2, 6, 117, 1],
    [1, "f", 2, 6, 115, 1],
    [1, "f", 2, 6, 113, 1],
    [1, "f", 2, 6, 111, 1],
    [1, "f", 2, 6, 109, 1],
    [1, "f", 1, 6, 118, 1],
    [1, "f", 1, 6, 116, 1],
    [1, "f", 1, 6, 114, 1],
    [1, "f", 1, 6, 112, 1],
    [1, "f", 1, 6, 110, 1],
    [1, "f", 1, 6, 108, 1],
    [1, "f", 1, 6, 106, 1],
    [1, "f", 1, 6, 104, 1],
    [1, "f", 2, 6, 107, 1],
    [1, "f", 2, 6, 105, 1],
    [1, "f", 2, 6, 103, 1],
    [1, "f", 2, 6, 101, 1],
    [1, "f", 2, 6, 99, 1],
    [1, "f", 2, 6, 97, 1],
    [1, "f", 2, 6, 95, 1],
    [1, "f", 2, 6, 93, 1],
    [1, "f", 2, 6, 91, 1],
    [1, "f", 1, 6, 102, 1],
    [1, "f", 1, 6, 100, 1],
    [1, "f", 1, 6, 98, 1],
    [1, "f", 1, 6, 96, 1],
    [1, "f", 1, 6, 94, 1],
    [1, "f", 1, 6, 92, 1],
    [1, "f", 1, 6, 90, 1],
    [1, "f", 1, 6, 88, 1],
    [1, "f", 1, 6, 86, 1],
    [1, "f", 2, 6, 89, 1],
    [1, "f", 2, 6, 87, 1],
    [1, "f", 2, 6, 85, 1],
    [1, "f", 2, 6, 83, 1],
    [1, "f", 2, 6, 81, 1],
    [1, "f", 2, 6, 79, 1],
    [1, "f", 2, 6, 77, 1],
    [1, "f", 1, 6, 84, 1],
    [1, "f", 1, 6, 82, 1],
    [1, "f", 1, 6, 80, 1],
    [1, "f", 1, 6, 78, 1],
    [1, "f", 1, 6, 76, 1],
    [1, "f", 2, 6, 75, 1],
    [1, "f", 2, 6, 73, 1],
    [1, "f", 2, 6, 71, 1],
    [1, "f", 2, 6, 69, 1],
    [1, "f", 2, 6, 67, 1],
    [1, "f", 2, 6, 65, 1],
    [1, "f", 1, 6, 74, 1],
    [1, "f", 1, 6, 72, 1],
    [1, "f", 1, 6, 70, 1],
    [1, "f", 1, 6, 68, 1],
    [1, "f", 1, 6, 66, 1],
    [1, "f", 1, 6, 64, 1],
    [1, "f", 2, 6, 63, 1],
    [1, "f", 2, 6, 61, 1],
    [1, "f", 2, 6, 59, 1],
    [1, "f", 2, 6, 57, 1],
    [1, "f", 2, 6, 55, 1],
    [1, "f", 2, 6, 53, 1],
    [1, "f", 2, 6, 51, 1],
    [1, "f", 1, 6, 62, 1],
    [1, "f", 1, 6, 60, 1],
    [1, "f", 1, 6, 58, 1],
    [1, "f", 1, 6, 56, 1],
    [1, "f", 1, 6, 54, 1],
    [1, "f", 1, 6, 52, 1],
    [1, "f", 1, 6, 50, 1],
    [1, "f", 2, 6, 49, 1],
    [1, "f", 2, 6, 47, 1],
    [1, "f", 2, 6, 45, 1],
    [1, "f", 2, 6, 43, 1],
    [1, "f", 2, 6, 41, 1],
    [1, "f", 2, 6, 39, 1],
    [1, "f", 1, 6, 48, 1],
    [1, "f", 1, 6, 46, 1],
    [1, "f", 1, 6, 44, 1],
    [1, "f", 1, 6, 42, 1],
    [1, "f", 1, 6, 40, 1],
    [1, "f", 1, 6, 38, 1],
    [1, "f", 2, 6, 37, 1],
    [1, "f", 2, 6, 35, 1],
    [1, "f", 2, 6, 33, 1],
    [1, "f", 2, 6, 31, 1],
    [1, "f", 2, 6, 29, 1],
    [1, "f", 2, 6, 27, 1],
    [1, "f", 1, 6, 36, 1],
    [1, "f", 1, 6, 34, 1],
    [1, "f", 1, 6, 32, 1],
    [1, "f", 1, 6, 30, 1],
    [1, "f", 1, 6, 28, 1],
    [1, "f", 1, 6, 26, 1],
    [1, "f", 2, 6, 25, 1],
    [1, "f", 2, 6, 23, 1],
    [1, "f", 2, 6, 21, 1],
    [1, "f", 2, 6, 19, 1],
    [1, "f", 2, 6, 17, 1],
    [1, "f", 2, 6, 15, 1],
    [1, "f", 1, 6, 24, 1],
    [1, "f", 1, 6, 22, 1],
    [1, "f", 1, 6, 20, 1],
    [1, "f", 1, 6, 18, 1],
    [1, "f", 1, 6, 16, 1],
    [1, "f", 2, 6, 13, 1],
    [1, "f", 2, 6, 11, 1],
    [1, "f", 2, 6, 9, 1],
    [1, "f", 2, 6, 7, 1],
    [1, "f", 1, 6, 14, 1],
    [1, "f", 1, 6, 12, 1],
    [1, "f", 1, 6, 10, 1],
    [1, "f", 1, 6, 8, 1],
    [1, "f", 1, 6, 6, 1],
    [1, "f", 1, 8, 6, 1],
    [1, "f", 2, 7, 6, 1],
    [1, "f", 2, 9, 6, 1],
    [1, "f", 2, 11, 6, 1],
    [1, "f", 2, 13, 6, 1],
    [1, "f", 2, 15, 6, 1],
    [1, "f", 1, 10, 6, 1],
    [1, "f", 1, 12, 6, 1],
    [1, "f", 1, 14, 6, 1],
    [1, "f", 1, 16, 6, 1],
    [1, "f", 1, 18, 6, 1],
    [1, "f", 1, 20, 6, 1],
    [1, "f", 1, 22, 6, 1],
    [1, "f", 1, 24, 6, 1],
    [1, "f", 1, 26, 6, 1],
    [1, "f", 2, 17, 6, 1],
    [1, "f", 2, 19, 6, 1],
    [1, "f", 2, 21, 6, 1],
    [1, "f", 2, 23, 6, 1],
    [1, "f", 2, 25, 6, 1],
    [1, "f", 2, 27, 6, 1],
    [1, "f", 2, 29, 6, 1],
    [1, "f", 2, 31, 6, 1],
    [1, "f", 2, 33, 6, 1],
    [1, "f", 1, 28, 6, 1],
    [1, "f", 1, 30, 6, 1],
    [1, "f", 1, 32, 6, 1],
    [1, "f", 1, 34, 6, 1],
    [1, "f", 2, 67, 6, 1],
    [1, "f", 2, 69, 6, 1],
    [1, "f", 2, 71, 6, 1],
    [1, "f", 2, 73, 6, 1],
    [1, "f", 2, 75, 6, 1],
    [1, "f", 1, 68, 6, 1],
    [1, "f", 1, 70, 6, 1],
    [1, "f", 1, 72, 6, 1],
    [1, "f", 1, 74, 6, 1],
    [1, "f", 1, 76, 6, 1],
    [1, "f", 2, 77, 6, 1],
    [1, "f", 2, 79, 6, 1],
    [1, "f", 2, 81, 6, 1],
    [1, "f", 2, 83, 6, 1],
    [1, "f", 2, 85, 6, 1],
    [1, "f", 1, 78, 6, 1],
    [1, "f", 1, 80, 6, 1],
    [1, "f", 1, 82, 6, 1],
    [1, "f", 1, 84, 6, 1],
    [1, "f", 1, 86, 6, 1],
    [1, "f", 2, 87, 6, 1],
    [1, "f", 2, 89, 6, 1],
    [1, "f", 2, 91, 6, 1],
    [1, "f", 2, 93, 6, 1],
    [1, "f", 1, 88, 6, 1],
    [1, "f", 1, 90, 6, 1],
    [1, "f", 1, 92, 6, 1],
    [1, "f", 1, 94, 6, 1],
    [1, "f", 2, 95, 6, 1],
    [1, "f", 1, 95, 7, 1],
    [1, "f", 1, 83, 7, 1],
    [1, "f", 1, 81, 7, 1],
    [1, "f", 1, 79, 7, 1],
    [1, "f", 1, 77, 7, 1],
    [1, "f", 1, 75, 7, 1],
    [1, "f", 1, 73, 7, 1],
    [1, "f", 1, 71, 7, 1],
    [1, "f", 1, 69, 7, 1],
    [1, "f", 1, 33, 7, 1],
    [1, "f", 1, 31, 7, 1],
    [1, "f", 1, 29, 7, 1],
    [1, "f", 1, 27, 7, 1],
    [1, "f", 1, 25, 7, 1],
    [1, "f", 1, 23, 7, 1],
    [1, "f", 1, 21, 7, 1],
    [1, "f", 1, 19, 7, 1],
    [1, "f", 1, 17, 7, 1],
    [1, "f", 1, 15, 7, 1],
    [1, "f", 1, 13, 7, 1],
    [1, "f", 1, 11, 7, 1],
    [1, "f", 1, 9, 7, 1],
    [1, "f", 1, 7, 7, 1],
    [1, "s", 0, 7, 8, 1],
    [1, "t", 4, 7, 174, 0],
    [1, "t", 5, 7, 175, 0],
    [1, "t", 4, 7, 176, 0],
    [1, "b", 2, 7, 177, 0],
    [1, "t", 3, 94, 301, 0],
    [1, "b", 3, 95, 301, 0],
    [1, "t", 4, 96, 301, 0],
    [1, "t", 1, 97, 301, 0],
    [1, "t", 2, 98, 301, 0],
    [1, "t", 4, 99, 301, 0],
    [1, "t", 2, 100, 301, 0],
    [1, "t", 4, 96, 304, 0],
    [1, "t", 2, 96, 302, 0],
    [1, "t", 2, 97, 304, 0],
    [1, "t", 2, 96, 303, 0],
    [1, "t", 5, 97, 303, 0],
    [1, "t", 5, 98, 304, 0],
    [1, "b", 2, 97, 302, 0],
    [1, "b", 2, 99, 304, 0],
    [1, "t", 1, 98, 303, 0],
    [1, "t", 4, 98, 302, 0],
    [1, "t", 4, 99, 303, 0],
    [1, "t", 4, 100, 304, 0],
    [1, "t", 5, 99, 302, 0],
    [1, "t", 5, 101, 303, 0],
    [1, "t", 2, 100, 303, 0],
    [1, "t", 0, 100, 302, 0],
    [1, "t", 0, 101, 304, 0],
    [1, "t", 4, 102, 304, 0],
    [1, "f", 0, 94, 7, 1],
    [1, "f", 1, 93, 7, 1],
    [1, "f", 1, 92, 7, 1],
    [1, "f", 0, 91, 7, 1],
    [1, "f", 1, 90, 7, 1],
    [1, "f", 1, 89, 7, 1],
    [1, "f", 0, 88, 7, 1],
    [1, "f", 1, 87, 7, 1],
    [1, "f", 1, 86, 7, 1],
    [1, "f", 1, 85, 7, 1],
    [1, "f", 0, 84, 7, 1],
    [1, "f", 1, 82, 7, 1],
    [1, "f", 0, 80, 7, 1],
    [1, "f", 1, 78, 7, 1],
    [1, "f", 0, 76, 7, 1],
    [1, "f", 1, 74, 7, 1],
    [1, "f", 0, 72, 7, 1],
    [1, "f", 0, 70, 7, 1],
    [1, "f", 1, 68, 7, 1],
    [1, "f", 1, 32, 7, 1],
    [1, "f", 0, 30, 7, 1],
    [1, "f", 1, 28, 7, 1],
    [1, "f", 0, 26, 7, 1],
    [1, "f", 1, 24, 7, 1],
    [1, "f", 0, 22, 7, 1],
    [1, "f", 1, 20, 7, 1],
    [1, "f", 0, 18, 7, 1],
    [1, "f", 1, 16, 7, 1],
    [1, "f", 0, 14, 7, 1],
    [1, "f", 1, 12, 7, 1],
    [1, "f", 0, 10, 7, 1],
    [1, "f", 1, 8, 7, 1],
    [1, "s", 1, 7, 9, 1],
    [1, "f", 0, 95, 152, 1],
    [1, "f", 1, 95, 151, 1],
    [1, "f", 0, 95, 11, 1],
    [1, "f", 1, 95, 12, 1],
    [1, "f", 1, 95, 14, 1],
    [1, "f", 1, 95, 19, 1],
    [1, "f", 0, 95, 15, 1],
    [1, "f", 0, 95, 20, 1],
    [1, "f", 1, 95, 21, 1],
    [1, "f", 1, 95, 26, 1],
    [1, "f", 1, 95, 37, 1],
    [1, "f", 0, 95, 44, 1],
    [1, "f", 1, 95, 50, 1],
    [1, "f", 1, 95, 52, 1],
    [1, "f", 0, 95, 53, 1],
    [1, "f", 1, 95, 54, 1],
    [1, "f", 1, 95, 62, 1],
    [1, "f", 0, 95, 55, 1],
    [1, "f", 1, 95, 64, 1],
    [1, "f", 0, 95, 58, 1],
    [1, "f", 0, 95, 61, 1],
    [1, "f", 0, 95, 68, 1],
    [1, "f", 0, 95, 72, 1],
    [1, "f", 0, 95, 78, 1],
    [1, "f", 1, 95, 115, 1],
    [1, "f", 1, 95, 117, 1],
    [1, "f", 1, 95, 128, 1],
    [1, "f", 0, 95, 85, 1],
    [1, "f", 0, 95, 91, 1],
    [1, "f", 0, 95, 95, 1],
    [1, "f", 0, 95, 114, 1],
    [1, "f", 2, 95, 113, 1],
    [1, "f", 1, 95, 119, 1],
    [1, "f", 0, 95, 120, 1],
    [1, "f", 1, 95, 121, 1],
    [1, "f", 0, 95, 127, 1],
    [1, "f", 1, 95, 130, 1],
    [1, "f", 0, 95, 131, 1],
    [1, "f", 1, 95, 132, 1],
    [1, "f", 1, 95, 136, 1],
    [1, "f", 0, 95, 137, 1],
    [1, "f", 0, 95, 143, 1],
    [1, "f", 0, 95, 147, 1],
    [1, "f", 1, 95, 138, 1],
    [1, "f", 1, 95, 144, 1],
    [1, "f", 1, 95, 10, 1],
    [1, "f", 0, 95, 8, 1],
    [1, "f", 1, 95, 9, 1],
    [1, "f", 0, 95, 13, 1],
    [1, "f", 1, 95, 16, 1],
    [1, "f", 1, 95, 17, 1],
    [1, "f", 0, 95, 18, 1],
    [1, "f", 1, 95, 45, 1],
    [1, "f", 0, 95, 51, 1],
    [1, "f", 1, 95, 56, 1],
    [1, "f", 1, 95, 57, 1],
    [1, "f", 1, 95, 59, 1],
    [1, "f", 1, 95, 60, 1],
    [1, "f", 1, 95, 63, 1],
    [1, "f", 0, 95, 65, 1],
    [1, "f", 1, 95, 66, 1],
    [1, "f", 1, 95, 67, 1],
    [1, "f", 1, 95, 69, 1],
    [1, "f", 1, 95, 70, 1],
    [1, "f", 0, 95, 71, 1],
    [1, "f", 1, 95, 73, 1],
    [1, "f", 1, 95, 74, 1],
    [1, "f", 0, 95, 75, 1],
    [1, "f", 1, 95, 76, 1],
    [1, "f", 1, 95, 77, 1],
    [1, "f", 1, 95, 79, 1],
    [1, "f", 1, 95, 80, 1],
    [1, "f", 0, 95, 81, 1],
    [1, "f", 1, 95, 82, 1],
    [1, "f", 0, 95, 83, 1],
    [1, "f", 1, 95, 84, 1],
    [1, "f", 1, 95, 86, 1],
    [1, "f", 1, 95, 88, 1],
    [1, "f", 0, 95, 87, 1],
    [1, "f", 1, 95, 89, 1],
    [1, "f", 1, 95, 90, 1],
    [1, "f", 1, 95, 92, 1],
    [1, "f", 1, 95, 93, 1],
    [1, "f", 1, 95, 94, 1],
    [1, "f", 1, 95, 96, 1],
    [1, "f", 1, 95, 97, 1],
    [1, "f", 0, 95, 98, 1],
    [1, "f", 1, 95, 99, 1],
    [1, "f", 1, 95, 100, 1],
    [1, "f", 0, 95, 101, 1],
    [1, "f", 1, 95, 102, 1],
    [1, "f", 0, 95, 103, 1],
    [1, "f", 1, 95, 104, 1],
    [1, "f", 1, 95, 105, 1],
    [1, "f", 0, 95, 106, 1],
    [1, "f", 1, 95, 107, 1],
    [1, "f", 1, 95, 108, 1],
    [1, "f", 1, 95, 109, 1],
    [1, "f", 0, 95, 110, 1],
    [1, "f", 1, 95, 111, 1],
    [1, "f", 0, 95, 112, 1],
    [1, "f", 1, 95, 116, 1],
    [1, "f", 0, 95, 118, 1],
    [1, "f", 0, 95, 122, 1],
    [1, "f", 1, 95, 123, 1],
    [1, "f", 1, 95, 124, 1],
    [1, "f", 0, 95, 125, 1],
    [1, "f", 1, 95, 126, 1],
    [1, "f", 1, 95, 129, 1],
    [1, "f", 1, 95, 133, 1],
    [1, "f", 0, 95, 134, 1],
    [1, "f", 1, 95, 135, 1],
    [1, "f", 1, 95, 139, 1],
    [1, "f", 0, 95, 140, 1],
    [1, "f", 1, 95, 141, 1],
    [1, "f", 1, 95, 142, 1],
    [1, "f", 1, 95, 146, 1],
    [1, "f", 0, 95, 145, 1],
    [1, "f", 1, 95, 148, 1],
    [1, "f", 1, 95, 149, 1],
    [1, "f", 1, 95, 150, 1],
    [1, "f", 1, 95, 153, 1],
    [1, "cs", 0, 64, 9, 1],
    [1, "cs", 1, 64, 10, 1],
    [1, "cs", 2, 64, 16, 1],
    [1, "cs", 2, 64, 19, 1],
    [1, "cs", 0, 64, 20, 1],
    [1, "cs", 1, 64, 21, 1],
    [1, "cs", 2, 64, 22, 1],
    [1, "cs", 0, 64, 23, 1],
    [1, "cs", 2, 64, 24, 1],
    [1, "cs", 1, 64, 29, 1],
    [1, "cs", 2, 64, 30, 1],
    [1, "cs", 3, 64, 31, 1],
    [1, "cs", 0, 64, 32, 1],
    [1, "cs", 1, 64, 33, 1],
    [1, "cs", 2, 64, 34, 1],
    [1, "cs", 0, 64, 35, 1],
    [1, "cs", 2, 64, 8, 1],
    [1, "cs", 2, 65, 8, 1],
    [1, "cs", 1, 65, 9, 1],
    [1, "cs", 2, 65, 10, 1],
    [1, "cs", 3, 65, 11, 1],
    [1, "cs", 1, 65, 16, 1],
    [1, "cs", 0, 64, 17, 1],
    [1, "cs", 3, 65, 17, 1],
    [1, "cs", 2, 64, 18, 1],
    [1, "cs", 2, 65, 18, 1],
    [1, "cs", 0, 65, 19, 1],
    [1, "cs", 1, 65, 20, 1],
    [1, "cs", 3, 65, 21, 1],
    [1, "cs", 2, 65, 22, 1],
    [1, "cs", 3, 65, 23, 1],
    [1, "cs", 0, 65, 24, 1],
    [1, "cs", 2, 65, 29, 1],
    [1, "cs", 3, 65, 30, 1],
    [1, "cs", 0, 65, 31, 1],
    [1, "cs", 1, 65, 32, 1],
    [1, "cs", 2, 65, 33, 1],
    [1, "cs", 3, 65, 34, 1],
    [1, "cs", 2, 63, 9, 1],
    [1, "cs", 0, 62, 9, 1],
    [1, "cs", 2, 61, 9, 1],
    [1, "cs", 0, 60, 9, 1],
    [1, "cs", 2, 59, 9, 1],
    [1, "cs", 2, 58, 9, 1],
    [1, "cs", 0, 57, 9, 1],
    [1, "cs", 2, 56, 9, 1],
    [1, "cs", 2, 55, 9, 1],
    [1, "cs", 2, 54, 9, 1],
    [1, "cs", 0, 53, 9, 1],
    [1, "cs", 0, 51, 9, 1],
    [1, "cs", 2, 52, 9, 1],
    [1, "cs", 2, 50, 9, 1],
    [1, "cs", 2, 48, 9, 1],
    [1, "cs", 2, 49, 9, 1],
    [1, "cs", 0, 47, 9, 1],
    [1, "cs", 0, 45, 9, 1],
    [1, "cs", 0, 43, 9, 1],
    [1, "cs", 2, 46, 9, 1],
    [1, "cs", 2, 44, 9, 1],
    [1, "cs", 2, 42, 9, 1],
    [1, "cs", 2, 41, 9, 1],
    [1, "cs", 0, 40, 9, 1],
    [1, "cs", 2, 39, 9, 1],
    [1, "cs", 2, 38, 9, 1],
    [1, "cs", 0, 37, 9, 1],
    [1, "cs", 0, 63, 8, 1],
    [1, "cs", 2, 65, 7, 1],
    [1, "cs", 3, 64, 7, 1],
    [1, "cs", 2, 62, 8, 1],
    [1, "cs", 3, 61, 8, 1],
    [1, "cs", 1, 62, 7, 1],
    [1, "cs", 2, 63, 7, 1],
    [1, "cs", 0, 64, 6, 1],
    [1, "cs", 3, 65, 6, 1],
    [1, "cs", 2, 63, 6, 1],
    [1, "cs", 2, 62, 6, 1],
    [1, "cs", 2, 61, 6, 1],
    [1, "cs", 2, 60, 6, 1],
    [1, "cs", 2, 59, 6, 1],
    [1, "cs", 2, 61, 7, 1],
    [1, "cs", 0, 60, 7, 1],
    [1, "cs", 2, 60, 8, 1],
    [1, "cs", 2, 59, 7, 1],
    [1, "cs", 2, 59, 8, 1],
    [1, "cs", 1, 58, 8, 1],
    [1, "cs", 1, 57, 6, 1],
    [1, "cs", 1, 55, 7, 1],
    [1, "cs", 0, 56, 6, 1],
    [1, "cs", 2, 58, 6, 1],
    [1, "cs", 2, 58, 7, 1],
    [1, "cs", 2, 57, 7, 1],
    [1, "cs", 2, 56, 7, 1],
    [1, "cs", 2, 55, 6, 1],
    [1, "cs", 2, 57, 8, 1],
    [1, "cs", 2, 56, 8, 1],
    [1, "cs", 2, 55, 8, 1],
    [1, "cs", 0, 54, 8, 1],
    [1, "cs", 0, 50, 7, 1],
    [1, "cs", 0, 53, 6, 1],
    [1, "cs", 2, 54, 6, 1],
    [1, "cs", 2, 54, 7, 1],
    [1, "cs", 2, 53, 7, 1],
    [1, "cs", 2, 52, 7, 1],
    [1, "cs", 2, 52, 6, 1],
    [1, "cs", 1, 52, 8, 1],
    [1, "cs", 2, 53, 8, 1],
    [1, "cs", 2, 51, 8, 1],
    [1, "cs", 2, 51, 7, 1],
    [1, "cs", 2, 51, 6, 1],
    [1, "cs", 2, 50, 6, 1],
    [1, "cs", 2, 50, 8, 1],
    [1, "cs", 2, 49, 8, 1],
    [1, "cs", 2, 49, 7, 1],
    [1, "cs", 2, 49, 6, 1],
    [1, "cs", 0, 46, 7, 1],
    [1, "cs", 1, 48, 8, 1],
    [1, "cs", 1, 44, 7, 1],
    [1, "cs", 1, 41, 8, 1],
    [1, "cs", 2, 48, 7, 1],
    [1, "cs", 2, 48, 6, 1],
    [1, "cs", 2, 47, 6, 1],
    [1, "cs", 2, 47, 7, 1],
    [1, "cs", 2, 47, 8, 1],
    [1, "cs", 2, 46, 8, 1],
    [1, "cs", 2, 45, 8, 1],
    [1, "cs", 2, 45, 7, 1],
    [1, "cs", 2, 45, 6, 1],
    [1, "cs", 2, 46, 6, 1],
    [1, "cs", 2, 44, 6, 1],
    [1, "cs", 2, 44, 8, 1],
    [1, "cs", 2, 43, 8, 1],
    [1, "cs", 2, 43, 7, 1],
    [1, "cs", 2, 43, 6, 1],
    [1, "cs", 2, 42, 6, 1],
    [1, "cs", 2, 42, 7, 1],
    [1, "cs", 2, 42, 8, 1],
    [1, "cs", 2, 41, 7, 1],
    [1, "cs", 2, 41, 6, 1],
    [1, "cs", 2, 40, 6, 1],
    [1, "cs", 2, 40, 7, 1],
    [1, "cs", 2, 40, 8, 1],
    [1, "cs", 2, 39, 8, 1],
    [1, "cs", 0, 39, 7, 1],
    [1, "cs", 1, 38, 8, 1],
    [1, "cs", 2, 39, 6, 1],
    [1, "cs", 2, 38, 6, 1],
    [1, "cs", 2, 37, 6, 1],
    [1, "cs", 2, 38, 7, 1],
    [1, "cs", 2, 37, 7, 1],
    [1, "cs", 2, 37, 8, 1],
    [1, "cs", 2, 37, 10, 1],
    [1, "cs", 2, 38, 10, 1],
    [1, "cs", 0, 38, 11, 1],
    [1, "cs", 0, 38, 17, 1],
    [1, "cs", 1, 37, 18, 1],
    [1, "cs", 0, 38, 19, 1],
    [1, "cs", 2, 37, 11, 1],
    [1, "cs", 2, 37, 16, 1],
    [1, "cs", 2, 37, 17, 1],
    [1, "cs", 2, 38, 18, 1],
    [1, "cs", 2, 37, 19, 1],
    [1, "cs", 3, 38, 16, 1],
    [1, "cs", 0, 37, 21, 1],
    [1, "cs", 0, 38, 22, 1],
    [1, "cs", 0, 38, 24, 1],
    [1, "cs", 2, 37, 20, 1],
    [1, "cs", 2, 38, 20, 1],
    [1, "cs", 2, 38, 21, 1],
    [1, "cs", 1, 37, 23, 1],
    [1, "cs", 3, 37, 22, 1],
    [1, "cs", 3, 38, 23, 1],
    [1, "cs", 2, 37, 24, 1],
    [1, "cs", 0, 38, 30, 1],
    [1, "cs", 0, 38, 32, 1],
    [1, "cs", 0, 37, 31, 1],
    [1, "cs", 1, 38, 34, 1],
    [1, "cs", 1, 37, 29, 1],
    [1, "cs", 2, 38, 29, 1],
    [1, "cs", 2, 37, 30, 1],
    [1, "cs", 2, 38, 31, 1],
    [1, "cs", 2, 37, 32, 1],
    [1, "cs", 3, 38, 33, 1],
    [1, "cs", 3, 38, 35, 1],
    [1, "cs", 2, 37, 33, 1],
    [1, "cs", 2, 36, 8, 1],
    [1, "cs", 0, 36, 11, 1],
    [1, "cs", 0, 35, 9, 1],
    [1, "cs", 2, 36, 9, 1],
    [1, "cs", 2, 36, 10, 1],
    [1, "cs", 2, 35, 10, 1],
    [1, "cs", 1, 33, 8, 1],
    [1, "cs", 3, 34, 9, 1],
    [1, "cs", 3, 35, 8, 1],
    [1, "cs", 2, 34, 8, 1],
    [1, "cs", 0, 36, 7, 1],
    [1, "cs", 1, 34, 7, 1],
    [1, "cs", 2, 35, 7, 1],
    [1, "cs", 2, 35, 6, 1],
    [1, "cs", 2, 36, 6, 1],
    [1, "cs", 2, 68, 9, 1],
    [1, "cs", 2, 66, 10, 1],
    [1, "cs", 3, 66, 9, 1],
    [1, "cs", 0, 67, 9, 1],
    [1, "cs", 0, 66, 8, 1],
    [1, "cs", 2, 67, 8, 1],
    [1, "cs", 1, 68, 8, 1],
    [1, "cs", 1, 66, 11, 1],
    [1, "cs", 2, 67, 10, 1],
    [1, "cs", 0, 66, 6, 1],
    [1, "cs", 2, 66, 7, 1],
    [1, "cs", 2, 67, 7, 1],
    [1, "cs", 2, 69, 8, 1],
    [1, "cs", 2, 63, 32, 1],
    [1, "cs", 2, 62, 34, 1],
    [1, "cs", 2, 60, 35, 1],
    [1, "cs", 3, 59, 35, 1],
    [1, "cs", 0, 61, 35, 1],
    [1, "cs", 0, 63, 34, 1],
    [1, "cs", 2, 63, 33, 1],
    [1, "cs", 2, 63, 35, 1],
    [1, "cs", 2, 62, 35, 1],
    [1, "cs", 2, 58, 36, 1],
    [1, "cs", 1, 59, 36, 1],
    [1, "cs", 1, 62, 36, 1],
    [1, "cs", 2, 60, 36, 1],
    [1, "cs", 2, 61, 34, 1],
    [1, "cs", 3, 62, 33, 1],
    [1, "cs", 3, 63, 36, 1],
    [1, "cs", 3, 61, 36, 1],
    [1, "cs", 0, 42, 36, 1],
    [1, "cs", 1, 39, 36, 1],
    [1, "cs", 2, 41, 36, 1],
    [1, "cs", 3, 39, 35, 1],
    [1, "cs", 3, 40, 36, 1],
    [1, "cs", 3, 43, 36, 1],
    [1, "cs", 1, 40, 35, 1],
    [1, "cs", 2, 41, 35, 1],
    [1, "cs", 2, 40, 34, 1],
    [1, "cs", 2, 39, 34, 1],
    [1, "cs", 2, 39, 33, 1],
    [1, "cs", 2, 39, 32, 1],
    [1, "cs", 0, 40, 33, 1],
    [1, "cs", 2, 41, 34, 1],
    [1, "cs", 1, 44, 36, 1],
    [1, "cs", 3, 43, 35, 1],
    [1, "cs", 2, 42, 35, 1],
    [1, "cs", 0, 37, 34, 1],
    [1, "cs", 3, 59, 30, 1],
    [1, "cs", 0, 60, 29, 1],
    [1, "cs", 2, 60, 28, 1],
    [1, "cs", 3, 60, 27, 1],
    [1, "cs", 0, 60, 26, 1],
    [1, "cs", 2, 54, 25, 1],
    [1, "cs", 2, 48, 25, 1],
    [1, "cs", 2, 42, 26, 1],
    [1, "cs", 0, 55, 25, 1],
    [1, "cs", 2, 59, 26, 1],
    [1, "cs", 0, 43, 26, 1],
    [1, "cs", 1, 42, 27, 1],
    [1, "cs", 2, 42, 28, 1],
    [1, "cs", 2, 43, 30, 1],
    [1, "cs", 0, 42, 29, 1],
    [1, "cs", 0, 54, 24, 1],
    [1, "cs", 0, 48, 24, 1],
    [1, "cs", 2, 54, 23, 1],
    [1, "cs", 2, 48, 23, 1],
    [1, "cs", 2, 63, 22, 1],
    [1, "cs", 2, 63, 21, 1],
    [1, "cs", 2, 39, 21, 1],
    [1, "cs", 3, 57, 18, 1],
    [1, "cs", 2, 56, 18, 1],
    [1, "cs", 3, 51, 21, 1],
    [1, "cs", 0, 51, 20, 1],
    [1, "cs", 2, 51, 19, 1],
    [1, "cs", 3, 51, 18, 1],
    [1, "cs", 2, 63, 16, 1],
    [1, "cs", 2, 63, 10, 1],
    [1, "cs", 2, 56, 13, 1],
    [1, "cs", 3, 57, 13, 1],
    [1, "cs", 1, 45, 18, 1],
    [1, "cs", 2, 47, 18, 1],
    [1, "cs", 2, 46, 18, 1],
    [1, "cs", 0, 46, 13, 1],
    [1, "cs", 2, 45, 13, 1],
    [1, "cs", 2, 39, 10, 1],
    [1, "cs", 2, 39, 16, 1],
    [1, "cs", 2, 47, 17, 1],
    [1, "a", 0, 51, 15, 1],
    [1, "a", 1, 53, 14, 1],
    [1, "a", 1, 49, 14, 1],
    [1, "de", 8, 55, 15, 0],
    [1, "de", 9, 48, 28, 0],
    [1, "de", 10, 58, 26, 0],
    [1, "de", 11, 59, 29, 0],
    [1, "de", 11, 55, 34, 0],
    [1, "de", 10, 48, 33, 0],
    [1, "de", 9, 41, 32, 0],
    [1, "de", 9, 56, 24, 0],
    [1, "de", 9, 62, 16, 0],
    [1, "de", 9, 45, 11, 0],
    [1, "de", 9, 44, 17, 0],
    [1, "de", 10, 44, 13, 0],
    [1, "de", 10, 58, 13, 0],
    [1, "de", 10, 63, 31, 0],
    [1, "de", 8, 60, 30, 0],
    [1, "de", 8, 43, 26, 0],
    [1, "de", 10, 43, 29, 0],
    [1, "de", 10, 53, 29, 0],
    [1, "de", 10, 53, 24, 0],
    [1, "de", 9, 53, 19, 0],
    [1, "de", 11, 49, 19, 0],
    [1, "de", 10, 39, 26, 0],
    [1, "de", 9, 46, 24, 0],
    [1, "de", 9, 62, 10, 0],
    [1, "de", 8, 40, 14, 0],
    [1, "de", 32, 55, 35, 0],
    [1, "de", 32, 60, 33, 0],
    [1, "de", 32, 63, 28, 0],
    [1, "de", 32, 63, 24, 0],
    [1, "de", 32, 58, 22, 0],
    [1, "de", 32, 59, 17, 0],
    [1, "de", 32, 63, 13, 0],
    [1, "de", 32, 59, 10, 0],
    [1, "de", 32, 56, 12, 0],
    [1, "de", 32, 52, 17, 0],
    [1, "de", 32, 51, 14, 0],
    [1, "de", 32, 39, 12, 0],
    [1, "de", 32, 39, 18, 0],
    [1, "de", 32, 41, 25, 0],
    [1, "de", 32, 39, 30, 0],
    [1, "de", 32, 50, 29, 0],
    [1, "de", 32, 43, 34, 0],
    [1, "de", 32, 47, 34, 0],
    [1, "de", 31, 54, 33, 0],
    [1, "de", 31, 59, 24, 0],
    [1, "de", 31, 63, 19, 0],
    [1, "de", 31, 47, 15, 0],
    [1, "de", 31, 43, 17, 0],
    [1, "de", 31, 39, 27, 0],
    [1, "de", 31, 48, 27, 0],
    [1, "de", 31, 57, 27, 0],
    [1, "de", 32, 44, 27, 0],
    [1, "d", 0, 12, 13, 1],
    [1, "d", 0, 89, 13, 1],
    [1, "d", 1, 91, 21, 1],
    [1, "d", 1, 10, 22, 1],
    [1, "f", 2, 89, 18, 1],
    [1, "f", 0, 88, 19, 1],
    [1, "g", 1, 85, 22, 1],
    [1, "s", 1, 90, 29, 1],
    [1, "s", 1, 92, 15, 1],
    [1, "s", 0, 91, 31, 1],
    [1, "s", 2, 90, 38, 1],
    [1, "s", 0, 91, 42, 1],
    [1, "s", 0, 90, 49, 1],
    [1, "f", 1, 86, 43, 1],
    [1, "f", 0, 81, 45, 1],
    [1, "f", 2, 66, 44, 1],
    [1, "f", 2, 55, 49, 1],
    [1, "f", 1, 54, 50, 1],
    [1, "f", 2, 43, 45, 1],
    [1, "f", 2, 31, 48, 1],
    [1, "f", 1, 27, 39, 1],
    [1, "f", 1, 80, 46, 1],
    [1, "f", 1, 69, 48, 1],
    [1, "g", 0, 80, 40, 1],
    [1, "g", 2, 81, 40, 1],
    [1, "s", 2, 77, 39, 1],
    [1, "s", 0, 68, 43, 1],
    [1, "s", 2, 57, 41, 1],
    [1, "s", 1, 56, 42, 1],
    [1, "s", 1, 40, 41, 1],
    [1, "s", 2, 48, 48, 1],
    [1, "f", 2, 17, 12, 1],
    [1, "f", 0, 13, 31, 1],
    [1, "f", 1, 14, 32, 1],
    [1, "s", 0, 15, 27, 1],
    [1, "s", 0, 13, 39, 1],
    [1, "f", 2, 11, 17, 1],
    [1, "f", 1, 12, 18, 1],
    [1, "g", 2, 12, 25, 1],
    [1, "f", 0, 16, 45, 1],
    [1, "f", 1, 17, 46, 1],
    [1, "s", 1, 74, 48, 1],
    [1, "s", 1, 20, 47, 1],
    [1, "g", 0, 58, 59, 1],
    [1, "g", 0, 46, 72, 1],
    [1, "g", 0, 69, 79, 1],
    [1, "g", 0, 72, 74, 1],
    [1, "g", 0, 26, 88, 1],
    [1, "g", 0, 20, 74, 1],
    [1, "g", 0, 28, 67, 1],
    [1, "g", 0, 49, 86, 1],
    [1, "g", 0, 77, 90, 1],
    [1, "g", 0, 87, 72, 1],
    [1, "g", 0, 14, 85, 1],
    [1, "g", 1, 85, 97, 1],
    [1, "g", 1, 68, 104, 1],
    [1, "g", 1, 63, 91, 1],
    [1, "g", 1, 39, 90, 1],
    [1, "g", 1, 34, 99, 1],
    [1, "g", 1, 17, 103, 1],
    [1, "g", 2, 77, 60, 1],
    [1, "g", 2, 19, 56, 1],
    [1, "g", 2, 39, 60, 1],
    [1, "g", 2, 87, 57, 1],
    [1, "f", 0, 9, 62, 1],
    [1, "f", 0, 12, 81, 1],
    [1, "f", 0, 26, 59, 1],
    [1, "f", 0, 35, 53, 1],
    [1, "f", 0, 44, 58, 1],
    [1, "f", 0, 88, 62, 1],
    [1, "f", 0, 91, 82, 1],
    [1, "f", 0, 84, 85, 1],
    [1, "f", 0, 79, 69, 1],
    [1, "f", 0, 64, 71, 1],
    [1, "f", 0, 62, 83, 1],
    [1, "f", 0, 34, 81, 1],
    [1, "f", 0, 39, 71, 1],
    [1, "f", 0, 54, 94, 1],
    [1, "f", 1, 81, 70, 1],
    [1, "f", 1, 91, 72, 1],
    [1, "f", 1, 8, 91, 1],
    [1, "f", 1, 14, 81, 1],
    [1, "f", 1, 29, 79, 1],
    [1, "f", 1, 13, 65, 1],
    [1, "f", 1, 46, 97, 1],
    [1, "f", 1, 43, 73, 1],
    [1, "f", 1, 60, 69, 1],
    [1, "f", 1, 70, 96, 1],
    [1, "f", 1, 58, 84, 1],
    [1, "s", 1, 56, 76, 1],
    [1, "s", 1, 85, 74, 1],
    [1, "s", 0, 72, 71, 1],
    [1, "s", 0, 41, 62, 1],
    [1, "s", 0, 60, 61, 1],
    [1, "s", 0, 20, 66, 1],
    [1, "s", 0, 47, 83, 1],
    [1, "s", 0, 29, 86, 1],
    [1, "s", 0, 78, 92, 1],
    [1, "s", 0, 62, 102, 1],
    [1, "s", 0, 18, 95, 1],
    [1, "s", 2, 64, 101, 1],
    [1, "s", 2, 78, 84, 1],
    [1, "s", 2, 49, 83, 1],
    [1, "s", 2, 15, 76, 1],
    [1, "s", 2, 21, 84, 1],
    [1, "f", 1, 26, 94, 1],
    [1, "f", 2, 23, 96, 1],
    [1, "f", 2, 25, 72, 1],
    [1, "f", 2, 85, 77, 1],
    [1, "f", 2, 79, 95, 1],
    [1, "f", 2, 51, 65, 1],
    [1, "f", 2, 69, 60, 1],
    [1, "f", 1, 25, 105, 1],
    [1, "s", 1, 18, 68, 1],
    [1, "s", 0, 55, 76, 1],
    [1, "s", 0, 74, 59, 1],
    [1, "f", 1, 46, 142, 1],
    [1, "f", 1, 19, 140, 1],
    [1, "f", 1, 77, 137, 1],
    [1, "f", 0, 75, 137, 1],
    [1, "f", 0, 55, 138, 1],
    [1, "f", 0, 33, 127, 1],
    [1, "f", 0, 76, 121, 1],
    [1, "f", 0, 55, 121, 1],
    [1, "f", 0, 13, 123, 1],
    [1, "f", 0, 18, 141, 1],
    [1, "f", 0, 40, 137, 1],
    [1, "f", 2, 76, 142, 1],
    [1, "f", 2, 57, 140, 1],
    [1, "f", 2, 39, 138, 1],
    [1, "f", 2, 16, 143, 1],
    [1, "f", 2, 29, 131, 1],
    [1, "f", 0, 70, 150, 1],
    [1, "f", 0, 28, 146, 1],
    [1, "f", 0, 12, 132, 1],
    [1, "f", 0, 90, 129, 1],
    [1, "f", 1, 87, 131, 1],
    [1, "f", 0, 91, 143, 1],
    [1, "f", 2, 87, 145, 1],
    [1, "f", 1, 89, 141, 1],
    [1, "f", 1, 63, 130, 1],
    [1, "f", 1, 75, 122, 1],
    [1, "f", 1, 52, 124, 1],
    [1, "f", 1, 34, 127, 1],
    [1, "f", 1, 14, 123, 1],
    [1, "f", 1, 24, 122, 1],
    [1, "f", 0, 83, 108, 1],
    [1, "f", 0, 89, 118, 1],
    [1, "f", 0, 56, 107, 1],
    [1, "f", 0, 38, 113, 1],
    [1, "f", 0, 16, 110, 1],
    [1, "f", 1, 80, 105, 1],
    [1, "f", 1, 82, 109, 1],
    [1, "f", 1, 87, 118, 1],
    [1, "f", 1, 59, 110, 1],
    [1, "f", 1, 29, 111, 1],
    [1, "f", 2, 28, 112, 1],
    [1, "f", 2, 70, 112, 1],
    [1, "f", 2, 42, 111, 1],
    [1, "s", 0, 68, 157, 1],
    [1, "s", 0, 81, 158, 1],
    [1, "s", 0, 25, 172, 1],
    [1, "s", 0, 22, 161, 1],
    [1, "s", 0, 35, 152, 1],
    [1, "s", 0, 66, 144, 1],
    [1, "s", 0, 87, 145, 1],
    [1, "s", 0, 86, 145, 1],
    [1, "s", 0, 84, 135, 1],
    [1, "s", 0, 69, 133, 1],
    [1, "s", 0, 84, 122, 1],
    [1, "s", 0, 68, 121, 1],
    [1, "s", 0, 48, 124, 1],
    [1, "s", 0, 26, 129, 1],
    [1, "s", 0, 9, 127, 1],
    [1, "s", 0, 11, 144, 1],
    [1, "s", 0, 9, 109, 1],
    [1, "s", 0, 35, 101, 1],
    [1, "s", 0, 47, 109, 1],
    [1, "s", 0, 58, 111, 1],
    [1, "s", 0, 84, 110, 1],
    [1, "s", 0, 28, 114, 1],
    [1, "s", 1, 30, 116, 1],
    [1, "s", 1, 46, 112, 1],
    [1, "s", 1, 81, 111, 1],
    [1, "s", 1, 70, 123, 1],
    [1, "s", 1, 49, 127, 1],
    [1, "s", 1, 66, 134, 1],
    [1, "s", 1, 67, 144, 1],
    [1, "s", 1, 38, 152, 1],
    [1, "s", 1, 21, 164, 1],
    [1, "s", 1, 12, 147, 1],
    [1, "s", 1, 24, 130, 1],
    [1, "s", 1, 12, 125, 1],
    [1, "s", 1, 65, 158, 1],
    [1, "s", 1, 83, 167, 1],
    [1, "s", 1, 65, 167, 1],
    [1, "s", 1, 47, 164, 1],
    [1, "s", 1, 56, 168, 1],
    [1, "s", 2, 54, 169, 1],
    [1, "s", 2, 88, 170, 1],
    [1, "s", 2, 91, 162, 1],
    [1, "s", 2, 79, 149, 1],
    [1, "s", 2, 75, 144, 1],
    [1, "s", 2, 57, 150, 1],
    [1, "s", 2, 47, 143, 1],
    [1, "s", 2, 31, 145, 1],
    [1, "s", 2, 36, 138, 1],
    [1, "s", 2, 10, 163, 1],
    [1, "s", 2, 22, 142, 1],
    [1, "g", 2, 78, 132, 1],
    [1, "g", 1, 48, 135, 1],
    [1, "g", 2, 16, 136, 1],
    [1, "g", 0, 62, 92, 1],
    [1, "g", 2, 70, 80, 1],
    [1, "g", 2, 15, 86, 1],
    [1, "g", 2, 47, 75, 1],
    [1, "g", 2, 36, 89, 1],
    [1, "g", 2, 80, 90, 1],
    [1, "f", 1, 39, 118, 1],
    [1, "d", 2, 84, 54, 1],
    [1, "d", 2, 16, 54, 1],
    [1, "de", 7, 13, 13, 0],
    [1, "de", 5, 16, 28, 0],
    [1, "de", 5, 9, 25, 0],
    [1, "de", 5, 34, 41, 0],
    [1, "de", 4, 28, 40, 0],
    [1, "de", 6, 31, 47, 0],
    [1, "de", 6, 12, 39, 0],
    [1, "de", 4, 16, 47, 0],
    [1, "de", 4, 7, 46, 0],
    [1, "de", 6, 7, 33, 0],
    [1, "de", 6, 40, 42, 0],
    [1, "de", 7, 20, 48, 0],
    [1, "de", 7, 29, 59, 0],
    [1, "de", 6, 27, 58, 0],
    [1, "de", 6, 15, 54, 0],
    [1, "de", 5, 12, 66, 0],
    [1, "de", 5, 37, 53, 0],
    [1, "de", 4, 10, 63, 0],
    [1, "de", 7, 49, 48, 0],
    [1, "de", 7, 37, 63, 0],
    [1, "de", 6, 33, 68, 0],
    [1, "de", 6, 56, 52, 0],
    [1, "de", 5, 59, 58, 0],
    [1, "de", 6, 48, 58, 0],
    [1, "de", 4, 53, 63, 0],
    [1, "de", 4, 67, 44, 0],
    [1, "de", 5, 70, 49, 0],
    [1, "de", 5, 82, 55, 0],
    [1, "de", 5, 79, 41, 0],
    [1, "de", 5, 91, 29, 0],
    [1, "de", 7, 91, 43, 0],
    [1, "de", 6, 85, 44, 0],
    [1, "de", 6, 74, 60, 0],
    [1, "de", 6, 90, 8, 0],
    [1, "de", 5, 91, 15, 0],
    [1, "de", 4, 87, 20, 0],
    [1, "de", 7, 93, 11, 0],
    [1, "de", 6, 91, 21, 0],
    [1, "de", 6, 85, 35, 0],
    [1, "de", 5, 93, 58, 0],
    [1, "de", 5, 87, 63, 0],
    [1, "de", 7, 77, 62, 0],
    [1, "de", 6, 68, 61, 0],
    [1, "de", 5, 90, 73, 0],
    [1, "de", 4, 87, 71, 0],
    [1, "de", 7, 80, 71, 0],
    [1, "de", 7, 83, 77, 0],
    [1, "de", 7, 89, 83, 0],
    [1, "de", 4, 71, 80, 0],
    [1, "de", 4, 71, 70, 0],
    [1, "de", 5, 63, 72, 0],
    [1, "de", 4, 54, 75, 0],
    [1, "de", 5, 44, 83, 0],
    [1, "de", 5, 42, 74, 0],
    [1, "de", 5, 15, 81, 0],
    [1, "de", 4, 29, 80, 0],
    [1, "de", 4, 37, 90, 0],
    [1, "de", 4, 7, 75, 0],
    [1, "de", 6, 22, 74, 0],
    [1, "de", 6, 43, 95, 0],
    [1, "de", 6, 57, 85, 0],
    [1, "de", 6, 19, 94, 0],
    [1, "de", 6, 9, 92, 0],
    [1, "de", 5, 26, 89, 0],
    [1, "de", 5, 31, 112, 0],
    [1, "de", 5, 54, 108, 0],
    [1, "de", 5, 55, 95, 0],
    [1, "de", 5, 35, 104, 0],
    [1, "de", 5, 13, 110, 0],
    [1, "de", 7, 27, 107, 0],
    [1, "de", 7, 47, 99, 0],
    [1, "de", 7, 11, 104, 0],
    [1, "de", 7, 9, 111, 0],
    [1, "de", 7, 40, 114, 0],
    [1, "de", 7, 28, 117, 0],
    [1, "de", 7, 47, 113, 0],
    [1, "de", 7, 63, 104, 0],
    [1, "de", 4, 64, 92, 0],
    [1, "de", 6, 86, 97, 0],
    [1, "de", 5, 76, 91, 0],
    [1, "de", 5, 85, 86, 0],
    [1, "de", 6, 78, 83, 0],
    [1, "de", 6, 71, 97, 0],
    [1, "de", 4, 69, 105, 0],
    [1, "de", 4, 79, 104, 0],
    [1, "de", 4, 86, 109, 0],
    [1, "de", 4, 86, 118, 0],
    [1, "de", 5, 70, 113, 0],
    [1, "de", 6, 69, 121, 0],
    [1, "de", 6, 76, 122, 0],
    [1, "de", 7, 87, 130, 0],
    [1, "de", 4, 84, 123, 0],
    [1, "de", 4, 57, 121, 0],
    [1, "de", 5, 53, 125, 0],
    [1, "de", 5, 62, 131, 0],
    [1, "de", 6, 67, 143, 0],
    [1, "de", 5, 77, 143, 0],
    [1, "de", 5, 85, 136, 0],
    [1, "de", 6, 87, 147, 0],
    [1, "de", 6, 92, 140, 0],
    [1, "de", 4, 93, 127, 0],
    [1, "de", 5, 93, 106, 0],
    [1, "de", 5, 45, 144, 0],
    [1, "de", 4, 41, 139, 0],
    [1, "de", 4, 54, 138, 0],
    [1, "de", 6, 29, 145, 0],
    [1, "de", 6, 29, 132, 0],
    [1, "de", 6, 35, 127, 0],
    [1, "de", 6, 64, 142, 0],
    [1, "de", 5, 23, 131, 0],
    [1, "de", 5, 9, 134, 0],
    [1, "de", 6, 11, 121, 0],
    [1, "de", 4, 26, 121, 0],
    [1, "de", 35, 58, 150, 0],
    [1, "de", 33, 48, 156, 0],
    [1, "de", 33, 25, 158, 0],
    [1, "de", 33, 36, 154, 0],
    [1, "de", 34, 9, 154, 0],
    [1, "de", 34, 13, 148, 0],
    [1, "de", 34, 21, 142, 0],
    [1, "de", 34, 38, 139, 0],
    [1, "de", 34, 47, 144, 0],
    [1, "de", 34, 68, 142, 0],
    [1, "de", 36, 70, 135, 0],
    [1, "de", 36, 64, 132, 0],
    [1, "de", 36, 86, 134, 0],
    [1, "de", 36, 90, 141, 0],
    [1, "de", 36, 93, 131, 0],
    [1, "de", 36, 91, 125, 0],
    [1, "de", 36, 76, 123, 0],
    [1, "de", 33, 82, 122, 0],
    [1, "de", 35, 56, 122, 0],
    [1, "de", 35, 40, 119, 0],
    [1, "de", 35, 17, 112, 0],
    [1, "de", 35, 37, 102, 0],
    [1, "de", 33, 18, 97, 0],
    [1, "de", 34, 10, 83, 0],
    [1, "de", 33, 19, 73, 0],
    [1, "de", 33, 10, 60, 0],
    [1, "de", 35, 24, 60, 0],
    [1, "de", 36, 14, 45, 0],
    [1, "de", 36, 21, 42, 0],
    [1, "de", 35, 8, 32, 0],
    [1, "de", 33, 9, 24, 0],
    [1, "de", 35, 35, 27, 0],
    [1, "de", 33, 56, 35, 0],
    [1, "de", 36, 53, 36, 0],
    [1, "de", 33, 45, 35, 0],
    [1, "de", 35, 53, 39, 0],
    [1, "de", 36, 57, 30, 0],
    [1, "de", 33, 86, 108, 0],
    [1, "de", 33, 68, 112, 0],
    [1, "de", 33, 49, 109, 0],
    [1, "de", 33, 46, 95, 0],
    [1, "de", 33, 90, 76, 0],
    [1, "de", 36, 76, 83, 0],
    [1, "de", 36, 70, 72, 0],
    [1, "de", 36, 78, 63, 0],
    [1, "de", 36, 90, 64, 0],
    [1, "de", 36, 60, 70, 0],
    [1, "de", 35, 75, 90, 0],
    [1, "de", 35, 81, 58, 0],
    [1, "de", 35, 91, 51, 0],
    [1, "de", 35, 93, 56, 0],
    [1, "de", 35, 61, 60, 0],
    [1, "de", 35, 66, 46, 0],
    [1, "de", 33, 90, 19, 0],
    [1, "de", 34, 92, 9, 0],
    [1, "de", 35, 75, 39, 0],
    [1, "de", 35, 67, 42, 0],
    [1, "de", 35, 93, 37, 0],
    [1, "de", 36, 89, 28, 0],
    [1, "de", 36, 42, 61, 0],
    [1, "de", 33, 49, 50, 0],
    [1, "de", 33, 44, 75, 0],
    [1, "de", 33, 46, 85, 0],
    [1, "de", 33, 64, 84, 0],
    [1, "de", 33, 56, 94, 0],
    [1, "de", 33, 25, 90, 0],
    [1, "de", 33, 31, 69, 0],
    [1, "de", 35, 34, 54, 0],
    [1, "de", 35, 29, 47, 0],
    [1, "de", 36, 42, 41, 0],
    [1, "de", 36, 29, 34, 0],
    [1, "de", 35, 20, 55, 0],
    [1, "de", 35, 14, 52, 0],
    [1, "s", 2, 12, 171, 1],
    [1, "r", 20, 188, 0],
    [1, "r", 21, 188, 0],
    [1, "r", 22, 188, 0],
    [1, "r", 23, 188, 0],
    [1, "r", 24, 188, 0],
    [1, "r", 25, 189, 0],
    [1, "r", 24, 189, 0],
    [1, "r", 23, 189, 0],
    [1, "r", 22, 189, 0],
    [1, "r", 21, 189, 0],
    [1, "r", 20, 189, 0],
    [1, "r", 19, 189, 0],
    [1, "r", 19, 190, 0],
    [1, "r", 19, 191, 0],
    [1, "r", 20, 191, 0],
    [1, "r", 21, 191, 0],
    [1, "r", 22, 191, 0],
    [1, "r", 24, 191, 0],
    [1, "r", 23, 191, 0],
    [1, "r", 25, 191, 0],
    [1, "r", 25, 190, 0],
    [1, "r", 24, 190, 0],
    [1, "r", 23, 190, 0],
    [1, "r", 22, 190, 0],
    [1, "r", 21, 190, 0],
    [1, "r", 20, 190, 0],
    [1, "r", 26, 190, 0],
    [1, "r", 26, 191, 0],
    [1, "r", 24, 193, 0],
    [1, "r", 23, 193, 0],
    [1, "r", 22, 193, 0],
    [1, "r", 20, 192, 0],
    [1, "r", 21, 192, 0],
    [1, "r", 22, 192, 0],
    [1, "r", 23, 192, 0],
    [1, "r", 24, 192, 0],
    [1, "r", 25, 192, 0],
    [1, "r", 53, 199, 0],
    [1, "r", 52, 200, 0],
    [1, "r", 54, 199, 0],
    [1, "r", 55, 199, 0],
    [1, "r", 55, 200, 0],
    [1, "r", 54, 200, 0],
    [1, "r", 53, 200, 0],
    [1, "r", 51, 200, 0],
    [1, "r", 56, 200, 0],
    [1, "r", 55, 201, 0],
    [1, "r", 54, 201, 0],
    [1, "r", 55, 202, 0],
    [1, "r", 54, 203, 0],
    [1, "r", 54, 204, 0],
    [1, "r", 54, 202, 0],
    [1, "r", 53, 202, 0],
    [1, "r", 52, 202, 0],
    [1, "r", 53, 201, 0],
    [1, "r", 52, 201, 0],
    [1, "r", 51, 201, 0],
    [1, "r", 51, 202, 0],
    [1, "r", 50, 202, 0],
    [1, "r", 50, 201, 0],
    [1, "r", 56, 201, 0],
    [1, "r", 53, 203, 0],
    [1, "r", 52, 203, 0],
    [1, "r", 51, 203, 0],
    [1, "r", 56, 202, 0],
    [1, "r", 55, 203, 0],
    [1, "r", 53, 204, 0],
    [1, "r", 52, 204, 0],
    [1, "r", 55, 204, 0],
    [1, "r", 56, 203, 0],
    [1, "r", 56, 244, 0],
    [1, "r", 54, 246, 0],
    [1, "r", 50, 248, 0],
    [1, "r", 48, 248, 0],
    [1, "r", 43, 248, 0],
    [1, "r", 45, 238, 0],
    [1, "r", 44, 238, 0],
    [1, "r", 43, 238, 0],
    [1, "r", 46, 238, 0],
    [1, "r", 47, 238, 0],
    [1, "r", 48, 238, 0],
    [1, "r", 49, 238, 0],
    [1, "r", 50, 238, 0],
    [1, "r", 51, 238, 0],
    [1, "r", 52, 238, 0],
    [1, "r", 53, 238, 0],
    [1, "r", 54, 239, 0],
    [1, "r", 53, 240, 0],
    [1, "r", 53, 239, 0],
    [1, "r", 52, 239, 0],
    [1, "r", 51, 239, 0],
    [1, "r", 50, 239, 0],
    [1, "r", 49, 239, 0],
    [1, "r", 48, 239, 0],
    [1, "r", 47, 239, 0],
    [1, "r", 46, 239, 0],
    [1, "r", 45, 239, 0],
    [1, "r", 44, 239, 0],
    [1, "r", 43, 239, 0],
    [1, "r", 42, 239, 0],
    [1, "r", 41, 240, 0],
    [1, "r", 42, 240, 0],
    [1, "r", 43, 240, 0],
    [1, "r", 44, 240, 0],
    [1, "r", 45, 240, 0],
    [1, "r", 46, 240, 0],
    [1, "r", 47, 240, 0],
    [1, "r", 48, 240, 0],
    [1, "r", 49, 240, 0],
    [1, "r", 50, 240, 0],
    [1, "r", 51, 240, 0],
    [1, "r", 52, 240, 0],
    [1, "r", 54, 240, 0],
    [1, "r", 55, 240, 0],
    [1, "r", 56, 241, 0],
    [1, "r", 55, 241, 0],
    [1, "r", 54, 241, 0],
    [1, "r", 53, 241, 0],
    [1, "r", 52, 241, 0],
    [1, "r", 51, 241, 0],
    [1, "r", 49, 241, 0],
    [1, "r", 50, 241, 0],
    [1, "r", 48, 241, 0],
    [1, "r", 47, 241, 0],
    [1, "r", 46, 241, 0],
    [1, "r", 45, 241, 0],
    [1, "r", 44, 241, 0],
    [1, "r", 43, 241, 0],
    [1, "r", 42, 241, 0],
    [1, "r", 41, 241, 0],
    [1, "r", 40, 242, 0],
    [1, "r", 41, 242, 0],
    [1, "r", 42, 242, 0],
    [1, "r", 43, 242, 0],
    [1, "r", 44, 242, 0],
    [1, "r", 45, 242, 0],
    [1, "r", 46, 242, 0],
    [1, "r", 47, 242, 0],
    [1, "r", 48, 242, 0],
    [1, "r", 49, 242, 0],
    [1, "r", 50, 242, 0],
    [1, "r", 51, 242, 0],
    [1, "r", 52, 242, 0],
    [1, "r", 53, 242, 0],
    [1, "r", 54, 242, 0],
    [1, "r", 55, 242, 0],
    [1, "r", 56, 242, 0],
    [1, "r", 56, 243, 0],
    [1, "r", 55, 243, 0],
    [1, "r", 54, 243, 0],
    [1, "r", 53, 243, 0],
    [1, "r", 52, 243, 0],
    [1, "r", 51, 243, 0],
    [1, "r", 50, 243, 0],
    [1, "r", 49, 243, 0],
    [1, "r", 48, 243, 0],
    [1, "r", 47, 243, 0],
    [1, "r", 46, 243, 0],
    [1, "r", 45, 243, 0],
    [1, "r", 44, 243, 0],
    [1, "r", 43, 243, 0],
    [1, "r", 42, 243, 0],
    [1, "r", 41, 243, 0],
    [1, "r", 40, 243, 0],
    [1, "r", 40, 244, 0],
    [1, "r", 41, 244, 0],
    [1, "r", 43, 244, 0],
    [1, "r", 44, 244, 0],
    [1, "r", 45, 244, 0],
    [1, "r", 46, 244, 0],
    [1, "r", 47, 244, 0],
    [1, "r", 48, 244, 0],
    [1, "r", 49, 244, 0],
    [1, "r", 50, 244, 0],
    [1, "r", 51, 244, 0],
    [1, "r", 52, 244, 0],
    [1, "r", 53, 244, 0],
    [1, "r", 54, 244, 0],
    [1, "r", 55, 244, 0],
    [1, "r", 42, 244, 0],
    [1, "r", 40, 245, 0],
    [1, "r", 41, 245, 0],
    [1, "r", 42, 245, 0],
    [1, "r", 43, 245, 0],
    [1, "r", 44, 245, 0],
    [1, "r", 45, 245, 0],
    [1, "r", 46, 245, 0],
    [1, "r", 47, 245, 0],
    [1, "r", 48, 245, 0],
    [1, "r", 49, 245, 0],
    [1, "r", 50, 245, 0],
    [1, "r", 51, 245, 0],
    [1, "r", 52, 246, 0],
    [1, "r", 52, 245, 0],
    [1, "r", 53, 245, 0],
    [1, "r", 54, 245, 0],
    [1, "r", 55, 245, 0],
    [1, "r", 53, 246, 0],
    [1, "r", 51, 246, 0],
    [1, "r", 50, 246, 0],
    [1, "r", 49, 246, 0],
    [1, "r", 48, 246, 0],
    [1, "r", 47, 246, 0],
    [1, "r", 45, 246, 0],
    [1, "r", 46, 246, 0],
    [1, "r", 44, 246, 0],
    [1, "r", 43, 246, 0],
    [1, "r", 42, 246, 0],
    [1, "r", 41, 246, 0],
    [1, "r", 42, 247, 0],
    [1, "r", 43, 247, 0],
    [1, "r", 44, 247, 0],
    [1, "r", 45, 247, 0],
    [1, "r", 46, 247, 0],
    [1, "r", 47, 247, 0],
    [1, "r", 48, 247, 0],
    [1, "r", 50, 247, 0],
    [1, "r", 51, 247, 0],
    [1, "r", 52, 247, 0],
    [1, "r", 53, 247, 0],
    [1, "r", 54, 247, 0],
    [1, "r", 49, 247, 0],
    [1, "r", 49, 248, 0],
    [1, "r", 47, 248, 0],
    [1, "r", 46, 248, 0],
    [1, "r", 45, 248, 0],
    [1, "r", 51, 248, 0],
    [1, "r", 55, 246, 1],
    [1, "r", 55, 247, 1],
    [1, "r", 56, 247, 1],
    [1, "r", 56, 248, 1],
    [1, "r", 95, 270, 1],
    [1, "r", 93, 270, 1],
    [1, "r", 94, 270, 1],
    [1, "r", 95, 271, 1],
    [1, "r", 94, 271, 1],
    [1, "r", 93, 271, 1],
    [1, "r", 94, 282, 1],
    [1, "r", 93, 282, 1],
    [1, "r", 93, 281, 1],
    [1, "r", 92, 281, 1],
    [1, "r", 92, 280, 1],
    [1, "r", 91, 280, 1],
    [1, "r", 90, 279, 1],
    [1, "r", 95, 275, 1],
    [1, "r", 95, 274, 1],
    [1, "r", 95, 273, 1],
    [1, "r", 95, 272, 1],
    [1, "r", 94, 274, 1],
    [1, "r", 94, 273, 1],
    [1, "r", 94, 272, 1],
    [1, "r", 93, 272, 1],
    [1, "r", 93, 273, 1],
    [1, "r", 93, 274, 1],
    [1, "r", 92, 273, 1],
    [1, "r", 92, 272, 1],
    [1, "r", 92, 270, 1],
    [1, "r", 92, 271, 1],
    [1, "r", 92, 269, 1],
    [1, "r", 90, 269, 1],
    [1, "r", 91, 269, 1],
    [1, "r", 91, 271, 1],
    [1, "r", 91, 270, 1],
    [1, "r", 95, 278, 1],
    [1, "r", 95, 277, 1],
    [1, "r", 95, 276, 1],
    [1, "r", 94, 276, 1],
    [1, "r", 94, 275, 1],
    [1, "r", 93, 275, 1],
    [1, "r", 92, 274, 1],
    [1, "r", 92, 275, 1],
    [1, "r", 91, 275, 1],
    [1, "r", 90, 275, 1],
    [1, "r", 89, 274, 1],
    [1, "r", 90, 274, 1],
    [1, "r", 89, 275, 1],
    [1, "r", 88, 274, 1],
    [1, "r", 88, 273, 1],
    [1, "r", 86, 272, 1],
    [1, "r", 85, 271, 1],
    [1, "r", 86, 271, 1],
    [1, "r", 87, 272, 1],
    [1, "r", 55, 248, 1],
    [1, "r", 54, 248, 1],
    [1, "r", 56, 249, 1],
    [1, "r", 55, 249, 1],
    [1, "r", 55, 250, 1],
    [1, "r", 56, 250, 1],
    [1, "r", 57, 250, 1],
    [1, "r", 57, 249, 1],
    [1, "r", 59, 250, 1],
    [1, "r", 58, 250, 1],
    [1, "r", 60, 250, 1],
    [1, "r", 61, 251, 1],
    [1, "r", 60, 251, 1],
    [1, "r", 62, 251, 1],
    [1, "r", 62, 252, 1],
    [1, "r", 63, 252, 1],
    [1, "r", 58, 251, 1],
    [1, "r", 57, 251, 1],
    [1, "r", 56, 251, 1],
    [1, "r", 58, 252, 1],
    [1, "r", 57, 252, 1],
    [1, "r", 57, 253, 1],
    [1, "r", 58, 253, 1],
    [1, "r", 58, 254, 1],
    [1, "r", 59, 255, 1],
    [1, "r", 58, 255, 1],
    [1, "r", 57, 254, 1],
    [1, "r", 56, 252, 1],
    [1, "r", 55, 251, 1],
    [1, "r", 60, 255, 1],
    [1, "r", 61, 255, 1],
    [1, "r", 61, 256, 1],
    [1, "r", 60, 256, 1],
    [1, "r", 62, 256, 1],
    [1, "r", 62, 257, 1],
    [1, "r", 61, 257, 1],
    [1, "r", 64, 253, 1],
    [1, "r", 64, 254, 1],
    [1, "r", 65, 254, 1],
    [1, "r", 61, 250, 1],
    [1, "r", 64, 252, 1],
    [1, "r", 65, 253, 1],
    [1, "r", 66, 254, 1],
    [1, "r", 65, 255, 1],
    [1, "r", 64, 255, 1],
    [1, "r", 64, 256, 1],
    [1, "r", 65, 256, 1],
    [1, "r", 65, 257, 1],
    [1, "r", 64, 257, 1],
    [1, "r", 63, 257, 1],
    [1, "r", 62, 258, 1],
    [1, "r", 63, 258, 1],
    [1, "r", 64, 258, 1],
    [1, "r", 66, 255, 1],
    [1, "r", 66, 256, 1],
    [1, "r", 66, 257, 1],
    [1, "r", 66, 258, 1],
    [1, "r", 65, 258, 1],
    [1, "r", 67, 258, 1],
    [1, "r", 67, 257, 1],
    [1, "r", 67, 259, 1],
    [1, "r", 66, 259, 1],
    [1, "r", 65, 259, 1],
    [1, "r", 56, 246, 1],
    [1, "r", 56, 245, 1],
    [1, "r", 68, 258, 1],
    [1, "r", 68, 259, 1],
    [1, "r", 68, 260, 1],
    [1, "r", 69, 260, 1],
    [1, "r", 69, 261, 1],
    [1, "r", 70, 261, 1],
    [1, "r", 71, 261, 1],
    [1, "r", 67, 260, 1],
    [1, "r", 89, 269, 1],
    [1, "r", 89, 268, 1],
    [1, "r", 90, 268, 1],
    [1, "r", 82, 267, 1],
    [1, "r", 83, 267, 1],
    [1, "r", 80, 266, 1],
    [1, "r", 81, 266, 1],
    [1, "r", 81, 267, 1],
    [1, "r", 79, 266, 1],
    [1, "r", 78, 265, 1],
    [1, "r", 77, 265, 1],
    [1, "r", 76, 264, 1],
    [1, "r", 75, 264, 1],
    [1, "r", 75, 263, 1],
    [1, "r", 74, 263, 1],
    [1, "r", 74, 262, 1],
    [1, "r", 72, 262, 1],
    [1, "r", 73, 262, 1],
    [1, "r", 71, 262, 1],
    [1, "r", 85, 270, 1],
    [1, "r", 84, 270, 1],
    [1, "r", 84, 269, 1],
    [1, "r", 83, 269, 1],
    [1, "r", 82, 269, 1],
    [1, "r", 81, 269, 1],
    [1, "r", 81, 268, 1],
    [1, "r", 82, 268, 1],
    [1, "r", 83, 268, 1],
    [1, "r", 80, 268, 1],
    [1, "r", 80, 267, 1],
    [1, "r", 79, 267, 1],
    [1, "r", 78, 266, 1],
    [1, "r", 76, 265, 1],
    [1, "r", 75, 262, 1],
    [1, "r", 90, 280, 1],
    [1, "r", 89, 280, 1],
    [1, "r", 89, 279, 1],
    [1, "r", 88, 279, 1],
    [1, "r", 88, 278, 1],
    [1, "r", 87, 277, 1],
    [1, "r", 86, 276, 1],
    [1, "r", 86, 275, 1],
    [1, "r", 86, 274, 1],
    [1, "r", 86, 273, 1],
    [1, "r", 85, 273, 1],
    [1, "r", 85, 272, 1],
    [1, "r", 85, 274, 1],
    [1, "r", 86, 277, 1],
    [1, "r", 87, 278, 1],
    [1, "r", 84, 271, 1],
    [1, "r", 83, 270, 1],
    [1, "r", 87, 273, 1],
    [1, "r", 91, 274, 1],
    [1, "r", 89, 273, 1],
    [1, "r", 88, 272, 1],
    [1, "r", 91, 281, 1],
    [1, "r", 92, 282, 1],
    [1, "r", 88, 280, 1],
    [1, "r", 87, 279, 1],
    [1, "r", 85, 275, 1],
    [1, "r", 84, 273, 1],
    [1, "r", 84, 272, 1],
    [1, "r", 83, 271, 1],
    [1, "r", 82, 270, 1],
    [1, "r", 84, 267, 0],
    [1, "r", 85, 267, 0],
    [1, "r", 76, 262, 0],
    [1, "r", 77, 262, 0],
    [1, "r", 88, 268, 0],
    [1, "r", 78, 262, 0],
    [1, "r", 79, 262, 0],
    [1, "r", 80, 262, 0],
    [1, "r", 80, 263, 0],
    [1, "r", 81, 263, 0],
    [1, "r", 82, 263, 0],
    [1, "r", 83, 263, 0],
    [1, "r", 84, 263, 0],
    [1, "r", 85, 263, 0],
    [1, "r", 88, 262, 0],
    [1, "r", 89, 262, 0],
    [1, "r", 90, 262, 0],
    [1, "r", 87, 262, 0],
    [1, "r", 86, 262, 0],
    [1, "r", 86, 263, 0],
    [1, "r", 87, 263, 0],
    [1, "r", 91, 262, 0],
    [1, "r", 95, 262, 0],
    [1, "r", 94, 262, 0],
    [1, "r", 86, 267, 0],
    [1, "r", 87, 267, 0],
    [1, "r", 87, 268, 0],
    [1, "r", 86, 268, 0],
    [1, "r", 74, 189, 0],
    [1, "r", 75, 189, 0],
    [1, "r", 76, 189, 0],
    [1, "r", 77, 189, 0],
    [1, "r", 78, 190, 0],
    [1, "r", 77, 190, 0],
    [1, "r", 75, 190, 0],
    [1, "r", 76, 190, 0],
    [1, "r", 74, 190, 0],
    [1, "r", 73, 190, 0],
    [1, "r", 78, 191, 0],
    [1, "r", 76, 191, 0],
    [1, "r", 77, 191, 0],
    [1, "r", 75, 191, 0],
    [1, "r", 74, 191, 0],
    [1, "r", 78, 192, 0],
    [1, "r", 77, 192, 0],
    [1, "r", 76, 192, 0],
    [1, "r", 75, 192, 0],
    [1, "r", 74, 192, 0],
    [1, "r", 73, 191, 0],
    [1, "f", 1, 96, 22, 1],
    [1, "s", 1, 97, 22, 1],
    [1, "f", 1, 98, 22, 1],
    [1, "s", 0, 99, 22, 1],
    [1, "s", 1, 100, 21, 1],
    [1, "s", 1, 96, 49, 1],
    [1, "s", 1, 100, 50, 1],
    [1, "s", 0, 99, 49, 1],
    [1, "s", 0, 97, 49, 1],
    [1, "f", 1, 98, 49, 1],
    [1, "r", 70, 218, 0],
    [1, "r", 71, 218, 0],
    [1, "r", 72, 218, 0],
    [1, "r", 73, 218, 0],
    [1, "r", 74, 219, 0],
    [1, "r", 73, 219, 0],
    [1, "r", 72, 219, 0],
    [1, "r", 71, 219, 0],
    [1, "r", 70, 219, 0],
    [1, "r", 73, 220, 0],
    [1, "r", 72, 220, 0],
    [1, "r", 71, 220, 0],
    [1, "r", 72, 221, 0],
    [1, "r", 71, 221, 0],
    [1, "r", 70, 221, 0],
    [1, "r", 69, 221, 0],
    [1, "r", 68, 221, 0],
    [1, "r", 70, 220, 0],
    [1, "r", 69, 220, 0],
    [1, "r", 69, 219, 0],
    [1, "r", 68, 220, 0],
    [1, "r", 73, 221, 0],
    [1, "r", 73, 222, 0],
    [1, "r", 71, 222, 0],
    [1, "r", 72, 222, 0],
    [1, "r", 74, 221, 0],
    [1, "r", 74, 220, 0],
    [1, "r", 75, 220, 0],
    [1, "r", 75, 221, 0],
    [1, "r", 70, 222, 0],
    [1, "r", 69, 222, 0],
    [1, "r", 29, 217, 0],
    [1, "r", 30, 217, 0],
    [1, "r", 31, 217, 0],
    [1, "r", 32, 217, 0],
    [1, "r", 31, 219, 0],
    [1, "r", 30, 219, 0],
    [1, "r", 29, 219, 0],
    [1, "r", 27, 219, 0],
    [1, "r", 25, 219, 0],
    [1, "r", 26, 219, 0],
    [1, "r", 28, 219, 0],
    [1, "r", 26, 218, 0],
    [1, "r", 27, 218, 0],
    [1, "r", 28, 218, 0],
    [1, "r", 29, 218, 0],
    [1, "r", 30, 218, 0],
    [1, "r", 28, 217, 0],
    [1, "r", 26, 217, 0],
    [1, "r", 27, 217, 0],
    [1, "r", 28, 216, 0],
    [1, "r", 29, 216, 0],
    [1, "r", 30, 216, 0],
    [1, "r", 31, 218, 0],
    [1, "r", 32, 218, 0],
    [1, "r", 31, 216, 0],
    [1, "r", 31, 221, 0],
    [1, "r", 31, 220, 0],
    [1, "r", 30, 220, 0],
    [1, "r", 29, 220, 0],
    [1, "r", 28, 220, 0],
    [1, "r", 27, 220, 0],
    [1, "r", 26, 220, 0],
    [1, "r", 25, 218, 0],
    [1, "r", 27, 221, 0],
    [1, "r", 28, 221, 0],
    [1, "r", 29, 221, 0],
    [1, "r", 30, 221, 0],
    [1, "r", 32, 220, 0],
    [1, "r", 32, 219, 0],
    [1, "r", 33, 218, 0],
    [1, "r", 33, 219, 0],
    [1, "r", 75, 238, 0],
    [1, "r", 76, 238, 0],
    [1, "r", 77, 239, 0],
    [1, "r", 76, 239, 0],
    [1, "r", 75, 239, 0],
    [1, "r", 74, 239, 0],
    [1, "r", 76, 240, 0],
    [1, "r", 77, 240, 0],
    [1, "r", 78, 240, 0],
    [1, "r", 77, 241, 0],
    [1, "r", 76, 241, 0],
    [1, "r", 75, 241, 0],
    [1, "r", 75, 240, 0],
    [1, "r", 74, 240, 0],
    [1, "r", 78, 239, 0],
    [1, "r", 77, 238, 0],
    [1, "r", 18, 253, 0],
    [1, "r", 19, 252, 0],
    [1, "r", 20, 252, 0],
    [1, "r", 21, 253, 0],
    [1, "r", 23, 254, 0],
    [1, "r", 20, 254, 0],
    [1, "r", 19, 254, 0],
    [1, "r", 22, 254, 0],
    [1, "r", 18, 254, 0],
    [1, "r", 19, 253, 0],
    [1, "r", 20, 253, 0],
    [1, "r", 21, 254, 0],
    [1, "r", 22, 253, 0],
    [1, "r", 21, 255, 0],
    [1, "r", 20, 255, 0],
    [1, "r", 19, 255, 0],
    [1, "r", 18, 255, 0],
    [1, "r", 17, 255, 0],
    [1, "r", 17, 254, 0],
    [1, "r", 22, 255, 0],
    [1, "r", 19, 256, 0],
    [1, "r", 20, 256, 0],
    [1, "r", 21, 256, 0],
    [1, "r", 39, 270, 0],
    [1, "r", 40, 270, 0],
    [1, "r", 41, 270, 0],
    [1, "r", 43, 270, 0],
    [1, "r", 44, 270, 0],
    [1, "r", 46, 270, 0],
    [1, "r", 42, 270, 0],
    [1, "r", 45, 270, 0],
    [1, "r", 44, 269, 0],
    [1, "r", 43, 269, 0],
    [1, "r", 42, 269, 0],
    [1, "r", 40, 269, 0],
    [1, "r", 41, 269, 0],
    [1, "r", 45, 271, 0],
    [1, "r", 44, 271, 0],
    [1, "r", 43, 271, 0],
    [1, "r", 42, 271, 0],
    [1, "r", 41, 271, 0],
    [1, "r", 40, 271, 0],
    [1, "r", 39, 271, 0],
    [1, "r", 46, 271, 0],
    [1, "r", 45, 272, 0],
    [1, "r", 44, 272, 0],
    [1, "r", 43, 272, 0],
    [1, "r", 42, 272, 0],
    [1, "r", 19, 284, 0],
    [1, "r", 20, 284, 0],
    [1, "r", 21, 285, 0],
    [1, "r", 22, 285, 0],
    [1, "r", 23, 286, 0],
    [1, "r", 22, 288, 0],
    [1, "r", 20, 288, 0],
    [1, "r", 18, 288, 0],
    [1, "r", 17, 287, 0],
    [1, "r", 16, 287, 0],
    [1, "r", 16, 286, 0],
    [1, "r", 17, 286, 0],
    [1, "r", 18, 286, 0],
    [1, "r", 19, 286, 0],
    [1, "r", 20, 286, 0],
    [1, "r", 21, 286, 0],
    [1, "r", 22, 286, 0],
    [1, "r", 20, 285, 0],
    [1, "r", 19, 285, 0],
    [1, "r", 18, 285, 0],
    [1, "r", 17, 285, 0],
    [1, "r", 19, 287, 0],
    [1, "r", 18, 287, 0],
    [1, "r", 20, 287, 0],
    [1, "r", 21, 287, 0],
    [1, "r", 22, 287, 0],
    [1, "r", 23, 287, 0],
    [1, "r", 21, 288, 0],
    [1, "r", 19, 288, 0],
    [1, "r", 17, 288, 0],
    [1, "r", 19, 289, 0],
    [1, "r", 21, 289, 0],
    [1, "r", 22, 289, 0],
    [1, "r", 20, 289, 0],
    [1, "r", 23, 288, 0],
    [1, "r", 24, 287, 0],
    [1, "r", 24, 286, 0],
    [1, "r", 23, 285, 0],
    [1, "r", 66, 286, 0],
    [1, "r", 64, 287, 0],
    [1, "r", 63, 287, 0],
    [1, "r", 60, 287, 0],
    [1, "r", 59, 285, 0],
    [1, "r", 58, 284, 0],
    [1, "r", 59, 283, 0],
    [1, "r", 65, 283, 0],
    [1, "r", 64, 283, 0],
    [1, "r", 63, 283, 0],
    [1, "r", 62, 283, 0],
    [1, "r", 61, 283, 0],
    [1, "r", 60, 283, 0],
    [1, "r", 59, 284, 0],
    [1, "r", 58, 285, 0],
    [1, "r", 60, 286, 0],
    [1, "r", 59, 286, 0],
    [1, "r", 61, 287, 0],
    [1, "r", 62, 287, 0],
    [1, "r", 61, 286, 0],
    [1, "r", 62, 286, 0],
    [1, "r", 63, 286, 0],
    [1, "r", 64, 286, 0],
    [1, "r", 65, 286, 0],
    [1, "r", 67, 285, 0],
    [1, "r", 66, 285, 0],
    [1, "r", 65, 285, 0],
    [1, "r", 64, 285, 0],
    [1, "r", 63, 285, 0],
    [1, "r", 62, 285, 0],
    [1, "r", 61, 285, 0],
    [1, "r", 60, 285, 0],
    [1, "r", 60, 284, 0],
    [1, "r", 61, 284, 0],
    [1, "r", 62, 284, 0],
    [1, "r", 63, 284, 0],
    [1, "r", 64, 284, 0],
    [1, "r", 65, 284, 0],
    [1, "r", 66, 284, 0],
    [1, "r", 65, 287, 0],
    [1, "r", 67, 286, 0],
    [1, "p", 0, 13, 189, 1],
    [1, "p", 0, 32, 184, 1],
    [1, "p", 0, 47, 191, 1],
    [1, "p", 0, 64, 184, 1],
    [1, "p", 0, 84, 192, 1],
    [1, "p", 0, 78, 207, 1],
    [1, "p", 0, 58, 216, 1],
    [1, "p", 0, 41, 211, 1],
    [1, "p", 0, 18, 211, 1],
    [1, "p", 0, 14, 230, 1],
    [1, "p", 0, 29, 237, 1],
    [1, "p", 0, 50, 230, 1],
    [1, "p", 0, 78, 241, 1],
    [1, "p", 0, 74, 256, 1],
    [1, "p", 0, 68, 266, 1],
    [1, "p", 0, 48, 259, 1],
    [1, "p", 0, 31, 263, 1],
    [1, "p", 0, 18, 274, 1],
    [1, "p", 0, 33, 283, 1],
    [1, "p", 0, 66, 287, 1],
    [1, "p", 0, 82, 291, 1],
    [1, "p", 0, 16, 295, 1],
    [1, "p", 0, 45, 294, 1],
    [1, "p", 0, 18, 252, 1],
    [1, "p", 0, 79, 227, 1],
    [1, "p", 0, 32, 200, 1],
    [1, "p", 0, 64, 200, 1],
    [1, "s", 0, 21, 193, 1],
    [1, "s", 1, 18, 189, 1],
    [1, "s", 2, 26, 189, 1],
    [1, "b", 1, 15, 181, 0],
    [1, "b", 2, 18, 190, 0],
    [1, "b", 2, 29, 193, 0],
    [1, "t", 3, 16, 182, 0],
    [1, "t", 3, 13, 195, 0],
    [1, "t", 4, 16, 183, 0],
    [1, "t", 5, 10, 184, 0],
    [1, "t", 5, 23, 182, 0],
    [1, "t", 4, 30, 187, 0],
    [1, "t", 1, 26, 192, 0],
    [1, "b", 1, 25, 188, 0],
    [1, "s", 1, 24, 181, 1],
    [1, "t", 3, 33, 183, 0],
    [1, "b", 1, 36, 189, 0],
    [1, "t", 2, 35, 190, 0],
    [1, "b", 3, 19, 200, 0],
    [1, "s", 0, 28, 194, 1],
    [1, "s", 1, 32, 196, 1],
    [1, "s", 1, 36, 183, 1],
    [1, "s", 2, 38, 184, 1],
    [1, "s", 2, 10, 192, 1],
    [1, "s", 2, 12, 183, 1],
    [1, "s", 1, 15, 199, 1],
    [1, "b", 0, 12, 202, 0],
    [1, "t", 2, 13, 203, 0],
    [1, "t", 4, 20, 200, 0],
    [1, "t", 4, 12, 194, 0],
    [1, "t", 5, 15, 205, 0],
    [1, "t", 5, 29, 200, 0],
    [1, "t", 3, 28, 201, 0],
    [1, "s", 2, 25, 199, 1],
    [1, "s", 1, 22, 204, 1],
    [1, "g", 2, 25, 205, 1],
    [1, "b", 1, 27, 216, 0],
    [1, "s", 1, 25, 217, 1],
    [1, "s", 1, 33, 217, 1],
    [1, "s", 2, 35, 215, 1],
    [1, "s", 0, 32, 221, 1],
    [1, "t", 2, 31, 222, 0],
    [1, "t", 4, 26, 221, 0],
    [1, "b", 3, 27, 222, 0],
    [1, "b", 0, 17, 217, 0],
    [1, "t", 3, 18, 216, 0],
    [1, "t", 4, 13, 215, 0],
    [1, "t", 5, 30, 213, 0],
    [1, "t", 5, 24, 208, 0],
    [1, "s", 1, 12, 216, 1],
    [1, "s", 2, 11, 210, 1],
    [1, "s", 2, 34, 223, 1],
    [1, "b", 2, 36, 218, 0],
    [1, "t", 4, 40, 206, 0],
    [1, "t", 5, 35, 203, 0],
    [1, "t", 3, 39, 206, 0],
    [1, "b", 1, 34, 204, 0],
    [1, "s", 1, 33, 206, 1],
    [1, "s", 1, 42, 203, 1],
    [1, "s", 0, 47, 196, 1],
    [1, "b", 2, 40, 196, 0],
    [1, "t", 4, 39, 197, 0],
    [1, "t", 5, 44, 187, 0],
    [1, "b", 1, 46, 181, 0],
    [1, "t", 2, 47, 182, 0],
    [1, "b", 0, 57, 182, 0],
    [1, "b", 3, 56, 183, 0],
    [1, "t", 4, 55, 184, 0],
    [1, "t", 5, 62, 195, 0],
    [1, "s", 1, 51, 185, 1],
    [1, "s", 2, 62, 180, 1],
    [1, "s", 2, 61, 188, 1],
    [1, "s", 1, 61, 189, 1],
    [1, "s", 2, 48, 195, 1],
    [1, "b", 1, 51, 199, 0],
    [1, "t", 2, 52, 199, 0],
    [1, "t", 3, 56, 204, 0],
    [1, "t", 4, 57, 204, 0],
    [1, "t", 4, 51, 204, 0],
    [1, "s", 1, 52, 205, 1],
    [1, "s", 2, 57, 200, 1],
    [1, "s", 1, 56, 199, 1],
    [1, "b", 0, 55, 192, 0],
    [1, "t", 3, 56, 193, 0],
    [1, "t", 4, 50, 190, 0],
    [1, "b", 1, 76, 188, 0],
    [1, "t", 2, 75, 188, 0],
    [1, "t", 2, 73, 192, 0],
    [1, "t", 4, 72, 191, 0],
    [1, "t", 5, 78, 193, 0],
    [1, "b", 0, 79, 192, 0],
    [1, "s", 2, 79, 190, 1],
    [1, "s", 1, 74, 194, 1],
    [1, "s", 1, 72, 187, 1],
    [1, "s", 0, 74, 183, 1],
    [1, "s", 1, 75, 183, 1],
    [1, "t", 2, 69, 181, 0],
    [1, "t", 4, 70, 182, 0],
    [1, "t", 5, 69, 180, 0],
    [1, "b", 1, 65, 189, 0],
    [1, "b", 2, 66, 189, 0],
    [1, "t", 3, 64, 188, 0],
    [1, "t", 4, 67, 192, 0],
    [1, "b", 2, 85, 183, 0],
    [1, "t", 1, 84, 184, 0],
    [1, "t", 4, 81, 180, 0],
    [1, "t", 5, 89, 180, 0],
    [1, "t", 0, 90, 188, 0],
    [1, "t", 3, 89, 190, 0],
    [1, "s", 1, 87, 187, 1],
    [1, "s", 2, 87, 197, 1],
    [1, "b", 1, 84, 200, 0],
    [1, "t", 2, 83, 201, 0],
    [1, "t", 4, 87, 207, 0],
    [1, "s", 2, 79, 202, 1],
    [1, "s", 1, 80, 203, 1],
    [1, "t", 0, 71, 200, 0],
    [1, "b", 2, 72, 201, 0],
    [1, "t", 2, 65, 205, 0],
    [1, "t", 1, 66, 206, 0],
    [1, "t", 4, 63, 209, 0],
    [1, "t", 5, 73, 203, 0],
    [1, "s", 0, 70, 207, 1],
    [1, "s", 1, 71, 206, 1],
    [1, "s", 2, 68, 199, 1],
    [1, "s", 1, 64, 213, 1],
    [1, "t", 0, 85, 213, 0],
    [1, "b", 2, 84, 212, 0],
    [1, "t", 3, 77, 209, 0],
    [1, "t", 4, 83, 216, 0],
    [1, "t", 4, 73, 209, 0],
    [1, "b", 0, 86, 222, 0],
    [1, "b", 3, 87, 221, 0],
    [1, "s", 1, 80, 214, 1],
    [1, "s", 2, 87, 216, 1],
    [1, "s", 2, 84, 224, 1],
    [1, "s", 1, 77, 227, 1],
    [1, "t", 1, 74, 222, 0],
    [1, "b", 1, 69, 218, 0],
    [1, "b", 2, 75, 219, 0],
    [1, "s", 2, 74, 218, 1],
    [1, "s", 1, 69, 223, 1],
    [1, "s", 1, 77, 221, 1],
    [1, "b", 1, 72, 211, 0],
    [1, "b", 1, 85, 232, 0],
    [1, "t", 2, 84, 233, 0],
    [1, "t", 2, 78, 238, 0],
    [1, "b", 1, 77, 237, 0],
    [1, "t", 5, 87, 236, 0],
    [1, "t", 5, 76, 229, 0],
    [1, "b", 2, 74, 241, 0],
    [1, "s", 0, 73, 242, 1],
    [1, "s", 0, 81, 238, 1],
    [1, "s", 1, 82, 237, 1],
    [1, "s", 2, 72, 237, 1],
    [1, "s", 2, 78, 242, 1],
    [1, "b", 1, 66, 230, 0],
    [1, "b", 2, 62, 229, 0],
    [1, "t", 4, 67, 231, 0],
    [1, "t", 4, 62, 228, 0],
    [1, "t", 5, 64, 233, 0],
    [1, "t", 2, 65, 234, 0],
    [1, "t", 2, 51, 220, 0],
    [1, "t", 1, 50, 218, 0],
    [1, "b", 1, 45, 223, 0],
    [1, "b", 2, 46, 224, 0],
    [1, "t", 4, 49, 218, 0],
    [1, "t", 4, 47, 225, 0],
    [1, "s", 1, 50, 215, 1],
    [1, "s", 2, 51, 213, 1],
    [1, "s", 2, 42, 227, 1],
    [1, "s", 1, 44, 227, 1],
    [1, "s", 1, 60, 230, 1],
    [1, "s", 2, 59, 231, 1],
    [1, "b", 1, 85, 252, 0],
    [1, "t", 2, 84, 251, 0],
    [1, "t", 2, 74, 250, 0],
    [1, "t", 0, 75, 251, 0],
    [1, "b", 0, 83, 246, 0],
    [1, "t", 3, 82, 247, 0],
    [1, "t", 4, 81, 259, 0],
    [1, "t", 4, 69, 249, 0],
    [1, "t", 5, 87, 246, 0],
    [1, "t", 5, 75, 252, 0],
    [1, "s", 1, 79, 257, 1],
    [1, "s", 2, 78, 249, 1],
    [1, "s", 2, 80, 258, 1],
    [1, "s", 1, 88, 254, 1],
    [1, "s", 1, 85, 264, 1],
    [1, "s", 2, 89, 263, 1],
    [1, "s", 2, 87, 269, 1],
    [1, "s", 0, 84, 268, 1],
    [1, "s", 2, 76, 267, 1],
    [1, "s", 1, 66, 261, 1],
    [1, "s", 1, 87, 274, 1],
    [1, "s", 1, 76, 263, 1],
    [1, "s", 1, 59, 251, 1],
    [1, "s", 0, 59, 252, 1],
    [1, "t", 2, 86, 265, 0],
    [1, "t", 0, 78, 270, 0],
    [1, "t", 2, 79, 271, 0],
    [1, "t", 0, 77, 260, 0],
    [1, "t", 3, 78, 261, 0],
    [1, "b", 1, 71, 264, 0],
    [1, "b", 1, 88, 269, 0],
    [1, "t", 5, 84, 264, 0],
    [1, "t", 5, 79, 261, 0],
    [1, "t", 5, 72, 265, 0],
    [1, "t", 5, 77, 270, 0],
    [1, "t", 0, 87, 261, 0],
    [1, "t", 2, 86, 260, 0],
    [1, "t", 4, 84, 255, 0],
    [1, "t", 4, 68, 255, 0],
    [1, "t", 1, 67, 254, 0],
    [1, "t", 2, 65, 262, 0],
    [1, "t", 1, 57, 260, 0],
    [1, "t", 2, 58, 259, 0],
    [1, "b", 1, 63, 256, 0],
    [1, "b", 1, 52, 248, 0],
    [1, "t", 2, 53, 248, 0],
    [1, "s", 1, 50, 253, 1],
    [1, "s", 2, 67, 263, 1],
    [1, "s", 2, 52, 252, 1],
    [1, "s", 2, 71, 244, 1],
    [1, "b", 0, 57, 245, 0],
    [1, "t", 2, 58, 244, 0],
    [1, "b", 1, 53, 237, 0],
    [1, "t", 2, 54, 237, 0],
    [1, "t", 2, 41, 238, 0],
    [1, "t", 1, 42, 237, 0],
    [1, "t", 5, 57, 235, 0],
    [1, "t", 5, 60, 246, 0],
    [1, "t", 5, 50, 252, 0],
    [1, "t", 1, 42, 248, 0],
    [1, "b", 1, 43, 249, 0],
    [1, "b", 3, 37, 243, 0],
    [1, "s", 0, 50, 236, 1],
    [1, "s", 2, 39, 247, 1],
    [1, "s", 2, 51, 235, 1],
    [1, "s", 2, 60, 243, 1],
    [1, "s", 2, 36, 240, 1],
    [1, "s", 2, 43, 254, 1],
    [1, "s", 1, 42, 254, 1],
    [1, "t", 1, 38, 233, 0],
    [1, "t", 2, 35, 235, 0],
    [1, "t", 4, 33, 228, 0],
    [1, "t", 4, 33, 245, 0],
    [1, "t", 4, 43, 235, 0],
    [1, "t", 5, 45, 249, 0],
    [1, "t", 5, 41, 253, 0],
    [1, "b", 1, 20, 227, 0],
    [1, "b", 1, 14, 240, 0],
    [1, "t", 3, 21, 227, 0],
    [1, "t", 3, 27, 234, 0],
    [1, "t", 3, 15, 241, 0],
    [1, "t", 3, 12, 229, 0],
    [1, "t", 4, 17, 224, 0],
    [1, "t", 4, 11, 231, 0],
    [1, "t", 4, 22, 238, 0],
    [1, "t", 4, 11, 239, 0],
    [1, "t", 1, 22, 243, 0],
    [1, "b", 2, 23, 242, 0],
    [1, "s", 1, 23, 238, 1],
    [1, "s", 1, 22, 228, 1],
    [1, "s", 2, 24, 228, 1],
    [1, "s", 2, 21, 236, 1],
    [1, "s", 0, 13, 228, 1],
    [1, "s", 0, 16, 242, 1],
    [1, "s", 1, 15, 244, 1],
    [1, "s", 1, 34, 236, 1],
    [1, "t", 1, 26, 249, 0],
    [1, "t", 1, 22, 256, 0],
    [1, "t", 2, 23, 255, 0],
    [1, "b", 1, 17, 256, 0],
    [1, "b", 2, 18, 256, 0],
    [1, "s", 0, 21, 252, 1],
    [1, "s", 2, 20, 250, 1],
    [1, "s", 2, 23, 259, 1],
    [1, "s", 1, 13, 257, 1],
    [1, "t", 1, 31, 254, 0],
    [1, "t", 2, 32, 254, 0],
    [1, "t", 4, 28, 254, 0],
    [1, "t", 4, 34, 258, 0],
    [1, "t", 0, 29, 260, 0],
    [1, "b", 2, 30, 261, 0],
    [1, "t", 0, 43, 262, 0],
    [1, "t", 2, 42, 263, 0],
    [1, "t", 4, 46, 264, 0],
    [1, "b", 1, 39, 265, 0],
    [1, "b", 1, 58, 267, 0],
    [1, "t", 2, 57, 268, 0],
    [1, "t", 4, 62, 270, 0],
    [1, "t", 5, 52, 273, 0],
    [1, "s", 1, 52, 269, 1],
    [1, "s", 1, 41, 272, 1],
    [1, "s", 2, 41, 274, 1],
    [1, "t", 2, 42, 268, 0],
    [1, "t", 0, 43, 268, 0],
    [1, "b", 1, 46, 272, 0],
    [1, "b", 1, 14, 265, 0],
    [1, "t", 2, 15, 266, 0],
    [1, "t", 4, 19, 264, 0],
    [1, "t", 4, 29, 263, 0],
    [1, "t", 4, 11, 269, 0],
    [1, "t", 1, 29, 271, 0],
    [1, "b", 2, 28, 272, 0],
    [1, "t", 2, 24, 267, 0],
    [1, "t", 2, 20, 279, 0],
    [1, "t", 0, 19, 278, 0],
    [1, "t", 3, 13, 278, 0],
    [1, "b", 0, 21, 284, 0],
    [1, "b", 0, 18, 289, 0],
    [1, "t", 2, 20, 283, 0],
    [1, "t", 2, 19, 290, 0],
    [1, "t", 4, 19, 283, 0],
    [1, "t", 4, 20, 290, 0],
    [1, "s", 1, 16, 285, 1],
    [1, "s", 1, 24, 288, 1],
    [1, "s", 2, 26, 287, 1],
    [1, "s", 2, 16, 278, 1],
    [1, "s", 1, 21, 268, 1],
    [1, "s", 2, 19, 268, 1],
    [1, "t", 0, 12, 294, 0],
    [1, "b", 1, 13, 295, 0],
    [1, "t", 3, 13, 291, 0],
    [1, "t", 3, 10, 299, 0],
    [1, "t", 4, 11, 287, 0],
    [1, "t", 4, 17, 298, 0],
    [1, "t", 1, 27, 294, 0],
    [1, "b", 2, 26, 295, 0],
    [1, "t", 3, 33, 297, 0],
    [1, "b", 1, 48, 278, 0],
    [1, "b", 0, 46, 280, 0],
    [1, "b", 2, 50, 280, 0],
    [1, "t", 0, 44, 282, 0],
    [1, "b", 1, 49, 283, 0],
    [1, "b", 0, 51, 278, 0],
    [1, "b", 3, 50, 279, 0],
    [1, "b", 3, 44, 284, 0],
    [1, "b", 0, 47, 284, 0],
    [1, "b", 2, 42, 283, 0],
    [1, "t", 4, 51, 277, 0],
    [1, "b", 1, 44, 286, 0],
    [1, "b", 2, 46, 286, 0],
    [1, "b", 1, 42, 285, 0],
    [1, "b", 3, 41, 286, 0],
    [1, "t", 5, 42, 287, 0],
    [1, "b", 1, 42, 278, 0],
    [1, "b", 2, 43, 279, 0],
    [1, "b", 0, 40, 280, 0],
    [1, "t", 4, 39, 283, 0],
    [1, "t", 4, 39, 279, 0],
    [1, "t", 5, 43, 277, 0],
    [1, "t", 5, 47, 287, 0],
    [1, "t", 4, 46, 277, 0],
    [1, "t", 4, 45, 290, 0],
    [1, "t", 4, 36, 285, 0],
    [1, "t", 3, 35, 284, 0],
    [1, "t", 3, 36, 272, 0],
    [1, "t", 4, 35, 271, 0],
    [1, "t", 1, 29, 279, 0],
    [1, "b", 1, 32, 277, 0],
    [1, "t", 3, 31, 278, 0],
    [1, "b", 2, 28, 280, 0],
    [1, "t", 4, 29, 286, 0],
    [1, "t", 5, 28, 275, 0],
    [1, "t", 3, 37, 292, 0],
    [1, "b", 1, 36, 291, 0],
    [1, "b", 0, 34, 298, 0],
    [1, "t", 4, 31, 292, 0],
    [1, "t", 4, 46, 295, 0],
    [1, "t", 4, 59, 287, 0],
    [1, "b", 1, 58, 286, 0],
    [1, "s", 1, 68, 284, 1],
    [1, "s", 2, 70, 286, 1],
    [1, "s", 0, 67, 284, 1],
    [1, "t", 3, 66, 283, 0],
    [1, "t", 1, 65, 282, 0],
    [1, "b", 1, 64, 288, 0],
    [1, "t", 3, 60, 293, 0],
    [1, "t", 1, 61, 294, 0],
    [1, "b", 1, 76, 294, 0],
    [1, "t", 5, 75, 295, 0],
    [1, "t", 5, 56, 293, 0],
    [1, "t", 5, 59, 281, 0],
    [1, "t", 5, 67, 291, 0],
    [1, "b", 0, 88, 293, 0],
    [1, "t", 2, 89, 292, 0],
    [1, "t", 2, 85, 286, 0],
    [1, "t", 4, 88, 289, 0],
    [1, "t", 4, 79, 287, 0],
    [1, "b", 1, 84, 285, 0],
    [1, "t", 3, 75, 284, 0],
    [1, "b", 0, 75, 278, 0],
    [1, "t", 3, 74, 277, 0],
    [1, "t", 4, 81, 276, 0],
    [1, "t", 2, 65, 276, 0],
    [1, "b", 1, 66, 275, 0],
    [1, "g", 0, 45, 261, 1],
    [1, "g", 1, 39, 258, 1],
    [1, "g", 0, 35, 250, 1],
    [1, "g", 2, 22, 247, 1],
    [1, "g", 2, 27, 227, 1],
    [1, "g", 2, 63, 218, 1],
    [1, "g", 1, 56, 224, 1],
    [1, "g", 0, 46, 231, 1],
    [1, "g", 1, 65, 240, 1],
    [1, "g", 2, 67, 238, 1],
    [1, "g", 2, 79, 232, 1],
    [1, "g", 2, 72, 253, 1],
    [1, "g", 2, 62, 264, 1],
    [1, "g", 2, 28, 267, 1],
    [1, "g", 2, 58, 274, 1],
    [1, "de", 2, 14, 182, 0],
    [1, "de", 2, 24, 182, 0],
    [1, "de", 0, 11, 185, 0],
    [1, "de", 0, 14, 194, 0],
    [1, "de", 1, 25, 196, 0],
    [1, "de", 3, 31, 183, 0],
    [1, "de", 0, 38, 181, 0],
    [1, "de", 2, 45, 186, 0],
    [1, "de", 1, 38, 191, 0],
    [1, "de", 0, 56, 181, 0],
    [1, "de", 1, 68, 182, 0],
    [1, "de", 2, 80, 181, 0],
    [1, "de", 3, 86, 187, 0],
    [1, "de", 0, 84, 193, 0],
    [1, "de", 1, 82, 201, 0],
    [1, "de", 2, 64, 191, 0],
    [1, "de", 2, 72, 200, 0],
    [1, "de", 3, 64, 201, 0],
    [1, "de", 2, 76, 209, 0],
    [1, "de", 3, 71, 212, 0],
    [1, "de", 1, 86, 214, 0],
    [1, "de", 0, 57, 208, 0],
    [1, "de", 0, 41, 203, 0],
    [1, "de", 1, 15, 206, 0],
    [1, "de", 2, 25, 209, 0],
    [1, "de", 3, 16, 218, 0],
    [1, "de", 3, 11, 227, 0],
    [1, "de", 0, 22, 229, 0],
    [1, "de", 1, 15, 239, 0],
    [1, "de", 2, 24, 238, 0],
    [1, "de", 3, 22, 246, 0],
    [1, "de", 3, 10, 253, 0],
    [1, "de", 1, 18, 258, 0],
    [1, "de", 1, 28, 261, 0],
    [1, "de", 1, 14, 267, 0],
    [1, "de", 0, 24, 268, 0],
    [1, "de", 0, 15, 278, 0],
    [1, "de", 2, 21, 279, 0],
    [1, "de", 2, 30, 272, 0],
    [1, "de", 2, 29, 281, 0],
    [1, "de", 2, 15, 284, 0],
    [1, "de", 3, 12, 291, 0],
    [1, "de", 3, 30, 287, 0],
    [1, "de", 3, 27, 293, 0],
    [1, "de", 0, 25, 296, 0],
    [1, "de", 0, 11, 298, 0],
    [1, "de", 0, 8, 286, 0],
    [1, "de", 2, 36, 299, 0],
    [1, "de", 2, 37, 280, 0],
    [1, "de", 3, 38, 291, 0],
    [1, "de", 1, 48, 287, 0],
    [1, "de", 1, 46, 277, 0],
    [1, "de", 1, 53, 278, 0],
    [1, "de", 3, 48, 295, 0],
    [1, "de", 0, 57, 294, 0],
    [1, "de", 1, 65, 290, 0],
    [1, "de", 1, 84, 292, 0],
    [1, "de", 2, 77, 295, 0],
    [1, "de", 2, 84, 287, 0],
    [1, "de", 0, 74, 279, 0],
    [1, "de", 3, 65, 274, 0],
    [1, "de", 2, 71, 267, 0],
    [1, "de", 2, 65, 261, 0],
    [1, "de", 2, 47, 264, 0],
    [1, "de", 3, 47, 258, 0],
    [1, "de", 3, 53, 251, 0],
    [1, "de", 2, 40, 253, 0],
    [1, "de", 0, 35, 244, 0],
    [1, "de", 0, 37, 233, 0],
    [1, "de", 3, 44, 226, 0],
    [1, "de", 2, 37, 219, 0],
    [1, "de", 2, 54, 234, 0],
    [1, "de", 1, 66, 234, 0],
    [1, "de", 2, 65, 241, 0],
    [1, "de", 0, 68, 249, 0],
    [1, "de", 3, 78, 257, 0],
    [1, "de", 2, 86, 253, 0],
    [1, "de", 2, 83, 245, 0],
    [1, "de", 1, 82, 238, 0],
    [1, "de", 3, 76, 235, 0],
    [1, "de", 2, 86, 232, 0],
    [1, "de", 0, 86, 224, 0],
    [1, "de", 2, 76, 226, 0],
    [1, "de", 2, 61, 228, 0],
    [1, "de", 2, 58, 217, 0],
    [1, "de", 0, 49, 217, 0],
    [1, "de", 19, 11, 179, 0],
    [1, "de", 20, 17, 180, 0],
    [1, "de", 22, 18, 181, 0],
    [1, "de", 19, 30, 184, 0],
    [1, "de", 19, 27, 187, 0],
    [1, "de", 19, 30, 195, 0],
    [1, "de", 19, 18, 192, 0],
    [1, "de", 19, 44, 182, 0],
    [1, "de", 19, 49, 182, 0],
    [1, "de", 19, 54, 182, 0],
    [1, "de", 19, 59, 183, 0],
    [1, "de", 19, 56, 186, 0],
    [1, "de", 19, 46, 188, 0],
    [1, "de", 19, 58, 193, 0],
    [1, "de", 19, 67, 187, 0],
    [1, "de", 19, 65, 192, 0],
    [1, "de", 19, 71, 180, 0],
    [1, "de", 19, 78, 187, 0],
    [1, "de", 19, 80, 194, 0],
    [1, "de", 19, 72, 193, 0],
    [1, "de", 19, 82, 182, 0],
    [1, "de", 19, 88, 185, 0],
    [1, "de", 19, 87, 189, 0],
    [1, "de", 19, 86, 197, 0],
    [1, "de", 19, 85, 203, 0],
    [1, "de", 19, 74, 200, 0],
    [1, "de", 19, 70, 202, 0],
    [1, "de", 19, 83, 199, 0],
    [1, "de", 19, 86, 208, 0],
    [1, "de", 19, 84, 214, 0],
    [1, "de", 19, 83, 211, 0],
    [1, "de", 19, 84, 217, 0],
    [1, "de", 19, 77, 210, 0],
    [1, "de", 19, 71, 210, 0],
    [1, "de", 19, 73, 213, 0],
    [1, "de", 19, 66, 207, 0],
    [1, "de", 19, 66, 204, 0],
    [1, "de", 19, 62, 209, 0],
    [1, "de", 19, 63, 201, 0],
    [1, "de", 19, 56, 205, 0],
    [1, "de", 19, 49, 199, 0],
    [1, "de", 19, 50, 205, 0],
    [1, "de", 19, 40, 197, 0],
    [1, "de", 19, 38, 198, 0],
    [1, "de", 19, 40, 208, 0],
    [1, "de", 19, 36, 204, 0],
    [1, "de", 19, 33, 204, 0],
    [1, "de", 19, 29, 202, 0],
    [1, "de", 19, 27, 200, 0],
    [1, "de", 19, 26, 193, 0],
    [1, "de", 19, 18, 201, 0],
    [1, "de", 19, 20, 199, 0],
    [1, "de", 19, 12, 196, 0],
    [1, "de", 19, 12, 204, 0],
    [1, "de", 19, 11, 201, 0],
    [1, "de", 19, 23, 208, 0],
    [1, "de", 19, 31, 214, 0],
    [1, "de", 19, 26, 215, 0],
    [1, "de", 19, 36, 217, 0],
    [1, "de", 19, 32, 223, 0],
    [1, "de", 19, 26, 223, 0],
    [1, "de", 19, 18, 218, 0],
    [1, "de", 19, 15, 215, 0],
    [1, "de", 19, 17, 212, 0],
    [1, "de", 19, 15, 224, 0],
    [1, "de", 19, 19, 229, 0],
    [1, "de", 19, 10, 230, 0],
    [1, "de", 19, 22, 240, 0],
    [1, "de", 19, 13, 238, 0],
    [1, "de", 19, 13, 243, 0],
    [1, "de", 19, 24, 244, 0],
    [1, "de", 19, 24, 250, 0],
    [1, "de", 19, 28, 253, 0],
    [1, "de", 19, 33, 255, 0],
    [1, "de", 19, 34, 260, 0],
    [1, "de", 19, 31, 260, 0],
    [1, "de", 19, 38, 267, 0],
    [1, "de", 19, 44, 264, 0],
    [1, "de", 19, 43, 261, 0],
    [1, "de", 19, 16, 257, 0],
    [1, "de", 19, 22, 258, 0],
    [1, "de", 19, 12, 253, 0],
    [1, "de", 19, 8, 242, 0],
    [1, "de", 19, 8, 255, 0],
    [1, "de", 19, 15, 264, 0],
    [1, "de", 19, 20, 265, 0],
    [1, "de", 19, 12, 271, 0],
    [1, "de", 19, 8, 272, 0],
    [1, "de", 19, 13, 277, 0],
    [1, "de", 19, 21, 277, 0],
    [1, "de", 19, 21, 281, 0],
    [1, "de", 19, 27, 282, 0],
    [1, "de", 19, 29, 278, 0],
    [1, "de", 19, 29, 273, 0],
    [1, "de", 19, 36, 271, 0],
    [1, "de", 19, 8, 278, 0],
    [1, "de", 19, 11, 286, 0],
    [1, "de", 19, 17, 291, 0],
    [1, "de", 19, 14, 294, 0],
    [1, "de", 19, 8, 292, 0],
    [1, "de", 19, 12, 300, 0],
    [1, "de", 19, 18, 298, 0],
    [1, "de", 19, 16, 301, 0],
    [1, "de", 19, 27, 296, 0],
    [1, "de", 19, 25, 292, 0],
    [1, "de", 19, 23, 301, 0],
    [1, "de", 19, 28, 301, 0],
    [1, "de", 19, 35, 297, 0],
    [1, "de", 19, 37, 301, 0],
    [1, "de", 19, 43, 301, 0],
    [1, "de", 19, 46, 294, 0],
    [1, "de", 19, 46, 288, 0],
    [1, "de", 19, 40, 287, 0],
    [1, "de", 19, 50, 301, 0],
    [1, "de", 19, 58, 301, 0],
    [1, "de", 19, 64, 301, 0],
    [1, "de", 19, 71, 301, 0],
    [1, "de", 19, 80, 301, 0],
    [1, "de", 19, 87, 301, 0],
    [1, "de", 19, 86, 294, 0],
    [1, "de", 19, 87, 290, 0],
    [1, "de", 19, 82, 286, 0],
    [1, "de", 19, 75, 285, 0],
    [1, "de", 19, 66, 292, 0],
    [1, "de", 19, 66, 288, 0],
    [1, "de", 19, 58, 288, 0],
    [1, "de", 19, 67, 282, 0],
    [1, "de", 19, 61, 281, 0],
    [1, "de", 19, 60, 295, 0],
    [1, "de", 19, 50, 282, 0],
    [1, "de", 19, 47, 283, 0],
    [1, "de", 19, 48, 281, 0],
    [1, "de", 19, 44, 277, 0],
    [1, "de", 19, 41, 282, 0],
    [1, "de", 19, 38, 281, 0],
    [1, "de", 19, 42, 288, 0],
    [1, "de", 19, 52, 281, 0],
    [1, "de", 19, 50, 275, 0],
    [1, "de", 19, 39, 277, 0],
    [1, "de", 19, 38, 284, 0],
    [1, "de", 19, 51, 285, 0],
    [1, "de", 19, 38, 278, 0],
    [1, "de", 19, 47, 272, 0],
    [1, "de", 19, 44, 267, 0],
    [1, "de", 19, 76, 280, 0],
    [1, "de", 19, 78, 272, 0],
    [1, "de", 19, 68, 275, 0],
    [1, "de", 19, 70, 265, 0],
    [1, "de", 19, 65, 263, 0],
    [1, "de", 19, 64, 262, 0],
    [1, "de", 19, 60, 268, 0],
    [1, "de", 19, 56, 266, 0],
    [1, "de", 19, 55, 260, 0],
    [1, "de", 19, 59, 258, 0],
    [1, "de", 19, 62, 255, 0],
    [1, "de", 19, 67, 253, 0],
    [1, "de", 19, 69, 256, 0],
    [1, "de", 19, 44, 253, 0],
    [1, "de", 19, 44, 250, 0],
    [1, "de", 19, 36, 245, 0],
    [1, "de", 19, 39, 239, 0],
    [1, "de", 19, 42, 234, 0],
    [1, "de", 19, 37, 235, 0],
    [1, "de", 19, 45, 226, 0],
    [1, "de", 19, 46, 222, 0],
    [1, "de", 19, 51, 218, 0],
    [1, "de", 19, 68, 218, 0],
    [1, "de", 19, 74, 224, 0],
    [1, "de", 19, 76, 218, 0],
    [1, "de", 19, 84, 221, 0],
    [1, "de", 19, 88, 223, 0],
    [1, "de", 19, 76, 230, 0],
    [1, "de", 19, 86, 234, 0],
    [1, "de", 19, 79, 237, 0],
    [1, "de", 19, 75, 243, 0],
    [1, "de", 19, 81, 245, 0],
    [1, "de", 19, 83, 247, 0],
    [1, "de", 19, 88, 247, 0],
    [1, "de", 19, 84, 254, 0],
    [1, "de", 19, 86, 251, 0],
    [1, "de", 19, 85, 260, 0],
    [1, "de", 19, 79, 260, 0],
    [1, "de", 19, 76, 251, 0],
    [1, "de", 19, 72, 251, 0],
    [1, "de", 19, 69, 251, 0],
    [1, "de", 19, 87, 266, 0],
    [1, "de", 19, 89, 270, 0],
    [1, "de", 19, 87, 271, 0],
    [1, "de", 19, 82, 277, 0],
    [1, "de", 19, 87, 284, 0],
    [1, "de", 19, 87, 237, 0],
    [1, "de", 19, 88, 179, 0],
    [1, "de", 19, 50, 191, 0],
    [1, "de", 19, 52, 221, 0],
    [1, "de", 19, 34, 234, 0],
    [1, "de", 19, 27, 233, 0],
    [1, "de", 19, 37, 293, 0],
    [1, "de", 29, 13, 181, 0],
    [1, "de", 29, 8, 180, 0],
    [1, "de", 30, 13, 186, 0],
    [1, "de", 31, 24, 183, 0],
    [1, "de", 32, 33, 185, 0],
    [1, "de", 32, 37, 182, 0],
    [1, "de", 29, 45, 183, 0],
    [1, "de", 30, 48, 183, 0],
    [1, "de", 30, 58, 181, 0],
    [1, "de", 30, 66, 188, 0],
    [1, "de", 30, 66, 182, 0],
    [1, "de", 29, 63, 196, 0],
    [1, "de", 29, 54, 194, 0],
    [1, "de", 30, 79, 189, 0],
    [1, "de", 30, 87, 182, 0],
    [1, "de", 30, 83, 185, 0],
    [1, "de", 29, 88, 189, 0],
    [1, "de", 29, 85, 202, 0],
    [1, "de", 31, 82, 203, 0],
    [1, "de", 32, 80, 201, 0],
    [1, "de", 32, 87, 209, 0],
    [1, "de", 32, 83, 214, 0],
    [1, "de", 30, 88, 220, 0],
    [1, "de", 30, 78, 229, 0],
    [1, "de", 30, 73, 223, 0],
    [1, "de", 29, 74, 217, 0],
    [1, "de", 29, 67, 217, 0],
    [1, "de", 30, 72, 208, 0],
    [1, "de", 30, 73, 199, 0],
    [1, "de", 30, 65, 207, 0],
    [1, "de", 29, 63, 210, 0],
    [1, "de", 29, 50, 204, 0],
    [1, "de", 30, 41, 205, 0],
    [1, "de", 29, 35, 205, 0],
    [1, "de", 30, 27, 202, 0],
    [1, "de", 30, 20, 201, 0],
    [1, "de", 29, 10, 203, 0],
    [1, "de", 29, 14, 196, 0],
    [1, "de", 29, 24, 187, 0],
    [1, "de", 29, 28, 223, 0],
    [1, "de", 29, 32, 212, 0],
    [1, "de", 30, 28, 214, 0],
    [1, "de", 31, 24, 218, 0],
    [1, "de", 29, 36, 219, 0],
    [1, "de", 29, 37, 217, 0],
    [1, "de", 29, 52, 217, 0],
    [1, "de", 29, 59, 217, 0],
    [1, "de", 29, 69, 231, 0],
    [1, "de", 29, 64, 242, 0],
    [1, "de", 30, 53, 253, 0],
    [1, "de", 30, 45, 250, 0],
    [1, "de", 30, 58, 261, 0],
    [1, "de", 30, 73, 276, 0],
    [1, "de", 30, 64, 276, 0],
    [1, "de", 30, 82, 285, 0],
    [1, "de", 30, 65, 293, 0],
    [1, "de", 30, 56, 288, 0],
    [1, "de", 30, 45, 296, 0],
    [1, "de", 30, 40, 288, 0],
    [1, "de", 30, 37, 283, 0],
    [1, "de", 30, 53, 280, 0],
    [1, "de", 30, 41, 277, 0],
    [1, "de", 29, 28, 296, 0],
    [1, "de", 29, 18, 292, 0],
    [1, "de", 29, 24, 284, 0],
    [1, "de", 30, 10, 295, 0],
    [1, "de", 30, 10, 286, 0],
    [1, "de", 30, 15, 279, 0],
    [1, "de", 30, 15, 269, 0],
    [1, "de", 30, 21, 259, 0],
    [1, "de", 30, 12, 256, 0],
    [1, "de", 30, 31, 245, 0],
    [1, "de", 30, 12, 240, 0],
    [1, "de", 30, 28, 235, 0],
    [1, "de", 30, 13, 226, 0],
    [1, "de", 30, 39, 231, 0],
    [1, "de", 30, 61, 226, 0],
    [1, "r", 96, 262, 0],
    [1, "r", 97, 262, 0],
    [1, "r", 98, 262, 0],
    [1, "r", 97, 270, 0],
    [1, "r", 97, 271, 0],
    [1, "r", 97, 272, 0],
    [1, "r", 97, 273, 0],
    [1, "r", 97, 274, 0],
    [1, "r", 97, 275, 0],
    [1, "r", 97, 276, 0],
    [1, "r", 97, 277, 0],
    [1, "r", 97, 278, 0],
    [1, "r", 98, 270, 0],
    [1, "r", 98, 271, 0],
    [1, "r", 98, 272, 0],
    [1, "r", 98, 273, 0],
    [1, "r", 98, 274, 0],
    [1, "r", 98, 275, 0],
    [1, "r", 98, 276, 0],
    [1, "r", 98, 277, 0],
    [1, "r", 98, 278, 0],
    [1, "r", 96, 283, 0],
    [1, "r", 97, 283, 0],
    [1, "r", 97, 284, 0],
    [1, "r", 97, 285, 0],
    [1, "r", 98, 283, 0],
    [1, "r", 98, 284, 0],
    [1, "r", 98, 285, 0],
    [1, "r", 96, 270, 0],
    [1, "r", 96, 271, 0],
    [1, "r", 96, 272, 0],
    [1, "r", 96, 273, 0],
    [1, "r", 96, 274, 0],
    [1, "r", 96, 275, 0],
    [1, "r", 96, 276, 0],
    [1, "r", 96, 277, 0],
    [1, "r", 96, 278, 0],
    [1, "r", 44, 248, 0],
    [1, "de", 16, 94, 290, 0],
    [1, "de", 16, 94, 252, 0],
    [1, "de", 16, 94, 228, 0],
    [1, "de", 17, 94, 200, 0],
    [1, "r", 95, 282, 1],
    [1, "r", 95, 281, 1],
    [1, "r", 94, 281, 1],
    [1, "r", 90, 281, 1],
    [1, "r", 91, 282, 1],
    [1, "r", 89, 281, 1],
    [1, "r", 85, 276, 1],
    [1, "r", 85, 277, 1],
    [1, "r", 86, 278, 1],
    [1, "p", 0, 85, 279, 1],
    [1, "r", 86, 279, 1],
    [1, "r", 87, 280, 1],
    [1, "r", 96, 281, 0],
    [1, "r", 97, 281, 0],
    [1, "r", 98, 281, 0],
    [1, "r", 98, 282, 0],
    [1, "r", 97, 282, 0],
    [1, "r", 96, 282, 0],
    [1, "r", 68, 261, 1],
    [1, "fo", 1, 94, 168, 0],
    [1, "fo", 2, 94, 151, 0],
    [1, "fo", 1, 94, 138, 0],
    [1, "fo", 1, 93, 124, 0],
    [1, "fo", 1, 94, 129, 0],
    [1, "fo", 1, 93, 113, 0],
    [1, "fo", 1, 94, 102, 0],
    [1, "fo", 1, 94, 93, 0],
    [1, "fo", 1, 93, 90, 0],
    [1, "fo", 1, 94, 79, 0],
    [1, "fo", 1, 94, 76, 0],
    [1, "fo", 1, 93, 70, 0],
    [1, "fo", 1, 93, 63, 0],
    [1, "fo", 1, 94, 53, 0],
    [1, "fo", 1, 93, 10, 0],
    [1, "fo", 1, 85, 8, 0],
    [1, "fo", 1, 94, 12, 0],
    [1, "fo", 1, 66, 13, 0],
    [1, "fo", 1, 69, 9, 0],
    [1, "fo", 2, 68, 14, 0],
    [1, "fo", 2, 66, 25, 0],
    [1, "fo", 2, 92, 9, 0],
    [1, "fo", 2, 94, 14, 0],
    [1, "fo", 2, 87, 9, 0],
    [1, "fo", 2, 71, 9, 0],
    [1, "fo", 2, 90, 12, 0],
    [1, "fo", 2, 91, 13, 0],
    [1, "fo", 1, 74, 12, 0],
    [1, "fo", 2, 72, 12, 0],
    [1, "fo", 2, 75, 13, 0],
    [1, "fo", 2, 74, 15, 0],
    [1, "fo", 2, 84, 12, 0],
    [1, "fo", 2, 81, 14, 0],
    [1, "fo", 1, 84, 13, 0],
    [1, "fo", 1, 84, 19, 0],
    [1, "fo", 1, 11, 9, 0],
    [1, "fo", 1, 7, 14, 0],
    [1, "fo", 1, 8, 22, 0],
    [1, "fo", 1, 7, 34, 0],
    [1, "fo", 1, 12, 24, 0],
    [1, "fo", 2, 8, 24, 0],
    [1, "fo", 2, 9, 21, 0],
    [1, "fo", 2, 31, 10, 0],
    [1, "fo", 2, 33, 27, 0],
    [1, "fo", 2, 9, 34, 0],
    [1, "fo", 2, 8, 19, 0],
    [1, "fo", 1, 14, 10, 0],
    [1, "fo", 2, 13, 9, 0],
    [1, "fo", 2, 15, 11, 0],
    [1, "fo", 2, 9, 9, 0],
    [1, "fo", 2, 9, 10, 0],
    [1, "fo", 2, 9, 15, 0],
    [1, "fo", 2, 10, 23, 0],
    [1, "fo", 2, 34, 29, 0],
    [1, "fo", 2, 27, 18, 0],
    [1, "fo", 2, 25, 21, 0],
    [1, "fo", 2, 20, 18, 0],
    [1, "fo", 2, 18, 21, 0],
    [1, "fo", 2, 29, 9, 0],
    [1, "fo", 2, 13, 14, 0],
    [1, "fo", 2, 9, 38, 0],
    [1, "fo", 2, 21, 39, 0],
    [1, "fo", 2, 84, 26, 0],
    [1, "fo", 2, 77, 25, 0],
    [1, "fo", 2, 86, 35, 0],
    [1, "fo", 1, 70, 35, 0],
    [1, "fo", 2, 72, 36, 0],
    [1, "fo", 2, 73, 31, 0],
    [1, "fo", 2, 89, 39, 0],
    [1, "fo", 2, 65, 40, 0],
    [1, "fo", 2, 92, 32, 0],
    [1, "fo", 2, 90, 28, 0],
    [1, "de", 22, 25, 266, 0],
    [1, "de", 22, 17, 206, 0],
    [1, "de", 19, 8, 184, 0],
    [1, "de", 19, 22, 183, 0],
    [1, "de", 19, 35, 188, 0],
    [1, "de", 19, 36, 192, 0],
    [1, "de", 19, 50, 277, 0],
    [1, "de", 19, 35, 279, 0],
    [1, "t", 4, 7, 178, 0],
    [1, "t", 1, 7, 179, 0],
    [1, "t", 3, 7, 180, 0],
    [1, "t", 2, 7, 181, 0],
    [1, "t", 5, 7, 182, 0],
    [1, "t", 4, 7, 183, 0],
    [1, "t", 3, 7, 184, 0],
    [1, "t", 4, 7, 185, 0],
    [1, "t", 2, 7, 186, 0],
    [1, "t", 1, 7, 187, 0],
    [1, "t", 4, 7, 188, 0],
    [1, "t", 3, 7, 189, 0],
    [1, "t", 5, 7, 190, 0],
    [1, "t", 1, 7, 191, 0],
    [1, "t", 3, 7, 192, 0],
    [1, "t", 4, 7, 193, 0],
    [1, "t", 3, 7, 194, 0],
    [1, "t", 5, 7, 195, 0],
    [1, "t", 2, 7, 196, 0],
    [1, "t", 4, 7, 197, 0],
    [1, "b", 2, 7, 198, 0],
    [1, "t", 4, 7, 199, 0],
    [1, "t", 2, 7, 200, 0],
    [1, "t", 5, 7, 201, 0],
    [1, "t", 2, 7, 202, 0],
    [1, "t", 4, 7, 203, 0],
    [1, "t", 2, 7, 204, 0],
    [1, "t", 5, 7, 205, 0],
    [1, "t", 2, 7, 206, 0],
    [1, "t", 1, 7, 207, 0],
    [1, "t", 4, 7, 208, 0],
    [1, "t", 3, 7, 209, 0],
    [1, "t", 1, 7, 210, 0],
    [1, "b", 0, 7, 211, 0],
    [1, "t", 3, 7, 212, 0],
    [1, "t", 4, 7, 213, 0],
    [1, "t", 3, 7, 214, 0],
    [1, "t", 5, 7, 215, 0],
    [1, "t", 5, 7, 216, 0],
    [1, "t", 3, 7, 217, 0],
    [1, "t", 1, 7, 218, 0],
    [1, "t", 4, 7, 219, 0],
    [1, "b", 2, 7, 220, 0],
    [1, "t", 1, 7, 221, 0],
    [1, "t", 2, 7, 222, 0],
    [1, "t", 4, 7, 223, 0],
    [1, "t", 3, 7, 224, 0],
    [1, "t", 1, 7, 225, 0],
    [1, "t", 4, 7, 226, 0],
    [1, "t", 2, 7, 227, 0],
    [1, "t", 5, 7, 228, 0],
    [1, "t", 3, 7, 229, 0],
    [1, "t", 1, 7, 230, 0],
    [1, "t", 4, 7, 231, 0],
    [1, "b", 2, 7, 232, 0],
    [1, "t", 5, 7, 233, 0],
    [1, "t", 1, 7, 234, 0],
    [1, "t", 3, 7, 235, 0],
    [1, "t", 4, 7, 236, 0],
    [1, "t", 2, 7, 237, 0],
    [1, "t", 5, 7, 238, 0],
    [1, "b", 3, 7, 239, 0],
    [1, "t", 2, 7, 240, 0],
    [1, "t", 1, 7, 241, 0],
    [1, "t", 2, 7, 242, 0],
    [1, "t", 4, 7, 243, 0],
    [1, "t", 3, 7, 244, 0],
    [1, "t", 4, 7, 245, 0],
    [1, "t", 1, 7, 246, 0],
    [1, "b", 0, 7, 247, 0],
    [1, "t", 3, 7, 248, 0],
    [1, "t", 5, 7, 249, 0],
    [1, "t", 2, 7, 250, 0],
    [1, "t", 1, 7, 251, 0],
    [1, "t", 4, 7, 252, 0],
    [1, "t", 3, 7, 253, 0],
    [1, "t", 5, 7, 254, 0],
    [1, "t", 1, 7, 255, 0],
    [1, "t", 4, 7, 256, 0],
    [1, "t", 1, 7, 257, 0],
    [1, "t", 2, 7, 258, 0],
    [1, "t", 5, 7, 260, 0],
    [1, "t", 3, 7, 259, 0],
    [1, "t", 1, 7, 261, 0],
    [1, "t", 3, 7, 262, 0],
    [1, "t", 4, 7, 263, 0],
    [1, "t", 1, 7, 264, 0],
    [1, "t", 2, 7, 265, 0],
    [1, "t", 5, 7, 266, 0],
    [1, "t", 2, 7, 267, 0],
    [1, "t", 2, 7, 269, 0],
    [1, "b", 2, 7, 268, 0],
    [1, "t", 4, 7, 270, 0],
    [1, "t", 1, 7, 271, 0],
    [1, "t", 5, 7, 272, 0],
    [1, "b", 2, 7, 273, 0],
    [1, "t", 4, 7, 274, 0],
    [1, "t", 2, 7, 275, 0],
    [1, "t", 5, 7, 276, 0],
    [1, "t", 5, 7, 277, 0],
    [1, "t", 2, 7, 278, 0],
    [1, "t", 1, 7, 279, 0],
    [1, "t", 4, 7, 280, 0],
    [1, "b", 1, 7, 281, 0],
    [1, "t", 3, 7, 282, 0],
    [1, "t", 4, 7, 283, 0],
    [1, "t", 1, 7, 284, 0],
    [1, "t", 3, 7, 285, 0],
    [1, "t", 5, 7, 286, 0],
    [1, "t", 4, 7, 288, 0],
    [1, "t", 2, 7, 287, 0],
    [1, "b", 0, 7, 289, 0],
    [1, "t", 4, 7, 290, 0],
    [1, "t", 2, 7, 291, 0],
    [1, "t", 5, 7, 292, 0],
    [1, "t", 3, 7, 293, 0],
    [1, "t", 1, 7, 294, 0],
    [1, "t", 4, 7, 295, 0],
    [1, "t", 3, 7, 296, 0],
    [1, "t", 1, 7, 297, 0],
    [1, "t", 4, 7, 298, 0],
    [1, "t", 2, 7, 299, 0],
    [1, "b", 0, 7, 300, 0],
    [1, "t", 2, 7, 301, 0],
    [1, "r", 196, 271, 0],
    [1, "r", 199, 274, 0],
    [1, "r", 167, 238, 0],
    [1, "r", 171, 240, 0],
    [1, "r", 189, 207, 0],
    [1, "r", 192, 209, 0],
    [1, "r", 198, 271, 0],
    [1, "r", 197, 271, 0],
    [1, "r", 198, 272, 0],
    [1, "r", 197, 272, 0],
    [1, "r", 196, 272, 0],
    [1, "r", 195, 272, 0],
    [1, "r", 199, 272, 0],
    [1, "r", 199, 273, 0],
    [1, "r", 198, 273, 0],
    [1, "r", 197, 273, 0],
    [1, "r", 196, 273, 0],
    [1, "r", 198, 274, 0],
    [1, "r", 197, 274, 0],
    [1, "r", 195, 273, 0],
    [1, "r", 196, 274, 0],
    [1, "r", 198, 275, 0],
    [1, "r", 197, 275, 0],
    [1, "r", 200, 274, 0],
    [1, "r", 200, 273, 0],
    [1, "r", 199, 275, 0],
    [1, "plm", 2, 200, 272, 0],
    [1, "plm", 1, 195, 271, 0],
    [1, "plm", 0, 199, 268, 0],
    [1, "plm", 0, 193, 277, 0],
    [1, "plm", 1, 199, 276, 0],
    [1, "s", 1, 200, 275, 1],
    [1, "s", 1, 194, 272, 1],
    [1, "s", 2, 193, 270, 1],
    [1, "g", 2, 193, 273, 1],
    [1, "g", 2, 201, 267, 1],
    [1, "m", 2, 220, 298, 1],
    [1, "m", 1, 219, 292, 1],
    [1, "m", 1, 214, 297, 1],
    [1, "r", 168, 238, 0],
    [1, "r", 169, 238, 0],
    [1, "r", 170, 238, 0],
    [1, "r", 171, 239, 0],
    [1, "r", 170, 239, 0],
    [1, "r", 169, 239, 0],
    [1, "r", 168, 239, 0],
    [1, "r", 167, 239, 0],
    [1, "r", 166, 239, 0],
    [1, "r", 166, 240, 0],
    [1, "r", 167, 240, 0],
    [1, "r", 168, 240, 0],
    [1, "r", 169, 240, 0],
    [1, "r", 170, 240, 0],
    [1, "r", 168, 241, 0],
    [1, "r", 169, 241, 0],
    [1, "r", 170, 241, 0],
    [1, "r", 171, 241, 0],
    [1, "plm", 2, 171, 238, 0],
    [1, "plm", 1, 166, 238, 0],
    [1, "plm", 0, 167, 237, 0],
    [1, "plm", 0, 171, 242, 0],
    [1, "plm", 0, 165, 243, 0],
    [1, "plm", 0, 171, 235, 0],
    [1, "plm", 0, 174, 241, 0],
    [1, "s", 1, 165, 239, 1],
    [1, "s", 1, 172, 241, 1],
    [1, "s", 0, 170, 237, 1],
    [1, "s", 1, 171, 237, 1],
    [1, "s", 2, 174, 236, 1],
    [1, "s", 2, 162, 241, 1],
    [1, "s", 2, 170, 246, 1],
    [1, "s", 2, 167, 235, 1],
    [1, "s", 2, 176, 243, 1],
    [1, "r", 190, 207, 0],
    [1, "r", 191, 207, 0],
    [1, "r", 192, 208, 0],
    [1, "r", 191, 208, 0],
    [1, "r", 190, 208, 0],
    [1, "r", 189, 208, 0],
    [1, "r", 188, 208, 0],
    [1, "r", 189, 209, 0],
    [1, "r", 190, 209, 0],
    [1, "r", 191, 209, 0],
    [1, "r", 188, 209, 0],
    [1, "r", 190, 210, 0],
    [1, "r", 191, 210, 0],
    [1, "r", 192, 210, 0],
    [1, "plm", 2, 189, 210, 0],
    [1, "plm", 2, 192, 205, 0],
    [1, "plm", 1, 192, 207, 0],
    [1, "plm", 0, 193, 210, 0],
    [1, "plm", 0, 187, 208, 0],
    [1, "plm", 0, 197, 206, 0],
    [1, "plm", 0, 191, 213, 0],
    [1, "plm", 0, 190, 204, 0],
    [1, "s", 1, 188, 207, 1],
    [1, "s", 1, 190, 211, 1],
    [1, "s", 2, 188, 213, 1],
    [1, "s", 2, 187, 205, 1],
    [1, "s", 0, 194, 210, 1],
    [1, "s", 0, 198, 207, 1],
    [1, "s", 1, 193, 204, 1],
    [1, "s", 1, 193, 213, 1],
    [1, "s", 2, 198, 212, 1],
    [1, "s", 2, 182, 208, 1],
    [1, "s", 1, 204, 271, 1],
    [1, "s", 0, 203, 272, 1],
    [1, "s", 0, 189, 275, 1],
    [1, "s", 0, 195, 265, 1],
    [1, "s", 2, 196, 264, 1],
    [1, "s", 2, 186, 274, 1],
    [1, "s", 2, 197, 280, 1],
    [1, "s", 0, 217, 282, 1],
    [1, "s", 1, 214, 285, 1],
    [1, "s", 1, 214, 274, 1],
    [1, "s", 1, 203, 282, 1],
    [1, "s", 1, 205, 290, 1],
    [1, "s", 0, 207, 292, 1],
    [1, "s", 0, 197, 297, 1],
    [1, "s", 0, 184, 287, 1],
    [1, "s", 2, 213, 289, 1],
    [1, "s", 2, 196, 294, 1],
    [1, "s", 2, 187, 286, 1],
    [1, "s", 1, 192, 289, 1],
    [1, "s", 1, 189, 299, 1],
    [1, "s", 0, 213, 273, 1],
    [1, "g", 2, 212, 278, 1],
    [1, "g", 1, 200, 288, 1],
    [1, "g", 2, 215, 265, 1],
    [1, "g", 2, 183, 281, 1],
    [1, "s", 0, 178, 295, 1],
    [1, "s", 0, 167, 281, 1],
    [1, "s", 0, 175, 263, 1],
    [1, "s", 1, 176, 293, 1],
    [1, "s", 1, 163, 285, 1],
    [1, "s", 1, 177, 266, 1],
    [1, "s", 1, 161, 272, 1],
    [1, "s", 2, 185, 261, 1],
    [1, "c", 0, 217, 270, 1],
    [1, "c", 0, 220, 278, 1],
    [1, "c", 0, 217, 283, 1],
    [1, "c", 0, 220, 287, 1],
    [1, "c", 0, 210, 292, 1],
    [1, "c", 0, 205, 297, 1],
    [1, "c", 0, 198, 293, 1],
    [1, "c", 0, 208, 283, 1],
    [1, "c", 0, 197, 283, 1],
    [1, "c", 0, 190, 289, 1],
    [1, "c", 0, 183, 296, 1],
    [1, "c", 0, 189, 291, 1],
    [1, "c", 0, 178, 284, 1],
    [1, "c", 0, 208, 265, 1],
    [1, "c", 0, 169, 292, 1],
    [1, "s", 1, 158, 294, 1],
    [1, "s", 0, 151, 297, 1],
    [1, "s", 0, 147, 288, 1],
    [1, "c", 0, 150, 289, 1],
    [1, "c", 0, 160, 282, 1],
    [1, "c", 0, 146, 274, 1],
    [1, "c", 0, 167, 264, 1],
    [1, "c", 0, 165, 267, 1],
    [1, "g", 0, 189, 257, 1],
    [1, "g", 1, 197, 248, 1],
    [1, "g", 2, 170, 255, 1],
    [1, "g", 2, 212, 234, 1],
    [1, "g", 2, 189, 230, 1],
    [1, "g", 2, 173, 221, 1],
    [1, "g", 1, 210, 214, 1],
    [1, "s", 1, 153, 257, 1],
    [1, "s", 0, 158, 255, 1],
    [1, "s", 0, 184, 248, 1],
    [1, "s", 0, 212, 254, 1],
    [1, "s", 1, 203, 249, 1],
    [1, "s", 2, 204, 252, 1],
    [1, "s", 2, 187, 248, 1],
    [1, "s", 0, 206, 237, 1],
    [1, "s", 0, 196, 227, 1],
    [1, "s", 0, 181, 228, 1],
    [1, "s", 1, 199, 227, 1],
    [1, "s", 1, 208, 238, 1],
    [1, "s", 1, 179, 222, 1],
    [1, "s", 1, 213, 223, 1],
    [1, "s", 2, 182, 222, 1],
    [1, "s", 2, 211, 226, 1],
    [1, "s", 2, 214, 214, 1],
    [1, "s", 2, 201, 216, 1],
    [1, "s", 2, 215, 192, 1],
    [1, "s", 1, 210, 198, 1],
    [1, "s", 1, 198, 196, 1],
    [1, "s", 2, 208, 199, 1],
    [1, "s", 2, 187, 192, 1],
    [1, "s", 1, 179, 198, 1],
    [1, "s", 2, 177, 197, 1],
    [1, "s", 0, 164, 197, 1],
    [1, "s", 1, 159, 193, 1],
    [1, "s", 1, 149, 206, 1],
    [1, "s", 1, 164, 209, 1],
    [1, "s", 2, 165, 210, 1],
    [1, "s", 2, 161, 191, 1],
    [1, "s", 1, 162, 224, 1],
    [1, "s", 0, 150, 236, 1],
    [1, "s", 1, 149, 239, 1],
    [1, "s", 2, 153, 236, 1],
    [1, "s", 2, 160, 223, 1],
    [1, "s", 2, 151, 207, 1],
    [1, "s", 2, 147, 220, 1],
    [1, "s", 2, 145, 265, 1],
    [1, "s", 2, 145, 285, 1],
    [1, "c", 0, 152, 266, 1],
    [1, "c", 0, 185, 271, 1],
    [1, "c", 0, 210, 254, 1],
    [1, "c", 0, 209, 256, 1],
    [1, "c", 0, 198, 254, 1],
    [1, "c", 0, 213, 246, 1],
    [1, "c", 0, 216, 237, 1],
    [1, "c", 0, 204, 240, 1],
    [1, "c", 0, 196, 234, 1],
    [1, "c", 0, 188, 238, 1],
    [1, "c", 0, 182, 245, 1],
    [1, "c", 0, 173, 252, 1],
    [1, "c", 0, 153, 248, 1],
    [1, "c", 0, 158, 233, 1],
    [1, "c", 0, 147, 230, 1],
    [1, "c", 0, 151, 224, 1],
    [1, "c", 0, 157, 214, 1],
    [1, "c", 0, 167, 219, 1],
    [1, "c", 0, 171, 208, 1],
    [1, "c", 0, 179, 219, 1],
    [1, "c", 0, 176, 229, 1],
    [1, "c", 0, 195, 221, 1],
    [1, "c", 0, 207, 222, 1],
    [1, "c", 0, 214, 207, 1],
    [1, "c", 0, 205, 210, 1],
    [1, "c", 0, 204, 196, 1],
    [1, "c", 0, 214, 196, 1],
    [1, "c", 0, 190, 199, 1],
    [1, "c", 0, 184, 194, 1],
    [1, "c", 0, 172, 199, 1],
    [1, "c", 0, 161, 204, 1],
    [1, "c", 0, 157, 196, 1],
    [1, "c", 0, 149, 194, 1],
    [1, "c", 0, 147, 208, 1],
    [1, "c", 0, 207, 274, 1],
    [1, "c", 0, 217, 258, 1],
    [1, "c", 0, 201, 260, 1],
    [1, "c", 0, 178, 276, 1],
    [1, "c", 0, 187, 265, 1],
    [1, "s", 1, 204, 260, 1],
    [1, "s", 1, 216, 260, 1],
    [1, "s", 1, 187, 255, 1],
    [1, "s", 2, 189, 254, 1],
    [1, "s", 2, 212, 257, 1],
    [1, "s", 2, 182, 286, 1],
    [1, "s", 2, 169, 280, 1],
    [1, "s", 2, 217, 273, 1],
    [1, "s", 2, 215, 282, 1],
    [1, "s", 2, 172, 263, 1],
    [1, "s", 2, 176, 267, 1],
    [1, "s", 2, 215, 251, 1],
    [1, "fod", 1, 221, 282, 0],
    [1, "fod", 1, 222, 284, 0],
    [1, "fod", 1, 221, 290, 0],
    [1, "fod", 1, 222, 294, 0],
    [1, "fod", 1, 221, 297, 0],
    [1, "fod", 1, 223, 298, 0],
    [1, "fod", 1, 222, 300, 0],
    [1, "fod", 1, 218, 301, 0],
    [1, "fod", 1, 217, 299, 0],
    [1, "fod", 1, 215, 301, 0],
    [1, "fod", 1, 212, 300, 0],
    [1, "fod", 1, 206, 300, 0],
    [1, "fod", 1, 209, 301, 0],
    [1, "fod", 1, 204, 299, 0],
    [1, "fod", 1, 202, 301, 0],
    [1, "fod", 1, 199, 301, 0],
    [1, "fod", 1, 222, 282, 0],
    [1, "fod", 1, 207, 301, 0],
    [1, "fod", 1, 197, 301, 0],
    [1, "fod", 1, 215, 291, 0],
    [1, "fod", 1, 216, 286, 0],
    [1, "fod", 1, 214, 292, 0],
    [1, "fod", 1, 210, 289, 0],
    [1, "fod", 1, 208, 294, 0],
    [1, "fod", 1, 210, 298, 0],
    [1, "fod", 1, 212, 281, 0],
    [1, "fod", 1, 219, 278, 0],
    [1, "fod", 1, 219, 282, 0],
    [1, "fod", 1, 205, 286, 0],
    [1, "fod", 1, 202, 293, 0],
    [1, "fod", 1, 198, 295, 0],
    [1, "fod", 2, 213, 282, 0],
    [1, "fod", 2, 213, 291, 0],
    [1, "fod", 2, 216, 289, 0],
    [1, "fod", 2, 219, 289, 0],
    [1, "fod", 2, 218, 285, 0],
    [1, "fod", 2, 220, 283, 0],
    [1, "fod", 2, 211, 283, 0],
    [1, "fod", 2, 215, 281, 0],
    [1, "fod", 2, 217, 279, 0],
    [1, "fod", 2, 208, 290, 0],
    [1, "fod", 2, 211, 296, 0],
    [1, "fod", 2, 215, 294, 0],
    [1, "fod", 2, 212, 298, 0],
    [1, "fod", 2, 203, 294, 0],
    [1, "fod", 2, 204, 288, 0],
    [1, "fod", 2, 200, 294, 0],
    [1, "fod", 2, 198, 297, 0],
    [1, "fod", 2, 202, 299, 0],
    [1, "fod", 2, 200, 299, 0],
    [1, "fod", 2, 220, 300, 0],
    [1, "fod", 2, 220, 295, 0],
    [1, "fod", 2, 220, 292, 0],
    [1, "fod", 2, 219, 287, 0],
    [1, "fod", 2, 211, 288, 0],
    [1, "fod", 2, 213, 287, 0],
    [1, "fod", 2, 211, 289, 0],
    [1, "fod", 2, 212, 290, 0],
    [1, "fod", 2, 195, 296, 0],
    [1, "fod", 2, 196, 299, 0],
    [1, "fod", 2, 194, 300, 0],
    [1, "fod", 2, 195, 300, 0],
    [1, "fod", 2, 213, 279, 0],
    [1, "fod", 2, 211, 279, 0],
    [1, "fod", 0, 218, 290, 0],
    [1, "fod", 0, 212, 294, 0],
    [1, "fod", 1, 213, 295, 0],
    [1, "fod", 1, 217, 292, 0],
    [1, "fod", 1, 218, 288, 0],
    [1, "fod", 1, 210, 295, 0],
    [1, "fod", 1, 213, 292, 0],
    [1, "fod", 1, 212, 289, 0],
    [1, "fod", 1, 205, 295, 0],
    [1, "fod", 2, 206, 296, 0],
    [1, "fod", 2, 208, 296, 0],
    [1, "fod", 2, 221, 288, 0],
    [1, "fod", 2, 209, 299, 0],
    [1, "fod", 2, 211, 291, 0],
    [1, "fod", 1, 203, 275, 0],
    [1, "fod", 1, 204, 272, 0],
    [1, "fod", 2, 205, 273, 0],
    [1, "fod", 2, 204, 276, 0],
    [1, "fod", 2, 202, 276, 0],
    [1, "fod", 2, 199, 277, 0],
    [1, "fod", 2, 202, 273, 0],
    [1, "fod", 2, 199, 270, 0],
    [1, "fod", 2, 194, 274, 0],
    [1, "fod", 2, 194, 277, 0],
    [1, "fod", 1, 192, 274, 0],
    [1, "fod", 1, 194, 267, 0],
    [1, "fod", 2, 194, 265, 0],
    [1, "fod", 2, 190, 272, 0],
    [1, "fod", 2, 191, 275, 0],
    [1, "fod", 2, 195, 274, 0],
    [1, "fod", 2, 200, 271, 0],
    [1, "fod", 1, 168, 243, 0],
    [1, "fod", 1, 175, 240, 0],
    [1, "fod", 1, 169, 234, 0],
    [1, "fod", 1, 162, 235, 0],
    [1, "fod", 2, 169, 236, 0],
    [1, "fod", 2, 171, 234, 0],
    [1, "fod", 2, 165, 238, 0],
    [1, "fod", 2, 173, 241, 0],
    [1, "fod", 2, 174, 238, 0],
    [1, "fod", 2, 176, 240, 0],
    [1, "fod", 2, 169, 244, 0],
    [1, "fod", 2, 166, 243, 0],
    [1, "fod", 2, 162, 236, 0],
    [1, "fod", 2, 164, 235, 0],
    [1, "fod", 2, 162, 233, 0],
    [1, "fod", 2, 163, 236, 0],
    [1, "fod", 2, 174, 242, 0],
    [1, "fod", 2, 171, 243, 0],
    [1, "fod", 1, 194, 206, 0],
    [1, "fod", 1, 190, 214, 0],
    [1, "fod", 1, 186, 206, 0],
    [1, "fod", 1, 197, 207, 0],
    [1, "fod", 2, 196, 208, 0],
    [1, "fod", 2, 198, 206, 0],
    [1, "fod", 2, 198, 208, 0],
    [1, "fod", 2, 194, 204, 0],
    [1, "fod", 2, 187, 206, 0],
    [1, "fod", 2, 186, 204, 0],
    [1, "fod", 2, 189, 214, 0],
    [1, "fod", 2, 189, 213, 0],
    [1, "fod", 2, 193, 215, 0],
    [1, "fod", 2, 194, 214, 0],
    [1, "fod", 2, 187, 215, 0],
    [1, "fod", 2, 193, 209, 0],
    [1, "fod", 2, 189, 211, 0],
    [1, "fod", 2, 187, 209, 0],
    [1, "fod", 2, 187, 207, 0],
    [1, "fod", 2, 191, 205, 0],
    [1, "fod", 2, 189, 203, 0],
    [1, "cs", 2, 224, 176, 1],
    [1, "cs", 0, 224, 177, 1],
    [1, "cs", 3, 224, 178, 1],
    [1, "cs", 2, 224, 179, 1],
    [1, "cs", 1, 224, 180, 1],
    [1, "cs", 2, 224, 181, 1],
    [1, "cs", 0, 224, 182, 1],
    [1, "cs", 2, 224, 183, 1],
    [1, "cs", 0, 224, 184, 1],
    [1, "cs", 3, 224, 185, 1],
    [1, "cs", 2, 224, 186, 1],
    [1, "cs", 0, 224, 187, 1],
    [1, "cs", 2, 224, 188, 1],
    [1, "cs", 0, 224, 189, 1],
    [1, "cs", 1, 224, 190, 1],
    [1, "cs", 2, 224, 191, 1],
    [1, "cs", 0, 224, 192, 1],
    [1, "cs", 2, 224, 193, 1],
    [1, "cs", 2, 224, 194, 1],
    [1, "cs", 1, 224, 195, 1],
    [1, "cs", 2, 224, 196, 1],
    [1, "cs", 0, 224, 197, 1],
    [1, "cs", 3, 224, 198, 1],
    [1, "cs", 2, 224, 199, 1],
    [1, "cs", 1, 224, 200, 1],
    [1, "cs", 2, 224, 201, 1],
    [1, "cs", 3, 224, 202, 1],
    [1, "cs", 0, 224, 203, 1],
    [1, "cs", 1, 224, 204, 1],
    [1, "cs", 2, 224, 205, 1],
    [1, "cs", 0, 224, 206, 1],
    [1, "cs", 1, 224, 207, 1],
    [1, "cs", 3, 224, 208, 1],
    [1, "cs", 2, 224, 209, 1],
    [1, "cs", 2, 224, 210, 1],
    [1, "cs", 0, 223, 211, 1],
    [1, "cs", 1, 224, 211, 1],
    [1, "cs", 2, 224, 212, 1],
    [1, "cs", 2, 224, 213, 1],
    [1, "cs", 1, 224, 214, 1],
    [1, "cs", 3, 224, 215, 1],
    [1, "cs", 0, 224, 216, 1],
    [1, "cs", 1, 224, 217, 1],
    [1, "cs", 2, 224, 218, 1],
    [1, "cs", 3, 224, 219, 1],
    [1, "cs", 0, 223, 215, 1],
    [1, "cs", 2, 223, 214, 1],
    [1, "cs", 2, 223, 212, 1],
    [1, "cs", 2, 223, 216, 1],
    [1, "cs", 3, 223, 217, 1],
    [1, "cs", 0, 223, 218, 1],
    [1, "cs", 0, 224, 220, 1],
    [1, "cs", 0, 224, 222, 1],
    [1, "cs", 0, 223, 209, 1],
    [1, "cs", 0, 223, 205, 1],
    [1, "cs", 2, 224, 221, 1],
    [1, "cs", 2, 223, 219, 1],
    [1, "cs", 2, 223, 220, 1],
    [1, "cs", 2, 223, 213, 1],
    [1, "cs", 2, 223, 210, 1],
    [1, "cs", 1, 223, 178, 1],
    [1, "cs", 3, 223, 179, 1],
    [1, "cs", 3, 223, 181, 1],
    [1, "cs", 3, 223, 182, 1],
    [1, "cs", 1, 223, 185, 1],
    [1, "cs", 2, 223, 184, 1],
    [1, "cs", 2, 223, 186, 1],
    [1, "cs", 0, 223, 180, 1],
    [1, "cs", 0, 223, 183, 1],
    [1, "cs", 2, 223, 187, 1],
    [1, "cs", 1, 223, 188, 1],
    [1, "cs", 2, 223, 189, 1],
    [1, "cs", 2, 223, 190, 1],
    [1, "cs", 3, 223, 191, 1],
    [1, "cs", 1, 223, 192, 1],
    [1, "cs", 2, 223, 193, 1],
    [1, "cs", 2, 223, 194, 1],
    [1, "cs", 3, 223, 195, 1],
    [1, "cs", 1, 223, 196, 1],
    [1, "cs", 2, 223, 197, 1],
    [1, "cs", 2, 223, 199, 1],
    [1, "cs", 2, 223, 198, 1],
    [1, "cs", 0, 223, 200, 1],
    [1, "cs", 2, 223, 201, 1],
    [1, "cs", 0, 223, 202, 1],
    [1, "cs", 3, 223, 203, 1],
    [1, "cs", 3, 223, 204, 1],
    [1, "cs", 3, 223, 206, 1],
    [1, "cs", 3, 223, 207, 1],
    [1, "cs", 3, 223, 208, 1],
    [1, "cs", 2, 223, 221, 1],
    [1, "cs", 2, 223, 222, 1],
    [1, "cs", 0, 223, 224, 1],
    [1, "cs", 0, 224, 228, 1],
    [1, "cs", 0, 224, 230, 1],
    [1, "cs", 0, 223, 234, 1],
    [1, "cs", 2, 223, 223, 1],
    [1, "cs", 2, 224, 223, 1],
    [1, "cs", 2, 224, 224, 1],
    [1, "cs", 2, 224, 225, 1],
    [1, "cs", 1, 223, 226, 1],
    [1, "cs", 1, 224, 231, 1],
    [1, "cs", 1, 223, 232, 1],
    [1, "cs", 3, 223, 225, 1],
    [1, "cs", 3, 224, 226, 1],
    [1, "cs", 3, 223, 227, 1],
    [1, "cs", 3, 224, 227, 1],
    [1, "cs", 3, 223, 229, 1],
    [1, "cs", 3, 223, 228, 1],
    [1, "cs", 3, 224, 229, 1],
    [1, "cs", 3, 223, 230, 1],
    [1, "cs", 3, 223, 231, 1],
    [1, "cs", 3, 224, 232, 1],
    [1, "cs", 3, 224, 233, 1],
    [1, "cs", 3, 223, 233, 1],
    [1, "cs", 3, 224, 234, 1],
    [1, "cs", 3, 224, 235, 1],
    [1, "cs", 3, 223, 235, 1],
    [1, "cs", 1, 224, 236, 1],
    [1, "cs", 2, 223, 236, 1],
    [1, "cs", 2, 223, 237, 1],
    [1, "cs", 3, 224, 237, 1],
    [1, "cs", 3, 224, 238, 1],
    [1, "cs", 0, 224, 239, 1],
    [1, "cs", 1, 223, 241, 1],
    [1, "cs", 0, 224, 243, 1],
    [1, "cs", 0, 223, 245, 1],
    [1, "cs", 0, 224, 247, 1],
    [1, "cs", 2, 223, 240, 1],
    [1, "cs", 2, 223, 239, 1],
    [1, "cs", 2, 224, 240, 1],
    [1, "cs", 2, 224, 241, 1],
    [1, "cs", 2, 224, 242, 1],
    [1, "cs", 2, 223, 242, 1],
    [1, "cs", 2, 223, 243, 1],
    [1, "cs", 2, 223, 244, 1],
    [1, "cs", 2, 224, 244, 1],
    [1, "cs", 2, 224, 245, 1],
    [1, "cs", 2, 224, 246, 1],
    [1, "cs", 3, 223, 238, 1],
    [1, "cs", 3, 223, 246, 1],
    [1, "cs", 2, 223, 247, 1],
    [1, "cs", 1, 223, 249, 1],
    [1, "cs", 1, 224, 253, 1],
    [1, "cs", 1, 223, 256, 1],
    [1, "cs", 0, 223, 254, 1],
    [1, "cs", 0, 224, 250, 1],
    [1, "cs", 3, 223, 248, 1],
    [1, "cs", 3, 223, 250, 1],
    [1, "cs", 3, 223, 252, 1],
    [1, "cs", 3, 223, 255, 1],
    [1, "cs", 3, 223, 257, 1],
    [1, "cs", 2, 224, 248, 1],
    [1, "cs", 2, 224, 249, 1],
    [1, "cs", 2, 223, 251, 1],
    [1, "cs", 2, 224, 251, 1],
    [1, "cs", 2, 224, 252, 1],
    [1, "cs", 2, 223, 253, 1],
    [1, "cs", 2, 224, 254, 1],
    [1, "cs", 2, 224, 255, 1],
    [1, "cs", 2, 224, 256, 1],
    [1, "cs", 2, 224, 257, 1],
    [1, "cs", 0, 224, 258, 1],
    [1, "cs", 0, 223, 261, 1],
    [1, "cs", 0, 224, 263, 1],
    [1, "cs", 0, 224, 266, 1],
    [1, "cs", 0, 224, 272, 1],
    [1, "cs", 0, 223, 270, 1],
    [1, "cs", 0, 223, 275, 1],
    [1, "cs", 1, 223, 259, 1],
    [1, "cs", 1, 223, 264, 1],
    [1, "cs", 1, 223, 268, 1],
    [1, "cs", 1, 224, 274, 1],
    [1, "cs", 2, 223, 258, 1],
    [1, "cs", 2, 223, 260, 1],
    [1, "cs", 2, 223, 263, 1],
    [1, "cs", 2, 223, 265, 1],
    [1, "cs", 2, 223, 267, 1],
    [1, "cs", 2, 223, 271, 1],
    [1, "cs", 2, 223, 273, 1],
    [1, "cs", 3, 223, 262, 1],
    [1, "cs", 3, 223, 266, 1],
    [1, "cs", 3, 223, 269, 1],
    [1, "cs", 3, 223, 272, 1],
    [1, "cs", 3, 223, 274, 1],
    [1, "cs", 3, 224, 275, 1],
    [1, "cs", 3, 224, 273, 1],
    [1, "cs", 3, 224, 271, 1],
    [1, "cs", 3, 224, 270, 1],
    [1, "cs", 3, 224, 269, 1],
    [1, "cs", 3, 224, 268, 1],
    [1, "cs", 3, 224, 267, 1],
    [1, "cs", 3, 224, 265, 1],
    [1, "cs", 3, 224, 264, 1],
    [1, "cs", 3, 224, 262, 1],
    [1, "cs", 3, 224, 261, 1],
    [1, "cs", 3, 224, 260, 1],
    [1, "cs", 3, 224, 259, 1],
    [1, "cs", 2, 223, 276, 1],
    [1, "cs", 1, 224, 276, 1],
    [1, "cs", 1, 224, 280, 1],
    [1, "cs", 1, 223, 281, 1],
    [1, "cs", 1, 224, 286, 1],
    [1, "cs", 0, 223, 280, 1],
    [1, "cs", 0, 223, 284, 1],
    [1, "cs", 0, 224, 288, 1],
    [1, "cs", 0, 224, 279, 1],
    [1, "cs", 2, 223, 277, 1],
    [1, "cs", 2, 224, 277, 1],
    [1, "cs", 2, 224, 278, 1],
    [1, "cs", 2, 224, 281, 1],
    [1, "cs", 2, 224, 283, 1],
    [1, "cs", 2, 224, 282, 1],
    [1, "cs", 2, 224, 284, 1],
    [1, "cs", 2, 224, 285, 1],
    [1, "cs", 2, 224, 287, 1],
    [1, "cs", 2, 223, 287, 1],
    [1, "cs", 2, 223, 285, 1],
    [1, "cs", 2, 223, 283, 1],
    [1, "cs", 2, 223, 279, 1],
    [1, "cs", 3, 223, 278, 1],
    [1, "cs", 3, 223, 282, 1],
    [1, "cs", 3, 223, 286, 1],
    [1, "cs", 3, 223, 289, 1],
    [1, "cs", 3, 224, 289, 1],
    [1, "cs", 2, 223, 288, 1],
    [1, "cs", 2, 224, 290, 1],
    [1, "cs", 1, 223, 290, 1],
    [1, "cs", 0, 224, 292, 1],
    [1, "cs", 0, 223, 294, 1],
    [1, "cs", 0, 224, 297, 1],
    [1, "cs", 0, 223, 299, 1],
    [1, "cs", 2, 223, 291, 1],
    [1, "cs", 2, 224, 291, 1],
    [1, "cs", 2, 223, 292, 1],
    [1, "cs", 2, 223, 293, 1],
    [1, "cs", 2, 224, 293, 1],
    [1, "cs", 2, 224, 294, 1],
    [1, "cs", 1, 224, 295, 1],
    [1, "cs", 2, 223, 295, 1],
    [1, "cs", 2, 223, 296, 1],
    [1, "cs", 2, 224, 296, 1],
    [1, "cs", 2, 223, 297, 1],
    [1, "cs", 2, 223, 298, 1],
    [1, "cs", 2, 224, 298, 1],
    [1, "cs", 2, 224, 299, 1],
    [1, "cs", 2, 223, 300, 1],
    [1, "cs", 1, 224, 300, 1],
    [1, "cs", 0, 223, 301, 1],
    [1, "cs", 0, 224, 302, 1],
    [1, "cs", 0, 224, 304, 1],
    [1, "cs", 3, 224, 301, 1],
    [1, "cs", 3, 224, 303, 1],
    [1, "cs", 0, 221, 303, 1],
    [1, "cs", 0, 219, 304, 1],
    [1, "cs", 1, 222, 304, 1],
    [1, "cs", 1, 222, 302, 1],
    [1, "cs", 2, 223, 302, 1],
    [1, "cs", 2, 223, 303, 1],
    [1, "cs", 2, 222, 303, 1],
    [1, "cs", 2, 223, 304, 1],
    [1, "cs", 2, 221, 304, 1],
    [1, "cs", 2, 220, 304, 1],
    [1, "cs", 2, 220, 303, 1],
    [1, "cs", 2, 220, 302, 1],
    [1, "cs", 2, 221, 302, 1],
    [1, "cs", 2, 219, 303, 1],
    [1, "cs", 0, 217, 302, 1],
    [1, "cs", 0, 215, 304, 1],
    [1, "cs", 0, 214, 302, 1],
    [1, "cs", 1, 218, 302, 1],
    [1, "cs", 1, 217, 304, 1],
    [1, "cs", 1, 215, 302, 1],
    [1, "cs", 2, 219, 302, 1],
    [1, "cs", 2, 218, 303, 1],
    [1, "cs", 2, 218, 304, 1],
    [1, "cs", 2, 217, 303, 1],
    [1, "cs", 2, 216, 304, 1],
    [1, "cs", 2, 215, 303, 1],
    [1, "cs", 2, 216, 303, 1],
    [1, "cs", 2, 216, 302, 1],
    [1, "cs", 2, 214, 303, 1],
    [1, "cs", 2, 214, 304, 1],
    [1, "cs", 0, 212, 302, 1],
    [1, "cs", 0, 210, 303, 1],
    [1, "cs", 0, 212, 304, 1],
    [1, "cs", 0, 208, 304, 1],
    [1, "cs", 1, 210, 302, 1],
    [1, "cs", 1, 208, 303, 1],
    [1, "cs", 2, 213, 302, 1],
    [1, "cs", 2, 213, 303, 1],
    [1, "cs", 2, 213, 304, 1],
    [1, "cs", 2, 212, 303, 1],
    [1, "cs", 2, 211, 304, 1],
    [1, "cs", 2, 211, 303, 1],
    [1, "cs", 2, 211, 302, 1],
    [1, "cs", 2, 209, 302, 1],
    [1, "cs", 2, 209, 303, 1],
    [1, "cs", 2, 209, 304, 1],
    [1, "cs", 2, 210, 304, 1],
    [1, "cs", 2, 208, 302, 1],
    [1, "cs", 0, 206, 303, 1],
    [1, "cs", 0, 203, 304, 1],
    [1, "cs", 0, 200, 303, 1],
    [1, "cs", 0, 199, 304, 1],
    [1, "cs", 0, 195, 304, 1],
    [1, "cs", 0, 191, 303, 1],
    [1, "cs", 0, 193, 304, 1],
    [1, "cs", 0, 189, 304, 1],
    [1, "cs", 1, 204, 303, 1],
    [1, "cs", 0, 197, 302, 1],
    [1, "cs", 0, 202, 302, 1],
    [1, "cs", 0, 188, 302, 1],
    [1, "cs", 0, 194, 302, 1],
    [1, "cs", 1, 197, 303, 1],
    [1, "cs", 1, 201, 304, 1],
    [1, "cs", 1, 192, 302, 1],
    [1, "cs", 1, 189, 303, 1],
    [1, "cs", 1, 205, 302, 1],
    [1, "cs", 1, 188, 304, 1],
    [1, "cs", 2, 207, 302, 1],
    [1, "cs", 2, 207, 303, 1],
    [1, "cs", 2, 207, 304, 1],
    [1, "cs", 2, 206, 304, 1],
    [1, "cs", 2, 206, 302, 1],
    [1, "cs", 2, 205, 303, 1],
    [1, "cs", 2, 204, 304, 1],
    [1, "cs", 2, 205, 304, 1],
    [1, "cs", 2, 204, 302, 1],
    [1, "cs", 2, 203, 302, 1],
    [1, "cs", 2, 203, 303, 1],
    [1, "cs", 2, 202, 303, 1],
    [1, "cs", 2, 201, 303, 1],
    [1, "cs", 2, 201, 302, 1],
    [1, "cs", 2, 200, 302, 1],
    [1, "cs", 2, 199, 302, 1],
    [1, "cs", 2, 198, 303, 1],
    [1, "cs", 2, 198, 302, 1],
    [1, "cs", 2, 199, 303, 1],
    [1, "cs", 2, 200, 304, 1],
    [1, "cs", 2, 202, 304, 1],
    [1, "cs", 2, 197, 304, 1],
    [1, "cs", 2, 198, 304, 1],
    [1, "cs", 2, 196, 304, 1],
    [1, "cs", 2, 196, 303, 1],
    [1, "cs", 2, 196, 302, 1],
    [1, "cs", 2, 195, 302, 1],
    [1, "cs", 2, 195, 303, 1],
    [1, "cs", 2, 194, 303, 1],
    [1, "cs", 2, 194, 304, 1],
    [1, "cs", 2, 193, 303, 1],
    [1, "cs", 2, 193, 302, 1],
    [1, "cs", 2, 192, 303, 1],
    [1, "cs", 2, 192, 304, 1],
    [1, "cs", 2, 191, 304, 1],
    [1, "cs", 2, 190, 304, 1],
    [1, "cs", 2, 190, 303, 1],
    [1, "cs", 2, 189, 302, 1],
    [1, "cs", 2, 190, 302, 1],
    [1, "cs", 2, 191, 302, 1],
    [1, "cs", 2, 188, 303, 1],
    [1, "cs", 0, 186, 303, 1],
    [1, "cs", 0, 183, 304, 1],
    [1, "cs", 0, 184, 302, 1],
    [1, "cs", 0, 181, 302, 1],
    [1, "cs", 0, 176, 302, 1],
    [1, "cs", 0, 178, 303, 1],
    [1, "cs", 0, 173, 304, 1],
    [1, "cs", 0, 170, 303, 1],
    [1, "cs", 0, 172, 302, 1],
    [1, "cs", 1, 182, 303, 1],
    [1, "cs", 1, 178, 304, 1],
    [1, "cs", 1, 175, 304, 1],
    [1, "cs", 1, 173, 302, 1],
    [1, "cs", 1, 185, 304, 1],
    [1, "cs", 1, 169, 304, 1],
    [1, "cs", 3, 187, 304, 1],
    [1, "cs", 3, 186, 304, 1],
    [1, "cs", 3, 187, 303, 1],
    [1, "cs", 3, 187, 302, 1],
    [1, "cs", 3, 186, 302, 1],
    [1, "cs", 3, 185, 302, 1],
    [1, "cs", 3, 185, 303, 1],
    [1, "cs", 3, 184, 303, 1],
    [1, "cs", 3, 183, 303, 1],
    [1, "cs", 3, 183, 302, 1],
    [1, "cs", 3, 182, 302, 1],
    [1, "cs", 3, 184, 304, 1],
    [1, "cs", 3, 182, 304, 1],
    [1, "cs", 3, 181, 304, 1],
    [1, "cs", 3, 179, 304, 1],
    [1, "cs", 3, 180, 304, 1],
    [1, "cs", 3, 181, 303, 1],
    [1, "cs", 3, 180, 303, 1],
    [1, "cs", 3, 179, 303, 1],
    [1, "cs", 3, 180, 302, 1],
    [1, "cs", 3, 179, 302, 1],
    [1, "cs", 3, 178, 302, 1],
    [1, "cs", 3, 177, 302, 1],
    [1, "cs", 3, 177, 304, 1],
    [1, "cs", 3, 177, 303, 1],
    [1, "cs", 3, 176, 303, 1],
    [1, "cs", 3, 176, 304, 1],
    [1, "cs", 3, 174, 304, 1],
    [1, "cs", 3, 175, 303, 1],
    [1, "cs", 3, 174, 303, 1],
    [1, "cs", 3, 173, 303, 1],
    [1, "cs", 3, 172, 303, 1],
    [1, "cs", 3, 171, 303, 1],
    [1, "cs", 3, 170, 304, 1],
    [1, "cs", 3, 171, 304, 1],
    [1, "cs", 3, 172, 304, 1],
    [1, "cs", 3, 174, 302, 1],
    [1, "cs", 3, 175, 302, 1],
    [1, "cs", 3, 171, 302, 1],
    [1, "cs", 3, 170, 302, 1],
    [1, "cs", 3, 169, 302, 1],
    [1, "cs", 3, 169, 303, 1],
    [1, "cs", 0, 168, 302, 1],
    [1, "cs", 0, 166, 303, 1],
    [1, "cs", 0, 163, 304, 1],
    [1, "cs", 0, 161, 302, 1],
    [1, "cs", 0, 159, 303, 1],
    [1, "cs", 0, 152, 304, 1],
    [1, "cs", 0, 155, 303, 1],
    [1, "cs", 1, 164, 303, 1],
    [1, "cs", 1, 162, 303, 1],
    [1, "cs", 1, 158, 304, 1],
    [1, "cs", 1, 156, 302, 1],
    [1, "cs", 1, 153, 302, 1],
    [1, "cs", 1, 154, 304, 1],
    [1, "cs", 2, 168, 304, 1],
    [1, "cs", 2, 168, 303, 1],
    [1, "cs", 2, 167, 303, 1],
    [1, "cs", 2, 167, 304, 1],
    [1, "cs", 2, 166, 304, 1],
    [1, "cs", 2, 165, 304, 1],
    [1, "cs", 2, 164, 304, 1],
    [1, "cs", 2, 165, 303, 1],
    [1, "cs", 2, 167, 302, 1],
    [1, "cs", 2, 166, 302, 1],
    [1, "cs", 2, 165, 302, 1],
    [1, "cs", 2, 164, 302, 1],
    [1, "cs", 2, 163, 302, 1],
    [1, "cs", 2, 162, 302, 1],
    [1, "cs", 2, 163, 303, 1],
    [1, "cs", 2, 162, 304, 1],
    [1, "cs", 2, 160, 304, 1],
    [1, "cs", 2, 159, 304, 1],
    [1, "cs", 2, 161, 304, 1],
    [1, "cs", 2, 161, 303, 1],
    [1, "cs", 2, 160, 303, 1],
    [1, "cs", 2, 160, 302, 1],
    [1, "cs", 2, 158, 302, 1],
    [1, "cs", 2, 159, 302, 1],
    [1, "cs", 2, 157, 302, 1],
    [1, "cs", 2, 156, 303, 1],
    [1, "cs", 2, 157, 303, 1],
    [1, "cs", 2, 158, 303, 1],
    [1, "cs", 2, 157, 304, 1],
    [1, "cs", 2, 156, 304, 1],
    [1, "cs", 2, 155, 304, 1],
    [1, "cs", 2, 153, 304, 1],
    [1, "cs", 2, 153, 303, 1],
    [1, "cs", 2, 154, 303, 1],
    [1, "cs", 2, 154, 302, 1],
    [1, "cs", 2, 155, 302, 1],
    [1, "cs", 2, 152, 303, 1],
    [1, "cs", 2, 152, 302, 1],
    [1, "cs", 0, 151, 302, 1],
    [1, "cs", 0, 149, 303, 1],
    [1, "cs", 0, 145, 304, 1],
    [1, "cs", 0, 147, 302, 1],
    [1, "cs", 0, 143, 303, 1],
    [1, "cs", 0, 141, 303, 1],
    [1, "cs", 1, 147, 304, 1],
    [1, "cs", 1, 145, 302, 1],
    [1, "cs", 1, 142, 302, 1],
    [1, "cs", 1, 150, 304, 1],
    [1, "cs", 2, 151, 304, 1],
    [1, "cs", 2, 151, 303, 1],
    [1, "cs", 2, 150, 303, 1],
    [1, "cs", 2, 150, 302, 1],
    [1, "cs", 2, 148, 302, 1],
    [1, "cs", 2, 146, 302, 1],
    [1, "cs", 2, 144, 302, 1],
    [1, "cs", 2, 141, 302, 1],
    [1, "cs", 2, 141, 304, 1],
    [1, "cs", 2, 142, 304, 1],
    [1, "cs", 2, 142, 303, 1],
    [1, "cs", 2, 143, 304, 1],
    [1, "cs", 2, 144, 304, 1],
    [1, "cs", 2, 144, 303, 1],
    [1, "cs", 2, 148, 304, 1],
    [1, "cs", 2, 148, 303, 1],
    [1, "cs", 2, 146, 303, 1],
    [1, "cs", 2, 145, 303, 1],
    [1, "cs", 2, 147, 303, 1],
    [1, "cs", 2, 146, 304, 1],
    [1, "cs", 2, 149, 304, 1],
    [1, "cs", 3, 149, 302, 1],
    [1, "cs", 3, 143, 302, 1],
    [1, "cs", 0, 139, 304, 1],
    [1, "cs", 0, 138, 302, 1],
    [1, "cs", 1, 139, 302, 1],
    [1, "cs", 2, 140, 302, 1],
    [1, "cs", 2, 140, 303, 1],
    [1, "cs", 2, 139, 303, 1],
    [1, "cs", 2, 138, 303, 1],
    [1, "cs", 2, 138, 304, 1],
    [1, "cs", 2, 140, 304, 1],
    [1, "cs", 0, 137, 304, 1],
    [1, "cs", 0, 135, 303, 1],
    [1, "cs", 0, 133, 304, 1],
    [1, "cs", 1, 135, 304, 1],
    [1, "cs", 1, 136, 302, 1],
    [1, "cs", 2, 137, 302, 1],
    [1, "cs", 2, 136, 303, 1],
    [1, "cs", 2, 137, 303, 1],
    [1, "cs", 2, 136, 304, 1],
    [1, "cs", 2, 134, 304, 1],
    [1, "cs", 2, 134, 303, 1],
    [1, "cs", 2, 133, 303, 1],
    [1, "cs", 2, 132, 304, 1],
    [1, "cs", 0, 131, 302, 1],
    [1, "cs", 0, 134, 302, 1],
    [1, "cs", 0, 129, 304, 1],
    [1, "cs", 1, 130, 303, 1],
    [1, "cs", 1, 132, 302, 1],
    [1, "cs", 2, 135, 302, 1],
    [1, "cs", 2, 133, 302, 1],
    [1, "cs", 2, 132, 303, 1],
    [1, "cs", 2, 131, 303, 1],
    [1, "cs", 2, 130, 304, 1],
    [1, "cs", 2, 131, 304, 1],
    [1, "cs", 2, 128, 304, 1],
    [1, "cs", 2, 129, 303, 1],
    [1, "cs", 2, 130, 302, 1],
    [1, "cs", 3, 127, 304, 1],
    [1, "cs", 2, 132, 301, 1],
    [1, "cs", 2, 133, 301, 1],
    [1, "cs", 2, 134, 301, 1],
    [1, "cs", 2, 135, 301, 1],
    [1, "cs", 3, 131, 301, 1],
    [1, "cs", 3, 136, 301, 1],
    [1, "cs", 3, 136, 178, 1],
    [1, "cs", 0, 136, 183, 1],
    [1, "cs", 2, 136, 182, 1],
    [1, "cs", 1, 136, 181, 1],
    [1, "cs", 0, 136, 179, 1],
    [1, "cs", 3, 136, 180, 1],
    [1, "cs", 2, 135, 183, 1],
    [1, "cs", 1, 135, 182, 1],
    [1, "cs", 3, 135, 180, 1],
    [1, "cs", 0, 134, 183, 1],
    [1, "cs", 2, 133, 183, 1],
    [1, "cs", 3, 133, 182, 1],
    [1, "cs", 1, 132, 183, 1],
    [1, "cs", 3, 131, 183, 1],
    [1, "cs", 2, 135, 181, 1],
    [1, "cs", 2, 134, 182, 1],
    [1, "cs", 3, 134, 181, 1],
    [1, "fod", 0, 213, 301, 0],
    [1, "fod", 0, 204, 301, 0],
    [1, "fod", 1, 196, 288, 0],
    [1, "fod", 1, 198, 283, 0],
    [1, "fod", 1, 190, 288, 0],
    [1, "fod", 1, 189, 296, 0],
    [1, "fod", 1, 193, 293, 0],
    [1, "fod", 1, 183, 292, 0],
    [1, "fod", 1, 186, 287, 0],
    [1, "fod", 1, 190, 290, 0],
    [1, "fod", 1, 218, 271, 0],
    [1, "fod", 1, 220, 266, 0],
    [1, "fod", 1, 211, 268, 0],
    [1, "fod", 1, 210, 274, 0],
    [1, "fod", 1, 205, 263, 0],
    [1, "fod", 1, 216, 258, 0],
    [1, "fod", 2, 201, 294, 0],
    [1, "fod", 2, 190, 296, 0],
    [1, "fod", 2, 188, 299, 0],
    [1, "fod", 2, 186, 297, 0],
    [1, "fod", 2, 188, 296, 0],
    [1, "fod", 2, 189, 291, 0],
    [1, "fod", 2, 189, 286, 0],
    [1, "fod", 2, 191, 286, 0],
    [1, "fod", 2, 197, 286, 0],
    [1, "fod", 2, 195, 290, 0],
    [1, "fod", 2, 186, 288, 0],
    [1, "fod", 2, 184, 290, 0],
    [1, "fod", 2, 183, 293, 0],
    [1, "fod", 2, 198, 286, 0],
    [1, "fod", 2, 196, 283, 0],
    [1, "fod", 2, 196, 281, 0],
    [1, "fod", 2, 201, 280, 0],
    [1, "fod", 2, 205, 287, 0],
    [1, "fod", 2, 209, 283, 0],
    [1, "fod", 2, 212, 280, 0],
    [1, "fod", 2, 209, 277, 0],
    [1, "fod", 2, 217, 278, 0],
    [1, "fod", 2, 219, 275, 0],
    [1, "fod", 2, 220, 271, 0],
    [1, "fod", 2, 220, 267, 0],
    [1, "fod", 2, 217, 265, 0],
    [1, "fod", 2, 213, 267, 0],
    [1, "fod", 2, 208, 264, 0],
    [1, "fod", 2, 206, 261, 0],
    [1, "fod", 2, 203, 265, 0],
    [1, "fod", 2, 204, 270, 0],
    [1, "fod", 2, 196, 267, 0],
    [1, "fod", 2, 214, 261, 0],
    [1, "fod", 2, 211, 260, 0],
    [1, "fod", 2, 218, 256, 0],
    [1, "fod", 2, 219, 262, 0],
    [1, "fod", 2, 220, 253, 0],
    [1, "fod", 2, 211, 257, 0],
    [1, "la", 3, 198, 27, 1],
    [1, "la", 3, 201, 30, 1],
    [1, "la", 3, 200, 32, 1],
    [1, "la", 3, 198, 33, 1],
    [1, "la", 3, 196, 33, 1],
    [1, "la", 3, 194, 32, 1],
    [1, "la", 3, 194, 28, 1],
    [1, "la", 0, 200, 28, 1],
    [1, "la", 0, 193, 30, 1],
    [1, "la", 3, 196, 27, 1],
    [1, "la", 3, 199, 30, 1],
    [1, "la", 3, 197, 29, 1],
    [1, "la", 3, 195, 30, 1],
    [1, "la", 3, 197, 31, 1],
    [1, "la", 2, 201, 33, 1],
    [1, "la", 4, 202, 34, 1],
    [1, "la", 4, 202, 35, 1],
    [1, "la", 4, 203, 36, 1],
    [1, "la", 4, 204, 37, 1],
    [1, "la", 2, 205, 38, 1],
    [1, "la", 5, 205, 39, 1],
    [1, "la", 5, 205, 40, 1],
    [1, "la", 2, 206, 41, 1],
    [1, "la", 1, 207, 42, 1],
    [1, "la", 1, 205, 41, 1],
    [1, "la", 4, 208, 43, 1],
    [1, "la", 4, 209, 43, 1],
    [1, "la", 1, 210, 43, 1],
    [1, "la", 2, 211, 43, 1],
    [1, "la", 5, 212, 43, 1],
    [1, "la", 4, 213, 44, 1],
    [1, "la", 3, 223, 54, 1],
    [1, "la", 3, 221, 53, 1],
    [1, "la", 3, 219, 53, 1],
    [1, "la", 4, 218, 52, 1],
    [1, "la", 4, 217, 51, 1],
    [1, "la", 4, 216, 51, 1],
    [1, "la", 1, 215, 50, 1],
    [1, "la", 4, 212, 46, 1],
    [1, "la", 1, 210, 44, 1],
    [1, "la", 3, 206, 50, 1],
    [1, "re", 0, 217, 24, 1],
    [1, "re", 0, 207, 16, 1],
    [1, "de", 44, 54, 14, 0],
    [1, "de", 44, 53, 13, 0],
    [1, "de", 44, 51, 16, 0],
    [1, "de", 44, 49, 13, 0],
    [1, "de", 44, 48, 14, 0],
    [1, "de", 21, 78, 293, 0],
    [1, "cs", 0, 221, 8, 1],
    [1, "cs", 0, 224, 9, 1],
    [1, "cs", 1, 223, 8, 1],
    [1, "cs", 2, 224, 8, 1],
    [1, "cs", 2, 222, 8, 1],
    [1, "cs", 0, 224, 6, 1],
    [1, "cs", 0, 222, 5, 1],
    [1, "cs", 0, 219, 7, 1],
    [1, "cs", 1, 220, 5, 1],
    [1, "cs", 1, 217, 7, 1],
    [1, "cs", 2, 224, 5, 1],
    [1, "cs", 2, 223, 5, 1],
    [1, "cs", 2, 224, 7, 1],
    [1, "cs", 2, 223, 7, 1],
    [1, "cs", 2, 223, 6, 1],
    [1, "cs", 2, 222, 6, 1],
    [1, "cs", 2, 222, 7, 1],
    [1, "cs", 2, 221, 7, 1],
    [1, "cs", 2, 221, 6, 1],
    [1, "cs", 2, 221, 5, 1],
    [1, "cs", 2, 220, 6, 1],
    [1, "cs", 2, 220, 7, 1],
    [1, "cs", 2, 220, 8, 1],
    [1, "cs", 2, 219, 8, 1],
    [1, "cs", 2, 219, 6, 1],
    [1, "cs", 2, 219, 5, 1],
    [1, "cs", 0, 218, 5, 1],
    [1, "cs", 0, 216, 8, 1],
    [1, "cs", 2, 218, 8, 1],
    [1, "cs", 2, 217, 8, 1],
    [1, "cs", 2, 218, 7, 1],
    [1, "cs", 2, 218, 6, 1],
    [1, "cs", 2, 217, 6, 1],
    [1, "cs", 2, 217, 5, 1],
    [1, "cs", 1, 215, 6, 1],
    [1, "cs", 1, 213, 5, 1],
    [1, "cs", 0, 214, 6, 1],
    [1, "cs", 0, 216, 5, 1],
    [1, "cs", 0, 213, 8, 1],
    [1, "cs", 0, 211, 7, 1],
    [1, "cs", 0, 209, 5, 1],
    [1, "cs", 0, 208, 7, 1],
    [1, "cs", 0, 207, 8, 1],
    [1, "cs", 2, 216, 6, 1],
    [1, "cs", 2, 216, 7, 1],
    [1, "cs", 2, 215, 7, 1],
    [1, "cs", 2, 215, 8, 1],
    [1, "cs", 2, 214, 8, 1],
    [1, "cs", 2, 214, 7, 1],
    [1, "cs", 2, 215, 5, 1],
    [1, "cs", 2, 214, 5, 1],
    [1, "cs", 2, 213, 6, 1],
    [1, "cs", 2, 213, 7, 1],
    [1, "cs", 2, 212, 7, 1],
    [1, "cs", 1, 211, 5, 1],
    [1, "cs", 1, 209, 8, 1],
    [1, "cs", 2, 212, 8, 1],
    [1, "cs", 2, 211, 8, 1],
    [1, "cs", 2, 210, 8, 1],
    [1, "cs", 2, 209, 7, 1],
    [1, "cs", 2, 210, 7, 1],
    [1, "cs", 2, 210, 6, 1],
    [1, "cs", 2, 212, 6, 1],
    [1, "cs", 2, 212, 5, 1],
    [1, "cs", 2, 211, 6, 1],
    [1, "cs", 2, 210, 5, 1],
    [1, "cs", 2, 209, 6, 1],
    [1, "cs", 2, 208, 6, 1],
    [1, "cs", 2, 208, 5, 1],
    [1, "cs", 2, 207, 7, 1],
    [1, "cs", 2, 207, 6, 1],
    [1, "cs", 2, 207, 5, 1],
    [1, "cs", 2, 206, 5, 1],
    [1, "cs", 2, 208, 8, 1],
    [1, "cs", 2, 206, 6, 1],
    [1, "cs", 0, 204, 8, 1],
    [1, "cs", 0, 205, 6, 1],
    [1, "cs", 0, 203, 5, 1],
    [1, "cs", 0, 202, 7, 1],
    [1, "cs", 0, 199, 8, 1],
    [1, "cs", 0, 200, 6, 1],
    [1, "cs", 0, 197, 6, 1],
    [1, "cs", 0, 195, 8, 1],
    [1, "cs", 0, 194, 6, 1],
    [1, "cs", 1, 202, 8, 1],
    [1, "cs", 1, 206, 7, 1],
    [1, "cs", 1, 201, 5, 1],
    [1, "cs", 1, 197, 8, 1],
    [1, "cs", 1, 192, 7, 1],
    [1, "cs", 1, 195, 5, 1],
    [1, "cs", 2, 205, 7, 1],
    [1, "cs", 2, 205, 8, 1],
    [1, "cs", 2, 206, 8, 1],
    [1, "cs", 2, 204, 7, 1],
    [1, "cs", 2, 204, 6, 1],
    [1, "cs", 2, 204, 5, 1],
    [1, "cs", 2, 205, 5, 1],
    [1, "cs", 2, 203, 6, 1],
    [1, "cs", 2, 203, 7, 1],
    [1, "cs", 2, 203, 8, 1],
    [1, "cs", 2, 201, 8, 1],
    [1, "cs", 2, 200, 8, 1],
    [1, "cs", 2, 200, 7, 1],
    [1, "cs", 2, 201, 7, 1],
    [1, "cs", 2, 201, 6, 1],
    [1, "cs", 2, 202, 5, 1],
    [1, "cs", 2, 202, 6, 1],
    [1, "cs", 2, 200, 5, 1],
    [1, "cs", 2, 199, 5, 1],
    [1, "cs", 2, 197, 5, 1],
    [1, "cs", 2, 196, 5, 1],
    [1, "cs", 2, 198, 5, 1],
    [1, "cs", 2, 198, 6, 1],
    [1, "cs", 2, 199, 6, 1],
    [1, "cs", 2, 199, 7, 1],
    [1, "cs", 2, 198, 7, 1],
    [1, "cs", 2, 198, 8, 1],
    [1, "cs", 2, 197, 7, 1],
    [1, "cs", 2, 196, 7, 1],
    [1, "cs", 2, 196, 8, 1],
    [1, "cs", 2, 196, 6, 1],
    [1, "cs", 2, 195, 6, 1],
    [1, "cs", 2, 195, 7, 1],
    [1, "cs", 2, 194, 7, 1],
    [1, "cs", 2, 193, 8, 1],
    [1, "cs", 2, 194, 8, 1],
    [1, "cs", 2, 193, 7, 1],
    [1, "cs", 2, 193, 6, 1],
    [1, "cs", 2, 193, 5, 1],
    [1, "cs", 2, 194, 5, 1],
    [1, "cs", 0, 192, 5, 1],
    [1, "cs", 0, 191, 8, 1],
    [1, "cs", 0, 190, 6, 1],
    [1, "cs", 0, 188, 7, 1],
    [1, "cs", 0, 186, 8, 1],
    [1, "cs", 0, 186, 5, 1],
    [1, "cs", 0, 184, 7, 1],
    [1, "cs", 0, 182, 8, 1],
    [1, "cs", 0, 181, 6, 1],
    [1, "cs", 1, 189, 8, 1],
    [1, "cs", 1, 183, 8, 1],
    [1, "cs", 1, 188, 5, 1],
    [1, "cs", 1, 185, 6, 1],
    [1, "cs", 1, 180, 7, 1],
    [1, "cs", 1, 183, 5, 1],
    [1, "cs", 1, 178, 8, 1],
    [1, "cs", 1, 177, 6, 1],
    [1, "cs", 1, 173, 7, 1],
    [1, "cs", 1, 171, 7, 1],
    [1, "cs", 0, 177, 8, 1],
    [1, "cs", 0, 175, 7, 1],
    [1, "cs", 0, 179, 5, 1],
    [1, "cs", 0, 174, 5, 1],
    [1, "cs", 0, 176, 5, 1],
    [1, "cs", 0, 172, 8, 1],
    [1, "cs", 0, 170, 8, 1],
    [1, "cs", 0, 169, 6, 1],
    [1, "cs", 2, 192, 6, 1],
    [1, "cs", 2, 192, 8, 1],
    [1, "cs", 2, 191, 7, 1],
    [1, "cs", 2, 191, 6, 1],
    [1, "cs", 2, 191, 5, 1],
    [1, "cs", 2, 190, 5, 1],
    [1, "cs", 2, 189, 5, 1],
    [1, "cs", 2, 189, 6, 1],
    [1, "cs", 2, 189, 7, 1],
    [1, "cs", 2, 190, 7, 1],
    [1, "cs", 2, 190, 8, 1],
    [1, "cs", 2, 188, 8, 1],
    [1, "cs", 2, 187, 8, 1],
    [1, "cs", 2, 187, 7, 1],
    [1, "cs", 2, 187, 6, 1],
    [1, "cs", 2, 188, 6, 1],
    [1, "cs", 2, 187, 5, 1],
    [1, "cs", 2, 186, 6, 1],
    [1, "cs", 2, 186, 7, 1],
    [1, "cs", 2, 185, 7, 1],
    [1, "cs", 2, 185, 8, 1],
    [1, "cs", 2, 184, 8, 1],
    [1, "cs", 2, 183, 7, 1],
    [1, "cs", 2, 183, 6, 1],
    [1, "cs", 2, 184, 6, 1],
    [1, "cs", 2, 184, 5, 1],
    [1, "cs", 2, 185, 5, 1],
    [1, "cs", 2, 182, 6, 1],
    [1, "cs", 2, 182, 7, 1],
    [1, "cs", 2, 181, 7, 1],
    [1, "cs", 2, 181, 8, 1],
    [1, "cs", 2, 180, 8, 1],
    [1, "cs", 2, 179, 8, 1],
    [1, "cs", 2, 182, 5, 1],
    [1, "cs", 2, 181, 5, 1],
    [1, "cs", 2, 180, 5, 1],
    [1, "cs", 2, 180, 6, 1],
    [1, "cs", 2, 179, 6, 1],
    [1, "cs", 2, 179, 7, 1],
    [1, "cs", 2, 178, 7, 1],
    [1, "cs", 2, 178, 6, 1],
    [1, "cs", 2, 178, 5, 1],
    [1, "cs", 2, 177, 5, 1],
    [1, "cs", 2, 177, 7, 1],
    [1, "cs", 2, 176, 7, 1],
    [1, "cs", 2, 176, 6, 1],
    [1, "cs", 2, 175, 6, 1],
    [1, "cs", 2, 175, 5, 1],
    [1, "cs", 2, 176, 8, 1],
    [1, "cs", 2, 174, 8, 1],
    [1, "cs", 2, 175, 8, 1],
    [1, "cs", 2, 173, 8, 1],
    [1, "cs", 2, 174, 7, 1],
    [1, "cs", 2, 173, 6, 1],
    [1, "cs", 2, 174, 6, 1],
    [1, "cs", 2, 172, 5, 1],
    [1, "cs", 2, 173, 5, 1],
    [1, "cs", 2, 172, 6, 1],
    [1, "cs", 2, 172, 7, 1],
    [1, "cs", 2, 171, 8, 1],
    [1, "cs", 2, 170, 7, 1],
    [1, "cs", 2, 170, 6, 1],
    [1, "cs", 2, 170, 5, 1],
    [1, "cs", 2, 171, 5, 1],
    [1, "cs", 2, 171, 6, 1],
    [1, "cs", 2, 169, 5, 1],
    [1, "cs", 2, 169, 7, 1],
    [1, "cs", 2, 169, 8, 1],
    [1, "cs", 1, 168, 7, 1],
    [1, "cs", 1, 166, 5, 1],
    [1, "cs", 1, 164, 7, 1],
    [1, "cs", 1, 160, 7, 1],
    [1, "cs", 1, 156, 8, 1],
    [1, "cs", 0, 166, 8, 1],
    [1, "cs", 0, 168, 5, 1],
    [1, "cs", 0, 164, 6, 1],
    [1, "cs", 0, 162, 7, 1],
    [1, "cs", 0, 158, 8, 1],
    [1, "cs", 0, 157, 6, 1],
    [1, "cs", 0, 161, 5, 1],
    [1, "cs", 0, 159, 5, 1],
    [1, "cs", 0, 155, 7, 1],
    [1, "cs", 0, 154, 5, 1],
    [1, "cs", 0, 151, 7, 1],
    [1, "cs", 1, 153, 8, 1],
    [1, "cs", 1, 151, 5, 1],
    [1, "cs", 2, 168, 6, 1],
    [1, "cs", 2, 168, 8, 1],
    [1, "cs", 2, 167, 8, 1],
    [1, "cs", 2, 167, 7, 1],
    [1, "cs", 2, 167, 6, 1],
    [1, "cs", 2, 167, 5, 1],
    [1, "cs", 2, 166, 6, 1],
    [1, "cs", 2, 166, 7, 1],
    [1, "cs", 2, 165, 7, 1],
    [1, "cs", 2, 165, 6, 1],
    [1, "cs", 2, 165, 5, 1],
    [1, "cs", 2, 164, 5, 1],
    [1, "cs", 2, 163, 5, 1],
    [1, "cs", 2, 162, 5, 1],
    [1, "cs", 2, 162, 6, 1],
    [1, "cs", 2, 163, 6, 1],
    [1, "cs", 2, 163, 7, 1],
    [1, "cs", 2, 163, 8, 1],
    [1, "cs", 2, 164, 8, 1],
    [1, "cs", 2, 165, 8, 1],
    [1, "cs", 2, 161, 8, 1],
    [1, "cs", 2, 162, 8, 1],
    [1, "cs", 2, 160, 8, 1],
    [1, "cs", 2, 159, 8, 1],
    [1, "cs", 2, 159, 7, 1],
    [1, "cs", 2, 159, 6, 1],
    [1, "cs", 2, 160, 5, 1],
    [1, "cs", 2, 160, 6, 1],
    [1, "cs", 2, 161, 6, 1],
    [1, "cs", 2, 161, 7, 1],
    [1, "cs", 2, 157, 7, 1],
    [1, "cs", 2, 158, 7, 1],
    [1, "cs", 2, 158, 6, 1],
    [1, "cs", 2, 158, 5, 1],
    [1, "cs", 2, 155, 5, 1],
    [1, "cs", 2, 155, 6, 1],
    [1, "cs", 2, 156, 6, 1],
    [1, "cs", 2, 156, 7, 1],
    [1, "cs", 2, 157, 8, 1],
    [1, "cs", 2, 155, 8, 1],
    [1, "cs", 2, 154, 8, 1],
    [1, "cs", 2, 154, 7, 1],
    [1, "cs", 2, 154, 6, 1],
    [1, "cs", 2, 152, 8, 1],
    [1, "cs", 2, 153, 7, 1],
    [1, "cs", 2, 153, 6, 1],
    [1, "cs", 2, 153, 5, 1],
    [1, "cs", 2, 152, 5, 1],
    [1, "cs", 2, 152, 6, 1],
    [1, "cs", 2, 152, 7, 1],
    [1, "cs", 2, 151, 6, 1],
    [1, "cs", 2, 157, 5, 1],
    [1, "cs", 1, 156, 5, 1],
    [1, "cs", 0, 150, 5, 1],
    [1, "cs", 0, 149, 7, 1],
    [1, "cs", 0, 147, 8, 1],
    [1, "cs", 0, 146, 5, 1],
    [1, "cs", 0, 144, 7, 1],
    [1, "cs", 0, 142, 5, 1],
    [1, "cs", 1, 147, 6, 1],
    [1, "cs", 1, 145, 8, 1],
    [1, "cs", 1, 144, 5, 1],
    [1, "cs", 2, 148, 5, 1],
    [1, "cs", 2, 149, 5, 1],
    [1, "cs", 2, 150, 6, 1],
    [1, "cs", 2, 150, 8, 1],
    [1, "cs", 2, 151, 8, 1],
    [1, "cs", 2, 150, 7, 1],
    [1, "cs", 2, 149, 8, 1],
    [1, "cs", 2, 148, 8, 1],
    [1, "cs", 2, 149, 6, 1],
    [1, "cs", 2, 148, 6, 1],
    [1, "cs", 2, 148, 7, 1],
    [1, "cs", 2, 147, 7, 1],
    [1, "cs", 2, 147, 5, 1],
    [1, "cs", 2, 146, 6, 1],
    [1, "cs", 2, 146, 7, 1],
    [1, "cs", 2, 146, 8, 1],
    [1, "cs", 2, 145, 7, 1],
    [1, "cs", 2, 145, 6, 1],
    [1, "cs", 2, 145, 5, 1],
    [1, "cs", 2, 144, 6, 1],
    [1, "cs", 2, 143, 5, 1],
    [1, "cs", 2, 143, 6, 1],
    [1, "cs", 2, 142, 6, 1],
    [1, "cs", 2, 141, 5, 1],
    [1, "cs", 2, 224, 10, 1],
    [1, "cs", 0, 224, 11, 1],
    [1, "cs", 0, 224, 13, 1],
    [1, "cs", 0, 224, 17, 1],
    [1, "cs", 0, 224, 19, 1],
    [1, "cs", 0, 224, 22, 1],
    [1, "cs", 0, 224, 24, 1],
    [1, "cs", 0, 224, 29, 1],
    [1, "cs", 0, 224, 33, 1],
    [1, "cs", 0, 224, 35, 1],
    [1, "cs", 0, 224, 38, 1],
    [1, "cs", 1, 224, 14, 1],
    [1, "cs", 1, 224, 20, 1],
    [1, "cs", 1, 224, 27, 1],
    [1, "cs", 1, 224, 31, 1],
    [1, "cs", 1, 224, 36, 1],
    [1, "cs", 2, 224, 12, 1],
    [1, "cs", 2, 224, 15, 1],
    [1, "cs", 2, 224, 16, 1],
    [1, "cs", 2, 224, 18, 1],
    [1, "cs", 2, 224, 21, 1],
    [1, "cs", 2, 224, 23, 1],
    [1, "cs", 2, 224, 25, 1],
    [1, "cs", 2, 224, 26, 1],
    [1, "cs", 2, 224, 28, 1],
    [1, "cs", 2, 224, 30, 1],
    [1, "cs", 2, 224, 32, 1],
    [1, "cs", 2, 224, 34, 1],
    [1, "cs", 2, 224, 37, 1],
    [1, "cs", 2, 224, 39, 1],
    [1, "cs", 0, 224, 41, 1],
    [1, "cs", 0, 224, 44, 1],
    [1, "cs", 0, 224, 46, 1],
    [1, "cs", 0, 224, 52, 1],
    [1, "cs", 0, 224, 57, 1],
    [1, "cs", 1, 224, 47, 1],
    [1, "cs", 2, 224, 40, 1],
    [1, "cs", 2, 224, 42, 1],
    [1, "cs", 2, 224, 43, 1],
    [1, "cs", 2, 224, 45, 1],
    [1, "cs", 2, 224, 49, 1],
    [1, "cs", 1, 224, 50, 1],
    [1, "cs", 2, 224, 51, 1],
    [1, "la", 3, 224, 54, 1],
    [1, "cs", 2, 224, 56, 1],
    [1, "cs", 2, 224, 58, 1],
    [1, "cs", 2, 224, 61, 1],
    [1, "cs", 0, 224, 60, 1],
    [1, "cs", 0, 224, 64, 1],
    [1, "cs", 0, 224, 66, 1],
    [1, "cs", 0, 224, 70, 1],
    [1, "cs", 0, 224, 74, 1],
    [1, "cs", 0, 224, 77, 1],
    [1, "cs", 1, 224, 62, 1],
    [1, "cs", 1, 224, 68, 1],
    [1, "cs", 1, 224, 72, 1],
    [1, "cs", 1, 224, 76, 1],
    [1, "cs", 1, 224, 80, 1],
    [1, "cs", 1, 224, 83, 1],
    [1, "cs", 1, 224, 91, 1],
    [1, "cs", 1, 224, 95, 1],
    [1, "cs", 1, 224, 97, 1],
    [1, "cs", 0, 224, 85, 1],
    [1, "cs", 0, 224, 88, 1],
    [1, "cs", 0, 224, 93, 1],
    [1, "cs", 0, 224, 98, 1],
    [1, "cs", 2, 224, 59, 1],
    [1, "cs", 2, 224, 63, 1],
    [1, "cs", 2, 224, 65, 1],
    [1, "cs", 2, 224, 67, 1],
    [1, "cs", 2, 224, 69, 1],
    [1, "cs", 2, 224, 71, 1],
    [1, "cs", 2, 224, 73, 1],
    [1, "cs", 2, 224, 75, 1],
    [1, "cs", 2, 224, 78, 1],
    [1, "cs", 2, 224, 79, 1],
    [1, "cs", 2, 224, 81, 1],
    [1, "cs", 2, 224, 82, 1],
    [1, "cs", 2, 224, 84, 1],
    [1, "cs", 2, 224, 86, 1],
    [1, "cs", 2, 224, 87, 1],
    [1, "cs", 2, 224, 89, 1],
    [1, "cs", 2, 224, 90, 1],
    [1, "cs", 2, 224, 92, 1],
    [1, "cs", 2, 224, 94, 1],
    [1, "cs", 2, 224, 96, 1],
    [1, "cs", 2, 224, 99, 1],
    [1, "cs", 2, 224, 100, 1],
    [1, "cs", 0, 224, 101, 1],
    [1, "cs", 1, 224, 103, 1],
    [1, "cs", 2, 224, 102, 1],
    [1, "cs", 0, 222, 10, 1],
    [1, "cs", 2, 223, 9, 1],
    [1, "cs", 2, 222, 9, 1],
    [1, "cs", 2, 221, 9, 1],
    [1, "cs", 2, 223, 10, 1],
    [1, "cs", 2, 223, 11, 1],
    [1, "cs", 2, 223, 12, 1],
    [1, "cs", 3, 223, 13, 1],
    [1, "cs", 3, 222, 11, 1],
    [1, "cs", 3, 220, 9, 1],
    [1, "cs", 3, 219, 9, 1],
    [1, "cs", 3, 221, 10, 1],
    [1, "re", 2, 219, 13, 1],
    [1, "re", 1, 218, 18, 1],
    [1, "re", 1, 214, 13, 1],
    [1, "cs", 0, 221, 20, 1],
    [1, "cs", 1, 223, 18, 1],
    [1, "cs", 2, 222, 19, 1],
    [1, "cs", 2, 223, 19, 1],
    [1, "cs", 2, 223, 20, 1],
    [1, "cs", 2, 222, 20, 1],
    [1, "cs", 2, 220, 21, 1],
    [1, "cs", 0, 219, 21, 1],
    [1, "cs", 3, 221, 21, 1],
    [1, "cs", 3, 218, 21, 1],
    [1, "cs", 3, 222, 21, 1],
    [1, "cs", 3, 220, 22, 1],
    [1, "cs", 3, 219, 22, 1],
    [1, "cs", 3, 221, 22, 1],
    [1, "cs", 0, 211, 9, 1],
    [1, "cs", 1, 211, 10, 1],
    [1, "cs", 1, 210, 12, 1],
    [1, "cs", 0, 211, 13, 1],
    [1, "cs", 2, 210, 9, 1],
    [1, "cs", 2, 210, 10, 1],
    [1, "cs", 2, 210, 11, 1],
    [1, "cs", 2, 212, 9, 1],
    [1, "cs", 2, 210, 13, 1],
    [1, "cs", 2, 211, 12, 1],
    [1, "cs", 2, 211, 11, 1],
    [1, "cs", 2, 211, 14, 1],
    [1, "cs", 2, 212, 15, 1],
    [1, "cs", 2, 210, 14, 1],
    [1, "cs", 3, 211, 15, 1],
    [1, "cs", 3, 213, 9, 1],
    [1, "cs", 3, 212, 10, 1],
    [1, "cs", 3, 223, 21, 1],
    [1, "cs", 3, 209, 9, 1],
    [1, "la", 3, 223, 22, 1],
    [1, "la", 3, 221, 23, 1],
    [1, "la", 3, 207, 9, 1],
    [1, "la", 3, 209, 10, 1],
    [1, "la", 0, 209, 12, 1],
    [1, "la", 4, 209, 14, 1],
    [1, "la", 4, 219, 23, 1],
    [1, "la", 3, 210, 15, 1],
    [1, "la", 3, 217, 22, 1],
    [1, "la", 4, 212, 16, 1],
    [1, "la", 2, 214, 19, 1],
    [1, "la", 4, 213, 20, 1],
    [1, "la", 1, 212, 21, 1],
    [1, "la", 4, 215, 18, 1],
    [1, "la", 2, 216, 17, 1],
    [1, "la", 5, 216, 16, 1],
    [1, "la", 5, 216, 15, 1],
    [1, "la", 1, 217, 16, 1],
    [1, "la", 2, 218, 16, 1],
    [1, "la", 2, 216, 14, 1],
    [1, "la", 2, 219, 16, 1],
    [1, "la", 5, 220, 16, 1],
    [1, "la", 5, 216, 13, 1],
    [1, "la", 4, 217, 15, 1],
    [1, "cs", 0, 211, 44, 1],
    [1, "cs", 1, 212, 45, 1],
    [1, "cs", 2, 213, 45, 1],
    [1, "cs", 0, 214, 46, 1],
    [1, "cs", 2, 215, 46, 1],
    [1, "cs", 3, 213, 46, 1],
    [1, "cs", 3, 214, 47, 1],
    [1, "cs", 3, 214, 48, 1],
    [1, "cs", 3, 216, 46, 1],
    [1, "cs", 0, 208, 20, 1],
    [1, "cs", 0, 210, 21, 1],
    [1, "cs", 0, 212, 23, 1],
    [1, "cs", 0, 213, 25, 1],
    [1, "cs", 2, 213, 24, 1],
    [1, "cs", 2, 211, 22, 1],
    [1, "cs", 2, 210, 20, 1],
    [1, "cs", 2, 209, 21, 1],
    [1, "cs", 2, 209, 20, 1],
    [1, "cs", 2, 211, 21, 1],
    [1, "cs", 2, 212, 22, 1],
    [1, "cs", 2, 213, 23, 1],
    [1, "cs", 3, 213, 26, 1],
    [1, "cs", 3, 207, 20, 1],
    [1, "la", 4, 192, 33, 1],
    [1, "la", 4, 191, 34, 1],
    [1, "la", 4, 190, 35, 1],
    [1, "la", 3, 189, 37, 1],
    [1, "la", 3, 188, 39, 1],
    [1, "la", 4, 186, 40, 1],
    [1, "la", 4, 185, 39, 1],
    [1, "la", 4, 184, 39, 1],
    [1, "la", 2, 183, 39, 1],
    [1, "la", 1, 182, 40, 1],
    [1, "la", 2, 181, 41, 1],
    [1, "la", 5, 180, 41, 1],
    [1, "la", 5, 179, 41, 1],
    [1, "la", 4, 192, 28, 1],
    [1, "la", 4, 191, 28, 1],
    [1, "la", 4, 190, 27, 1],
    [1, "la", 3, 188, 27, 1],
    [1, "la", 4, 187, 26, 1],
    [1, "la", 4, 186, 25, 1],
    [1, "la", 4, 185, 25, 1],
    [1, "la", 4, 184, 24, 1],
    [1, "la", 5, 184, 23, 1],
    [1, "la", 2, 184, 22, 1],
    [1, "la", 5, 184, 21, 1],
    [1, "la", 1, 183, 20, 1],
    [1, "la", 5, 182, 20, 1],
    [1, "la", 2, 181, 20, 1],
    [1, "la", 5, 180, 20, 1],
    [1, "la", 2, 179, 20, 1],
    [1, "la", 4, 178, 19, 1],
    [1, "la", 3, 178, 17, 1],
    [1, "la", 3, 176, 18, 1],
    [1, "cs", 0, 177, 15, 1],
    [1, "cs", 0, 175, 17, 1],
    [1, "cs", 0, 180, 16, 1],
    [1, "cs", 0, 174, 19, 1],
    [1, "cs", 0, 172, 20, 1],
    [1, "cs", 1, 175, 15, 1],
    [1, "cs", 1, 172, 18, 1],
    [1, "cs", 1, 181, 15, 1],
    [1, "cs", 2, 179, 15, 1],
    [1, "cs", 2, 177, 16, 1],
    [1, "cs", 2, 176, 16, 1],
    [1, "cs", 2, 174, 18, 1],
    [1, "cs", 2, 173, 19, 1],
    [1, "cs", 2, 172, 19, 1],
    [1, "cs", 2, 173, 18, 1],
    [1, "cs", 2, 173, 17, 1],
    [1, "cs", 2, 174, 17, 1],
    [1, "cs", 2, 174, 16, 1],
    [1, "cs", 2, 175, 16, 1],
    [1, "cs", 2, 176, 15, 1],
    [1, "cs", 2, 178, 15, 1],
    [1, "cs", 2, 178, 16, 1],
    [1, "cs", 2, 179, 16, 1],
    [1, "cs", 2, 180, 15, 1],
    [1, "cs", 2, 181, 16, 1],
    [1, "cs", 3, 182, 16, 1],
    [1, "cs", 3, 172, 21, 1],
    [1, "la", 1, 175, 19, 1],
    [1, "la", 2, 174, 20, 1],
    [1, "la", 2, 173, 20, 1],
    [1, "la", 1, 180, 17, 1],
    [1, "la", 2, 181, 17, 1],
    [1, "la", 3, 191, 20, 1],
    [1, "s", 0, 217, 30, 1],
    [1, "s", 0, 208, 35, 1],
    [1, "s", 0, 204, 24, 1],
    [1, "s", 1, 218, 32, 1],
    [1, "s", 1, 207, 34, 1],
    [1, "s", 1, 202, 23, 1],
    [1, "s", 1, 195, 16, 1],
    [1, "s", 2, 222, 28, 1],
    [1, "s", 2, 212, 38, 1],
    [1, "s", 2, 207, 23, 1],
    [1, "s", 2, 202, 12, 1],
    [1, "s", 2, 195, 18, 1],
    [1, "s", 1, 191, 12, 1],
    [1, "s", 0, 187, 16, 1],
    [1, "s", 2, 188, 16, 1],
    [1, "s", 1, 186, 14, 1],
    [1, "s", 1, 201, 16, 1],
    [1, "g", 1, 216, 31, 1],
    [1, "g", 0, 200, 15, 1],
    [1, "g", 0, 202, 40, 1],
    [1, "g", 0, 189, 32, 1],
    [1, "g", 0, 204, 28, 1],
    [1, "g", 0, 196, 24, 1],
    [1, "g", 2, 198, 37, 1],
    [1, "s", 0, 193, 39, 1],
    [1, "s", 0, 201, 45, 1],
    [1, "a", 0, 210, 29, 1],
    [1, "a", 0, 200, 20, 1],
    [1, "cs", 0, 200, 34, 1],
    [1, "cs", 0, 193, 27, 1],
    [1, "cs", 1, 203, 30, 1],
    [1, "cs", 1, 191, 31, 1],
    [1, "cs", 2, 202, 32, 1],
    [1, "cs", 2, 194, 26, 1],
    [1, "cs", 2, 192, 27, 1],
    [1, "cs", 2, 192, 32, 1],
    [1, "cs", 2, 203, 31, 1],
    [1, "cs", 2, 202, 31, 1],
    [1, "cs", 2, 202, 30, 1],
    [1, "cs", 3, 202, 29, 1],
    [1, "cs", 3, 201, 32, 1],
    [1, "cs", 3, 199, 35, 1],
    [1, "cs", 0, 193, 34, 1],
    [1, "cs", 2, 194, 34, 1],
    [1, "cs", 2, 198, 35, 1],
    [1, "cs", 3, 199, 34, 1],
    [1, "cs", 3, 191, 29, 1],
    [1, "cs", 0, 191, 30, 1],
    [1, "cs", 3, 190, 29, 1],
    [1, "la", 3, 180, 69, 1],
    [1, "la", 3, 182, 68, 1],
    [1, "la", 3, 184, 68, 1],
    [1, "la", 3, 186, 70, 1],
    [1, "la", 3, 184, 72, 1],
    [1, "la", 3, 182, 72, 1],
    [1, "la", 3, 180, 71, 1],
    [1, "cs", 0, 186, 68, 1],
    [1, "cs", 0, 187, 70, 1],
    [1, "cs", 0, 183, 74, 1],
    [1, "cs", 0, 178, 70, 1],
    [1, "cs", 2, 182, 66, 1],
    [1, "cs", 2, 182, 74, 1],
    [1, "cs", 2, 181, 73, 1],
    [1, "cs", 2, 180, 74, 1],
    [1, "cs", 2, 181, 74, 1],
    [1, "la", 0, 184, 70, 1],
    [1, "la", 3, 182, 70, 1],
    [1, "cs", 2, 181, 67, 1],
    [1, "cs", 3, 184, 67, 1],
    [1, "cs", 3, 182, 67, 1],
    [1, "la", 4, 187, 69, 1],
    [1, "la", 1, 188, 68, 1],
    [1, "la", 4, 189, 68, 1],
    [1, "la", 2, 190, 68, 1],
    [1, "la", 1, 191, 68, 1],
    [1, "la", 4, 192, 68, 1],
    [1, "la", 2, 193, 68, 1],
    [1, "la", 4, 194, 69, 1],
    [1, "la", 2, 194, 70, 1],
    [1, "la", 5, 195, 71, 1],
    [1, "la", 1, 194, 71, 1],
    [1, "la", 2, 196, 72, 1],
    [1, "la", 4, 196, 71, 1],
    [1, "la", 1, 197, 73, 1],
    [1, "la", 5, 196, 73, 1],
    [1, "la", 5, 198, 73, 1],
    [1, "la", 3, 201, 73, 1],
    [1, "la", 3, 203, 72, 1],
    [1, "la", 4, 199, 73, 1],
    [1, "la", 1, 205, 72, 1],
    [1, "la", 2, 206, 72, 1],
    [1, "la", 5, 207, 72, 1],
    [1, "la", 1, 208, 72, 1],
    [1, "la", 1, 209, 73, 1],
    [1, "la", 2, 209, 74, 1],
    [1, "la", 5, 211, 76, 1],
    [1, "la", 4, 210, 75, 1],
    [1, "la", 5, 212, 76, 1],
    [1, "la", 4, 202, 75, 1],
    [1, "la", 2, 203, 76, 1],
    [1, "la", 4, 204, 77, 1],
    [1, "la", 2, 204, 78, 1],
    [1, "la", 2, 204, 79, 1],
    [1, "la", 5, 204, 80, 1],
    [1, "cs", 0, 202, 74, 1],
    [1, "cs", 1, 203, 74, 1],
    [1, "cs", 2, 204, 73, 1],
    [1, "cs", 2, 203, 75, 1],
    [1, "cs", 3, 204, 76, 1],
    [1, "cs", 3, 205, 73, 1],
    [1, "cs", 0, 205, 74, 1],
    [1, "cs", 2, 204, 74, 1],
    [1, "cs", 2, 204, 75, 1],
    [1, "cs", 2, 206, 73, 1],
    [1, "cs", 3, 207, 73, 1],
    [1, "cs", 2, 205, 76, 1],
    [1, "cs", 3, 205, 77, 1],
    [1, "la", 3, 183, 66, 1],
    [1, "la", 4, 183, 65, 1],
    [1, "la", 4, 184, 64, 1],
    [1, "la", 4, 185, 63, 1],
    [1, "la", 1, 185, 62, 1],
    [1, "la", 2, 185, 61, 1],
    [1, "la", 2, 185, 60, 1],
    [1, "la", 4, 186, 59, 1],
    [1, "la", 1, 187, 58, 1],
    [1, "la", 2, 187, 57, 1],
    [1, "la", 2, 187, 56, 1],
    [1, "s", 0, 191, 60, 1],
    [1, "s", 1, 195, 58, 1],
    [1, "s", 1, 199, 46, 1],
    [1, "s", 2, 202, 49, 1],
    [1, "g", 2, 197, 55, 1],
    [1, "g", 1, 213, 55, 1],
    [1, "g", 0, 192, 45, 1],
    [1, "g", 0, 210, 61, 1],
    [1, "g", 0, 182, 52, 1],
    [1, "g", 0, 180, 35, 1],
    [1, "g", 0, 175, 25, 1],
    [1, "g", 0, 168, 32, 1],
    [1, "g", 1, 179, 28, 1],
    [1, "g", 1, 161, 16, 1],
    [1, "g", 2, 172, 12, 1],
    [1, "g", 2, 160, 25, 1],
    [1, "g", 2, 157, 39, 1],
    [1, "g", 2, 170, 43, 1],
    [1, "g", 2, 202, 67, 1],
    [1, "g", 2, 217, 72, 1],
    [1, "g", 2, 214, 82, 1],
    [1, "g", 2, 193, 86, 1],
    [1, "g", 2, 168, 60, 1],
    [1, "g", 2, 165, 78, 1],
    [1, "g", 2, 173, 88, 1],
    [1, "s", 0, 185, 51, 1],
    [1, "s", 0, 175, 44, 1],
    [1, "s", 0, 165, 50, 1],
    [1, "s", 0, 160, 32, 1],
    [1, "s", 1, 162, 30, 1],
    [1, "s", 1, 176, 28, 1],
    [1, "s", 1, 154, 17, 1],
    [1, "s", 1, 184, 49, 1],
    [1, "s", 1, 192, 62, 1],
    [1, "s", 1, 216, 62, 1],
    [1, "s", 1, 204, 65, 1],
    [1, "s", 1, 217, 79, 1],
    [1, "s", 1, 206, 86, 1],
    [1, "la", 3, 211, 69, 1],
    [1, "la", 4, 215, 69, 1],
    [1, "la", 5, 201, 81, 1],
    [1, "la", 1, 207, 83, 1],
    [1, "la", 3, 173, 32, 1],
    [1, "la", 2, 181, 45, 1],
    [1, "la", 1, 178, 38, 1],
    [1, "la", 1, 213, 69, 1],
    [1, "la", 5, 214, 69, 1],
    [1, "la", 4, 216, 68, 1],
    [1, "la", 0, 191, 78, 1],
    [1, "la", 3, 191, 80, 1],
    [1, "la", 3, 189, 79, 1],
    [1, "g", 2, 150, 29, 1],
    [1, "g", 2, 154, 67, 1],
    [1, "g", 2, 202, 94, 1],
    [1, "g", 2, 155, 90, 1],
    [1, "s", 2, 215, 80, 1],
    [1, "s", 2, 204, 62, 1],
    [1, "s", 2, 218, 60, 1],
    [1, "s", 2, 194, 62, 1],
    [1, "s", 0, 216, 86, 1],
    [1, "s", 0, 211, 93, 1],
    [1, "la", 0, 216, 92, 1],
    [1, "la", 0, 151, 96, 1],
    [1, "la", 1, 155, 95, 1],
    [1, "la", 4, 214, 88, 1],
    [1, "s", 0, 205, 99, 1],
    [1, "s", 1, 217, 88, 1],
    [1, "s", 1, 213, 94, 1],
    [1, "s", 1, 202, 97, 1],
    [1, "s", 0, 199, 85, 1],
    [1, "s", 0, 190, 93, 1],
    [1, "s", 1, 199, 87, 1],
    [1, "s", 1, 192, 97, 1],
    [1, "la", 3, 196, 92, 1],
    [1, "la", 1, 199, 91, 1],
    [1, "la", 1, 220, 91, 1],
    [1, "la", 0, 219, 77, 1],
    [1, "la", 0, 200, 59, 1],
    [1, "la", 3, 188, 87, 1],
    [1, "la", 0, 183, 94, 1],
    [1, "la", 1, 187, 83, 1],
    [1, "la", 1, 175, 82, 1],
    [1, "la", 1, 172, 94, 1],
    [1, "la", 2, 179, 78, 1],
    [1, "la", 0, 166, 87, 1],
    [1, "la", 3, 159, 80, 1],
    [1, "la", 3, 167, 15, 1],
    [1, "la", 1, 164, 17, 1],
    [1, "la", 1, 172, 28, 1],
    [1, "la", 3, 153, 24, 1],
    [1, "la", 4, 164, 91, 1],
    [1, "la", 4, 156, 82, 1],
    [1, "la", 4, 149, 90, 1],
    [1, "s", 0, 178, 85, 1],
    [1, "s", 1, 180, 85, 1],
    [1, "s", 0, 163, 96, 1],
    [1, "s", 0, 159, 86, 1],
    [1, "s", 0, 185, 78, 1],
    [1, "s", 1, 194, 75, 1],
    [1, "s", 2, 195, 76, 1],
    [1, "s", 2, 181, 78, 1],
    [1, "s", 2, 161, 87, 1],
    [1, "s", 2, 166, 97, 1],
    [1, "s", 2, 177, 97, 1],
    [1, "s", 0, 149, 85, 1],
    [1, "s", 1, 151, 83, 1],
    [1, "s", 1, 175, 74, 1],
    [1, "s", 0, 174, 72, 1],
    [1, "la", 3, 168, 71, 1],
    [1, "la", 3, 180, 60, 1],
    [1, "s", 0, 156, 63, 1],
    [1, "s", 0, 151, 47, 1],
    [1, "s", 1, 158, 64, 1],
    [1, "s", 1, 161, 75, 1],
    [1, "s", 1, 162, 51, 1],
    [1, "s", 1, 175, 45, 1],
    [1, "s", 1, 152, 47, 1],
    [1, "s", 1, 159, 33, 1],
    [1, "s", 1, 152, 18, 1],
    [1, "s", 0, 151, 13, 1],
    [1, "s", 0, 166, 22, 1],
    [1, "s", 0, 170, 63, 1],
    [1, "s", 2, 172, 62, 1],
    [1, "s", 2, 155, 61, 1],
    [1, "s", 2, 167, 51, 1],
    [1, "s", 2, 150, 52, 1],
    [1, "la", 4, 178, 69, 1],
    [1, "la", 4, 177, 68, 1],
    [1, "la", 3, 176, 67, 1],
    [1, "la", 0, 174, 67, 1],
    [1, "la", 1, 172, 67, 1],
    [1, "la", 4, 171, 67, 1],
    [1, "la", 4, 170, 66, 1],
    [1, "la", 4, 169, 66, 1],
    [1, "la", 1, 168, 66, 1],
    [1, "la", 4, 167, 67, 1],
    [1, "la", 1, 166, 67, 1],
    [1, "la", 4, 165, 68, 1],
    [1, "la", 5, 164, 68, 1],
    [1, "la", 2, 163, 68, 1],
    [1, "la", 5, 162, 68, 1],
    [1, "la", 2, 161, 68, 1],
    [1, "la", 3, 153, 72, 1],
    [1, "la", 3, 163, 60, 1],
    [1, "la", 3, 164, 42, 1],
    [1, "la", 0, 155, 51, 1],
    [1, "la", 1, 168, 42, 1],
    [1, "la", 4, 158, 48, 1],
    [1, "la", 4, 178, 57, 1],
    [1, "la", 4, 151, 69, 1],
    [1, "la", 2, 170, 74, 1],
    [1, "la", 2, 160, 84, 1],
    [1, "la", 2, 174, 92, 1],
    [1, "la", 2, 188, 90, 1],
    [1, "la", 2, 209, 84, 1],
    [1, "la", 2, 206, 93, 1],
    [1, "la", 5, 156, 70, 1],
    [1, "la", 5, 165, 57, 1],
    [1, "la", 5, 182, 58, 1],
    [1, "la", 5, 166, 44, 1],
    [1, "la", 1, 163, 39, 1],
    [1, "la", 1, 152, 53, 1],
    [1, "la", 1, 152, 37, 1],
    [1, "la", 2, 163, 13, 1],
    [1, "de", 12, 219, 12, 0],
    [1, "de", 14, 203, 13, 0],
    [1, "de", 15, 220, 19, 0],
    [1, "de", 12, 223, 15, 0],
    [1, "de", 12, 213, 10, 0],
    [1, "de", 37, 217, 19, 0],
    [1, "de", 38, 220, 14, 0],
    [1, "de", 38, 215, 10, 0],
    [1, "de", 40, 214, 14, 0],
    [1, "de", 40, 222, 16, 0],
    [1, "de", 40, 209, 18, 0],
    [1, "de", 37, 212, 18, 0],
    [1, "de", 38, 215, 26, 0],
    [1, "de", 37, 222, 25, 0],
    [1, "de", 40, 221, 29, 0],
    [1, "de", 12, 220, 27, 0],
    [1, "de", 13, 213, 27, 0],
    [1, "de", 14, 215, 30, 0],
    [1, "de", 15, 219, 33, 0],
    [1, "de", 38, 220, 31, 0],
    [1, "de", 38, 217, 35, 0],
    [1, "de", 40, 221, 34, 0],
    [1, "de", 39, 215, 32, 0],
    [1, "de", 37, 211, 35, 0],
    [1, "de", 12, 223, 38, 0],
    [1, "de", 13, 213, 38, 0],
    [1, "de", 14, 222, 44, 0],
    [1, "de", 15, 208, 33, 0],
    [1, "de", 15, 206, 23, 0],
    [1, "de", 13, 205, 28, 0],
    [1, "de", 14, 211, 23, 0],
    [1, "de", 14, 201, 20, 0],
    [1, "de", 15, 198, 9, 0],
    [1, "de", 15, 199, 16, 0],
    [1, "de", 12, 194, 15, 0],
    [1, "de", 12, 197, 23, 0],
    [1, "de", 37, 205, 13, 0],
    [1, "de", 39, 204, 9, 0],
    [1, "de", 40, 196, 12, 0],
    [1, "de", 40, 198, 18, 0],
    [1, "de", 37, 192, 11, 0],
    [1, "de", 37, 199, 24, 0],
    [1, "de", 37, 209, 24, 0],
    [1, "de", 39, 209, 30, 0],
    [1, "de", 39, 204, 31, 0],
    [1, "de", 39, 192, 24, 0],
    [1, "de", 40, 187, 23, 0],
    [1, "de", 38, 187, 18, 0],
    [1, "de", 39, 192, 18, 0],
    [1, "de", 37, 185, 15, 0],
    [1, "de", 12, 188, 15, 0],
    [1, "de", 13, 185, 13, 0],
    [1, "de", 14, 189, 9, 0],
    [1, "de", 15, 187, 22, 0],
    [1, "de", 15, 180, 9, 0],
    [1, "de", 12, 177, 14, 0],
    [1, "de", 14, 173, 9, 0],
    [1, "de", 14, 171, 15, 0],
    [1, "de", 40, 182, 9, 0],
    [1, "de", 39, 179, 13, 0],
    [1, "de", 39, 175, 9, 0],
    [1, "de", 40, 173, 14, 0],
    [1, "de", 37, 169, 11, 0],
    [1, "de", 37, 163, 10, 0],
    [1, "de", 38, 164, 15, 0],
    [1, "de", 39, 170, 20, 0],
    [1, "de", 40, 160, 17, 0],
    [1, "de", 40, 154, 10, 0],
    [1, "de", 40, 165, 23, 0],
    [1, "de", 40, 150, 19, 0],
    [1, "de", 37, 155, 16, 0],
    [1, "de", 39, 146, 10, 0],
    [1, "de", 12, 159, 12, 0],
    [1, "de", 13, 151, 9, 0],
    [1, "de", 14, 150, 14, 0],
    [1, "de", 15, 153, 19, 0],
    [1, "de", 13, 161, 25, 0],
    [1, "de", 14, 169, 25, 0],
    [1, "de", 15, 176, 25, 0],
    [1, "de", 12, 180, 29, 0],
    [1, "de", 12, 188, 31, 0],
    [1, "de", 14, 181, 36, 0],
    [1, "de", 37, 186, 33, 0],
    [1, "de", 38, 183, 26, 0],
    [1, "de", 39, 177, 21, 0],
    [1, "de", 40, 175, 31, 0],
    [1, "de", 37, 176, 39, 0],
    [1, "de", 37, 168, 34, 0],
    [1, "de", 38, 162, 32, 0],
    [1, "de", 38, 168, 45, 0],
    [1, "de", 38, 173, 45, 0],
    [1, "de", 39, 160, 35, 0],
    [1, "de", 40, 161, 42, 0],
    [1, "de", 40, 170, 39, 0],
    [1, "de", 40, 181, 43, 0],
    [1, "de", 40, 156, 26, 0],
    [1, "de", 40, 150, 32, 0],
    [1, "de", 37, 159, 26, 0],
    [1, "de", 37, 155, 40, 0],
    [1, "de", 37, 154, 45, 0],
    [1, "de", 39, 149, 45, 0],
    [1, "de", 40, 150, 50, 0],
    [1, "de", 40, 160, 52, 0],
    [1, "de", 37, 164, 52, 0],
    [1, "de", 38, 168, 50, 0],
    [1, "de", 12, 176, 45, 0],
    [1, "de", 12, 167, 32, 0],
    [1, "de", 13, 158, 32, 0],
    [1, "de", 14, 149, 28, 0],
    [1, "de", 15, 163, 30, 0],
    [1, "de", 14, 158, 39, 0],
    [1, "de", 12, 171, 43, 0],
    [1, "de", 12, 174, 36, 0],
    [1, "de", 12, 151, 43, 0],
    [1, "de", 13, 152, 48, 0],
    [1, "de", 14, 164, 49, 0],
    [1, "de", 15, 149, 52, 0],
    [1, "de", 12, 174, 49, 0],
    [1, "de", 13, 183, 51, 0],
    [1, "de", 14, 186, 48, 0],
    [1, "de", 37, 182, 48, 0],
    [1, "de", 38, 187, 52, 0],
    [1, "de", 39, 188, 43, 0],
    [1, "de", 37, 200, 38, 0],
    [1, "de", 40, 194, 37, 0],
    [1, "de", 39, 199, 44, 0],
    [1, "de", 38, 200, 49, 0],
    [1, "de", 37, 196, 54, 0],
    [1, "de", 12, 194, 40, 0],
    [1, "de", 13, 202, 45, 0],
    [1, "de", 14, 198, 47, 0],
    [1, "de", 15, 198, 55, 0],
    [1, "de", 15, 212, 54, 0],
    [1, "de", 15, 216, 63, 0],
    [1, "de", 14, 209, 62, 0],
    [1, "de", 12, 219, 60, 0],
    [1, "de", 12, 206, 56, 0],
    [1, "de", 12, 218, 72, 0],
    [1, "de", 12, 223, 67, 0],
    [1, "de", 12, 205, 64, 0],
    [1, "de", 12, 193, 63, 0],
    [1, "de", 14, 216, 80, 0],
    [1, "de", 14, 222, 87, 0],
    [1, "de", 38, 210, 53, 0],
    [1, "de", 37, 210, 47, 0],
    [1, "de", 37, 200, 63, 0],
    [1, "de", 37, 218, 62, 0],
    [1, "de", 37, 222, 60, 0],
    [1, "de", 37, 207, 70, 0],
    [1, "de", 38, 203, 68, 0],
    [1, "de", 38, 195, 66, 0],
    [1, "de", 38, 218, 55, 0],
    [1, "de", 38, 212, 61, 0],
    [1, "de", 38, 222, 70, 0],
    [1, "de", 38, 218, 70, 0],
    [1, "de", 40, 222, 81, 0],
    [1, "de", 38, 214, 79, 0],
    [1, "de", 39, 213, 83, 0],
    [1, "de", 39, 207, 76, 0],
    [1, "de", 39, 208, 86, 0],
    [1, "de", 39, 218, 87, 0],
    [1, "de", 39, 222, 93, 0],
    [1, "de", 39, 216, 96, 0],
    [1, "de", 39, 209, 94, 0],
    [1, "de", 39, 201, 87, 0],
    [1, "de", 39, 198, 82, 0],
    [1, "de", 39, 207, 99, 0],
    [1, "de", 39, 200, 97, 0],
    [1, "de", 39, 202, 92, 0],
    [1, "de", 37, 194, 97, 0],
    [1, "de", 39, 204, 88, 0],
    [1, "de", 39, 189, 90, 0],
    [1, "de", 39, 194, 81, 0],
    [1, "de", 39, 188, 98, 0],
    [1, "de", 37, 183, 91, 0],
    [1, "de", 37, 186, 80, 0],
    [1, "de", 37, 191, 72, 0],
    [1, "de", 38, 184, 77, 0],
    [1, "de", 38, 180, 80, 0],
    [1, "de", 39, 173, 75, 0],
    [1, "de", 40, 178, 87, 0],
    [1, "de", 40, 174, 94, 0],
    [1, "de", 40, 192, 93, 0],
    [1, "de", 40, 165, 92, 0],
    [1, "de", 37, 160, 89, 0],
    [1, "de", 38, 161, 85, 0],
    [1, "de", 38, 164, 98, 0],
    [1, "de", 38, 151, 99, 0],
    [1, "de", 38, 151, 85, 0],
    [1, "de", 40, 148, 83, 0],
    [1, "de", 40, 160, 77, 0],
    [1, "de", 40, 167, 77, 0],
    [1, "de", 40, 153, 69, 0],
    [1, "de", 40, 149, 74, 0],
    [1, "de", 37, 161, 64, 0],
    [1, "de", 37, 154, 61, 0],
    [1, "de", 39, 157, 55, 0],
    [1, "de", 39, 174, 64, 0],
    [1, "de", 39, 175, 56, 0],
    [1, "de", 39, 149, 67, 0],
    [1, "de", 12, 218, 96, 0],
    [1, "de", 13, 212, 95, 0],
    [1, "de", 14, 204, 85, 0],
    [1, "de", 15, 215, 85, 0],
    [1, "de", 15, 197, 97, 0],
    [1, "de", 12, 198, 87, 0],
    [1, "de", 14, 196, 77, 0],
    [1, "de", 13, 194, 86, 0],
    [1, "de", 15, 181, 84, 0],
    [1, "de", 14, 184, 79, 0],
    [1, "de", 14, 188, 93, 0],
    [1, "de", 13, 180, 87, 0],
    [1, "de", 13, 178, 96, 0],
    [1, "de", 13, 163, 95, 0],
    [1, "de", 15, 172, 88, 0],
    [1, "de", 15, 176, 75, 0],
    [1, "de", 14, 172, 72, 0],
    [1, "de", 14, 169, 82, 0],
    [1, "de", 13, 164, 78, 0],
    [1, "de", 13, 158, 87, 0],
    [1, "de", 13, 149, 86, 0],
    [1, "de", 15, 154, 91, 0],
    [1, "de", 15, 160, 74, 0],
    [1, "de", 14, 152, 76, 0],
    [1, "de", 14, 158, 63, 0],
    [1, "de", 14, 150, 60, 0],
    [1, "de", 12, 169, 59, 0],
    [1, "de", 13, 173, 61, 0],
    [1, "cs", 1, 143, 104, 1],
    [1, "cs", 0, 141, 102, 1],
    [1, "cs", 3, 138, 102, 1],
    [1, "cs", 2, 139, 102, 1],
    [1, "cs", 2, 140, 102, 1],
    [1, "cs", 3, 143, 107, 1],
    [1, "cs", 0, 143, 106, 1],
    [1, "cs", 2, 143, 105, 1],
    [1, "cs", 2, 142, 103, 1],
    [1, "cs", 0, 142, 104, 1],
    [1, "cs", 2, 141, 103, 1],
    [1, "cs", 3, 142, 105, 1],
    [1, "cs", 3, 140, 103, 1],
    [1, "cs", 3, 141, 104, 1],
    [1, "la", 4, 151, 23, 1],
    [1, "la", 4, 150, 22, 1],
    [1, "la", 1, 149, 21, 1],
    [1, "la", 4, 148, 21, 1],
    [1, "la", 2, 147, 20, 1],
    [1, "la", 4, 147, 19, 1],
    [1, "la", 5, 147, 18, 1],
    [1, "la", 1, 147, 17, 1],
    [1, "la", 3, 144, 9, 1],
    [1, "la", 5, 147, 16, 1],
    [1, "la", 2, 147, 15, 1],
    [1, "la", 4, 147, 14, 1],
    [1, "la", 4, 145, 11, 1],
    [1, "la", 5, 145, 12, 1],
    [1, "la", 1, 146, 13, 1],
    [1, "la", 2, 145, 13, 1],
    [1, "la", 3, 155, 25, 1],
    [1, "la", 0, 155, 24, 1],
    [1, "la", 3, 153, 26, 1],
    [1, "cs", 0, 151, 24, 1],
    [1, "cs", 0, 153, 22, 1],
    [1, "cs", 3, 152, 22, 1],
    [1, "cs", 3, 154, 22, 1],
    [1, "cs", 1, 157, 26, 1],
    [1, "cs", 2, 157, 24, 1],
    [1, "cs", 2, 156, 26, 1],
    [1, "cs", 2, 154, 28, 1],
    [1, "cs", 2, 151, 26, 1],
    [1, "cs", 2, 152, 25, 1],
    [1, "cs", 2, 151, 25, 1],
    [1, "cs", 2, 156, 27, 1],
    [1, "cs", 2, 157, 23, 1],
    [1, "cs", 2, 157, 22, 1],
    [1, "cs", 3, 150, 24, 1],
    [1, "cs", 3, 150, 23, 1],
    [1, "de", 38, 155, 29, 0],
    [1, "de", 12, 157, 27, 0],
    [1, "de", 14, 153, 29, 0],
    [1, "de", 15, 158, 23, 0],
    [1, "de", 13, 156, 21, 0],
    [1, "de", 13, 147, 36, 0],
    [1, "de", 13, 161, 56, 0],
    [1, "de", 13, 147, 79, 0],
    [1, "de", 12, 157, 99, 0],
    [1, "de", 12, 172, 99, 0],
    [1, "la", 3, 143, 102, 1],
    [1, "la", 4, 149, 96, 1],
    [1, "la", 4, 145, 102, 1],
    [1, "la", 1, 148, 97, 1],
    [1, "la", 5, 148, 98, 1],
    [1, "cs", 3, 144, 104, 1],
    [1, "cs", 3, 144, 103, 1],
    [1, "cs", 3, 145, 103, 1],
    [1, "cs", 3, 145, 104, 1],
    [1, "cs", 3, 142, 101, 1],
    [1, "cs", 3, 143, 100, 1],
    [1, "cs", 3, 141, 101, 1],
    [1, "cs", 3, 142, 100, 1],
    [1, "cs", 0, 141, 100, 1],
    [1, "cs", 2, 140, 101, 1],
    [1, "cs", 2, 144, 105, 1],
    [1, "cs", 3, 146, 103, 1],
    [1, "cs", 3, 146, 102, 1],
    [1, "cs", 3, 150, 95, 1],
    [1, "cs", 0, 150, 97, 1],
    [1, "cs", 2, 151, 98, 1],
    [1, "cs", 0, 153, 97, 1],
    [1, "cs", 3, 153, 96, 1],
    [1, "cs", 2, 149, 95, 1],
    [1, "s", 0, 213, 127, 1],
    [1, "plm", 1, 214, 131, 0],
    [1, "plm", 1, 207, 128, 0],
    [1, "plm", 0, 208, 127, 0],
    [1, "s", 1, 207, 132, 1],
    [1, "s", 2, 208, 133, 1],
    [1, "plm", 0, 217, 132, 0],
    [1, "plm", 2, 186, 158, 0],
    [1, "plm", 0, 184, 160, 0],
    [1, "s", 1, 183, 156, 1],
    [1, "s", 2, 186, 159, 1],
    [1, "p", 0, 182, 157, 1],
    [1, "p", 0, 114, 205, 1],
    [1, "plm", 1, 117, 204, 0],
    [1, "plm", 0, 117, 205, 0],
    [1, "plm", 2, 112, 204, 0],
    [1, "s", 2, 114, 207, 1],
    [1, "s", 2, 115, 204, 1],
    [1, "plm", 2, 122, 151, 0],
    [1, "plm", 1, 123, 150, 0],
    [1, "plm", 1, 117, 151, 0],
    [1, "s", 0, 118, 150, 1],
    [1, "s", 1, 122, 152, 1],
    [1, "plm", 2, 156, 130, 0],
    [1, "plm", 1, 154, 127, 0],
    [1, "s", 0, 153, 128, 1],
    [1, "s", 2, 152, 130, 1],
    [1, "p", 0, 123, 65, 1],
    [1, "plm", 2, 125, 62, 0],
    [1, "plm", 1, 124, 62, 0],
    [1, "plm", 0, 120, 65, 0],
    [1, "s", 1, 125, 63, 1],
    [1, "s", 1, 121, 64, 1],
    [1, "s", 2, 122, 62, 1],
    [1, "cs", 0, 140, 106, 1],
    [1, "cs", 2, 144, 106, 1],
    [1, "cs", 2, 145, 105, 1],
    [1, "cs", 2, 144, 107, 1],
    [1, "cs", 2, 141, 106, 1],
    [1, "cs", 2, 141, 105, 1],
    [1, "cs", 2, 140, 105, 1],
    [1, "cs", 2, 140, 104, 1],
    [1, "cs", 1, 138, 103, 1],
    [1, "cs", 0, 139, 104, 1],
    [1, "cs", 2, 139, 103, 1],
    [1, "cs", 2, 139, 105, 1],
    [1, "cs", 2, 142, 106, 1],
    [1, "cs", 2, 142, 107, 1],
    [1, "cs", 2, 139, 101, 1],
    [1, "de", 19, 27, 264, 0],
    [1, "la", 4, 147, 99, 1],
    [1, "la", 1, 146, 100, 1],
    [1, "la", 4, 145, 101, 1],
    [1, "cs", 1, 215, 47, 1],
    [1, "cs", 2, 216, 47, 1],
    [1, "cs", 2, 215, 48, 1],
    [1, "la", 4, 214, 45, 1],
    [1, "la", 4, 215, 45, 1],
    [1, "la", 0, 216, 46, 1],
    [1, "la", 4, 216, 48, 1],
    [1, "la", 4, 216, 49, 1],
    [1, "la", 4, 217, 50, 1],
    [1, "la", 3, 214, 49, 1],
    [1, "la", 4, 211, 45, 1],
    [1, "la", 3, 213, 47, 1],
    [1, "cs", 2, 224, 48, 1],
    [1, "plm", 2, 111, 243, 0],
    [1, "plm", 1, 108, 246, 0],
    [1, "s", 1, 110, 243, 1],
    [1, "s", 0, 108, 245, 1],
    [1, "s", 0, 121, 276, 1],
    [1, "plm", 2, 122, 277, 0],
    [1, "plm", 2, 117, 276, 0],
    [1, "plm", 1, 118, 277, 0],
    [1, "s", 1, 118, 278, 1],
    [1, "cs", 2, 66, 16, 1],
    [1, "cs", 3, 67, 16, 1],
    [1, "cs", 0, 67, 17, 1],
    [1, "cs", 2, 66, 17, 1],
    [1, "cs", 3, 66, 18, 1],
    [1, "cs", 3, 68, 17, 1],
    [1, "cs", 0, 36, 16, 1],
    [1, "cs", 2, 36, 17, 1],
    [1, "cs", 2, 36, 18, 1],
    [1, "cs", 3, 35, 17, 1],
    [1, "cs", 3, 36, 19, 1],
    [1, "cs", 3, 35, 18, 1],
    [1, "cs", 2, 66, 30, 1],
    [1, "cs", 2, 66, 23, 1],
    [1, "cs", 3, 66, 22, 1],
    [1, "cs", 3, 66, 31, 1],
    [1, "cs", 2, 36, 30, 1],
    [1, "cs", 2, 36, 23, 1],
    [1, "cs", 1, 36, 22, 1],
    [1, "cs", 2, 36, 31, 1],
    [1, "cs", 3, 42, 13, 1],
    [1, "cs", 0, 43, 13, 1],
    [1, "cs", 2, 44, 13, 1],
    [1, "cs", 3, 42, 16, 1],
    [1, "cs", 3, 41, 16, 1],
    [1, "cs", 3, 40, 16, 1],
    [1, "cs", 0, 42, 19, 1],
    [1, "cs", 3, 43, 19, 1],
    [1, "cs", 3, 44, 19, 1],
    [1, "cs", 3, 45, 19, 1],
    [1, "cs", 2, 46, 19, 1],
    [1, "cs", 0, 43, 22, 1],
    [1, "cs", 2, 42, 22, 1],
    [1, "cs", 1, 41, 22, 1],
    [1, "cs", 0, 40, 22, 1],
    [1, "cs", 3, 39, 17, 1],
    [1, "cs", 1, 44, 26, 1],
    [1, "cs", 2, 45, 26, 1],
    [1, "cs", 3, 46, 26, 1],
    [1, "cs", 0, 47, 26, 1],
    [1, "cs", 2, 48, 26, 1],
    [1, "cs", 3, 47, 25, 1],
    [1, "cs", 3, 43, 27, 1],
    [1, "cs", 1, 49, 32, 1],
    [1, "cs", 2, 50, 32, 1],
    [1, "cs", 2, 51, 32, 1],
    [1, "cs", 2, 52, 32, 1],
    [1, "d", 0, 51, 29, 1],
    [1, "d", 1, 53, 29, 1],
    [1, "d", 1, 49, 29, 1],
    [1, "cs", 3, 55, 31, 1],
    [1, "cs", 3, 54, 32, 1],
    [1, "cs", 3, 47, 31, 1],
    [1, "cs", 3, 48, 32, 1],
    [1, "cs", 0, 51, 33, 1],
    [1, "cs", 2, 52, 33, 1],
    [1, "cs", 2, 50, 33, 1],
    [1, "cs", 3, 56, 30, 1],
    [1, "cs", 3, 56, 31, 1],
    [1, "cs", 3, 46, 30, 1],
    [1, "cs", 3, 46, 31, 1],
    [1, "cs", 1, 53, 33, 1],
    [1, "cs", 2, 49, 33, 1],
    [1, "cs", 2, 53, 32, 1],
    [1, "cs", 0, 55, 32, 1],
    [1, "cs", 0, 47, 32, 1],
    [1, "d", 1, 54, 35, 1],
    [1, "fo", 2, 35, 15, 0],
    [1, "fo", 2, 36, 12, 0],
    [1, "fo", 2, 67, 15, 0],
    [1, "cs", 3, 60, 13, 1],
    [1, "cs", 2, 59, 13, 1],
    [1, "cs", 1, 58, 13, 1],
    [1, "cs", 3, 62, 16, 1],
    [1, "cs", 0, 61, 16, 1],
    [1, "cs", 3, 60, 16, 1],
    [1, "cs", 3, 63, 17, 1],
    [1, "cs", 2, 60, 19, 1],
    [1, "cs", 1, 59, 19, 1],
    [1, "cs", 3, 58, 19, 1],
    [1, "cs", 2, 57, 19, 1],
    [1, "cs", 2, 56, 19, 1],
    [1, "cs", 0, 55, 18, 1],
    [1, "cs", 2, 55, 17, 1],
    [1, "cs", 2, 63, 23, 1],
    [1, "cs", 0, 62, 22, 1],
    [1, "cs", 2, 61, 22, 1],
    [1, "cs", 1, 60, 22, 1],
    [1, "cs", 0, 59, 22, 1],
    [1, "cs", 2, 54, 26, 1],
    [1, "cs", 2, 55, 26, 1],
    [1, "cs", 2, 56, 26, 1],
    [1, "cs", 1, 57, 26, 1],
    [1, "cs", 2, 58, 26, 1],
    [1, "cs", 2, 59, 27, 1],
    [1, "cs", 2, 68, 16, 1],
    [1, "cs", 2, 68, 15, 1],
    [1, "cs", 3, 69, 15, 1],
    [1, "cs", 3, 70, 15, 1],
    [1, "cs", 3, 70, 14, 1],
    [1, "cs", 1, 69, 14, 1],
    [1, "cs", 1, 69, 16, 1],
    [1, "cs", 2, 71, 13, 1],
    [1, "cs", 2, 71, 14, 1],
    [1, "cs", 3, 72, 13, 1],
    [1, "cs", 3, 70, 8, 1],
    [1, "cs", 3, 71, 8, 1],
    [1, "cs", 2, 72, 8, 1],
    [1, "cs", 0, 73, 8, 1],
    [1, "cs", 3, 74, 9, 1],
    [1, "cs", 3, 74, 8, 1],
    [1, "cs", 0, 75, 8, 1],
    [1, "cs", 3, 76, 8, 1],
    [1, "cs", 3, 75, 9, 1],
    [1, "cs", 3, 75, 10, 1],
    [1, "cs", 0, 76, 10, 1],
    [1, "cs", 0, 76, 16, 1],
    [1, "cs", 3, 76, 15, 1],
    [1, "cs", 3, 75, 16, 1],
    [1, "cs", 2, 77, 11, 1],
    [1, "cs", 2, 77, 14, 1],
    [1, "cs", 3, 77, 12, 1],
    [1, "cs", 3, 77, 13, 1],
    [1, "cs", 3, 77, 15, 1],
    [1, "cs", 0, 74, 18, 1],
    [1, "cs", 1, 75, 17, 1],
    [1, "cs", 2, 74, 17, 1],
    [1, "cs", 3, 73, 19, 1],
    [1, "cs", 3, 67, 23, 1],
    [1, "cs", 0, 68, 23, 1],
    [1, "cs", 0, 72, 20, 1],
    [1, "cs", 2, 73, 20, 1],
    [1, "cs", 2, 74, 19, 1],
    [1, "cs", 2, 74, 36, 1],
    [1, "cs", 2, 77, 27, 1],
    [1, "cs", 2, 76, 26, 1],
    [1, "cs", 2, 75, 26, 1],
    [1, "cs", 0, 74, 26, 1],
    [1, "cs", 2, 75, 25, 1],
    [1, "cs", 0, 76, 25, 1],
    [1, "cs", 1, 77, 23, 1],
    [1, "cs", 2, 77, 16, 1],
    [1, "cs", 2, 76, 17, 1],
    [1, "cs", 2, 76, 24, 1],
    [1, "cs", 2, 77, 24, 1],
    [1, "cs", 2, 77, 25, 1],
    [1, "cs", 2, 77, 26, 1],
    [1, "cs", 1, 75, 27, 1],
    [1, "cs", 3, 76, 27, 1],
    [1, "cs", 2, 67, 24, 1],
    [1, "cs", 2, 66, 24, 1],
    [1, "cs", 2, 73, 26, 1],
    [1, "cs", 2, 74, 27, 1],
    [1, "cs", 2, 74, 25, 1],
    [1, "cs", 2, 66, 19, 1],
    [1, "cs", 2, 66, 20, 1],
    [1, "cs", 2, 66, 21, 1],
    [1, "cs", 2, 67, 18, 1],
    [1, "cs", 2, 67, 22, 1],
    [1, "cs", 0, 77, 36, 1],
    [1, "cs", 0, 77, 32, 1],
    [1, "cs", 1, 75, 35, 1],
    [1, "cs", 2, 75, 36, 1],
    [1, "cs", 2, 76, 36, 1],
    [1, "cs", 2, 77, 35, 1],
    [1, "cs", 2, 77, 34, 1],
    [1, "cs", 2, 76, 35, 1],
    [1, "cs", 2, 77, 33, 1],
    [1, "cs", 2, 77, 31, 1],
    [1, "cs", 0, 77, 29, 1],
    [1, "cs", 0, 71, 32, 1],
    [1, "cs", 0, 76, 34, 1],
    [1, "cs", 2, 77, 30, 1],
    [1, "cs", 2, 77, 28, 1],
    [1, "cs", 2, 76, 28, 1],
    [1, "cs", 2, 75, 28, 1],
    [1, "cs", 2, 76, 29, 1],
    [1, "cs", 2, 76, 33, 1],
    [1, "cs", 2, 70, 32, 1],
    [1, "cs", 2, 69, 31, 1],
    [1, "cs", 0, 68, 31, 1],
    [1, "cs", 2, 67, 31, 1],
    [1, "cs", 2, 67, 30, 1],
    [1, "cs", 2, 69, 32, 1],
    [1, "cs", 1, 67, 32, 1],
    [1, "cs", 2, 68, 32, 1],
    [1, "cs", 2, 66, 32, 1],
    [1, "cs", 2, 66, 33, 1],
    [1, "cs", 2, 67, 33, 1],
    [1, "cs", 2, 70, 33, 1],
    [1, "cs", 2, 69, 33, 1],
    [1, "cs", 2, 68, 33, 1],
    [1, "cs", 0, 68, 34, 1],
    [1, "cs", 1, 66, 35, 1],
    [1, "cs", 2, 67, 34, 1],
    [1, "cs", 2, 66, 34, 1],
    [1, "cs", 2, 65, 35, 1],
    [1, "cs", 2, 64, 36, 1],
    [1, "cs", 2, 65, 36, 1],
    [1, "cs", 2, 67, 35, 1],
    [1, "cs", 2, 66, 36, 1],
    [1, "cs", 2, 69, 34, 1],
    [1, "cs", 2, 68, 35, 1],
    [1, "cs", 2, 76, 9, 1],
    [1, "cs", 2, 77, 9, 1],
    [1, "cs", 2, 77, 8, 1],
    [1, "cs", 2, 77, 10, 1],
    [1, "cs", 2, 78, 8, 1],
    [1, "cs", 2, 78, 9, 1],
    [1, "cs", 2, 78, 10, 1],
    [1, "cs", 2, 78, 11, 1],
    [1, "cs", 2, 78, 12, 1],
    [1, "cs", 2, 78, 13, 1],
    [1, "cs", 0, 79, 9, 1],
    [1, "cs", 1, 79, 11, 1],
    [1, "cs", 3, 79, 8, 1],
    [1, "cs", 3, 79, 10, 1],
    [1, "cs", 3, 79, 12, 1],
    [1, "cs", 3, 80, 8, 1],
    [1, "cs", 1, 80, 10, 1],
    [1, "cs", 2, 80, 9, 1],
    [1, "cs", 2, 80, 11, 1],
    [1, "cs", 2, 81, 8, 1],
    [1, "cs", 2, 81, 9, 1],
    [1, "cs", 2, 81, 10, 1],
    [1, "cs", 2, 78, 14, 1],
    [1, "cs", 2, 79, 13, 1],
    [1, "cs", 2, 78, 15, 1],
    [1, "cs", 2, 80, 12, 1],
    [1, "cs", 0, 79, 14, 1],
    [1, "cs", 0, 82, 9, 1],
    [1, "cs", 2, 82, 8, 1],
    [1, "cs", 2, 82, 10, 1],
    [1, "cs", 2, 81, 11, 1],
    [1, "cs", 3, 80, 13, 1],
    [1, "cs", 1, 78, 30, 1],
    [1, "cs", 1, 78, 34, 1],
    [1, "cs", 1, 78, 27, 1],
    [1, "cs", 0, 78, 25, 1],
    [1, "cs", 0, 79, 29, 1],
    [1, "cs", 0, 79, 32, 1],
    [1, "cs", 0, 79, 35, 1],
    [1, "cs", 2, 78, 35, 1],
    [1, "cs", 2, 78, 36, 1],
    [1, "cs", 2, 79, 34, 1],
    [1, "cs", 2, 78, 33, 1],
    [1, "cs", 2, 79, 33, 1],
    [1, "cs", 2, 78, 32, 1],
    [1, "cs", 2, 78, 31, 1],
    [1, "cs", 2, 79, 31, 1],
    [1, "cs", 2, 79, 30, 1],
    [1, "cs", 2, 78, 29, 1],
    [1, "cs", 2, 78, 28, 1],
    [1, "cs", 2, 79, 28, 1],
    [1, "cs", 2, 79, 27, 1],
    [1, "cs", 2, 78, 26, 1],
    [1, "cs", 2, 79, 26, 1],
    [1, "cs", 2, 78, 24, 1],
    [1, "cs", 2, 80, 34, 1],
    [1, "cs", 2, 80, 33, 1],
    [1, "cs", 2, 80, 31, 1],
    [1, "cs", 2, 80, 30, 1],
    [1, "cs", 2, 80, 32, 1],
    [1, "cs", 2, 80, 29, 1],
    [1, "cs", 2, 80, 28, 1],
    [1, "cs", 2, 80, 27, 1],
    [1, "cs", 0, 81, 30, 1],
    [1, "cs", 1, 81, 32, 1],
    [1, "cs", 1, 81, 28, 1],
    [1, "cs", 2, 81, 29, 1],
    [1, "cs", 2, 81, 31, 1],
    [1, "cs", 2, 81, 33, 1],
    [1, "cs", 2, 82, 30, 1],
    [1, "cs", 2, 82, 31, 1],
    [1, "cs", 2, 82, 32, 1],
    [1, "cs", 0, 37, 36, 1],
    [1, "cs", 2, 38, 36, 1],
    [1, "cs", 2, 37, 35, 1],
    [1, "cs", 2, 36, 36, 1],
    [1, "cs", 2, 34, 35, 1],
    [1, "cs", 2, 35, 35, 1],
    [1, "cs", 2, 36, 35, 1],
    [1, "cs", 0, 33, 34, 1],
    [1, "cs", 1, 35, 34, 1],
    [1, "cs", 2, 36, 34, 1],
    [1, "cs", 2, 34, 34, 1],
    [1, "cs", 2, 36, 33, 1],
    [1, "cs", 2, 35, 33, 1],
    [1, "cs", 2, 34, 33, 1],
    [1, "cs", 2, 33, 33, 1],
    [1, "cs", 2, 31, 32, 1],
    [1, "cs", 1, 36, 32, 1],
    [1, "cs", 1, 32, 32, 1],
    [1, "cs", 2, 35, 32, 1],
    [1, "cs", 2, 33, 32, 1],
    [1, "cs", 2, 32, 33, 1],
    [1, "cs", 2, 33, 31, 1],
    [1, "cs", 2, 34, 31, 1],
    [1, "cs", 2, 35, 31, 1],
    [1, "cs", 0, 34, 32, 1],
    [1, "cs", 2, 35, 30, 1],
    [1, "cs", 1, 39, 23, 1],
    [1, "cs", 3, 39, 22, 1],
    [1, "cs", 3, 36, 24, 1],
    [1, "cs", 3, 35, 24, 1],
    [1, "cs", 2, 34, 23, 1],
    [1, "cs", 2, 35, 23, 1],
    [1, "cs", 2, 36, 20, 1],
    [1, "cs", 2, 36, 21, 1],
    [1, "cs", 2, 35, 22, 1],
    [1, "cs", 2, 35, 16, 1],
    [1, "cs", 2, 34, 16, 1],
    [1, "cs", 2, 33, 16, 1],
    [1, "cs", 0, 34, 17, 1],
    [1, "cs", 0, 32, 15, 1],
    [1, "cs", 2, 31, 14, 1],
    [1, "cs", 3, 30, 13, 1],
    [1, "cs", 1, 33, 15, 1],
    [1, "cs", 1, 31, 13, 1],
    [1, "cs", 2, 32, 14, 1],
    [1, "cs", 0, 31, 8, 1],
    [1, "cs", 2, 32, 8, 1],
    [1, "cs", 2, 25, 13, 1],
    [1, "cs", 0, 25, 12, 1],
    [1, "cs", 2, 25, 11, 1],
    [1, "cs", 3, 25, 10, 1],
    [1, "cs", 0, 25, 9, 1],
    [1, "cs", 2, 25, 8, 1],
    [1, "cs", 2, 26, 8, 1],
    [1, "cs", 2, 27, 8, 1],
    [1, "cs", 2, 28, 8, 1],
    [1, "cs", 2, 29, 8, 1],
    [1, "cs", 2, 30, 8, 1],
    [1, "cs", 2, 26, 9, 1],
    [1, "cs", 2, 27, 9, 1],
    [1, "cs", 2, 26, 10, 1],
    [1, "cs", 1, 27, 10, 1],
    [1, "cs", 3, 28, 9, 1],
    [1, "cs", 3, 25, 14, 1],
    [1, "cs", 0, 25, 15, 1],
    [1, "cs", 2, 26, 15, 1],
    [1, "cs", 3, 27, 16, 1],
    [1, "cs", 0, 28, 17, 1],
    [1, "cs", 1, 29, 18, 1],
    [1, "cs", 2, 26, 16, 1],
    [1, "cs", 2, 25, 16, 1],
    [1, "cs", 2, 27, 17, 1],
    [1, "cs", 2, 26, 17, 1],
    [1, "cs", 1, 27, 18, 1],
    [1, "cs", 2, 28, 18, 1],
    [1, "cs", 2, 30, 19, 1],
    [1, "cs", 2, 29, 19, 1],
    [1, "cs", 2, 24, 14, 1],
    [1, "cs", 2, 24, 15, 1],
    [1, "cs", 0, 23, 14, 1],
    [1, "cs", 2, 24, 10, 1],
    [1, "cs", 2, 24, 11, 1],
    [1, "cs", 2, 24, 12, 1],
    [1, "cs", 2, 24, 13, 1],
    [1, "cs", 1, 23, 10, 1],
    [1, "cs", 0, 22, 8, 1],
    [1, "cs", 0, 22, 12, 1],
    [1, "cs", 1, 23, 8, 1],
    [1, "cs", 2, 24, 8, 1],
    [1, "cs", 2, 24, 9, 1],
    [1, "cs", 2, 23, 9, 1],
    [1, "cs", 2, 22, 9, 1],
    [1, "cs", 2, 22, 10, 1],
    [1, "cs", 2, 22, 11, 1],
    [1, "cs", 2, 23, 11, 1],
    [1, "cs", 2, 23, 12, 1],
    [1, "cs", 2, 23, 13, 1],
    [1, "cs", 2, 22, 13, 1],
    [1, "cs", 2, 21, 9, 1],
    [1, "cs", 2, 21, 8, 1],
    [1, "cs", 2, 29, 25, 1],
    [1, "cs", 2, 25, 24, 1],
    [1, "cs", 2, 26, 25, 1],
    [1, "cs", 2, 27, 25, 1],
    [1, "cs", 0, 28, 25, 1],
    [1, "cs", 1, 25, 23, 1],
    [1, "cs", 2, 26, 24, 1],
    [1, "cs", 0, 24, 25, 1],
    [1, "cs", 3, 23, 24, 1],
    [1, "cs", 3, 24, 24, 1],
    [1, "cs", 3, 25, 25, 1],
    [1, "cs", 3, 23, 25, 1],
    [1, "cs", 1, 22, 26, 1],
    [1, "cs", 1, 26, 26, 1],
    [1, "cs", 1, 29, 26, 1],
    [1, "cs", 2, 23, 26, 1],
    [1, "cs", 2, 24, 26, 1],
    [1, "cs", 2, 25, 26, 1],
    [1, "cs", 2, 27, 26, 1],
    [1, "cs", 2, 28, 26, 1],
    [1, "cs", 2, 30, 26, 1],
    [1, "cs", 2, 29, 27, 1],
    [1, "cs", 2, 28, 28, 1],
    [1, "cs", 1, 26, 29, 1],
    [1, "cs", 0, 28, 27, 1],
    [1, "cs", 2, 27, 28, 1],
    [1, "cs", 2, 27, 27, 1],
    [1, "cs", 2, 26, 28, 1],
    [1, "cs", 2, 26, 27, 1],
    [1, "cs", 2, 25, 28, 1],
    [1, "cs", 2, 25, 27, 1],
    [1, "cs", 2, 23, 27, 1],
    [1, "cs", 2, 22, 27, 1],
    [1, "cs", 2, 24, 27, 1],
    [1, "cs", 0, 24, 28, 1],
    [1, "cs", 0, 25, 32, 1],
    [1, "cs", 1, 24, 30, 1],
    [1, "cs", 2, 25, 31, 1],
    [1, "cs", 2, 25, 30, 1],
    [1, "cs", 2, 25, 29, 1],
    [1, "cs", 2, 24, 29, 1],
    [1, "cs", 2, 23, 29, 1],
    [1, "cs", 2, 26, 33, 1],
    [1, "cs", 0, 26, 34, 1],
    [1, "cs", 2, 27, 35, 1],
    [1, "cs", 2, 22, 28, 1],
    [1, "cs", 2, 23, 28, 1],
    [1, "cs", 2, 24, 31, 1],
    [1, "cs", 2, 24, 32, 1],
    [1, "cs", 2, 25, 33, 1],
    [1, "cs", 2, 26, 35, 1],
    [1, "cs", 2, 24, 33, 1],
    [1, "cs", 2, 25, 34, 1],
    [1, "cs", 1, 22, 29, 1],
    [1, "cs", 1, 24, 34, 1],
    [1, "cs", 0, 23, 35, 1],
    [1, "cs", 2, 25, 35, 1],
    [1, "cs", 2, 24, 35, 1],
    [1, "cs", 2, 23, 34, 1],
    [1, "cs", 2, 23, 33, 1],
    [1, "cs", 0, 22, 33, 1],
    [1, "cs", 1, 23, 32, 1],
    [1, "cs", 2, 22, 32, 1],
    [1, "cs", 2, 23, 31, 1],
    [1, "cs", 2, 23, 30, 1],
    [1, "cs", 2, 22, 30, 1],
    [1, "cs", 2, 22, 31, 1],
    [1, "cs", 1, 21, 31, 1],
    [1, "cs", 0, 21, 29, 1],
    [1, "cs", 2, 21, 30, 1],
    [1, "cs", 2, 24, 36, 1],
    [1, "cs", 2, 26, 36, 1],
    [1, "cs", 2, 25, 36, 1],
    [1, "cs", 2, 27, 36, 1],
    [1, "cs", 2, 28, 36, 1],
    [1, "d", 2, 83, 65, 1],
    [1, "d", 2, 16, 67, 1],
    [1, "g", 0, 15, 17, 1],
    [1, "s", 0, 18, 13, 1],
    [1, "s", 0, 85, 11, 1],
    [1, "f", 0, 41, 102, 1],
    [1, "f", 0, 42, 124, 1],
    [1, "f", 0, 64, 116, 1],
    [1, "f", 0, 74, 104, 1],
    [1, "f", 0, 70, 87, 1],
    [1, "f", 0, 27, 96, 1],
    [1, "f", 0, 22, 79, 1],
    [1, "f", 0, 20, 117, 1],
    [1, "f", 0, 30, 137, 1],
    [1, "f", 0, 59, 146, 1],
    [1, "f", 0, 52, 147, 1],
    [1, "f", 0, 20, 149, 1],
    [1, "f", 0, 36, 146, 1],
    [1, "f", 0, 62, 124, 1],
    [1, "g", 1, 34, 121, 1],
    [1, "g", 1, 52, 116, 1],
    [1, "g", 1, 78, 116, 1],
    [1, "g", 1, 71, 129, 1],
    [1, "s", 0, 53, 100, 1],
    [1, "s", 0, 73, 111, 1],
    [1, "s", 0, 77, 126, 1],
    [1, "s", 0, 48, 90, 1],
    [1, "s", 0, 19, 102, 1],
    [1, "s", 0, 18, 127, 1],
    [1, "s", 0, 35, 159, 1],
    [1, "s", 0, 65, 54, 1],
    [1, "s", 0, 44, 52, 1],
    [1, "s", 0, 26, 51, 1],
    [1, "f", 1, 56, 136, 1],
    [1, "f", 1, 41, 133, 1],
    [1, "f", 1, 80, 120, 1],
    [1, "f", 1, 16, 117, 1],
    [1, "f", 1, 13, 99, 1],
    [1, "f", 1, 17, 89, 1],
    [1, "f", 1, 90, 98, 1],
    [1, "f", 1, 84, 95, 1],
    [1, "f", 1, 16, 57, 1],
    [1, "f", 1, 77, 53, 1],
    [1, "d", 1, 48, 35, 1],
    [1, "de", 8, 33, 13, 0],
    [1, "de", 8, 30, 9, 0],
    [1, "de", 9, 32, 30, 0],
    [1, "de", 10, 30, 25, 0],
    [1, "de", 10, 33, 21, 0],
    [1, "de", 8, 31, 34, 0],
    [1, "de", 8, 67, 29, 0],
    [1, "de", 9, 70, 22, 0],
    [1, "de", 10, 70, 16, 0],
    [1, "de", 10, 75, 11, 0],
    [1, "de", 8, 68, 10, 0],
    [1, "de", 8, 75, 30, 0],
    [1, "de", 11, 71, 33, 0],
    [1, "de", 11, 72, 25, 0],
    [1, "de", 11, 64, 25, 0],
    [1, "de", 11, 52, 10, 0],
    [1, "de", 11, 31, 15, 0],
    [1, "de", 30, 29, 14, 0],
    [1, "de", 30, 36, 15, 0],
    [1, "de", 30, 34, 29, 0],
    [1, "de", 30, 30, 29, 0],
    [1, "de", 30, 71, 29, 0],
    [1, "de", 28, 68, 25, 0],
    [1, "de", 28, 75, 15, 0],
    [1, "de", 27, 67, 19, 0],
    [1, "de", 29, 72, 10, 0],
    [1, "de", 29, 75, 32, 0],
    [1, "de", 29, 32, 20, 0],
    [1, "fo", 1, 39, 12, 0],
    [1, "fo", 1, 34, 14, 0],
    [1, "fo", 1, 74, 28, 0],
    [1, "fo", 2, 74, 29, 0],
    [1, "fo", 2, 69, 30, 0],
    [1, "fo", 2, 77, 22, 0],
    [1, "fo", 2, 74, 21, 0],
    [1, "fo", 2, 76, 18, 0],
    [1, "fo", 1, 78, 17, 0],
    [1, "fo", 1, 28, 19, 0],
    [1, "fo", 2, 27, 24, 0],
    [1, "fo", 2, 24, 17, 0],
    [1, "fo", 2, 29, 21, 0],
    [1, "fo", 1, 27, 32, 0],
    [1, "fo", 2, 30, 33, 0],
    [1, "fo", 1, 29, 28, 0],
    [1, "fo", 2, 28, 31, 0],
    [1, "fo", 2, 20, 24, 0],
    [1, "fo", 2, 20, 26, 0],
    [1, "fo", 2, 23, 16, 0],
    [1, "fo", 2, 11, 25, 0],
    [1, "de", 33, 29, 22, 0],
    [1, "de", 34, 32, 25, 0],
    [1, "de", 34, 30, 18, 0],
    [1, "de", 33, 78, 18, 0],
    [1, "de", 33, 73, 35, 0],
    [1, "de", 36, 72, 23, 0],
    [1, "de", 35, 25, 18, 0],
    [1, "d", 1, 83, 41, 1],
    [1, "d", 1, 17, 40, 1],
    [1, "cs", 2, 224, 104, 1],
    [1, "cs", 0, 224, 105, 1],
    [1, "cs", 3, 224, 106, 1],
    [1, "la", 3, 216, 128, 1],
    [1, "la", 0, 215, 126, 1],
    [1, "s", 0, 216, 130, 1],
    [1, "s", 1, 217, 129, 1],
    [1, "s", 0, 218, 128, 1],
    [1, "s", 1, 217, 127, 1],
    [1, "s", 0, 217, 126, 1],
    [1, "s", 1, 217, 125, 1],
    [1, "s", 0, 216, 124, 1],
    [1, "s", 1, 215, 124, 1],
    [1, "s", 0, 214, 124, 1],
    [1, "s", 1, 213, 125, 1],
    [1, "s", 0, 213, 126, 1],
    [1, "plm", 2, 217, 130, 0],
    [1, "plm", 2, 212, 125, 0],
    [1, "p", 0, 214, 134, 1],
    [1, "s", 1, 211, 126, 1],
    [1, "b", 1, 45, 277, 0],
    [1, "b", 1, 50, 286, 0],
    [1, "b", 2, 51, 284, 0],
    [1, "b", 1, 47, 287, 0],
    [1, "b", 0, 39, 285, 0],
    [1, "b", 3, 40, 283, 0],
    [1, "b", 0, 52, 283, 0],
    [1, "b", 1, 51, 280, 0],
    [1, "g", 0, 45, 269, 1],
    [1, "p", 0, 55, 281, 1],
    [1, "b", 1, 5, 172, 0],
    [1, "b", 2, 6, 172, 0],
    [1, "t", 5, 6, 171, 0],
    [1, "t", 1, 5, 170, 0],
    [1, "t", 1, 5, 164, 0],
    [1, "t", 3, 6, 164, 0],
    [1, "b", 0, 6, 165, 0],
    [1, "t", 3, 5, 165, 0],
    [1, "b", 2, 6, 166, 0],
    [1, "t", 4, 5, 166, 0],
    [1, "t", 4, 6, 167, 0],
    [1, "t", 2, 6, 168, 0],
    [1, "t", 0, 6, 169, 0],
    [1, "t", 4, 6, 170, 0],
    [1, "t", 0, 5, 167, 0],
    [1, "t", 2, 5, 169, 0],
    [1, "b", 0, 5, 168, 0],
    [1, "s", 1, 7, 153, 1],
    [1, "s", 2, 7, 151, 1],
    [1, "de", 5, 7, 152, 0],
    [1, "t", 1, 5, 154, 0],
    [1, "b", 0, 6, 154, 0],
    [1, "t", 2, 6, 155, 0],
    [1, "b", 2, 6, 156, 0],
    [1, "t", 2, 5, 157, 0],
    [1, "t", 4, 5, 155, 0],
    [1, "b", 0, 6, 157, 0],
    [1, "t", 1, 5, 156, 0],
    [1, "t", 5, 6, 158, 0],
    [1, "b", 2, 6, 159, 0],
    [1, "b", 0, 6, 162, 0],
    [1, "t", 4, 6, 163, 0],
    [1, "t", 4, 6, 161, 0],
    [1, "b", 1, 6, 160, 0],
    [1, "b", 2, 5, 163, 0],
    [1, "b", 2, 5, 158, 0],
    [1, "b", 2, 5, 161, 0],
    [1, "t", 1, 5, 162, 0],
    [1, "t", 1, 5, 160, 0],
    [1, "b", 1, 85, 176, 0],
    [1, "b", 2, 83, 178, 0],
    [1, "s", 1, 82, 177, 1],
    [1, "b", 0, 76, 172, 0],
    [1, "b", 3, 76, 174, 0],
    [1, "t", 3, 73, 174, 0],
    [1, "t", 5, 72, 175, 0],
    [1, "t", 5, 87, 173, 0],
    [1, "de", 2, 76, 175, 0],
    [1, "de", 3, 77, 171, 0],
    [1, "de", 3, 86, 177, 0],
    [1, "de", 2, 71, 175, 0],
    [1, "s", 1, 70, 174, 1],
    [1, "r", 48, 174, 0],
    [1, "r", 49, 175, 0],
    [1, "r", 50, 175, 0],
    [1, "r", 51, 175, 0],
    [1, "r", 51, 174, 0],
    [1, "r", 50, 174, 0],
    [1, "r", 49, 174, 0],
    [1, "r", 52, 175, 0],
    [1, "r", 52, 176, 0],
    [1, "r", 51, 176, 0],
    [1, "r", 50, 176, 0],
    [1, "r", 49, 176, 0],
    [1, "r", 48, 175, 0],
    [1, "r", 47, 175, 0],
    [1, "r", 48, 176, 0],
    [1, "r", 69, 163, 0],
    [1, "r", 70, 163, 0],
    [1, "r", 71, 163, 0],
    [1, "r", 73, 163, 0],
    [1, "r", 72, 163, 0],
    [1, "r", 73, 164, 0],
    [1, "r", 72, 164, 0],
    [1, "r", 71, 164, 0],
    [1, "r", 70, 164, 0],
    [1, "r", 69, 164, 0],
    [1, "r", 68, 164, 0],
    [1, "r", 68, 165, 0],
    [1, "r", 69, 165, 0],
    [1, "r", 70, 165, 0],
    [1, "r", 71, 165, 0],
    [1, "r", 72, 165, 0],
    [1, "r", 74, 164, 0],
    [1, "r", 73, 165, 0],
    [1, "r", 72, 166, 0],
    [1, "r", 71, 166, 0],
    [1, "r", 70, 166, 0],
    [1, "r", 74, 165, 0],
    [1, "r", 24, 164, 0],
    [1, "r", 25, 164, 0],
    [1, "r", 27, 164, 0],
    [1, "r", 26, 164, 0],
    [1, "r", 28, 165, 0],
    [1, "r", 26, 165, 0],
    [1, "r", 27, 165, 0],
    [1, "r", 25, 165, 0],
    [1, "r", 24, 165, 0],
    [1, "r", 23, 165, 0],
    [1, "r", 22, 165, 0],
    [1, "r", 21, 165, 0],
    [1, "r", 21, 166, 0],
    [1, "r", 22, 166, 0],
    [1, "r", 23, 166, 0],
    [1, "r", 24, 166, 0],
    [1, "r", 25, 166, 0],
    [1, "r", 26, 166, 0],
    [1, "r", 27, 166, 0],
    [1, "r", 28, 166, 0],
    [1, "r", 28, 167, 0],
    [1, "r", 26, 167, 0],
    [1, "r", 25, 167, 0],
    [1, "r", 24, 167, 0],
    [1, "r", 23, 167, 0],
    [1, "r", 22, 167, 0],
    [1, "r", 27, 167, 0],
    [1, "r", 29, 166, 0],
    [1, "r", 29, 167, 0],
    [1, "r", 28, 168, 0],
    [1, "r", 27, 168, 0],
    [1, "r", 26, 168, 0],
    [1, "r", 25, 168, 0],
    [1, "r", 24, 168, 0],
    [1, "r", 23, 168, 0],
    [1, "r", 27, 169, 0],
    [1, "r", 26, 169, 0],
    [1, "r", 25, 169, 0],
    [1, "r", 24, 169, 0],
    [1, "r", 23, 169, 0],
    [1, "r", 22, 168, 0],
    [1, "r", 21, 167, 0],
    [1, "s", 1, 52, 174, 1],
    [1, "t", 3, 50, 177, 0],
    [1, "t", 4, 49, 177, 0],
    [1, "b", 0, 47, 174, 0],
    [1, "b", 0, 69, 166, 0],
    [1, "t", 2, 68, 166, 0],
    [1, "t", 5, 74, 163, 0],
    [1, "t", 1, 73, 162, 0],
    [1, "s", 0, 73, 166, 1],
    [1, "s", 2, 76, 165, 1],
    [1, "g", 2, 59, 175, 1],
    [1, "p", 0, 78, 168, 1],
    [1, "p", 0, 61, 162, 1],
    [1, "p", 0, 42, 170, 1],
    [1, "p", 0, 20, 174, 1],
    [1, "p", 0, 16, 160, 1],
    [1, "b", 1, 23, 164, 0],
    [1, "b", 1, 28, 169, 0],
    [1, "b", 2, 29, 168, 0],
    [1, "b", 2, 16, 170, 0],
    [1, "t", 1, 15, 171, 0],
    [1, "t", 5, 13, 175, 0],
    [1, "t", 5, 19, 166, 0],
    [1, "t", 5, 26, 163, 0],
    [1, "s", 1, 29, 165, 1],
    [1, "t", 5, 11, 167, 0],
    [1, "t", 0, 29, 176, 0],
    [1, "b", 2, 30, 175, 0],
    [1, "t", 2, 24, 177, 0],
    [1, "b", 1, 37, 174, 0],
    [1, "b", 0, 35, 172, 0],
    [1, "b", 3, 37, 170, 0],
    [1, "t", 4, 38, 169, 0],
    [1, "t", 4, 34, 173, 0],
    [1, "t", 5, 38, 175, 0],
    [1, "b", 2, 39, 173, 0],
    [1, "t", 3, 37, 176, 0],
    [1, "t", 4, 30, 168, 0],
    [1, "s", 2, 35, 176, 1],
    [1, "s", 1, 41, 175, 1],
    [1, "b", 2, 53, 176, 0],
    [1, "t", 5, 55, 173, 0],
    [1, "t", 5, 45, 170, 0],
    [1, "b", 1, 53, 162, 0],
    [1, "b", 0, 50, 164, 0],
    [1, "t", 2, 54, 163, 0],
    [1, "t", 3, 49, 165, 0],
    [1, "t", 4, 48, 160, 0],
    [1, "t", 4, 57, 164, 0],
    [1, "t", 4, 66, 162, 0],
    [1, "b", 1, 86, 161, 0],
    [1, "b", 2, 81, 163, 0],
    [1, "t", 3, 85, 162, 0],
    [1, "t", 5, 81, 162, 0],
    [1, "t", 5, 88, 163, 0],
    [1, "t", 1, 84, 166, 0],
    [1, "t", 5, 72, 160, 0],
    [1, "t", 5, 70, 170, 0],
    [1, "s", 1, 57, 162, 1],
    [1, "b", 1, 39, 161, 0],
    [1, "b", 0, 34, 164, 0],
    [1, "b", 2, 54, 164, 0],
    [1, "t", 1, 59, 169, 0],
    [1, "t", 3, 60, 170, 0],
    [1, "t", 4, 63, 169, 0],
    [1, "t", 4, 63, 174, 0],
    [1, "t", 1, 62, 175, 0],
    [1, "t", 5, 40, 162, 0],
    [1, "t", 1, 63, 180, 0],
    [1, "t", 2, 64, 179, 0],
    [1, "t", 2, 35, 165, 0],
    [1, "s", 1, 63, 173, 1],
    [1, "s", 2, 40, 165, 1],
    [1, "b", 0, 46, 169, 0],
    [1, "de", 22, 74, 168, 0],
    [1, "de", 22, 86, 168, 0],
    [1, "de", 22, 83, 175, 0],
    [1, "de", 22, 78, 175, 0],
    [1, "de", 19, 72, 176, 0],
    [1, "de", 19, 68, 168, 0],
    [1, "de", 19, 65, 163, 0],
    [1, "de", 19, 75, 162, 0],
    [1, "de", 19, 80, 162, 0],
    [1, "de", 19, 88, 159, 0],
    [1, "de", 19, 87, 164, 0],
    [1, "de", 19, 61, 177, 0],
    [1, "de", 19, 59, 172, 0],
    [1, "de", 19, 59, 167, 0],
    [1, "de", 19, 53, 165, 0],
    [1, "de", 19, 56, 163, 0],
    [1, "de", 19, 51, 161, 0],
    [1, "de", 19, 48, 167, 0],
    [1, "de", 19, 47, 170, 0],
    [1, "de", 19, 41, 163, 0],
    [1, "de", 19, 37, 161, 0],
    [1, "de", 19, 36, 166, 0],
    [1, "de", 19, 36, 171, 0],
    [1, "de", 19, 34, 174, 0],
    [1, "de", 19, 40, 172, 0],
    [1, "de", 19, 38, 177, 0],
    [1, "de", 19, 42, 176, 0],
    [1, "de", 19, 53, 178, 0],
    [1, "de", 19, 53, 172, 0],
    [1, "de", 19, 64, 181, 0],
    [1, "de", 19, 64, 175, 0],
    [1, "de", 19, 79, 172, 0],
    [1, "de", 19, 30, 170, 0],
    [1, "de", 19, 17, 168, 0],
    [1, "de", 19, 14, 173, 0],
    [1, "de", 19, 12, 162, 0],
    [1, "de", 19, 9, 167, 0],
    [1, "de", 19, 20, 161, 0],
    [1, "de", 19, 27, 162, 0],
    [1, "de", 19, 83, 195, 0],
    [1, "de", 2, 85, 163, 0],
    [1, "de", 2, 80, 164, 0],
    [1, "de", 2, 84, 169, 0],
    [1, "de", 2, 55, 165, 0],
    [1, "de", 3, 46, 163, 0],
    [1, "de", 2, 66, 169, 0],
    [1, "de", 0, 63, 175, 0],
    [1, "de", 0, 34, 164, 0],
    [1, "de", 0, 18, 160, 0],
    [1, "de", 2, 40, 160, 0],
    [1, "de", 2, 53, 160, 0],
    [1, "de", 2, 14, 170, 0],
    [1, "de", 2, 19, 175, 0],
    [1, "de", 2, 23, 176, 0],
    [1, "de", 5, 60, 147, 0],
    [1, "de", 33, 59, 160, 0],
    [1, "de", 33, 85, 157, 0],
    [1, "de", 33, 29, 143, 0],
    [1, "de", 33, 62, 140, 0],
    [1, "de", 33, 43, 127, 0],
    [1, "de", 33, 18, 129, 0],
    [1, "de", 33, 50, 134, 0],
    [1, "de", 33, 79, 127, 0],
    [1, "de", 33, 89, 139, 0],
    [1, "b", 1, 44, 156, 0],
    [1, "t", 2, 45, 157, 0],
    [1, "b", 0, 75, 156, 0],
    [1, "t", 3, 76, 157, 0],
    [1, "t", 5, 62, 157, 0],
    [1, "t", 5, 79, 156, 0],
    [1, "t", 5, 41, 156, 0],
    [1, "b", 1, 28, 156, 0],
    [1, "t", 2, 27, 157, 0],
    [1, "t", 4, 21, 156, 0],
    [1, "t", 4, 56, 159, 0],
    [1, "f", 1, 94, 153, 1],
    [1, "f", 2, 93, 153, 1],
    [1, "f", 2, 99, 153, 1],
    [1, "f", 1, 98, 153, 1],
    [1, "f", 0, 97, 153, 1],
    [1, "f", 1, 96, 153, 1],
    [1, "s", 1, 7, 149, 1],
    [1, "de", 4, 7, 150, 0],
    [1, "b", 3, 43, 281, 0],
    [1, "de", 50, 24, 39, 0],
    [1, "de", 50, 21, 39, 0],
    [1, "de", 50, 22, 43, 0],
    [1, "de", 50, 15, 34, 0],
    [1, "de", 50, 18, 26, 0],
    [1, "de", 50, 44, 42, 0],
    [1, "de", 50, 57, 39, 0],
    [1, "de", 50, 62, 43, 0],
    [1, "de", 50, 77, 44, 0],
    [1, "de", 50, 71, 41, 0],
    [1, "de", 50, 55, 39, 0],
    [1, "de", 50, 22, 39, 0],
    [1, "de", 50, 20, 41, 0],
    [1, "de", 50, 18, 21, 0],
    [1, "de", 50, 15, 21, 0],
    [1, "de", 50, 18, 19, 0],
    [1, "de", 50, 17, 17, 0],
    [1, "de", 50, 18, 10, 0],
    [1, "de", 50, 18, 9, 0],
    [1, "de", 50, 52, 41, 0],
    [1, "de", 50, 82, 39, 0],
    [1, "de", 50, 86, 38, 0],
    [1, "de", 50, 84, 31, 0],
    [1, "de", 50, 86, 30, 0],
    [1, "de", 50, 84, 26, 0],
    [1, "de", 50, 86, 23, 0],
    [1, "de", 50, 86, 14, 0],
    [1, "de", 50, 29, 42, 0],
    [1, "de", 9, 74, 37, 0],
    [1, "de", 9, 76, 22, 0],
    [1, "de", 10, 79, 24, 0],
    [1, "de", 11, 77, 17, 0],
    [1, "de", 36, 81, 25, 0],
    [1, "de", 36, 80, 36, 0],
    [1, "de", 36, 21, 36, 0],
    [1, "de", 28, 23, 22, 0],
    [1, "de", 28, 27, 31, 0],
    [1, "de", 28, 69, 36, 0],
    [1, "de", 28, 80, 20, 0],
    [1, "de", 51, 24, 155, 0],
    [1, "de", 51, 7, 154, 0],
    [1, "de", 51, 11, 154, 0],
    [1, "de", 51, 12, 156, 0],
    [1, "de", 51, 16, 154, 0],
    [1, "de", 51, 20, 154, 0],
    [1, "de", 51, 23, 154, 0],
    [1, "de", 51, 18, 157, 0],
    [1, "de", 51, 31, 154, 0],
    [1, "de", 51, 32, 157, 0],
    [1, "de", 51, 86, 154, 0],
    [1, "de", 51, 88, 156, 0],
    [1, "de", 51, 82, 154, 0],
    [1, "de", 51, 80, 154, 0],
    [1, "de", 51, 77, 154, 0],
    [1, "de", 51, 74, 154, 0],
    [1, "de", 51, 71, 154, 0],
    [1, "de", 51, 67, 154, 0],
    [1, "de", 51, 60, 154, 0],
    [1, "de", 51, 57, 154, 0],
    [1, "de", 51, 65, 154, 0],
    [1, "de", 51, 68, 156, 0],
    [1, "de", 51, 59, 156, 0],
    [1, "de", 51, 55, 154, 0],
    [1, "de", 51, 54, 154, 0],
    [1, "de", 51, 52, 154, 0],
    [1, "de", 51, 55, 155, 0],
    [1, "de", 51, 54, 157, 0],
    [1, "de", 51, 49, 154, 0],
    [1, "de", 51, 46, 154, 0],
    [1, "de", 51, 44, 154, 0],
    [1, "de", 51, 43, 154, 0],
    [1, "de", 51, 41, 154, 0],
    [1, "de", 51, 38, 154, 0],
    [1, "de", 51, 39, 156, 0],
    [1, "de", 51, 34, 154, 0],
    [1, "de", 5, 19, 142, 0],
    [1, "de", 5, 37, 147, 0],
    [1, "de", 7, 53, 147, 0],
    [1, "de", 6, 69, 150, 0],
    [1, "de", 4, 94, 148, 0],
    [1, "de", 4, 66, 147, 0],
    [1, "de", 4, 10, 145, 0],
    [1, "de", 4, 28, 137, 0],
    [1, "de", 4, 15, 137, 0],
    [1, "de", 4, 48, 134, 0],
    [1, "de", 5, 67, 135, 0],
    [1, "de", 34, 84, 155, 0],
    [1, "de", 35, 70, 156, 0],
    [1, "de", 35, 51, 156, 0],
    [1, "de", 35, 56, 157, 0],
    [1, "de", 35, 65, 159, 0],
    [1, "de", 35, 23, 156, 0],
    [1, "de", 35, 15, 155, 0],
    [1, "de", 35, 8, 155, 0],
    [1, "de", 33, 13, 155, 0],
    [1, "de", 33, 33, 158, 0],
    [1, "de", 36, 78, 155, 0],
    [1, "de", 36, 87, 157, 0],
    [1, "fo", 1, 73, 36, 0],
    [1, "fo", 1, 80, 24, 0],
    [1, "fo", 2, 67, 36, 0],
    [1, "fo", 2, 45, 36, 0],
    [1, "fo", 2, 53, 34, 0],
    [1, "fo", 1, 51, 35, 0],
    [1, "fo", 1, 58, 35, 0],
    [1, "fo", 1, 33, 35, 0],
    [1, "fo", 1, 31, 33, 0],
    [1, "fo", 2, 29, 36, 0],
    [1, "fo", 2, 56, 36, 0],
    [1, "fo", 2, 60, 37, 0],
    [1, "fo", 2, 45, 32, 0],
    [1, "fo", 2, 22, 25, 0],
    [1, "fo", 2, 21, 35, 0],
    [1, "de", 52, 90, 208, 0],
    [1, "de", 18, 94, 250, 0],
    [1, "de", 17, 95, 253, 0],
    [1, "cs", 0, 140, 5, 1],
    [1, "cs", 2, 139, 5, 1],
    [1, "cs", 2, 138, 5, 1],
    [1, "cs", 2, 138, 6, 1],
    [1, "cs", 2, 139, 6, 1],
    [1, "cs", 2, 141, 6, 1],
    [1, "cs", 2, 140, 6, 1],
    [1, "la", 3, 143, 7, 1],
    [1, "la", 3, 139, 7, 1],
    [1, "cs", 0, 137, 7, 1],
    [1, "cs", 1, 138, 8, 1],
    [1, "cs", 2, 137, 6, 1],
    [1, "cs", 2, 137, 8, 1],
    [1, "cs", 2, 136, 7, 1],
    [1, "cs", 2, 138, 9, 1],
    [1, "cs", 3, 139, 9, 1],
    [1, "cs", 3, 136, 8, 1],
    [1, "cs", 3, 137, 9, 1],
    [1, "de", 53, 92, 165, 0],
    [1, "de", 53, 92, 180, 0],
    [1, "de", 53, 92, 188, 0],
    [1, "de", 54, 92, 153, 0],
    [1, "de", 54, 91, 153, 0],
    [1, "de", 54, 90, 153, 0],
    [1, "de", 54, 89, 153, 0],
    [1, "de", 54, 88, 153, 0],
    [1, "de", 54, 87, 153, 0],
    [1, "de", 54, 86, 153, 0],
    [1, "de", 54, 85, 153, 0],
    [1, "de", 54, 84, 153, 0],
    [1, "de", 54, 83, 153, 0],
    [1, "de", 54, 82, 153, 0],
    [1, "de", 54, 81, 153, 0],
    [1, "de", 54, 80, 153, 0],
    [1, "de", 54, 79, 153, 0],
    [1, "de", 54, 78, 153, 0],
    [1, "de", 54, 77, 153, 0],
    [1, "de", 54, 76, 153, 0],
    [1, "de", 54, 75, 153, 0],
    [1, "de", 54, 74, 153, 0],
    [1, "de", 54, 73, 153, 0],
    [1, "de", 54, 72, 153, 0],
    [1, "de", 54, 70, 153, 0],
    [1, "de", 54, 71, 153, 0],
    [1, "de", 54, 69, 153, 0],
    [1, "de", 54, 68, 153, 0],
    [1, "de", 54, 67, 153, 0],
    [1, "de", 54, 66, 153, 0],
    [1, "de", 54, 65, 153, 0],
    [1, "de", 54, 64, 153, 0],
    [1, "de", 54, 63, 153, 0],
    [1, "de", 54, 61, 153, 0],
    [1, "de", 54, 62, 153, 0],
    [1, "de", 54, 60, 153, 0],
    [1, "de", 54, 59, 153, 0],
    [1, "de", 54, 57, 153, 0],
    [1, "de", 54, 58, 153, 0],
    [1, "de", 54, 56, 153, 0],
    [1, "de", 54, 55, 153, 0],
    [1, "de", 54, 54, 153, 0],
    [1, "de", 54, 53, 153, 0],
    [1, "de", 54, 52, 153, 0],
    [1, "de", 54, 51, 153, 0],
    [1, "de", 54, 50, 153, 0],
    [1, "de", 54, 49, 153, 0],
    [1, "de", 54, 48, 153, 0],
    [1, "de", 54, 47, 153, 0],
    [1, "de", 54, 46, 153, 0],
    [1, "de", 54, 45, 153, 0],
    [1, "de", 54, 44, 153, 0],
    [1, "de", 54, 43, 153, 0],
    [1, "de", 54, 42, 153, 0],
    [1, "de", 54, 41, 153, 0],
    [1, "de", 54, 40, 153, 0],
    [1, "de", 54, 39, 153, 0],
    [1, "de", 54, 37, 153, 0],
    [1, "de", 54, 38, 153, 0],
    [1, "de", 54, 36, 153, 0],
    [1, "de", 54, 35, 153, 0],
    [1, "de", 54, 34, 153, 0],
    [1, "de", 54, 33, 153, 0],
    [1, "de", 54, 32, 153, 0],
    [1, "de", 54, 31, 153, 0],
    [1, "de", 54, 30, 153, 0],
    [1, "de", 54, 29, 153, 0],
    [1, "de", 54, 28, 153, 0],
    [1, "de", 54, 27, 153, 0],
    [1, "de", 54, 26, 153, 0],
    [1, "de", 54, 25, 153, 0],
    [1, "de", 54, 24, 153, 0],
    [1, "de", 54, 23, 153, 0],
    [1, "de", 54, 22, 153, 0],
    [1, "de", 54, 21, 153, 0],
    [1, "de", 54, 20, 153, 0],
    [1, "de", 54, 19, 153, 0],
    [1, "de", 54, 18, 153, 0],
    [1, "de", 54, 17, 153, 0],
    [1, "de", 54, 16, 153, 0],
    [1, "de", 54, 15, 153, 0],
    [1, "de", 54, 14, 153, 0],
    [1, "de", 54, 13, 153, 0],
    [1, "de", 54, 12, 153, 0],
    [1, "de", 54, 11, 153, 0],
    [1, "de", 54, 10, 153, 0],
    [1, "de", 54, 8, 153, 0],
    [1, "de", 54, 9, 153, 0],
    [1, "de", 55, 83, 8, 0],
    [1, "de", 55, 83, 9, 0],
    [1, "de", 55, 83, 10, 0],
    [1, "de", 55, 83, 11, 0],
    [1, "de", 55, 83, 12, 0],
    [1, "de", 55, 83, 13, 0],
    [1, "de", 55, 83, 14, 0],
    [1, "de", 55, 83, 15, 0],
    [1, "de", 55, 83, 16, 0],
    [1, "de", 55, 83, 17, 0],
    [1, "de", 55, 83, 19, 0],
    [1, "de", 55, 83, 18, 0],
    [1, "de", 55, 83, 20, 0],
    [1, "de", 55, 83, 21, 0],
    [1, "de", 55, 83, 22, 0],
    [1, "de", 55, 83, 23, 0],
    [1, "de", 55, 83, 24, 0],
    [1, "de", 55, 83, 25, 0],
    [1, "de", 55, 83, 26, 0],
    [1, "de", 55, 83, 27, 0],
    [1, "de", 55, 83, 28, 0],
    [1, "de", 55, 83, 29, 0],
    [1, "de", 55, 83, 30, 0],
    [1, "de", 55, 83, 31, 0],
    [1, "de", 55, 83, 32, 0],
    [1, "de", 55, 83, 33, 0],
    [1, "de", 55, 83, 34, 0],
    [1, "de", 55, 83, 36, 0],
    [1, "de", 55, 83, 35, 0],
    [1, "de", 55, 83, 37, 0],
    [1, "de", 55, 83, 38, 0],
    [1, "de", 55, 81, 38, 0],
    [1, "de", 55, 82, 38, 0],
    [1, "de", 55, 80, 38, 0],
    [1, "de", 55, 79, 38, 0],
    [1, "de", 55, 78, 38, 0],
    [1, "de", 55, 77, 38, 0],
    [1, "de", 55, 76, 38, 0],
    [1, "de", 55, 75, 38, 0],
    [1, "de", 55, 73, 38, 0],
    [1, "de", 55, 74, 38, 0],
    [1, "de", 55, 72, 38, 0],
    [1, "de", 55, 71, 38, 0],
    [1, "de", 55, 70, 38, 0],
    [1, "de", 55, 68, 38, 0],
    [1, "de", 55, 69, 38, 0],
    [1, "de", 55, 67, 38, 0],
    [1, "de", 55, 66, 38, 0],
    [1, "de", 55, 65, 38, 0],
    [1, "de", 55, 64, 38, 0],
    [1, "de", 55, 63, 38, 0],
    [1, "de", 55, 62, 38, 0],
    [1, "de", 55, 60, 38, 0],
    [1, "de", 55, 61, 38, 0],
    [1, "de", 55, 59, 38, 0],
    [1, "de", 55, 57, 38, 0],
    [1, "de", 55, 58, 38, 0],
    [1, "de", 55, 56, 38, 0],
    [1, "de", 55, 55, 38, 0],
    [1, "de", 55, 54, 38, 0],
    [1, "de", 55, 53, 38, 0],
    [1, "de", 55, 52, 38, 0],
    [1, "de", 55, 51, 38, 0],
    [1, "de", 55, 49, 38, 0],
    [1, "de", 55, 50, 38, 0],
    [1, "de", 55, 48, 38, 0],
    [1, "de", 55, 47, 38, 0],
    [1, "de", 55, 46, 38, 0],
    [1, "de", 55, 45, 38, 0],
    [1, "de", 55, 44, 38, 0],
    [1, "de", 55, 43, 38, 0],
    [1, "de", 55, 42, 38, 0],
    [1, "de", 55, 41, 38, 0],
    [1, "de", 55, 40, 38, 0],
    [1, "de", 55, 39, 38, 0],
    [1, "de", 55, 38, 38, 0],
    [1, "de", 55, 37, 38, 0],
    [1, "de", 55, 36, 38, 0],
    [1, "de", 55, 34, 38, 0],
    [1, "de", 55, 35, 38, 0],
    [1, "de", 55, 33, 38, 0],
    [1, "de", 55, 31, 38, 0],
    [1, "de", 55, 32, 38, 0],
    [1, "de", 55, 30, 38, 0],
    [1, "de", 55, 29, 38, 0],
    [1, "de", 55, 28, 38, 0],
    [1, "de", 55, 27, 38, 0],
    [1, "de", 55, 26, 38, 0],
    [1, "de", 55, 25, 38, 0],
    [1, "de", 55, 24, 38, 0],
    [1, "de", 55, 23, 38, 0],
    [1, "de", 55, 21, 38, 0],
    [1, "de", 55, 22, 38, 0],
    [1, "de", 55, 20, 38, 0],
    [1, "de", 55, 19, 38, 0],
    [1, "de", 55, 19, 37, 0],
    [1, "de", 55, 19, 36, 0],
    [1, "de", 55, 19, 35, 0],
    [1, "de", 55, 19, 34, 0],
    [1, "de", 55, 19, 33, 0],
    [1, "de", 55, 19, 32, 0],
    [1, "de", 55, 19, 31, 0],
    [1, "de", 55, 19, 30, 0],
    [1, "de", 55, 19, 28, 0],
    [1, "de", 55, 19, 29, 0],
    [1, "de", 55, 19, 27, 0],
    [1, "de", 55, 19, 26, 0],
    [1, "de", 55, 19, 25, 0],
    [1, "de", 55, 19, 24, 0],
    [1, "de", 55, 19, 23, 0],
    [1, "de", 55, 19, 22, 0],
    [1, "de", 55, 19, 21, 0],
    [1, "de", 55, 19, 20, 0],
    [1, "de", 55, 19, 18, 0],
    [1, "de", 55, 19, 19, 0],
    [1, "de", 55, 19, 16, 0],
    [1, "de", 55, 19, 17, 0],
    [1, "de", 55, 19, 15, 0],
    [1, "de", 55, 19, 14, 0],
    [1, "de", 55, 19, 13, 0],
    [1, "de", 55, 19, 12, 0],
    [1, "de", 55, 19, 11, 0],
    [1, "de", 55, 19, 10, 0],
    [1, "de", 55, 19, 9, 0],
    [1, "de", 55, 19, 8, 0],
    [1, "de", 55, 84, 35, 0],
    [1, "de", 55, 84, 32, 0],
    [1, "de", 55, 84, 25, 0],
    [1, "de", 50, 84, 24, 0],
    [1, "de", 55, 84, 20, 0],
    [1, "de", 55, 84, 17, 0],
    [1, "de", 55, 84, 16, 0],
    [1, "de", 50, 84, 15, 0],
    [1, "de", 55, 84, 8, 0],
    [1, "de", 55, 84, 9, 0],
    [1, "de", 50, 85, 11, 0],
    [1, "de", 55, 81, 39, 0],
    [1, "de", 50, 83, 40, 0],
    [1, "de", 55, 72, 39, 0],
    [1, "de", 55, 74, 39, 0],
    [1, "de", 55, 66, 39, 0],
    [1, "de", 55, 65, 39, 0],
    [1, "de", 50, 67, 41, 0],
    [1, "de", 55, 56, 39, 0],
    [1, "de", 55, 58, 39, 0],
    [1, "de", 55, 50, 39, 0],
    [1, "de", 50, 49, 39, 0],
    [1, "de", 55, 44, 39, 0],
    [1, "de", 55, 42, 39, 0],
    [1, "de", 50, 43, 39, 0],
    [1, "de", 50, 41, 39, 0],
    [1, "de", 50, 37, 39, 0],
    [1, "de", 55, 36, 39, 0],
    [1, "de", 55, 32, 39, 0],
    [1, "de", 50, 31, 39, 0],
    [1, "de", 55, 23, 39, 0],
    [1, "de", 55, 18, 37, 0],
    [1, "de", 50, 18, 36, 0],
    [1, "de", 55, 18, 35, 0],
    [1, "de", 50, 18, 34, 0],
    [1, "de", 55, 18, 31, 0],
    [1, "de", 50, 18, 30, 0],
    [1, "de", 55, 18, 25, 0],
    [1, "de", 50, 18, 24, 0],
    [1, "de", 55, 18, 20, 0],
    [1, "de", 55, 18, 14, 0],
    [1, "de", 50, 18, 15, 0],
    [1, "de", 55, 18, 8, 0],
    [1, "de", 54, 90, 154, 0],
    [1, "de", 51, 89, 154, 0],
    [1, "de", 54, 85, 154, 0],
    [1, "de", 54, 81, 154, 0],
    [1, "de", 54, 76, 154, 0],
    [1, "de", 54, 70, 154, 0],
    [1, "de", 54, 66, 154, 0],
    [1, "de", 54, 61, 154, 0],
    [1, "de", 54, 56, 154, 0],
    [1, "de", 54, 53, 154, 0],
    [1, "de", 54, 45, 154, 0],
    [1, "de", 54, 42, 154, 0],
    [1, "de", 54, 37, 154, 0],
    [1, "de", 54, 30, 154, 0],
    [1, "de", 54, 25, 154, 0],
    [1, "de", 54, 17, 154, 0],
    [1, "de", 54, 10, 154, 0],
    [1, "de", 54, 8, 154, 0],
    [1, "de", 55, 20, 9, 0],
    [1, "de", 53, 93, 154, 0],
    [1, "de", 53, 93, 156, 0],
    [1, "de", 53, 93, 158, 0],
    [1, "de", 52, 91, 157, 0],
    [1, "de", 53, 93, 159, 0],
    [1, "de", 53, 93, 161, 0],
    [1, "de", 53, 93, 162, 0],
    [1, "de", 53, 93, 163, 0],
    [1, "de", 53, 93, 164, 0],
    [1, "de", 53, 93, 165, 0],
    [1, "de", 53, 93, 166, 0],
    [1, "de", 53, 93, 167, 0],
    [1, "de", 52, 91, 167, 0],
    [1, "de", 53, 93, 169, 0],
    [1, "de", 53, 93, 168, 0],
    [1, "de", 53, 93, 170, 0],
    [1, "de", 53, 93, 171, 0],
    [1, "de", 53, 93, 173, 0],
    [1, "de", 53, 93, 176, 0],
    [1, "de", 53, 93, 175, 0],
    [1, "de", 53, 92, 169, 0],
    [1, "de", 53, 93, 178, 0],
    [1, "de", 53, 93, 179, 0],
    [1, "de", 53, 93, 180, 0],
    [1, "de", 53, 93, 181, 0],
    [1, "de", 53, 93, 183, 0],
    [1, "de", 53, 93, 184, 0],
    [1, "de", 53, 93, 186, 0],
    [1, "de", 18, 95, 185, 0],
    [1, "de", 53, 93, 187, 0],
    [1, "de", 53, 93, 188, 0],
    [1, "de", 52, 91, 186, 0],
    [1, "de", 53, 93, 190, 0],
    [1, "de", 53, 93, 192, 0],
    [1, "de", 53, 93, 195, 0],
    [1, "de", 53, 93, 194, 0],
    [1, "de", 52, 91, 196, 0],
    [1, "de", 53, 93, 197, 0],
    [1, "de", 53, 93, 200, 0],
    [1, "de", 53, 93, 198, 0],
    [1, "de", 53, 93, 201, 0],
    [1, "de", 53, 93, 202, 0],
    [1, "de", 53, 93, 203, 0],
    [1, "de", 53, 93, 204, 0],
    [1, "de", 53, 93, 206, 0],
    [1, "de", 53, 93, 205, 0],
    [1, "de", 53, 93, 207, 0],
    [1, "de", 53, 93, 209, 0],
    [1, "de", 53, 93, 210, 0],
    [1, "de", 53, 93, 212, 0],
    [1, "de", 52, 91, 204, 0],
    [1, "de", 53, 93, 213, 0],
    [1, "de", 53, 93, 214, 0],
    [1, "de", 53, 93, 215, 0],
    [1, "de", 53, 93, 216, 0],
    [1, "de", 53, 93, 217, 0],
    [1, "de", 53, 93, 218, 0],
    [1, "de", 53, 93, 219, 0],
    [1, "de", 53, 93, 220, 0],
    [1, "de", 52, 92, 213, 0],
    [1, "de", 52, 92, 206, 0],
    [1, "de", 52, 92, 202, 0],
    [1, "de", 53, 92, 201, 0],
    [1, "de", 52, 92, 194, 0],
    [1, "de", 52, 92, 178, 0],
    [1, "de", 52, 92, 171, 0],
    [1, "de", 53, 93, 221, 0],
    [1, "de", 53, 93, 222, 0],
    [1, "de", 53, 93, 223, 0],
    [1, "de", 53, 93, 225, 0],
    [1, "de", 53, 93, 228, 0],
    [1, "de", 53, 93, 227, 0],
    [1, "de", 52, 92, 217, 0],
    [1, "de", 53, 92, 218, 0],
    [1, "de", 52, 92, 221, 0],
    [1, "de", 52, 92, 225, 0],
    [1, "de", 52, 93, 226, 0],
    [1, "de", 52, 93, 224, 0],
    [1, "de", 52, 93, 208, 0],
    [1, "de", 52, 93, 211, 0],
    [1, "de", 52, 93, 196, 0],
    [1, "de", 52, 93, 199, 0],
    [1, "de", 52, 93, 189, 0],
    [1, "de", 52, 93, 191, 0],
    [1, "de", 52, 93, 193, 0],
    [1, "de", 52, 93, 182, 0],
    [1, "de", 52, 93, 185, 0],
    [1, "de", 52, 93, 172, 0],
    [1, "de", 52, 93, 174, 0],
    [1, "de", 52, 93, 177, 0],
    [1, "de", 52, 93, 155, 0],
    [1, "de", 52, 93, 157, 0],
    [1, "de", 52, 93, 160, 0],
    [1, "de", 52, 92, 162, 0],
    [1, "de", 53, 93, 229, 0],
    [1, "de", 53, 93, 231, 0],
    [1, "de", 53, 93, 232, 0],
    [1, "de", 53, 93, 234, 0],
    [1, "de", 52, 93, 230, 0],
    [1, "de", 52, 92, 228, 0],
    [1, "de", 53, 93, 235, 0],
    [1, "de", 53, 93, 236, 0],
    [1, "de", 53, 93, 237, 0],
    [1, "de", 53, 93, 239, 0],
    [1, "de", 53, 93, 240, 0],
    [1, "de", 52, 93, 238, 0],
    [1, "de", 53, 93, 241, 0],
    [1, "de", 52, 93, 242, 0],
    [1, "de", 52, 93, 243, 0],
    [1, "de", 53, 93, 244, 0],
    [1, "de", 53, 93, 246, 0],
    [1, "de", 53, 93, 245, 0],
    [1, "de", 52, 93, 247, 0],
    [1, "de", 53, 93, 248, 0],
    [1, "de", 52, 92, 235, 0],
    [1, "de", 52, 92, 245, 0],
    [1, "de", 52, 93, 249, 0],
    [1, "de", 53, 93, 250, 0],
    [1, "de", 53, 93, 251, 0],
    [1, "de", 53, 93, 252, 0],
    [1, "de", 53, 93, 254, 0],
    [1, "de", 52, 93, 253, 0],
    [1, "de", 52, 93, 255, 0],
    [1, "de", 53, 93, 257, 0],
    [1, "de", 53, 93, 256, 0],
    [1, "de", 52, 93, 258, 0],
    [1, "de", 53, 93, 259, 0],
    [1, "de", 52, 93, 260, 0],
    [1, "de", 53, 93, 263, 0],
    [1, "de", 53, 93, 264, 0],
    [1, "de", 53, 93, 265, 0],
    [1, "de", 52, 93, 266, 0],
    [1, "de", 53, 93, 267, 0],
    [1, "de", 52, 93, 268, 0],
    [1, "de", 52, 93, 269, 0],
    [1, "de", 53, 93, 276, 0],
    [1, "de", 53, 93, 277, 0],
    [1, "de", 52, 93, 278, 0],
    [1, "de", 53, 93, 279, 0],
    [1, "de", 52, 93, 280, 0],
    [1, "de", 52, 93, 283, 0],
    [1, "de", 53, 93, 284, 0],
    [1, "de", 53, 93, 285, 0],
    [1, "de", 53, 93, 286, 0],
    [1, "de", 52, 93, 287, 0],
    [1, "de", 53, 93, 288, 0],
    [1, "de", 53, 93, 289, 0],
    [1, "de", 52, 93, 290, 0],
    [1, "de", 52, 93, 291, 0],
    [1, "de", 53, 93, 292, 0],
    [1, "de", 52, 93, 293, 0],
    [1, "de", 53, 93, 294, 0],
    [1, "de", 52, 93, 295, 0],
    [1, "de", 52, 93, 296, 0],
    [1, "de", 53, 93, 297, 0],
    [1, "de", 53, 93, 298, 0],
    [1, "de", 52, 93, 299, 0],
    [1, "de", 53, 93, 300, 0],
    [1, "de", 52, 92, 298, 0],
    [1, "de", 52, 92, 293, 0],
    [1, "r", 92, 262, 0],
    [1, "r", 93, 262, 0],
    [1, "de", 52, 93, 261, 0],
    [1, "cs", 0, 223, 104, 1],
    [1, "cs", 2, 223, 105, 1],
    [1, "cs", 2, 223, 102, 1],
    [1, "cs", 2, 223, 103, 1],
    [1, "la", 3, 141, 8, 1],
    [1, "cs", 2, 140, 9, 1],
    [1, "la", 4, 142, 9, 1],
    [1, "de", 4, 81, 149, 0],
    [1, "f", 0, 83, 148, 1],
    [1, "f", 1, 82, 149, 1],
    [1, "de", 34, 81, 156, 0],
    [1, "de", 51, 17, 9, 0],
    [1, "de", 54, 16, 9, 0],
    [1, "de", 54, 15, 9, 0],
    [1, "cs", 3, 223, 106, 1],
    [1, "p", 0, 119, 279, 1],
    [1, "p", 0, 109, 242, 1],
    [1, "cs", 1, 29, 9, 1],
    [1, "cs", 2, 30, 9, 1],
    [1, "cs", 2, 31, 9, 1],
    [1, "cs", 2, 32, 9, 1],
    [1, "cs", 2, 33, 9, 1],
    [1, "cs", 2, 69, 9, 1],
    [1, "cs", 2, 71, 9, 1],
    [1, "cs", 2, 70, 9, 1],
    [1, "cs", 1, 72, 9, 1],
    [1, "cs", 2, 73, 9, 1],
    [1, "de", 10, 31, 10, 0],
    [1, "de", 10, 29, 10, 0],
    [1, "de", 10, 44, 10, 0],
    [1, "de", 4, 87, 10, 0],
    [1, "de", 4, 86, 10, 0],
    [1, "de", 5, 87, 9, 0],
    [1, "de", 5, 13, 10, 0],
    [1, "de", 4, 14, 11, 0],
    [1, "de", 4, 16, 10, 0],
    [1, "de", 4, 17, 10, 0],
    [1, "cs", 2, 146, 9, 1],
    [1, "cs", 2, 148, 9, 1],
    [1, "cs", 2, 150, 9, 1],
    [1, "cs", 2, 153, 9, 1],
    [1, "cs", 2, 155, 9, 1],
    [1, "cs", 1, 149, 9, 1],
    [1, "cs", 1, 154, 9, 1],
    [1, "cs", 3, 147, 9, 1],
    [1, "cs", 3, 151, 9, 1],
    [1, "cs", 3, 152, 9, 1],
    [1, "cs", 3, 156, 9, 1],
    [1, "cs", 3, 157, 9, 1],
    [1, "cs", 3, 158, 9, 1],
    [1, "cs", 3, 159, 9, 1],
    [1, "cs", 3, 160, 9, 1],
    [1, "cs", 0, 161, 9, 1],
    [1, "cs", 2, 162, 9, 1],
    [1, "cs", 2, 163, 9, 1],
    [1, "cs", 1, 164, 9, 1],
    [1, "cs", 2, 165, 9, 1],
    [1, "cs", 3, 166, 9, 1],
    [1, "cs", 3, 168, 9, 1],
    [1, "cs", 3, 170, 9, 1],
    [1, "cs", 1, 169, 9, 1],
    [1, "cs", 2, 167, 9, 1],
    [1, "cs", 2, 171, 9, 1],
    [1, "cs", 2, 173, 9, 1],
    [1, "cs", 2, 172, 9, 1],
    [1, "cs", 2, 174, 9, 1],
    [1, "cs", 1, 175, 9, 1],
    [1, "cs", 3, 176, 9, 1],
    [1, "cs", 3, 178, 9, 1],
    [1, "cs", 3, 179, 9, 1],
    [1, "cs", 0, 180, 9, 1],
    [1, "cs", 2, 177, 9, 1],
    [1, "cs", 2, 182, 9, 1],
    [1, "cs", 2, 181, 9, 1],
    [1, "cs", 2, 183, 9, 1],
    [1, "cs", 2, 184, 9, 1],
    [1, "cs", 2, 185, 9, 1],
    [1, "cs", 2, 186, 9, 1],
    [1, "cs", 1, 187, 9, 1],
    [1, "cs", 2, 188, 9, 1],
    [1, "cs", 3, 189, 9, 1],
    [1, "cs", 3, 190, 9, 1],
    [1, "cs", 3, 191, 9, 1],
    [1, "cs", 2, 192, 9, 1],
    [1, "cs", 0, 193, 9, 1],
    [1, "cs", 2, 194, 9, 1],
    [1, "cs", 2, 196, 9, 1],
    [1, "cs", 2, 198, 9, 1],
    [1, "cs", 2, 200, 9, 1],
    [1, "cs", 3, 195, 9, 1],
    [1, "cs", 3, 197, 9, 1],
    [1, "cs", 3, 199, 9, 1],
    [1, "cs", 0, 201, 9, 1],
    [1, "cs", 2, 202, 9, 1],
    [1, "cs", 2, 203, 9, 1],
    [1, "cs", 3, 208, 9, 1],
    [1, "cs", 3, 207, 9, 1],
    [1, "cs", 3, 206, 9, 1],
    [1, "cs", 3, 205, 9, 1],
    [1, "cs", 3, 204, 9, 1],
    [1, "cs", 3, 214, 9, 1],
    [1, "cs", 3, 215, 9, 1],
    [1, "cs", 3, 216, 9, 1],
    [1, "cs", 3, 217, 9, 1],
    [1, "cs", 3, 218, 9, 1],
    [1, "b", 0, 5, 159, 0],
    [1, "b", 0, 5, 171, 0],
    [2, "isl", 1, 122, 63, 0],
    [2, "isl", 2, 119, 277, 0],
    [2, "isl", 2, 109, 244, 0],
    [2, "isl", 2, 114, 205, 0],
    [2, "isl", 1, 120, 150, 0],
    [2, "isl", 2, 154, 129, 0],
    [2, "isl", 0, 184, 158, 0],
    [2, "isl", 1, 208, 128, 0],
    [2, "isl", 1, 215, 132, 0],
    [2, "isl", 1, 214, 128, 0],
    [2, "isl", 1, 209, 132, 0],
    [1, "la", 3, 217, 20, 1],
    [1, "la", 1, 215, 19, 1],
    [1, "la", 0, 212, 18, 1],
    [1, "la", 4, 214, 18, 1],
    [1, "la", 4, 216, 19, 1],
    [1, "la", 4, 211, 20, 1],
    [1, "la", 3, 210, 19, 1],
    [1, "la", 3, 215, 21, 1],
    [1, "la", 1, 214, 20, 1],
    [1, "la", 3, 214, 22, 1],
    [1, "la", 3, 214, 24, 1],
    [1, "la", 4, 214, 26, 1],
    [1, "la", 4, 213, 27, 1],
    [1, "la", 1, 212, 28, 1],
    [1, "la", 2, 212, 29, 1],
    [1, "la", 5, 212, 30, 1],
    [1, "la", 4, 208, 19, 1],
    [1, "la", 4, 207, 19, 1],
    [1, "la", 1, 206, 19, 1],
    [1, "la", 1, 205, 19, 1],
    [1, "la", 2, 204, 19, 1],
    [1, "la", 5, 203, 19, 1],
    [1, "la", 3, 210, 17, 1],
  ],
  COUNTER = 0,
  SPRITE = {
    GROUND: ["#133A2B", "#042b30"],
    SNOW_GROUND: ["#EBF2F0", "#136167"],
    CRAFT_LOADING: ["#4EB687", "#187484"],
    BROWN_LIFE: ["#664516", "#13474C"],
    SAND_COLOR: ["#FCEFBB", "#0F4D48"],
    SAND_SHOVEL_CO: ["#C1AA7E", "#0F423D"],
    GRD_SHOVEL_CO: ["#594837", "#163A3A"],
    ICE_SHOVEL_CO: ["#A5D6D6", "#539CA0"],
    WATER_3_COLOR: ["#0B6A84", "#09373F"],
    WATER_2_COLOR: ["#2A8B9B", "#0F464C"],
    WATER_1_COLOR: ["#A9D6D3", "#115E60"],
    FLOAM_COLOR: ["#ECF7F9", "#539CA0"],
    WEAPON_LOADING: ["#FFF", "#FFF"],
    HELMET_LOADING: ["#FFF", "#FFF"],
    SWIM_COLOR: ["#1C9BA4", "#00272F"],
    LAVA_GROUND: ["#2D2017", "#031C1E"],
    DAY: 0,
    NIGHT: 1,
    DRAGON_DEN_X: 2300,
    DRAGON_DEN_Y: 2290,
    FLAKES_NUMBER: 34,
    FLAKES_SIZES: 5,
    SAND_NUMBER: 68,
    ASHES_NUMBER: 34,
    ASHES_SIZES: 5,
    SMOG: 1,
    SMOG_PUSH: 0.6,
    SMOG_SPEED: 0.25,
    STEP_SPACE: 50,
    TRAIL_SPACE: 10,
    SWIM_SPACE: 75,
    GHOST_BUBBLES: 20,
    BUBBLES_SIZES: 5,
    SWORD: COUNTER++,
    PICK: COUNTER++,
    FUR: COUNTER++,
    PICK_GOLD: COUNTER++,
    PICK_DIAMOND: COUNTER++,
    SWORD_GOLD: COUNTER++,
    SWORD_DIAMOND: COUNTER++,
    HAND: COUNTER++,
    PICK_WOOD: COUNTER++,
    PIRATE_SWORD: COUNTER++,
    EARMUFFS: COUNTER++,
    COAT: COUNTER++,
    WOOD_SPEAR: COUNTER++,
    SPEAR: COUNTER++,
    GOLD_SPEAR: COUNTER++,
    DIAMOND_SPEAR: COUNTER++,
    DRAGON_SPEAR: COUNTER++,
    LAVA_SPEAR: COUNTER++,
    CRAB_SPEAR: COUNTER++,
    REIDITE_SWORD: COUNTER++,
    DIAMOND_PROTECTION: COUNTER++,
    AMETHYST_PROTECTION: COUNTER++,
    REIDITE_PROTECTION: COUNTER++,
    EXPLORER_HAT: COUNTER++,
    PIRATE_HAT: COUNTER++,
    STONE_HELMET: COUNTER++,
    GOLD_HELMET: COUNTER++,
    DIAMOND_HELMET: COUNTER++,
    BOOK: COUNTER++,
    BAG: COUNTER++,
    SWORD_AMETHYST: COUNTER++,
    PICK_AMETHYST: COUNTER++,
    PICK_REIDITE: COUNTER++,
    AMETHYST_SPEAR: COUNTER++,
    REIDITE_SPEAR: COUNTER++,
    HAMMER: COUNTER++,
    HAMMER_GOLD: COUNTER++,
    HAMMER_DIAMOND: COUNTER++,
    HAMMER_AMETHYST: COUNTER++,
    HAMMER_REIDITE: COUNTER++,
    CAP_SCARF: COUNTER++,
    CHRISTMAS_HAT: COUNTER++,
    ELF_HAT: COUNTER++,
    AMETHYST_HELMET: COUNTER++,
    REIDITE_HELMET: COUNTER++,
    SUPER_HAMMER: COUNTER++,
    SHOVEL: COUNTER++,
    SUPER_DIVING_SUIT: COUNTER++,
    DIVING_MASK: COUNTER++,
    WATERING_CAN_FULL: COUNTER++,
    SHOVEL_GOLD: COUNTER++,
    SHOVEL_DIAMOND: COUNTER++,
    SHOVEL_AMETHYST: COUNTER++,
    PITCHFORK: COUNTER++,
    PITCHFORK2: COUNTER++,
    SPANNER: COUNTER++,
    MACHETE: COUNTER++,
    SWORD_WOOD: COUNTER++,
    WOOD_HELMET: COUNTER++,
    DRAGON_HELMET: COUNTER++,
    LAVA_HELMET: COUNTER++,
    CROWN_CRAB: COUNTER++,
    DRAGON_SWORD: COUNTER++,
    LAVA_SWORD: COUNTER++,
    WOOD_BOW: COUNTER++,
    STONE_BOW: COUNTER++,
    GOLD_BOW: COUNTER++,
    DIAMOND_BOW: COUNTER++,
    AMETHYST_BOW: COUNTER++,
    REIDITE_BOW: COUNTER++,
    DRAGON_BOW: COUNTER++,
    WOOD_SHIELD: COUNTER++,
    STONE_SHIELD: COUNTER++,
    GOLD_SHIELD: COUNTER++,
    DIAMOND_SHIELD: COUNTER++,
    AMETHYST_SHIELD: COUNTER++,
    REIDITE_SHIELD: COUNTER++,
    CROWN_GREEN: COUNTER++,
    CROWN_ORANGE: COUNTER++,
    CROWN_BLUE: COUNTER++,
    TURBAN1: COUNTER++,
    TURBAN2: COUNTER++,
    PILOT_HELMET: COUNTER++,
    HOOD: COUNTER++,
    PEASANT: COUNTER++,
    WINTER_HOOD: COUNTER++,
    WINTER_PEASANT: COUNTER++,
    FLOWER_HAT: COUNTER++,
    FUR_HAT: COUNTER++,
    SADDLE: COUNTER++,
    WITCH: COUNTER++,
    NIMBUS: COUNTER++,
    WAND1: COUNTER++,
    WAND2: COUNTER++,
    FIREFLY_ITEM: COUNTER++,
    WOOD_ARROW: COUNTER++,
    STONE_ARROW: COUNTER++,
    GOLD_ARROW: COUNTER++,
    DIAMOND_ARROW: COUNTER++,
    AMETHYST_ARROW: COUNTER++,
    REIDITE_ARROW: COUNTER++,
    DRAGON_ARROW: COUNTER++,
    STONES: COUNTER++,
    TREE: COUNTER++,
    PLANT: COUNTER++,
    GOLD: COUNTER++,
    DIAMOND: COUNTER++,
    WOOD_FIRE: COUNTER++,
    WORKBENCH: COUNTER++,
    PLANT_SEED: COUNTER++,
    MEAT: COUNTER++,
    COOKED_MEAT: COUNTER++,
    BIG_FIRE_WOOD: COUNTER++,
    FURNACE_OFF: COUNTER++,
    PAPER: COUNTER++,
    AMETHYST: COUNTER++,
    AMETHYST_WALL: COUNTER++,
    AMETHYST_SPIKE: COUNTER++,
    DOOR_AMETHYST_CLOSE: COUNTER++,
    BRIDGE: COUNTER++,
    SAND: COUNTER++,
    BOTTLE_FULL: COUNTER++,
    BOTTLE_EMPTY: COUNTER++,
    KRAKEN_SKIN: COUNTER++,
    WATERING_CAN: COUNTER++,
    FLOUR: COUNTER++,
    WHEAT_SEED: COUNTER++,
    COOKIE: COUNTER++,
    WILD_WHEAT: COUNTER++,
    WINDMILL: COUNTER++,
    CAKE: COUNTER++,
    FOODFISH: COUNTER++,
    FOODFISH_COOKED: COUNTER++,
    SCALES: COUNTER++,
    INV_GROUND: COUNTER++,
    PLOT: COUNTER++,
    INV_ICE: COUNTER++,
    INV_BREAD: COUNTER++,
    BREAD_OVEN_OFF: COUNTER++,
    INV_SANDWICH: COUNTER++,
    FUR_WINTER: COUNTER++,
    BLUE_CORD: COUNTER++,
    LOCK: COUNTER++,
    DRAGON_HEART: COUNTER++,
    LAVA_HEART: COUNTER++,
    RESURRECTION: COUNTER++,
    EMERALD_MACHINE: COUNTER++,
    EXTRACTOR_MACHINE_STONE: COUNTER++,
    EXTRACTOR_MACHINE_GOLD: COUNTER++,
    EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    LOCKPICK: COUNTER++,
    TOTEM: COUNTER++,
    SPIKE: COUNTER++,
    CORD: COUNTER++,
    WALL: COUNTER++,
    STONE_WALL: COUNTER++,
    GOLD_WALL: COUNTER++,
    DIAMOND_WALL: COUNTER++,
    DOOR_WOOD_CLOSE: COUNTER++,
    CHEST: COUNTER++,
    STONE_SPIKE: COUNTER++,
    GOLD_SPIKE: COUNTER++,
    DIAMOND_SPIKE: COUNTER++,
    DOOR_STONE_CLOSE: COUNTER++,
    DOOR_GOLD_CLOSE: COUNTER++,
    DOOR_DIAMOND_CLOSE: COUNTER++,
    FUR_WOLF: COUNTER++,
    INV_GEMME_BLUE: COUNTER++,
    INV_GEMME_GREEN: COUNTER++,
    INV_GEMME_ORANGE: COUNTER++,
    INV_SPECIAL_FUR: COUNTER++,
    INV_SPECIAL_FUR_2: COUNTER++,
    INV_BUCKET_FULL: COUNTER++,
    INV_BUCKET_EMPTY: COUNTER++,
    WELL_EMPTY: COUNTER++,
    SIGN: COUNTER++,
    DRAGON_CUBE: COUNTER++,
    DRAGON_ORB: COUNTER++,
    LAVA_CUBE: COUNTER++,
    LAVA_ORB: COUNTER++,
    PLANT_PUMPKIN: COUNTER++,
    PUMPKIN: COUNTER++,
    ROOF: COUNTER++,
    PLANT_GARLIC: COUNTER++,
    GARLIC: COUNTER++,
    PLANT_THORNBUSH: COUNTER++,
    THORNBUSH: COUNTER++,
    BANDAGE: COUNTER++,
    INV_CRAB_STICK: COUNTER++,
    INV_CRAB_LOOT: COUNTER++,
    BED: COUNTER++,
    SUGAR_CAN: COUNTER++,
    INV_CANDY: COUNTER++,
    GARLAND: COUNTER++,
    REIDITE: COUNTER++,
    MAGMA: COUNTER++,
    PLANT_CARROT: COUNTER++,
    CARROT: COUNTER++,
    PLANT_TOMATO: COUNTER++,
    TOMATO: COUNTER++,
    PLANT_WATERMELON: COUNTER++,
    WATERMELON: COUNTER++,
    PLANT_ALOE_VERA: COUNTER++,
    ALOE_VERA_GROWN: COUNTER++,
    WOOD_DOOR_SPIKE: COUNTER++,
    STONE_DOOR_SPIKE: COUNTER++,
    GOLD_DOOR_SPIKE: COUNTER++,
    DIAMOND_DOOR_SPIKE: COUNTER++,
    AMETHYST_DOOR_SPIKE: COUNTER++,
    REIDITE_WALL: COUNTER++,
    REIDITE_DOOR: COUNTER++,
    REIDITE_SPIKE: COUNTER++,
    REIDITE_DOOR_SPIKE: COUNTER++,
    WOOD_TOWER: COUNTER++,
    PENGUIN_FEATHER: COUNTER++,
    BOAT: COUNTER++,
    SLED: COUNTER++,
    BOAT_WAVE: COUNTER++,
    SLED_WAVE: COUNTER++,
    MOUNT_BOAR: COUNTER++,
    BOAR_STEP: COUNTER++,
    CRAB_STICK: COUNTER++,
    CRAB_LOOT: COUNTER++,
    CRAB_BOSS: COUNTER++,
    BABY_DRAGON: COUNTER++,
    BABY_LAVA: COUNTER++,
    CRAB_STEP: COUNTER++,
    HAWK: COUNTER++,
    PLANE: COUNTER++,
    HAWK_FEATHER: COUNTER++,
    VULTURE: COUNTER++,
    ALOE_VERA: COUNTER++,
    VULTURE_FEATHER: COUNTER++,
    EMERALD: COUNTER++,
    FUR_BOAR: COUNTER++,
    DECORATION: COUNTER++,
    FOD: COUNTER++,
    FIREFLY: COUNTER++,
    HURT_FIREFLY: COUNTER++,
    SPELL: COUNTER++,
    BABY_MAMMOTH: COUNTER++,
    BABY_MAMMOTH_STEP: COUNTER++,
    CRATE: COUNTER++,
    SEED: COUNTER++,
    INV_DRAGON_ORB: COUNTER++,
    INV_LAVA_ORB: COUNTER++,
    CRAFT_SWORD: COUNTER++,
    BODY: COUNTER++,
    CRAFT_PICK: COUNTER++,
    CRAFT_PICK_DIAMOND: COUNTER++,
    INV_PICK_GOLD: COUNTER++,
    MINIMAP: COUNTER++,
    SPIDER: COUNTER++,
    INV_SWORD: COUNTER++,
    CRAFT_WORK: COUNTER++,
    CRAFT_STONE_WALL: COUNTER++,
    RABBIT: COUNTER++,
    CRAFT_GOLD_WALL: COUNTER++,
    WEB: COUNTER++,
    GAUGES: COUNTER++,
    CRAFT_DOOR_WOOD_CLOSE: COUNTER++,
    CHEST_PLANT: COUNTER++,
    CHEST_GOLD: COUNTER++,
    CHEST_DIAMOND: COUNTER++,
    CHEST_PICK_GOLD: COUNTER++,
    CHEST_FIRE: COUNTER++,
    CHEST_PICK_WOOD: COUNTER++,
    CHEST_MEAT: COUNTER++,
    CHEST_BIG_FIRE: COUNTER++,
    INV_PLANT: COUNTER++,
    LEADERBOARD: COUNTER++,
    HURT: COUNTER++,
    COLD: COUNTER++,
    HUNGER: COUNTER++,
    GROUND_FIRE: COUNTER++,
    COUNTER: COUNTER++,
    CRAFT_SEED: COUNTER++,
    HERB: COUNTER++,
    HAND_SHADOW: COUNTER++,
    PLANT_MINI: COUNTER++,
    FIRE: COUNTER++,
    HALO_FIRE: COUNTER++,
    CRAFT_SWORD_GOLD: COUNTER++,
    CRAFT_SWORD_DIAMOND: COUNTER++,
    INV_SWORD_GOLD: COUNTER++,
    INV_SWORD_DIAMOND: COUNTER++,
    FRUIT: COUNTER++,
    CRAFT_PICK_GOLD: COUNTER++,
    INV_PICK_DIAMOND: COUNTER++,
    INV_GOLD: COUNTER++,
    INV_DIAMOND: COUNTER++,
    WOLF: COUNTER++,
    INV_MEAT: COUNTER++,
    GEAR2: COUNTER++,
    CRAFT_FIRE: COUNTER++,
    INV_BANDAGE: COUNTER++,
    CRAFT_BANDAGE: COUNTER++,
    INV_CORD: COUNTER++,
    YOUR_SCORE: COUNTER++,
    TREE_BRANCH: COUNTER++,
    HEAL: COUNTER++,
    INV_FIRE: COUNTER++,
    INV_WORK: COUNTER++,
    INV_SEED: COUNTER++,
    INV_PICK: COUNTER++,
    INV_PICK_WOOD: COUNTER++,
    CRAFT_PICK_WOOD: COUNTER++,
    INV_STONE: COUNTER++,
    INV_WOOD: COUNTER++,
    INV_WALL: COUNTER++,
    CRAFT_WALL: COUNTER++,
    INV_SPIKE: COUNTER++,
    CRAFT_SPIKE: COUNTER++,
    WHEAT_MOB: COUNTER++,
    HURT_RABBIT: COUNTER++,
    INV_COOKED_MEAT: COUNTER++,
    GEAR: COUNTER++,
    CRAFT_COOKED_MEAT: COUNTER++,
    HURT_WOLF: COUNTER++,
    CRAFT_BIG_FIRE: COUNTER++,
    INV_BIG_FIRE: COUNTER++,
    INV_STONE_WALL: COUNTER++,
    INV_GOLD_WALL: COUNTER++,
    INV_DIAMOND_WALL: COUNTER++,
    CRAFT_DIAMOND_WALL: COUNTER++,
    HURT_SPIDER: COUNTER++,
    EMPTY_SLOT: COUNTER++,
    INV_DOOR_WOOD_CLOSE: COUNTER++,
    DOOR_WOOD_OPEN: COUNTER++,
    INV_CHEST: COUNTER++,
    CRAFT_CHEST: COUNTER++,
    CHEST_SLOT: COUNTER++,
    CHEST_SWORD: COUNTER++,
    CHEST_PICK: COUNTER++,
    CHEST_STONE: COUNTER++,
    CHEST_WOOD: COUNTER++,
    CHEST_PICK_DIAMOND: COUNTER++,
    CHEST_SWORD_GOLD: COUNTER++,
    CHEST_SWORD_DIAMOND: COUNTER++,
    CHEST_WORK: COUNTER++,
    CHEST_SEED: COUNTER++,
    CHEST_WALL: COUNTER++,
    CHEST_SPIKE: COUNTER++,
    CHEST_COOKED_MEAT: COUNTER++,
    CHEST_BANDAGE: COUNTER++,
    CHEST_CORD: COUNTER++,
    CHEST_STONE_WALL: COUNTER++,
    CHEST_GOLD_WALL: COUNTER++,
    CHEST_DIAMOND_WALL: COUNTER++,
    CHEST_DOOR_WOOD_CLOSE: COUNTER++,
    CHEST_WORKBENCH: COUNTER++,
    CHEST_CHEST: COUNTER++,
    CRAFT_STONE_SPIKE: COUNTER++,
    INV_STONE_SPIKE: COUNTER++,
    INV_GOLD_SPIKE: COUNTER++,
    CRAFT_GOLD_SPIKE: COUNTER++,
    INV_DIAMOND_SPIKE: COUNTER++,
    CRAFT_DIAMOND_SPIKE: COUNTER++,
    CHEST_PLUS: COUNTER++,
    CRAFT_BAG: COUNTER++,
    INV_FUR: COUNTER++,
    INV_EARMUFFS: COUNTER++,
    CRAFT_EARMUFFS: COUNTER++,
    CRAFT_DOOR_STONE_CLOSE: COUNTER++,
    INV_DOOR_STONE_CLOSE: COUNTER++,
    DOOR_STONE_OPEN: COUNTER++,
    CRAFT_DOOR_GOLD_CLOSE: COUNTER++,
    INV_DOOR_GOLD_CLOSE: COUNTER++,
    DOOR_GOLD_OPEN: COUNTER++,
    CRAFT_DOOR_DIAMOND_CLOSE: COUNTER++,
    INV_DOOR_DIAMOND_CLOSE: COUNTER++,
    DOOR_DIAMOND_OPEN: COUNTER++,
    CRAFT_COAT: COUNTER++,
    INV_COAT: COUNTER++,
    CHEST_STONE_SPIKE: COUNTER++,
    CHEST_GOLD_SPIKE: COUNTER++,
    CHEST_DIAMOND_SPIKE: COUNTER++,
    CHEST_BAG: COUNTER++,
    CHEST_FUR: COUNTER++,
    CHEST_EARMUFFS: COUNTER++,
    CHEST_DOOR_STONE_CLOSE: COUNTER++,
    CHEST_DOOR_GOLD_CLOSE: COUNTER++,
    CHEST_DOOR_DIAMOND_CLOSE: COUNTER++,
    CHEST_COAT: COUNTER++,
    INV_BAG: COUNTER++,
    INV_FUR_WOLF: COUNTER++,
    CHEST_FUR_WOLF: COUNTER++,
    INV_SPEAR: COUNTER++,
    CRAFT_SPEAR: COUNTER++,
    CHEST_SPEAR: COUNTER++,
    INV_GOLD_SPEAR: COUNTER++,
    CRAFT_GOLD_SPEAR: COUNTER++,
    CHEST_GOLD_SPEAR: COUNTER++,
    INV_WOOD_SPEAR: COUNTER++,
    CRAFT_WOOD_SPEAR: COUNTER++,
    CHEST_WOOD_SPEAR: COUNTER++,
    INV_DIAMOND_SPEAR: COUNTER++,
    CRAFT_DIAMOND_SPEAR: COUNTER++,
    CHEST_DIAMOND_SPEAR: COUNTER++,
    FURNACE_ON: COUNTER++,
    INV_FURNACE: COUNTER++,
    CRAFT_FURNACE: COUNTER++,
    CHEST_FURNACE: COUNTER++,
    FURNACE_SLOT: COUNTER++,
    FURNACE_BUTTON: COUNTER++,
    FIR: COUNTER++,
    STONES_WINTER: COUNTER++,
    GOLD_WINTER: COUNTER++,
    DIAMOND_WINTER: COUNTER++,
    GROUND_FIRE_WINTER: COUNTER++,
    INV_AMETHYST: COUNTER++,
    FOX: COUNTER++,
    INV_EXPLORER_HAT: COUNTER++,
    CRAFT_EXPLORER_HAT: COUNTER++,
    CHEST_EXPLORER_HAT: COUNTER++,
    INV_PIRATE_HAT: COUNTER++,
    CRAFT_PIRATE_HAT: COUNTER++,
    CHEST_PIRATE_HAT: COUNTER++,
    INV_PILOT_HELMET: COUNTER++,
    CRAFT_PILOT_HELMET: COUNTER++,
    CHEST_PILOT_HELMET: COUNTER++,
    INV_STONE_HELMET: COUNTER++,
    CRAFT_STONE_HELMET: COUNTER++,
    CHEST_STONE_HELMET: COUNTER++,
    INV_GOLD_HELMET: COUNTER++,
    CRAFT_GOLD_HELMET: COUNTER++,
    CHEST_GOLD_HELMET: COUNTER++,
    INV_DIAMOND_HELMET: COUNTER++,
    CRAFT_DIAMOND_HELMET: COUNTER++,
    CHEST_DIAMOND_HELMET: COUNTER++,
    INV_BOOK: COUNTER++,
    CRAFT_BOOK: COUNTER++,
    CHEST_BOOK: COUNTER++,
    INV_PAPER: COUNTER++,
    CRAFT_PAPER: COUNTER++,
    CHEST_PAPER: COUNTER++,
    HERB_WINTER: COUNTER++,
    BEAR: COUNTER++,
    CHEST_AMETHYST: COUNTER++,
    SNOW: COUNTER++,
    DRAGON_GROUND: COUNTER++,
    DRAGON: COUNTER++,
    LAVA_DRAGON: COUNTER++,
    WING_LEFT: COUNTER++,
    WING_RIGHT: COUNTER++,
    LAVA_WING_LEFT: COUNTER++,
    LAVA_WING_RIGHT: COUNTER++,
    INV_SWORD_AMETHYST: COUNTER++,
    CRAFT_SWORD_AMETHYST: COUNTER++,
    CHEST_SWORD_AMETHYST: COUNTER++,
    INV_PICK_AMETHYST: COUNTER++,
    CHEST_PICK_AMETHYST: COUNTER++,
    CRAFT_PICK_AMETHYST: COUNTER++,
    HURT_FOX: COUNTER++,
    HURT_BEAR: COUNTER++,
    HURT_DRAGON: COUNTER++,
    HURT_LAVA_DRAGON: COUNTER++,
    SLOT_NUMBER: COUNTER++,
    HURT_WING_LEFT: COUNTER++,
    HURT_WING_RIGHT: COUNTER++,
    HURT_LAVA_WING_LEFT: COUNTER++,
    HURT_LAVA_WING_RIGHT: COUNTER++,
    FLAKES: COUNTER++,
    DESERT: COUNTER++,
    INV_AMETHYST_SPEAR: COUNTER++,
    CRAFT_AMETHYST_SPEAR: COUNTER++,
    CHEST_AMETHYST_SPEAR: COUNTER++,
    SNOW_STEP: COUNTER++,
    LAVA_STEP: COUNTER++,
    INV_HAMMER: COUNTER++,
    CRAFT_HAMMER: COUNTER++,
    CHEST_HAMMER: COUNTER++,
    INV_HAMMER_GOLD: COUNTER++,
    CRAFT_HAMMER_GOLD: COUNTER++,
    CHEST_HAMMER_GOLD: COUNTER++,
    INV_HAMMER_DIAMOND: COUNTER++,
    CRAFT_HAMMER_DIAMOND: COUNTER++,
    CHEST_HAMMER_DIAMOND: COUNTER++,
    INV_HAMMER_AMETHYST: COUNTER++,
    CRAFT_HAMMER_AMETHYST: COUNTER++,
    CHEST_HAMMER_AMETHYST: COUNTER++,
    INV_HAMMER_REIDITE: COUNTER++,
    CRAFT_HAMMER_REIDITE: COUNTER++,
    CHEST_HAMMER_REIDITE: COUNTER++,
    INV_AMETHYST_WALL: COUNTER++,
    CRAFT_AMETHYST_WALL: COUNTER++,
    CHEST_AMETHYST_WALL: COUNTER++,
    INV_AMETHYST_SPIKE: COUNTER++,
    CRAFT_AMETHYST_SPIKE: COUNTER++,
    CHEST_AMETHYST_SPIKE: COUNTER++,
    CRAFT_DOOR_AMETHYST_CLOSE: COUNTER++,
    INV_DOOR_AMETHYST_CLOSE: COUNTER++,
    DOOR_AMETHYST_OPEN: COUNTER++,
    CHEST_DOOR_AMETHYST_CLOSE: COUNTER++,
    INV_CAP_SCARF: COUNTER++,
    CRAFT_CAP_SCARF: COUNTER++,
    CHEST_CAP_SCARF: COUNTER++,
    INV_FUR_WINTER: COUNTER++,
    CHEST_FUR_WINTER: COUNTER++,
    SLOT_NUMBER: COUNTER++,
    DOOR_WOOD_OPEN_WINTER: COUNTER++,
    DOOR_STONE_OPEN_WINTER: COUNTER++,
    DOOR_GOLD_OPEN_WINTER: COUNTER++,
    DOOR_DIAMOND_OPEN_WINTER: COUNTER++,
    DOOR_AMETHYST_OPEN_WINTER: COUNTER++,
    INV_BLUE_CORD: COUNTER++,
    CHEST_BLUE_CORD: COUNTER++,
    CRAFT_BLUE_CORD: COUNTER++,
    BIGMAP: COUNTER++,
    SHOW_SPECTATORS: COUNTER++,
    INV_LOCK: COUNTER++,
    CRAFT_LOCK: COUNTER++,
    CHEST_LOCK: COUNTER++,
    INV_DRAGON_HEART: COUNTER++,
    CHEST_DRAGON_HEART: COUNTER++,
    INV_LAVA_HEART: COUNTER++,
    CHEST_LAVA_HEART: COUNTER++,
    RECONNECT: COUNTER++,
    RESURRECTION_GROUND: COUNTER++,
    RESURRECTION_HOLE: COUNTER++,
    RESURRECTION_ROTATE: COUNTER++,
    INV_RESURRECTION: COUNTER++,
    CRAFT_RESURRECTION: COUNTER++,
    CHEST_RESURRECTION: COUNTER++,
    INV_LOCKPICK: COUNTER++,
    CRAFT_LOCKPICK: COUNTER++,
    CHEST_LOCKPICK: COUNTER++,
    KEY: COUNTER++,
    PADLOCK: COUNTER++,
    DELAY_WEAPON: COUNTER++,
    LOCKED: COUNTER++,
    PADLOCK_ON_CHEST: COUNTER++,
    BUBBLES: COUNTER++,
    INV_AMETHYST_HELMET: COUNTER++,
    CRAFT_AMETHYST_HELMET: COUNTER++,
    CHEST_AMETHYST_HELMET: COUNTER++,
    SPECIAL_ITEMS: COUNTER++,
    POINTS: COUNTER++,
    AUTO_FEED: COUNTER++,
    BANDAGE_ACTIVATED: COUNTER++,
    STOP_REGENERATION: COUNTER++,
    STOP_REGENERATION_BLIZZARD: COUNTER++,
    INV_SUPER_HAMMER: COUNTER++,
    CRAFT_SUPER_HAMMER: COUNTER++,
    CHEST_SUPER_HAMMER: COUNTER++,
    INV_TOTEM: COUNTER++,
    CHEST_TOTEM: COUNTER++,
    CRAFT_TOTEM: COUNTER++,
    TEAM_BUTTON: COUNTER++,
    MANAGE_TEAM_BUTTON: COUNTER++,
    ICON_MEMBER: COUNTER++,
    ICON_LEADER: COUNTER++,
    FULL_TEAM_BUTTON: COUNTER++,
    SHOW_TEAM_BUTTON: COUNTER++,
    DELAY_TEAM: COUNTER++,
    INV_DRAGON_SWORD: COUNTER++,
    CRAFT_DRAGON_SWORD: COUNTER++,
    CHEST_DRAGON_SWORD: COUNTER++,
    INV_LAVA_SWORD: COUNTER++,
    CRAFT_LAVA_SWORD: COUNTER++,
    CHEST_LAVA_SWORD: COUNTER++,
    INV_WOOD_BOW: COUNTER++,
    CRAFT_WOOD_BOW: COUNTER++,
    CHEST_WOOD_BOW: COUNTER++,
    INV_STONE_BOW: COUNTER++,
    CRAFT_STONE_BOW: COUNTER++,
    CHEST_STONE_BOW: COUNTER++,
    INV_GOLD_BOW: COUNTER++,
    CRAFT_GOLD_BOW: COUNTER++,
    CHEST_GOLD_BOW: COUNTER++,
    INV_DIAMOND_BOW: COUNTER++,
    CRAFT_DIAMOND_BOW: COUNTER++,
    CHEST_DIAMOND_BOW: COUNTER++,
    INV_AMETHYST_BOW: COUNTER++,
    CRAFT_AMETHYST_BOW: COUNTER++,
    CHEST_AMETHYST_BOW: COUNTER++,
    INV_REIDITE_BOW: COUNTER++,
    CRAFT_REIDITE_BOW: COUNTER++,
    CHEST_REIDITE_BOW: COUNTER++,
    INV_DRAGON_BOW: COUNTER++,
    CRAFT_DRAGON_BOW: COUNTER++,
    CHEST_DRAGON_BOW: COUNTER++,
    CHEST_DRAGON_ORB: COUNTER++,
    CHEST_LAVA_ORB: COUNTER++,
    SHOP: COUNTER++,
    CURSED_SWORD: COUNTER++,
    INV_CURSED_SWORD: COUNTER++,
    CRAFT_CURSED_SWORD: COUNTER++,
    CHEST_CURSED_SWORD: COUNTER++,
    ITEM1: COUNTER++,
    ITEM2: COUNTER++,
    ITEM3: COUNTER++,
    ITEM4: COUNTER++,
    SAND_BORDER: COUNTER++,
    SAND_STEP: COUNTER++,
    OCEAN: COUNTER++,
    CRAFT_BRIDGE: COUNTER++,
    INV_BRIDGE: COUNTER++,
    CHEST_BRIDGE: COUNTER++,
    LACK: COUNTER++,
    OXYGEN: COUNTER++,
    INV_SAND: COUNTER++,
    CHEST_SAND: COUNTER++,
    CRAFT_BOTTLE_EMPTY: COUNTER++,
    INV_BOTTLE_EMPTY: COUNTER++,
    INV_BOTTLE_FULL: COUNTER++,
    CHEST_BOTTLE_EMPTY: COUNTER++,
    CHEST_BOTTLE_FULL: COUNTER++,
    INV_SHOVEL: COUNTER++,
    CHEST_SHOVEL: COUNTER++,
    CRAFT_SHOVEL: COUNTER++,
    LAKE_DEEP: COUNTER++,
    LAKE: COUNTER++,
    LAKE_EDGE: COUNTER++,
    SHINGLE: COUNTER++,
    DRIED_PLANT: COUNTER++,
    INV_KRAKEN_SKIN: COUNTER++,
    CHEST_KRAKEN_SKIN: COUNTER++,
    INV_WATERING_CAN: COUNTER++,
    CRAFT_WATERING_CAN: COUNTER++,
    CHEST_WATERING_CAN: COUNTER++,
    INV_FLOUR: COUNTER++,
    CHEST_FLOUR: COUNTER++,
    INV_WHEAT_SEED: COUNTER++,
    CRAFT_WHEAT_SEED: COUNTER++,
    CHEST_WHEAT_SEED: COUNTER++,
    INV_COOKIE: COUNTER++,
    CRAFT_COOKIE: COUNTER++,
    CHEST_COOKIE: COUNTER++,
    KRAKEN: COUNTER++,
    DRIED_WHEAT: COUNTER++,
    INV_WILD_WHEAT: COUNTER++,
    CHEST_WILD_WHEAT: COUNTER++,
    WINDMILL_WINGS: COUNTER++,
    WINDMILL_HEAD: COUNTER++,
    CRAFT_WINDMILL: COUNTER++,
    INV_WINDMILL: COUNTER++,
    CHEST_WINDMILL: COUNTER++,
    INV_SUPER_DIVING_SUIT: COUNTER++,
    CRAFT_SUPER_DIVING_SUIT: COUNTER++,
    CHEST_SUPER_DIVING_SUIT: COUNTER++,
    INV_DIVING_MASK: COUNTER++,
    CRAFT_DIVING_MASK: COUNTER++,
    CHEST_DIVING_MASK: COUNTER++,
    INV_WATERING_CAN_FULL: COUNTER++,
    CHEST_WATERING_CAN_FULL: COUNTER++,
    CRAFT_WATERING_CAN_FULL: COUNTER++,
    WINDMILL_CASES: COUNTER++,
    EXTRACTOR_CASES: COUNTER++,
    WINDMILL_WHEAT_SEED: COUNTER++,
    WINDMILL_FLOUR: COUNTER++,
    INV_CAKE: COUNTER++,
    CRAFT_CAKE: COUNTER++,
    CHEST_CAKE: COUNTER++,
    INV_FOODFISH: COUNTER++,
    CHEST_FOODFISH: COUNTER++,
    INV_FOODFISH_COOKED: COUNTER++,
    CHEST_FOODFISH_COOKED: COUNTER++,
    CRAFT_FOODFISH_COOKED: COUNTER++,
    DELAY_DRINK: COUNTER++,
    WHEAT_SEED_DRIED: COUNTER++,
    HEART_SYMBOL_HUD: COUNTER++,
    COLD_SYMBOL_HUD: COUNTER++,
    FOOD_SYMBOL_HUD: COUNTER++,
    WATER_SYMBOL_HUD: COUNTER++,
    PIRANHA: COUNTER++,
    INV_SCALES: COUNTER++,
    CHEST_SCALES: COUNTER++,
    CAVE_STONES: COUNTER++,
    HERB_CAVE: COUNTER++,
    WATERBLOCK: COUNTER++,
    SHADOW_CAVE_STONES: COUNTER++,
    CAVE_STEP: COUNTER++,
    DELAY_SPIKE: COUNTER++,
    CHEST_GROUND: COUNTER++,
    CHEST_PLOT: COUNTER++,
    CRAFT_PLOT: COUNTER++,
    INV_PLOT: COUNTER++,
    CHEST_ICE: COUNTER++,
    HURT_KRAKEN: COUNTER++,
    HURT_PIRANHA: COUNTER++,
    CHEST_BREAD: COUNTER++,
    CRAFT_BREAD: COUNTER++,
    TREASURE_CHEST: COUNTER++,
    ISLAND: COUNTER++,
    PALM: COUNTER++,
    WAVE_ONE: COUNTER++,
    WAVE_TWO: COUNTER++,
    ISLAND_BLOCK: COUNTER++,
    HURT_TREASURE_CHEST: COUNTER++,
    ISLAND_STEP: COUNTER++,
    INV_SHOVEL_GOLD: COUNTER++,
    CRAFT_SHOVEL_GOLD: COUNTER++,
    CHEST_SHOVEL_GOLD: COUNTER++,
    INV_SHOVEL_DIAMOND: COUNTER++,
    CHEST_SHOVEL_DIAMOND: COUNTER++,
    CRAFT_SHOVEL_DIAMOND: COUNTER++,
    INV_SHOVEL_AMETHYST: COUNTER++,
    CRAFT_SHOVEL_AMETHYST: COUNTER++,
    CHEST_SHOVEL_AMETHYST: COUNTER++,
    RECIPE_BUTTON: COUNTER++,
    INV_SPANNER: COUNTER++,
    CHEST_SPANNER: COUNTER++,
    CRAFT_SPANNER: COUNTER++,
    INV_MACHETE: COUNTER++,
    CHEST_MACHETE: COUNTER++,
    CRAFT_MACHETE: COUNTER++,
    CRAFT_BOTTLE_FULL: COUNTER++,
    BREAD_OVEN_ON: COUNTER++,
    INV_BREAD_OVEN: COUNTER++,
    CRAFT_BREAD_OVEN: COUNTER++,
    CHEST_BREAD_OVEN: COUNTER++,
    BREAD_LIGHT_UP: COUNTER++,
    BREAD_LIGHT_DOWN: COUNTER++,
    BREAD_OVEN_UI: COUNTER++,
    BREAD_OVEN_WOOD: COUNTER++,
    BREAD_OVEN_BREAD: COUNTER++,
    CLOCK: COUNTER++,
    ARROW_CLOCK: COUNTER++,
    OPTION_BUTTON: COUNTER++,
    DEAD_BOX: COUNTER++,
    HURT_DEAD_BOX: COUNTER++,
    CRAFT_SANDWICH: COUNTER++,
    CHEST_SANDWICH: COUNTER++,
    INV_DRAGON_HELMET: COUNTER++,
    CHEST_DRAGON_HELMET: COUNTER++,
    CRAFT_DRAGON_HELMET: COUNTER++,
    INV_LAVA_HELMET: COUNTER++,
    CHEST_LAVA_HELMET: COUNTER++,
    CRAFT_LAVA_HELMET: COUNTER++,
    INV_WITCH: COUNTER++,
    CHEST_WITCH: COUNTER++,
    CRAFT_WITCH: COUNTER++,
    INV_NIMBUS: COUNTER++,
    CHEST_NIMBUS: COUNTER++,
    CRAFT_NIMBUS: COUNTER++,
    INV_WAND1: COUNTER++,
    CHEST_WAND1: COUNTER++,
    CRAFT_WAND1: COUNTER++,
    INV_WAND2: COUNTER++,
    CHEST_WAND2: COUNTER++,
    CRAFT_WAND2: COUNTER++,
    DRAGON_SWORD_HALO: COUNTER++,
    INV_DRAGON_CUBE: COUNTER++,
    CHEST_DRAGON_CUBE: COUNTER++,
    INV_LAVA_CUBE: COUNTER++,
    CHEST_LAVA_CUBE: COUNTER++,
    QUEST_BUTTON: COUNTER++,
    INV_CROWN_GREEN: COUNTER++,
    CHEST_CROWN_GREEN: COUNTER++,
    CRAFT_CROWN_GREEN: COUNTER++,
    CHEST_GEMME_GREEN: COUNTER++,
    INV_CROWN_ORANGE: COUNTER++,
    CHEST_CROWN_ORANGE: COUNTER++,
    CRAFT_CROWN_ORANGE: COUNTER++,
    CHEST_GEMME_ORANGE: COUNTER++,
    INV_CROWN_BLUE: COUNTER++,
    CHEST_CROWN_BLUE: COUNTER++,
    CHEST_GEMME_BLUE: COUNTER++,
    INV_HOOD: COUNTER++,
    CRAFT_HOOD: COUNTER++,
    CHEST_HOOD: COUNTER++,
    CRAFT_CROWN_BLUE: COUNTER++,
    INV_PEASANT: COUNTER++,
    CRAFT_PEASANT: COUNTER++,
    CHEST_PEASANT: COUNTER++,
    CHEST_SPECIAL_FUR: COUNTER++,
    CHEST_SPECIAL_FUR_2: COUNTER++,
    INV_WINTER_PEASANT: COUNTER++,
    CRAFT_WINTER_PEASANT: COUNTER++,
    CHEST_WINTER_PEASANT: COUNTER++,
    INV_WINTER_HOOD: COUNTER++,
    CRAFT_WINTER_HOOD: COUNTER++,
    CHEST_WINTER_HOOD: COUNTER++,
    SOUND_BUTTON_ON: COUNTER++,
    SOUND_BUTTON_OFF: COUNTER++,
    CRAFT_BUCKET_FULL: COUNTER++,
    CRAFT_BUCKET_EMPTY: COUNTER++,
    CHEST_BUCKET_FULL: COUNTER++,
    CHEST_BUCKET_EMPTY: COUNTER++,
    WELL_FULL: COUNTER++,
    INV_WELL: COUNTER++,
    CHEST_WELL: COUNTER++,
    CRAFT_WELL: COUNTER++,
    DELAY_HELMET: COUNTER++,
    GLOVES_HOOD: COUNTER++,
    DELAY_WALL: COUNTER++,
    MARKET_BUTTON: COUNTER++,
    ACCESSORY: COUNTER++,
    MARKET_BGD: COUNTER++,
    DEAD_BOX_UI: COUNTER++,
    CRAFT_SIGN: COUNTER++,
    INV_SIGN: COUNTER++,
    CHEST_SIGN: COUNTER++,
    SYMBOLS: COUNTER++,
    SIGN_BUTTON: COUNTER++,
    TREE_WEB1: COUNTER++,
    TREE_WEB2: COUNTER++,
    TREE_BRANCH_WEB1: COUNTER++,
    TREE_BRANCH_WEB2: COUNTER++,
    INV_PUMPKIN_SEED: COUNTER++,
    CRAFT_PUMPKIN_SEED: COUNTER++,
    CHEST_PUMPKIN_SEED: COUNTER++,
    PUMPKIN_SEED_MOB: COUNTER++,
    PLANT_PUMPKIN_DRIED: COUNTER++,
    DRIED_PUMPKIN: COUNTER++,
    INV_PUMPKIN: COUNTER++,
    CHEST_PUMPKIN: COUNTER++,
    HALO_FIRE_PUMPKIN: COUNTER++,
    GROUND_FIRE_PUMPKIN: COUNTER++,
    MINIMAP_CTX: COUNTER++,
    BIGMAP_CTX: COUNTER++,
    ZOMBIE_BODY: COUNTER++,
    ZOMBIE_HEAD: COUNTER++,
    ZOMBIE_HAND: COUNTER++,
    ZOMBIE_HURT: COUNTER++,
    ZOMBIE_HUNGER: COUNTER++,
    ZOMBIE_HEAL: COUNTER++,
    INV_WOOD_HELMET: COUNTER++,
    CRAFT_WOOD_HELMET: COUNTER++,
    CHEST_WOOD_HELMET: COUNTER++,
    INV_SWORD_WOOD: COUNTER++,
    CRAFT_SWORD_WOOD: COUNTER++,
    CHEST_SWORD_WOOD: COUNTER++,
    ZOMBIE_PLAYER: COUNTER++,
    VAMPIRE: COUNTER++,
    INV_GARLIC_SEED: COUNTER++,
    CRAFT_GARLIC_SEED: COUNTER++,
    CHEST_GARLIC_SEED: COUNTER++,
    GARLIC_SEED_MOB: COUNTER++,
    PLANT_GARLIC_DRIED: COUNTER++,
    DRIED_GARLIC: COUNTER++,
    INV_GARLIC: COUNTER++,
    CHEST_GARLIC: COUNTER++,
    INV_ROOF: COUNTER++,
    CRAFT_ROOF: COUNTER++,
    CHEST_ROOF: COUNTER++,
    INV_THORNBUSH_SEED: COUNTER++,
    CRAFT_THORNBUSH_SEED: COUNTER++,
    CHEST_THORNBUSH_SEED: COUNTER++,
    THORNBUSH_SEED_MOB: COUNTER++,
    PLANT_THORNBUSH_DRIED: COUNTER++,
    INV_THORNBUSH: COUNTER++,
    CHEST_THORNBUSH: COUNTER++,
    CRAFT_THORNBUSH: COUNTER++,
    ROOFS: COUNTER++,
    GIFT: COUNTER++,
    TREE_SNOW1: COUNTER++,
    TREE_SNOW2: COUNTER++,
    TREE_BRANCH_SNOW1: COUNTER++,
    TREE_BRANCH_SNOW2: COUNTER++,
    HURT_GIFT: COUNTER++,
    INV_PIRATE_SWORD: COUNTER++,
    CRAFT_PIRATE_SWORD: COUNTER++,
    CHEST_PIRATE_SWORD: COUNTER++,
    CHEST_SUGAR_CAN: COUNTER++,
    CRAFT_SUGAR_CAN: COUNTER++,
    INV_SUGAR_CAN: COUNTER++,
    INV_FERRERO: COUNTER++,
    CHEST_FERRERO: COUNTER++,
    CHEST_CANDY: COUNTER++,
    DRIED_THORNBUSH: COUNTER++,
    INV_GARLAND: COUNTER++,
    CHEST_GARLAND: COUNTER++,
    GARLANDS: COUNTER++,
    GARLANDS_LIGHT: COUNTER++,
    INV_DRAGON_SPEAR: COUNTER++,
    CHEST_DRAGON_SPEAR: COUNTER++,
    CRAFT_DRAGON_SPEAR: COUNTER++,
    INV_LAVA_SPEAR: COUNTER++,
    CHEST_LAVA_SPEAR: COUNTER++,
    CRAFT_LAVA_SPEAR: COUNTER++,
    INV_CHRISTMAS_HAT: COUNTER++,
    CHEST_CHRISTMAS_HAT: COUNTER++,
    INV_ELF_HAT: COUNTER++,
    CHEST_ELF_HAT: COUNTER++,
    ROBOT_SKIN: COUNTER++,
    VERIFIED: COUNTER++,
    CRAB_ATTACK: COUNTER++,
    CRAB: COUNTER++,
    HURT_CRAB: COUNTER++,
    HURT_CRAB_CLAW_LEFT: COUNTER++,
    HURT_CRAB_CLAW_RIGHT: COUNTER++,
    HEAL_CRAB: COUNTER++,
    HEAL_CRAB_CLAW_LEFT: COUNTER++,
    HEAL_CRAB_CLAW_RIGHT: COUNTER++,
    CRAB_CLAW_LEFT: COUNTER++,
    CRAB_CLAW_RIGHT: COUNTER++,
    CRAB_CLAW_LEFT_ATTACK: COUNTER++,
    CRAB_CLAW_RIGHT_ATTACK: COUNTER++,
    CHEST_CRAB_STICK: COUNTER++,
    CHEST_CRAB_SPEAR: COUNTER++,
    CRAFT_CRAB_SPEAR: COUNTER++,
    INV_CRAB_SPEAR: COUNTER++,
    FISH1: COUNTER++,
    FISH2: COUNTER++,
    HURT_FISH1: COUNTER++,
    HURT_FISH2: COUNTER++,
    CHEST_CRAB_LOOT: COUNTER++,
    INV_BED: COUNTER++,
    CHEST_BED: COUNTER++,
    CRAFT_BED: COUNTER++,
    INV_CROWN_CRAB: COUNTER++,
    CHEST_CROWN_CRAB: COUNTER++,
    CRAFT_CROWN_CRAB: COUNTER++,
    BED_TOP: COUNTER++,
    HURT_RABBIT_SKIN: COUNTER++,
    COLD_RABBIT_SKIN: COUNTER++,
    HUNGER_RABBIT_SKIN: COUNTER++,
    HEAL_RABBIT_SKIN: COUNTER++,
    FIRE_MOB: COUNTER++,
    HURT_FIRE_MOB: COUNTER++,
    GLOVES_DIAMOND_PROTECTION: COUNTER++,
    INV_DIAMOND_PROTECTION: COUNTER++,
    CRAFT_DIAMOND_PROTECTION: COUNTER++,
    CHEST_DIAMOND_PROTECTION: COUNTER++,
    GLOVES_AMETHYST_PROTECTION: COUNTER++,
    INV_AMETHYST_PROTECTION: COUNTER++,
    CRAFT_AMETHYST_PROTECTION: COUNTER++,
    CHEST_AMETHYST_PROTECTION: COUNTER++,
    GLOVES_REIDITE_PROTECTION: COUNTER++,
    INV_REIDITE_PROTECTION: COUNTER++,
    CRAFT_REIDITE_PROTECTION: COUNTER++,
    CHEST_REIDITE_PROTECTION: COUNTER++,
    INV_REIDITE_SWORD: COUNTER++,
    CRAFT_REIDITE_SWORD: COUNTER++,
    CHEST_REIDITE_SWORD: COUNTER++,
    LAVA_SHINGLE: COUNTER++,
    INV_FLAME: COUNTER++,
    CHEST_FLAME: COUNTER++,
    INV_REIDITE: COUNTER++,
    CHEST_REIDITE: COUNTER++,
    HERB_LAVA: COUNTER++,
    LAVA_BUBBLE: COUNTER++,
    ASHES: COUNTER++,
    INV_REIDITE_SPEAR: COUNTER++,
    CRAFT_REIDITE_SPEAR: COUNTER++,
    CHEST_REIDITE_SPEAR: COUNTER++,
    INV_REIDITE_HELMET: COUNTER++,
    CRAFT_REIDITE_HELMET: COUNTER++,
    CHEST_REIDITE_HELMET: COUNTER++,
    INV_CARROT_SEED: COUNTER++,
    CRAFT_CARROT_SEED: COUNTER++,
    CHEST_CARROT_SEED: COUNTER++,
    CARROT_SEED_MOB: COUNTER++,
    PLANT_CARROT_DRIED: COUNTER++,
    DRIED_CARROT: COUNTER++,
    INV_CARROT: COUNTER++,
    CHEST_CARROT: COUNTER++,
    TOMATO_MINI: COUNTER++,
    DRIED_TOMATO_MINI: COUNTER++,
    INV_TOMATO_SEED: COUNTER++,
    CRAFT_TOMATO_SEED: COUNTER++,
    CHEST_TOMATO_SEED: COUNTER++,
    TOMATO_SEED_MOB: COUNTER++,
    PLANT_TOMATO_DRIED: COUNTER++,
    DRIED_TOMATO: COUNTER++,
    INV_TOMATO: COUNTER++,
    INV_WATERMELON_SEED: COUNTER++,
    CRAFT_WATERMELON_SEED: COUNTER++,
    CHEST_WATERMELON_SEED: COUNTER++,
    WATERMELON_SEED_MOB: COUNTER++,
    PLANT_WATERMELON_DRIED: COUNTER++,
    DRIED_WATERMELON: COUNTER++,
    INV_WATERMELON: COUNTER++,
    CHEST_WATERMELON: COUNTER++,
    CHEST_TOMATO: COUNTER++,
    INV_PITCHFORK: COUNTER++,
    CHEST_PITCHFORK: COUNTER++,
    CRAFT_PITCHFORK: COUNTER++,
    INV_PITCHFORK2: COUNTER++,
    CHEST_PITCHFORK2: COUNTER++,
    CRAFT_PITCHFORK2: COUNTER++,
    INV_ALOE_VERA_SEED: COUNTER++,
    CRAFT_ALOE_VERA_SEED: COUNTER++,
    CHEST_ALOE_VERA_SEED: COUNTER++,
    ALOE_VERA_SEED_MOB: COUNTER++,
    PLANT_ALOE_VERA_DRIED: COUNTER++,
    DRIED_ALOE_VERA: COUNTER++,
    INV_ALOE_VERA: COUNTER++,
    CHEST_ALOE_VERA: COUNTER++,
    CACTUS: COUNTER++,
    CRAFT_WOOD_DOOR_SPIKE: COUNTER++,
    INV_WOOD_DOOR_SPIKE: COUNTER++,
    CHEST_WOOD_DOOR_SPIKE: COUNTER++,
    CRAFT_STONE_DOOR_SPIKE: COUNTER++,
    INV_STONE_DOOR_SPIKE: COUNTER++,
    CHEST_STONE_DOOR_SPIKE: COUNTER++,
    CRAFT_GOLD_DOOR_SPIKE: COUNTER++,
    INV_GOLD_DOOR_SPIKE: COUNTER++,
    CHEST_GOLD_DOOR_SPIKE: COUNTER++,
    CRAFT_DIAMOND_DOOR_SPIKE: COUNTER++,
    INV_DIAMOND_DOOR_SPIKE: COUNTER++,
    CHEST_DIAMOND_DOOR_SPIKE: COUNTER++,
    CRAFT_AMETHYST_DOOR_SPIKE: COUNTER++,
    INV_AMETHYST_DOOR_SPIKE: COUNTER++,
    CHEST_AMETHYST_DOOR_SPIKE: COUNTER++,
    CRAFT_REIDITE_DOOR_SPIKE: COUNTER++,
    INV_REIDITE_DOOR_SPIKE: COUNTER++,
    CHEST_REIDITE_DOOR_SPIKE: COUNTER++,
    CRAFT_REIDITE_DOOR: COUNTER++,
    INV_REIDITE_DOOR: COUNTER++,
    CHEST_REIDITE_DOOR: COUNTER++,
    CRAFT_REIDITE_SPIKE: COUNTER++,
    INV_REIDITE_SPIKE: COUNTER++,
    CHEST_REIDITE_SPIKE: COUNTER++,
    CRAFT_REIDITE_WALL: COUNTER++,
    INV_REIDITE_WALL: COUNTER++,
    CHEST_REIDITE_WALL: COUNTER++,
    INV_PICK_REIDITE: COUNTER++,
    CHEST_PICK_REIDITE: COUNTER++,
    CRAFT_PICK_REIDITE: COUNTER++,
    GOLDEN_HEN: COUNTER++,
    GOLDEN_CHICKEN: COUNTER++,
    HURT_GOLDEN_HEN: COUNTER++,
    HURT_GOLDEN_CHICKEN: COUNTER++,
    RIVER: COUNTER++,
    RIVER_DECO: COUNTER++,
    RIVER_WAVE: COUNTER++,
    CRAFT_BOAT: COUNTER++,
    INV_BOAT: COUNTER++,
    CHEST_BOAT: COUNTER++,
    CRAFT_SLED: COUNTER++,
    INV_SLED: COUNTER++,
    CHEST_SLED: COUNTER++,
    PENGUIN: COUNTER++,
    HURT_PENGUIN: COUNTER++,
    INV_PENGUIN_FEATHER: COUNTER++,
    CHEST_PENGUIN_FEATHER: COUNTER++,
    INV_HAWK_FEATHER: COUNTER++,
    CHEST_HAWK_FEATHER: COUNTER++,
    INV_VULTURE_FEATHER: COUNTER++,
    CHEST_VULTURE_FEATHER: COUNTER++,
    FOG: COUNTER++,
    BOAR: COUNTER++,
    BOAR_TAMED: COUNTER++,
    BOAR_ATTACK: COUNTER++,
    HURT_BOAR: COUNTER++,
    INV_SADDLE: COUNTER++,
    CHEST_SADDLE: COUNTER++,
    CRAFT_SADDLE: COUNTER++,
    INV_MOUNT_BOAR: COUNTER++,
    CHEST_MOUNT_BOAR: COUNTER++,
    CRAFT_MOUNT_BOAR: COUNTER++,
    MARKER: COUNTER++,
    CRAB_BOSS_ATTACK: COUNTER++,
    CRAB_BOSS: COUNTER++,
    CRAB_BOSS_TAMED: COUNTER++,
    HURT_CRAB_BOSS: COUNTER++,
    HURT_CRAB_BOSS_CLAW_LEFT: COUNTER++,
    HURT_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
    CRAB_BOSS_CLAW_LEFT_ATTACK: COUNTER++,
    CRAB_BOSS_CLAW_LEFT: COUNTER++,
    CRAB_BOSS_CLAW_LEFT_TAMED: COUNTER++,
    CRAB_BOSS_CLAW_RIGHT_ATTACK: COUNTER++,
    CRAB_BOSS_CLAW_RIGHT: COUNTER++,
    CRAB_BOSS_CLAW_RIGHT_TAMED: COUNTER++,
    HEAL_CRAB_BOSS: COUNTER++,
    HEAL_CRAB_BOSS_CLAW_LEFT: COUNTER++,
    HEAL_CRAB_BOSS_CLAW_RIGHT: COUNTER++,
    BABY_DRAGON_ATTACK: COUNTER++,
    BABY_DRAGON: COUNTER++,
    BABY_DRAGON_TAMED: COUNTER++,
    BABY_DRAGON_WING_LEFT_ATTACK: COUNTER++,
    BABY_DRAGON_WING_LEFT: COUNTER++,
    BABY_DRAGON_WING_LEFT_TAMED: COUNTER++,
    BABY_DRAGON_WING_RIGHT_ATTACK: COUNTER++,
    BABY_DRAGON_WING_RIGHT: COUNTER++,
    BABY_DRAGON_WING_RIGHT_TAMED: COUNTER++,
    HURT_BABY_DRAGON: COUNTER++,
    HURT_BABY_DRAGON_WING_LEFT: COUNTER++,
    HURT_BABY_DRAGON_WING_RIGHT: COUNTER++,
    INV_BABY_DRAGON: COUNTER++,
    CHEST_BABY_DRAGON: COUNTER++,
    CRAFT_BABY_DRAGON: COUNTER++,
    BABY_LAVA_ATTACK: COUNTER++,
    BABY_LAVA: COUNTER++,
    BABY_LAVA_TAMED: COUNTER++,
    BABY_LAVA_WING_LEFT_ATTACK: COUNTER++,
    BABY_LAVA_WING_LEFT: COUNTER++,
    BABY_LAVA_WING_LEFT_TAMED: COUNTER++,
    BABY_LAVA_WING_RIGHT_ATTACK: COUNTER++,
    BABY_LAVA_WING_RIGHT: COUNTER++,
    BABY_LAVA_WING_RIGHT_TAMED: COUNTER++,
    HURT_BABY_LAVA: COUNTER++,
    HURT_BABY_LAVA_WING_LEFT: COUNTER++,
    HURT_BABY_LAVA_WING_RIGHT: COUNTER++,
    INV_BABY_LAVA: COUNTER++,
    CHEST_BABY_LAVA: COUNTER++,
    CRAFT_BABY_LAVA: COUNTER++,
    HAWK_ATTACK: COUNTER++,
    HAWK: COUNTER++,
    HAWK_TAMED: COUNTER++,
    HAWK_WING_LEFT_ATTACK: COUNTER++,
    HAWK_WING_LEFT: COUNTER++,
    HAWK_WING_LEFT_TAMED: COUNTER++,
    HAWK_WING_RIGHT_ATTACK: COUNTER++,
    HAWK_WING_RIGHT: COUNTER++,
    HAWK_WING_RIGHT_TAMED: COUNTER++,
    HURT_HAWK: COUNTER++,
    HURT_HAWK_WING_LEFT: COUNTER++,
    HURT_HAWK_WING_RIGHT: COUNTER++,
    INV_HAWK: COUNTER++,
    CHEST_HAWK: COUNTER++,
    CRAFT_HAWK: COUNTER++,
    HAWK_GROUND: COUNTER++,
    HAWK_GROUND_ATTACK: COUNTER++,
    HURT_HAWK_GROUND: COUNTER++,
    CRAFT_PLANE: COUNTER++,
    INV_PLANE: COUNTER++,
    CHEST_PLANE: COUNTER++,
    VULTURE_ATTACK: COUNTER++,
    VULTURE: COUNTER++,
    VULTURE_TAMED: COUNTER++,
    VULTURE_WING_LEFT_ATTACK: COUNTER++,
    VULTURE_WING_LEFT: COUNTER++,
    VULTURE_WING_LEFT_TAMED: COUNTER++,
    VULTURE_WING_RIGHT_ATTACK: COUNTER++,
    VULTURE_WING_RIGHT: COUNTER++,
    VULTURE_WING_RIGHT_TAMED: COUNTER++,
    HURT_VULTURE: COUNTER++,
    HURT_VULTURE_WING_LEFT: COUNTER++,
    HURT_VULTURE_WING_RIGHT: COUNTER++,
    INV_VULTURE: COUNTER++,
    CHEST_VULTURE: COUNTER++,
    CRAFT_VULTURE: COUNTER++,
    VULTURE_GROUND: COUNTER++,
    VULTURE_GROUND_ATTACK: COUNTER++,
    HURT_VULTURE_GROUND: COUNTER++,
    INV_TURBAN1: COUNTER++,
    CRAFT_TURBAN1: COUNTER++,
    CHEST_TURBAN1: COUNTER++,
    INV_TURBAN2: COUNTER++,
    CRAFT_TURBAN2: COUNTER++,
    CHEST_TURBAN2: COUNTER++,
    SCORPION: COUNTER++,
    HURT_SCORPION: COUNTER++,
    SCORPION_HAND_LEFT: COUNTER++,
    SCORPION_HAND_RIGHT: COUNTER++,
    HURT_SCORPION_HAND_LEFT: COUNTER++,
    HURT_SCORPION_HAND_RIGHT: COUNTER++,
    SAND_WORM_GROUND: ["#E9CF96", "#144940"],
    HURT_SAND_WORM0: COUNTER++,
    SAND_WORM1: COUNTER++,
    HURT_SAND_WORM1: COUNTER++,
    SAND_WORM2: COUNTER++,
    HURT_SAND_WORM2: COUNTER++,
    INV_CACTUS: COUNTER++,
    CHEST_CACTUS: COUNTER++,
    INV_EMERALD: COUNTER++,
    CHEST_EMERALD: COUNTER++,
    INV_PITCHFORK_PART: COUNTER++,
    CHEST_PITCHFORK_PART: COUNTER++,
    INV_PILOT_GLASSES: COUNTER++,
    CHEST_PILOT_GLASSES: COUNTER++,
    INV_FUR_BOAR: COUNTER++,
    CHEST_FUR_BOAR: COUNTER++,
    INV_FIREFLY: COUNTER++,
    CHEST_FIREFLY: COUNTER++,
    INV_WOOD_ARROW: COUNTER++,
    CHEST_WOOD_ARROW: COUNTER++,
    CRAFT_WOOD_ARROW: COUNTER++,
    INV_STONE_ARROW: COUNTER++,
    CHEST_STONE_ARROW: COUNTER++,
    CRAFT_STONE_ARROW: COUNTER++,
    INV_GOLD_ARROW: COUNTER++,
    CHEST_GOLD_ARROW: COUNTER++,
    CRAFT_GOLD_ARROW: COUNTER++,
    INV_DIAMOND_ARROW: COUNTER++,
    CHEST_DIAMOND_ARROW: COUNTER++,
    CRAFT_DIAMOND_ARROW: COUNTER++,
    INV_AMETHYST_ARROW: COUNTER++,
    CHEST_AMETHYST_ARROW: COUNTER++,
    CRAFT_AMETHYST_ARROW: COUNTER++,
    INV_REIDITE_ARROW: COUNTER++,
    CHEST_REIDITE_ARROW: COUNTER++,
    CRAFT_REIDITE_ARROW: COUNTER++,
    INV_DRAGON_ARROW: COUNTER++,
    CHEST_DRAGON_ARROW: COUNTER++,
    CRAFT_DRAGON_ARROW: COUNTER++,
    INV_SANDWORM_JUICE: COUNTER++,
    CHEST_SANDWORM_JUICE: COUNTER++,
    INV_CRAB_BOSS: COUNTER++,
    CHEST_CRAB_BOSS: COUNTER++,
    CRAFT_CRAB_BOSS: COUNTER++,
    EMERALD_MACHINE_GROUND: COUNTER++,
    EMERALD_MACHINE_HOLE: COUNTER++,
    EMERALD_MACHINE_ROTATE: COUNTER++,
    INV_EMERALD_MACHINE: COUNTER++,
    CRAFT_EMERALD_MACHINE: COUNTER++,
    CHEST_EMERALD_MACHINE: COUNTER++,
    EXTRACTOR_MACHINE0_STONE: COUNTER++,
    INV_EXTRACTOR_MACHINE_STONE: COUNTER++,
    CRAFT_EXTRACTOR_MACHINE_STONE: COUNTER++,
    CHEST_EXTRACTOR_MACHINE_STONE: COUNTER++,
    EXTRACTOR_MACHINE0_GOLD: COUNTER++,
    INV_EXTRACTOR_MACHINE_GOLD: COUNTER++,
    CRAFT_EXTRACTOR_MACHINE_GOLD: COUNTER++,
    CHEST_EXTRACTOR_MACHINE_GOLD: COUNTER++,
    EXTRACTOR_MACHINE0_DIAMOND: COUNTER++,
    INV_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    CRAFT_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    CHEST_EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    EXTRACTOR_MACHINE0_AMETHYST: COUNTER++,
    INV_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    CRAFT_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    CHEST_EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    EXTRACTOR_MACHINE0_REIDITE: COUNTER++,
    INV_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    CRAFT_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    CHEST_EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    MAMMOTH: COUNTER++,
    HURT_MAMMOTH: COUNTER++,
    BABY_MAMMOTH: COUNTER++,
    BABY_MAMMOTH_TAMED: COUNTER++,
    BABY_MAMMOTH_ATTACK: COUNTER++,
    HURT_BABY_MAMMOTH: COUNTER++,
    INV_BABY_MAMMOTH: COUNTER++,
    CHEST_BABY_MAMMOTH: COUNTER++,
    CRAFT_BABY_MAMMOTH: COUNTER++,
    INV_FLOWER_HAT: COUNTER++,
    CRAFT_FLOWER_HAT: COUNTER++,
    CHEST_FLOWER_HAT: COUNTER++,
    INV_FUR_HAT: COUNTER++,
    CRAFT_FUR_HAT: COUNTER++,
    CHEST_FUR_HAT: COUNTER++,
    INV_FUR_MAMMOTH: COUNTER++,
    CHEST_FUR_MAMMOTH: COUNTER++,
    CRAFT_WOOD_TOWER: COUNTER++,
    INV_WOOD_TOWER: COUNTER++,
    CHEST_WOOD_TOWER: COUNTER++,
    CRAFT_WOOD_SHIELD: COUNTER++,
    INV_WOOD_SHIELD: COUNTER++,
    CHEST_WOOD_SHIELD: COUNTER++,
    CRAFT_STONE_SHIELD: COUNTER++,
    INV_STONE_SHIELD: COUNTER++,
    CHEST_STONE_SHIELD: COUNTER++,
    CRAFT_GOLD_SHIELD: COUNTER++,
    INV_GOLD_SHIELD: COUNTER++,
    CHEST_GOLD_SHIELD: COUNTER++,
    CRAFT_DIAMOND_SHIELD: COUNTER++,
    INV_DIAMOND_SHIELD: COUNTER++,
    CHEST_DIAMOND_SHIELD: COUNTER++,
    CRAFT_AMETHYST_SHIELD: COUNTER++,
    INV_AMETHYST_SHIELD: COUNTER++,
    CHEST_AMETHYST_SHIELD: COUNTER++,
    CRAFT_REIDITE_SHIELD: COUNTER++,
    INV_REIDITE_SHIELD: COUNTER++,
    CHEST_REIDITE_SHIELD: COUNTER++,
  },
  COUNTER = 0,
  CRAFT = {
    FIRE: COUNTER++,
    BIG_FIRE: COUNTER++,
    FURNACE: COUNTER++,
    WORKBENCH: COUNTER++,
    PICK_WOOD: COUNTER++,
    PICK: COUNTER++,
    PICK_GOLD: COUNTER++,
    PICK_DIAMOND: COUNTER++,
    PICK_AMETHYST: COUNTER++,
    PICK_REIDITE: COUNTER++,
    HAMMER: COUNTER++,
    HAMMER_GOLD: COUNTER++,
    HAMMER_DIAMOND: COUNTER++,
    HAMMER_AMETHYST: COUNTER++,
    HAMMER_REIDITE: COUNTER++,
    SUPER_HAMMER: COUNTER++,
    SHOVEL: COUNTER++,
    SHOVEL_GOLD: COUNTER++,
    SHOVEL_DIAMOND: COUNTER++,
    SHOVEL_AMETHYST: COUNTER++,
    WATERING_CAN: COUNTER++,
    WATERING_CAN_FULL: COUNTER++,
    PITCHFORK: COUNTER++,
    PITCHFORK2: COUNTER++,
    BOOK: COUNTER++,
    WOOD_SPEAR: COUNTER++,
    SPEAR: COUNTER++,
    GOLD_SPEAR: COUNTER++,
    DIAMOND_SPEAR: COUNTER++,
    AMETHYST_SPEAR: COUNTER++,
    REIDITE_SPEAR: COUNTER++,
    DRAGON_SPEAR: COUNTER++,
    LAVA_SPEAR: COUNTER++,
    CRAB_SPEAR: COUNTER++,
    SWORD_WOOD: COUNTER++,
    SWORD: COUNTER++,
    SWORD_GOLD: COUNTER++,
    SWORD_DIAMOND: COUNTER++,
    SWORD_AMETHYST: COUNTER++,
    REIDITE_SWORD: COUNTER++,
    SEED: COUNTER++,
    WHEAT_SEED: COUNTER++,
    PUMPKIN_SEED: COUNTER++,
    GARLIC_SEED: COUNTER++,
    THORNBUSH_SEED: COUNTER++,
    CARROT_SEED: COUNTER++,
    TOMATO_SEED: COUNTER++,
    WATERMELON_SEED: COUNTER++,
    ALOE_VERA_SEED: COUNTER++,
    COOKED_MEAT: COUNTER++,
    FOODFISH_COOKED: COUNTER++,
    BREAD: COUNTER++,
    COOKIE: COUNTER++,
    CAKE: COUNTER++,
    BANDAGE: COUNTER++,
    WALL: COUNTER++,
    STONE_WALL: COUNTER++,
    GOLD_WALL: COUNTER++,
    DIAMOND_WALL: COUNTER++,
    AMETHYST_WALL: COUNTER++,
    REIDITE_WALL: COUNTER++,
    WOOD_DOOR: COUNTER++,
    STONE_DOOR: COUNTER++,
    GOLD_DOOR: COUNTER++,
    DIAMOND_DOOR: COUNTER++,
    AMETHYST_DOOR: COUNTER++,
    REIDITE_DOOR: COUNTER++,
    SPIKE: COUNTER++,
    STONE_SPIKE: COUNTER++,
    GOLD_SPIKE: COUNTER++,
    DIAMOND_SPIKE: COUNTER++,
    AMETHYST_SPIKE: COUNTER++,
    REIDITE_SPIKE: COUNTER++,
    WOOD_DOOR_SPIKE: COUNTER++,
    STONE_DOOR_SPIKE: COUNTER++,
    GOLD_DOOR_SPIKE: COUNTER++,
    DIAMOND_DOOR_SPIKE: COUNTER++,
    AMETHYST_DOOR_SPIKE: COUNTER++,
    REIDITE_DOOR_SPIKE: COUNTER++,
    CHEST: COUNTER++,
    EXPLORER_HAT: COUNTER++,
    PIRATE_HAT: COUNTER++,
    PILOT_HELMET: COUNTER++,
    EARMUFFS: COUNTER++,
    COAT: COUNTER++,
    CAP_SCARF: COUNTER++,
    FUR_HAT: COUNTER++,
    WOOD_HELMET: COUNTER++,
    STONE_HELMET: COUNTER++,
    GOLD_HELMET: COUNTER++,
    DIAMOND_HELMET: COUNTER++,
    AMETHYST_HELMET: COUNTER++,
    REIDITE_HELMET: COUNTER++,
    DIVING_MASK: COUNTER++,
    SUPER_DIVING_SUIT: COUNTER++,
    DIAMOND_PROTECTION: COUNTER++,
    AMETHYST_PROTECTION: COUNTER++,
    REIDITE_PROTECTION: COUNTER++,
    TURBAN1: COUNTER++,
    TURBAN2: COUNTER++,
    BAG: COUNTER++,
    PAPER: COUNTER++,
    BLUE_CORD: COUNTER++,
    LOCK: COUNTER++,
    LOCKPICK: COUNTER++,
    TOTEM: COUNTER++,
    BRIDGE: COUNTER++,
    ROOF: COUNTER++,
    WOOD_TOWER: COUNTER++,
    PLOT: COUNTER++,
    BOTTLE_EMPTY: COUNTER++,
    BOTTLE_FULL: COUNTER++,
    BOTTLE_FULL_2: COUNTER++,
    BOTTLE_FULL_3: COUNTER++,
    WINDMILL: COUNTER++,
    RESURRECTION: COUNTER++,
    EMERALD_MACHINE: COUNTER++,
    EXTRACTOR_MACHINE_STONE: COUNTER++,
    EXTRACTOR_MACHINE_GOLD: COUNTER++,
    EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    SPANNER: COUNTER++,
    MACHETE: COUNTER++,
    BREAD_OVEN: COUNTER++,
    SANDWICH: COUNTER++,
    DRAGON_HELMET: COUNTER++,
    LAVA_HELMET: COUNTER++,
    CROWN_CRAB: COUNTER++,
    DRAGON_SWORD: COUNTER++,
    LAVA_SWORD: COUNTER++,
    WOOD_BOW: COUNTER++,
    WOOD_ARROW: COUNTER++,
    STONE_BOW: COUNTER++,
    STONE_ARROW: COUNTER++,
    GOLD_BOW: COUNTER++,
    GOLD_ARROW: COUNTER++,
    DIAMOND_BOW: COUNTER++,
    DIAMOND_ARROW: COUNTER++,
    AMETHYST_BOW: COUNTER++,
    AMETHYST_ARROW: COUNTER++,
    REIDITE_BOW: COUNTER++,
    REIDITE_ARROW: COUNTER++,
    DRAGON_BOW: COUNTER++,
    DRAGON_ARROW: COUNTER++,
    WOOD_SHIELD: COUNTER++,
    STONE_SHIELD: COUNTER++,
    GOLD_SHIELD: COUNTER++,
    DIAMOND_SHIELD: COUNTER++,
    AMETHYST_SHIELD: COUNTER++,
    REIDITE_SHIELD: COUNTER++,
    CROWN_GREEN: COUNTER++,
    CROWN_ORANGE: COUNTER++,
    CROWN_BLUE: COUNTER++,
    HOOD: COUNTER++,
    PEASANT: COUNTER++,
    WINTER_HOOD: COUNTER++,
    WINTER_PEASANT: COUNTER++,
    BUCKET_FULL: COUNTER++,
    BUCKET_EMPTY: COUNTER++,
    WELL: COUNTER++,
    SIGN: COUNTER++,
    BED: COUNTER++,
    BOAT: COUNTER++,
    SLED: COUNTER++,
    SADDLE: COUNTER++,
    PLANE: COUNTER++,
    WITCH: COUNTER++,
    WAND1: COUNTER++,
    WAND2: COUNTER++,
    NIMBUS: COUNTER++,
  },
  COUNTER = 0,
  INV = {
    SWORD: COUNTER++,
    PICK: COUNTER++,
    FUR: COUNTER++,
    PICK_GOLD: COUNTER++,
    PICK_DIAMOND: COUNTER++,
    SWORD_GOLD: COUNTER++,
    SWORD_DIAMOND: COUNTER++,
    HAND: COUNTER++,
    PICK_WOOD: COUNTER++,
    PIRATE_SWORD: COUNTER++,
    EARMUFFS: COUNTER++,
    COAT: COUNTER++,
    WOOD_SPEAR: COUNTER++,
    SPEAR: COUNTER++,
    GOLD_SPEAR: COUNTER++,
    DIAMOND_SPEAR: COUNTER++,
    DRAGON_SPEAR: COUNTER++,
    LAVA_SPEAR: COUNTER++,
    CRAB_SPEAR: COUNTER++,
    REIDITE_SWORD: COUNTER++,
    DIAMOND_PROTECTION: COUNTER++,
    AMETHYST_PROTECTION: COUNTER++,
    REIDITE_PROTECTION: COUNTER++,
    EXPLORER_HAT: COUNTER++,
    PIRATE_HAT: COUNTER++,
    STONE_HELMET: COUNTER++,
    GOLD_HELMET: COUNTER++,
    DIAMOND_HELMET: COUNTER++,
    BOOK: COUNTER++,
    BAG: COUNTER++,
    SWORD_AMETHYST: COUNTER++,
    PICK_AMETHYST: COUNTER++,
    PICK_REIDITE: COUNTER++,
    AMETHYST_SPEAR: COUNTER++,
    REIDITE_SPEAR: COUNTER++,
    HAMMER: COUNTER++,
    HAMMER_GOLD: COUNTER++,
    HAMMER_DIAMOND: COUNTER++,
    HAMMER_AMETHYST: COUNTER++,
    HAMMER_REIDITE: COUNTER++,
    CAP_SCARF: COUNTER++,
    CHRISTMAS_HAT: COUNTER++,
    ELF_HAT: COUNTER++,
    AMETHYST_HELMET: COUNTER++,
    REIDITE_HELMET: COUNTER++,
    SUPER_HAMMER: COUNTER++,
    SHOVEL: COUNTER++,
    SUPER_DIVING_SUIT: COUNTER++,
    DIVING_MASK: COUNTER++,
    WATERING_CAN_FULL: COUNTER++,
    SHOVEL_GOLD: COUNTER++,
    SHOVEL_DIAMOND: COUNTER++,
    SHOVEL_AMETHYST: COUNTER++,
    PITCHFORK: COUNTER++,
    PITCHFORK2: COUNTER++,
    SPANNER: COUNTER++,
    MACHETE: COUNTER++,
    SWORD_WOOD: COUNTER++,
    WOOD_HELMET: COUNTER++,
    DRAGON_HELMET: COUNTER++,
    LAVA_HELMET: COUNTER++,
    CROWN_CRAB: COUNTER++,
    DRAGON_SWORD: COUNTER++,
    LAVA_SWORD: COUNTER++,
    WOOD_BOW: COUNTER++,
    STONE_BOW: COUNTER++,
    GOLD_BOW: COUNTER++,
    DIAMOND_BOW: COUNTER++,
    AMETHYST_BOW: COUNTER++,
    REIDITE_BOW: COUNTER++,
    DRAGON_BOW: COUNTER++,
    WOOD_SHIELD: COUNTER++,
    STONE_SHIELD: COUNTER++,
    GOLD_SHIELD: COUNTER++,
    DIAMOND_SHIELD: COUNTER++,
    AMETHYST_SHIELD: COUNTER++,
    REIDITE_SHIELD: COUNTER++,
    CROWN_GREEN: COUNTER++,
    CROWN_ORANGE: COUNTER++,
    CROWN_BLUE: COUNTER++,
    TURBAN1: COUNTER++,
    TURBAN2: COUNTER++,
    PILOT_HELMET: COUNTER++,
    HOOD: COUNTER++,
    PEASANT: COUNTER++,
    WINTER_HOOD: COUNTER++,
    WINTER_PEASANT: COUNTER++,
    FLOWER_HAT: COUNTER++,
    FUR_HAT: COUNTER++,
    SADDLE: COUNTER++,
    WITCH: COUNTER++,
    NIMBUS: COUNTER++,
    WAND1: COUNTER++,
    WAND2: COUNTER++,
    FIREFLY: COUNTER++,
    WOOD_ARROW: COUNTER++,
    STONE_ARROW: COUNTER++,
    GOLD_ARROW: COUNTER++,
    DIAMOND_ARROW: COUNTER++,
    AMETHYST_ARROW: COUNTER++,
    REIDITE_ARROW: COUNTER++,
    DRAGON_ARROW: COUNTER++,
    STONE: COUNTER++,
    WOOD: COUNTER++,
    PLANT: COUNTER++,
    GOLD: COUNTER++,
    DIAMOND: COUNTER++,
    FIRE: COUNTER++,
    WORKBENCH: COUNTER++,
    SEED: COUNTER++,
    MEAT: COUNTER++,
    COOKED_MEAT: COUNTER++,
    BIG_FIRE: COUNTER++,
    FURNACE: COUNTER++,
    PAPER: COUNTER++,
    AMETHYST: COUNTER++,
    AMETHYST_WALL: COUNTER++,
    AMETHYST_SPIKE: COUNTER++,
    AMETHYST_DOOR: COUNTER++,
    BRIDGE: COUNTER++,
    SAND: COUNTER++,
    BOTTLE_FULL: COUNTER++,
    BOTTLE_EMPTY: COUNTER++,
    KRAKEN_SKIN: COUNTER++,
    WATERING_CAN: COUNTER++,
    FLOUR: COUNTER++,
    WHEAT_SEED: COUNTER++,
    COOKIE: COUNTER++,
    WILD_WHEAT: COUNTER++,
    WINDMILL: COUNTER++,
    CAKE: COUNTER++,
    FOODFISH: COUNTER++,
    FOODFISH_COOKED: COUNTER++,
    SCALES: COUNTER++,
    GROUND: COUNTER++,
    PLOT: COUNTER++,
    ICE: COUNTER++,
    BREAD: COUNTER++,
    BREAD_OVEN: COUNTER++,
    SANDWICH: COUNTER++,
    FUR_WINTER: COUNTER++,
    BLUE_CORD: COUNTER++,
    LOCK: COUNTER++,
    DRAGON_HEART: COUNTER++,
    LAVA_HEART: COUNTER++,
    RESURRECTION: COUNTER++,
    EMERALD_MACHINE: COUNTER++,
    EXTRACTOR_MACHINE_STONE: COUNTER++,
    EXTRACTOR_MACHINE_GOLD: COUNTER++,
    EXTRACTOR_MACHINE_DIAMOND: COUNTER++,
    EXTRACTOR_MACHINE_AMETHYST: COUNTER++,
    EXTRACTOR_MACHINE_REIDITE: COUNTER++,
    LOCKPICK: COUNTER++,
    TOTEM: COUNTER++,
    SPIKE: COUNTER++,
    CORD: COUNTER++,
    WALL: COUNTER++,
    STONE_WALL: COUNTER++,
    GOLD_WALL: COUNTER++,
    DIAMOND_WALL: COUNTER++,
    WOOD_DOOR: COUNTER++,
    CHEST: COUNTER++,
    STONE_SPIKE: COUNTER++,
    GOLD_SPIKE: COUNTER++,
    DIAMOND_SPIKE: COUNTER++,
    STONE_DOOR: COUNTER++,
    GOLD_DOOR: COUNTER++,
    DIAMOND_DOOR: COUNTER++,
    FUR_WOLF: COUNTER++,
    GEMME_GREEN: COUNTER++,
    GEMME_ORANGE: COUNTER++,
    GEMME_BLUE: COUNTER++,
    SPECIAL_FUR: COUNTER++,
    SPECIAL_FUR_2: COUNTER++,
    BUCKET_FULL: COUNTER++,
    BUCKET_EMPTY: COUNTER++,
    WELL: COUNTER++,
    SIGN: COUNTER++,
    DRAGON_CUBE: COUNTER++,
    DRAGON_ORB: COUNTER++,
    LAVA_CUBE: COUNTER++,
    LAVA_ORB: COUNTER++,
    PUMPKIN_SEED: COUNTER++,
    PUMPKIN: COUNTER++,
    ROOF: COUNTER++,
    GARLIC_SEED: COUNTER++,
    GARLIC: COUNTER++,
    THORNBUSH_SEED: COUNTER++,
    THORNBUSH: COUNTER++,
    BANDAGE: COUNTER++,
    CRAB_STICK: COUNTER++,
    CRAB_LOOT: COUNTER++,
    BED: COUNTER++,
    SUGAR_CAN: COUNTER++,
    CANDY: COUNTER++,
    GARLAND: COUNTER++,
    REIDITE: COUNTER++,
    FLAME: COUNTER++,
    CARROT_SEED: COUNTER++,
    CARROT: COUNTER++,
    TOMATO_SEED: COUNTER++,
    TOMATO: COUNTER++,
    WATERMELON_SEED: COUNTER++,
    WATERMELON: COUNTER++,
    ALOE_VERA_SEED: COUNTER++,
    ALOE_VERA: COUNTER++,
    WOOD_DOOR_SPIKE: COUNTER++,
    STONE_DOOR_SPIKE: COUNTER++,
    GOLD_DOOR_SPIKE: COUNTER++,
    DIAMOND_DOOR_SPIKE: COUNTER++,
    AMETHYST_DOOR_SPIKE: COUNTER++,
    REIDITE_WALL: COUNTER++,
    REIDITE_DOOR: COUNTER++,
    REIDITE_SPIKE: COUNTER++,
    REIDITE_DOOR_SPIKE: COUNTER++,
    WOOD_TOWER: COUNTER++,
    PENGUIN_FEATHER: COUNTER++,
    BOAT: COUNTER++,
    SLED: COUNTER++,
    MOUNT_BOAR: COUNTER++,
    CRAB_BOSS: COUNTER++,
    BABY_DRAGON: COUNTER++,
    BABY_LAVA: COUNTER++,
    HAWK: COUNTER++,
    PLANE: COUNTER++,
    HAWK_FEATHER: COUNTER++,
    VULTURE_FEATHER: COUNTER++,
    CACTUS: COUNTER++,
    EMERALD: COUNTER++,
    PITCHFORK_PART: COUNTER++,
    PILOT_GLASSES: COUNTER++,
    FUR_BOAR: COUNTER++,
    SANDWORM_JUICE: COUNTER++,
    BABY_MAMMOTH: COUNTER++,
    FUR_MAMMOTH: COUNTER++,
  },
  CATEGORY = {
    TOOLS: 0,
    WEAPONS: 1,
    CLOTHES: 2,
    FOODS: 3,
    UTILS: 4,
    BASES: 5,
  },
  INV_INFOS = [];
INV_INFOS[INV.WOOD] = {
  name: "Wood",
  img: SPRITE.INV_WOOD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.STONE] = {
  name: "Stone",
  img: SPRITE.INV_STONE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GOLD] = {
  name: "Gold",
  img: SPRITE.INV_GOLD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DIAMOND] = {
  name: "Diamond",
  img: SPRITE.INV_DIAMOND,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.AMETHYST] = {
  name: "Amethyst",
  img: SPRITE.INV_AMETHYST,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FUR] = {
  name: "Rabbit fur",
  img: SPRITE.INV_FUR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FUR_WOLF] = {
  name: "Wolf fur",
  img: SPRITE.INV_FUR_WOLF,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FUR_BOAR] = {
  name: "Boar fur",
  img: SPRITE.INV_FUR_BOAR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FIREFLY] = {
  name: "Firefly",
  img: SPRITE.INV_FIREFLY,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WOOD_ARROW] = {
  name: "Wood arrow",
  img: SPRITE.INV_WOOD_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_ARROW] = {
  name: "Stone arrow",
  img: SPRITE.INV_STONE_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_ARROW] = {
  name: "Gold arrow",
  img: SPRITE.INV_GOLD_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_ARROW] = {
  name: "Diamond arrow",
  img: SPRITE.INV_DIAMOND_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_ARROW] = {
  name: "Amethyst arrow",
  img: SPRITE.INV_AMETHYST_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_ARROW] = {
  name: "Reidite arrow",
  img: SPRITE.INV_REIDITE_ARROW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DRAGON_ARROW] = {
  name: "Dragon arrow",
  img: SPRITE.INV_DRAGON_ARROW,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FUR_WINTER] = {
  name: "Winter fur",
  img: SPRITE.INV_FUR_WINTER,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FUR_MAMMOTH] = {
  name: "Fur mammoth",
  img: SPRITE.INV_FUR_MAMMOTH,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CORD] = {
  name: "Web",
  img: SPRITE.INV_CORD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.MEAT] = {
  name: "Meat",
  img: SPRITE.INV_MEAT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FOODFISH] = {
  name: "Fish",
  img: SPRITE.INV_FOODFISH,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.KRAKEN_SKIN] = {
  name: "Kraken skin",
  img: SPRITE.INV_KRAKEN_SKIN,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SCALES] = {
  name: "Piranha scales",
  img: SPRITE.INV_SCALES,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.ICE] = {
  name: "Ice",
  img: SPRITE.INV_ICE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SAND] = {
  name: "Sand",
  img: SPRITE.INV_SAND,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GROUND] = {
  name: "Dirt",
  img: SPRITE.INV_GROUND,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PLANT] = {
  name: "Berrie",
  img: SPRITE.INV_PLANT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FLOUR] = {
  name: "Flour",
  img: SPRITE.INV_FLOUR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WILD_WHEAT] = {
  name: "Flour",
  img: SPRITE.INV_WILD_WHEAT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SPECIAL_FUR] = {
  name: "Special fur peasant",
  img: SPRITE.INV_SPECIAL_FUR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SPECIAL_FUR_2] = {
  name: "Special fur hood",
  img: SPRITE.INV_SPECIAL_FUR_2,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PUMPKIN] = {
  name: "Pumpkin",
  img: SPRITE.INV_PUMPKIN,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GARLIC] = {
  name: "Garlic",
  img: SPRITE.INV_GARLIC,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.THORNBUSH] = {
  name: "Thornbush",
  img: SPRITE.INV_THORNBUSH,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CARROT] = {
  name: "Carrot",
  img: SPRITE.INV_CARROT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.TOMATO] = {
  name: "Tomato",
  img: SPRITE.INV_TOMATO,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WATERMELON] = {
  name: "Watermelon",
  img: SPRITE.INV_WATERMELON,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.ALOE_VERA] = {
  name: "Aloe Vera",
  img: SPRITE.INV_ALOE_VERA,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PENGUIN_FEATHER] = {
  name: "Penguin Feather",
  img: SPRITE.INV_PENGUIN_FEATHER,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.HAWK_FEATHER] = {
  name: "Hawk Feather",
  img: SPRITE.INV_HAWK_FEATHER,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.VULTURE_FEATHER] = {
  name: "Vulture Feather",
  img: SPRITE.INV_VULTURE_FEATHER,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CACTUS] = {
  name: "Cactus",
  img: SPRITE.INV_CACTUS,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PILOT_GLASSES] = {
  name: "Cactus",
  img: SPRITE.INV_PILOT_GLASSES,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PITCHFORK_PART] = {
  name: "Pitchfork Part",
  img: SPRITE.INV_PITCHFORK_PART,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SANDWORM_JUICE] = {
  name: "Emerald Machine",
  img: SPRITE.INV_SANDWORM_JUICE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.EMERALD] = {
  name: "Emerald",
  img: SPRITE.INV_EMERALD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CHRISTMAS_HAT] = {
  name: "Christmas Hat",
  img: SPRITE.INV_CHRISTMAS_HAT,
  recycle: 0,
};
INV_INFOS[INV.ELF_HAT] = {
  name: "Elf Hat",
  img: SPRITE.INV_ELF_HAT,
  recycle: 0,
};
INV_INFOS[INV.GARLAND] = {
  name: "Garland",
  img: SPRITE.INV_GARLAND,
  recycle: 0,
  grid: 0,
};
INV_INFOS[INV.CANDY] = {
  name: "Candy",
  img: SPRITE.INV_CANDY,
  recycle: 0,
};
INV_INFOS[INV.SUGAR_CAN] = {
  name: "Sugar Cane",
  img: SPRITE.INV_SUGAR_CAN,
  recycle: 0,
};
INV_INFOS[INV.PIRATE_SWORD] = {
  name: "Pirate Sword",
  img: SPRITE.INV_PIRATE_SWORD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CRAB_STICK] = {
  name: "Crab Stick",
  img: SPRITE.INV_CRAB_STICK,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.REIDITE] = {
  name: "Reidite",
  img: SPRITE.INV_REIDITE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FLAME] = {
  name: "Flame",
  img: SPRITE.INV_FLAME,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FIRE] = {
  name: "Campfire",
  img: SPRITE.CRAFT_FIRE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BED] = {
  name: "Bed",
  img: SPRITE.CRAFT_BED,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WORKBENCH] = {
  name: "Workbench",
  img: SPRITE.CRAFT_WORK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SWORD] = {
  name: "Stone sword",
  img: SPRITE.CRAFT_SWORD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PICK] = {
  name: "Stone pick",
  img: SPRITE.CRAFT_PICK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SEED] = {
  name: "Berries bush",
  img: SPRITE.CRAFT_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PICK_GOLD] = {
  name: "Gold pick",
  img: SPRITE.CRAFT_PICK_GOLD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PICK_DIAMOND] = {
  name: "Diamond pick",
  img: SPRITE.CRAFT_PICK_DIAMOND,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SWORD_WOOD] = {
  name: "Wood sword",
  img: SPRITE.CRAFT_SWORD_WOOD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SWORD_GOLD] = {
  name: "Gold sword",
  img: SPRITE.CRAFT_SWORD_GOLD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SWORD_DIAMOND] = {
  name: "Diamond sword",
  img: SPRITE.CRAFT_SWORD_DIAMOND,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PICK_WOOD] = {
  name: "Wood pick",
  img: SPRITE.CRAFT_PICK_WOOD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WALL] = {
  name: "Wood wall",
  img: SPRITE.CRAFT_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SPIKE] = {
  name: "Wood spike",
  img: SPRITE.CRAFT_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.COOKED_MEAT] = {
  name: "Cooked meat",
  img: SPRITE.CRAFT_COOKED_MEAT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BIG_FIRE] = {
  name: "Big campfire",
  img: SPRITE.CRAFT_BIG_FIRE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BANDAGE] = {
  name: "Bandage",
  img: SPRITE.CRAFT_BANDAGE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_WALL] = {
  name: "Stone wall",
  img: SPRITE.CRAFT_STONE_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_WALL] = {
  name: "Gold wall",
  img: SPRITE.CRAFT_GOLD_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_WALL] = {
  name: "Diamond wall",
  img: SPRITE.CRAFT_DIAMOND_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WOOD_DOOR] = {
  name: "Wood door",
  img: SPRITE.CRAFT_DOOR_WOOD_CLOSE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.CHEST] = {
  name: "Chest",
  img: SPRITE.CRAFT_CHEST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_SPIKE] = {
  name: "Stone spike",
  img: SPRITE.CRAFT_STONE_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_SPIKE] = {
  name: "Gold spike",
  img: SPRITE.CRAFT_GOLD_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_SPIKE] = {
  name: "Diamond spike",
  img: SPRITE.CRAFT_DIAMOND_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_DOOR] = {
  name: "Stone door",
  img: SPRITE.CRAFT_DOOR_STONE_CLOSE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_DOOR] = {
  name: "Gold door",
  img: SPRITE.CRAFT_DOOR_GOLD_CLOSE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_DOOR] = {
  name: "Diamond door",
  img: SPRITE.CRAFT_DOOR_DIAMOND_CLOSE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EARMUFFS] = {
  name: "Chapka",
  img: SPRITE.CRAFT_EARMUFFS,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.COAT] = {
  name: "Big Chapka",
  img: SPRITE.CRAFT_COAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WOOD_SPEAR] = {
  name: "Wood spear",
  img: SPRITE.CRAFT_WOOD_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SPEAR] = {
  name: "Stone spear",
  img: SPRITE.CRAFT_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_SPEAR] = {
  name: "Gold spear",
  img: SPRITE.CRAFT_GOLD_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_SPEAR] = {
  name: "Diamond spear",
  img: SPRITE.CRAFT_DIAMOND_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DRAGON_SPEAR] = {
  name: "Dragon spear",
  img: SPRITE.CRAFT_DRAGON_SPEAR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_SPEAR] = {
  name: "Dragon spear",
  img: SPRITE.CRAFT_LAVA_SPEAR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CRAB_SPEAR] = {
  name: "Crab spear",
  img: SPRITE.CRAFT_CRAB_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.CRAB_LOOT] = {
  name: "Crab loot",
  img: SPRITE.INV_CRAB_LOOT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FURNACE] = {
  name: "Furnace",
  img: SPRITE.CRAFT_FURNACE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EXPLORER_HAT] = {
  name: "Explorer hat",
  img: SPRITE.CRAFT_EXPLORER_HAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PIRATE_HAT] = {
  name: "Pirate hat",
  img: SPRITE.CRAFT_PIRATE_HAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.FLOWER_HAT] = {
  name: "Flower hat",
  img: SPRITE.CRAFT_FLOWER_HAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.FUR_HAT] = {
  name: "Fur hat",
  img: SPRITE.CRAFT_FUR_HAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WOOD_HELMET] = {
  name: "Wood helmet",
  img: SPRITE.CRAFT_WOOD_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_HELMET] = {
  name: "Stone helmet",
  img: SPRITE.CRAFT_STONE_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_HELMET] = {
  name: "Gold helmet",
  img: SPRITE.CRAFT_GOLD_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_HELMET] = {
  name: "Diamond helmet",
  img: SPRITE.CRAFT_DIAMOND_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BOOK] = {
  name: "Book",
  img: SPRITE.CRAFT_BOOK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PAPER] = {
  name: "Paper",
  img: SPRITE.CRAFT_PAPER,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BAG] = {
  name: "Bag",
  img: SPRITE.CRAFT_BAG,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SWORD_AMETHYST] = {
  name: "Amethyst sword",
  img: SPRITE.CRAFT_SWORD_AMETHYST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PICK_AMETHYST] = {
  name: "Amethyst pick",
  img: SPRITE.CRAFT_PICK_AMETHYST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_SPEAR] = {
  name: "Amethyst spear",
  img: SPRITE.CRAFT_AMETHYST_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.HAMMER] = {
  name: "Stone hammer",
  img: SPRITE.CRAFT_HAMMER,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.HAMMER_GOLD] = {
  name: "Gold hammer",
  img: SPRITE.CRAFT_HAMMER_GOLD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.HAMMER_DIAMOND] = {
  name: "Diamond hammer",
  img: SPRITE.CRAFT_HAMMER_DIAMOND,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.HAMMER_AMETHYST] = {
  name: "Amethyst hammer",
  img: SPRITE.CRAFT_HAMMER_AMETHYST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.HAMMER_REIDITE] = {
  name: "Reidite hammer",
  img: SPRITE.CRAFT_HAMMER_REIDITE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_WALL] = {
  name: "Amethyst wall",
  img: SPRITE.CRAFT_AMETHYST_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_SPIKE] = {
  name: "Amethyst spike",
  img: SPRITE.CRAFT_AMETHYST_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_DOOR] = {
  name: "Amethyst door",
  img: SPRITE.CRAFT_DOOR_AMETHYST_CLOSE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.CAP_SCARF] = {
  name: "Cap & scarf",
  img: SPRITE.CRAFT_CAP_SCARF,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BLUE_CORD] = {
  name: "Blue cord",
  img: SPRITE.CRAFT_BLUE_CORD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LOCK] = {
  name: "Lock",
  img: SPRITE.CRAFT_LOCK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.RESURRECTION] = {
  name: "Resurrection",
  img: SPRITE.CRAFT_RESURRECTION,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.LOCKPICK] = {
  name: "Lockpick",
  img: SPRITE.CRAFT_LOCKPICK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.TOTEM] = {
  name: "Totem",
  img: SPRITE.CRAFT_TOTEM,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_HELMET] = {
  name: "Amethyst helmet",
  img: SPRITE.CRAFT_AMETHYST_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SUPER_HAMMER] = {
  name: "Super hammer",
  img: SPRITE.CRAFT_SUPER_HAMMER,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BRIDGE] = {
  name: "Bridge",
  img: SPRITE.CRAFT_BRIDGE,
  grid: 1,
  recycle: 1,
};
INV_INFOS[INV.WOOD_TOWER] = {
  name: "Wood Tower",
  img: SPRITE.CRAFT_WOOD_TOWER,
  grid: 1,
  recycle: 1,
};
INV_INFOS[INV.BOTTLE_FULL] = {
  name: "Bottle full",
  img: SPRITE.CRAFT_BOTTLE_FULL,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BOTTLE_EMPTY] = {
  name: "Bottle empty",
  img: SPRITE.CRAFT_BOTTLE_EMPTY,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.SHOVEL] = {
  name: "Stone shovel",
  img: SPRITE.CRAFT_SHOVEL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WATERING_CAN] = {
  name: "Watering can",
  img: SPRITE.CRAFT_WATERING_CAN,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WHEAT_SEED] = {
  name: "Wheat",
  img: SPRITE.CRAFT_WHEAT_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.COOKIE] = {
  name: "Cookie",
  img: SPRITE.CRAFT_COOKIE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WINDMILL] = {
  name: "Windmill",
  img: SPRITE.CRAFT_WINDMILL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SUPER_DIVING_SUIT] = {
  name: "Super diving suit",
  img: SPRITE.CRAFT_SUPER_DIVING_SUIT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIVING_MASK] = {
  name: "Diving mask",
  img: SPRITE.CRAFT_DIVING_MASK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WATERING_CAN_FULL] = {
  name: "Watering can full",
  img: SPRITE.CRAFT_WATERING_CAN_FULL,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CAKE] = {
  name: "Cake",
  img: SPRITE.CRAFT_CAKE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.FOODFISH_COOKED] = {
  name: "Foodfish cooked",
  img: SPRITE.CRAFT_FOODFISH_COOKED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PLOT] = {
  name: "Plot",
  img: SPRITE.CRAFT_PLOT,
  grid: 1,
  recycle: 1,
};
INV_INFOS[INV.BREAD] = {
  name: "Bread",
  img: SPRITE.CRAFT_BREAD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BOTTLE_FULL_2] = {
  name: "Bottle full (with ice)",
  img: SPRITE.CRAFT_BOTTLE_FULL_2,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BOTTLE_FULL_3] = {
  name: "Bottle full (with well)",
  img: SPRITE.CRAFT_BOTTLE_FULL_3,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SHOVEL_GOLD] = {
  name: "Gold shovel",
  img: SPRITE.CRAFT_SHOVEL_GOLD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SHOVEL_DIAMOND] = {
  name: "Diamond shovel",
  img: SPRITE.CRAFT_SHOVEL_DIAMOND,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SHOVEL_AMETHYST] = {
  name: "Amethyst shovel",
  img: SPRITE.CRAFT_SHOVEL_AMETHYST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SPANNER] = {
  name: "Spanner",
  img: SPRITE.CRAFT_SPANNER,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.MACHETE] = {
  name: "Machete",
  img: SPRITE.CRAFT_MACHETE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BREAD_OVEN] = {
  name: "Bread oven",
  img: SPRITE.CRAFT_BREAD_OVEN,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SANDWICH] = {
  name: "Sandwich",
  img: SPRITE.CRAFT_SANDWICH,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DRAGON_HELMET] = {
  name: "Dragon helmet",
  img: SPRITE.CRAFT_DRAGON_HELMET,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_HELMET] = {
  name: "Dragon helmet",
  img: SPRITE.CRAFT_LAVA_HELMET,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WITCH] = {
  name: "Witch",
  img: SPRITE.CRAFT_WITCH,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.NIMBUS] = {
  name: "Nimbus",
  img: SPRITE.CRAFT_NIMBUS,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WAND1] = {
  name: "Wand1",
  img: SPRITE.CRAFT_WAND1,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WAND2] = {
  name: "Wand2",
  img: SPRITE.CRAFT_WAND2,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DRAGON_SWORD] = {
  name: "Dragon sword",
  img: SPRITE.CRAFT_DRAGON_SWORD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_SWORD] = {
  name: "Dragon sword",
  img: SPRITE.CRAFT_LAVA_SWORD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WOOD_SHIELD] = {
  name: "Wood shield",
  img: SPRITE.CRAFT_WOOD_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_SHIELD] = {
  name: "Stone shield",
  img: SPRITE.CRAFT_STONE_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_SHIELD] = {
  name: "Gold shield",
  img: SPRITE.CRAFT_GOLD_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_SHIELD] = {
  name: "Diamond shield",
  img: SPRITE.CRAFT_DIAMOND_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_SHIELD] = {
  name: "Amethyst shield",
  img: SPRITE.CRAFT_AMETHYST_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_SHIELD] = {
  name: "Reidite shield",
  img: SPRITE.CRAFT_REIDITE_SHIELD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WOOD_BOW] = {
  name: "Wood bow",
  img: SPRITE.CRAFT_WOOD_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_BOW] = {
  name: "Stone bow",
  img: SPRITE.CRAFT_STONE_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_BOW] = {
  name: "Gold bow",
  img: SPRITE.CRAFT_GOLD_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_BOW] = {
  name: "Diamond bow",
  img: SPRITE.CRAFT_DIAMOND_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_BOW] = {
  name: "Amethyst bow",
  img: SPRITE.CRAFT_AMETHYST_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_BOW] = {
  name: "Reidite bow",
  img: SPRITE.CRAFT_REIDITE_BOW,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DRAGON_BOW] = {
  name: "Dragon bow",
  img: SPRITE.CRAFT_DRAGON_BOW,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CROWN_GREEN] = {
  name: "Crown of life",
  img: SPRITE.CRAFT_CROWN_GREEN,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GEMME_GREEN] = {
  name: "Gem of life",
  img: SPRITE.INV_GEMME_GREEN,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DRAGON_ORB] = {
  name: "Orb of the dragon",
  img: SPRITE.INV_DRAGON_ORB,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_ORB] = {
  name: "Orb of the dragon",
  img: SPRITE.INV_LAVA_ORB,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DRAGON_CUBE] = {
  name: "Cube of the dragon",
  img: SPRITE.INV_DRAGON_CUBE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_CUBE] = {
  name: "Cube of the dragon",
  img: SPRITE.INV_LAVA_CUBE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CROWN_ORANGE] = {
  name: "Crown of luck",
  img: SPRITE.CRAFT_CROWN_ORANGE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GEMME_ORANGE] = {
  name: "Gem of luck",
  img: SPRITE.INV_GEMME_ORANGE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CROWN_BLUE] = {
  name: "Crown of the angel",
  img: SPRITE.CRAFT_CROWN_BLUE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GEMME_BLUE] = {
  name: "Gem of the angel",
  img: SPRITE.INV_GEMME_BLUE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.DRAGON_HEART] = {
  name: "Dragon heart",
  img: SPRITE.INV_DRAGON_HEART,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.LAVA_HEART] = {
  name: "Lava heart",
  img: SPRITE.INV_LAVA_HEART,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.HOOD] = {
  name: "Hood",
  img: SPRITE.CRAFT_HOOD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PEASANT] = {
  name: "Peasant",
  img: SPRITE.CRAFT_PEASANT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WINTER_PEASANT] = {
  name: "Winter peasant",
  img: SPRITE.CRAFT_WINTER_PEASANT,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WINTER_HOOD] = {
  name: "Winter hood",
  img: SPRITE.CRAFT_WINTER_HOOD,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BUCKET_FULL] = {
  name: "Bucket full",
  img: SPRITE.CRAFT_BUCKET_FULL,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BUCKET_EMPTY] = {
  name: "Bucket empty",
  img: SPRITE.CRAFT_BUCKET_EMPTY,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WELL] = {
  name: "Well",
  img: SPRITE.CRAFT_WELL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SIGN] = {
  name: "Sign",
  img: SPRITE.CRAFT_SIGN,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PUMPKIN_SEED] = {
  name: "Pumpkin Seed",
  img: SPRITE.CRAFT_PUMPKIN_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.GARLIC_SEED] = {
  name: "Garlic Seed",
  img: SPRITE.CRAFT_GARLIC_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.THORNBUSH_SEED] = {
  name: "Thorbushes Seed",
  img: SPRITE.CRAFT_THORNBUSH_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.ROOF] = {
  name: "Roof",
  img: SPRITE.CRAFT_ROOF,
  grid: 1,
  recycle: 1,
};
INV_INFOS[INV.CROWN_CRAB] = {
  name: "Crab Crown",
  img: SPRITE.CRAFT_CROWN_CRAB,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.CARROT_SEED] = {
  name: "Carrot Seed",
  img: SPRITE.CRAFT_CARROT_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.TOMATO_SEED] = {
  name: "Tomato Seed",
  img: SPRITE.CRAFT_TOMATO_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.WATERMELON_SEED] = {
  name: "Watermelon Seed",
  img: SPRITE.CRAFT_WATERMELON_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.ALOE_VERA_SEED] = {
  name: "Aloe Vera Seed",
  img: SPRITE.CRAFT_ALOE_VERA_SEED,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.TURBAN1] = {
  name: "Cap",
  img: SPRITE.CRAFT_TURBAN1,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.TURBAN2] = {
  name: "Turban",
  img: SPRITE.CRAFT_TURBAN2,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PILOT_HELMET] = {
  name: "Pilot Helmet",
  img: SPRITE.CRAFT_PILOT_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EMERALD_MACHINE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EMERALD_MACHINE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.EXTRACTOR_MACHINE_STONE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EXTRACTOR_MACHINE_GOLD] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EXTRACTOR_MACHINE_DIAMOND] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EXTRACTOR_MACHINE_AMETHYST] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.EXTRACTOR_MACHINE_REIDITE] = {
  name: "Emerald Machine",
  img: SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PITCHFORK] = {
  name: "Pitchfork",
  img: SPRITE.CRAFT_PITCHFORK,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.WOOD_DOOR_SPIKE] = {
  name: "Wood Door Spike",
  img: SPRITE.CRAFT_WOOD_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.STONE_DOOR_SPIKE] = {
  name: "Stone Door Spike",
  img: SPRITE.CRAFT_STONE_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.GOLD_DOOR_SPIKE] = {
  name: "Gold Door Spike",
  img: SPRITE.CRAFT_GOLD_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_DOOR_SPIKE] = {
  name: "Diamond Door Spike",
  img: SPRITE.CRAFT_DIAMOND_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_DOOR_SPIKE] = {
  name: "Amethyst Door Spike",
  img: SPRITE.CRAFT_AMETHYST_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.DIAMOND_PROTECTION] = {
  name: "Diamond Fire Protection ",
  img: SPRITE.CRAFT_DIAMOND_PROTECTION,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.AMETHYST_PROTECTION] = {
  name: "Amethyst Fire Protection ",
  img: SPRITE.CRAFT_AMETHYST_PROTECTION,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_PROTECTION] = {
  name: "Amethyst Fire Protection ",
  img: SPRITE.CRAFT_REIDITE_PROTECTION,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_SWORD] = {
  name: "Reidite Sword",
  img: SPRITE.CRAFT_REIDITE_SWORD,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_SPEAR] = {
  name: "Reidite Spear",
  img: SPRITE.CRAFT_REIDITE_SPEAR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_HELMET] = {
  name: "Reidite Helmet",
  img: SPRITE.CRAFT_REIDITE_HELMET,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_DOOR_SPIKE] = {
  name: "Reidite Door Spike",
  img: SPRITE.CRAFT_REIDITE_DOOR_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_DOOR] = {
  name: "Reidite Door",
  img: SPRITE.CRAFT_REIDITE_DOOR,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_SPIKE] = {
  name: "Reidite Spike",
  img: SPRITE.CRAFT_REIDITE_SPIKE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.REIDITE_WALL] = {
  name: "Reidite Wall",
  img: SPRITE.CRAFT_REIDITE_WALL,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.PICK_REIDITE] = {
  name: "Reidite pick",
  img: SPRITE.CRAFT_PICK_REIDITE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.BOAT] = {
  name: "Boat",
  img: SPRITE.CRAFT_BOAT,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SLED] = {
  name: "Sled",
  img: SPRITE.CRAFT_SLED,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.SADDLE] = {
  name: "Saddle",
  img: SPRITE.CRAFT_SADDLE,
  grid: 0,
  recycle: 1,
};
INV_INFOS[INV.MOUNT_BOAR] = {
  name: "Mount Boar",
  img: SPRITE.CRAFT_MOUNT_BOAR,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.CRAB_BOSS] = {
  name: "Mount King Crab",
  img: SPRITE.CRAFT_CRAB_BOSS,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BABY_DRAGON] = {
  name: "Mount Baby Dragon",
  img: SPRITE.CRAFT_BABY_DRAGON,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BABY_LAVA] = {
  name: "Mount Baby Lava",
  img: SPRITE.CRAFT_BABY_LAVA,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.HAWK] = {
  name: "Mount Hawk",
  img: SPRITE.CRAFT_HAWK,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PLANE] = {
  name: "Plane",
  img: SPRITE.CRAFT_PLANE,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.PITCHFORK2] = {
  name: "Pitchfork 2",
  img: SPRITE.CRAFT_PITCHFORK2,
  grid: 0,
  recycle: 0,
};
INV_INFOS[INV.BABY_MAMMOTH] = {
  name: "Baby Mammoth",
  img: SPRITE.CRAFT_BABY_MAMMOTH,
  grid: 0,
  recycle: 0,
};
var OLD_RECIPES = undefined,
  RECIPES = [
    {
      r: [
        [INV.WOOD, 25],
        [INV.STONE, 5],
      ],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.FIRE,
      id2: INV.FIRE,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.FIRE, 1],
        [INV.WOOD, 35],
        [INV.STONE, 10],
      ],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BIG_FIRE,
      id2: INV.BIG_FIRE,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 150],
        [INV.STONE, 50],
        [INV.GOLD, 15],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.FURNACE,
      id2: INV.FURNACE,
      time: 0.05,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 20],
        [INV.STONE, 10],
      ],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WORKBENCH,
      id2: INV.WORKBENCH,
      time: 0.16666666666666666,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 10]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK_WOOD,
      id2: INV.PICK_WOOD,
      time: 0.3333333333333333,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.PICK_WOOD, 1],
        [INV.WOOD, 50],
        [INV.STONE, 15],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK,
      id2: INV.PICK,
      time: 0.125,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 40],
        [INV.GOLD, 20],
        [INV.STONE, 30],
        [INV.PICK, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK_GOLD,
      id2: INV.PICK_GOLD,
      time: 0.08333333333333333,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.DIAMOND, 20],
        [INV.GOLD, 50],
        [INV.STONE, 80],
        [INV.PICK_GOLD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK_DIAMOND,
      id2: INV.PICK_DIAMOND,
      time: 0.05,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.DIAMOND, 40],
        [INV.GOLD, 60],
        [INV.AMETHYST, 30],
        [INV.PICK_DIAMOND, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK_AMETHYST,
      id2: INV.PICK_AMETHYST,
      time: 0.016666666666666666,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.AMETHYST, 30],
        [INV.DIAMOND, 40],
        [INV.REIDITE, 30],
        [INV.PICK_AMETHYST, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PICK_REIDITE,
      id2: INV.PICK_REIDITE,
      time: 0.011111111111111112,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 90],
        [INV.STONE, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HAMMER,
      id2: INV.HAMMER,
      time: 0.1,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 160],
        [INV.STONE, 120],
        [INV.GOLD, 80],
        [INV.HAMMER, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HAMMER_GOLD,
      id2: INV.HAMMER_GOLD,
      time: 0.06666666666666667,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.DIAMOND, 80],
        [INV.STONE, 200],
        [INV.GOLD, 150],
        [INV.HAMMER_GOLD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HAMMER_DIAMOND,
      id2: INV.HAMMER_DIAMOND,
      time: 0.05,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.DIAMOND, 160],
        [INV.AMETHYST, 60],
        [INV.GOLD, 250],
        [INV.HAMMER_DIAMOND, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HAMMER_AMETHYST,
      id2: INV.HAMMER_AMETHYST,
      time: 0.016666666666666666,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.AMETHYST, 160],
        [INV.REIDITE, 60],
        [INV.DIAMOND, 250],
        [INV.HAMMER_AMETHYST, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HAMMER_REIDITE,
      id2: INV.HAMMER_REIDITE,
      time: 0.011111111111111112,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.HAMMER_REIDITE, 1],
        [INV.BOTTLE_FULL, 1],
        [INV.KRAKEN_SKIN, 1],
        [INV.SCALES, 10],
        [INV.AMETHYST, 20],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.SUPER_HAMMER,
      id2: INV.SUPER_HAMMER,
      time: 0.008333333333333333,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 30],
        [INV.STONE, 15],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SHOVEL,
      id2: INV.SHOVEL,
      time: 0.2,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.SHOVEL, 1],
        [INV.GOLD, 20],
        [INV.STONE, 30],
        [INV.WOOD, 40],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SHOVEL_GOLD,
      id2: INV.SHOVEL_GOLD,
      time: 0.1,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.SHOVEL_GOLD, 1],
        [INV.DIAMOND, 20],
        [INV.GOLD, 50],
        [INV.STONE, 80],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SHOVEL_DIAMOND,
      id2: INV.SHOVEL_DIAMOND,
      time: 0.05,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.SHOVEL_DIAMOND, 1],
        [INV.GOLD, 60],
        [INV.AMETHYST, 30],
        [INV.DIAMOND, 40],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SHOVEL_AMETHYST,
      id2: INV.SHOVEL_AMETHYST,
      time: 0.025,
      t: CATEGORY.TOOLS,
    },
    {
      r: [[INV.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WATERING_CAN,
      id2: INV.WATERING_CAN,
      time: 0.2,
      t: CATEGORY.TOOLS,
    },
    {
      r: [[INV.WATERING_CAN, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: CRAFT.WATERING_CAN_FULL,
      id2: INV.WATERING_CAN_FULL,
      time: 0.2,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 100],
        [INV.STONE, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PITCHFORK,
      id2: INV.PITCHFORK,
      time: 0.1,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.PITCHFORK, 1],
        [INV.PITCHFORK_PART, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PITCHFORK2,
      id2: INV.PITCHFORK2,
      time: 0.016666666666666666,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.PAPER, 4],
        [INV.CORD, 4],
        [INV.FUR_WOLF, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BOOK,
      id2: INV.BOOK,
      time: 0.06666666666666667,
      t: CATEGORY.TOOLS,
    },
    {
      r: [[INV.WOOD, 40]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_SPEAR,
      id2: INV.WOOD_SPEAR,
      time: 0.2,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD_SPEAR, 1],
        [INV.WOOD, 60],
        [INV.STONE, 10],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SPEAR,
      id2: INV.SPEAR,
      time: 0.1,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD, 80],
        [INV.GOLD, 30],
        [INV.STONE, 30],
        [INV.SPEAR, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_SPEAR,
      id2: INV.GOLD_SPEAR,
      t: CATEGORY.WEAPONS,
      time: 0.05,
    },
    {
      r: [
        [INV.WOOD, 200],
        [INV.DIAMOND, 40],
        [INV.GOLD, 60],
        [INV.GOLD_SPEAR, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_SPEAR,
      id2: INV.DIAMOND_SPEAR,
      time: 0.03333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.AMETHYST, 40],
        [INV.DIAMOND, 80],
        [INV.GOLD, 90],
        [INV.DIAMOND_SPEAR, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_SPEAR,
      id2: INV.AMETHYST_SPEAR,
      time: 0.016666666666666666,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.REIDITE, 40],
        [INV.AMETHYST, 80],
        [INV.DIAMOND, 90],
        [INV.AMETHYST_SPEAR, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_SPEAR,
      id2: INV.REIDITE_SPEAR,
      time: 0.011111111111111112,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.BLUE_CORD, 20],
        [INV.DRAGON_ORB, 1],
        [INV.AMETHYST, 100],
        [INV.DRAGON_HEART, 3],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.DRAGON_SPEAR,
      id2: INV.DRAGON_SPEAR,
      time: 0.008333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DRAGON_SPEAR, 1],
        [INV.LAVA_ORB, 1],
        [INV.REIDITE, 100],
        [INV.LAVA_HEART, 2],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.LAVA_SPEAR,
      id2: INV.LAVA_SPEAR,
      time: 0.005,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD_SPEAR, 1],
        [INV.CRAB_LOOT, 5],
        [INV.CORD, 6],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.CRAB_SPEAR,
      id2: INV.CRAB_SPEAR,
      time: 0.03333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [[INV.WOOD, 30]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SWORD_WOOD,
      id2: INV.SWORD_WOOD,
      time: 0.2,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD, 50],
        [INV.STONE, 25],
        [INV.SWORD_WOOD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SWORD,
      id2: INV.SWORD,
      time: 0.1,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD, 60],
        [INV.GOLD, 40],
        [INV.STONE, 50],
        [INV.SWORD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SWORD_GOLD,
      id2: INV.SWORD_GOLD,
      time: 0.05,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND, 40],
        [INV.GOLD, 60],
        [INV.STONE, 80],
        [INV.SWORD_GOLD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SWORD_DIAMOND,
      id2: INV.SWORD_DIAMOND,
      time: 0.03333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND, 60],
        [INV.GOLD, 100],
        [INV.AMETHYST, 40],
        [INV.SWORD_DIAMOND, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SWORD_AMETHYST,
      id2: INV.SWORD_AMETHYST,
      time: 0.016666666666666666,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND, 100],
        [INV.AMETHYST, 80],
        [INV.REIDITE, 40],
        [INV.SWORD_AMETHYST, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_SWORD,
      id2: INV.REIDITE_SWORD,
      time: 0.011111111111111112,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [[INV.PLANT, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.SEED,
      id2: INV.SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.WILD_WHEAT, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.WHEAT_SEED,
      id2: INV.WHEAT_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.PUMPKIN, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.PUMPKIN_SEED,
      id2: INV.PUMPKIN_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.GARLIC, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.GARLIC_SEED,
      id2: INV.GARLIC_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.THORNBUSH, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.THORNBUSH_SEED,
      id2: INV.THORNBUSH_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.CARROT, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.CARROT_SEED,
      id2: INV.CARROT_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.TOMATO, 8]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.TOMATO_SEED,
      id2: INV.TOMATO_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.WATERMELON, 16]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.WATERMELON_SEED,
      id2: INV.WATERMELON_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.ALOE_VERA, 16]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.ALOE_VERA_SEED,
      id2: INV.ALOE_VERA_SEED,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.MEAT, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.COOKED_MEAT,
      id2: INV.COOKED_MEAT,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.FOODFISH, 1]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.FOODFISH_COOKED,
      id2: INV.FOODFISH_COOKED,
      time: 0.3333333333333333,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.FLOUR, 3]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.BREAD,
      id2: INV.BREAD,
      time: 0.3333333333333333,
      t: CATEGORY.FOODS,
    },
    {
      r: [
        [INV.FLOUR, 3],
        [INV.PLANT, 1],
      ],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.COOKIE,
      id2: INV.COOKIE,
      time: 0.3333333333333333,
      t: CATEGORY.FOODS,
    },
    {
      r: [
        [INV.FLOUR, 5],
        [INV.PLANT, 2],
        [INV.ICE, 2],
      ],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.CAKE,
      id2: INV.CAKE,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.CORD, 2]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BANDAGE,
      id2: INV.BANDAGE,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 20]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WALL,
      id2: INV.WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.WALL, 1],
        [INV.STONE, 17],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_WALL,
      id2: INV.STONE_WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.STONE_WALL, 1],
        [INV.GOLD, 14],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_WALL,
      id2: INV.GOLD_WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.GOLD_WALL, 1],
        [INV.DIAMOND, 11],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_WALL,
      id2: INV.DIAMOND_WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.DIAMOND_WALL, 1],
        [INV.AMETHYST, 8],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_WALL,
      id2: INV.AMETHYST_WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.AMETHYST_WALL, 1],
        [INV.REIDITE, 5],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_WALL,
      id2: INV.REIDITE_WALL,
      time: 0.2,
      t: CATEGORY.BASES,
    },
    {
      r: [[INV.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_DOOR,
      id2: INV.WOOD_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.WOOD_DOOR, 1],
        [INV.STONE, 27],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_DOOR,
      id2: INV.STONE_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.STONE_DOOR, 1],
        [INV.GOLD, 24],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_DOOR,
      id2: INV.GOLD_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.GOLD_DOOR, 1],
        [INV.DIAMOND, 21],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_DOOR,
      id2: INV.DIAMOND_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.DIAMOND_DOOR, 1],
        [INV.AMETHYST, 18],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_DOOR,
      id2: INV.AMETHYST_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.AMETHYST_DOOR, 1],
        [INV.REIDITE, 15],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_DOOR,
      id2: INV.REIDITE_DOOR,
      time: 0.125,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.WALL, 1],
        [INV.WOOD, 40],
        [INV.STONE, 30],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SPIKE,
      id2: INV.SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.STONE_WALL, 1],
        [INV.STONE, 70],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_SPIKE,
      id2: INV.STONE_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.GOLD_WALL, 1],
        [INV.GOLD, 40],
        [INV.STONE, 30],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_SPIKE,
      id2: INV.GOLD_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.DIAMOND_WALL, 1],
        [INV.DIAMOND, 40],
        [INV.STONE, 30],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_SPIKE,
      id2: INV.DIAMOND_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.AMETHYST_WALL, 1],
        [INV.AMETHYST, 40],
        [INV.STONE, 30],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_SPIKE,
      id2: INV.AMETHYST_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.REIDITE_WALL, 1],
        [INV.REIDITE, 40],
        [INV.GOLD, 30],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_SPIKE,
      id2: INV.REIDITE_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.WOOD_DOOR, 1],
        [INV.WOOD, 80],
        [INV.STONE, 60],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_DOOR_SPIKE,
      id2: INV.WOOD_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.STONE_DOOR, 1],
        [INV.STONE, 140],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_DOOR_SPIKE,
      id2: INV.STONE_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.GOLD_DOOR, 1],
        [INV.GOLD, 80],
        [INV.STONE, 60],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_DOOR_SPIKE,
      id2: INV.GOLD_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.DIAMOND_DOOR, 1],
        [INV.DIAMOND, 80],
        [INV.STONE, 60],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_DOOR_SPIKE,
      id2: INV.DIAMOND_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.AMETHYST_DOOR, 1],
        [INV.AMETHYST, 80],
        [INV.STONE, 60],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_DOOR_SPIKE,
      id2: INV.AMETHYST_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.REIDITE_DOOR, 1],
        [INV.REIDITE, 80],
        [INV.GOLD, 60],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_DOOR_SPIKE,
      id2: INV.REIDITE_DOOR_SPIKE,
      time: 0.05,
      t: CATEGORY.BASES,
    },
    {
      r: [
        [INV.WOOD, 25],
        [INV.GOLD, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.CHEST,
      id2: INV.CHEST,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.PAPER, 1],
        [INV.FUR, 1],
        [INV.CORD, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXPLORER_HAT,
      id2: INV.EXPLORER_HAT,
      time: 0.2,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.PAPER, 5],
        [INV.PENGUIN_FEATHER, 20],
        [INV.BLUE_CORD, 5],
        [INV.FUR, 5],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PIRATE_HAT,
      id2: INV.PIRATE_HAT,
      time: 0.03333333333333333,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.PILOT_GLASSES, 1],
        [INV.HAWK_FEATHER, 8],
        [INV.VULTURE_FEATHER, 8],
        [INV.PENGUIN_FEATHER, 8],
        [INV.CORD, 6],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PILOT_HELMET,
      id2: INV.PILOT_HELMET,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.FUR, 1],
        [INV.CORD, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EARMUFFS,
      id2: INV.EARMUFFS,
      time: 0.2,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.EARMUFFS, 1],
        [INV.FUR_WOLF, 5],
        [INV.CORD, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.COAT,
      id2: INV.COAT,
      time: 0.08333333333333333,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.COAT, 1],
        [INV.FUR_WINTER, 5],
        [INV.BLUE_CORD, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.CAP_SCARF,
      id2: INV.CAP_SCARF,
      time: 0.03333333333333333,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.CAP_SCARF, 1],
        [INV.FUR_WINTER, 5],
        [INV.FUR_MAMMOTH, 10],
        [INV.BLUE_CORD, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.FUR_HAT,
      id2: INV.FUR_HAT,
      time: 0.02,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [[INV.WOOD, 50]],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_HELMET,
      id2: INV.WOOD_HELMET,
      time: 0.2,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.STONE, 75],
        [INV.WOOD, 75],
        [INV.WOOD_HELMET, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_HELMET,
      id2: INV.STONE_HELMET,
      time: 0.1,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.STONE, 90],
        [INV.WOOD, 90],
        [INV.GOLD, 90],
        [INV.STONE_HELMET, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_HELMET,
      id2: INV.GOLD_HELMET,
      time: 0.05,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.STONE, 100],
        [INV.GOLD, 100],
        [INV.DIAMOND, 100],
        [INV.GOLD_HELMET, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_HELMET,
      id2: INV.DIAMOND_HELMET,
      time: 0.03333333333333333,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.AMETHYST, 80],
        [INV.GOLD, 150],
        [INV.DIAMOND, 120],
        [INV.DIAMOND_HELMET, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_HELMET,
      id2: INV.AMETHYST_HELMET,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.REIDITE, 80],
        [INV.DIAMOND, 150],
        [INV.AMETHYST, 120],
        [INV.AMETHYST_HELMET, 1],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_HELMET,
      id2: INV.REIDITE_HELMET,
      time: 0.011111111111111112,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.SCALES, 2],
        [INV.DIAMOND, 40],
        [INV.CORD, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIVING_MASK,
      id2: INV.DIVING_MASK,
      time: 0.05,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.DIVING_MASK, 1],
        [INV.GOLD, 80],
        [INV.KRAKEN_SKIN, 1],
        [INV.AMETHYST, 20],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SUPER_DIVING_SUIT,
      id2: INV.SUPER_DIVING_SUIT,
      time: 0.011111111111111112,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.FLAME, 5],
        [INV.DIAMOND, 50],
        [INV.BLUE_CORD, 5],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_PROTECTION,
      id2: INV.DIAMOND_PROTECTION,
      time: 0.05,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.DIAMOND_PROTECTION, 1],
        [INV.FLAME, 10],
        [INV.AMETHYST, 50],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_PROTECTION,
      id2: INV.AMETHYST_PROTECTION,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.AMETHYST_PROTECTION, 1],
        [INV.FLAME, 15],
        [INV.AMETHYST, 50],
        [INV.REIDITE, 50],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_PROTECTION,
      id2: INV.REIDITE_PROTECTION,
      time: 0.011111111111111112,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.CORD, 4],
        [INV.FUR_BOAR, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.TURBAN1,
      id2: INV.TURBAN1,
      time: 0.06666666666666667,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.TURBAN1, 1],
        [INV.CORD, 6],
        [INV.FUR_BOAR, 4],
        [INV.VULTURE_FEATHER, 12],
        [INV.PENGUIN_FEATHER, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.TURBAN2,
      id2: INV.TURBAN2,
      time: 0.006666666666666667,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.CORD, 6],
        [INV.FUR_WOLF, 5],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BAG,
      id2: INV.BAG,
      time: 0.06666666666666667,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [[INV.WOOD, 20]],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.PAPER,
      id2: INV.PAPER,
      time: 0.3333333333333333,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.DIAMOND, 1],
        [INV.CORD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BLUE_CORD,
      id2: INV.BLUE_CORD,
      time: 0.3333333333333333,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.GOLD, 10]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.LOCK,
      id2: INV.LOCK,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.GOLD, 250]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.LOCKPICK,
      id2: INV.LOCKPICK,
      time: 0.016666666666666666,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 50]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.TOTEM,
      id2: INV.TOTEM,
      time: 0.1,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 15]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BRIDGE,
      id2: INV.BRIDGE,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.ROOF,
      id2: INV.ROOF,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 120]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_TOWER,
      id2: INV.WOOD_TOWER,
      time: 0.06666666666666667,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 20],
        [INV.GROUND, 15],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PLOT,
      id2: INV.PLOT,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.SAND, 25]],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.BOTTLE_EMPTY,
      id2: INV.BOTTLE_EMPTY,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.BOTTLE_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: CRAFT.BOTTLE_FULL,
      id2: INV.BOTTLE_FULL,
      time: 0.2,
      t: CATEGORY.FOODS,
    },
    {
      r: [
        [INV.ICE, 20],
        [INV.BOTTLE_EMPTY, 1],
      ],
      w: 0,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.BOTTLE_FULL_2,
      id2: INV.BOTTLE_FULL,
      time: 0.1,
      t: CATEGORY.FOODS,
    },
    {
      r: [[INV.BOTTLE_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 0,
      e: 1,
      id: CRAFT.BOTTLE_FULL_3,
      id2: INV.BOTTLE_FULL,
      time: 0.3333333333333333,
      t: CATEGORY.FOODS,
    },
    {
      r: [
        [INV.WOOD, 60],
        [INV.STONE, 20],
        [INV.CORD, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WINDMILL,
      id2: INV.WINDMILL,
      time: 0.1,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.DIAMOND, 40],
        [INV.STONE, 45],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.RESURRECTION,
      id2: INV.RESURRECTION,
      time: 0.05,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.RESURRECTION, 1],
        [INV.EMERALD, 40],
        [INV.SANDWORM_JUICE, 1],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.EMERALD_MACHINE,
      id2: INV.EMERALD_MACHINE,
      time: 0.005,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 50],
        [INV.STONE, 100],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXTRACTOR_MACHINE_STONE,
      id2: INV.EXTRACTOR_MACHINE_STONE,
      time: 0.011111111111111112,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.STONE, 60],
        [INV.GOLD, 120],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXTRACTOR_MACHINE_GOLD,
      id2: INV.EXTRACTOR_MACHINE_GOLD,
      time: 0.011111111111111112,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.GOLD, 70],
        [INV.DIAMOND, 140],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXTRACTOR_MACHINE_DIAMOND,
      id2: INV.EXTRACTOR_MACHINE_DIAMOND,
      time: 0.011111111111111112,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.DIAMOND, 80],
        [INV.AMETHYST, 160],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXTRACTOR_MACHINE_AMETHYST,
      id2: INV.EXTRACTOR_MACHINE_AMETHYST,
      time: 0.011111111111111112,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.AMETHYST, 90],
        [INV.REIDITE, 180],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.EXTRACTOR_MACHINE_REIDITE,
      id2: INV.EXTRACTOR_MACHINE_REIDITE,
      time: 0.011111111111111112,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.STONE, 70]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SPANNER,
      id2: INV.SPANNER,
      time: 0.1,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.STONE, 70],
        [INV.WOOD, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.MACHETE,
      id2: INV.MACHETE,
      time: 0.1,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 40],
        [INV.STONE, 40],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BREAD_OVEN,
      id2: INV.BREAD_OVEN,
      time: 0.1,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.BREAD, 1],
        [INV.COOKED_MEAT, 1],
      ],
      w: 0,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SANDWICH,
      id2: INV.SANDWICH,
      time: 0.3333333333333333,
      t: CATEGORY.FOODS,
    },
    {
      r: [
        [INV.BLUE_CORD, 30],
        [INV.DRAGON_CUBE, 1],
        [INV.AMETHYST, 150],
        [INV.DRAGON_HEART, 3],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.DRAGON_HELMET,
      id2: INV.DRAGON_HELMET,
      time: 0.008333333333333333,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.DRAGON_HELMET, 1],
        [INV.LAVA_CUBE, 1],
        [INV.REIDITE, 150],
        [INV.LAVA_HEART, 2],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.LAVA_HELMET,
      id2: INV.LAVA_HELMET,
      time: 0.005555555555555556,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.GOLD_HELMET, 1],
        [INV.CRAB_LOOT, 10],
        [INV.CRAB_STICK, 10],
        [INV.CORD, 10],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.CROWN_CRAB,
      id2: INV.CROWN_CRAB,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.BLUE_CORD, 20],
        [INV.DRAGON_ORB, 1],
        [INV.AMETHYST, 150],
        [INV.DRAGON_HEART, 3],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.DRAGON_SWORD,
      id2: INV.DRAGON_SWORD,
      time: 0.008333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DRAGON_SWORD, 1],
        [INV.LAVA_ORB, 1],
        [INV.REIDITE, 150],
        [INV.LAVA_HEART, 2],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.LAVA_SWORD,
      id2: INV.LAVA_SWORD,
      time: 0.005555555555555556,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD, 100],
        [INV.CORD, 4],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_BOW,
      id2: INV.WOOD_BOW,
      time: 0.05,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [[INV.WOOD, 30]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_ARROW,
      id2: INV.WOOD_ARROW,
      time: 0.2,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.STONE, 200],
        [INV.CORD, 8],
        [INV.PENGUIN_FEATHER, 4],
        [INV.WOOD_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_BOW,
      id2: INV.STONE_BOW,
      time: 0.04,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.STONE, 20],
        [INV.HAWK_FEATHER, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_ARROW,
      id2: INV.STONE_ARROW,
      time: 0.2,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.GOLD, 200],
        [INV.CORD, 12],
        [INV.HAWK_FEATHER, 4],
        [INV.PENGUIN_FEATHER, 4],
        [INV.STONE_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_BOW,
      id2: INV.GOLD_BOW,
      time: 0.03333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.GOLD, 20],
        [INV.PENGUIN_FEATHER, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_ARROW,
      id2: INV.GOLD_ARROW,
      time: 0.1,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND, 200],
        [INV.BLUE_CORD, 10],
        [INV.HAWK_FEATHER, 8],
        [INV.PENGUIN_FEATHER, 8],
        [INV.GOLD_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_BOW,
      id2: INV.DIAMOND_BOW,
      time: 0.02857142857142857,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND, 10],
        [INV.PENGUIN_FEATHER, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_ARROW,
      id2: INV.DIAMOND_ARROW,
      time: 0.1,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.AMETHYST, 200],
        [INV.BLUE_CORD, 10],
        [INV.PENGUIN_FEATHER, 8],
        [INV.VULTURE_FEATHER, 8],
        [INV.DIAMOND_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_BOW,
      id2: INV.AMETHYST_BOW,
      time: 0.025,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.AMETHYST, 10],
        [INV.VULTURE_FEATHER, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_ARROW,
      id2: INV.AMETHYST_ARROW,
      time: 0.06666666666666667,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.REIDITE, 200],
        [INV.BLUE_CORD, 10],
        [INV.KRAKEN_SKIN, 1],
        [INV.AMETHYST_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_BOW,
      id2: INV.REIDITE_BOW,
      time: 0.022222222222222223,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.REIDITE, 10],
        [INV.VULTURE_FEATHER, 1],
        [INV.FLAME, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_ARROW,
      id2: INV.REIDITE_ARROW,
      time: 0.06666666666666667,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.EMERALD, 200],
        [INV.BLUE_CORD, 10],
        [INV.DRAGON_ORB, 1],
        [INV.REIDITE_BOW, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DRAGON_BOW,
      id2: INV.DRAGON_BOW,
      time: 0.02,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.EMERALD, 10],
        [INV.SANDWORM_JUICE, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DRAGON_ARROW,
      id2: INV.DRAGON_ARROW,
      time: 0.05,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [[INV.WOOD, 100]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WOOD_SHIELD,
      id2: INV.WOOD_SHIELD,
      time: 0.04,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.WOOD_SHIELD, 1],
        [INV.STONE, 100],
        [INV.WOOD, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.STONE_SHIELD,
      id2: INV.STONE_SHIELD,
      time: 0.025,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.STONE_SHIELD, 1],
        [INV.GOLD, 50],
        [INV.STONE, 50],
        [INV.WOOD, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.GOLD_SHIELD,
      id2: INV.GOLD_SHIELD,
      time: 0.02,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.GOLD_SHIELD, 1],
        [INV.DIAMOND, 50],
        [INV.GOLD, 50],
        [INV.STONE, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.DIAMOND_SHIELD,
      id2: INV.DIAMOND_SHIELD,
      time: 0.014285714285714285,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.DIAMOND_SHIELD, 1],
        [INV.AMETHYST, 50],
        [INV.DIAMOND, 50],
        [INV.GOLD, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.AMETHYST_SHIELD,
      id2: INV.AMETHYST_SHIELD,
      time: 0.011111111111111112,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.AMETHYST_SHIELD, 1],
        [INV.REIDITE, 50],
        [INV.AMETHYST, 50],
        [INV.DIAMOND, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.REIDITE_SHIELD,
      id2: INV.REIDITE_SHIELD,
      time: 0.008333333333333333,
      t: CATEGORY.WEAPONS,
    },
    {
      r: [
        [INV.GEMME_GREEN, 1],
        [INV.GOLD, 200],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.CROWN_GREEN,
      id2: INV.CROWN_GREEN,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.GEMME_ORANGE, 1],
        [INV.GOLD, 200],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.CROWN_ORANGE,
      id2: INV.CROWN_ORANGE,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.GEMME_BLUE, 1],
        [INV.GOLD, 200],
        [INV.DRAGON_HEART, 1],
      ],
      w: 1,
      f: 1,
      o: 1,
      e: 0,
      id: CRAFT.CROWN_BLUE,
      id2: INV.CROWN_BLUE,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.FUR_WOLF, 10],
        [INV.FUR, 5],
        [INV.CORD, 6],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.HOOD,
      id2: INV.HOOD,
      time: 0.1,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.FUR, 3],
        [INV.CORD, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PEASANT,
      id2: INV.PEASANT,
      time: 0.1,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.HOOD, 1],
        [INV.SPECIAL_FUR_2, 1],
        [INV.FUR_WINTER, 15],
        [INV.BLUE_CORD, 5],
        [INV.PENGUIN_FEATHER, 8],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WINTER_HOOD,
      id2: INV.WINTER_HOOD,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [
        [INV.PEASANT, 1],
        [INV.SPECIAL_FUR, 1],
        [INV.FUR_WINTER, 10],
        [INV.BLUE_CORD, 5],
        [INV.PENGUIN_FEATHER, 8],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.WINTER_PEASANT,
      id2: INV.WINTER_PEASANT,
      time: 0.016666666666666666,
      t: CATEGORY.CLOTHES,
    },
    {
      r: [[INV.BUCKET_EMPTY, 1]],
      w: 0,
      f: 0,
      o: 1,
      e: 0,
      id: CRAFT.BUCKET_FULL,
      id2: INV.BUCKET_FULL,
      time: 0.2,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.WOOD, 20],
        [INV.CORD, 1],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BUCKET_EMPTY,
      id2: INV.BUCKET_EMPTY,
      time: 0.2,
      t: CATEGORY.TOOLS,
    },
    {
      r: [
        [INV.STONE, 100],
        [INV.GROUND, 30],
      ],
      w: 1,
      f: 1,
      o: 0,
      e: 0,
      id: CRAFT.WELL,
      id2: INV.WELL,
      time: 0.1,
      t: CATEGORY.UTILS,
    },
    {
      r: [[INV.WOOD, 20]],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SIGN,
      id2: INV.SIGN,
      time: 0.2,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 100],
        [INV.STONE, 50],
        [INV.FUR, 5],
        [INV.FUR_WOLF, 5],
        [INV.CORD, 6],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BED,
      id2: INV.BED,
      time: 0.05,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 250],
        [INV.BLUE_CORD, 10],
        [INV.FUR_WINTER, 2],
        [INV.SCALES, 2],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.BOAT,
      id2: INV.BOAT,
      time: 0.02,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 250],
        [INV.CORD, 10],
        [INV.FUR_WINTER, 2],
        [INV.PENGUIN_FEATHER, 8],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SLED,
      id2: INV.SLED,
      time: 0.02,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.CORD, 10],
        [INV.FUR_WOLF, 6],
        [INV.FUR, 4],
        [INV.SAND, 50],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.SADDLE,
      id2: INV.SADDLE,
      time: 0.05,
      t: CATEGORY.UTILS,
    },
    {
      r: [
        [INV.WOOD, 250],
        [INV.CORD, 10],
        [INV.PAPER, 10],
        [INV.HAWK_FEATHER, 8],
      ],
      w: 1,
      f: 0,
      o: 0,
      e: 0,
      id: CRAFT.PLANE,
      id2: INV.PLANE,
      time: 0.02,
      t: CATEGORY.UTILS,
    },
  ],
  COUNTER = 300;
TEXT = {
  YOU_CANNOT_JOIN: COUNTER++,
  KICKED: COUNTER++,
  KEY_ALREADY: COUNTER++,
  KEY_WRONG: COUNTER++,
  OLD_VERSION: COUNTER++,
  NO_MORE_RESOURCES: COUNTER++,
  SURVIVED_1DAY: COUNTER++,
  SURVIVED: COUNTER++,
  DAYS: COUNTER++,
  DEAD_SAD: COUNTER++,
  SPAM_ME: COUNTER++,
  SPAM_ME2: COUNTER++,
  EMPTY: COUNTER++,
  INV_FULL: COUNTER++,
  DEAD: COUNTER++,
  WRONG_TOOL: COUNTER++,
  JOIN_TEAM: COUNTER++,
  YOU_DEAD: COUNTER++,
  JOINED_TEAM: COUNTER++,
  TEAM_DESTROYED: COUNTER++,
  LEFT_TEAM: COUNTER++,
  LEFT_TEAM2: COUNTER++,
  TOKEN: COUNTER++,
  CHOOSE: COUNTER++,
  PLAYERS: COUNTER++,
  TOTAL_PLAYERS: COUNTER++,
  TOTAL_MODE: COUNTER++,
  COMMING_SOON: COUNTER++,
  BACK_TO_THE_GAME: COUNTER++,
  TWITTER: COUNTER++,
  FACEBOOK: COUNTER++,
  KIT_NEXT: COUNTER++,
  POINTS: COUNTER++,
  SCORE: COUNTER++,
  KILL: COUNTER++,
  DAYS_SURVIVED: COUNTER++,
  MODE_FREE: COUNTER++,
  MODE_GRID: COUNTER++,
  NEW_VERSION: COUNTER++,
  WRONG_PASSWORD: COUNTER++,
  TEMPEST_OFF: COUNTER++,
  TEMPEST_ON: COUNTER++,
  BLIZZARD_OFF: COUNTER++,
  BLIZZARD_ON: COUNTER++,
};
var set_english = function () {
    LANG[INV.EXTRACTOR_MACHINE_STONE] = [
      "Stone Extractor",
      "Can produce stone with wood",
      "It takes 10 seconds to drill Stone",
      "Durability: 2000",
    ];
    LANG[INV.EXTRACTOR_MACHINE_GOLD] = [
      "Gold Extractor",
      "Can produce gold with wood",
      "It takes 10 seconds to drill Gold",
      "Durability: 2000",
    ];
    LANG[INV.EXTRACTOR_MACHINE_DIAMOND] = [
      "Diamond Extractor",
      "Can produce diamond with wood",
      "It takes 10 seconds to drill Diamond",
      "Durability: 2000",
    ];
    LANG[INV.EXTRACTOR_MACHINE_AMETHYST] = [
      "Amethyst Extractor",
      "Can produce amethyst with wood",
      "It takes 10 seconds to drill Amethyst",
      "Durability: 2000",
    ];
    LANG[INV.EXTRACTOR_MACHINE_REIDITE] = [
      "Reidite Extractor",
      "Can produce reidite with wood",
      "It takes 10 seconds to drill Reidite",
      "Durability: 2000",
    ];
    LANG[INV.REIDITE_SHIELD] = [
      "Reidite Shield",
      "A must for the pros of the getaway",
      "You can not attack when you use it",
      "Damage: 6",
      "Players Defense: 6",
    ];
    LANG[INV.AMETHYST_SHIELD] = [
      "Amethyst Shield",
      "Because you know how to run away in style",
      "You can not attack when you use it",
      "Damage: 5",
      "Players Defense: 5",
    ];
    LANG[INV.DIAMOND_SHIELD] = [
      "Diamond Shield",
      "Run or attack, you've obviously made your choice.",
      "You can not attack when you use it",
      "Damage: 4",
      "Players Defense: 4",
    ];
    LANG[INV.GOLD_SHIELD] = [
      "Gold Shield",
      "When it's golden, it's always better.",
      "You can not attack when you use it",
      "Damage: 3",
      "Players Defense: 3",
    ];
    LANG[INV.STONE_SHIELD] = [
      "Stone Shield",
      "Protects you a bit more",
      "You can not attack when you use it",
      "Damage: 2",
      "Players Defense: 2",
    ];
    LANG[INV.WOOD_SHIELD] = [
      "Wood Shield",
      "Protects you a bit",
      "You can not attack when you use it",
      "Damage: 1",
      "Players Defense: 1",
    ];
    LANG[INV.MACHETE] = [
      "Machete",
      "You gather more from mob boxes",
      "Useless to attack mobs",
      "Damage against Players: 5",
    ];
    LANG[INV.WOOD_TOWER] = [
      "Tower",
      "Allows you to shoot over walls with a bow",
      "Does not allow to pass through roofs",
    ];
    LANG[INV.DRAGON_ARROW] = [
      "Dragon Arrow",
      "Must be used with a Dragon Bow",
      "Damage: 45",
      "Mobs Damage: 1200",
      "Building Damage: 45",
    ];
    LANG[INV.DRAGON_BOW] = [
      "Dragon Bow",
      "Also called the One-Shot-Monster",
      "Requiers arrows to be used",
    ];
    LANG[INV.REIDITE_ARROW] = [
      "Reidite Arrow",
      "Must be used with a Reidite or a Dragon Bow",
      "Damage: 40",
      "Mobs Damage: 900",
      "Building Damage: 40",
    ];
    LANG[INV.REIDITE_BOW] = [
      "Reidite Bow",
      "Makes the most terrifying monster cry.",
      "Requiers any arrows, except dragon arrows, to be used",
    ];
    LANG[INV.AMETHYST_ARROW] = [
      "Amethyst Arrow",
      "Must be used with Amethyst, Reidite or Dragon Bow",
      "Damage: 35",
      "Mobs Damage: 600",
      "Building Damage: 35",
    ];
    LANG[INV.AMETHYST_BOW] = [
      "Amethyst Bow",
      "It's super efficient!",
      "Requiers any arrows, except dragon and reidite arrows, to be used",
    ];
    LANG[INV.DIAMOND_ARROW] = [
      "Diamond Arrow",
      "Must be used with Diamond, Amethyst, Reidite or Dragon Bow",
      "Damage: 30",
      "Mobs Damage: 300",
      "Building Damage: 30",
    ];
    LANG[INV.DIAMOND_BOW] = [
      "Diamond Bow",
      "Like a Robin Wood who would keep the diamonds",
      "Requiers wood, stone, gold or diamond arrows to be used",
    ];
    LANG[INV.GOLD_ARROW] = [
      "Gold Arrow",
      "Must be used with a Bow, except a wooden and stone one",
      "Damage: 25",
      "Mobs Damage: 200",
      "Building Damage: 25",
    ];
    LANG[INV.GOLD_BOW] = [
      "Gold Bow",
      "When it's golden, it's better.",
      "Requiers wood, stone or gold arrows to be used",
    ];
    LANG[INV.STONE_ARROW] = [
      "Stone Arrow",
      "Must be used with a Bow, except a wooden one",
      "Damage: 20",
      "Mobs Damage: 100",
      "Building Damage: 20",
    ];
    LANG[INV.STONE_BOW] = [
      "Stone Bow",
      "Like Robin Wood",
      "Requiers wood and stone arrows to be used",
    ];
    LANG[INV.WOOD_ARROW] = [
      "Wood Arrow",
      "Must be used with any bow",
      "Damage: 15",
      "Mobs Damage: 20",
      "Building Damage: 15",
    ];
    LANG[INV.WOOD_BOW] = [
      "Wood Bow",
      "A little bow that does not do many damages.",
      "Requiers wood arrows to be used",
    ];
    LANG[INV.EMERALD_MACHINE] = [
      "Emerald Machine",
      "Allows to automatically generate score points.",
      "Be careful, you can only build one.",
      "Once placed your soul is connected to the machine, if the machine is destroyed, you will die.",
      "The machine can't be build in the sea",
      "You earn more points in the desert, than in the lava, than in winter, than in the forest.",
    ];
    LANG[INV.FUR_BOAR] = [
      "Boar fur",
      "Hakuna Matata, well, he can no longer say it",
    ];
    LANG[INV.FUR_MAMMOTH] = [
      "Mammoth fur",
      "Soft and warm. Perfect for a hat.",
    ];
    LANG[INV.VULTURE_FEATHER] = ["Vulture Feather", "From a deadly vulture"];
    LANG[INV.EMERALD] = [
      "Emerald",
      "How many golden breads can you get from it?",
    ];
    LANG[INV.SANDWORM_JUICE] = [
      "Sand Worm Juice",
      "I don't want to know how you got this.",
    ];
    LANG[INV.TURBAN1] = ["Turban", "Useful to survive in the desert."];
    LANG[INV.TURBAN2] = ["Ninja outfit", "Essential to survive in the desert"];
    LANG[INV.PILOT_HELMET] = [
      "Pilot Hat",
      "Take off and land with flying objects much faster.",
    ];
    LANG[INV.PILOT_GLASSES] = ["Pilot Glasses"];
    LANG[INV.MOUNT_BOAR] = ["Tamed Boar", "Fast on lands and slow on water."];
    LANG[INV.BABY_MAMMOTH] = [
      "Tamed Baby Mammoth",
      "Fast on lands and slow on water.",
    ];
    LANG[INV.CRAB_BOSS] = [
      "Tamed Crab Boss",
      "Fast on lands and water, and slow on winter.",
      "Gives a +10 damage bonus of the Crab Spear",
      "when holding a Crab Helmet",
    ];
    LANG[INV.BABY_DRAGON] = [
      "Tamed Baby Dragon",
      "You can fly with it.",
      "Faster than a hawk",
      "When you are flying,",
      " you can only hit people who are flying too",
    ];
    LANG[INV.BABY_LAVA] = [
      "Tamed Baby Lava Dragon",
      "You can fly with it.",
      "Faster than a baby dragon",
      "When you are flying,",
      " you can only hit people who are flying too",
    ];
    LANG[INV.HAWK] = [
      "Tamed Hawk",
      "You can fly with it.",
      "When you are flying,",
      " you can only hit people who are flying too",
    ];
    LANG[INV.SADDLE] = ["Saddle", "Hit a boar with it to tame it."];
    LANG[INV.WITCH] = ["Witch Hat", "You're a wizard Starvy!"];
    LANG[INV.NIMBUS] = [
      "Nimbus 2000",
      "That's not just a broomstick, Starvy, it's a Nimbus 2000!",
      "Only works with the witch hat.",
    ];
    LANG[INV.WAND1] = [
      "Wand of life",
      "Soon we must all choose between what is right and what is easy.",
      "You need the witch hat and firefly to cast spell",
    ];
    LANG[INV.WAND2] = [
      "Death Wand",
      "The wand of He-Who-Must-Not-Be-Named... Lapa...",
      "You need the witch hat and firefly to cast spell",
    ];
    LANG[INV.FIREFLY] = [
      "Firefly",
      "They make a cute little squeak.",
      "However, you must tear off his wings to make magical projectiles for use with magic wands.",
    ];
    LANG[INV.PIRATE_HAT] = [
      "Pirate hat",
      "You are faster with it in a boat",
      "Warm outside water and in winter",
    ];
    LANG[INV.SLED] = ["Sled", "You are faster with it in the snow"];
    LANG[INV.BOAT] = ["Boat", "You are faster with it in the water"];
    LANG[INV.PLANE] = [
      "Plane",
      "Fly in the forest, ocean and winter",
      "Can't fly in desert or lava biome",
      "When you are flying,",
      " you can only hit people who are flying too",
    ];
    LANG[INV.HAMMER_REIDITE] = [
      "Reidite Hammer",
      "Useful to destroy buildings",
      "Damage: 6",
      "Building Damage: 60",
    ];
    LANG[INV.PENGUIN_FEATHER] = [
      "Penguin Feather",
      "From a deadly cute penguin.",
    ];
    LANG[INV.HAWK_FEATHER] = ["Hawk Feather", "From a deadly hawk."];
    LANG[INV.CACTUS] = ["Cactus", "Food : 20", "Water : 10"];
    LANG[INV.ALOE_VERA] = [
      "Aloe Vera",
      "Allows you to heal a little",
      "Heal : 30",
    ];
    LANG[INV.ALOE_VERA_SEED] = ["Aloe Vera Seed", "Grows into Aloe Vera"];
    LANG[INV.WATERMELON] = [
      "Watermelon",
      "Like a melon, but with water",
      "Food : 15",
      "Water : 8",
    ];
    LANG[INV.WATERMELON_SEED] = [
      "Watermelon Seed",
      "Grows into Watermelon",
      "Birth: 4min",
      "Growth: 180s",
      "Need water: 3min 20s",
      "Durability: 400",
      "Lifetime: 8 days",
    ];
    LANG[INV.REIDITE_DOOR] = [
      "Reidite Door",
      "Noboby can destroy it. Except very reckless",
      "Damage: 5",
      "On-Hit Damage: 1",
      "Durability: 4000",
    ];
    LANG[INV.REIDITE_WALL] = [
      "Reidite Wall",
      "Better wall in StarveLand",
      "Durability: 4000",
    ];
    LANG[INV.REIDITE_SPIKE] = [
      "Reidite Spike",
      "It hurts",
      "Damage: 60",
      "On-Hit Damage: 5",
      "Durability: 3000",
    ];
    LANG[INV.REIDITE_DOOR_SPIKE] = [
      "Reidite Door Spike",
      "Painful and useful at the same time",
      "Damage: 35",
      "On-Hit Damage: 4",
      "Durability: 2000",
    ];
    LANG[INV.PICK_REIDITE] = [
      "Reidite Pickaxe",
      "Can also harvest reidite, better look!",
      "Damage: 6",
      "Building Damage: 1",
    ];
    LANG[INV.WOOD_DOOR_SPIKE] = [
      "Wood Door Spike",
      "Can be opened or closed by you or your friends",
      "Damage: 5",
      "On-Hit Damage: 1",
      "Durability: 100",
    ];
    LANG[INV.STONE_DOOR_SPIKE] = [
      "Stone Door Spike",
      "A stronger door is more serious",
      "Damage: 10",
      "On-Hit Damage: 2",
      "Durability: 200",
    ];
    LANG[INV.GOLD_DOOR_SPIKE] = [
      "Gold Door Spike",
      'Are you rebuilding the "el dorado?"',
      "Damage: 15",
      "On-Hit Damage: 2",
      "Durability: 400",
    ];
    LANG[INV.DIAMOND_DOOR_SPIKE] = [
      "Diamond Door Spike",
      "For a shining house",
      "Damage: 25",
      "On-Hit Damage: 3",
      "Durability: 800",
    ];
    LANG[INV.AMETHYST_DOOR_SPIKE] = [
      "Amethyst Door Spike",
      "Is your house a locked safe?",
      "Damage: 30",
      "On-Hit Damage: 3",
      "Durability: 1600",
    ];
    LANG[INV.CARROT] = [
      "Carrot",
      "Eat it or sell it in exchange for Tomato Seed or Diamond",
      "Food : 20",
    ];
    LANG[INV.TOMATO] = [
      "Tomato",
      "Eat it or sell it in exchange for Thornbush Seed or Amethyst",
      "Food : 16",
    ];
    LANG[INV.CARROT_SEED] = [
      "Carrot Seed",
      "Grows into Carrot",
      "Birth: 4min",
      "Growth: 30s",
      "Need water: 1min 40s",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.TOMATO_SEED] = [
      "Tomato Seed",
      "Grows into Tomato",
      "Birth: 4min",
      "Growth: 30s",
      "Need water: 1min 40s",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.PITCHFORK] = ["Pitchfork", "Perfect for gathering"];
    LANG[INV.PITCHFORK2] = ["Golden Pitchfork", "Essential for a real farmer."];
    LANG[INV.PITCHFORK_PART] = [
      "Pitchfork Part",
      "Shaped by the gods. You'll never be hungry again.",
    ];
    LANG[INV.EGG0] = [
      "Easter Egg",
      "Eat it or sell it in exchange for wood or stone",
      "Food : 12",
    ];
    LANG[INV.EGG1] = [
      "Easter Egg",
      "Eat it or sell it in exchange for gold",
      "Food : 25",
    ];
    LANG[INV.EGG2] = [
      "Easter Egg",
      "Eat it or sell it in exchange for diamond",
      "Food : 50",
    ];
    LANG[INV.EGG3] = [
      "Easter Egg",
      "Eat it or sell it in exchange for amethyst",
      "Food : 75",
    ];
    LANG[INV.EGG4] = [
      "Easter Egg",
      "Eat it or sell it in exchange for reidite",
      "Food : 100",
    ];
    LANG[INV.LAVA_CUBE] = [
      "Lava Cube",
      "You feel an immense power emanating from this cube",
    ];
    LANG[INV.LAVA_ORB] = [
      "Lava Orb",
      "You feel an immense power emanating from this orb",
    ];
    LANG[INV.LAVA_SWORD] = [
      "Lava Sword",
      "Don't be too mean with that.",
      "Damage: 33",
      "Building Damage: 11",
    ];
    LANG[INV.LAVA_SPEAR] = [
      "Lava Spear",
      "Doing good or doing evil",
      "Damage: 24",
      "Building Damage: 8",
    ];
    LANG[INV.LAVA_HEART] = [
      "Lava Heart",
      "You can feel a strange force.",
      "A huge power emanates from it.",
      "We must not find the secret.",
    ];
    LANG[INV.LAVA_HELMET] = [
      "Lava Helmet",
      "You will conquer the world",
      "Players Defense: 9",
      "Animals Defense: 30",
    ];
    LANG[INV.REIDITE_SPEAR] = [
      "Reidite Spear",
      "Really useful against Lava Monsters",
      "Damage: 22",
      "Building Damage: 7",
    ];
    LANG[INV.REIDITE_SWORD] = [
      "Reidite Sword",
      "Really useful against Lava Monsters",
      "Damage: 30",
      "Building Damage: 10",
    ];
    LANG[INV.FLAME] = ["Flame", "It's hot!"];
    LANG[INV.DIAMOND_PROTECTION] = [
      "Diamond Protection",
      "You can survive longer in lava",
      "Cools down in lava biome",
      "Players Defense: 2, Animals Defense: 8",
    ];
    LANG[INV.AMETHYST_PROTECTION] = [
      "Amethyst Protection",
      "You can survive longer in lava",
      "Cools down in lava biome",
      "Players Defense: 5, Animals Defense: 13",
    ];
    LANG[INV.REIDITE_PROTECTION] = [
      "Reidite Protection",
      "You can survive longer in lava",
      "Cools down in lava biome",
      "Players Defense: 6, Animals Defense: 19",
    ];
    LANG[INV.REIDITE] = ["Reidite", "The ultimate ore"];
    LANG[INV.DRAGON_CUBE] = [
      "Dragon Cube",
      "You feel a great power emanating from this cube",
    ];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    DIE[23] = [
      "The heat makes you suffocate, you can see your skin fall apart. You're charred. The grilled marshmallow has never been so tasty.",
    ];
    DIE[24] = [
      "Your vital organs melt inside, fortunately the toxic gases that escape from the lava make you faint and you do not feel the excruciating pain of death.",
    ];
    DIE[25] = [
      "The Will-O'-The-Wisp devoured you from the inside with its fiery flames.",
    ];
    DIE[26] = [
      "Oh my God, you died in indescribable pain. Even Lapa turned his head not to see this massacre.",
    ];
    DIE[27] = [
      'You were trampled by that boar. From now on, your new nickname is "the doormat".',
    ];
    DIE[28] = [
      'With a force of 3300 newtons, the shock wave from the closing of the crab king\'s claw made you explode your heart from the inside. In addition, the crab has eaten you by sharing your remains with its other small crabs. All dance in joy around your corpse by performing a singular dance called the "crab rave"',
    ];
    DIE[29] = [
      "Even if it is a baby, under the heat of the flames of this cute dragon, you become a delicious dish.",
    ];
    DIE[30] = [
      "Under its cute fake looks, the lava baby dismembers you so quickly that you don't have your life flashes before your eyes.",
    ];
    DIE[31] = [
      "The hawk slashed both your eyes out. Terrified, you try to escape by crawling and screaming in pain. Unfortunately the hawk catches you and takes you to distant skies that we already know will never see you again.",
    ];
    DIE[32] = [
      "Believing you saw an oasis, you dived into this tree that seemed to you to be full of juicy fruit. Unfortunately, these shiny fruits were in fact horribly painful thorns. Now stuck to the cactus, exhausted by the desert, you have fainted forever.",
    ];
    DIE[33] = [
      "That vulture had been spying on you for a long time. He was waiting for a moment of fragility from you. Once cornered by this harassing desert, barely able to breathe, the vulture twisted on you and in a flash ripped out your last hope. At your last breath, you could still see the vulture plunge his head into what was left of your body to enjoy your entrails.",
    ];
    DIE[34] = [
      "Out of nowhere, the sand worm devours you in a terrifying howl. But why did Lapa bring such a despicable monster to life?",
    ];
    DIE[35] = [
      "Exhausted by so much heat. You would like to cry, but the sand quickly dries your tears. You suffocate, sand enters your mouth, the thumping sound of the sandstorm will be the last thing you will hear... Next time, use a turban or protect yourself under a roof",
    ];
    DIE[36] = [
      "You feel weak, your vision becomes blurry, you can feel the darkness invading your body. Your soul flies away and leaves behind a lifeless body. Your emerald machine has been destroyed.",
    ];
    DIE[37] = ['You hear "Avada Kedavra!" before you turn to ashes.'];
    DIE[38] = ["You died crushed by an angry baby mammoth."];
    DIE[39] = [
      "You were skewered by a mammoth. In the violence of the animal's charge, your heart was left hanging on the tip of the tusk. You could still see your heart beating in the open air before losing your life crushed by the mammoth's feet for good. Notice that under the pressure of the crushing your eyes have been exorbed and that the penguins use the frozen eyes of the starvers as a balloon to distract themselves.",
    ];
    DIE[40] = [
      "The blizzard storm is so intense that your frostbite causes necrosis of all your limbs. Next time protect yourself with a roof or with warmer clothes.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.TEMPEST_ON] = "A sandstorm is approaching in a few seconds.";
    LANG[TEXT.TEMPEST_OFF] = "The sandstorm will soon stop.";
    LANG[TEXT.BLIZZARD_ON] = "A blizzard is approaching in a few seconds.";
    LANG[TEXT.BLIZZARD_OFF] = "The blizzard will soon stop.";
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Gives a +10 damages bonus when holding it with",
      "a Crab Helmet on a Crab King",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 5",
      "Animals Defense: 19",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart inside the cave";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      "100 bread in winter, alone, without come back";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0x567425 = 0; _0x567425 < 7; _0x567425++) {
      document.getElementById("claim_reward_" + _0x567425).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["Hand"];
    LANG[INV.GROUND] = ["Dirt", "Dirty!"];
    LANG[INV.SAND] = ["Sand", "I got it in my eyes!"];
    LANG[INV.WOOD] = ["Wood", "You can't get enough of it!"];
    LANG[INV.STONE] = ["Stone", "Also called a rock"];
    LANG[INV.GOLD] = ["Gold", "Be generous, give it to others"];
    LANG[INV.DIAMOND] = ["Diamond", "What will you make with it?"];
    LANG[INV.AMETHYST] = ["Amethyst", "It's Mauve like Lapa"];
    LANG[INV.FLOUR] = ["Flour", "Used in cooking"];
    LANG[INV.COOKIE] = [
      "Cookie",
      "A sumptuous grandmother's cookie",
      "Food: 50",
    ];
    LANG[INV.CAKE] = ["A cake", "Dream cake for the gourmets", "Food: 100"];
    LANG[INV.MEAT] = [
      "Raw meat",
      "You can cook it with a fire",
      "Causes food poisoning: 10",
      "Food: 15",
    ];
    LANG[INV.COOKED_MEAT] = ["Cooked meat", "A rare steak, please", "Food: 35"];
    LANG[INV.FOODFISH] = [
      "Raw fish",
      "I think it's still alive",
      "Causes food poisoning: 10",
      "Food: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "Cooked fish",
      "With lemon it's perfect",
      "Food: 35",
    ];
    LANG[INV.BREAD] = [
      "Bread",
      "An excellent French bread",
      "It's the currency used in the market",
      "Food: 15",
    ];
    LANG[INV.SANDWICH] = ["Sandwich", "Tastes like Krabby Patty", "Food: 100"];
    LANG[INV.CANDY] = ["Candies", "Only for children!", "Food: 20"];
    LANG[INV.SUGAR_CAN] = [
      "Sugar cane",
      "Taste it, it's delicious",
      "Food: 100",
    ];
    LANG[INV.GARLAND] = ["Garland", "Perfect decoration for roofs"];
    LANG[INV.SEED] = [
      "Berries Seed",
      "Grows into Berry",
      "Birth: 2min",
      "Growth: 55s",
      "Need water: 3min 20s",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.PLANT] = ["Berry", "Berry tasty!", "Food: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Wheat Seed",
      "Grows into Wheat",
      "Birth: 2min",
      "Growth: 16s",
      "Need water: 2min",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Wild Wheat",
      "Turns into Flour when placed in Windmill",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Pumpkin Seed",
      "Grows into pumpkin",
      "Birth: 2min 40s",
      "Growth: 2min",
      "Need water: 2min",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.PUMPKIN] = ["Pumpkin", "It reminds me of Halloween", "Food: 30"];
    LANG[INV.GARLIC_SEED] = [
      "Garlic Seed",
      "Very dangerous for vampires",
      "Damage: 20",
      "Birth: 4min",
      "Growth: 1min 10s",
      "Need water: 1min 40s",
      "Durability: 700",
      "Lifetime: 8 days",
    ];
    LANG[INV.GARLIC] = ["Garlic", "Reduces cold", "Food: 14", "Effect: 1"];
    LANG[INV.THORNBUSH_SEED] = [
      "Thorn bush Seed",
      "Can damage your enemies",
      "Damage: 20",
      "Birth: 4min",
      "Growth: 15s",
      "Need water: 3min",
      "Durability: 1000",
      "Lifetime: 8 days",
    ];
    LANG[INV.THORNBUSH] = ["Thorn bush", "It stings!"];
    LANG[INV.PLOT] = [
      "Plot",
      "Seriously, use it",
      "With this GMO fertilizer your plants",
      "will growth really faster and need less water",
      "Durability: 2000",
    ];
    LANG[INV.ICE] = ["Ice", "Useful for making cakes and water"];
    LANG[INV.SPANNER] = [
      "Wrench",
      "To repair doors, walls and spike",
      "Damage: 2",
    ];
    LANG[INV.FUR_WOLF] = ["Wolf Fur", "Puppy? But where is Puppy?!"];
    LANG[INV.FUR] = ["Rabbit Fur", "That rabbit was so cute..."];
    LANG[INV.SPECIAL_FUR] = ["Pure Fur", "You're a bread factory"];
    LANG[INV.SPECIAL_FUR_2] = [
      "Dark Fur",
      "You get ready to do something wrong",
    ];
    LANG[INV.FUR_WINTER] = ["Winter Fur", "These animals just wanted a hug..."];
    LANG[INV.SCALES] = ["Scales", "It smells like fish!"];
    LANG[INV.KRAKEN_SKIN] = ["Kraken Skin", "Weren't you too scared?"];
    LANG[INV.FIRE] = [
      "Firecamp",
      "Warm you up!",
      "Durability: 150",
      "Lifetime: 2min",
    ];
    LANG[INV.BIG_FIRE] = [
      "Big Firecamp",
      "Warm you up more time!",
      "Durability: 400",
      "Lifetime: 6min",
    ];
    LANG[INV.WORKBENCH] = [
      "Workbench",
      "Very useful to craft all kinds of objects",
    ];
    LANG[INV.CORD] = ["Cord", "Used in crafting Hats and Bag"];
    LANG[INV.BLUE_CORD] = ["Diamond Cord", "Used in crafting Special Hats"];
    LANG[INV.CHEST] = ["Chest", "Allows you to store items", "Durability: 500"];
    LANG[INV.SWORD_WOOD] = [
      "Wood Sword",
      "Does that work?",
      "Damage: 12",
      "Building Damage: 4",
    ];
    LANG[INV.SWORD] = [
      "Stone Sword",
      "Be nice to others",
      "Damage: 19",
      "Building Damage: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Gold Sword",
      "King of the forest",
      "Damage: 22",
      "Building Damage: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Diamond Sword",
      "You can feel the power",
      "Damage: 24",
      "Building Damage: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Pirate Sword",
      "Ayyyyy!",
      "Better range than a normal sword",
      "Damage: 24",
      "Building Damage: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Amethyst Sword",
      "Mauve is the most beautiful color of the world",
      "Damage: 27",
      "Building Damage: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Dragon Sword",
      "No mercy!",
      "Damage: 30",
      "Building Damage: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Dragon Spear",
      "Kill them all!",
      "Damage: 22",
      "Building Damage: 7",
    ];
    LANG[INV.PICK_WOOD] = [
      "Wood Pickaxe",
      "Can harvest only stone and wood",
      "Damage: 1",
    ];
    LANG[INV.PICK] = [
      "Stone Pickaxe",
      "Can harvest wood, stone and gold",
      "Damage: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "Gold Pickaxe",
      "Can also harvest diamond",
      "Damage: 3",
      "Building Damage: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Diamond Pickaxe",
      "Can also harvest amethyst",
      "Damage: 4",
      "Building Damage: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Amethyst Pickaxe",
      "Can also harvest reidite, looks fancy!",
      "Damage: 5",
      "Building Damage: 1",
    ];
    LANG[INV.HAMMER] = [
      "Stone Hammer",
      "Useful to destroy buildings",
      "Doesn't work well on diamond or amethyst",
      "Damage: 2",
      "Building Damage: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Gold Hammer",
      "Useful to destroy buildings",
      "Doesn't work well on amethyst",
      "Damage: 3",
      "Building Damage: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Diamond Hammer",
      "Useful to destroy buildings",
      "Damage: 4",
      "Building Damage: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Amethyst Hammer",
      "Useful to destroy buildings",
      "Damage: 5",
      "Building Damage: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Super Hammer",
      "Have you planned to destroy the world?",
      "Damage: 12",
      "Building Damage: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Wood Spear",
      "Like a wooden stick, but it stings.",
      "Damage: 10",
      "Building Damage: 3",
    ];
    LANG[INV.SPEAR] = [
      "Stone Spear",
      "The beginning of evolution!",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Gold Spear",
      "Careful, it stings!",
      "Damage: 15",
      "Buildings Damage: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Diamond Spear",
      "You're ready to kill a dragon",
      "Damage: 17",
      "Buildings Damage: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "Amethyst Spear",
      "Dragons no longer frighten you",
      "Damage: 18",
      "Buildings Damage: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Stone Shovel",
      "Dig the ground to gather dirt, ice, and sand",
      "You can also gather minerals",
      "Damage: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Gold Shovel",
      "Dig the ground to gather dirt, ice, and sand",
      "You can also gather minerals",
      "Damage: 3",
      "Buildings Damage: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Diamond Shovel",
      "Dig the ground to gather dirt, ice, and sand",
      "You can also gather minerals",
      "Damage: 4",
      "Buildings Damage: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Amethyst Shovel",
      "Dig the ground to gather dirt, ice, and sand",
      "You can also gather minerals",
      "Damage: 5",
      "Buildings Damage: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Wood Helmet",
      "Better than nothing",
      "Players Defense: 1",
      "Animals Defense: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Stone Helmet",
      "You're ready for battle!",
      "Players Defense: 2",
      "Animals Defense: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Gold Helmet",
      "AKA the helmet of the savages",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Diamond Helmet",
      "Don't brag too much",
      "Players Defense: 5",
      "Animals Defense: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Amethyst Helmet",
      "You're no longer afraid of anything",
      "Players Defense: 6",
      "Animals Defense: 23",
    ];
    LANG[INV.REIDITE_HELMET] = [
      "Reidite Helmet",
      "You no longer feel pain",
      "Players Defense: 7",
      "Animals Defense: 25",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Dragon Helmet",
      "You will conquer the world",
      "Players Defense: 8",
      "Animals Defense: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Explorer hat",
      "Animals won't pay attention to you",
      "but don't make noises!",
      "Warm outside water and in winter",
      "You also calm down aggressive monsters twice as fast",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "Christmas Hat",
      "Oh, oh, oh, Merry Christmas",
      "Warm outside water and in winter",
    ];
    LANG[INV.ELF_HAT] = [
      "Elf Hat",
      "Don't let yourself be exploited, you little snow elf!",
      "Warm outside water and in winter",
    ];
    LANG[INV.HOOD] = [
      "Hood",
      "You're a rogue",
      "You can steal someone only if",
      "1) It's night",
      "2) You're not wearing anything",
      "3) If you haven't been touched for eight seconds",
      "4) You are not close a fire",
      "5) Your target doesn't wear a peasant outfit",
      "Warm outside water and in winter",
    ];
    LANG[INV.EARMUFFS] = [
      "Earmuffs",
      "Some kind of little chapka.",
      "Warm outside water and in winter",
    ];
    LANG[INV.COAT] = [
      "Chapka",
      "Also called a coat.",
      "Warmer outside water and in winter",
    ];
    LANG[INV.CAP_SCARF] = [
      "Winter Scarf and Cap",
      "Very comfortable",
      "Very Warm",
    ];
    LANG[INV.FUR_HAT] = [
      "Mammoth fur hat",
      "The best blizzard protection",
      "Very Warm",
    ];
    LANG[INV.PEASANT] = [
      "Peasant",
      "Your plants grow faster",
      "Warm outside water and in winter",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Winter Hood",
      "You can steal someone only if",
      "- It's night",
      "- You're not wearing anything",
      "- If you haven't been touched for four seconds",
      "- You are not close a fire",
      "- Your target doesn't wear a winter peasant outfit",
      "Warm outside water and in winter",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Winter Peasant",
      "Your plants grow faster",
      "Warm outside water and in winter",
    ];
    LANG[INV.DIVING_MASK] = [
      "Diving Mask",
      "You are fast in the water",
      "Warm in water",
      "Players Defense: 2, Animals Defense: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Super Diving Mask",
      "You are very fast in the water",
      "Warm in water",
      "Players Defense: 4, Animals Defense: 16",
    ];
    LANG[INV.DRAGON_ORB] = [
      "Dragon Orb",
      "You feel a great power emanating from this orb",
    ];
    LANG[INV.DRAGON_HEART] = [
      "Dragon Heart",
      "Turns you into a Ghost on Death!",
      "You are a ghost for 60 seconds",
      "Find a resurrection stone",
    ];
    LANG[INV.GEMME_GREEN] = ["Green Gemstone", "You didn't cheat, promise?"];
    LANG[INV.GEMME_ORANGE] = [
      "Orange Gemstone",
      "Only a real pirate can find it!",
    ];
    LANG[INV.GEMME_BLUE] = ["Blue Gemstone", "For too kind people"];
    LANG[INV.CROWN_GREEN] = [
      "Green Crown",
      "You heal yourself very quickly",
      "Heal over time: 40",
      "Players Defense: 4, Animals Defense: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Orange Crown",
      "You suddenly feel very lucky",
      "Players Defense: 4, Animals Defense: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Blue Crown",
      "Once you're dead, you'll become a ghost",
      "Though you will lose your weapon",
      "Players Defense: 4, Animals Defense: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Bucket",
      "Useful to fill a well",
      "One bucket is equivalent to twelve bottles",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "Empty Bucket",
      "You need to fill this bucket near a water source",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "Bottle",
      "Allows you to drink water anywhere",
      "Water: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "Empty Bottle",
      "You can fill this bottle near a water source",
    ];
    LANG[INV.WATERING_CAN] = [
      "Empty Watering Can",
      "You must fill it with a water source to use it",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "Watering Can",
      "Allows watering of plants",
      "Damage: 1",
    ];
    LANG[INV.BAG] = ["Bag", "More space for your items!"];
    LANG[INV.PAPER] = ["Paper", "Used in book-crafting"];
    LANG[INV.BOOK] = [
      "Book",
      "Allows to considerably reduce the time of crafting",
      "Must be wearing to work",
      "Damage: 1",
    ];
    LANG[INV.BANDAGE] = [
      "Bandage",
      "Recover more quickly your life",
      "Heal over time: 30",
      "Effect: 5",
    ];
    LANG[INV.LOCK] = ["Lock", "Allow you to lock your chest"];
    LANG[INV.LOCKPICK] = ["Lock-pick", "Allows you to unlock one chest"];
    LANG[INV.TOTEM] = [
      "Totem",
      "Allow you to create a team",
      "Share doors and chests",
      "Harmful building won't hurt your friend",
    ];
    LANG[INV.BRIDGE] = [
      "Bridge",
      "Very useful on water",
      "It allows you to drink without drowning",
      "Walk faster in water",
    ];
    LANG[INV.SIGN] = ["Sign", "Leave a message to others", "Durability: 200"];
    LANG[INV.ROOF] = [
      "Roof",
      "Hides you a little and warms you!",
      "Also protects you against sand storm",
    ];
    LANG[INV.WELL] = ["Well", "Allows bottle filling", "Durability: 1000"];
    LANG[INV.WALL] = ["Wood Wall", "It's just a wall", "Durability: 1000"];
    LANG[INV.STONE_WALL] = [
      "Stone Wall",
      "It's a little more serious.",
      "Durability: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "Gold Wall",
      "Gold on your walls? It's kind of flashy.",
      "Durability: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Diamond Wall",
      "So shiny, watch your eyes",
      "Durability: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Amethyst Wall",
      "You must be very scared to go out!",
      "Durability: 3500",
    ];
    LANG[INV.SPIKE] = [
      "Wood Spike",
      "Can damage your enemies",
      "Damage: 10, On-Hit Damage: 2",
      "Durability: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Stone Spike",
      "I wouldn't want to be your enemy.",
      "Damage: 20",
      "On-Hit Damage: 3",
      "Durability: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Gold Spike",
      "You're so cruel.",
      "Damage: 30",
      "On-Hit Damage: 3",
      "Durability: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Diamond Spike",
      "You don't like to have company.",
      "Damage: 40",
      "On-Hit Damage: 4",
      "Durability: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Amethyst Spike",
      "What the hell did your neighbors do to you?",
      "Damage: 50",
      "On-Hit Damage: 4",
      "Durability: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Wood Door",
      "Can be opened or closed by you or your friends",
      "Durability: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Stone Door",
      "A stronger door is more serious",
      "Durability: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Gold Door",
      'Are you rebuilding the "el dorado?"',
      "Durability: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Diamond Door",
      "For a shining house",
      "Durability: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Amethyst Door",
      "Is your house a locked safe?",
      "Durability: 3500",
    ];
    LANG[INV.FURNACE] = [
      "Furnace",
      "Warms you up",
      "It consumes wood all 5 seconds",
      "Durability: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Windmill",
      "Can produce flour from wheat",
      "It takes 5 seconds to make Flour",
      "Returns points when working",
      "Durability: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Bread Oven",
      "Allows bread to be made from flour",
      "It takes 10 seconds to make bread",
      "Returns points when working",
      "Durability: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Resurrection stone",
      "It's magic",
      "Resurrect you if you're a ghost",
      "You will lose your weapon",
      "Durability: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "You cannot join this server";
    LANG[TEXT.KICKED] = "Kicked: ";
    LANG[TEXT.KEY_ALREADY] = "Your key is already used by someone else";
    LANG[TEXT.KEY_WRONG] = "Your key is wrong";
    LANG[TEXT.OLD_VERSION] =
      "You have an old version, you need to clear your cache";
    LANG[TEXT.NEW_VERSION] =
      "Your client version is too recent for this server. The server is being updated";
    LANG[TEXT.WRONG_PASSWORD] =
      "Wrong password! To enter a password: https://starve.io/?password=...";
    LANG[TEXT.NO_MORE_RESOURCES] = "There are no more new resources";
    LANG[TEXT.SURVIVED_1DAY] = "You survived 1 day";
    LANG[TEXT.SURVIVED] = "You survived ";
    LANG[TEXT.DAYS] = " days";
    LANG[TEXT.DEAD_SAD] = "You are dead ;-;";
    LANG[TEXT.SPAM_ME] =
      "Server cannot find spawn location! Spam the play button!";
    LANG[TEXT.SPAM_ME2] = "Server is full! Spam the play button!";
    LANG[TEXT.EMPTY] = "Resource is empty";
    LANG[TEXT.INV_FULL] = "Inventory is full (right-click to empty items)";
    LANG[TEXT.DEAD] = " is dead";
    LANG[TEXT.WRONG_TOOL] = "This is not the right tool";
    LANG[TEXT.JOIN_TEAM] = "You joined a team";
    LANG[TEXT.YOU_DEAD] = "You are dead";
    LANG[TEXT.JOINED_TEAM] = " joined the team";
    LANG[TEXT.TEAM_DESTROYED] = "Your team was destroyed";
    LANG[TEXT.LEFT_TEAM] = "You left the team";
    LANG[TEXT.LEFT_TEAM2] = " left the team";
    LANG[TEXT.TOKEN] = "Someone stole your token :>";
    LANG[TEXT.CHOOSE] = "Choose a server";
    LANG[TEXT.PLAYERS] = "players";
    LANG[TEXT.TOTAL_PLAYERS] = "total players";
    LANG[TEXT.TOTAL_MODE] = "players on this mode";
    LANG[TEXT.COMMING_SOON] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Nickname";
    DIE[0] = ["You were killed for no reason"];
    DIE[1] = ["You starved to death, as the name of the game implies"];
    DIE[2] = [
      "You froze to death. So sad",
      "You got hypothermia. Next time, try sitting by a fire instead.",
    ];
    DIE[3] = [
      "A player killed you whilst telling you to 'git gud.'",
      "You got murdered by a player. Don't worry, that player will die too, eventually.",
    ];
    DIE[4] = [
      "You stayed too close to the fire and burnt to death. Bad idea.",
      "You died to a fire. Fires hurt you. Go write a story about it.",
    ];
    DIE[5] = [
      "Your body will become a nest for spider eggs",
      "A spider killed you. At least it wasn't a rabbit.",
    ];
    DIE[6] = [
      "The wolf won't starve anymore after eating you",
      "They aren't dogs. Wolves don't like being pet.",
    ];
    DIE[7] = [
      "The fox was too quick for you",
      "The fox turned you into a box. Since when do animals have magic powers?",
    ];
    DIE[8] = [
      "The bear only wanted a hug.",
      "The bear was too much to bare. I'm not sorry.",
    ];
    DIE[9] = [
      "You were burnt to a crisp by a dragon. So sad.",
      "You got flattened by a dragon. Getting squished is a horrible way to die.",
    ];
    DIE[10] = [
      "You jumped into a spike wall. Not a good idea...",
      "You got killed by a spike wall. Most people are sensible enough not to touch pointy things.",
    ];
    DIE[11] = [
      "Even the ghost can die.",
      "You failed to be resurrected. This is a game, so you go to life after you die, so...",
    ];
    DIE[12] = [
      "A bacterium from your raw food killed you. This game is definitely too hard.",
      "You killed the raw food. It killed you too.",
    ];
    DIE[13] = ["You died of thirst. Better drink your own piss."];
    DIE[14] = [
      "Did you know starver's mouths are always below water when swimming? Now you know.",
    ];
    DIE[15] = [
      "Do not worry, the piranha finds you tasty.",
      "Fun fact: Pirahnas eat people. Including you.",
    ];
    DIE[16] = [
      "LapaMauve does not plan that you can kill the kraken",
      "A kraken krak-ed your skull.",
    ];
    DIE[17] = ["Your skin's falling apart, the sun killed you."];
    DIE[18] = ["Garlic stored in your pockets boiled your brain."];
    DIE[19] = ["As a vampire, don't stand near the garlic cloves."];
    DIE[20] = ["You ate garlic as a vampire, what did you expect?"];
    DIE[21] = [
      "Your body wraps itself in thornbushes. As you try to escape, your skin comes off and your heart stops beating.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... I'm starving",
      "Need your brain Uuunnnggg...",
      "Fresh meat here... Uuunnnggg",
      "Uuunnnggg... You are tasty",
      "Uuunnnggg...",
      "Eat... uuunnnggg...",
      "I can smell blood... Uuunnnggg",
    ];
  },
  set_russian = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0x28924c = 0; _0x28924c < 7; _0x28924c++) {
      document.getElementById("claim_reward_" + _0x28924c).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["Рука"];
    LANG[INV.GROUND] = ["Земля", "Грязно!"];
    LANG[INV.SAND] = ["Песок", "Он в моих глазах!"];
    LANG[INV.WOOD] = ["Дерево", "Постоянно нужно больше!"];
    LANG[INV.STONE] = ["Камень", "Твердый"];
    LANG[INV.GOLD] = ["Золото", "Будьте щедры, давайте его другим"];
    LANG[INV.DIAMOND] = ["Алмаз", "Что вы создадите с помощью него?"];
    LANG[INV.AMETHYST] = ["Аметист", "Он сиреневый, как Lapa"];
    LANG[INV.FLOUR] = ["Мука", "Используется в готовке"];
    LANG[INV.COOKIE] = ["Печенье", "Превосходное бабушкино печенье", "Еда: 50"];
    LANG[INV.CAKE] = ["Торт", "Торт мечты для гурманов", "Еда: 100"];
    LANG[INV.MEAT] = [
      "Сырое Мясо",
      "Ты можешь пожарить его с помощью огня",
      "Вызывает отравление: 10",
      "Еда: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "Жареное Мясо",
      "Превосходный стейк, пожалуйста",
      "Еда: 35",
    ];
    LANG[INV.FOODFISH] = [
      "Сырая Рыба",
      "Я думаю она всё ещё жива",
      "Вызывает отравление: 10",
      "Еда: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "Жареная рыба",
      "С лимоном она прекрасна",
      "Еда: 35",
    ];
    LANG[INV.BREAD] = [
      "Хлеб",
      "Прекрасный французский хлеб",
      "Это валюта, используемая на рынке",
      "Еда: 15",
    ];
    LANG[INV.SANDWICH] = ["Бутерброд", "На вкус как Крабсбургер", "Еда: 100"];
    LANG[INV.CANDY] = ["Конфеты", "Только для детей!", "Еда: 20"];
    LANG[INV.SUGAR_CAN] = [
      "Сахарная Трость",
      "Попробуйте это, это вкусно",
      "Еда: 100",
    ];
    LANG[INV.GARLAND] = ["Гирлянда", "Прекрасная декорация для крыши"];
    LANG[INV.SEED] = [
      "Семя Ягоды",
      "Вырастает в ягоды",
      "Рождение: 2мин",
      "Рост: 55сек",
      "Нужна вода: 3мин 20сек",
      "Прочность: 700",
      "Продолжительность: 8 дней",
    ];
    LANG[INV.PLANT] = ["Ягода", "Ягода вкусная!", "Еда: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Пшеничное Семя",
      "Вырастает в пшеницу",
      "Рождение: 2мин",
      "Рост: 16сек",
      "Нужна вода: 2мин",
      "Прочность: 700",
      "Продолжительность: 8 дней",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Дикая Пшеница",
      "Перемалывается в муку, когда помещается в мельницу",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Семена Тыквы",
      "Вырастает в тыкву",
      "Рождение: 2мин 40сек",
      "Рост: 2мин",
      "Нужна вода: 2мин",
      "Прочность: 700",
      "Продолжительность: 8 дней",
    ];
    LANG[INV.PUMPKIN] = ["Тыква", "Это напоминает мне Хеллоуин", "Еда: 30"];
    LANG[INV.GARLIC_SEED] = [
      "Семена Чеснока",
      "Очень опасно для вампиров",
      "Урон: 20",
      "Рождение: 4мин",
      "Рост: 4 мин",
      "Нужна вода: 1мин 40сек",
      "Прочность: 700",
      "Продолжительность: 8 дней",
    ];
    LANG[INV.GARLIC] = [
      "Чеснок",
      "Лечит и снижает получаемый холод",
      "Еда: 14",
      "Лечит: 30",
      "Эффект: 1",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "Семена Колючего Куста",
      "Может нанести урон врагам",
      "Урон: 20",
      "Рождение: 4мин",
      "Рост: 15сек",
      "Нужна вода: 3мин",
      "Прочность: 1000",
      "Продолжительность: 8 дней",
    ];
    LANG[INV.THORNBUSH] = ["Колючий Куст", "Это больно!"];
    LANG[INV.PLOT] = [
      "Грядка",
      "Серьезно, используйте это.",
      "С этим ГМО удобрением ваши растения",
      "будут расти быстрее и потребуют меньше воды",
      "Прочность: 2000",
    ];
    LANG[INV.ICE] = ["Лёд", "Используется для изготовления тортов и воды"];
    LANG[INV.SPANNER] = [
      "Гаечный Ключ",
      "Для починки дверей, стен, колючек",
      "Урон: 2",
    ];
    LANG[INV.FUR_WOLF] = ["Шкура Волка", "Щенок? Но где же Щенок?!"];
    LANG[INV.FUR] = ["Шкура Зайца", "Этот кролик был таким милым..."];
    LANG[INV.SPECIAL_FUR] = ["Чистая Шкура", "Вы - фабрика хлеба"];
    LANG[INV.SPECIAL_FUR_2] = ["Чёрная Шкура", "Вы готовы делать зло."];
    LANG[INV.FUR_WINTER] = [
      "Зимняя Шкура",
      "Эти животные просто хотели обнять тебя...",
    ];
    LANG[INV.SCALES] = ["Чешуя", "Она пахнет рыбой!"];
    LANG[INV.KRAKEN_SKIN] = ["Шкура Кракена", "Вы не испугались?"];
    LANG[INV.FIRE] = [
      "Костёр",
      "Согрейтесь!",
      "Прочность: 150",
      "Продолжительность: 2мин",
    ];
    LANG[INV.BIG_FIRE] = [
      "Большой Костёр",
      "Согрейтесь больше!",
      "Прочность: 400",
      "Продолжительность: 6мин",
    ];
    LANG[INV.WORKBENCH] = [
      "Верстак",
      "Необходим для создания многих предметов",
    ];
    LANG[INV.CORD] = ["Нить", "Используется в изготовлении Шапок и Рюкзака"];
    LANG[INV.BLUE_CORD] = [
      "Алмазная Нить",
      "Используется в изготовлении специальных шапок",
    ];
    LANG[INV.CHEST] = [
      "Сундук",
      "Позволяет хранить предметы",
      "Прочность: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "Деревянный Меч",
      "Это работает?",
      "Урон: 12",
      "Урон по строениям: 4",
    ];
    LANG[INV.SWORD] = [
      "Каменный Меч",
      "Будьте добры к другим",
      "Урон: 19",
      "Урон по строениям: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Золотой Меч",
      "Король леса",
      "Урон: 22",
      "Урон по строениям: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Алмазный Меч",
      "Ты можешь почувствовать силу",
      "Урон: 24",
      "Урон по строениям: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Пиратский Меч",
      "Aррррр!",
      "Дальность атаки больше чем у нормального меча",
      "Урон: 24",
      "Урон по строениям: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Аметистовый Меч",
      "Сиреневый - самый красивый цвет в мире",
      "Урон: 27",
      "Урон по строениям: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Меч Дракона",
      "Без пощады!",
      "Урон: 30",
      "Урон по строениям: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Копьё Дракона",
      "Убивай всех!",
      "Урон: 22",
      "Урон по строениям: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "Деревянная Кирка",
      "Может добывать только дерево и камень",
      "Урон: 1",
    ];
    LANG[INV.PICK] = [
      "Каменная Кирка",
      "Может добывать дерево, камень и золото",
      "Урон: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "Золотая Кирка",
      "Также может добывать алмазы",
      "Урон: 3",
      "Урон по строениям: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Алмазная Кирка",
      "Можно добывать всё",
      "Урон: 4",
      "Урон по строениям: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Аметистовая Кирка",
      "Можно добывать всё, ещё и выглядит красиво!",
      "Урон: 5",
      "Урон по строениям: 1",
    ];
    LANG[INV.HAMMER] = [
      "Каменный молот",
      "Используется для разрушения зданий",
      "Плохо разрушает алмазные и аметистовые здания",
      "Урон: 2",
      "Урон по строениям: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Золотой Молот",
      "Используется для разрушения зданий",
      "Плохо разрушает аметистовые здания",
      "Урон: 3",
      "Урон по строениям: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Алмазный Молот",
      "Используется для разрушения зданий",
      "Урон: 4",
      "Урон по строениям: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Аметистовый Молот",
      "Используется для разрушения зданий",
      "Урон: 5",
      "Урон по строениям: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Супер Молот",
      "У вас есть планы разрушить мир?",
      "Урон: 12",
      "Урон по строениям: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Деревянное Копьё",
      "Выглядит как деревянная палочка, но делает больно.",
      "Урон: 10",
      "Урон по строениям: 2",
    ];
    LANG[INV.SPEAR] = [
      "Каменное Копьё",
      "Начало эволюции!",
      "Урон: 14",
      "Урон по строениям: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Золотое Копьё",
      "Осторожно, это больно!",
      "Урон: 15",
      "Урон по строениям: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Алмазное Копьё",
      "Вы готовы убивать дракона.",
      "Урон: 17",
      "Урон по строениям: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "Аметистовое Копьё",
      "Драконы больше не пугают вас",
      "Урон: 18",
      "Урон по строениям: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Каменная Лопата",
      "Копайте землю, чтобы получить грязь, лед и песок",
      "Так же вы можете получить ресурсы",
      "Урон: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Золотая Лопата",
      "Копайте землю, чтобы получить грязь, лед и песок",
      "Так же вы можете получить ресурсы",
      "Урон: 3",
      "Урон по строениям: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Алмазная Лопата",
      "Копайте землю, чтобы получить грязь, лед и песок",
      "Так же вы можете получить ресурсы",
      "Урон: 4",
      "Урон по строениям: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Аметистовая Лопата",
      "Копайте землю, чтобы получить грязь, лед и песок",
      "Так же вы можете получить ресурсы",
      "Урон: 5",
      "Урон по стреониям: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Деревянный Шлем",
      "Лучше чем ничего",
      "Защита от игроков: 1",
      "Защита от животных: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Каменный Шлем",
      "Вы готовы к битве!",
      "Защита от игроков: 2",
      "Защита от животных: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Золотой Шлем",
      "Также известен как шлем жестоких людей",
      "Защита от игроков: 4",
      "Защита от животных: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Алмазный Шлем",
      "Не слишком хвастайтесь",
      "Защита от игроков: 5",
      "Защита от животных: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Аметистовый Шлем",
      "Ты больше ничего не боишься",
      "Защита от игроков: 6",
      "Защита от животных: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Шлем Дракона",
      "Ты покоришь мир",
      "Защита от игроков: 8",
      "Защита от животных: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Шапка Исследователя",
      "Животные не обращают на вас внимания",
      "но не шумите!",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "Рождественская Шапка",
      "Ох-хо-хо, Счастливого Рождества",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.ELF_HAT] = [
      "Шапка Эльфа",
      "Не позволяйте себе эксплуатироваться, ведь вы маленький снежный эльф!",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.HOOD] = [
      "Капюшон",
      "Вы разбойник",
      "Вы можете украсть что-то, если",
      "1) Ночь",
      "2) Вы ничего не носите",
      "3)Если вас не тронули в течение восьми секунд",
      "4) Вы не рядом с огнём",
      "5) Вы не можете ничего украсть у крестьянской туники",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.EARMUFFS] = [
      "Теплые Наушники",
      "Какая-то маленькая шапка.",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.COAT] = [
      "Шапка",
      "Так же называется пальтом.",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.CAP_SCARF] = [
      "Зимний Шарф и Шапка",
      "Очень комфортно",
      "Очень тепло",
    ];
    LANG[INV.PEASANT] = [
      "Крестьянская Туника",
      "Ваши растения растут быстрее",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Зимний Капюшон",
      "Вы можете украсть что-то, если",
      "- Ночь",
      "- Вы ничего не носите",
      "- Если вас не тронули в течение четырёх секунд",
      "- Вы не рядом с огнём",
      "- Вы не можете ничего украсть у крестьянской туники",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Зимняя Крестьянская Туника",
      "Ваши растения растут быстрее",
      "Защищает от холода вне воды.",
    ];
    LANG[INV.DIVING_MASK] = [
      "Акваланг",
      "Вы быстрее передвигаетесь по воде",
      "Тепло в воде",
      "Защита от игроков: 2, Защита от животных: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Супер Акваланг",
      "Вы очень быстро передвигаетесь по воде",
      "Тепло в воде",
      "Защита от игроков: 4, Защита от животных: 16",
    ];
    LANG[INV.DRAGON_ORB] = ["Шар Дракона", "Даётся за квест"];
    LANG[INV.DRAGON_HEART] = [
      "Сердце Дракона",
      "Превращает вас в призрака после смерти!",
      "Вы призрак на 60 секунд",
      "Найдите камень воскрешения",
    ];
    LANG[INV.GEMME_GREEN] = [
      "Зелёный Драгоценный Камень",
      "Вы без читов, правильно?",
    ];
    LANG[INV.GEMME_ORANGE] = [
      "Оранжевый Драгоценный Камень",
      "Только настоящий пират найдёт это!",
    ];
    LANG[INV.GEMME_BLUE] = [
      "Синий Драгоценный Камень",
      "Для очень добрых людей",
    ];
    LANG[INV.CROWN_GREEN] = [
      "Зеленая корона",
      "Вы лечите себя очень быстро",
      "Лечит: 40",
      "Защита от игроков: 4, Защита от животных: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Оранжевая Корона",
      "Вам очень повезло",
      "Защита от игроков: 4, Защита от животных: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Синяя Корона",
      "Как только вы умрёте, вы станете призраком",
      "Но вы потеряете своё оружие",
      "Защита от игроков: 4, Защита от животных: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Ведро",
      "Используется для заполнения колодца",
      "Одно ведро равняется двенадцати бутылкам",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "Пустое ведро",
      "Вам надо заполнить это ведро возле воды",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "Бутылка",
      "Позволяет пить воду в любом месте",
      "Вода: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "Пустая бутылка",
      "Вы можете заполнить бутылку возле воды",
    ];
    LANG[INV.WATERING_CAN] = [
      "Пустая Лейка",
      "Вы можете заполнить лейку возле воды",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "Лейка",
      "Позволяет поливать растения",
      "Урон: 1",
    ];
    LANG[INV.BAG] = ["Рюкзак", "Больше места для ваших предметов!"];
    LANG[INV.PAPER] = ["Бумага", "Используется при создании книги"];
    LANG[INV.BOOK] = [
      "Книга",
      "Сокращает время изготовления предметов",
      "Должно быть одето для работы",
      "Урон: 1",
    ];
    LANG[INV.BANDAGE] = [
      "Бинт",
      "Восстанавливает ваше здоровье быстрее",
      "Лечит: 30",
      "Эффект: 5",
    ];
    LANG[INV.LOCK] = ["Замок", "Позволяет вам закрыть ваш сундук"];
    LANG[INV.LOCKPICK] = ["Ключ", "Даёт вам открыть один запертый сундук"];
    LANG[INV.TOTEM] = [
      "Тотем",
      "Позволяет вам создать команду",
      "Совместное использование дверей и сундуков",
      "Вредное здание не повредит вашего друга",
    ];
    LANG[INV.BRIDGE] = [
      "Мост",
      "Очень полезно на воде",
      "Позволяет вам пить без потери воздуха",
      "Передвигаетесь быстрее по воде",
    ];
    LANG[INV.SIGN] = [
      "Табличка",
      "Оставьте сообщение другим",
      "Прочность: 200",
    ];
    LANG[INV.ROOF] = ["Крыша", "Немного скрывает вас и согревает!"];
    LANG[INV.WELL] = [
      "Колодец",
      "Позволяет заполнить бутылку",
      "Прочность: 1000",
    ];
    LANG[INV.WALL] = [
      "Деревянная Стена",
      "Это просто стена",
      "Прочность: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "Каменная Стена",
      "Это немного посерьезнее.",
      "Прочность: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "Золотая Стена",
      "Золото на ваших стенах? Она ослепляет.",
      "Прочность: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Алмазная Стена",
      "Очень блестит, следите за вашими глазами",
      "Прочность: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Аметистовая стена",
      "Вы должны быть слишком напуганы, чтобы уйти!",
      "Прочность: 3500",
    ];
    LANG[INV.SPIKE] = [
      "Деревянная Стена с Шипами",
      "Может наносить урон врагам",
      "Урон: 10, Урон за один удар: 2",
      "Прочность: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Каменная Стена с Шипами",
      "Я не хотел бы быть вашим врагом",
      "Урон: 20",
      "Урон за один удар: 3",
      "Прочность: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Золотая Стена с Шипами",
      "Вы очень жестоки.",
      "Урон: 30",
      "Урон за один удар: 3",
      "Прочность: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Алмазная Стена с Шипами",
      "Вам не нравится иметь компанию.",
      "Урон: 40",
      "Урон за один удар: 4",
      "Прочность: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Аметистовая Стена с Шипами",
      "Какого черта, что ваши соседи сделали с вами?",
      "Урон: 50",
      "Урон за один удар: 4",
      "Прочность: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Деревянная Дверь",
      "Может быть открыта и закрыта вами или друзьями",
      "Прочность: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Каменная Дверь",
      "Более серьезная и сильная дверь",
      "Прочность: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Золотая Дверь",
      'Вы перестраиваете "Эль Дорадо?"',
      "Прочность: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Алмазная Дверь",
      "Для роскошного дома",
      "Прочность: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Аметистовая Дверь",
      "Ваш дом в безопасности?",
      "Прочность: 3000",
    ];
    LANG[INV.FURNACE] = [
      "Печь",
      "Согревает",
      "Тратит дерево каждые 5 секунд",
      "Прочность: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Мельница",
      "Может сделать муку из пшеницы",
      "Требует 5 секунд для получения муки",
      "Даёт очки при работе",
      "Прочность: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Хлебная Печь",
      "Позволяет готовить хлеб из муки",
      "Требует 10 секунд для получения хлеба",
      "Даёт очки при работе",
      "Прочность: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Камень Воскрешения",
      "Это магия",
      "Воскрешает вас, если вы призрак",
      "Вы потеряете своё оружие",
      "Прочность: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "Вы не можете зайти на этот сервер";
    LANG[TEXT.KICKED] = "Выгнаны: ";
    LANG[TEXT.KEY_ALREADY] = "Ваш ключ уже используется кем-то";
    LANG[TEXT.KEY_WRONG] = "Ваш ключ неправильный";
    LANG[TEXT.OLD_VERSION] = "У вас старая версия, вам нужно очистить кеш";
    LANG[TEXT.NO_MORE_RESOURCES] = "Ресурсов больше нет";
    LANG[TEXT.SURVIVED_1DAY] = "Вы выжили 1 день";
    LANG[TEXT.SURVIVED] = "Вы выжили ";
    LANG[TEXT.DAYS] = " дней";
    LANG[TEXT.DEAD_SAD] = "Вы умерли ;-;";
    LANG[TEXT.SPAM_ME] =
      "Сервер не может найти точку спавна! Спамьте кнопку играть!";
    LANG[TEXT.SPAM_ME2] = "Сервер заполнен! Спамьте кнопку играть!";
    LANG[TEXT.EMPTY] = "Ресурсы закончились";
    LANG[TEXT.INV_FULL] =
      "Инвентарь заполнен (правая кнопка мыши для удаления предметов)";
    LANG[TEXT.DEAD] = " умер";
    LANG[TEXT.WRONG_TOOL] = "Это не тот инструмент";
    LANG[TEXT.JOIN_TEAM] = "Вы вошли в команду";
    LANG[TEXT.YOU_DEAD] = "Вы умерли";
    LANG[TEXT.JOINED_TEAM] = " вошёл в команду";
    LANG[TEXT.TEAM_DESTROYED] = "Ваша команда была разрушена";
    LANG[TEXT.LEFT_TEAM] = "Вы покинули команду";
    LANG[TEXT.LEFT_TEAM2] = " покинул команду";
    LANG[TEXT.TOKEN] = "Кто-то использует ваш токен :>";
    LANG[TEXT.CHOOSE] = "Выберите сервер";
    LANG[TEXT.PLAYERS] = "игроков";
    LANG[TEXT.TOTAL_PLAYERS] = "игроков всего";
    LANG[TEXT.TOTAL_MODE] = "игроков в этом режиме";
    LANG[TEXT.COMMING_SOON] = "Скоро...";
    document.getElementById("nickname_input").placeholder = "Имя";
    DIE[0] = ["Вы были убиты без причины"];
    DIE[1] = ["Вы умерли от голода, как название игры подразумевает это"];
    DIE[2] = [
      "Вы замерзли до смерти. Так грустно",
      "У вас гипотермия. В следующий раз, постарайтесь быть рядом с огнём.",
    ];
    DIE[3] = [
      "Игрок убил тебя и сказал 'стань лучше.'",
      "Ты был убит игроком. Не волнуйся, этот игрок тоже умрёт, в конце концов.",
    ];
    DIE[4] = [
      "Вы стояли слишком близко к огню и сгорели. Плохая идея.",
      "Ты умер от огня, он причинил вам боль. Напишите историю насчёт этого.",
    ];
    DIE[5] = [
      "Ваше тело станет гнездом для яиц паука",
      "Паук убил вас. По крайней мере это был не кролик.",
    ];
    DIE[6] = [
      "Волк больше не будет голодать после того, как наелся вами",
      "Они не собаки. Волки не любят ласкаться.",
    ];
    DIE[7] = [
      "Лиса была слишком быстрой для вас",
      "Лиса превратила тебя в ящик. С каких пор животные обладают магическими способностями?",
    ];
    DIE[8] = [
      "Медведь просто хотел обнять тебя.",
      "Медведь был слишком грустным. Мне не жаль.",
    ];
    DIE[9] = [
      "Вы были сожжены драконом. Так грустно.",
      "Вы были сплющены драконом. Быть раздавленным - это ужасный способ умереть.",
    ];
    DIE[10] = [
      "Вы прыгнули в стену с шипами. Плохая идея...",
      "Вы были убиты стеной с шипами. Большинство людей достаточно разумны, чтобы не касаться острых вещей.",
    ];
    DIE[11] = [
      "Даже призрак может умереть.",
      "Вы не смогли воскреснуть. Это игра, и вы можете возвращаться к жизни после смерти, так что...",
    ];
    DIE[12] = [
      "Бактерия из вашей сырой пищи убила вас. Эта игра безусловно сложна.",
      "Вы убили сырую пищу. Она тоже тебя убила.",
    ];
    DIE[13] = ["Вы умерли от жажды. Лучше пить собственную мочу."];
    DIE[14] = [
      "Знаешь ли ты, что у голодающих рот всегда под водой, когда они плавают? Теперь ты знаешь.",
    ];
    DIE[15] = [
      "Не волнуйся, пиранья сочла тебя вкусным.",
      "Веселый факт: Пираньи едят людей. В том числе тебя.",
    ];
    DIE[16] = [
      "LapaMauve не планировал, что ты убьёшь кракена",
      "Крак! Кракен сломал твой череп.",
    ];
    DIE[17] = ["Твоя кожа разваливается, солнце убило тебя"];
    DIE[18] = ["Чеснок, хранящийся в твоих карманах сварил твой мозг."];
    DIE[19] = ["Не стоит стоять рядом с чесночным зубком, когда вы вампир."];
    DIE[20] = ["Вы вампир, Вы ели чеснок, чего вы ожидали?"];
    DIE[21] = [
      "Ваше тело застревает в шипах, когда вы пытаетесь убежать, ваша кожа отрывается, и ваше сердце перестает биться.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... Я голоден",
      "Нужны твои мозги Uuunnnggg...",
      "Свежее мясо здесь... Uuunnnggg",
      "Uuunnnggg... Ты вкусный",
      "Uuunnnggg...",
      "Еда\u2026 Uuunnnggg...",
      "Я чувствую запах крови... Uuunnnggg",
    ];
  },
  set_portuguese = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0xc73e0f = 0; _0xc73e0f < 7; _0xc73e0f++) {
      document.getElementById("claim_reward_" + _0xc73e0f).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["mão"];
    LANG[INV.GROUND] = ["terra", "está sujo!"];
    LANG[INV.SAND] = ["areia", "entrou nos meus olhos!"];
    LANG[INV.WOOD] = ["madeira", "você não pode pegar o suficiente disso!"];
    LANG[INV.STONE] = ["pedra", "também chamado rocha"];
    LANG[INV.GOLD] = ["ouro", "seja generoso, dê para outros"];
    LANG[INV.DIAMOND] = ["diamante", "o que você irá fazer com isso?"];
    LANG[INV.AMETHYST] = ["ametista", "é mauve como lapa"];
    LANG[INV.FLOUR] = ["farinha", "usada na cozinha"];
    LANG[INV.COOKIE] = ["biscoito", "biscoito da vovó", "comida: 50"];
    LANG[INV.CAKE] = ["bolo", "bolo dos sonhos para gourmets", "comida: 100"];
    LANG[INV.MEAT] = [
      "carne crua",
      "você pode cozinhar na fogueira",
      "envenenamento por comida: 10",
      "comida: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "carne assada",
      "um mal passado, por favor",
      "comida: 35",
    ];
    LANG[INV.FOODFISH] = [
      "peixe cru",
      "eu acho que ainda está vivo",
      "causa envenenamento por comida: 10",
      "comida: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "peixe assado",
      "com limão é perfeito",
      "comida: 35",
    ];
    LANG[INV.BREAD] = [
      "pão",
      "um excelente pão francês",
      "é a moeda do mercado",
      "comida: 15",
    ];
    LANG[INV.SANDWICH] = [
      "sanduíche",
      "saboroso com rissol de krabby",
      "comida: 100",
    ];
    LANG[INV.CANDY] = ["doces", "apenas para crianças!", "comida: 100"];
    LANG[INV.SUGAR_CAN] = [
      "cana-de-açúcar",
      "prove, é delicioso!",
      "comida: 100",
    ];
    LANG[INV.GARLAND] = ["pisca-pisca", "decoração perfeita de telhado"];
    LANG[INV.SEED] = [
      "sementes de berries",
      "cresce como berrie",
      "nasce em: 2min",
      "cresce em: 55s",
      "precisa de água em: 3min 20s",
      "durabilidade: 700",
      "tempo de vida: 8 dias",
    ];
    LANG[INV.PLANT] = ["berry", "Berry saborosa!", "comida: 10"];
    LANG[INV.WHEAT_SEED] = [
      "semente de trigo",
      "cresce como trigo",
      "nasce em: 2min",
      "cresce em: 16s",
      "precisa de água em: 2min",
      "durabilidade: 700",
      "tempo de vida: 8 days",
    ];
    LANG[INV.WILD_WHEAT] = [
      "planta selvagem",
      "vira farinha quando coloca em um moinho de vento",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "semente de abóbora",
      "cresce como abóbora",
      "nasce em: 2min 40s",
      "cresce em: 2min",
      "precisa de água em: 2min",
      "durabilidade: 700",
      "tempo de vida: 8 dias",
    ];
    LANG[INV.PUMPKIN] = ["abóbora", "é a lembrança do halloween", "comida: 30"];
    LANG[INV.GARLIC_SEED] = [
      "semente de alho",
      "muito perigoso para vampiros",
      "dano: 20",
      "nassce: 4min",
      "cresce em: 1min 10s",
      "precisa de água em: 1min 40s",
      "durabilidade: 700",
      "tempo de vida: 8 dias",
    ];
    LANG[INV.GARLIC] = [
      "alho",
      "cura você e reduz o frio",
      "comida: 14",
      "cura ao longo do tempo: 30",
      "efeito: 1",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "semente de mato de espinhos",
      "pode dar dano nos seus inimigos",
      "dano: 20",
      "nasce em: 4min",
      "cresce em: 15s",
      "precisa de água em: 3min",
      "durabilidade: 1000",
      "tempo de vida: 8 days",
    ];
    LANG[INV.THORNBUSH] = ["mato de espinhos", "pica!"];
    LANG[INV.PLOT] = [
      "pote",
      "sério, use isso",
      "com esse GMO fertilize suas plantas",
      "vai crescer mais rápido e com menos água",
      "durabilidade: 2000",
    ];
    LANG[INV.ICE] = ["gelo", "útil para fazer bolo e água"];
    LANG[INV.SPANNER] = [
      "chave inglesa",
      "para reparar portas, muros e muros com espinho",
      "dano: 2",
    ];
    LANG[INV.FUR_WOLF] = [
      "pele de lobo",
      "cachorro? mas onde está o cachorro?!",
    ];
    LANG[INV.FUR] = ["pele de coelho", "o coelho era tão fofo..."];
    LANG[INV.SPECIAL_FUR] = ["pele pura", "você é uma fábrica de pão"];
    LANG[INV.SPECIAL_FUR_2] = [
      "pele negra",
      "você está pronto para fazer algo errado",
    ];
    LANG[INV.FUR_WINTER] = ["pele de inverno", "ele só queria um abraço"];
    LANG[INV.SCALES] = ["escala", "é pequeno como peixe!"];
    LANG[INV.KRAKEN_SKIN] = ["pele do kraken", "você não está com medo?"];
    LANG[INV.FIRE] = [
      "fogueira",
      "esquenta você!",
      "durabilidade: 150",
      "tempo de vida: 2min",
    ];
    LANG[INV.BIG_FIRE] = [
      "fogueira grande",
      "te esquenta por mais tempo!",
      "durabilidade: 400",
      "tempo de vida: 6min",
    ];
    LANG[INV.WORKBENCH] = [
      "mesa de trabalho",
      "muito útil para fazer todos os objetos",
    ];
    LANG[INV.CORD] = ["linha", "usada para fazer chapéus e mochila"];
    LANG[INV.BLUE_CORD] = [
      "linha de diamante",
      "usada para fazer chapéus especiais",
    ];
    LANG[INV.CHEST] = [
      "baú",
      "permite que você guarde itens",
      "durabilidade: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "espada de madeira",
      "isso funciona?",
      "dano: 12",
      "dano em construções: 4",
    ];
    LANG[INV.SWORD] = [
      "espada de pedra",
      "seja legal com outros",
      "dano: 19",
      "dano em construções: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "espada de ouro",
      "rei da floresta",
      "dano: 22",
      "dano em construções: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "espada de diamante",
      "você pode sentir o poder",
      "dano: 24",
      "dano em construções: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "espada de pirata",
      "AYYYYY!",
      "alcança mais distância que a espada normal",
      "dano: 24",
      "dano em construções: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "espada de ametista",
      "mauve é a cor mais bonita do mundo",
      "dano: 27",
      "dano em construções: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "espada do dragão",
      "sem piedade!",
      "dano: 30",
      "dano em construções: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "lança do dragão",
      "mate todos eles!",
      "dano: 22",
      "dano em construções: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "picareta de madeira",
      "pode coletar apenas madeira e pedra",
      "dano: 1",
    ];
    LANG[INV.PICK_STONE] = [
      "picareta de pedra",
      "pode coletar madeira, pedra e ouro",
      "dano: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "picareta de ouro",
      "pode coletar diamante",
      "dano: 3",
      "dano em construções: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "picareta de diamante",
      "pode coletar tudo",
      "dano: 4",
      "dano em construções: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "picareta de ametista",
      "pode coletar tudo, parece fantastico!",
      "dano: 5",
      "dano em construções: 1",
    ];
    LANG[INV.HAMMER] = [
      "martelo de pedra",
      "útil para destruir construções",
      "não funciona bem no diamante e na ametista",
      "dano: 2",
      "dano em construções: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "martelo de ouro",
      "útil para destruir construções",
      "não funciona bem na ametista",
      "dano: 3",
      "dano em construções: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "martelo de diamante",
      "útil para destruir construções",
      "dano: 4",
      "dano em construções: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "martelo de ametista",
      "útil para destruir construções",
      "dano: 5",
      "dano em construções: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "super martelo",
      "você planeja destruir o mundo?",
      "dano: 12",
      "dano em construções: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "lança de madeira",
      "parece um graveto de madeira mas pica.",
      "dano: 10",
      "dano em construções: 2",
    ];
    LANG[INV.SPEAR] = [
      "lança de pedra",
      "o começo da evolução!",
      "dano: 14",
      "dano em construções: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "lança de ouro",
      "cuidado, pica!",
      "dano: 15",
      "dano em construções: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "lança de diamante",
      "você está pronto para matar um dragão",
      "Dano: 17",
      "dano em construções: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "lança de ametista",
      "dragões não te amedrontam",
      "Dano: 18",
      "dano em construções: 6",
    ];
    LANG[INV.SHOVEL] = [
      "pá de pedral",
      "cave o chão para pegar terra, areia e gelo",
      "você também pode pegar minerais",
      "dano: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "pá de ouro",
      "cave o chão para pegar terra, areia e gelo",
      "você também pode pegar minerais",
      "dano: 3",
      "dano em construções: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "pá de diamante",
      "cave o chão para pegar terra, areia e gelo",
      "você também pode pegar minerais",
      "dano: 4",
      "dano em construções: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "pá de ametista",
      "cave o chão para pegar terra, areia e gelo",
      "você também pode pegar minerais",
      "dano: 5",
      "dano em construções: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "capacete de madeira",
      "melhor que nada",
      "defesa de jogadores: 1",
      "defesa de animais: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "capacete de pedra",
      "você está pronto para a batalha!",
      "defesa de jogadores: 2",
      "Animals Defense: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "capacete de ouro",
      "AKA o capacete dos selvagens",
      "defesa de jogadores: 4",
      "defesa de animais: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "capacete de diamante",
      "não se precipite tanto",
      "defesa de jogadores: 5",
      "defesa de animais: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "capacete de ametista",
      "você não tem medo de mais nada",
      "defesa de jogadores: 6",
      "defesa de animais: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "capacete do dragão",
      "você vai conquistar o mundo",
      "defesa de jogadores: 8",
      "defesa de animais: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "chapéu de explorador",
      "animais não vão te atacar",
      "mas não faça barulho!",
      "quente fora da água",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "gorro de natal",
      "Oh, oh, oh, feliz natal",
      "quente fora da água e neve",
    ];
    LANG[INV.ELF_HAT] = [
      "chapéu de elfo",
      "não deixe-se ser explorado, seu pequeno elfo de neve!",
      "quente fora da água e neve",
    ];
    LANG[INV.HOOD] = [
      "capuz",
      "você é um trapaceiro",
      "você pode roubar alguém apenas se",
      "1) é de noite",
      "2)você não está segurando nada",
      "3) se você n foi tocado por 5 segundos",
      "4) você não está perto de uma fogueira",
      "5) seu alvo não está com equipamento camponês",
      "quente fora da água e na neve",
    ];
    LANG[INV.EARMUFFS] = [
      "protetor de orelhas",
      "algum tipo de chapka pequena.",
      "quente fora da água e neve",
    ];
    LANG[INV.COAT] = [
      "Chapka",
      "também chamado de casaco.",
      "esquenta fora da água e na neve",
      "muito quente",
    ];
    LANG[INV.CAP_SCARF] = [
      "Chapéu de inverno",
      "Muito confortável",
      "Muito quente",
    ];
    LANG[INV.PEASANT] = [
      "túnica",
      "suas plantas crescem rápido",
      "quente fora da água e na neve",
    ];
    LANG[INV.WINTER_HOOD] = [
      "capuz de inferno",
      "você só pode roubar alguém se",
      "é de noite",
      "-você não está segurando nada",
      "- se você não foi tocado por 4 segundos",
      "- você não está perto de uma fogueira",
      "-seu alvo não está com equipamento de camponês de inverno",
      "esquenta fora da água e na neve",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "camponês de inverno",
      "suas plantas crescem rápido",
      "quente fora da água e na neve",
    ];
    LANG[INV.DIVING_MASK] = [
      "máscara de mergulho",
      "você é rápido na água",
      "quente na água",
      "defesa de jogadores: 2, defesa de animais: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "super máscara de mergulho",
      "você é muito rápido na água",
      "quente na água",
      "defesa de jogadores: 4, defesa de animais: 16",
    ];
    LANG[INV.DRAGON_ORB] = ["esfera do dragão", "dado na questt"];
    LANG[INV.DRAGON_HEART] = [
      "coração de dragão",
      "torna você num fantasmas na morte!",
      "você é um fantasma por 60 segundos",
      "ache uma pedra da ressurreição",
    ];
    LANG[INV.GEMME_GREEN] = ["pedra verde", "você não vai trapacear, promete?"];
    LANG[INV.GEMME_ORANGE] = [
      "pedra laranja",
      "apenas um pirata de verdade pode achar-lo!",
    ];
    LANG[INV.GEMME_BLUE] = ["pedra azul", "para pessoas muito gentis"];
    LANG[INV.CROWN_GREEN] = [
      "coroa verde",
      "você se regenera muito rápido",
      "regenera ao longo do tempo: 40",
      "defesa de jogadores: 4, defesa de animais: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "coroa laranja",
      "de repente você se sente muito sortudo",
      "defesa de jogadores: 4, defesa de animais: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "coroa azul",
      "quando você morrer, você vira um fantasma",
      "você perderá sua arma",
      "defesa de jogadores: 4, defesa de animais: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "balde",
      "útil para encher um poço",
      "um balde equivale a doze garrafas",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "balde vazio",
      "você precisa encher esse balde perto de uma fonte de água",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "garrafa",
      "permite que você beba água em qualquer lugar",
      "água: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "garrafa vazia",
      "você pode encher essa garrafa perto de uma fonte de água",
    ];
    LANG[INV.WATERING_CAN] = [
      "regador vazio",
      "você deve enche-lo com uma fonte de água para usa-lo",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "regador",
      "permite regar as plantas",
      "dano: 1",
    ];
    LANG[INV.BAG] = ["mochila", "mais espaço para seus itens!"];
    LANG[INV.PAPER] = ["papel", "usado para fazer o livro"];
    LANG[INV.BOOK] = [
      "livro",
      "permite reduzir consideradamente o tempo de construções",
      "mas precisa está equipado para fucionar",
      "dano: 1",
    ];
    LANG[INV.BANDAGE] = [
      "bandagem",
      "recupera sua vida mais rapidamente",
      "Heal over time: 30",
      "Effect: 5",
    ];
    LANG[INV.LOCK] = ["fechadura", "permite você trancar seu baú"];
    LANG[INV.LOCKPICK] = ["chave", "permite destrancar um baú"];
    LANG[INV.TOTEM] = [
      "Totem",
      "permite você criar um time",
      "compartilha portas e baús",
      "edifício prejudicial não quer machucar seu amigo",
    ];
    LANG[INV.BRIDGE] = [
      "ponte",
      "muito útil na água",
      "permite você beber sem se afogar",
      "anda rápido na água",
    ];
    LANG[INV.SIGN] = [
      "placa",
      "deixe uma mensagem para outros",
      "durabilidade: 200",
    ];
    LANG[INV.ROOF] = ["telhado", "esconde você um pouco e te esquenta!"];
    LANG[INV.WELL] = ["poço", "permite encher garrafas", "durabilidade: 1000"];
    LANG[INV.WALL] = [
      "muro de madeira",
      "você sabia que o muro dança?",
      "durabilidade: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "muro de pedra",
      "é um pocu mais sério.",
      "durabilidade: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "muro de ouro",
      "ouro nos seus muros? é muito chamativo.",
      "durabilidade: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "muro de diamante",
      "tão brilhoso, veja seus olhos",
      "durabilidade: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "muro de ametista",
      "você está muito assustado de sair!",
      "durabilidade: 3000",
    ];
    LANG[INV.SPIKE] = [
      "espiga de madeira",
      "pode dar dano nos seus inimigos",
      "dano: 10, dano no acerto: 2",
      "durabilidade: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "espiga de pedra",
      "eu não quero ser seu inimigo.",
      "dano: 20",
      "dano no acerto: 3",
      "durabilidade: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "espiga de ouro",
      "você é tão cruel.",
      "dano: 30",
      "dano no acerto: 3",
      "durabilidade: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "espiga de diamante",
      "você não gosta de ter companhia.",
      "dano: 40",
      "dano no acerto: 4",
      "durabilidade: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "espiga de ametista",
      "o que diabos seu vizinhos fizeram para você?",
      "dano: 50",
      "dano no acerto: 4",
      "durabilidade: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "porta de madeira",
      "pode ser aberta ou fechada por você ou seus amigos",
      "durabilidade: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "porta de pedra",
      "uma porta mais forte é mais sério",
      "durabilidade: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "porta de ouro",
      "você está re-construindo o el dorado?",
      "durabilidade: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "porta de diamante",
      "para uma casa brilhante",
      "durabilidade: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "porta de ametista",
      "é a sua casa um lugar trancado seguro?",
      "durabilidade: 3500",
    ];
    LANG[INV.FURNACE] = [
      "fornalha",
      "esquenta você",
      "consumi madeira em todo 5 segundos",
      "durabilidade: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "moinho de vento",
      "pode produzir farinha do trigo",
      "demora 5 segundos para fazer farinha",
      "dá pontos ao trabalhar",
      "durabilidade: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "forno de pão",
      "permite fazer pão feito de farinha",
      "demora 10 segundos para fazer pão",
      "dá pontos ao trabalhar",
      "durabilidade: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "pedra da ressurreição",
      "é mágico",
      "te ressuscita se você for um fantasmas",
      "você vai perder sua arma",
      "durabilidade 200: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "você não pode entrar no servidor";
    LANG[TEXT.KICKED] = "kickado: ";
    LANG[TEXT.KEY_ALREADY] = "sua chave está em uso por outra pessoa";
    LANG[TEXT.KEY_WRONG] = "sua chave está errada";
    LANG[TEXT.OLD_VERSION] = "você tem uma versão velha, limpe seu cache";
    LANG[TEXT.NO_MORE_RESOURCES] = "não tem mais recursos";
    LANG[TEXT.SURVIVED_1DAY] = "você sobreviveu 1 dia";
    LANG[TEXT.SURVIVED] = "você sobreviveu ";
    LANG[TEXT.DAYS] = " dias";
    LANG[TEXT.DEAD_SAD] = "você está morto ;-;";
    LANG[TEXT.SPAM_ME] =
      "servidor não pôde achar um local de spawn! spam o botão de play!";
    LANG[TEXT.SPAM_ME2] = "servidor está cheio! spam o botão de play!";
    LANG[TEXT.EMPTY] = "não tem recursos";
    LANG[TEXT.INV_FULL] =
      "inventário está cheio (botão direito para deletar itens)";
    LANG[TEXT.DEAD] = " está morto";
    LANG[TEXT.WRONG_TOOL] = "essa não é a ferramenta certa";
    LANG[TEXT.JOIN_TEAM] = "você entrou no time";
    LANG[TEXT.YOU_DEAD] = "você está morto";
    LANG[TEXT.JOINED_TEAM] = "entrou no time";
    LANG[TEXT.TEAM_DESTROYED] = "seu time foi destruido";
    LANG[TEXT.LEFT_TEAM] = "você saiu do time";
    LANG[TEXT.LEFT_TEAM2] = " saiu do time";
    LANG[TEXT.TOKEN] = "alguém roubou sua ficha :>";
    LANG[TEXT.CHOOSE] = "escolha um servidor";
    LANG[TEXT.PLAYERS] = "jogadores";
    LANG[TEXT.TOTAL_PLAYERS] = "jogadores totais";
    LANG[TEXT.TOTAL_MODE] = "jogadores nesse modo";
    LANG[TEXT.COMMING_SOON] = "Coming soon...";
    document.getElementById("nickname_input").placeholder = "Apelido";
    DIE[0] = ["você morreu sem motivo"];
    DIE[1] = ["você morreu de fome, como o jogo diz"];
    DIE[2] = [
      "você morreu de frio. tão triste",
      "você pegou hipotermia na próxima vez, tente sentar numa fogueira em vez disso.",
    ];
    DIE[3] = [
      "um jogador te matou dizendo a você para matar..'",
      "você foi morto por um jogador. não se preocupe, aquele jogador morrerá também, eventualmente.",
    ];
    DIE[4] = [
      "você ficou muito perto de uma fogueira e queimou até a morte. má ideia.",
      "você morreu por um incêndio. fogueira te machuca. vá escrever uma história sobre isso.",
    ];
    DIE[5] = [
      "seu corpo vai virar um ninho para ovos de aranhas",
      "uma aranha te matou. pelo menos não era um coelho.",
    ];
    DIE[6] = [
      "o lobo não vão morrer de fome depois te te comer",
      "eles não são cachorros. lobos não gostam de ser que nem animais de estimação.",
    ];
    DIE[7] = [
      "a raposa era muito rápida para você",
      "a raposa te tornou uma caixa. desde quando os animais tem poderes mágicos?",
    ];
    DIE[8] = [
      "o urso só queria um abraço.",
      " o urso era muito nu. eu não sinto muito.",
    ];
    DIE[9] = [
      "você foi queimado por um dragão. tão triste..",
      "você foi esmagado por um dragão.. ser esmagado é uma maneira horrível de morrer.",
    ];
    DIE[10] = [
      "você pulou em um muro com espinhos. não é uma boa ideia...",
      "você foi morto por um muro com espinhos. muitas pessoas são sensíveis o bastante para não tocar em coisas pontudas.",
    ];
    DIE[11] = [
      "até fantasmas podem morrer.",
      "você falhou para ser ressuscitado. This is a game, so you go to life after you die, so...",
    ];
    DIE[12] = [
      "uma bactéria da sua comida crua te matou esse jogo é definitivamente muito díficil.",
      "você matou a carne crua. a carne crua te matou também.",
    ];
    DIE[13] = ["você morreu de sede. melhor beber sua própria urina."];
    DIE[14] = ["você sabia que você morre afogado? agora você sabe."];
    DIE[15] = [
      "não se preocupe, as piranhas acham você saboroso.",
      "fato engraçado: Piranhas comem pessoas. incluindo você.",
    ];
    DIE[16] = [
      "LapaMauve não planeja você matar o kraken",
      "um kraken comeu seu esqueleto.",
    ];
    DIE[17] = ["sua pele caindo aos pedaços, o sol te matou."];
    DIE[18] = ["o alho amarzenado em seus bolsos ferveu seu cérebro."];
    DIE[19] = ["como vampiro, não chegue perto do alho."];
    DIE[20] = ["você comeu alho como vampiro, o que você esperava?"];
    DIE[21] = [
      "seu corpo se enroscou nos espinhos. quando você tenta escapar, sua pele sai e seu coração para de bater.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... estou morrendo de fome",
      "preciso do seu cerébro Uuunnnggg...",
      "carne fresca aqui... Uuunnnggg",
      "Uuunnnggg... você parece saboroso",
      "Uuunnnggg...",
      "Eat... uuunnnggg...",
      "consigo sentir o cheiro de sangue... Uuunnnggg",
    ];
  },
  set_spanish = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0x305468 = 0; _0x305468 < 7; _0x305468++) {
      document.getElementById("claim_reward_" + _0x305468).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["Mano"];
    LANG[INV.GROUND] = ["Tierra", "\xA1Tan limpia como mis manos!"];
    LANG[INV.SAND] = ["Arena", "\xA1Tengo arena en mis ojos!"];
    LANG[INV.WOOD] = ["Madera", "\xA1Nunca hay suficiente!"];
    LANG[INV.STONE] = ["Piedra", "También llamada roca."];
    LANG[INV.GOLD] = ["Oro", "Sé generoso, compártelo con los otros"];
    LANG[INV.DIAMOND] = ["Diamante", "\xBFQue vas a hacer con él?"];
    LANG[INV.AMETHYST] = ["Amatista", "Es Mauve como Lapa"];
    LANG[INV.FLOUR] = ["Harina", "Usada para cocinar."];
    LANG[INV.COOKIE] = ["Galleta", "Una galleta de la abuelita", "Comida: 50"];
    LANG[INV.CAKE] = ["Tarta", "\xA1Cumpleaños Feliz!", "Comida: 100"];
    LANG[INV.MEAT] = [
      "Carne Cruda",
      "Se cocina con fuego",
      "Causa veneno. 10",
      "Comida: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "Carne Cocinada",
      "es la supervivencia del más fuerte :'(",
      "Comida: 35",
    ];
    LANG[INV.FOODFISH] = [
      "Pescado Crudo",
      "Creo que sigue vivo",
      "Causa veneno de comida: 10",
      "Comida: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "Pescado Cocinado",
      "Con limón sería perfecto",
      "Comida: 35",
    ];
    LANG[INV.BREAD] = [
      "Pan",
      "\xA1Caliente, desde Francia!",
      "Es dinero usado en la tienda",
      "Comida: 15",
    ];
    LANG[INV.SANDWICH] = [
      "Bocadillo",
      "Sabe como un Krabby Patty",
      "Comida: 100",
    ];
    LANG[INV.CANDY] = ["Caramelos", "\xA1Solo para niños/as!", "Comida: 100"];
    LANG[INV.SUGAR_CAN] = [
      "Caña de Azúcar",
      "Pruébala, es deliciosa",
      "Comida: 100",
    ];
    LANG[INV.GARLAND] = ["Guirnalda", "Perfecta para decorar el techo"];
    LANG[INV.SEED] = [
      "Semillas de Bayas",
      "Se convierte en bayas",
      "Nacimiento: 2 Minutos",
      "Crecimiento: 55 Segundos",
      "Necesita agua: 3 Minutos 20 Segundos",
      "Durabilidad: 700",
      "Tiempo de vida: 8 Días",
    ];
    LANG[INV.PLANT] = ["Baya", "No es venenosa.", "Comida: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Semilla de Trigo",
      "Se convierte en Trigo ",
      "Nacimiento: 2 Minutos",
      "Crecimiento: 16 Segundos",
      "Necesita agua: 2 Minutos",
      "Durabilidad: 700",
      "Tiempo de vida: 8 Días",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Trigo Silvestre",
      "Se convierte en harina cuando se coloca en un molino",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Semilla de Calabaza",
      "Crece a Calabazas",
      "Nacimiento: 2 Minutos 40 Segundos",
      "Crecimiento: 2 Minutos",
      "Necesita agua: 2 Minutos",
      "Durabilidad: 700",
      "Tiempo de vida: 8 Días",
    ];
    LANG[INV.PUMPKIN] = ["Calabaza", "Me recuerda a Halloween", "Comida: 30"];
    LANG[INV.GARLIC_SEED] = [
      "Semilla de Ajo",
      "Muy peligroso para vampiros",
      "Daño: 20",
      "Nacimiento: 4 Minutos",
      "Crecimiento: 1 Minutos 10 Segundos",
      "Necesita Agua: 1 Minutos 40 Segundos",
      "Durabilidad: 700",
      "Tiempo de Vida: 8 Días",
    ];
    LANG[INV.GARLIC] = [
      "Ajo",
      "Te sana y reduce el frio",
      "Comida: 14",
      "sanación con eliempo: 30",
      "Efecto: 1",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "Semilla de Planta de Espinas",
      "Puede dañar a tus enemigos",
      "Daño por contacto: 20",
      "Nacimiento: 4 Minutos",
      "Crecimiento: 15 Segundos",
      "Necesita Agua: 3 Minutos",
      "Durabilidad: 1000",
      "Tiempo de Vida: 8 Días",
    ];
    LANG[INV.THORNBUSH] = ["Planta de Espinas", "\xA1Te daña!"];
    LANG[INV.PLOT] = [
      "Parcela",
      "En serio, úsala",
      "Se usa para plantar plantas en invierno o sobre puentes",
      "Tus plantas crecerán muy rápido y necesitarán menos agua",
      "Durabilidad: 2000",
    ];
    LANG[INV.ICE] = ["Hielo", "Bueno para hacer tartas y agua"];
    LANG[INV.SPANNER] = [
      "Llave de Reparación",
      "Puede reparar paredes, puertas y pinchos",
      "Daño: 2",
    ];
    LANG[INV.FUR_WOLF] = [
      "Pelaje de Lobo",
      "\xBFPerrito? \xA1\xBFDonde esta el perrito?!",
    ];
    LANG[INV.FUR] = ["Pelaje de Conejo", "El Conejo era muy lindo..."];
    LANG[INV.SPECIAL_FUR] = ["Pelaje Puro", "\xA1Eres una maquina de pan!"];
    LANG[INV.SPECIAL_FUR_2] = [
      "Pelaje Oscuro",
      "\xBFEstás listo para hacer algo malo?",
    ];
    LANG[INV.FUR_WINTER] = [
      "Pelaje de Invierno",
      "Esos animales solo querían un abrazo...",
    ];
    LANG[INV.SCALES] = ["Escamas", "\xA1Huele a pescado!"];
    LANG[INV.KRAKEN_SKIN] = [
      "Piel del Kraken",
      "\xA1\xBFNo tienes mucho miedo?!",
    ];
    LANG[INV.FIRE] = [
      "Fogata",
      "\xA1Te calienta!",
      "Durabilidad: 150",
      "Tiempo de vida: 2 Minutos",
    ];
    LANG[INV.BIG_FIRE] = [
      "Fogata Grande",
      "\xA1Te calienta por más tiempo!",
      "Durabilidad: 400",
      "Tiempo de Vida: 6 Minutos",
    ];
    LANG[INV.WORKBENCH] = [
      "Mesa de Trabajo",
      "\xA1Te sirve mucho para crear cosas de todos tipos!",
    ];
    LANG[INV.CORD] = ["Hilo", "Usado para craftear ropa y mochila"];
    LANG[INV.BLUE_CORD] = [
      "Hilo de Diamante",
      "Usado para craftear ropa especial",
    ];
    LANG[INV.CHEST] = [
      "Cofre",
      "Te permite guardar cosas, o compartirlas",
      "Durabilidad: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "Espada de Madera",
      "\xBFEso funciona?",
      "Daño: 12",
      "Daño para estructuras: 4",
    ];
    LANG[INV.SWORD] = [
      "Espada de Piedra",
      "Sé bueno con los otros",
      "Daño: 19",
      "Daño para estructuras: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Espada de Oro",
      "\xA1Rey de la selva!",
      "Daño: 22",
      "Daño para estructuras: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Espada de Diamante",
      "Puedes sentir el poder",
      "Daño: 24",
      "Daño para estructuras: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Espada de Pirata",
      "Arrrrr!",
      "\xA1Mejor distancia que una espada normal",
      "Daño: 24",
      "Daño para estructuras: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Espada de Amatista",
      "Mauve es el mejor color del mundo :3",
      "Daño: 27",
      "Daño para estructuras: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Espada del Dragón",
      "\xA1Tienes el poder de un Dragón!",
      "Daño: 30",
      "Daño para estructuras: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Lanza del Dragón",
      "\xA1Mátalos a todos!",
      "Daño: 22",
      "Daño para estructuras: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "Pico de Madera",
      "Solo puede minar madera y piedra",
      "Daño: 1",
    ];
    LANG[INV.PICK] = ["Pico de Piedra", "Puede minar hasta oro", "Daño: 2"];
    LANG[INV.PICK_GOLD] = [
      "Pico de Oro",
      "Puede minar hasta Diamante",
      "Daño: 3",
      "Daño para estructuras: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Pico de Diamante",
      "\xA1Puede minarlo todo!",
      "Daño: 4",
      "Daño para estructuras: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Pico de Amatista",
      "\xA1Puede minarlo todo, parece fantastico!",
      "Daño: 5",
      "Daño para estructuras: 1",
    ];
    LANG[INV.HAMMER] = [
      "Martillo de Piedra",
      "Bueno para destruir estructuras",
      "No funciona bien con diamante y amatista",
      "Daño: 2",
      "Daño para estructuras: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Martillo de Oro",
      "Bueno para destruir estructuras",
      "No funciona bien con amatista ",
      "Daño: 3",
      "Daño para estructuras: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Martillo de Diamante",
      "Bueno para destruir estructuras",
      "Daño: 4",
      "Daño para estructuras: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Martillo de Amatista",
      "Bueno para destruir estructuras",
      "Daño: 5",
      "Daño para estructuras: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Super Martillo",
      "\xBFHas planeado destruir el mundo?",
      "Daño: 12",
      "Daño para estructuras: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Lanza de Madera",
      "Como un palo de madera, pero mata.",
      "Daño: 10",
      "Daño para estructuras: 2",
    ];
    LANG[INV.SPEAR] = [
      "Lanza de Piedra",
      "\xA1El comienzo de la evolución!",
      "Daño: 14",
      "Daño para estructuras: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Lanza de Oro",
      "\xA1Cuidado, te hace mucho daño!",
      "Daño: 15",
      "Daño para estructuras: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Lanza de Diamante",
      "\xA1Estas preparado para matar al Dragon!",
      "Daño: 17",
      "Daño para estructuras: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "Lanza de Amatista",
      "Los dragones te tienen miedo",
      "Daño: 18",
      "Daño para estructuras: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Pala de Piedra",
      "Cava para conseguir tierra, arena y hielo",
      "También puedes conseguir minerales",
      "Daño: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Pala de Oro",
      "Cava para conseguir tierra, arena y hielo",
      "También puedes conseguir minerales",
      "Daño: 3",
      "Daño para estructuras: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Pala de Diamante",
      "Cava para conseguir tierra, arena y hielo",
      "También puedes conseguir minerales",
      "Daño: 4",
      "Daño para estructuras: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Pala de Amatista",
      "Cava para conseguir tierra, arena y hielo",
      "También puedes conseguir minerales",
      "Daño: 5",
      "Daño para estructuras: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Casco de Madera",
      "\xA1Mejor que nada!",
      "Protección contra jugadores: 1",
      "Protección contra animales: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Casco de Piedra",
      "\xA1Estas listo para la batalla!",
      "Protección contra jugadores: 2",
      "Protección contra animales: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Casco de Oro",
      "AKA el casco de los salvajes",
      "Protección contra jugadores: 4",
      "Protección contra animales: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Casco de Diamante",
      "No ataques tanto",
      "Protección de jugadores: 5",
      "Protección contra animales: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Casco de Amatista",
      "\xA1No tienes miedo de nada!",
      "Protección contra jugadores: 6",
      "Protección contra animales: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Casco del Dragón",
      "\xA1Vas a dominar el mundo!",
      "Protección contra jugadores: 8",
      "Protección contra animales: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Gorro del Explorador",
      "Los animales no te atacarán",
      "\xA1Pero no ataques!",
      " Te calienta en el invierno y fuera del agua",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "Gorro de Navidad",
      "\xA1Ho, ho, ho, feliz Navidad!",
      "Te calienta en el invierno y fuera del  agua",
    ];
    LANG[INV.ELF_HAT] = [
      "Gorro del Duende",
      "\xA1No dejes que te descubren que eres, duende del hielo!",
      "Te calienta en el invierno y fuera del agua",
    ];
    LANG[INV.HOOD] = [
      "Capucha",
      "\xA1Eres un ladron!",
      "Puedes robar de alguien solo si",
      "1) Es de noche",
      "2) No tienes nada en tu mano",
      "3) Si no te han tocado en los  8 segundos anteriores",
      "4) No estas cerca de una fogata",
      "5) Si tu objetivo no lleva puesto una gorra de campesino",
      "Te calienta en invierno y fuera del agua",
    ];
    LANG[INV.EARMUFFS] = [
      "Orejeras",
      "Como un abrigo pequeño.",
      "Te calienta en invierno y fuera del agua",
    ];
    LANG[INV.COAT] = [
      "Chapka",
      "También llamado abrigo.",
      "Te calienta en el invierno y fuera del agua",
    ];
    LANG[INV.CAP_SCARF] = ["Gorro y Bufanda ", "Muy cómodo, muy caliente"];
    LANG[INV.PEASANT] = [
      "Gorra de Campesino",
      "Tus plantas crecen mas rápido",
      "Te Calienta en el invierno y fuera del agua",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Capucha de Invierno",
      "Puedes robar de alguien solo si",
      "1) Es de noche",
      "2) No tienes nada en tu mano",
      "3) Si no te han tocado antes de 8 segundos",
      "4) No estas cerca de un fuego",
      "5) Si tu objetivo no lleva puesto una Gorra de Campesino",
      "Te calienta en invierno y fuera del agua",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Gorra de Invierno del Campesino",
      "Tus plantas crecen aún más rápido",
      "Te calienta en invierno y fuera del agua",
    ];
    LANG[INV.DIVING_MASK] = [
      "Máscara de Buceo",
      "Eres un tiburón en el agua",
      "Calienta en el agua",
      "Protección contra jugadores: 2, Protección contra animales: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Súper Máscara de Buceo",
      "Eres muy rápido en agua",
      "Calienta en el agua",
      "Defensa del Jugador: 4, Defensa de los animales: 16",
    ];
    LANG[INV.DRAGON_ORB] = ["Esfera del Dragón", "Dada en la misión"];
    LANG[INV.DRAGON_HEART] = [
      "Corazón del Dragón",
      "\xA1Te convierte en un fantasma cuando mueres!",
      "Eres un fantasma por 60 segundos",
      "Encuentra una Piedra de resurreción",
    ];
    LANG[INV.GEMME_GREEN] = [
      "Gema Verde",
      "\xBF\xBFNo has hecho trampas, verdad??",
    ];
    LANG[INV.GEMME_ORANGE] = [
      "Gema Naranja",
      "\xA1Solo un pirata verdadero lo puede encontrar!",
    ];
    LANG[INV.GEMME_BLUE] = ["Gema Azul", "Para gente muy amable"];
    LANG[INV.CROWN_GREEN] = [
      "Corona Verde",
      "Te sanas muy rápido",
      "Sanación con el tiempo: 40",
      "Protección contra jugadores: 4, Protección contra animales: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Corona Naranja",
      "Ahora tienes much suerte",
      "Protección contra jugadores: 4, Protección contra animales: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Corona Azul",
      "Cuando mueres, te conviertes en un fantasma",
      "Pero perderás tu alma",
      "Protección contra jugador: 4, Protección contra animales: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Cubo",
      "Bueno para rellenar botellas",
      "Un cubo es equivalente a 12 botellas",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "Cubo Vacío",
      "Tienes que llenar este cubo con agua",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "Botella",
      "Te permite beber agua donde quieras",
      "Agua: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = ["Botella Vacia", "La puedes llenar de agua"];
    LANG[INV.WATERING_CAN] = ["Regadera Vacía", "La tienes que llenar de agua"];
    LANG[INV.WATERING_CAN_FULL] = [
      "Regadera",
      "Te permite regar las plantas",
      "Daño: 1",
    ];
    LANG[INV.BAG] = ["Mochila", "\xA1Mas espacio para tus cosas!"];
    LANG[INV.PAPER] = ["Hoja", "Usada para hacer un libro"];
    LANG[INV.BOOK] = [
      "Libro",
      "Reduce el tiempo de elaboración",
      "Lo tienes que tener en la mano para que funcione",
      "Daño: 1",
    ];
    LANG[INV.BANDAGE] = [
      "Vendaje",
      "Recuperas vida mas rapido",
      "Sanación tiempo: 30",
      "Efecto: 5",
    ];
    LANG[INV.LOCK] = ["Cerradura", "Te permite cerrar tu cofre"];
    LANG[INV.LOCKPICK] = ["Llave", "Te permite abrir un cofre cerrado"];
    LANG[INV.TOTEM] = [
      "Tótem",
      "Te permite crear un equipo",
      "Compartir puertas y cofres cerrados",
      "Tus pinchos no dañan al resto tu equipo",
    ];
    LANG[INV.BRIDGE] = [
      "Puente",
      "Muy útil en el agua",
      "Te permite beber agua sin tener que ahogarse",
      "Puedes nadar más rápido encima del agua",
    ];
    LANG[INV.SIGN] = [
      "Cartel",
      "Sirve para dejar un mensage para otros",
      "Durabilidad: 200",
    ];
    LANG[INV.ROOF] = ["Techo", "Te esconde un poco y te protege del frío"];
    LANG[INV.WELL] = [
      "Fuente",
      "Permite rellenar botellas",
      "Durabilidad: 1000",
    ];
    LANG[INV.WALL] = [
      "Pared de Madera",
      "Es solo una pared.",
      "Durabilidad: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "Pared de Piedra",
      "Es un poco más serio",
      "Durabilidad: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "Pared de Oro",
      "\xBFOro en de tus paredes? Eres rico",
      "Durabilidad: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Pared de Diamante",
      "Muy brillante, cuidado con tus ojos",
      "Durabilidad: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Pared de Amatista",
      "\xA1Debes tener mucho miedo de lo que hay fuera!",
      "Durabilidad: 3500",
    ];
    LANG[INV.SPIKE] = [
      "Pincho de Madera",
      "Puede dañar a tus enemigos",
      "Daño: 10, Daño por golpe: 2",
      "Durabilidad: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Pincho de Piedra",
      "No querría ser tu enemigo.",
      "Daño: 20",
      "Daño por contacto: 3",
      "Durabilidad: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Pincho de Oro",
      "\xA1Eres tan cruel!",
      "Daño: 30",
      "Daño por golpe: 3",
      "Durabilidad: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Pincho de Diamante",
      "No te gusta tener compañía.",
      "Daño: 40",
      "Daño por contacto: 4",
      "Durabilidad: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Pincho de Amatista",
      "\xA1\xBFQue demonios te hicieron tus vecinos?!",
      "Daño: 50",
      "Daño por contacto: 4",
      "Durabilidad: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Puerta de Madera",
      "Puedes abrir y cerrarla ",
      "Durabilidad: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Puerta de Piedra",
      "Una puerta más buena es más seria",
      "Durabilidad: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Puerta de Oro",
      "\xBFEstas reconstruyendo El Dorado?",
      "Durabilidad: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Puerta de Diamante",
      "Para una casa brillante",
      "Durabilidad: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Puerta de Amatista",
      "\xBFTu casa es una caja fuerte?",
      "Durabilidad: 3500",
    ];
    LANG[INV.FURNACE] = [
      "Caldera",
      "Te calienta",
      "Consume 1 Madera cada 5 segundos",
      "Durabilidad: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Molino",
      "Puede producir harina a partir del trigo",
      "Necesita 5 segundos para producir harina",
      "Devuelve los puntos que trabaja",
      "Durabilidad: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Horno de Pan",
      "Produce pan de harina",
      "Necesita 10 segundos para producir Pan",
      "Devuelve los puntos que trabaja",
      "Durabilidad: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Piedra de Resurreción",
      "\xA1Es magia!",
      "Te resucitacuando eres una fantasma",
      "Perderás tu arma",
      "Durabilidad: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "No puedes unirte a este servidor";
    LANG[TEXT.KICKED] = "Expulsado: ";
    LANG[TEXT.KEY_ALREADY] = "Tu llave ya está usada";
    LANG[TEXT.KEY_WRONG] = "Tu llave está mal";
    LANG[TEXT.OLD_VERSION] = "Tienes una versión antigua, limpia tu cache";
    LANG[TEXT.NO_MORE_RESOURCES] = "No hay mas recursos";
    LANG[TEXT.SURVIVED_1DAY] = "Has sobrevivido 1 día";
    LANG[TEXT.SURVIVED] = "Has sobrevivido ";
    LANG[TEXT.DAYS] = " días";
    LANG[TEXT.DEAD_SAD] = "Estás muerto ;-;";
    LANG[TEXT.SPAM_ME] =
      "No se encuentra un lugar para unirse, \xA1spamea el botón de jugar!";
    LANG[TEXT.SPAM_ME2] =
      "El servidor esta lleno, \xA1spamea el botón de jugar!";
    LANG[TEXT.EMPTY] = "Recurso vacio";
    LANG[TEXT.INV_FULL] =
      "\xA1Inventario lleno!(Haz click derecho para borrar cosas) ";
    LANG[TEXT.DEAD] = " está muerto";
    LANG[TEXT.WRONG_TOOL] = "Esta no es la herramienta correcta";
    LANG[TEXT.JOIN_TEAM] = "Te has unido a un equipo";
    LANG[TEXT.YOU_DEAD] = "Estás muerto";
    LANG[TEXT.JOINED_TEAM] = " se unió al equipo";
    LANG[TEXT.TEAM_DESTROYED] = "Tu equipo ha sido destruido";
    LANG[TEXT.LEFT_TEAM] = "Has dejado el equipo";
    LANG[TEXT.LEFT_TEAM2] = " dejo el equipo ";
    LANG[TEXT.TOKEN] = "Alguien te robó tu token :>";
    LANG[TEXT.CHOOSE] = "Elige un servidor";
    LANG[TEXT.PLAYERS] = "jugadores";
    LANG[TEXT.TOTAL_PLAYERS] = "total de jugadores";
    LANG[TEXT.TOTAL_MODE] = "Jugadores en este modo de juego";
    LANG[TEXT.COMMING_SOON] = "Próximamente...";
    document.getElementById("nickname_input").placeholder = "Apodo";
    DIE[0] = ["Has muerto por ninguna razón"];
    DIE[1] = ["Has muerto de hambre, como implica el nombre del juego dice"];
    DIE[2] = [
      "Te has congelado hasta morir, qué triste",
      "Moriste por hipotermia. La próxima quédate cerca de  una fogata.",
    ];
    DIE[3] = [
      "Un jugador te ha matado diciendo que mejores.",
      "Fuiste asesinado por un jugador, pero no te preocupes, ese jugador también morirá, eventualmente.",
    ];
    DIE[4] = [
      "Te has acercado demasiado al fuego, y te has quemado vivo, mala idea.",
      "Has muerto por el fuego, el fuego te quema, ve y escribe una historia sobre eso.",
    ];
    DIE[5] = [
      "Tu cuerpo será un buen nido para los huevos de la arañas",
      "Una araña te ha matado, al menos no fué un conejo.",
    ];
    DIE[6] = [
      "El lobo no tendrá hambre después de comerte.",
      "No son perros, no les gusta ser acariciados.",
    ];
    DIE[7] = [
      "El zorro era demasiado rápido para ti.",
      "El zorro te convirtió en una caja. \xBFDesde cuándo los animales tienen poderes mágicos?",
    ];
    DIE[8] = [
      "El oso solo quería un abrazo",
      "El oso era demasiado para ti. Lo siento.",
    ];
    DIE[9] = [
      "El dragón te quemó vivo.",
      "El dragón te ha aplastado, todos tus huesos ahora son vapor... otro cadaver mas.",
    ];
    DIE[10] = [
      "Has saltado a una pared de pinchos, mala idea",
      "Has muerto por una pared de pinchos. La gente suele ser lo suficientemente sensible para no tocar cosas puntiagudas..",
    ];
    DIE[11] = [
      "Un fantasma también puede morir.",
      "No has revivido a tiempo, asi que eres un fantasma de un fantasma.",
    ];
    DIE[12] = [
      "Una bacteria te ha matado por comer carne cruda. Este juego es muy difícil.",
      "Has matado a la carne cruda. Ella también te ha matado a ti..",
    ];
    DIE[13] = ["Has muerto de sed, mejor bebe tu propia orina."];
    DIE[14] = [
      "\xBFSabiás que los jugadores tienen su boca debajo del agua? Ahora lo sabes.",
    ];
    DIE[15] = [
      "No te preocupes, a la piraña le pareciste delicioso.",
      "Las pirañas comen a personas, incluyendote a ti también.",
    ];
    DIE[16] = [
      "LapaMauve no planea que puedas matar al kraken",
      "Un Kraken te partió el kra-neo.",
    ];
    DIE[17] = ["Tu piel se cayó, el sol te quemó."];
    DIE[18] = ["El ajo guardado en tu bolsillo te quemó el cerebro."];
    DIE[19] = ["Eres un vampiro, no te quedes cerca del ajo."];
    DIE[20] = ["Has comido un ajo siendo  vampiro,\xBFque esperabas?"];
    DIE[21] = [
      "Te has quedado atrapado en una planta de espinas. Al intentar escapar, tu piel se cae y entra un pincho en tu corazón.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... Tengo hambre",
      "Necesito tu cerebro uuunnnggg...",
      "Carne fresca... Uuunnnggg",
      "Uuunnnggg... Pareces delicioso",
      "Uuunnnggg...",
      "Comida... uuunnnggg...",
      "Puedo oler sangre... Uuunnnggg",
    ];
  },
  set_german = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0x25f99e = 0; _0x25f99e < 7; _0x25f99e++) {
      document.getElementById("claim_reward_" + _0x25f99e).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["Hand"];
    LANG[INV.GROUND] = ["Boden", "Dreckig!"];
    LANG[INV.SAND] = ["Sand", "Ich habe es in meine Augen bekommen!"];
    LANG[INV.WOOD] = ["Holz", "Du kannst niemals zu viel haben!"];
    LANG[INV.STONE] = ["Stein", "Auch Fels gennant"];
    LANG[INV.GOLD] = ["Gold", "Sei großzügig, gib anderen etwas ab "];
    LANG[INV.DIAMOND] = ["Diamant", "Was wirst du daraus machen?"];
    LANG[INV.AMETHYST] = ["Amethyst", "Es ist Mauve farbend, genauso wie Lapa"];
    LANG[INV.FLOUR] = ["Mehl", "wird fürs Backen gebraucht"];
    LANG[INV.COOKIE] = [
      "Keks",
      "Ein prächtiger Keks von Großmutter",
      "Essen: 50",
    ];
    LANG[INV.CAKE] = [
      "Ein Kuchen",
      "Perfekter Kuchen für Gourmets",
      "Essen: 100",
    ];
    LANG[INV.MEAT] = [
      "rohes Fleisch",
      "Du kannst es mit einem Feuer braten",
      "verursacht Lebensmittelvergiftung: 10",
      "Essen: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "gebratenes Fleisch",
      "Einmal blutiges Steak, bitte",
      "Essen: 35",
    ];
    LANG[INV.FOODFISH] = [
      "roher Fisch",
      "Ich glaube es lebt noch",
      "verursacht Lebensmittelvergiftung: 10",
      "Essen: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "gebratener Fisch",
      "Mit einer Zitrone ist es perfekt",
      "Essen: 35",
    ];
    LANG[INV.BREAD] = [
      "Brot",
      "Ein vorzügliches französiches Brot",
      "Es wird als Währung im Markt benutzt",
      "Essen: 15",
    ];
    LANG[INV.SANDWICH] = [
      "Sandwich",
      "Schmeckt wie Krabbenburger",
      "Essen: 100",
    ];
    LANG[INV.CANDY] = ["Süßigkeiten", "Nur für Kinder!", "Essen: 100"];
    LANG[INV.SUGAR_CAN] = [
      "Zuckerstange",
      "Probier mal, es schmeckt hervorragend",
      "Essen: 100",
    ];
    LANG[INV.GARLAND] = ["Girlande", "perfekter Schmuck für Dächer"];
    LANG[INV.SEED] = [
      "Beeren Saatgut",
      "Wird eine Beere",
      "Entstehung: 2min",
      "Wachstum: 55s",
      "Wasserbedarf: 3min 20s",
      "Haltbarkeit: 700",
      "Lebenszeit: 8 Tage",
    ];
    LANG[INV.PLANT] = ["Beere", "Beeren lecker!", "Essen: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Weizen Saatgut",
      "Wird zu Weizen",
      "Entstehung: 2min",
      "Wachstum: 16s",
      "Wasserbedarf: 2min",
      "Haltbarkeit: 700",
      "Lebenszeit: 8 Tage",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Wildes Weizen",
      "Wenn es in eine Windmühle platziert wird, wird es zu Mehl",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Kürbis Saatgut",
      "Wird zu Kürbis",
      "Entstehung: 2min 40s",
      "Wachstum: 2min",
      "Wasserbedarf: 2min",
      "Haltbarkeit: 700",
      "Lebenszeit: 8 Tage",
    ];
    LANG[INV.PUMPKIN] = [
      "Kürbis",
      "Es erinnert mich an Halloween",
      "Essen: 30",
    ];
    LANG[INV.GARLIC_SEED] = [
      "Knoblauch Saatgut",
      "Sehr gefährlich für Vampire",
      "Schaden: 20",
      "Entstehung: 4min",
      "Wachstum: 1min 10s",
      "Wasserbedarf: 1min 40s",
      "Haltbarkeit: 700",
      "Lebenszeit: 8 Tage",
    ];
    LANG[INV.GARLIC] = [
      "Knoblauch",
      "Heilt dich und hält die Kälte fern",
      "Essen: 14",
      "Heilung über Zeit: 30",
      "Effekt: 1",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "Dornenbusch Saatgut",
      "Kann deinen Gegnern Schaden zufügen",
      "Schaden: 20",
      "Entstehung: 4min",
      "Wachstum: 15s",
      "Wasserbedarf: 3min",
      "Haltbarkeit: 1000",
      "Lebenszeit: 8 Tage",
    ];
    LANG[INV.THORNBUSH] = ["Dornenbusch", "Es sticht!"];
    LANG[INV.PLOT] = [
      "Topf",
      "Ernsthaft, benutz es",
      "Mit diesem GMO dünger deine Pflanzen",
      "lässt sie schneller wachsen und reduziert den Wasserverbrauch",
      "Haltbarkeit: 2000",
    ];
    LANG[INV.ICE] = ["Eis", "Nützlich um Kuchen und Wasser herzustellen"];
    LANG[INV.SPANNER] = [
      "Schraubenschlüssel",
      "Es kann Wände, Türen und Stacheln reparieren",
      "Schaden: 2",
    ];
    LANG[INV.FUR_WOLF] = ["Wolfsfell", "Welpe? Aber wo ist der Welpe?!"];
    LANG[INV.FUR] = ["Hasenfell", "Der Hase war so süß..."];
    LANG[INV.SPECIAL_FUR] = ["Klares Fell", "Du bist eine Brotfabrik"];
    LANG[INV.SPECIAL_FUR_2] = [
      "Dunkles Fell",
      "Du machst dich bereit etwas falsches zu vollführen",
    ];
    LANG[INV.FUR_WINTER] = [
      "Winter Fell",
      "Diese Tiere wollten nur eine Umarmung...",
    ];
    LANG[INV.SCALES] = ["Schuppen", "Es riecht wie Fisch!"];
    LANG[INV.KRAKEN_SKIN] = ["Kraken Haut", "Warst du nicht zu ängstlich?"];
    LANG[INV.FIRE] = [
      "Lagerfeuer",
      "Wärmt dich!",
      "Haltbarkeit: 150",
      "Lebensdauer: 2min",
    ];
    LANG[INV.BIG_FIRE] = [
      "Großes Lagerfeuer",
      "Wärmt dich länger!",
      "Haltbarkeit: 400",
      "Lebensdauer: 6min",
    ];
    LANG[INV.WORKBENCH] = [
      "Werkbank",
      "Sehr nützlich um allerlei Sachen herzustellen",
    ];
    LANG[INV.CORD] = [
      "Faden",
      "Wird benötigt um Mützen und Rucksäcke herzustellen  ",
    ];
    LANG[INV.BLUE_CORD] = [
      "Diamant Faden",
      "Wird für spezielle Mützen gebraucht",
    ];
    LANG[INV.CHEST] = [
      "Truhe",
      "Damit kannst du Gegenstände lagern",
      "Haltbarkeit: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "Holzschwert",
      "Funktioniert das?",
      "Schaden: 12",
      "Schaden an Gebäuden: 4",
    ];
    LANG[INV.SWORD] = [
      "Steinschwert",
      "Sei nett zu Anderen",
      "Schaden: 19",
      "Schaden an Gebäuden: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Goldschwert",
      "König des Waldes",
      "Schaden: 22",
      "Schaden an Gebäuden: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Diamantschwert",
      "Du kannst die Kraft spüren",
      "Schaden: 24",
      "Schaden an Gebäuden: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Piratenschwert",
      "Ayyyyy!",
      "Hat eine höhere Reichweite als ein normales Schwert",
      "Schaden: 24",
      "Schaden an Gebäuden: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Amethystschwert",
      "Mauve ist die schönste Farbe der Welt",
      "Schaden: 27",
      "Schaden an Gebäuden: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Drachenschwert",
      "Keine Gnade!",
      "Schaden: 30",
      "Schaden an Gebäuden: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Drachenspeer",
      "Töte sie alle!",
      "Schaden: 22",
      "Schaden an Gebäuden: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "Holzspitzhacke",
      "Kann nur Holz und Stein abbauen",
      "Schaden: 1",
    ];
    LANG[INV.PICK] = [
      "Steinspitzhacke",
      "Kann Holz, Stein und Gold abbauen",
      "Schaden: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "Goldspitzhacke",
      "Kann auch Diamanten abbauen",
      "Schaden: 3",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Diamantspitzhacke",
      "Kann alles abbauen",
      "Schaden: 4",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Amethystspitzhacke",
      "Kann alles abbauen, sieht außerdem gut aus!",
      "Schaden: 5",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.HAMMER] = [
      "Steinhammer",
      "Nützlich um Gebäude zu zerstören",
      "Funktioniert nicht gut gegen Diamant oder Amethyst",
      "Schaden: 2",
      "Schaden an Gebäuden: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Goldhammer",
      "Nützlich um Gebäude zu zerstören",
      "Funktioniert nicht gut gegen Amethyst",
      "Schaden: 3",
      "Schaden an Gebäuden: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Diamanthammer",
      "Nützlich um Gebäude zu zerstören",
      "Schaden: 4",
      "Schaden an Gebäuden: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Amethysthammer",
      "Nützlich um Gebäude zu zerstören",
      "Schaden: 5",
      "Schaden an Gebäuden: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Superhammer",
      "Willst du die Welt zerstören?",
      "Schaden: 12",
      "Schaden an Gebäuden: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Holzspeer",
      "Wie ein Stock, nur mit dem Unterschied, dass es sticht.",
      "Schaden: 10",
      "Schaden an Gebäuden: 2",
    ];
    LANG[INV.SPEAR] = [
      "Steinspeer",
      "Der Anfang der Evolution!",
      "Schaden: 14",
      "Schaden an Gebäuden: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Goldspeer",
      "Pass auf, es sticht!",
      "Schaden: 15",
      "Schaden an Gebäuden: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Diamantspeer",
      "Du bist bereit einen Drachen zu töten",
      "Schaden: 17",
      "Schaden an Gebäuden: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "AmethystSpeer",
      "Drachen jagen dir keine Angst mehr ein",
      "Schaden: 18",
      "Schaden an Gebäuden: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Steinschaufel",
      "Grab herum um Dreck, Eis und Sand zu bekommen",
      "Du kannst auch Mineralien bekommen",
      "Schaden: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Goldschaufel",
      "Grab herum um Dreck, Eis und Sand zu bekommen",
      "Du kannst auch Mineralien bekommen",
      "Schaden: 3",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Diamantschaufel",
      "Grab herum um Dreck, Eis und Sand zu bekommen",
      "Du kannst auch Mineralien bekommen",
      "Schaden: 4",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Amethystschaufel",
      "Grab herum um Dreck, Eis und Sand zu bekommen",
      "Du kannst auch Mineralien bekommen",
      "Schaden: 5",
      "Schaden an Gebäuden: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Holzhelm",
      "Besser als nichts",
      "Verteidigung gegen Spieler: 1",
      "Verteidigung gegen Tiere: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Steinhelm",
      "Du bist bereit zu kämpfen!",
      "Verteidigung gegen Spieler: 2",
      "Verteidigung gegen Tiere: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Goldhelm",
      "AKA Der Helm der Unbarmherzigen",
      "Verteidigung gegen Spieler: 4",
      "Verteidigung gegen Tiere: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Diamanthelm",
      "Gib nicht zu viel an",
      "Verteidigung gegen Spieler: 5",
      "Verteidigung gegen Tiere: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Amethysthelm",
      "Du musst vor nichts mehr angst haben",
      "Verteidigung gegen Spieler: 6",
      "Verteidigung gegen Tiere: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Drachenhelm",
      "Du wirst die Welt erobern",
      "Verteidigung gegen Spieler: 8",
      "Verteidigung gegen Tiere: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Erkunderhut",
      "Tiere beachten dich nicht mehr",
      "mach aber keine Geräusche!",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "Weihnachtshut",
      "Oh, oh, oh, fröhliche Weihnachten",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.ELF_HAT] = [
      "Elfenhut",
      "Lass dich nicht ausnutzen, du kleiner Schneeelf!",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.HOOD] = [
      "Kapuze",
      "Du bist ein Schurke",
      "Du kannst jemand bestehlen solange:",
      "1) Es nacht ist",
      "2) Du nichts trägst",
      "3) dich niemand für acht Sekunden berührt hat",
      "4) Du nicht in der Nähe eines Feuers bist",
      "5) Dein Ziel keine Bauernkleidung trägt",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.EARMUFFS] = [
      "Ohrwärmer",
      "Eine Art kleiner chapka.",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.COAT] = [
      "Chapka",
      "Auch Mantel genannt.",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.CAP_SCARF] = [
      "Winterschaal und Kappe",
      "Sehr angenehm",
      "Sehr Warm",
    ];
    LANG[INV.PEASANT] = [
      "Bauer",
      "Deine Pflanzen wachsen schneller",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Winterkapuze",
      "Du bist ein Wilder Schurke",
      "Du kannst jemand bestehlen solange:",
      "1) Es nacht ist",
      "2) Du nichts trägst",
      "3) dich niemand für vier Sekunden berührt hat",
      "4) Du nicht in der Nähe eines Feuers bist",
      "5) Dein Ziel keine Winterbauernkleidung trägt",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Winterbauern",
      "Deine Pflanzen wachsen deutlich schneller",
      "Hält dich warm außerhalb von Wasser und Winter",
    ];
    LANG[INV.DIVING_MASK] = [
      "Tauchermaske",
      "Du bist schneller im Wasser",
      "Hält dich warm im Wasser",
      "Verteidigung gegen Spieler: 2, Verteidigung gegen Tiere: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Supertauchermaske",
      "Du bist sehr schnell im Wasser",
      "Hält dich warm im Wasser",
      "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16",
    ];
    LANG[INV.DRAGON_ORB] = [
      "Drachenkugel",
      "Erhalten bei abschließung der Quest",
    ];
    LANG[INV.DRAGON_HEART] = [
      "Drachenherz",
      "Verwandelt dich in einen Geist, sobald du stirbst!",
      "Du bist für 60 Sekunden ein Geist",
      "Finde ein Wiederbelebungsstein.",
    ];
    LANG[INV.GEMME_GREEN] = [
      "Grüner Edelstein",
      "Du hast nicht gemogelt, versprochen?",
    ];
    LANG[INV.GEMME_ORANGE] = [
      "Orangener Edelstein",
      "Nur ein echter Pirat findet ihn!",
    ];
    LANG[INV.GEMME_BLUE] = ["Blauer Edelstein", "Für sehr nette Leute"];
    LANG[INV.CROWN_GREEN] = [
      "Grüne Krone",
      "Du heilst dich selbst sehr schnell",
      "Heilung über Zeit: 40",
      "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Orangene Krone",
      "Du fühlst dich plötzlich als hättest du mehr Glück",
      "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Blaue Krone",
      "Sobald du stirbst wirst du ein Geist",
      "Du wirst allerdings dein Schwert und deine Spitzhacke verlieren",
      "Verteidigung gegen Spieler: 4, Verteidigung gegen Tiere: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Eimer",
      "Nützlich um einen Brunnen zu füllen",
      "Ein Eimer ist vergleichbar mit zwölf Flaschen",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "Leerer Eimer",
      "Du musst den Eimer in der Nähe einer Wasserquelle füllen",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "Flasche",
      "Erlaubt dir überall Wasser zu trinken",
      "Wasser: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "Leere Flasche",
      "Du musst die Flasche in der Nähe einer Wasserquelle füllen",
    ];
    LANG[INV.WATERING_CAN] = [
      "Leere Gießkanne",
      "Du musst es mit einer Wasserquelle füllen",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "Gießkanne",
      "Erlaubt das wässern von Pflanzen",
      "Schaden: 1",
    ];
    LANG[INV.BAG] = ["Rucksack", "Mehr Platz im Inventar!"];
    LANG[INV.PAPER] = ["Papier", "Wird fürs Büchermachen verwendet"];
    LANG[INV.BOOK] = [
      "Buch",
      "Reduziert die benötigte Zeit beim herstellen von Gegenständen",
      "Muss in der Hand gehalten werden um den Effekt zu nutzen",
      "Schaden: 1",
    ];
    LANG[INV.BANDAGE] = [
      "Verband",
      "Heile dich schneller",
      "Heilung über Zeit: 30",
      "Effekt: 5",
    ];
    LANG[INV.LOCK] = ["Schloss", "Erlaubt dir deine Truhe zu verschließen"];
    LANG[INV.LOCKPICK] = [
      "Dietrich",
      "Erlaubt dir eine verschlossene Truhe zu öffnen",
    ];
    LANG[INV.TOTEM] = [
      "Totem",
      "Erlaubt dir ein Team zu gründen",
      "Teile Türen und Truhen",
      "verletzende Strukturen schaden deinen Freunden nicht mehr",
    ];
    LANG[INV.BRIDGE] = [
      "Brücke",
      "Sehr nützlich über Wasser",
      "Es erlaubt dir zu trinken ohne zu ertrinken",
      "lässt dich schneller auf dem Wasser laufen",
    ];
    LANG[INV.SIGN] = [
      "Schild",
      "Hinterlasse eine Nachricht für andere hier",
      "Haltbarkeit: 200",
    ];
    LANG[INV.ROOF] = ["Dach", "Versteckt dich ein wenig und hält warm dabei!"];
    LANG[INV.WELL] = [
      "Brunnen",
      "Erlaubt dir deine Flasche zu füllen, eine mobile Wasserquelle",
      "Haltbarkeit: 1000",
    ];
    LANG[INV.WALL] = [
      "Holzwand",
      "Kennst du den Wandtanz?",
      "Haltbarkeit: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "Steinwand",
      "Es sieht ein wenig Ernsthafter aus.",
      "Haltbarkeit: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "Goldwand",
      "Gold an deiner Wand? Es leuchtet ein wenig.",
      "Haltbarkeit: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Diamantwand",
      "So leuchtend, pass auf deine Augen auf",
      "Haltbarkeit: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Amethystwand",
      "Du musst dich wirklich fürchten raus zu gehen!",
      "Haltbarkeit: 3000",
    ];
    LANG[INV.SPIKE] = [
      "Holzstacheln",
      "Kann deine Gegner verletzen",
      "Schaden: 10, Schaden beim Angreifen: 2",
      "Haltbarkeit: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Steinstacheln",
      "Ich würde lieber nicht dein Gegner sein.",
      "Schaden: 20",
      "Schaden beim Angreifen: 3",
      "Haltbarkeit: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Goldstacheln",
      "Du bist grausam.",
      "Schaden: 30",
      "Schaden beim Angreifen: 3",
      "Haltbarkeit: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Diamantstacheln",
      "Du magst Gesellschaft nicht.",
      "Schaden: 40",
      "Schaden beim Angreifen: 4",
      "Haltbarkeit: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Amethyststacheln",
      "Was zur Hölle haben deine Nachbarn dir angetan?",
      "Schaden: 50",
      "Schaden beim Angreifen: 4",
      "Haltbarkeit: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Holztür",
      "Kann von dir oder deinen Freunden geöffnet werden",
      "Haltbarkeit: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Steintür",
      "Eine stärkere Tür ist ernsthafter",
      "Haltbarkeit: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Goldtür",
      "Baust du el dorado?",
      "Haltbarkeit: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Diamanttür",
      "Für ein scheinendes Haus",
      "Haltbarkeit: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Amethysttür",
      "Ist dein Haus ein verschlossener Safe?",
      "Haltbarkeit: 3500",
    ];
    LANG[INV.FURNACE] = [
      "Ofen",
      "Wärmt dich",
      "Es verbraucht alle 5 Sekunden eine Einheit Holz",
      "Haltbarkeit: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Windmühle",
      "Kann mit Weizen, Mehl herstellen",
      "Es braucht 5 Sekunden um Mehl herzustellen",
      "Gibt dir Punkte während es arbeitet",
      "Haltbarkeit: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Brotofen",
      "Erlaubt dir mit Mehl, Brot herzustellen",
      "Es braucht 5 Sekunden um Brot herzustellen",
      "Gibt dir Punkte während es arbeitet",
      "Haltbarkeit: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Wiederbelebungsstein",
      "Es ist Magie",
      "Wiederbelebt dich, wenn du ein Geist bist",
      "Du wirst deine Waffe und Spitzhacke verlieren",
      "Haltbarkeit: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "Du kannst diesem Server nicht beitreten";
    LANG[TEXT.KICKED] = "Gekickt: ";
    LANG[TEXT.KEY_ALREADY] =
      "Dein Schlüssel wurde bereits von jemand anderem benutzt";
    LANG[TEXT.KEY_WRONG] = "Dein Schlüssel ist falsch";
    LANG[TEXT.OLD_VERSION] = "Deine Version ist veraltet, säubere dein Cache";
    LANG[TEXT.NO_MORE_RESOURCES] = "Es gibt keine neuen Ressourcen";
    LANG[TEXT.SURVIVED_1DAY] = "Du hast einen Tag überlebt";
    LANG[TEXT.SURVIVED] = "Du hast überlebt ";
    LANG[TEXT.DAYS] = " Tage";
    LANG[TEXT.DEAD_SAD] = "Du bist gestorben ;-;";
    LANG[TEXT.SPAM_ME] =
      "Server kann kein Spawnplatz finden! Drücke immer wieder auf spielen!";
    LANG[TEXT.SPAM_ME2] = "Server ist voll! Drücke immer wieder auf spielen!";
    LANG[TEXT.EMPTY] = "Ressource ist leer";
    LANG[TEXT.INV_FULL] =
      "Dein Inventar ist voll (rechts-klick um Gegenstände zu entfernen)";
    LANG[TEXT.DEAD] = " ist gestorben";
    LANG[TEXT.WRONG_TOOL] = "Das ist nicht das richtige Werkzeug";
    LANG[TEXT.JOIN_TEAM] = "Du bist einem Team beigetreten";
    LANG[TEXT.YOU_DEAD] = "Du bist gestorben";
    LANG[TEXT.JOINED_TEAM] = " ist dem Team beigetreten";
    LANG[TEXT.TEAM_DESTROYED] = "Dein Team wurde zerstört";
    LANG[TEXT.LEFT_TEAM] = "Du hast das Team verlassen";
    LANG[TEXT.LEFT_TEAM2] = " hat das Team verlassen";
    LANG[TEXT.TOKEN] = "Jemand hat dein Token gestohlen :>";
    LANG[TEXT.CHOOSE] = "Suche dir ein Server aus";
    LANG[TEXT.PLAYERS] = "Spieler";
    LANG[TEXT.TOTAL_PLAYERS] = "alle Spieler";
    LANG[TEXT.TOTAL_MODE] = "Spieler in diesem Modus";
    LANG[TEXT.COMMING_SOON] = "Bald verfügbar...";
    document.getElementById("nickname_input").placeholder = "Spitzname";
    DIE[0] = ["Du wurdest ohne Grund getötet"];
    DIE[1] = ["Du bist verhungert, wie der Name des Spiels andeutet"];
    DIE[2] = [
      "Du bist erfroren. Zu schade",
      "Du bist an Unterkühlung gestorben. Versuche nächstes Mal zu einem Feuer zu gehen .",
    ];
    DIE[3] = [
      "Ein Spieler hat dich getötet, während er dir gesagt hat 'git gud.'",
      "Du wurdest von einem Spieler ermordet, mach dir keine Sorgen, er wird wahrscheinlich auch sterben .",
    ];
    DIE[4] = [
      "Du bist zu nah ans Feuer gegangen und zu tode gebrannt. Schlechte Idee.",
      "Du wurdest von einem Feuer umgebracht. Feuer tut weh. Schreib eine Geschichte darüber.",
    ];
    DIE[5] = [
      "Dein Körper wird zu einem Spinnennest",
      "Eine Spinne hat dich getötet. Zumindest war es kein Hase.",
    ];
    DIE[6] = [
      "Dieser Wolf wird nicht mehr verhungern",
      "Sie sind keine Hunde. Wölfe mögen es nicht gestreichelt zu werden.",
    ];
    DIE[7] = [
      "Der Fuchs war zu schnell für dich",
      "Der Fuchs hat dich in eine Box verwandelt. Seit wann haben Tiere magische Kräfte?",
    ];
    DIE[8] = [
      "Der Bär wollte nur eine Umarmung.",
      "Der Bär war zu viel zu ertragen. Es tut mir nicht leid.",
    ];
    DIE[9] = [
      "Du wurdest von einem Drachen knusprig gebraten. Zu schade.",
      "Du wurdest von einem Drachen erdrückt. Zerquetscht zu werden ist ein schrecklicher Weg zu sterben.",
    ];
    DIE[10] = [
      "Du bist in eine Stachelwand gesprungen. Keine gute Idee...",
      "Du wurdest von einer Stachelwand getötet. Die meisten Leute sind sensibel genug keine spitzen Sachen anzufassen.",
    ];
    DIE[11] = [
      "Sogar Geister können sterben.",
      "Du hast es nicht geschafft wiederbelebt zu werden. Das ist ein Spiel, also lebst du nachdem du stirbst...",
    ];
    DIE[12] = [
      "Ein Bakterium von deinem rohen Fleisch hat dich getötet. Das Spiel ist definitiv zu schwierig.",
      "Du hast das rohe Fleisch getötet. Es hat dich ebenfalls getötet.",
    ];
    DIE[13] = [
      "Du bist verdurstet. Solltest lieber deinen eigenen Urin trinken.",
    ];
    DIE[14] = [
      "Wusstest du, dass dein Mund beim Schwimmen immer unterm Wasser ist? Jetzt weißt du es.",
    ];
    DIE[15] = [
      "Mach dir keine Sorge, der Piranha findet dich lecker.",
      "Nebenbei: Piranhas essen Menschen. Dich mit eingeschlossen.",
    ];
    DIE[16] = [
      "LapaMauve plant nicht, dass du den Kraken töten kannst",
      "Ein Kraken hat deinen Schädel zertrümmert.",
    ];
    DIE[17] = ["Deine Haut fällt auseinander, die Sonne hat dich umgebracht."];
    DIE[18] = ["Knoblauch in deiner Tasche hat dein Gehirn gebraten "];
    DIE[19] = ["Stehe als ein Vampir nicht neben den Knoblauchnelken."];
    DIE[20] = [
      "Du hast als ein Vampir Knoblauch gegessen, was hast du erwartet?",
    ];
    DIE[21] = [
      "Dein Körper ist von einem Dornenbusch umgeben.Während du versuchst zu entkommen löst sich deine Haut von deinem Körper und dein Herz hört auf zu schlagen.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg...Ich verhungere...",
      "Brauche dein Gehirn... Uuunnnggg...",
      "Hier gibt es frisches Fleisch... Uuunnnggg",
      "Uuunnnggg...Du bist lecker",
      "Uuunnnggg...",
      "Essen... uuunnnggg...",
      "Ich rieche Blut... Uuunnnggg",
    ];
  },
  set_polish = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " BACK TO THE GAME";
    LANG[TEXT.TWITTER] = " Share on Twitter";
    LANG[TEXT.FACEBOOK] = " Share on Facebook";
    LANG[TEXT.KIT_NEXT] =
      "You can buy items on the shop in the next game with your points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Kill";
    LANG[TEXT.DAYS_SURVIVED] = "Days survived";
    LANG[TEXT.MODE_FREE] = "Building method: Free. Press G to change";
    LANG[TEXT.MODE_GRID] = "Building method: Grid. Press G to change";
    LANG[INV.CRAB_LOOT] = [
      "Crab Claw",
      "Crab claws can also be eaten",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Crab Spear",
      "Allow you to calm crabs, and heal them",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Crab Helmet",
      "You are the king of crabs!",
      "Crabs follow you",
      "They can't hit you and you can't hit them",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Bed",
      "Relax in this confortable bed",
      "You are less cold, less thirsty, and less hungry",
      "You will be cured faster",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quests";
    document.getElementById("timeremainingquest").innerHTML = "Time Remaining";
    document.getElementById("constraintquest").innerHTML = " Constraints";
    document.getElementById("claim_rewards").innerHTML = " Claim rewards";
    document.getElementById("rewardquest").innerHTML = " Reward";
    document.getElementById("killdragon_1").innerHTML =
      " Collect 1 dragon heart";
    document.getElementById("amethyst_2").innerHTML = " Gather 1 amethyst";
    document.getElementById("survive20min_3").innerHTML =
      "Survive without losing life";
    document.getElementById("treasure_chest_4").innerHTML =
      " Open 5 treasure chests";
    document.getElementById("dont_hit_5").innerHTML = " Be peaceful";
    document.getElementById("bread_6").innerHTML =
      " Collect 100 bread in deep winter";
    document.getElementById("winter_7").innerHTML =
      " After 1 day, survive in winter";
    for (var _0x4b50ee = 0; _0x4b50ee < 7; _0x4b50ee++) {
      document.getElementById("claim_reward_" + _0x4b50ee).innerHTML =
        "CLAIM REWARD!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUIT";
    LANG[INV.HAND] = ["Ręka"];
    LANG[INV.GROUND] = ["Ziemia", "Brudna!"];
    LANG[INV.SAND] = ["Piasek", "Mam go w oczach!"];
    LANG[INV.WOOD] = ["Drewno", "Nie możesz mieć go wystarczająco!"];
    LANG[INV.STONE] = ["Kamień", "Także nazywany skałą"];
    LANG[INV.GOLD] = ["Złoto", "Bądź hojny, daj trochę innym"];
    LANG[INV.DIAMOND] = ["Diament", "Co z nim zrobisz?"];
    LANG[INV.AMETHYST] = ["Ametyst", "Jest Fiołkowy jak Lapa"];
    LANG[INV.FLOUR] = ["Mąka", "Używana w gotowaniu"];
    LANG[INV.COOKIE] = [
      "Ciastko",
      "Przepyszne ciasteczko od babci",
      "Jedzenie: 50",
    ];
    LANG[INV.CAKE] = ["Ciasto", "Raj dla smakoszy", "Jedzenie: 100"];
    LANG[INV.MEAT] = [
      "Surowe mięso",
      "Możesz je upiec w ogniu",
      "Powoduje zatrucie pokarmowe: 10",
      "Jedzenie: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "Pieczone mięso",
      "Krwisty stek, proszę",
      "Jedzenie: 35",
    ];
    LANG[INV.FOODFISH] = [
      "Surowa ryba",
      "Myślę, że nadal jest żywa",
      "Powoduje zatrucie pokarmowe: 10",
      "Jedzenie: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "Pieczona ryba",
      "Z cytryną jest idealna",
      " Jedzenie: 35",
    ];
    LANG[INV.BREAD] = [
      "Chleb",
      "Świetny Francuski chleb",
      "Jest walutą używaną w markecie",
      "Jedzenie: 15",
    ];
    LANG[INV.SANDWICH] = [
      "Kanapka",
      "Smakuje jak kraboburger",
      "Jedzenie: 100",
    ];
    LANG[INV.CANDY] = ["Cukierki", "Tylko dla dzieci!", "Jedzenie: 100"];
    LANG[INV.SUGAR_CAN] = [
      "Laska cukrowa",
      "Spróbuj, jest przepyszna",
      "Jedzenie: 100",
    ];
    LANG[INV.GARLAND] = ["Girlanda", "Idealna do dekorowania dachów"];
    LANG[INV.SEED] = [
      "Nasionko jagody",
      "Wyrośnie w jagody",
      "Narodziny: 2min",
      "Rośnięcie: 55s",
      "Podlewanie: 3min 20s",
      "Wytrzymałość: 700",
      "Czas życia: 8 dni",
    ];
    LANG[INV.PLANT] = ["Jagody", "Jagody są pyszne!", "Jedzenie: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Nasiono pszenicy",
      "Wyrośnie w pszenicę",
      "Narodziny: 2min",
      "Rośnięcie: 16s",
      "Podlewanie: 2min",
      "Wytrzymałość: 700",
      "Czas życia: 8 dni",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Pszenica",
      "Zamienia się w mąkę jeżeli wrzucisz ją do wiatraka",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Nasiono dyni",
      "Wyrośnie w dynię",
      "Narodziny: 2min 40s",
      "Rośnięcie: 2min",
      "Podlewanie: 2min",
      "Wytrzymałość: 700",
      "Czas życia: 8 dni",
    ];
    LANG[INV.PUMPKIN] = ["Dynia", "Przypomina mi o Halloween", "Jedzenie: 30"];
    LANG[INV.GARLIC_SEED] = [
      "Nasionko czosnku",
      "Bardzo niebezpieczne dla wampirów",
      "Obrażenia: 20",
      "Narodziny: 4min",
      "Rośnięcie: 1min 10s",
      "Podlewanie: 1min 40s",
      "Wytrzymałość: 700",
      "Czas życia: 8 dni",
    ];
    LANG[INV.GARLIC] = [
      "Czosnek",
      "Leczy cię i redukuje zimno",
      "Jedzenie: 14",
      "Uzdrawia z biegiem czasu: 30",
      "Efekt: 1",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "Nasiono kolczastego krzewu",
      "Może zranić twoich wrogów",
      "Obrażenia: 20",
      "Narodziny: 4min",
      "Rośnięcie: 15s",
      "Podlewanie: 3min",
      "Wytrzymałość: 1000",
      "Czas życia: 8 dni",
    ];
    LANG[INV.THORNBUSH] = ["Kolczasty krzew", "Kłuje!"];
    LANG[INV.PLOT] = [
      "Donica",
      "Naprawdę, użyj jej",
      "Z tym genetycznie modyfikowanym nawozem, twoje rośliny",
      "będą rosły znacznie szybciej i będą potrzebować mniej wody",
      "Wytrzymałość: 2000",
    ];
    LANG[INV.ICE] = ["Lód", "Użyteczny do robienia ciast i wody"];
    LANG[INV.SPANNER] = [
      "Klucz mechaniczny",
      "Do naprawiania drzwi i kolców",
      "Uszkodzenie: 2",
    ];
    LANG[INV.FUR_WOLF] = [
      "Wilcza skóra",
      "Szczeniaczek? Ale gdzie jest szczeniaczek?!",
    ];
    LANG[INV.FUR] = ["Skóra królika", "Ten królik był taki słodziutki..."];
    LANG[INV.SPECIAL_FUR] = ["Skóra", "Jesteś fabryką chleba"];
    LANG[INV.SPECIAL_FUR_2] = ["Ciemna skóra", "Byłeś gotowy zrobić coś złego"];
    LANG[INV.FUR_WINTER] = [
      "Zimowa skóra",
      "Te zwierzęta chciały się tylko przytulić...",
    ];
    LANG[INV.SCALES] = ["Łuski", "Pachnie jak ryba!"];
    LANG[INV.KRAKEN_SKIN] = ["Skóra krakena", "Nie byłeś zbyt przestraszony?"];
    LANG[INV.FIRE] = [
      "Ognisko",
      "Ociepli cię!",
      "Wytrzymałość: 150",
      "Czas życia: 2min",
    ];
    LANG[INV.BIG_FIRE] = [
      "Duże ognisko",
      "Ociepli cię na dłużej!",
      "Wytrzymałość: 400",
      "Czas życia: 6min",
    ];
    LANG[INV.WORKBENCH] = [
      "Stół rzemieślniczy",
      "Użyteczny do stwarzania przedmiotów",
    ];
    LANG[INV.CORD] = ["Nić", "Używany w tworzeniu czapek i plecaków"];
    LANG[INV.BLUE_CORD] = [
      "Diamentowa nić",
      "Używana w tworzeniu specjalnych czapek",
    ];
    LANG[INV.CHEST] = [
      "Skrzynia",
      "Pozwala ci na przechowywanie przedmiotów",
      "Wytrzymałość: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "Drewniany miecz",
      "To coś działa?",
      "Obrażenia: 12",
      "Obrażenia do budowli: 4",
    ];
    LANG[INV.SWORD] = [
      "Kamienny miecz",
      "Bądź miły dla innych",
      "Obrażenia: 19",
      "Obrażenia do budowli: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Złoty miecz",
      "Król lasu",
      "Obrażenia: 22",
      "Obrażenia do budowli: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Diamentowy miecz",
      "Możesz poczuć moc",
      "Obrażenia: 24",
      "Obrażenia do budowli: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Piracki miecz",
      "Ayyyyy!",
      "Dłuższy niż zwykły miecz",
      "Obrażenia: 24",
      "Obrażenia do budowli: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Ametystowy miecz",
      "fiołkowy to najpiękniejszy kolor na świecie",
      "Damage: 27",
      "Obrażenia do budowli: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Smoczy miecz",
      "Bez litości!",
      "Obrażenia: 30",
      "Obrażenia do budowli: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Smocza włócznia",
      "Zabij ich wszystkich!",
      "Obrażenia: 22",
      "Obrażenia do budowli: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "Drewniany kilof",
      "Może wydobywać tylko kamienie i drewno",
      "Obrażenia: 1",
    ];
    LANG[INV.PICK] = [
      "Kamienny kilof",
      "Może wydobywać drewno, kamienie i złoto",
      "Obrażenia: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "Złoty kilof",
      "Może także wydobywać diamenty",
      "Obrażenia: 3",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Diamentowy kilof",
      "Może wydobywać wszystko",
      "Obrażenia: 4",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Ametystowy kilof",
      "Może wydobywać wszystko. Wygląda fantastycznie!",
      "Obrażenia: 5",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.HAMMER] = [
      "Kamienny młot",
      "Pomocny w niszczeniu budowli",
      "Nie działa najlepiej na ametyście",
      "Obrażenia: 2",
      "Obrażenia do budowli: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Złoty młot",
      "Pomocny w niszczeniu budowli",
      "Nie działa najlepiej na ametyście",
      "Obrażenia: 3",
      "Obrażenia do budowli: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Diamentowy młot",
      "Pomocny w niszczeniu budowli",
      "Obrażenia: 4",
      "Obrażenia do budowli: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Ametystowy młot",
      "Pomocny w niszczeniu budowli",
      "Obrażenia: 5",
      "Obrażenia do budowli: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Super młot",
      "Miałeś kiedyś plan zniszczenia świata?",
      "Obrażenia: 12",
      "Obrażenia do budowli: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Drewniana włócznia",
      "Jak patyk, ale kłuje.",
      "Obrażenia: 10",
      "Obrażenia do budowli: 2",
    ];
    LANG[INV.SPEAR] = [
      "Kamienna włócznia",
      "Początek ewolucji!",
      "Obrażenia: 14",
      "Obrażenia do budowli: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Złota włócznia",
      "Uważaj, kłuje!",
      "Obrażenia: 15",
      "Obrażenia do budowli: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Diamentowa włócznia",
      "Jesteś gotowy, aby zabić smoka",
      "Obrażenia: 17",
      "Obrażenia do budowli: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "Ametystowa włócznia",
      "Smoki już nie są dla ciebie zagrożeniem",
      "Obrażenia: 18",
      "Obrażenia do budowli: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Kamienna łopata",
      "Kop w ziemi aby zdobyć ziemię, lód i piasek",
      "Możesz także zdobyć minerały",
      "Obrażenia: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Złota łopata",
      "Kop w ziemi aby zdobyć ziemię, lód i piasek",
      "Możesz także zdobyć minerały",
      "Obrażenia: 3",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Diamentowa łopata",
      "Kop w ziemi aby zdobyć ziemię, lód i piasek",
      "Możesz także zdobyć minerały",
      "Obrażenia: 4",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Ametystowa łopata",
      "Kop w ziemi aby zdobyć ziemię, lód i piasek",
      "Możesz także zdobyć minerały",
      "Obrażenia: 5",
      "Obrażenia do budowli: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Drewniany hełm",
      "Lepsze niż nic",
      "Obrona przed graczami: 1",
      "Obrona przed zwierzętami: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Kamienny hełm",
      "Jesteś gotowy do bitwy!",
      "Obrona przed graczami: 2",
      "Obrona przed zwierzętami: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Złoty hełm",
      "Zwany także hełmem barbarzyńców",
      "Obrona przed graczami: 4",
      "Obrona przed zwierzętami: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Diamentowy hełm",
      "Nie przechwalaj się za bardzo",
      "Obrona przed graczami: 5",
      "Obrona przed zwierzętami: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Ametystowy hełm",
      "Nie boisz się już niczego",
      "Obrona przed graczami: 6",
      "Obrona przed zwierzętami: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Smoczy hełm",
      "Zmierzysz się z całym światem",
      "Obrona przed graczami: 8",
      "Obrona przed zwierzętami: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Czapka odkrywcy",
      "Zwierzęta nie będą zwracały na ciebie uwagi",
      "ale nie rób hałasu!",
      "Ciepło w i poza zimą",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "świąteczna czapka",
      "Oh, oh, oh, Wesołych Świąt",
      "Ciepło w i poza zimą",
    ];
    LANG[INV.ELF_HAT] = [
      "Czapka elfa",
      "Nie pozwól się być wykorzystywanym, mały śnieżny elfie!",
      "Ciepło w i poza zimą",
    ];
    LANG[INV.HOOD] = [
      "Kaptur",
      "Jesteś łobuzem",
      "Możesz coś komuś ukraść jeśli",
      "- Jest noc",
      "- Nic przy sobie nie masz",
      "- Jeżeli nic przez chwilę nie dotykałeś",
      "- Nie jesteś blisko ognia",
      "- Twój cel nie jest ubrany w chłopską tunikę",
      "Jest ciepło w i poza zimą",
    ];
    LANG[INV.EARMUFFS] = [
      "Nauszniki",
      "Jakiś inny rodzaj małej czapki.",
      "Ciepło w i poza zimą",
    ];
    LANG[INV.COAT] = [
      "Czapka",
      "Także nazywana płaszczem.",
      "Ciepła w i poza zimą",
    ];
    LANG[INV.CAP_SCARF] = ["Szal i czapka", "Bardzo wygodna, bardzo ciepła"];
    LANG[INV.PEASANT] = [
      "Chłopska tunika",
      "Twoje rośliny rosną szybciej",
      "Ciepła w i poza zimą",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Zimowy kaptur",
      "Możesz coś komuś ukraść jeśli",
      "- Jest noc",
      "- Nic przy sobie nie masz",
      "- Jeżeli nic przez chwilę nie dotykałeś",
      "- Nie jesteś blisko ognia",
      "- Twój cel nie jest ubrany w tunikę zimowego chłopa",
      "Jest ciepło w i poza zimą",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Zimowa chłopska tunika",
      "Twoje rośliny rosną szybciej",
      "Ciepło w i poza zimą",
    ];
    LANG[INV.DIVING_MASK] = [
      "Maska do nurkowania",
      "Jesteś szybki w wodzie",
      "Ciepło",
      "Obrona przed graczami: 2, Obrona przed zwierzętami: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Strój głębinowy",
      "Jesteś bardzo szybki w wodzie",
      "Ciepło ci w wodzie",
      "Obrona przed graczami: 4, Obrona przed zwierzętami: 16",
    ];
    LANG[INV.DRAGON_ORB] = ["Smocza kula", "Zdobyta podczas zadania"];
    LANG[INV.DRAGON_HEART] = [
      "Smocze serce",
      "Zamienia cię w ducha po śmierci!",
      "Jesteś duchem na 60 sekund",
      "Znajdź kamień rezurekcyjny",
    ];
    LANG[INV.GEMME_GREEN] = [
      "Zielony kryształ",
      "Nie oszukiwałeś, przysięgasz?",
    ];
    LANG[INV.GEMME_ORANGE] = [
      "Pomarańczowy kryształ",
      "Tylko prawdziwy pirat może go znaleźć!",
    ];
    LANG[INV.GEMME_BLUE] = ["Niebieski kryształ", "Dla zbyt miłych ludzi"];
    LANG[INV.CROWN_GREEN] = [
      "Zielona korona",
      "Szybko się leczysz",
      "Uzdrawia z biegiem czasu: 40",
      "Obrona przed graczami: 4, Obrona przed zwierzętami: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Pomarańczowa korona",
      "Nagle poczułeś smak szczęścia",
      "Obrona przed graczami: 4, Obrona przed zwierzętami: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Niebieska korona",
      "Gdy już będziesz martwy, zamienisz się w ducha",
      "Przy okazji stracisz swoją broń i kilof",
      "Obrona przed graczami: 4, Obrona przed zwierzętami: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Wiadro",
      "Również przydatne do napełnienia studni",
      "Jedno wiadro jest jak dwanaście butelek",
    ];
    LANG[INV.BUCKET_EMPTY] = ["Puste wiadro", "Musisz napełnić to wiadro wodą"];
    LANG[INV.BOTTLE_FULL] = [
      "Butelka",
      "Pozwala pić wodę wszędzie",
      "Woda: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "Pusta butelka",
      "Możesz napełnić tą butelkę blisko źródła wody",
    ];
    LANG[INV.WATERING_CAN] = [
      "Pusta konewka",
      "Musisz ją napełnić w źródle wody, aby ją użyć",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "Konewka",
      "Pozwala podlewać rośliny",
      "Obrażenia: 1",
    ];
    LANG[INV.BAG] = ["Plecak", "Więcej miejsca na twoje przedmioty!"];
    LANG[INV.PAPER] = ["Papier", "Używany w tworzeniu książki"];
    LANG[INV.BOOK] = [
      "Książka",
      "Pozwala znacznie skrócić wytwarzanie",
      "Musisz ją nosić by zadziałała",
      "Uszkodzenie 1",
    ];
    LANG[INV.BANDAGE] = [
      "Bandaż",
      "Szybciej zregeneruj życie",
      "Uzdrawia z biegiem czasu: 30",
      "Efekt: 5",
    ];
    LANG[INV.LOCK] = ["Zamek", "Pozwala ci zamknąć skrzynię"];
    LANG[INV.LOCKPICK] = ["Wytrych", "Pozwala ci odblokować jedną skrzynię"];
    LANG[INV.TOTEM] = [
      "Totem",
      "Pozwala ci stworzyć drużynę",
      "Dziel się drzwiami i zamkniętymi skrzyniami",
      "Szkodliwe budynki nie zranią twoich przyjaciół",
    ];
    LANG[INV.BRIDGE] = [
      "Most",
      "Bardzo przydatny w wodzie",
      "Pozwala ci pić bez utonięcia",
      "Chodzisz szybciej w wodzie",
    ];
    LANG[INV.SIGN] = [
      "Tabliczka",
      "Zostaw wiadomość dla innych",
      "Wytrzymałość: 200",
    ];
    LANG[INV.ROOF] = ["Dach", "Trochę cie ogrzewa i chowa!"];
    LANG[INV.WELL] = [
      "Studnia",
      "Umożliwia napełnienie butelki",
      "Wytrzymałość: 1000",
    ];
    LANG[INV.WALL] = [
      "Drewniany mur",
      "Znasz taniec ścian?",
      "Wytrzymałość: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "Kamienny mur",
      "Jest to trochę bardziej poważniejsze.",
      "Wytrzymałość: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      " Złoty mur",
      "Złoto na twoich murach? To trochę krzykliwe.",
      "Wytrzymałość: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Diamentowy mur",
      "Jaki błyszczący, uważaj na oczy",
      "Wytrzymałość: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Ametystowy mur",
      "Musisz bardzo się bać, aby wyjść!",
      "Wytrzymałość: 3000",
    ];
    LANG[INV.SPIKE] = [
      "Drewniany kolczasty mur",
      "Może uszkodzić wrogów",
      "Obrażenia: 10, Obrażenia po uszkodzeniu: 2",
      "Wytrzymałość: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Kamienny kolczasty mur",
      "Nie chciałbym być twoim wrogiem.",
      "Obrażenia: 20",
      " Obrażenia po uszkodzeniu: 3",
      "Wytrzymałość: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Złoty kolczasty mur",
      "Jesteśtaki okrutny.",
      "Obrażenia: 30",
      " Obrażenia po uszkodzeniu: 3",
      "Wytrzymałość: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Diamentowy kolczasty mur",
      "Raczej nie lubisz towarzystwa.",
      "Obrażenia: 40",
      "Obrażenia po uszkodzeniu: 4",
      "Wytrzymałość: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Ametystowy kolczasty mur",
      "Co ci sąsiedzi ci zrobili?",
      "Obrażenia: 50",
      "Obrażenia po uszkodzeniu: 4",
      "Wytrzymałość: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Drewniane drzwi",
      "Może być otwarte przez ciebie lub przyjaciół",
      "Wytrzymałość: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Kamienne drzwi",
      "Solidne drzwi są bardziej poważne ",
      "Wytrzymałość: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Złote drzwi",
      "Czy odbudowujesz El Dorado?",
      "Wytrzymałość: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Diamentowe drzwi",
      "Dla błyszczącego domu",
      "Wytrzymałość: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Ametystowe drzwi",
      "Czy twój dom to zamknięty sejf?",
      "Wytrzymałość: 3000",
    ];
    LANG[INV.FURNACE] = [
      "Piec",
      "Ogrzewa cię",
      "Zużywa drewno co 5 sekund",
      "Wytrzymałość: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Młyn",
      "Może produkować mąkę z pszenicy",
      "Przygotowanie mąki zajmuje 5 sekund",
      "Zwraca punkty podczas pracy",
      "Wytrzymałość: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Piec do chleba",
      "Pozwala na wypiek chleba z mąki",
      "Przygotowanie chleba zajmuje 10 sekund",
      "Zwraca punkty podczas pracy",
      "Wytrzymałość: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Kamień rezurekcyjny",
      "To magia",
      "Wskrzesi cię jeśli jesteś duchem",
      "Stracisz swoja broń i kilof",
      "Wytrzymałość: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "Nie możesz dołączyć do tego serwera";
    LANG[TEXT.KICKED] = "Wyrzucony: ";
    LANG[TEXT.KEY_ALREADY] =
      "Twój klucz jest aktualnie używany przez innego gracza";
    LANG[TEXT.KEY_WRONG] = "Twój klucz jest nieprawidłowy";
    LANG[TEXT.OLD_VERSION] =
      "Posiadasz starszą wersję, musisz wyczyścić swoją pamięć";
    LANG[TEXT.NO_MORE_RESOURCES] =
      "Nie ma nowych minerałów, zwierząt, i jedzenia";
    LANG[TEXT.SURVIVED_1DAY] = "Przeżyłeś 1 dzień";
    LANG[TEXT.SURVIVED] = "Przeżyłeś ";
    LANG[TEXT.DAYS] = " dni";
    LANG[TEXT.DEAD_SAD] = "Jesteś martwy ;-;";
    LANG[TEXT.SPAM_ME] =
      "Serwer nie może znaleźć miejsca na spawn! Spamuj przycisk zagraj! Lub wybierz inny serwer...";
    LANG[TEXT.SPAM_ME2] = "Serwer jest pełny! Spamuj przycisk zagraj!";
    LANG[TEXT.EMPTY] = "Źródło jest puste";
    LANG[TEXT.INV_FULL] =
      "Ekwipunek jest pełny (użyj prawego przycisku myszy, żeby wyrzucić przedmiot)";
    LANG[TEXT.DEAD] = " jest martwy";
    LANG[TEXT.WRONG_TOOL] = "To nie jest właściwe narzędzie";
    LANG[TEXT.JOIN_TEAM] = "Dołączyłeś do drużyny";
    LANG[TEXT.YOU_DEAD] = "Jesteś martwy";
    LANG[TEXT.JOINED_TEAM] = " dołączył do drużyny";
    LANG[TEXT.TEAM_DESTROYED] = "Twoja drużyna została zniszczona";
    LANG[TEXT.LEFT_TEAM] = " Opuściłeś drużynę";
    LANG[TEXT.LEFT_TEAM2] = " opuścił drużynę";
    LANG[TEXT.TOKEN] = "Ktoś ukradł twój żeton :>";
    LANG[TEXT.CHOOSE] = "Wybierz serwer";
    LANG[TEXT.PLAYERS] = "graczy";
    LANG[TEXT.TOTAL_PLAYERS] = "wszystkich graczy";
    LANG[TEXT.TOTAL_MODE] = "graczy w tym trybie";
    LANG[TEXT.COMMING_SOON] = "Już wkrótce...";
    document.getElementById("nickname_input").placeholder = "Przydomek";
    DIE[0] = ["Zostałeś zabity bez powodu"];
    DIE[1] = ["Umarłeś z głodu, jak nazwa gry wskazuje"];
    DIE[2] = [
      "Zamarzłeś na śmierć. Ale smutne",
      "Masz hipotermię. Następnym razem, zamiast tego spróbuj siedzieć obok ogniska.",
    ];
    DIE[3] = [
      "Gracz zabił cię, mówiąc ci 'git gud.' ",
      "Zostałeś zamordowany przez gracza. Nie martw się, ten gracz też zginie, ewentualnie.",
    ];
    DIE[4] = [
      "Byłeś za blisko ogniska i spłonąłeś. Zły pomysł.",
      "Zginąłeś od ognia. Ogień cię rani. Idź i napisz o tym historię.",
    ];
    DIE[5] = [
      "Twoje ciało stało się gniazdem dla pajęczych jaj",
      "Pająk cię zabił. Przynajmniej to nie był królik.",
    ];
    DIE[6] = [
      "Wilk już nie będzie głodował po zjedzeniu cię",
      "To nie są pieski.Wilki nie lubią jak się je głaszcze.",
    ];
    DIE[7] = [
      "Lis był dla ciebie za szybki",
      "Lis zmienił cię w pudło.Od kiedy zwierzęta mają magiczne zdolności?",
    ];
    DIE[8] = [
      "Niedźwiedź chciał się tylko przytulić.",
      "Niedźwiedź był biedny. Nie jest mi przykro.",
    ];
    DIE[9] = [
      "Zostałeś spalony na popiół przez smoka. Jakie to smutne.",
      "Zostałeś spłaszczony przez smoka. Być zmiażdżonym to okropny sposób na śmierć.",
    ];
    DIE[10] = [
      "Wskoczyłeś na kolczasty mur. Niezbyt dobry pomysł...",
      "Zostałeś zabity przez kolczasty mur. Większość ludzi ludzi jest wystarczająco rozsądna, aby nie dotykać spiczastych rzeczy.",
    ];
    DIE[11] = [
      "Nawet duch potrafi umrzeć.",
      "Nie udało ci się dokonać rezurekcji. To jest gra, więc żyjesz po śmierci, więc...",
    ];
    DIE[12] = [
      "Bakterie z twojego surowego mięsa zabiły cię. Ta gra jest zdecydowanie za trudna.",
      "Ty zabiłeś surowe mięso. Ono zabiło ciebię.",
    ];
    DIE[13] = ["Zginąłeś z pragnienia. Lepiej pić własny mocz."];
    DIE[14] = [
      "Czy wiedziałeś, że usta głodomorka są zawsze pod wodą podczas pływania? Teraz wiesz.",
    ];
    DIE[15] = [
      "Nie martw się, zasmakowałeś pirani.",
      "Zabawny fakt: Piranie jedzą ludzi, włączając ciebie.",
    ];
    DIE[16] = [
      "LapaMauve nie planuje abyś mógł zabić krakena",
      "Kraken rozwalił twoją czaszkę.",
    ];
    DIE[17] = ["Twoja skóra odpada, słońce cię zabija."];
    DIE[18] = ["Czosnek w twoich kieszeniach  ugotował ci mózg."];
    DIE[19] = ["Jako wampir, nie stałbym blisko ząbków czosnku."];
    DIE[20] = ["Zjadłeś czosnek jako wampir, czego oczekiwałeś?"];
    DIE[21] = [
      "Twoje ciało owija się w cierniste krzaki.Kiedy próbujesz uciec,twoja skóra odpada i twoje serce przestaje bić.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... Głoduję",
      "Potrzebuję twojego mózgu Uuunnnggg...",
      "Świeże mięso tutaj.. Uuunnnggg",
      "Uuunnnggg... Jesteś pyszny",
      "Uuunnnggg...",
      "Jeść... uuunnnggg...",
      "Czuję krew... Uuunnnggg",
    ];
  },
  set_french = function () {
    LANG[INV.DRAGON_CUBE] = ["You feel a great power emanating from this orb"];
    DIE[22] = [
      "This crab, though frightening in nature, pinched your fingertips so hard that you had a heart attack.",
    ];
    LANG[INV.CRAB_STICK] = [
      "Crab sticks",
      "Oh, yeah? Is there crab in the crab sticks?",
      "Food: 20",
    ];
    LANG[TEXT.BACK_TO_THE_GAME] = " RETOUR AU JEU";
    LANG[TEXT.TWITTER] = " Partage sur Twitter";
    LANG[TEXT.FACEBOOK] = " Partage sur Facebook";
    LANG[TEXT.KIT_NEXT] =
      "Tu peux acheter des objets dans le magasin à ta prochaine partie avec tes points";
    LANG[TEXT.POINTS] = "points";
    LANG[TEXT.SCORE] = "Score";
    LANG[TEXT.KILL] = "Tués";
    LANG[TEXT.DAYS_SURVIVED] = "Jours survécus";
    LANG[TEXT.MODE_FREE] =
      "Mode de construction: Libre. Appuie sur G pour changer";
    LANG[TEXT.MODE_GRID] =
      "Mode de construction: Grille. Appuie sur G pour changer";
    LANG[INV.CRAB_LOOT] = [
      "Pince de crabe",
      "Les pinces de crabes peuvent aussi être mangées",
      "Food: 10",
    ];
    LANG[INV.CRAB_SPEAR] = [
      "Lance en crabe",
      "Te permet de soigner les crabes et de les calmer",
      "Donne un bonus de +10 degats quand elle est portée",
      "avec un casque un crabe sur un Crab King",
      "Damage: 14",
      "Building Damage: 4",
    ];
    LANG[INV.CROWN_CRAB] = [
      "Casque en crabe",
      "Tu es le Roi des Crabes!",
      "Les crabes te suivent",
      "Ils ne peuvent pas te frapper et toi non plus",
      "Players Defense: 4",
      "Animals Defense: 13",
    ];
    LANG[INV.BED] = [
      "Lit",
      "Repose-toi dans ce lit douillet",
      "Tu as moins froid, moins faim et moins soif",
      "Tu te régénères plus vite",
      "Durability: 400",
    ];
    document.getElementById("typequest").innerHTML = "Chrono Quêtes";
    document.getElementById("timeremainingquest").innerHTML = "Temps Restant";
    document.getElementById("constraintquest").innerHTML = " Contraintes";
    document.getElementById("claim_rewards").innerHTML = " Résultat";
    document.getElementById("rewardquest").innerHTML = " Récompenses";
    document.getElementById("killdragon_1").innerHTML =
      " Collecte 1 Cœur de dragon dans la cave";
    document.getElementById("amethyst_2").innerHTML = " Récolte 1 améthyste";
    document.getElementById("survive20min_3").innerHTML =
      "Survis sans perdre de vie";
    document.getElementById("treasure_chest_4").innerHTML =
      " Ouvre 5 coffres au trésor";
    document.getElementById("dont_hit_5").innerHTML = " Sois pacifique";
    document.getElementById("bread_6").innerHTML =
      " Cuisine 100 pains en hiver, seul et sans retour en arrière";
    document.getElementById("winter_7").innerHTML =
      " Après 1 jour, survis en hiver";
    for (var _0x16bd49 = 0; _0x16bd49 < 7; _0x16bd49++) {
      document.getElementById("claim_reward_" + _0x16bd49).innerHTML =
        "RÉCOMPENSE!";
    }
    document.getElementById("quit_chronoquest").innerHTML = " QUITTER";
    LANG[INV.HAND] = ["Main"];
    LANG[INV.GROUND] = ["Terre", "C'est sale!"];
    LANG[INV.SAND] = ["Sable", "J'en ai dans les yeux"];
    LANG[INV.WOOD] = ["Bois", "Tu n'en auras jamais trop!"];
    LANG[INV.STONE] = ["Pierre", "Aussi appelée roche"];
    LANG[INV.GOLD] = ["Or", "Sois généreux, donne en aux autres"];
    LANG[INV.DIAMOND] = ["Diamant", "Comme tes yeux! wesh"];
    LANG[INV.AMETHYST] = ["Améthyste", "C'est Mauve comme Lapa"];
    LANG[INV.FLOUR] = ["Farine", "Utile pour la cuisine"];
    LANG[INV.COOKIE] = [
      "Cookie",
      "Un somptueux cookie de Grand-Mère",
      "Nourriture: 50",
    ];
    LANG[INV.CAKE] = ["Gâteau", "Pour les fins gourmets", "Nourriture: 100"];
    LANG[INV.MEAT] = [
      "Viande crue",
      "Tu peux la cuisiner avec du feu",
      "Intoxication: 10",
      "Nourriture: 15",
    ];
    LANG[INV.COOKED_MEAT] = [
      "Viande cuite",
      "Un steak saignant, s'il vous plait",
      "Nourriture: 35",
    ];
    LANG[INV.FOODFISH] = [
      "Poisson cru",
      "Je crois que c'est encore vivant",
      "Intoxication: 10",
      "Nourriture: 18",
    ];
    LANG[INV.FOODFISH_COOKED] = [
      "Poisson cuit",
      "Avec du citron, c'est parfait",
      "Nourriture: 35",
    ];
    LANG[INV.BREAD] = [
      "Baguette",
      "Une tradition s'il vous plait",
      "C'est la monnaie du marché",
      "Nourriture: 15",
    ];
    LANG[INV.SANDWICH] = [
      "Sandwich",
      "Le Jambon Beurre vaincra",
      "Nourriture: 100",
    ];
    LANG[INV.CANDY] = [
      "Bonbons",
      "Il n'y a pas de dentiste ici",
      "Nourriture: 100",
    ];
    LANG[INV.SUGAR_CAN] = [
      "Canne à sucre",
      "Sans sucre de canne",
      "Nourriture: 20",
    ];
    LANG[INV.GARLAND] = ["Guirlandes", "Utilisable sur les toits"];
    LANG[INV.SEED] = [
      "Graines de baies",
      "Deviennent des baies",
      "Naissance: 2min",
      "Croissance: 55s",
      "Arrosage: 3min 20s",
      "Durabilité: 700",
      "Durée de vie: 8 jours",
    ];
    LANG[INV.PLANT] = ["Baies", "Peu nourrissant", "Nourriture: 10"];
    LANG[INV.WHEAT_SEED] = [
      "Graines de blé",
      "Deviennent du blé",
      "Naissance: 2min",
      "Croissance: 16s",
      "Arrosage: 2min",
      "Durabilité: 700",
      "Durée de vie: 8 jours",
    ];
    LANG[INV.WILD_WHEAT] = [
      "Blé",
      "Peut être transformé en farine dans les moulins",
    ];
    LANG[INV.PUMPKIN_SEED] = [
      "Graines de citrouille",
      "Deviennent des citrouilles",
      "Naissance: 2min 40s",
      "Croissance: 2min",
      "Arrosage: 2min",
      "Durabilité: 700",
      "Durée de vie: 8 jours",
    ];
    LANG[INV.PUMPKIN] = [
      "Citrouille",
      "Ça me rappelle Halloween",
      "Nourriture: 30",
    ];
    LANG[INV.GARLIC_SEED] = [
      "Graines d'ail",
      "Très dangereux pour les vampires",
      "Dégâts: 20",
      "Naissance: 4min",
      "Croissance: 1min 10s",
      "Arrosage: 1min 40s",
      "Durabilité: 700",
      "Durée de vie: 8 jours",
    ];
    LANG[INV.GARLIC] = [
      "Ail",
      "Soigne et réduit le froid",
      "Nourriture: 14",
      "Soigne sur le temps: 30",
      "Effet: 1 fois",
    ];
    LANG[INV.THORNBUSH_SEED] = [
      "Graines de ronces",
      "Peuvent blesser vos ennemis",
      "Dégâts: 20",
      "Naissance: 4min",
      "Croissance: 15s",
      "Arrosage: 3min",
      "Durabilité: 1000",
      "Durée de vie: 8 jours",
    ];
    LANG[INV.THORNBUSH] = ["Ronces", "Ça pique!"];
    LANG[INV.PLOT] = [
      "Terreau",
      "Indispensable",
      "Vos plantes grandiront plus vite",
      "et auront besoin de moins d'eau",
      "Durabilité: 2000",
    ];
    LANG[INV.ICE] = ["Glace", "Pratique pour faire de l'eau et des gâteaux"];
    LANG[INV.SPANNER] = [
      "Clé à molette",
      "Pour réparer les portes, les murs et les piques",
      "Dégâts: 2",
    ];
    LANG[INV.FUR_WOLF] = ["Peau de loup", "Il était où le gentil ti Youki?"];
    LANG[INV.FUR] = ["Peau de lapin", "Vous êtes un monstre"];
    LANG[INV.SPECIAL_FUR] = ["Fourrure blanche", "Tu es une usine à pain"];
    LANG[INV.SPECIAL_FUR_2] = [
      "Fourrure noire",
      "Tu te sens prêt à faire quelque chose de mal",
    ];
    LANG[INV.FUR_WINTER] = ["Fourrure d'hiver", "Il voulait juste un calin"];
    LANG[INV.SCALES] = ["Écailles", "Ça sent le poisson!"];
    LANG[INV.KRAKEN_SKIN] = ["Peau du kraken", "Tu n'as pas eu trop peur?"];
    LANG[INV.FIRE] = [
      "Feu de camp",
      "Réchauffe",
      "Durabilité: 150",
      "Durée de vie: 2min",
    ];
    LANG[INV.BIG_FIRE] = [
      "Grand feu de camp",
      "Réchauffe plus longtemps",
      "Durabilité: 400",
      "Durée de vie: 6min",
    ];
    LANG[INV.WORKBENCH] = [
      "Établi",
      "Utile pour fabriquer toute sorte d'objets",
    ];
    LANG[INV.CORD] = ["Fil", "Utile pour faire des chapeaux et un sac"];
    LANG[INV.BLUE_CORD] = ["Fil de diamant", "Utile pour faire des chapeaux"];
    LANG[INV.CHEST] = [
      "Coffre",
      "Permet de ranger des objets",
      "Durabilité: 500",
    ];
    LANG[INV.SWORD_WOOD] = [
      "Épée en bois",
      "C'est pour les enfants",
      "Dégâts: 12",
      "Démolition: 4",
    ];
    LANG[INV.SWORD] = [
      "Épée en pierre",
      "Sois gentil avec les autres",
      "Dégâts: 19",
      "Démolition: 6",
    ];
    LANG[INV.SWORD_GOLD] = [
      "Épée en or",
      "Roi de la forêt",
      "Dégâts: 22",
      "Démolition: 7",
    ];
    LANG[INV.SWORD_DIAMOND] = [
      "Épée en diamant",
      "Tu te sens puissant",
      "Dégâts: 24",
      "Démolition: 8",
    ];
    LANG[INV.PIRATE_SWORD] = [
      "Épée de pirate",
      "Marin d'eau douce!",
      "Meilleure portée qu'une épée normale",
      "Dégâts: 24",
      "Démolition: 8",
    ];
    LANG[INV.SWORD_AMETHYST] = [
      "Épée en améthyste",
      "Mauve est la plus belle couleur du monde",
      "Dégâts: 27",
      "Démolition: 9",
    ];
    LANG[INV.DRAGON_SWORD] = [
      "Épée du Dragon",
      "Pas de pitié!",
      "Dégâts: 30",
      "Démolition: 10",
    ];
    LANG[INV.DRAGON_SPEAR] = [
      "Lance du Dragon",
      "Tuez-les tous!",
      "Dégâts: 22",
      "Démolition: 6",
    ];
    LANG[INV.PICK_WOOD] = [
      "Pioche en bois",
      "Peut récolter du bois et de la pierre",
      "Dégâts: 1",
    ];
    LANG[INV.PICK] = [
      "Pioche en pierre",
      "Peut aussi récolter de l'or",
      "Dégâts: 2",
    ];
    LANG[INV.PICK_GOLD] = [
      "Pioche en or",
      "Peut aussi récolter du diamant",
      "Dégâts: 3",
      "Démolition: 1",
    ];
    LANG[INV.PICK_DIAMOND] = [
      "Pioche en diamant",
      "Peut tout récolter",
      "Dégâts: 4",
      "Démolition: 1",
    ];
    LANG[INV.PICK_AMETHYST] = [
      "Pioche en améthyste",
      "Peut tout récolter",
      "Dégâts: 5",
      "Démolition: 1",
    ];
    LANG[INV.HAMMER] = [
      "Marteau en pierre",
      "Utile pour détruire les bâtiments",
      "Ne marche pas bien sur du diamant et améthyste",
      "Dégâts: 2",
      "Démolition: 20",
    ];
    LANG[INV.HAMMER_GOLD] = [
      "Marteau en or",
      "Utile pour détruire les bâtiments",
      "Ne marche pas bien sur l'améthyste",
      "Dégâts: 3",
      "Démolition: 30",
    ];
    LANG[INV.HAMMER_DIAMOND] = [
      "Marteau en diamant",
      "Utile pour détruire les bâtiments",
      "Dégâts: 4",
      "Démolition: 40",
    ];
    LANG[INV.HAMMER_AMETHYST] = [
      "Marteau en améthyste",
      "Utile pour détruire les bâtiments",
      "Dégâts: 5",
      "Démolition: 50",
    ];
    LANG[INV.SUPER_HAMMER] = [
      "Super Marteau",
      "As-tu prévu de détruire le monde?",
      "Dégâts: 12",
      "Démolition: 70",
    ];
    LANG[INV.WOOD_SPEAR] = [
      "Lance en bois",
      "Plus de peur que de mal",
      "Dégâts: 10",
      "Démolition: 2",
    ];
    LANG[INV.SPEAR] = [
      "Lance en pierre",
      "C'est le début de l'évolution",
      "Dégâts: 14",
      "Démolition: 4",
    ];
    LANG[INV.GOLD_SPEAR] = [
      "Lance en or",
      "Attention, ça pique!",
      "Dégâts: 15",
      "Buildings Dégâts: 5",
    ];
    LANG[INV.DIAMOND_SPEAR] = [
      "Lance en diamant",
      "Tu es prêt à tuer les dragons",
      "Dégâts: 17",
      "Buildings Dégâts: 5",
    ];
    LANG[INV.AMETHYST_SPEAR] = [
      "Lance en améthyste",
      "Les dragons ne te font plus peur",
      "Dégâts: 18",
      "Buildings Dégâts: 6",
    ];
    LANG[INV.SHOVEL] = [
      "Pelle en pierre",
      "Creuse la terre, le sable et la neige",
      "Peut aussi récupérer des minéraux",
      "Dégâts: 2",
    ];
    LANG[INV.SHOVEL_GOLD] = [
      "Pelle en or",
      "Creuse la terre, le sable et la neige",
      "Peut aussi récupérer des minéraux",
      "Dégâts: 3",
      "Buildings Dégâts: 1",
    ];
    LANG[INV.SHOVEL_DIAMOND] = [
      "Pelle en diamant",
      "Creuse la terre, le sable et la neige",
      "Peut aussi récupérer des minéraux",
      "Dégâts: 4",
      "Buildings Dégâts: 1",
    ];
    LANG[INV.SHOVEL_AMETHYST] = [
      "Pelle en améthyste",
      "Creuse la terre, le sable et la neige",
      "Peut aussi récupérer des minéraux",
      "Dégâts: 5",
      "Buildings Dégâts: 1",
    ];
    LANG[INV.WOOD_HELMET] = [
      "Casque en bois",
      "Mieux que rien",
      "Défense: 1",
      "Défense contre animaux: 4",
    ];
    LANG[INV.STONE_HELMET] = [
      "Casque en pierre",
      "Prêt pour la bataille",
      "Défense: 2",
      "Défense contre animaux: 8",
    ];
    LANG[INV.GOLD_HELMET] = [
      "Casque en or",
      "Alias le casque des sauvages",
      "Défense: 4",
      "Défense contre animaux: 13",
    ];
    LANG[INV.DIAMOND_HELMET] = [
      "Casque en diamant",
      "Ne te vante pas trop",
      "Défense: 5",
      "Défense contre animaux: 19",
    ];
    LANG[INV.AMETHYST_HELMET] = [
      "Casque en améthyste",
      "Tu n'as plus peur de rien",
      "Défense: 6",
      "Défense contre animaux: 23",
    ];
    LANG[INV.DRAGON_HELMET] = [
      "Casque du Dragon",
      "Tu vas conquérir le monde",
      "Défense: 8",
      "Défense contre animaux: 27",
    ];
    LANG[INV.EXPLORER_HAT] = [
      "Chapeau d'explorateur",
      "Les animaux t'ignorent",
      "Mais ne faites pas de bruit!",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.CHRISTMAS_HAT] = [
      "Chapeau du Père Noël",
      "Oh, oh, oh, Joyeux Nöel!",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.ELF_HAT] = [
      "Chapeau du lutin de Nöel",
      "Tu as vu le nouveau chef d'oeuvre d'Alain Chabat?",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.HOOD] = [
      "Capuche",
      "Voyou!",
      "Tu peux voler seulement si",
      "1) Il fait nuit",
      "2) Tu as les mains libres",
      "3) Tu n'as pas été touché depuis 8 secondes",
      "4) Tu es loin d'un feu",
      "5) Ta cible n'est pas un paysan",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.EARMUFFS] = [
      "Cache-oreilles",
      "Une sorte de petite chapka.",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.COAT] = [
      "Chapka",
      "Comment ça va, camarade?",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.CAP_SCARF] = ["Bonnet d'hiver", "Très confortable", "Très chaud"];
    LANG[INV.PEASANT] = [
      "Tunique",
      "Les plantes poussent plus vite",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.WINTER_HOOD] = [
      "Capuche d'hiver",
      "Tu peux voler seulement si",
      "1) Il fait nuit",
      "2) Tu as les mains libres",
      "3) Tu n'as pas été touché depuis 4 secondes",
      "4) Tu es loin d'un feu",
      "5) Ta cible n'est pas un paysan d'hiver",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.WINTER_PEASANT] = [
      "Tunique d'hiver",
      "Tes plantes poussent plus vite",
      "Réchauffe en dehors de l'eau et dans l'hiver",
    ];
    LANG[INV.DIVING_MASK] = [
      "Masque de plongée",
      "Tu es rapide dans l'eau",
      "Réchauffe dans l'eau",
      "Défense: 2, Défense contre animaux: 8",
    ];
    LANG[INV.SUPER_DIVING_SUIT] = [
      "Scaphandre",
      "Tu es très rapide dans l'eau",
      "Réchauffe dans l'eau",
      "Défense: 4, Défense contre animaux: 16",
    ];
    LANG[INV.DRAGON_ORB] = ["Orbe du Dragon", "Donné en Quête"];
    LANG[INV.DRAGON_HEART] = [
      "Coeur de Dragon",
      "Te change en fantôme!",
      "Tu es un fantôme pendant 1 min",
      "Trouve une pierre de résurrection",
    ];
    LANG[INV.GEMME_GREEN] = ["Gemme verte", "Tu n'as pas triché, promis?"];
    LANG[INV.GEMME_ORANGE] = [
      "Gemme orange",
      "Seul un vrai pirate peut l'obtenir!",
    ];
    LANG[INV.GEMME_BLUE] = ["Gemme bleue", "Pour les gens trop gentils"];
    LANG[INV.CROWN_GREEN] = [
      "Couronne verte",
      "Te soigne très rapidement",
      "Soigne sur le temps: 40",
      "Défense: 4, Défense contre animaux: 16",
    ];
    LANG[INV.CROWN_ORANGE] = [
      "Couronne orange",
      "Tu te sens soudainement très chanceux",
      "Défense: 4, Défense contre animaux: 16",
    ];
    LANG[INV.CROWN_BLUE] = [
      "Couronne bleue",
      "Une fois mort, tu deviens un fantôme",
      "Tu perdras toutes tes arguments",
      "Défense: 4, Défense contre animaux: 16",
    ];
    LANG[INV.BUCKET_FULL] = [
      "Seau",
      "Utile pour remplir un puit",
      "Un sceau est équivalent à 20 bouteilles",
    ];
    LANG[INV.BUCKET_EMPTY] = [
      "Seau vide",
      "Pour remplir ce seau, approche-toi d'une source d'eau",
    ];
    LANG[INV.BOTTLE_FULL] = [
      "Bouteille",
      "Te permet de boire n'importe où",
      "Eau: 50",
    ];
    LANG[INV.BOTTLE_EMPTY] = [
      "Bouteille vide",
      "Tu peux remplir cette bouteille près d'une source d'eau",
    ];
    LANG[INV.WATERING_CAN] = [
      "Arrosoir vide",
      "Doit être rempli près d'une source d'eau",
    ];
    LANG[INV.WATERING_CAN_FULL] = [
      "Arrosoir",
      "Permet d'arroser les plantes",
      "Dégâts: 1",
    ];
    LANG[INV.BAG] = ["Sac", "Plus de place dans ton inventaire!"];
    LANG[INV.PAPER] = ["Papier", "Pour fabriquer toute sorte d'objets"];
    LANG[INV.BOOK] = [
      "Livre",
      "Réduit considérablement le temps de fabrication",
      "Doit être porté pour fonctionner",
      "Dégâts: 1",
    ];
    LANG[INV.BANDAGE] = [
      "Bandage",
      "Soigne plus rapidement",
      "Soigne sur le temps: 30",
      "Effet: 5",
    ];
    LANG[INV.LOCK] = ["Cadenas", "Pour verrouiller un coffre"];
    LANG[INV.LOCKPICK] = ["Clé", "Pour déverrouiller un coffre"];
    LANG[INV.TOTEM] = [
      "Totem",
      "Te permet de créer une équipe",
      "Partage les portes et les coffres",
      "Les piques ne toucheront pas tes amis",
    ];
    LANG[INV.BRIDGE] = [
      "Pont",
      "Très utile sur l'eau",
      "Te permet de boire sans te noyer",
      "Marche plus vite sur l'eau",
    ];
    LANG[INV.SIGN] = [
      "Pancarte",
      "Laisse un message aux autres",
      "Durabilité: 200",
    ];
    LANG[INV.ROOF] = ["Toit", "Te cache un peu et te réchauffe"];
    LANG[INV.WELL] = [
      "Puit",
      "Permet de remplir des bouteilles",
      "Durabilité: 1000",
    ];
    LANG[INV.WALL] = [
      "Mur en bois",
      "Tu connais la danse des murs?",
      "Durabilité: 1000",
    ];
    LANG[INV.STONE_WALL] = [
      "Mur en pierre",
      "Ça fait un peu plus sérieux",
      "Durabilité: 1500",
    ];
    LANG[INV.GOLD_WALL] = [
      "Mur en or",
      "De l'or sur tes murs? C'est un peu voyant",
      "Durabilité: 2000",
    ];
    LANG[INV.DIAMOND_WALL] = [
      "Mur en diamant",
      "Très brillant, cache tes yeux",
      "Durabilité: 2500",
    ];
    LANG[INV.AMETHYST_WALL] = [
      "Mur en améthyste",
      "Tu dois avoir très peur de sortir dehors!",
      "Durabilité: 3500",
    ];
    LANG[INV.SPIKE] = [
      "Piques en bois",
      "Peut blesser tes ennemis",
      "Dégâts: 10, Dégâts par coup: 2",
      "Durabilité: 150",
    ];
    LANG[INV.STONE_SPIKE] = [
      "Pique en pierre",
      "Je ne voudrais pas être ton ennemi",
      "Dégâts: 20",
      "Dégâts par coup: 3",
      "Durabilité: 300",
    ];
    LANG[INV.GOLD_SPIKE] = [
      "Pique en or",
      "Tu es si cruel",
      "Dégâts: 30",
      "Dégâts par coup: 3",
      "Durabilité: 600",
    ];
    LANG[INV.DIAMOND_SPIKE] = [
      "Pique en diamant",
      "Tu n'as pas l'air d'aimer la compagnie",
      "Dégâts: 40",
      "Dégâts par coup: 4",
      "Durabilité: 1200",
    ];
    LANG[INV.AMETHYST_SPIKE] = [
      "Pique en améthyste",
      "Mais qu'est ce que ton voisin t'a fait?",
      "Dégâts: 50",
      "Dégâts par coup: 4",
      "Durabilité: 2400",
    ];
    LANG[INV.WOOD_DOOR] = [
      "Porte en bois",
      "Peut être ouvert ou fermé par toi ou tes amis",
      "Durabilité: 1000",
    ];
    LANG[INV.STONE_DOOR] = [
      "Porte en pierre",
      "Tu connais les trois petits cochons?",
      "Durabilité: 1500",
    ];
    LANG[INV.GOLD_DOOR] = [
      "Porte en or",
      "Tu reconstruis l'el dorado?",
      "Durabilité: 2000",
    ];
    LANG[INV.DIAMOND_DOOR] = [
      "Porte en diamant",
      "Pour une maison éclatante",
      "Durabilité: 2500",
    ];
    LANG[INV.AMETHYST_DOOR] = [
      "Porte en améthyste",
      "Est-ce que ta maison est un coffre-fort?",
      "Durabilité: 3000",
    ];
    LANG[INV.FURNACE] = [
      "Chaudière",
      "Réchauffe",
      "Consume du bois toutes les 5 sec",
      "Durabilité: 1000",
    ];
    LANG[INV.WINDMILL] = [
      "Moulin",
      "Peut produire de la farine à partir du blé",
      "Prends 5 sec pour faire de la farine",
      "Tu obtiens des points quand c'est en marche",
      "Durabilité: 2000",
    ];
    LANG[INV.BREAD_OVEN] = [
      "Four à pain",
      "Produit du pain avec de la farine et du bois",
      "Prends 10 sec pour faire du pain",
      "Tu obtiens des points quand c'est en marche",
      "Durabilité: 2000",
    ];
    LANG[INV.RESURRECTION] = [
      "Pierre de résurrection",
      "Magie magie!",
      "Te ressuscite si tu es un fantôme",
      "Tu perds toutes tes armes",
      "Durabilité: 200",
    ];
    LANG[TEXT.YOU_CANNOT_JOIN] = "Tu ne peux pas rejoindre le serveur";
    LANG[TEXT.KICKED] = "Expulsé: ";
    LANG[TEXT.KEY_ALREADY] = "Ta clé est déjà utilisée par quelqu'un d'autre";
    LANG[TEXT.KEY_WRONG] = "Ta clé est fausse";
    LANG[TEXT.OLD_VERSION] = "Tu as une vieille version, rafraichis tes caches";
    LANG[TEXT.NO_MORE_RESOURCES] = "Il n'y a plus de nouvelles ressources";
    LANG[TEXT.SURVIVED_1DAY] = "Tu as survécu 1 jour";
    LANG[TEXT.SURVIVED] = "Tu as survécu ";
    LANG[TEXT.DAYS] = " jours";
    LANG[TEXT.DEAD_SAD] = "Tu es mort ;-;";
    LANG[TEXT.SPAM_ME] =
      "Le serveur ne trouve pas de points d'apparitions! Spam le bouton jouer!";
    LANG[TEXT.SPAM_ME2] = "Le serveur est complet! Spam le bouton jouer";
    LANG[TEXT.EMPTY] = "Cette ressource est vide";
    LANG[TEXT.INV_FULL] =
      "Ton inventaire est rempli (Clic droit pour supprimer un objet)";
    LANG[TEXT.DEAD] = " est mort";
    LANG[TEXT.WRONG_TOOL] = "Ce n'est pas le bon outil";
    LANG[TEXT.JOIN_TEAM] = "Tu as rejoins une équipe";
    LANG[TEXT.YOU_DEAD] = "Tu es mort";
    LANG[TEXT.JOINED_TEAM] = " a rejoint l'équipe";
    LANG[TEXT.TEAM_DESTROYED] = "Ton équipe a été détruite";
    LANG[TEXT.LEFT_TEAM] = "Tu as quitté l'équipe";
    LANG[TEXT.LEFT_TEAM2] = " a quitté l'équipe";
    LANG[TEXT.TOKEN] = "Quelqu'un a volé ton token :>";
    LANG[TEXT.CHOOSE] = "Choisis un serveur";
    LANG[TEXT.PLAYERS] = "joueurs";
    LANG[TEXT.TOTAL_PLAYERS] = "joueurs";
    LANG[TEXT.TOTAL_MODE] = "joueurs dans ce mode";
    LANG[TEXT.COMMING_SOON] = "Bientôt...";
    document.getElementById("nickname_input").placeholder = "Surnom";
    DIE[0] = ["Tu as été tué sans raison particulière, juste comme ça"];
    DIE[1] = ["Tu es mort de faim, c'est plutôt ironique, non?"];
    DIE[2] = [
      "Tu es mort de froid. Dommage",
      "Tu as fait une hypothermie, la prochaine fois reste près d'un feu",
    ];
    DIE[3] = [
      "Un joueur t'a tué, avant de mourir tu pouvais l'entendre rire",
      "Un joueur t'a tué, avec un peu de chance il mourra aussi",
    ];
    DIE[4] = [
      "Tu es resté sur un feu trop longtemps et tu es mort suite aux brûlures",
      "Tu es mort en restant trop longtemps sur un feu, tu voulais finir comme Jeanne d'Arc?",
    ];
    DIE[5] = ["Ton corps deviendra un nid pour les oeufs d'araignées."];
    DIE[6] = [
      "Ce loup n'aura plus faim après t'avoir mangé",
      "Ce ne sont pas des chiens. Les loups n'aiment pas être domestiqués.",
    ];
    DIE[7] = [
      "Ce renard était trop rapide pour toi",
      "Ce renard t'a transformé en boîte",
    ];
    DIE[8] = ["Cet ours voulait juste un câlin."];
    DIE[9] = [
      "Tu as été brûlé par un dragon. Quel gâchis",
      "Tu t'es fait écraser par un dragon. Une bien terrible façon de mourir...",
    ];
    DIE[10] = [
      "Tu as sauté sur des piques, c'était pas une bonne idée...",
      "Tu es mort sur des piques. La plupart des gens sont assez sensés pour ne pas toucher les choses pointues",
    ];
    DIE[11] = [
      "Même les fantômes peuvent mourir",
      "Tu n'as pas réussi à te ressusciter. Mais c'est un jeu, tu reviens à la vie après être mort, donc...",
    ];
    DIE[12] = [
      "Une bactérie logée dans la viande crue t'a tué. Ce jeu est vraiment trop dur.",
      "Tu as tué l'animal, sa viande t'a tué.",
    ];
    DIE[13] = [
      "Tu es mort de soif. La prochaine fois, vas dans un lac, dans la mer ou fais-toi une bouteille",
    ];
    DIE[14] = ["Tu t'es noyé. Essaye de construire un pont la prochaine fois"];
    DIE[15] = ["Ne t'inquiète pas, le piranha t'a trouvé appétissant."];
    DIE[16] = ["Un kraken a 'kraké' tes os."];
    DIE[17] = ["Ta peau tombe en lambeau, le soleil t'a brûlé."];
    DIE[18] = ["L'ail dans ta poche a fait bouillir ton cerveau."];
    DIE[19] = ["En tant que vampire, ne reste pas à côté des gousses d'ail."];
    DIE[20] = [
      "Tu as mangé de l'ail en tant que vampire, tu t'attendais à quoi?",
    ];
    DIE[21] = [
      "Ton corps est tombé dans les ronces. En essayant de t'échapper, ta peau s'est arrachée et la douleur a fait arrêter de battre ton coeur. lol ça rime.",
    ];
    ZOMBIE_GRUMBLE = "Uuunnnggg";
    ZOMBIE_GRUMBLES = [
      "Uuunnnggg... J'ai faim",
      "Manger cerveau, Uuunnnggg...",
      "Viande fraîche ici... Uuunnnggg",
      "Uuunnnggg... Tu as l'air bon",
      "Uuunnnggg...",
      "Manger... uuunnnggg...",
      "Je peux sentir ton sang... Uuunnnggg",
    ];
  },
  LANG = [];
for (var i = 0; i < COUNTER; i++) {
  LANG[i] = "";
}
var DIE = [];
$(".md-languages").on("click", function () {
  $(this).toggleClass("active");
});
$(".md-languages ul li").on("click", function () {
  var _0x2f6106 = $(this).text();
  if (_0x2f6106 === "English") {
    set_english();
  } else {
    if (_0x2f6106 === "Français") {
      set_french();
    } else {
      if (_0x2f6106 === "Deutsch") {
        set_german();
      } else {
        if (_0x2f6106 === "Español") {
          set_spanish();
        } else {
          if (_0x2f6106 === "Português") {
            set_portuguese();
          } else {
            if (_0x2f6106 === "Русский") {
              set_russian();
            } else {
              if (_0x2f6106 === "Polski") {
                set_polish();
              }
            }
          }
        }
      }
    }
  }
  INFO_BOX = [];
  user.craft.label = [];
  $(".md-languages ul li").removeClass("active");
  $(this).addClass("active");
  $(".md-languages label button").text(_0x2f6106);
});
var lang = "EN",
  userlang = navigator.language || navigator.userLanguage;
switch (userlang) {
  case "ru":
    lang = "RU";
    break;
  case "en":
    lang = "EN";
    break;
  case "es":
    lang = "SP";
    break;
  case "fr":
    lang = "FR";
    break;
  case "pl":
    lang = "PL";
    break;
  case "de":
    lang = "DE";
    break;
  case "pt":
    lang = "PT";
    break;
}
var next_lang;
if (lang === "FR") {
  $(".md-languages label button").text("Français");
  next_lang = set_french;
} else {
  if (lang === "PL") {
    $(".md-languages label button").text("Polski");
    next_lang = set_polish;
  } else {
    if (lang === "PT") {
      $(".md-languages label button").text("Português");
      next_lang = set_portuguese;
    } else {
      if (lang === "SP") {
        $(".md-languages label button").text("Español");
        next_lang = set_spanish;
      } else {
        if (lang === "RU") {
          $(".md-languages label button").text("Русский");
          next_lang = set_russian;
        } else {
          lang === "DE"
            ? ($(".md-languages label button").text("Deutsch"),
              (next_lang = set_german))
            : ($(".md-languages label button").text("English"),
              (next_lang = set_english));
        }
      }
    }
  }
}
IMAGES = {
  LOGO: "img/logo.png",
  BIGDAY: "img/mapday.png",
  BIGNIGHT: "img/mapnight.png",
  BIGZDAY: "img/bigzday.png",
  BIGZNIGHT: "img/bigznight.png",
  MAPDAY_RIVER: "img/bigday-river1.png",
  MAPDAY_LAKE: "img/bigday-lake.png",
  MAPDAY_BERRY: "img/bigday-berry.png",
  MAPDAY_STONE1: "img/bigday-stone1.png",
  MAPDAY_STONE2: "img/bigday-stone2.png",
  MAPDAY_GOLD1: "img/bigday-gold1.png",
  MAPDAY_GOLD2: "img/bigday-gold2.png",
  MAPDAY_EMERALD1: "img/bigday-emerald1.png",
  MAPDAY_EMERALD2: "img/bigday-emerald2.png",
  MAPDAY_AMETHYST: "img/bigday-amethyst.png",
  MAPDAY_BEAR: "img/bigday-bear.png",
  MAPDAY_CAVE: "img/bigday-cave.png",
  MAPDAY_DIAMOND: "img/bigday-diamond.png",
  MAPDAY_ISLAND: "img/bigday-island.png",
  MAPDAY_REIDITE: "img/bigday-reidite.png",
  MAPDAY_SPIDER: "img/bigday-spider.png",
  MAPDAY_WOLF: "img/bigday-wolf.png",
  MAPDAY_FIR_TREE: "img/bigday-fir-tree.png",
  MAPDAY_FOX: "img/bigday-fox.png",
  MAPDAY_KRAKEN: "img/bigday-kraken.png",
  MAPDAY_PIRANHA: "img/bigday-piranha.png",
  MAPDAY_CACTUS: "img/bigday-cactus.png",
  MAPDAY_MAGMA: "img/bigday-magma.png",
  MAPNIGHT_RIVER: "img/bigday-river1.png",
  MAPNIGHT_LAKE: "img/bignight-lake.png",
  MAPNIGHT_BERRY: "img/bignight-berry.png",
  MAPNIGHT_STONE1: "img/bignight-stone1.png",
  MAPNIGHT_STONE2: "img/bignight-stone2.png",
  MAPNIGHT_GOLD1: "img/bignight-gold1.png",
  MAPNIGHT_GOLD2: "img/bignight-gold2.png",
  MAPNIGHT_EMERALD1: "img/bignight-emerald1.png",
  MAPNIGHT_EMERALD2: "img/bignight-emerald2.png",
  MAPNIGHT_AMETHYST: "img/bignight-amethyst.png",
  MAPNIGHT_BEAR: "img/bignight-bear.png",
  MAPNIGHT_CAVE: "img/bignight-cave.png",
  MAPNIGHT_DIAMOND: "img/bignight-diamond.png",
  MAPNIGHT_ISLAND: "img/bignight-island.png",
  MAPNIGHT_REIDITE: "img/bignight-reidite.png",
  MAPNIGHT_SPIDER: "img/bignight-spider.png",
  MAPNIGHT_WOLF: "img/bignight-wolf.png",
  MAPNIGHT_FIR_TREE: "img/bignight-fir-tree.png",
  MAPNIGHT_FOX: "img/bignight-fox.png",
  MAPNIGHT_KRAKEN: "img/bignight-kraken.png",
  MAPNIGHT_PIRANHA: "img/bignight-piranha.png",
  MAPNIGHT_CACTUS: "img/bignight-cactus.png",
  MAPNIGHT_MAGMA: "img/bignight-magma.png",
  MAPDAY_DESERT: "img/bigday-desert.png",
  MAPDAY_WINTER: "img/bigday-winter.png",
  MAPDAY_LAVA: "img/bigday-lava.png",
  MAPDAY_FOREST: "img/bigday-forest.png",
  MAPNIGHT_DESERT: "img/bignight-desert.png",
  MAPNIGHT_WINTER: "img/bignight-winter.png",
  MAPNIGHT_LAVA: "img/bignight-lava.png",
  MAPNIGHT_FOREST: "img/bignight-forest.png",
  RIVER_WAVED: "img/day-river-wave.png",
  RIVER_WAVEN: "img/night-river-wave.png",
  FOG0D: "img/day-fog0.png",
  FOG1D: "img/day-fog1.png",
  FOG2D: "img/day-fog2.png",
  FOG0N: "img/night-fog0.png",
  FOG1N: "img/night-fog1.png",
  FOG2N: "img/night-fog2.png",
  FOD0D: "img/day-fogdesert0.png",
  FOD1D: "img/day-fogdesert1.png",
  FOD2D: "img/day-fogdesert2.png",
  FOD0N: "img/night-fogdesert0.png",
  FOD1N: "img/night-fogdesert1.png",
  FOD2N: "img/night-fogdesert2.png",
  MARKER0D: "img/day-cross-server.png",
  MARKER1D: "img/day-here-server.png",
  MARKER2D: "img/day-finish-server.png",
  MARKER3D: "img/day-item-server.png",
  MARKER0N: "img/night-cross-server.png",
  MARKER1N: "img/night-here-server.png",
  MARKER2N: "img/night-finish-server.png",
  MARKER3N: "img/night-item-server.png",
  REIDITE0D: "img/day-reidite0.png",
  REIDITE0N: "img/night-reidite0.png",
  REIDITE1D: "img/day-reidite1.png",
  REIDITE1N: "img/night-reidite1.png",
  REIDITE2D: "img/day-reidite2.png",
  REIDITE2N: "img/night-reidite2.png",
  MAGMA1D: "img/day-lava1.png",
  MAGMA1N: "img/night-lava1.png",
  MAGMA2D: "img/day-lava2.png",
  MAGMA2N: "img/night-lava2.png",
  MAGMA3D: "img/day-lava3.png",
  MAGMA3N: "img/night-lava3.png",
  MAGMA4D: "img/day-lava4.png",
  MAGMA4N: "img/night-lava4.png",
  MAGMA5D: "img/day-lava5.png",
  MAGMA5N: "img/night-lava5.png",
  MAGMA6D: "img/day-lava6.png",
  MAGMA6N: "img/night-lava6.png",
  LAVA_GROUND1D: "img/day-lava-ground1.png",
  LAVA_GROUND1N: "img/night-lava-ground1.png",
  LAVA_GROUND2D: "img/day-lava-ground2.png",
  LAVA_GROUND2N: "img/night-lava-ground2.png",
  LAVA_GROUND3D: "img/day-lava-ground3.png",
  LAVA_GROUND3N: "img/night-lava-ground3.png",
  LAVA_GROUND4D: "img/day-lava-ground4.png",
  LAVA_GROUND4N: "img/night-lava-ground4.png",
  LAVA_GROUND5D: "img/day-lava-ground5.png",
  LAVA_GROUND5N: "img/night-lava-ground5.png",
  LAVA_GROUND6D: "img/day-lava-ground6.png",
  LAVA_GROUND6N: "img/night-lava-ground6.png",
  FIRE_MOBD: "img/day-fire-mob.png",
  FIRE_MOBN: "img/night-fire-mob.png",
  FIRE_MOB_HURT: "img/hurt-fire-mob.png",
  DIAMOND_PROTECTIOND: "img/day-diamond-protection.png",
  DIAMOND_PROTECTIONN: "img/night-diamond-protection.png",
  HAND_DIAMOND_PROTECTIOND: "img/day-hand-diamond-protection.png",
  HAND_DIAMOND_PROTECTIONN: "img/night-hand-diamond-protection.png",
  INV_DIAMOND_PROTECTION_OUT: "img/inv-diamond-protection-out.png",
  INV_DIAMOND_PROTECTION_IN: "img/inv-diamond-protection-in.png",
  INV_DIAMOND_PROTECTION_CLICK: "img/inv-diamond-protection-click.png",
  AMETHYST_PROTECTIOND: "img/day-amethyst-protection.png",
  AMETHYST_PROTECTIONN: "img/night-amethyst-protection.png",
  HAND_AMETHYST_PROTECTIOND: "img/day-hand-amethyst-protection.png",
  HAND_AMETHYST_PROTECTIONN: "img/night-hand-amethyst-protection.png",
  INV_AMETHYST_PROTECTION_OUT: "img/inv-amethyst-protection-out.png",
  INV_AMETHYST_PROTECTION_IN: "img/inv-amethyst-protection-in.png",
  INV_AMETHYST_PROTECTION_CLICK: "img/inv-amethyst-protection-click.png",
  REIDITE_SWORDD: "img/day-reidite-sword.png",
  REIDITE_SWORDN: "img/night-reidite-sword.png",
  INV_REIDITE_SWORD_OUT: "img/inv-reidite-sword-out.png",
  INV_REIDITE_SWORD_IN: "img/inv-reidite-sword-in.png",
  INV_REIDITE_SWORD_CLICK: "img/inv-reidite-sword-click.png",
  INV_REIDITE_OUT: "img/inv-reidite-out.png",
  INV_REIDITE_IN: "img/inv-reidite-in.png",
  INV_REIDITE_CLICK: "img/inv-reidite-click.png",
  INV_FLAME_OUT: "img/inv-flame-out.png",
  INV_FLAME_IN: "img/inv-flame-in.png",
  INV_FLAME_CLICK: "img/inv-flame-click.png",
  LAVA_BUBLE0D: "img/day-magma-buble0.png",
  LAVA_BUBLE0N: "img/night-magma-buble0.png",
  LAVA_BUBLE1D: "img/day-magma-buble1.png",
  LAVA_BUBLE1N: "img/night-magma-buble1.png",
  LAVA_BUBLE2D: "img/day-magma-buble2.png",
  LAVA_BUBLE2N: "img/night-magma-buble2.png",
  LAVA_DRAGOND: "img/day-lava-dragon.png",
  LAVA_DRAGONN: "img/night-lava-dragon.png",
  LAVA_FIRE_DRAGOND: "img/day-fire-dragon.png",
  LAVA_FIRE_DRAGONN: "img/night-fire-dragon.png",
  HURT_LAVA_DRAGON: "img/hurt-lava-dragon.png",
  LAVA_WING_LEFTD: "img/day-lava-wing-left.png",
  LAVA_WING_LEFTN: "img/night-lava-wing-left.png",
  LAVA_WING_RIGHTD: "img/day-lava-wing-right.png",
  LAVA_WING_RIGHTN: "img/night-lava-wing-right.png",
  HURT_LAVA_WING_LEFT: "img/hurt-lava-wing-left.png",
  HURT_LAVA_WING_RIGHT: "img/hurt-lava-wing-right.png",
  REIDITE_SPEARD: "img/day-reidite-spear.png",
  REIDITE_SPEARN: "img/night-reidite-spear.png",
  INV_REIDITE_SPEAR_OUT: "img/inv-reidite-spear-out.png",
  INV_REIDITE_SPEAR_IN: "img/inv-reidite-spear-in.png",
  INV_REIDITE_SPEAR_CLICK: "img/inv-reidite-spear-click.png",
  REIDITE_HELMETD: "img/day-reidite-helmet.png",
  REIDITE_HELMETN: "img/night-reidite-helmet.png",
  INV_REIDITE_HELMET_OUT: "img/inv-reidite-helmet-out.png",
  INV_REIDITE_HELMET_IN: "img/inv-reidite-helmet-in.png",
  INV_REIDITE_HELMET_CLICK: "img/inv-reidite-helmet-click.png",
  HAND_REIDITE_PROTECTIOND: "img/day-hand-reidite-protection.png",
  HAND_REIDITE_PROTECTIONN: "img/night-hand-reidite-protection.png",
  REIDITE_PROTECTIOND: "img/day-reidite-protection.png",
  REIDITE_PROTECTIONN: "img/night-reidite-protection.png",
  INV_REIDITE_PROTECTION_OUT: "img/inv-reidite-protection-out.png",
  INV_REIDITE_PROTECTION_IN: "img/inv-reidite-protection-in.png",
  INV_REIDITE_PROTECTION_CLICK: "img/inv-reidite-protection-click.png",
  LAVA_SWORDD: "img/day-lava-dragon-sword.png",
  LAVA_SWORDN: "img/night-lava-dragon-sword.png",
  INV_LAVA_SWORD_OUT: "img/inv-lava-dragon-sword-out.png",
  INV_LAVA_SWORD_IN: "img/inv-lava-dragon-sword-in.png",
  INV_LAVA_SWORD_CLICK: "img/inv-lava-dragon-sword-click.png",
  LAVA_SPEARD: "img/day-lava-spear.png",
  LAVA_SPEARN: "img/night-lava-spear.png",
  INV_LAVA_SPEAR_OUT: "img/inv-lava-spear-out.png",
  INV_LAVA_SPEAR_IN: "img/inv-lava-spear-in.png",
  INV_LAVA_SPEAR_CLICK: "img/inv-lava-spear-click.png",
  LAVA_HELMETD: "img/day-lava-helmet.png",
  LAVA_HELMETN: "img/night-lava-helmet.png",
  INV_LAVA_HELMET_OUT: "img/inv-lava-helmet-out.png",
  INV_LAVA_HELMET_IN: "img/inv-lava-helmet-in.png",
  INV_LAVA_HELMET_CLICK: "img/inv-lava-helmet-click.png",
  WITCHD: "img/day-witch-hat.png",
  WITCHN: "img/night-witch-hat.png",
  INV_WITCH_OUT: "img/inv-witch-hat-out.png",
  INV_WITCH_IN: "img/inv-witch-hat-in.png",
  INV_WITCH_CLICK: "img/inv-witch-hat-click.png",
  NIMBUSD: "img/day-nimbus2000.png",
  NIMBUSN: "img/night-nimbus2000.png",
  INV_NIMBUS_OUT: "img/inv-nimbus2000-out.png",
  INV_NIMBUS_IN: "img/inv-nimbus2000-in.png",
  INV_NIMBUS_CLICK: "img/inv-nimbus2000-click.png",
  ACCESSORY1D: "img/day-accessory1-pacques.png",
  ACCESSORY1N: "img/night-accessory1-pacques.png",
  ACCESSORY2D: "img/day-accessory2-pacques.png",
  ACCESSORY2N: "img/night-accessory2-pacques.png",
  ACCESSORY3D: "img/day-accessory3-pacques.png",
  ACCESSORY3N: "img/night-accessory3-pacques.png",
  ACCESSORY5D: "img/day-accessory5-pacques.png",
  ACCESSORY5N: "img/night-accessory5-pacques.png",
  ACCESSORY6D: "img/day-accessory6-pacques.png",
  ACCESSORY6N: "img/night-accessory6-pacques.png",
  ACCESSORY7D: "img/day-accessory7-pacques.png",
  ACCESSORY7N: "img/night-accessory7-pacques.png",
  ACCESSORY8D: "img/day-accessory8-pacques.png",
  ACCESSORY8N: "img/night-accessory8-pacques.png",
  BAG_EASTERD: "img/day-bag-pacques.png",
  BAG_EASTERN: "img/night-bag-pacques.png",
  CARROTD: "img/day-carrot.png",
  CARROTN: "img/night-carrot.png",
  CARROT_DRIEDD: "img/day-carrot-dried.png",
  CARROT_DRIEDN: "img/night-carrot-dried.png",
  TOMATO_MINID: "img/day-tomato-herb.png",
  TOMATO_MININ: "img/night-tomato-herb.png",
  TOMATO_MINI_DRIEDD: "img/day-tomato-herb-dried.png",
  TOMATO_MINI_DRIEDN: "img/night-tomato-herb-dried.png",
  TOMATOD: "img/day-tomato.png",
  TOMATON: "img/night-tomato.png",
  INV_CARROT_OUT: "img/inv-carrot-out.png",
  INV_CARROT_IN: "img/inv-carrot-in.png",
  INV_CARROT_CLICK: "img/inv-carrot-click.png",
  INV_TOMATO_OUT: "img/inv-tomato-out.png",
  INV_TOMATO_IN: "img/inv-tomato-in.png",
  INV_TOMATO_CLICK: "img/inv-tomato-click.png",
  PLAYER0D: "img/day-player0.png",
  PLAYER0N: "img/night-player0.png",
  PLAYER1D: "img/day-player1.png",
  PLAYER1N: "img/night-player1.png",
  PLAYER2D: "img/day-player2.png",
  PLAYER2N: "img/night-player22.png",
  PLAYER3D: "img/day-player3.png",
  PLAYER3N: "img/night-player33.png",
  PLAYER4D: "img/day-player4.png",
  PLAYER4N: "img/night-player4.png",
  PLAYER5D: "img/day-player5.png",
  PLAYER5N: "img/night-player5.png",
  PLAYER6D: "img/day-player6.png",
  PLAYER6N: "img/night-player6.png",
  PLAYER7D: "img/day-player7.png",
  PLAYER7N: "img/night-player7.png",
  PLAYER8D: "img/day-player8.png",
  PLAYER8N: "img/night-player8.png",
  PLAYER9D: "img/day-player9.png",
  PLAYER9N: "img/night-player9.png",
  PLAYER10D: "img/day-player10.png",
  PLAYER10N: "img/night-player10.png",
  PLAYER11D: "img/day-player11.png",
  PLAYER11N: "img/night-player11.png",
  PLAYER12D: "img/day-player12.png",
  PLAYER12N: "img/night-player12.png",
  PLAYER13D: "img/day-player13.png",
  PLAYER13N: "img/night-player13.png",
  PLAYER14D: "img/day-player14.png",
  PLAYER14N: "img/night-player14.png",
  PLAYER15D: "img/day-player15.png",
  PLAYER15N: "img/night-player15.png",
  PLAYER16D: "img/day-player16.png",
  PLAYER16N: "img/night-player16.png",
  PLAYER17D: "img/day-player17.png",
  PLAYER17N: "img/night-player17.png",
  PLAYER18D: "img/day-player18.png",
  PLAYER18N: "img/night-player18.png",
  PLAYER19D: "img/day-player19.png",
  PLAYER19N: "img/night-player19.png",
  HAND0D: "img/day-hand-player0.png",
  HAND0N: "img/night-hand-player0.png",
  HAND1D: "img/day-hand-player1.png",
  HAND1N: "img/night-hand-player1.png",
  HAND2D: "img/day-hand-player2.png",
  HAND2N: "img/night-hand-player22.png",
  HAND3D: "img/day-hand-player3.png",
  HAND3N: "img/night-hand-player33.png",
  HAND4D: "img/day-hand-player4.png",
  HAND4N: "img/night-hand-player4.png",
  HAND5D: "img/day-hand-player5.png",
  HAND5N: "img/night-hand-player5.png",
  HAND6D: "img/day-hand-player6.png",
  HAND6N: "img/night-hand-player6.png",
  HAND7D: "img/day-hand-player7.png",
  HAND7N: "img/night-hand-player7.png",
  HAND8D: "img/day-hand-player8.png",
  HAND8N: "img/night-hand-player8.png",
  HAND9D: "img/day-hand-player9.png",
  HAND9N: "img/night-hand-player9.png",
  HAND10D: "img/day-hand-player10.png",
  HAND10N: "img/night-hand-player10.png",
  HAND11D: "img/day-hand-player11.png",
  HAND11N: "img/night-hand-player11.png",
  HAND12D: "img/day-hand-player12.png",
  HAND12N: "img/night-hand-player12.png",
  HAND13D: "img/day-hand-player13.png",
  HAND13N: "img/night-hand-player13.png",
  HAND14D: "img/day-hand-player14.png",
  HAND14N: "img/night-hand-player14.png",
  HAND15D: "img/day-hand-player15.png",
  HAND15N: "img/night-hand-player15.png",
  HAND16D: "img/day-hand-player16.png",
  HAND16N: "img/night-hand-player16.png",
  HAND17D: "img/day-hand-player17.png",
  HAND17N: "img/night-hand-player17.png",
  HAND18D: "img/day-hand-player18.png",
  HAND18N: "img/night-hand-player18.png",
  HAND19D: "img/day-hand-player19.png",
  HAND19N: "img/night-hand-player19.png",
  ACCESSORY4D: "img/day-accessory4.png",
  ACCESSORY4N: "img/night-accessory4.png",
  ACCESSORY9D: "img/day-accessory9.png",
  ACCESSORY9N: "img/night-accessory9.png",
  ACCESSORY10D: "img/day-accessory10.png",
  ACCESSORY10N: "img/night-accessory10.png",
  ACCESSORY11D: "img/day-accessory11.png",
  ACCESSORY11N: "img/night-accessory11.png",
  ACCESSORY12D: "img/day-accessory12.png",
  ACCESSORY12N: "img/night-accessory12.png",
  BAGD: "img/day-bag.png",
  BAGN: "img/night-bag.png",
  INV_BAG_OUT: "img/inv-bag-out.png",
  INV_BAG_IN: "img/inv-bag-in.png",
  INV_BAG_CLICK: "img/inv-bag-click.png",
  PITCHFORKD: "img/day-pitchfork.png",
  PITCHFORKN: "img/night-pitchfork.png",
  INV_PITCHFORK_OUT: "img/inv-pitchfork-out.png",
  INV_PITCHFORK_IN: "img/inv-pitchfork-in.png",
  INV_PITCHFORK_CLICK: "img/inv-pitchfork-click.png",
  INV_WOOD_DOOR_SPIKE_OUT: "img/inv-wood-spike-door-out.png",
  INV_WOOD_DOOR_SPIKE_IN: "img/inv-wood-spike-door-in.png",
  INV_WOOD_DOOR_SPIKE_CLICK: "img/inv-wood-spike-door-click.png",
  INV_STONE_DOOR_SPIKE_OUT: "img/inv-stone-spike-door-out.png",
  INV_STONE_DOOR_SPIKE_IN: "img/inv-stone-spike-door-in.png",
  INV_STONE_DOOR_SPIKE_CLICK: "img/inv-stone-spike-door-click.png",
  INV_GOLD_DOOR_SPIKE_OUT: "img/inv-gold-spike-door-out.png",
  INV_GOLD_DOOR_SPIKE_IN: "img/inv-gold-spike-door-in.png",
  INV_GOLD_DOOR_SPIKE_CLICK: "img/inv-gold-spike-door-click.png",
  INV_DIAMOND_DOOR_SPIKE_OUT: "img/inv-diamond-spike-door-out.png",
  INV_DIAMOND_DOOR_SPIKE_IN: "img/inv-diamond-spike-door-in.png",
  INV_DIAMOND_DOOR_SPIKE_CLICK: "img/inv-diamond-spike-door-click.png",
  INV_AMETHYST_DOOR_SPIKE_OUT: "img/inv-amethyst-spike-door-out.png",
  INV_AMETHYST_DOOR_SPIKE_IN: "img/inv-amethyst-spike-door-in.png",
  INV_AMETHYST_DOOR_SPIKE_CLICK: "img/inv-amethyst-spike-door-click.png",
  WOOD_DOOR_SPIKED: "img/day-wood-spike-door.png",
  WOOD_DOOR_SPIKEN: "img/night-wood-spike-door.png",
  STONE_DOOR_SPIKED: "img/day-stone-spike-door.png",
  STONE_DOOR_SPIKEN: "img/night-stone-spike-door.png",
  GOLD_DOOR_SPIKED: "img/day-gold-spike-door.png",
  GOLD_DOOR_SPIKEN: "img/night-gold-spike-door.png",
  DIAMOND_DOOR_SPIKED: "img/day-diamond-spike-door.png",
  DIAMOND_DOOR_SPIKEN: "img/night-diamond-spike-door.png",
  AMETHYST_DOOR_SPIKED: "img/day-amethyst-spike-door.png",
  AMETHYST_DOOR_SPIKEN: "img/night-amethyst-spike-door.png",
  INV_REIDITE_DOOR_SPIKE_OUT: "img/inv-reidite-spike-door-out.png",
  INV_REIDITE_DOOR_SPIKE_IN: "img/inv-reidite-spike-door-in.png",
  INV_REIDITE_DOOR_SPIKE_CLICK: "img/inv-reidite-spike-door-click.png",
  INV_REIDITE_DOOR_OUT: "img/inv-reidite-door-out.png",
  INV_REIDITE_DOOR_IN: "img/inv-reidite-door-in.png",
  INV_REIDITE_DOOR_CLICK: "img/inv-reidite-door-click.png",
  INV_REIDITE_SPIKE_OUT: "img/inv-reidite-spike-out.png",
  INV_REIDITE_SPIKE_IN: "img/inv-reidite-spike-in.png",
  INV_REIDITE_SPIKE_CLICK: "img/inv-reidite-spike-click.png",
  INV_REIDITE_WALL_OUT: "img/inv-reidite-wall-out.png",
  INV_REIDITE_WALL_IN: "img/inv-reidite-wall-in.png",
  INV_REIDITE_WALL_CLICK: "img/inv-reidite-wall-click.png",
  REIDITE_WALLD: "img/day-reidite-wall.png",
  REIDITE_WALLN: "img/night-reidite-wall.png",
  REIDITE_DOORD: "img/day-reidite-door.png",
  REIDITE_DOORN: "img/night-reidite-door.png",
  REIDITE_SPIKED: "img/day-reidite-spike.png",
  REIDITE_SPIKEN: "img/night-reidite-spike.png",
  REIDITE_DOOR_SPIKED: "img/day-reidite-spike-door.png",
  REIDITE_DOOR_SPIKEN: "img/night-reidite-spike-door.png",
  INV_PICK_REIDITE_OUT: "img/inv-reidite-pickaxe-out.png",
  INV_PICK_REIDITE_IN: "img/inv-reidite-pickaxe-in.png",
  INV_PICK_REIDITE_CLICK: "img/inv-reidite-pickaxe-click.png",
  PICK_REIDITED: "img/day-reidite-pickaxe.png",
  PICK_REIDITEN: "img/night-reidite-pickaxe.png",
  INV_HAMMER_REIDITE_OUT: "img/inv-reidite-hammer-out.png",
  INV_HAMMER_REIDITE_IN: "img/inv-reidite-hammer-in.png",
  INV_HAMMER_REIDITE_CLICK: "img/inv-reidite-hammer-click.png",
  HAMMER_REIDITED: "img/day-reidite-hammer.png",
  HAMMER_REIDITEN: "img/night-reidite-hammer.png",
  WATERMELOND: "img/day-watermelon1.png",
  WATERMELONN: "img/night-watermelon1.png",
  DRIED_WATERMELOND: "img/day-watermelon-dried1.png",
  DRIED_WATERMELONN: "img/night-watermelon-dried1.png",
  INV_WATERMELON_OUT: "img/inv-watermelon-out.png",
  INV_WATERMELON_IN: "img/inv-watermelon-in.png",
  INV_WATERMELON_CLICK: "img/inv-watermelon-click.png",
  BOATD: "img/day-boat.png",
  BOATN: "img/night-boat.png",
  BOAT_WAVED: "img/day-boat-wave.png",
  BOAT_WAVEN: "img/night-boat-wave.png",
  INV_BOAT_OUT: "img/inv-boat-out.png",
  INV_BOAT_IN: "img/inv-boat-in.png",
  INV_BOAT_CLICK: "img/inv-boat-click.png",
  PLANED: "img/day-plane.png",
  PLANEN: "img/night-plane.png",
  INV_PLANE_OUT: "img/inv-plane-out.png",
  INV_PLANE_IN: "img/inv-plane-in.png",
  INV_PLANE_CLICK: "img/inv-plane-click.png",
  SLEDD: "img/day-sled.png",
  SLEDN: "img/night-sled.png",
  SLED_WAVED: "img/day-sled-wave.png",
  SLED_WAVEN: "img/night-sled-wave.png",
  INV_SLED_OUT: "img/inv-sled-out.png",
  INV_SLED_IN: "img/inv-sled-in.png",
  INV_SLED_CLICK: "img/inv-sled-click.png",
  PIRATE_HATD: "img/day-pirate-hat.png",
  PIRATE_HATN: "img/night-pirate-hat.png",
  INV_PIRATE_HAT_OUT: "img/inv-pirate-hat-out.png",
  INV_PIRATE_HAT_IN: "img/inv-pirate-hat-in.png",
  INV_PIRATE_HAT_CLICK: "img/inv-pirate-hat-click.png",
  PENGUIND: "img/day-penguin.png",
  PENGUINN: "img/night-penguin.png",
  HURT_PENGUIN: "img/hurt-penguin.png",
  INV_PENGUIN_FEATHER: "img/inv-penguin-feather-click.png",
  INV_HAWK_FEATHER: "img/inv-hawk-feather-click.png",
  BOARD: "img/day-boar1.png",
  BOAR_TAMEDD: "img/day-boar1-tamed.png",
  BOAR_ANGRYD: "img/day-boar1-angry.png",
  BOARN: "img/night-boar1.png",
  BOAR_TAMEDN: "img/night-boar1-tamed.png",
  BOAR_ANGRYN: "img/night-boar1-angry.png",
  INV_MOUNT_BOAR_OUT: "img/inv-mount-boar-out.png",
  INV_MOUNT_BOAR_IN: "img/inv-mount-boar-in.png",
  INV_MOUNT_BOAR_CLICK: "img/inv-mount-boar-click.png",
  HURT_BOAR: "img/day-hurt-boar1.png",
  BOAR_STEP: "img/boar1-step.png",
  SADDLED: "img/day-saddle1.png",
  SADDLEN: "img/night-saddle1.png",
  INV_SADDLE_OUT: "img/inv-saddle-out.png",
  INV_SADDLE_IN: "img/inv-saddle-in.png",
  INV_SADDLE_CLICK: "img/inv-saddle-click.png",
  WAND1D: "img/day-magic-wand0.png",
  WAND1N: "img/night-magic-wand0.png",
  LIGHT_WAND1D: "img/day-light-wand1.png",
  LIGHT_WAND1N: "img/night-light-wand1.png",
  INV_WAND1_OUT: "img/inv-magic-wand0-out.png",
  INV_WAND1_IN: "img/inv-magic-wand0-in.png",
  INV_WAND1_CLICK: "img/inv-magic-wand0-click.png",
  WAND2D: "img/day-magic-wand1.png",
  WAND2N: "img/night-magic-wand1.png",
  LIGHT_WAND0D: "img/day-light-wand0.png",
  LIGHT_WAND0N: "img/night-light-wand0.png",
  INV_WAND2_OUT: "img/inv-magic-wand1-out.png",
  INV_WAND2_IN: "img/inv-magic-wand1-in.png",
  INV_WAND2_CLICK: "img/inv-magic-wand1-click.png",
  FIREFLYD: "img/day-firefly.png",
  FIREFLYN: "img/night-firefly.png",
  HURT_FIREFLY: "img/hurt-firefly.png",
  INV_FIREFLY_OUT: "img/inv-firefly-out.png",
  INV_FIREFLY_IN: "img/inv-firefly-in.png",
  INV_FIREFLY_CLICK: "img/inv-firefly-click.png",
  BABY_DRAGOND: "img/day-baby-dragon.png",
  BABY_DRAGONN: "img/night-baby-dragon.png",
  BABY_DRAGON_ATTACKD: "img/day-baby-dragon-angry.png",
  BABY_DRAGON_ATTACKN: "img/night-baby-dragon-angry.png",
  BABY_DRAGON_TAMEDD: "img/day-baby-dragon-tamed.png",
  BABY_DRAGON_TAMEDN: "img/night-baby-dragon-tamed.png",
  BABY_DRAGON_WING_LEFT_ATTACKD: "img/day-wing-dragon-left-angry.png",
  BABY_DRAGON_WING_LEFT_ATTACKN: "img/night-dragon-wing-left-angry.png",
  BABY_DRAGON_WING_RIGHT_ATTACKD: "img/day-wing-dragon-right-angry.png",
  BABY_DRAGON_WING_RIGHT_ATTACKN: "img/night-dragon-wing-right-angry.png",
  BABY_DRAGON_WING_LEFT_TAMEDD: "img/day-wing-dragon-left-tamed.png",
  BABY_DRAGON_WING_LEFT_TAMEDN: "img/night-dragon-wing-left-tamed.png",
  BABY_DRAGON_WING_RIGHT_TAMEDD: "img/day-wing-dragon-right-tamed.png",
  BABY_DRAGON_WING_RIGHT_TAMEDN: "img/night-wing-dragon-right-tamed.png",
  BABY_DRAGON_WING_LEFTD: "img/day-wing-dragon-left.png",
  BABY_DRAGON_WING_LEFTN: "img/night-dragon-wing-left.png",
  BABY_DRAGON_WING_RIGHTD: "img/day-wing-dragon-right.png",
  BABY_DRAGON_WING_RIGHTN: "img/night-wing-dragon-right.png",
  HURT_BABY_DRAGON: "img/hurt-baby-dragon.png",
  HURT_BABY_DRAGON_WING_LEFT: "img/hurt-baby-dragon-wing-left.png",
  HURT_BABY_DRAGON_WING_RIGHT: "img/hurt-baby-dragon-wing-right.png",
  INV_BABY_DRAGON_OUT: "img/inv-baby-dragon-out.png",
  INV_BABY_DRAGON_IN: "img/inv-baby-dragon-in.png",
  INV_BABY_DRAGON_CLICK: "img/inv-baby-dragon-click.png",
  BABY_LAVAD: "img/day-baby-lava.png",
  BABY_LAVAN: "img/night-baby-lava.png",
  BABY_LAVA_ATTACKD: "img/day-baby-lava-angry.png",
  BABY_LAVA_ATTACKN: "img/night-baby-lava-angry.png",
  BABY_LAVA_TAMEDD: "img/day-baby-lava-tamed.png",
  BABY_LAVA_TAMEDN: "img/night-baby-lava-tamed.png",
  BABY_LAVA_WING_LEFT_ATTACKD: "img/day-wing-lava-left-angry.png",
  BABY_LAVA_WING_LEFT_ATTACKN: "img/night-wing-lava-left-angry.png",
  BABY_LAVA_WING_RIGHT_ATTACKD: "img/day-wing-lava-right-angry.png",
  BABY_LAVA_WING_RIGHT_ATTACKN: "img/night-wing-lava-right-angry.png",
  BABY_LAVA_WING_LEFT_TAMEDD: "img/day-wing-lava-left-tamed.png",
  BABY_LAVA_WING_LEFT_TAMEDN: "img/night-wing-lava-left-tamed.png",
  BABY_LAVA_WING_RIGHT_TAMEDD: "img/day-wing-lava-right-tamed.png",
  BABY_LAVA_WING_RIGHT_TAMEDN: "img/night-wing-lava-right-tamed.png",
  BABY_LAVA_WING_LEFTD: "img/day-wing-lava-left.png",
  BABY_LAVA_WING_LEFTN: "img/night-wing-lava-left.png",
  BABY_LAVA_WING_RIGHTD: "img/day-wing-lava-right.png",
  BABY_LAVA_WING_RIGHTN: "img/night-wing-lava-right.png",
  HURT_BABY_LAVA: "img/hurt-baby-lava.png",
  HURT_BABY_LAVA_WING_LEFT: "img/hurt-baby-lava-wing-left.png",
  HURT_BABY_LAVA_WING_RIGHT: "img/hurt-baby-lava-wing-right.png",
  INV_BABY_LAVA_OUT: "img/inv-baby-lava-out.png",
  INV_BABY_LAVA_IN: "img/inv-baby-lava-in.png",
  INV_BABY_LAVA_CLICK: "img/inv-baby-lava-click.png",
  HAWKD: "img/day-falcon.png",
  HAWKN: "img/night-falcon.png",
  HAWK_ATTACKD: "img/day-falcon-angry.png",
  HAWK_ATTACKN: "img/night-falcon-angry.png",
  HAWK_GROUNDD: "img/day-falcon-ground.png",
  HAWK_GROUNDN: "img/night-falcon-ground.png",
  HAWK_GROUND_ATTACKD: "img/day-falcon-ground-angry.png",
  HAWK_GROUND_ATTACKN: "img/night-falcon-ground-angry.png",
  HAWK_WING_LEFTD: "img/day-falcon-wings-left.png",
  HAWK_WING_LEFTN: "img/night-falcon-wings-left.png",
  HAWK_WING_RIGHTD: "img/day-falcon-wings-right.png",
  HAWK_WING_RIGHTN: "img/night-falcon-wings-right.png",
  HAWK_WING_LEFT_ATTACKD: "img/day-falcon-angry-wings-left.png",
  HAWK_WING_LEFT_ATTACKN: "img/night-falcon-angry-wings-left.png",
  HAWK_WING_RIGHT_ATTACKD: "img/day-falcon-angry-wings-right.png",
  HAWK_WING_RIGHT_ATTACKN: "img/night-falcon-angry-wings-right.png",
  HAWK_WING_LEFT_TAMEDD: "img/day-falcon-wings-left-tamed.png",
  HAWK_WING_LEFT_TAMEDN: "img/night-falcon-wings-left-tamed.png",
  HAWK_WING_RIGHT_TAMEDD: "img/day-falcon-wings-right-tamed.png",
  HAWK_WING_RIGHT_TAMEDN: "img/night-falcon-wings-right-tamed.png",
  HAWK_TAMEDD: "img/day-falcon-tamed.png",
  HAWK_TAMEDN: "img/night-falcon-tamed.png",
  HURT_HAWK_GROUND: "img/hurt-falcon-ground.png",
  HURT_HAWK: "img/hurt-falcon.png",
  HURT_HAWK_WING_LEFT: "img/hurt-falcon-wings-left.png",
  HURT_HAWK_WING_RIGHT: "img/hurt-falcon-wings-right.png",
  INV_HAWK_OUT: "img/inv-falcon-out.png",
  INV_HAWK_IN: "img/inv-falcon-in.png",
  INV_HAWK_CLICK: "img/inv-falcon-click.png",
  CRAB_BOSSD: "img/day-crab-boss.png",
  CRAB_BOSSN: "img/night-crab-boss.png",
  CRAB_BOSS_ATTACKD: "img/day-crab-boss-angry.png",
  CRAB_BOSS_ATTACKN: "img/night-crab-boss-angry.png",
  CRAB_BOSS_TAMEDD: "img/day-crab-boss-tamed.png",
  CRAB_BOSS_TAMEDN: "img/night-crab-boss-tamed.png",
  CRAB_BOSS_CLAW_LEFT_ATTACKD: "img/day-crab-boss-claw-left-attack.png",
  CRAB_BOSS_CLAW_LEFT_ATTACKN: "img/night-crab-boss-claw-left-attack.png",
  CRAB_BOSS_CLAW_RIGHT_ATTACKD: "img/day-crab-boss-claw-right-attack.png",
  CRAB_BOSS_CLAW_RIGHT_ATTACKN: "img/night-crab-boss-claw-right-attack.png",
  CRAB_BOSS_CLAW_LEFT_TAMEDD: "img/day-crab-boss-claw-left-tamed.png",
  CRAB_BOSS_CLAW_LEFT_TAMEDN: "img/night-crab-boss-claw-left-tamed.png",
  CRAB_BOSS_CLAW_RIGHT_TAMEDD: "img/day-crab-boss-claw-right-tamed.png",
  CRAB_BOSS_CLAW_RIGHT_TAMEDN: "img/night-crab-boss-claw-right-tamed.png",
  CRAB_BOSS_CLAW_LEFTD: "img/day-crab-boss-claw-left.png",
  CRAB_BOSS_CLAW_LEFTN: "img/night-crab-boss-claw-left.png",
  CRAB_BOSS_CLAW_RIGHTD: "img/day-crab-boss-claw-right.png",
  CRAB_BOSS_CLAW_RIGHTN: "img/night-crab-boss-claw-right.png",
  HURT_CRAB_BOSS: "img/hurt-crab-boss.png",
  HURT_CRAB_BOSS_CLAW_LEFT: "img/hurt-crab-boss-claw-left.png",
  HURT_CRAB_BOSS_CLAW_RIGHT: "img/hurt-crab-boss-claw-right.png",
  HEAL_CRAB_BOSS: "img/heal-crab-boss.png",
  HEAL_CRAB_BOSS_CLAW_LEFT: "img/heal-crab-boss-claw-left.png",
  HEAL_CRAB_BOSS_CLAW_RIGHT: "img/heal-crab-boss-claw-right.png",
  CRAB_STEP: "img/crab-step.png",
  INV_CRAB_BOSS_OUT: "img/inv-crab-boss-out.png",
  INV_CRAB_BOSS_IN: "img/inv-crab-boss-in.png",
  INV_CRAB_BOSS_CLICK: "img/inv-crab-boss-click.png",
  CACTUSD: "img/day-cactus10.png",
  CACTUSN: "img/night-cactus10.png",
  INV_CACTUS_OUT: "img/inv-cactus-out.png",
  INV_CACTUS_IN: "img/inv-cactus-in.png",
  INV_CACTUS_CLICK: "img/inv-cactus-click.png",
  SCORPIOND: "img/day-scorpion.png",
  SCORPIONN: "img/night-scorpion.png",
  SCORPION_HAND_LEFTD: "img/day-scorpion-hand-left.png",
  SCORPION_HAND_LEFTN: "img/night-scorpion-hand-left.png",
  SCORPION_HAND_RIGHTD: "img/day-scorpion-hand-right.png",
  SCORPION_HAND_RIGHTN: "img/night-scorpion-hand-right.png",
  HURT_SCORPION: "img/hurt-scorpion.png",
  HURT_SCORPION_HAND_LEFT: "img/hurt-scorpion-hand-left.png",
  HURT_SCORPION_HAND_RIGHT: "img/hurt-scorpion-hand-right.png",
  VULTURED: "img/day-vulture.png",
  VULTUREN: "img/night-vulture.png",
  VULTURE_ATTACKD: "img/day-vulture-angry.png",
  VULTURE_ATTACKN: "img/night-vulture-angry.png",
  VULTURE_GROUNDD: "img/day-vulture-ground.png",
  VULTURE_GROUNDN: "img/night-vulture-ground.png",
  VULTURE_GROUND_ATTACKD: "img/day-vulture-ground-angry.png",
  VULTURE_GROUND_ATTACKN: "img/night-vulture-ground-angry.png",
  VULTURE_WING_LEFTD: "img/day-vulture-wings-left.png",
  VULTURE_WING_LEFTN: "img/night-vulture-wings-left.png",
  VULTURE_WING_RIGHTD: "img/day-vulture-wings-right.png",
  VULTURE_WING_RIGHTN: "img/night-vulture-wings-right.png",
  VULTURE_WING_LEFT_ATTACKD: "img/day-vulture-angry-wings-left.png",
  VULTURE_WING_LEFT_ATTACKN: "img/night-vulture-angry-wings-left.png",
  VULTURE_WING_RIGHT_ATTACKD: "img/day-vulture-angry-wings-right.png",
  VULTURE_WING_RIGHT_ATTACKN: "img/night-vulture-angry-wings-right.png",
  VULTURE_WING_LEFT_TAMEDD: "img/day-vulture-wings-left-tamed.png",
  VULTURE_WING_LEFT_TAMEDN: "img/night-vulture-wings-left-tamed.png",
  VULTURE_WING_RIGHT_TAMEDD: "img/day-vulture-wings-right-tamed.png",
  VULTURE_WING_RIGHT_TAMEDN: "img/night-vulture-wings-right-tamed.png",
  VULTURE_TAMEDD: "img/day-vulture-tamed.png",
  VULTURE_TAMEDN: "img/night-vulture-tamed.png",
  HURT_VULTURE_GROUND: "img/hurt-vulture-ground.png",
  HURT_VULTURE: "img/hurt-vulture.png",
  HURT_VULTURE_WING_LEFT: "img/hurt-vulture-wings-left.png",
  HURT_VULTURE_WING_RIGHT: "img/hurt-vulture-wings-right.png",
  ALOE_VERAD: "img/day-aloe-vera.png",
  ALOE_VERAN: "img/night-aloe-vera.png",
  INV_ALOE_VERA_OUT: "img/inv-aloe-vera-out.png",
  INV_ALOE_VERA_IN: "img/inv-aloe-vera-in.png",
  INV_ALOE_VERA_CLICK: "img/inv-aloe-vera-click.png",
  ALOE_VERA_GROWND: "img/day-aloe-vera-grown.png",
  ALOE_VERA_GROWNN: "img/night-aloe-vera-grown.png",
  ALOE_VERA_DRIEDD: "img/day-aloe-vera-dried.png",
  ALOE_VERAN_DRIEDN: "img/night-aloe-vera-dried.png",
  TURBAN1D: "img/day-turban1.png",
  TURBAN1N: "img/night-turban1.png",
  TURBAN2D: "img/day-turban2.png",
  TURBAN2N: "img/night-turban2.png",
  INV_TURBAN2_OUT: "img/inv-turban2-out.png",
  INV_TURBAN2_IN: "img/inv-turban2-in.png",
  INV_TURBAN2_CLICK: "img/inv-turban2-click.png",
  INV_TURBAN1_OUT: "img/inv-turban1-out.png",
  INV_TURBAN1_IN: "img/inv-turban1-in.png",
  INV_TURBAN1_CLICK: "img/inv-turban1-click.png",
  PITCHFORK2D: "img/day-pitchfork2.png",
  PITCHFORK2N: "img/night-pitchfork2.png",
  INV_PITCHFORK2_OUT: "img/inv-pitchfork2-out.png",
  INV_PITCHFORK2_IN: "img/inv-pitchfork2-in.png",
  INV_PITCHFORK2_CLICK: "img/inv-pitchfork2-click.png",
  INV_PITCHFORK_PART_CLICK: "img/inv-gold-fork-click.png",
  INV_PILOT_GLASSES_CLICK: "img/inv-pilot-glasses-click.png",
  PILOT_HELMETD: "img/day-pilot-helmet.png",
  PILOT_HELMETN: "img/night-pilot-helmet.png",
  INV_PILOT_HELMET_OUT: "img/inv-pilot-helmet-out.png",
  INV_PILOT_HELMET_IN: "img/inv-pilot-helmet-in.png",
  INV_PILOT_HELMET_CLICK: "img/inv-pilot-helmet-click.png",
  SAND_WORM0D: "img/day-sandworm0.png",
  SAND_WORM1D: "img/day-sandworm1.png",
  SAND_WORM2D: "img/day-sandworm2.png",
  SAND_WORM0N: "img/night-sandworm0.png",
  SAND_WORM1N: "img/night-sandworm1.png",
  SAND_WORM2N: "img/night-sandworm2.png",
  HURT_SAND_WORM0: "img/hurt-sandworm0.png",
  HURT_SAND_WORM1: "img/hurt-sandworm1.png",
  HURT_SAND_WORM2: "img/hurt-sandworm2.png",
  INV_VULTURE_FEATHER: "img/inv-vulture-feather-click.png",
  EMERALD0D: "img/day-emerald0.png",
  EMERALD0N: "img/night-emerald0.png",
  EMERALD1D: "img/day-emerald1.png",
  EMERALD1N: "img/night-emerald1.png",
  EMERALD2D: "img/day-emerald2.png",
  EMERALD2N: "img/night-emerald2.png",
  INV_EMERALD: "img/inv-emerald-click.png",
  INV_SANDWORM_JUICE_OUT: "img/inv-sworm-juice-out.png",
  INV_SANDWORM_JUICE_IN: "img/inv-sworm-juice-in.png",
  INV_SANDWORM_JUICE_CLICK: "img/inv-sworm-juice-click.png",
  EMERALD_MACHINED: "img/day-point-machine.png",
  EMERALD_MACHINEN: "img/night-point-machine.png",
  EMERALD_MACHINE_HOLED: "img/day-point-machine-hole.png",
  EMERALD_MACHINE_HOLEN: "img/night-point-machine-hole.png",
  EMERALD_MACHINE_GROUNDD: "img/day-point-machine-ground.png",
  EMERALD_MACHINE_GROUNDN: "img/night-point-machine-ground.png",
  EMERALD_MACHINE_ROTATED: "img/day-point-machine-rotate.png",
  EMERALD_MACHINE_ROTATEN: "img/night-point-machine-rotate.png",
  INV_EMERALD_MACHINE_OUT: "img/inv-point-machine-out.png",
  INV_EMERALD_MACHINE_IN: "img/inv-point-machine-in.png",
  INV_EMERALD_MACHINE_CLICK: "img/inv-point-machine-click.png",
  EXTRACTOR_MACHINE0_STONED: "img/day-extractor-machine0-stone.png",
  EXTRACTOR_MACHINE0_STONEN: "img/night-extractor-machine0-stone.png",
  EXTRACTOR_MACHINE_STONED: "img/day-extractor-machine-stone.png",
  EXTRACTOR_MACHINE_STONEN: "img/night-extractor-machine-stone.png",
  INV_EXTRACTOR_MACHINE_STONE_OUT: "img/inv-extractor-machine-stone-out.png",
  INV_EXTRACTOR_MACHINE_STONE_IN: "img/inv-extractor-machine-stone-in.png",
  INV_EXTRACTOR_MACHINE_STONE_CLICK:
    "img/inv-extractor-machine-stone-click.png",
  EXTRACTOR_MACHINE0_GOLDD: "img/day-extractor-machine0-gold.png",
  EXTRACTOR_MACHINE0_GOLDN: "img/night-extractor-machine0-gold.png",
  EXTRACTOR_MACHINE_GOLDD: "img/day-extractor-machine-gold.png",
  EXTRACTOR_MACHINE_GOLDN: "img/night-extractor-machine-gold.png",
  INV_EXTRACTOR_MACHINE_GOLD_OUT: "img/inv-extractor-machine-gold-out.png",
  INV_EXTRACTOR_MACHINE_GOLD_IN: "img/inv-extractor-machine-gold-in.png",
  INV_EXTRACTOR_MACHINE_GOLD_CLICK: "img/inv-extractor-machine-gold-click.png",
  EXTRACTOR_MACHINE0_DIAMONDD: "img/day-extractor-machine0-diamond.png",
  EXTRACTOR_MACHINE0_DIAMONDN: "img/night-extractor-machine0-diamond.png",
  EXTRACTOR_MACHINE_DIAMONDD: "img/day-extractor-machine-diamond.png",
  EXTRACTOR_MACHINE_DIAMONDN: "img/night-extractor-machine-diamond.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_OUT:
    "img/inv-extractor-machine-diamond-out.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_IN: "img/inv-extractor-machine-diamond-in.png",
  INV_EXTRACTOR_MACHINE_DIAMOND_CLICK:
    "img/inv-extractor-machine-diamond-click.png",
  EXTRACTOR_MACHINE0_AMETHYSTD: "img/day-extractor-machine0-amethyst.png",
  EXTRACTOR_MACHINE0_AMETHYSTN: "img/night-extractor-machine0-amethyst.png",
  EXTRACTOR_MACHINE_AMETHYSTD: "img/day-extractor-machine-amethyst.png",
  EXTRACTOR_MACHINE_AMETHYSTN: "img/night-extractor-machine-amethyst.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_OUT:
    "img/inv-extractor-machine-amethyst-out.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_IN:
    "img/inv-extractor-machine-amethyst-in.png",
  INV_EXTRACTOR_MACHINE_AMETHYST_CLICK:
    "img/inv-extractor-machine-amethyst-click.png",
  EXTRACTOR_MACHINE0_REIDITED: "img/day-extractor-machine0-reidite.png",
  EXTRACTOR_MACHINE0_REIDITEN: "img/night-extractor-machine0-reidite.png",
  EXTRACTOR_MACHINE_REIDITED: "img/day-extractor-machine-reidite.png",
  EXTRACTOR_MACHINE_REIDITEN: "img/night-extractor-machine-reidite.png",
  INV_EXTRACTOR_MACHINE_REIDITE_OUT:
    "img/inv-extractor-machine-reidite-out.png",
  INV_EXTRACTOR_MACHINE_REIDITE_IN: "img/inv-extractor-machine-reidite-in.png",
  INV_EXTRACTOR_MACHINE_REIDITE_CLICK:
    "img/inv-extractor-machine-reidite-click.png",
  EXTRACTOR_CASES: "img/extractor-cases.png",
  HEND: "img/day-golden-hen.png",
  HENN: "img/night-golden-hen.png",
  CHICKEND: "img/day-golden-chicken.png",
  CHICKENN: "img/night-golden-chicken.png",
  HURT_GOLDEN_HEN: "img/hurt-golden-hen.png",
  HURT_GOLDEN_CHICKEN: "img/hurt-golden-chicken.png",
  LOGO_INTERFACE: "img/logo-interface.png",
  FOREST_MODE_HOVER: "img/forest-mode-hover.png",
  NORMAL_MODE_HOVER: "img/normal-mode-hover.png",
  VAMPIRE_MODE_HOVER: "img/vampire-mode-hover.png",
  ZOMBIE_MODE_HOVER: "img/zombie-mode-hover.png",
  MODE_COMMUNITY_HOVER: "img/community-mode-hover2.png",
  MODE_EXPERIMENTAL_HOVER: "img/experimental-mode-hover.png",
  ZOMBIE_MODE_OUT: "img/zombie-mode-out.png",
  ZOMBIE_MODE_IN: "img/zombie-mode-in.png",
  ZOMBIE_MODE_CLICK: "img/zombie-mode-click.png",
  VAMPIRE_MODE_OUT: "img/vampire-mode-out.png",
  VAMPIRE_MODE_IN: "img/vampire-mode-in.png",
  VAMPIRE_MODE_CLICK: "img/vampire-mode-click.png",
  NORMAL_MODE_OUT: "img/normal-mode-out.png",
  NORMAL_MODE_IN: "img/normal-mode-in.png",
  NORMAL_MODE_CLICK: "img/normal-mode-click.png",
  FOREST_MODE_OUT: "img/forest-mode-out.png",
  FOREST_MODE_IN: "img/forest-mode-in.png",
  FOREST_MODE_CLICK: "img/forest-mode-click.png",
  MODE_COMMUNITY_OUT: "img/community-mode-out.png",
  MODE_COMMUNITY_IN: "img/community-mode-in.png",
  MODE_COMMUNITY_CLICK: "img/community-mode-click.png",
  MODE_EXPERIMENTAL_OUT: "img/experimental-modes-out.png",
  MODE_EXPERIMENTAL_IN: "img/experimental-modes-in.png",
  MODE_EXPERIMENTAL_CLICK: "img/experimental-modes-click.png",
  YOUTUBE_BUTTON_OUT: "img/youtube-button-out.png",
  YOUTUBE_BUTTON_IN: "img/youtube-button-in.png",
  YOUTUBE_BUTTON_CLICK: "img/youtube-button-click.png",
  WIKI_BUTTON_OUT: "img/wiki-button-out.png",
  WIKI_BUTTON_IN: "img/wiki-button-in.png",
  WIKI_BUTTON_CLICK: "img/wiki-button-click.png",
  TWITTER_BUTTON_OUT: "img/twitter-button-out.png",
  TWITTER_BUTTON_IN: "img/twitter-button-in.png",
  TWITTER_BUTTON_CLICK: "img/twitter-button-click.png",
  FACEBOOK_BUTTON_OUT: "img/facebook-button-out.png",
  FACEBOOK_BUTTON_IN: "img/facebook-button-in.png",
  FACEBOOK_BUTTON_CLICK: "img/facebook-button-click.png",
  REDDIT_BUTTON_OUT: "img/reddit-button-out.png",
  REDDIT_BUTTON_IN: "img/reddit-button-in.png",
  REDDIT_BUTTON_CLICK: "img/reddit-button-click.png",
  DISCORD_BUTTON_OUT: "img/discord-button-out.png",
  DISCORD_BUTTON_IN: "img/discord-button-in.png",
  DISCORD_BUTTON_CLICK: "img/discord-button-click.png",
  MERCH_BUTTON_OUT: "img/merch-button-out.png",
  MERCH_BUTTON_IN: "img/merch-button-in.png",
  MERCH_BUTTON_CLICK: "img/merch-button-click.png",
  TERMINAL_BUTTON_OUT: "img/terminal-button-out.png",
  TERMINAL_BUTTON_IN: "img/terminal-button-in.png",
  TERMINAL_BUTTON_CLICK: "img/terminal-button-click.png",
  RESTART_OUT: "img/restart-out.png",
  RESTART_IN: "img/restart-in.png",
  RESTART_CLICK: "img/restart-click.png",
  GUIDE_OUT: "img/guide-out.png",
  GUIDE_IN: "img/guide-in.png",
  GUIDE_CLICK: "img/guide-click.png",
  COPY_PASTE_OUT: "img/copy-paste-out.png",
  COPY_PASTE_IN: "img/copy-paste-in.png",
  COPY_PASTE_CLICK: "img/copy-paste-click.png",
  LINKS_BG: "img/link-buttons-bg.png",
  CHANGELOG_BOX: "img/changelog-box2.png",
  CHANGELOG_BUTTON_OUT: "img/changelog_29.png",
  DEVASTIO_BUTTON_OUT: "img/banner-devast.png",
  PROFILE_BUTTON_OUT: "img/profile-button-out.png",
  PROFILE_BUTTON_IN: "img/profile-button-in.png",
  PROFILE_BUTTON_CLICK: "img/profile-button-click.png",
  LOGIN_BUTTON_OUT: "img/login-button-out.png",
  LOGIN_BUTTON_IN: "img/login-button-in.png",
  LOGIN_BUTTON_CLICK: "img/login-button-click.png",
  LOGIN_GOOGLE_OUT: "img/login-google-out.png",
  LOGIN_GOOGLE_IN: "img/login-google-in.png",
  LOGIN_GOOGLE_CLICK: "img/login-google-click.png",
  LOGIN_FACEBOOK_OUT: "img/login-facebook-out.png",
  LOGIN_FACEBOOK_IN: "img/login-facebook-in.png",
  LOGIN_FACEBOOK_CLICK: "img/login-facebook-click.png",
  ACCOUNT_BOX: "img/account-box.png",
  ACCOUNT_MAINTENANCE: "img/account-under-maintenance.png",
  CLOSE_BUTTON_OUT: "img/close-button-account-out.png",
  CLOSE_BUTTON_IN: "img/close-button-account-in.png",
  CLOSE_BUTTON_CLICK: "img/close-button-account-click.png",
  PLAY_BUTTON_OUT: "img/play-button-out.png",
  PLAY_BUTTON_IN: "img/play-button-in.png",
  PLAY_BUTTON_CLICK: "img/play-button-click.png",
  APP_STORE_BADGE: "img/app-store-badge.png",
  PLAY_STORE_BADGE: "img/play-store-badge.png",
  MOBILE_BOXAD: "img/mobile-boxad.png",
  MODIFY_NAME_OUT: "img/modify-name-out.png",
  MODIFY_NAME_IN: "img/modify-name-in.png",
  MODIFY_NAME_CLICK: "img/modify-name-click.png",
  YES_BUTTON_OUT: "img/yes-button-out.png",
  YES_BUTTON_IN: "img/yes-button-in.png",
  YES_BUTTON_CLICK: "img/yes-button-click.png",
  YES_300_BUTTON_OUT: "img/yes-300-button-out.png",
  YES_300_BUTTON_IN: "img/yes-300-button-in.png",
  YES_300_BUTTON_CLICK: "img/yes-300-button-click.png",
  NO_BUTTON_OUT: "img/no-button-out.png",
  NO_BUTTON_IN: "img/no-button-in.png",
  NO_BUTTON_CLICK: "img/no-button-click.png",
  NO_THANKS_BUTTON_OUT: "img/no-thanks-button-out.png",
  NO_THANKS_BUTTON_IN: "img/no-thanks-button-in.png",
  NO_THANKS_BUTTON_CLICK: "img/no-thanks-button-click.png",
  SHOP_BUTTON_OUT: "img/shop-button-out.png",
  SHOP_BUTTON_IN: "img/shop-button-in.png",
  SHOP_BUTTON_CLICK: "img/shop-button-click.png",
  LOGOUT_OUT: "img/logout-out.png",
  LOGOUT_IN: "img/logout-in.png",
  LOGOUT_CLICK: "img/logout-click.png",
  TERMS_BUTTON_OUT: "img/terms-button-out.png",
  TERMS_BUTTON_IN: "img/terms-button-in.png",
  TERMS_BUTTON_CLICK: "img/terms-button-click.png",
  TUTORIAL_ICON: "img/tutorial-icon.png",
  SKINS_ICON: "img/skins-icon.png",
  SHOP_ICON: "img/shop-icon.png",
  PAINT_ICON: "img/paint-icon.png",
  LEADERBOARD_ICON: "img/leaderboard-icon.png",
  START_ICON: "img/start-icon.png",
  PROFILE_ICON: "img/profile-icon.png",
  SERVER_ACCESS_ICON: "img/server-access-icon2.png",
  ICONS_BG_BUTTON_OUT: "img/button-homepage-bg-out.png",
  ICONS_BG_BUTTON_IN: "img/button-homepage-bg-in.png",
  ICONS_BG_BUTTON_CLICK: "img/button-homepage-bg-click.png",
  ICONS_BOTTOM_BG_BUTTON_OUT: "img/button-bottom-homepage-bg-out.png",
  ICONS_BOTTOM_BG_BUTTON_IN: "img/button-bottom-homepage-bg-in.png",
  ICONS_BOTTOM_BG_BUTTON_CLICK: "img/button-bottom-homepage-bg-click.png",
  AVATAR_RESUME: "img/lvl-player.png",
  AVATAR_LVL1: "img/avatar-player.png",
  AVATAR_LVL2: "img/avatar-player1.png",
  AVATAR_LVL3: "img/avatar-player2.png",
  AVATAR_LVL4: "img/avatar-player3.png",
  AVATAR_LVL5: "img/avatar-player4.png",
  AVATAR_LVL6: "img/avatar-player5.png",
  AVATAR_LVL7: "img/avatar-player6.png",
  AVATAR_LVL8: "img/avatar-player7.png",
  AVATAR_LVL9: "img/avatar-player8.png",
  AVATAR_LVL10: "img/avatar-player9.png",
  AVATAR_LVL11: "img/avatar-player10.png",
  AVATAR_LVL12: "img/avatar-player11.png",
  AVATAR_LVL13: "img/avatar-player12.png",
  AVATAR_LVL14: "img/avatar-player13.png",
  AVATAR_LVL15: "img/avatar-player14.png",
  AVATAR_LVL16: "img/avatar-player14.png",
  AVATAR_LVL17: "img/avatar-player14.png",
  AVATAR_LVL18: "img/avatar-player14.png",
  GOLDEN_BREAD: "img/golden-bread.png",
  BUY_BREAD_OUT: "img/buy-bread-out.png",
  BUY_BREAD_IN: "img/buy-bread-in.png",
  BUY_BREAD_CLICK: "img/buy-bread-click.png",
  GAUGE: "img/gauge.png",
  SEASON_4: "img/season-4-out.png",
  SEASON_4_IN: "img/season-4-in.png",
  SEASON_4_OUT: "img/season-4-click.png",
  SEASON4_BOX: "img/season4-box.png",
  SEASON_5: "img/season-5-out.png",
  SEASON_5_IN: "img/season-5-in.png",
  SEASON_5_OUT: "img/season-5-click.png",
  SEASON5_BOX: "img/season5-box.png",
  PROFILE_BOX: "img/profile2-box.png",
  SKINS_BOX: "img/skins-box.png",
  SHOP_BOX: "img/shop-box.png",
  PRIVATE_SERVER_BOX: "img/private-server-box.png",
  SERVER_LOCATION_BOX: "img/location-box.png",
  SERVER_DURATION_BOX: "img/server-duration-box.png",
  TUTORIAL_BOX: "img/tutorial-box.png",
  LEADERBOARD_BOX: "img/leaderboard1-box.png",
  BUY_BREAD_BOX: "img/buy-breads-box.png",
  BAG_BOX: "img/bag-box.png",
  CRATE_BOX: "img/deadbox-box.png",
  BOOK_BOX: "img/book-box.png",
  ACCESSORIES_BOX: "img/accessories-box.png",
  CUSTOM_SKIN_BOX: "img/customskin-box.png",
  BAG_REMAIN_BOX: "img/bag-lasts.png",
  SERVER_REMAIN_BOX: "img/server-lasts.png",
  SERVER_ACCESS_BOX: "img/server-access-box2.png",
  LOOT_BOX: "img/lootbox-box.png",
  CHANGE_NICKNAME1_BOX: "img/change-nickname0.png",
  CHANGE_NICKNAME0_BOX: "img/change-nickname1.png",
  CHEATING_BOX: "img/cheating-box.png",
  DAILY_QUEST_BOX: "img/daily-quest-box.png",
  DAILY_5_BREAD: "img/daily-5-bread.png",
  DAILY_10_BREAD: "img/daily-10-bread.png",
  DAILY_VALID: "img/daily-valid.png",
  NORMAL_PROFILE_OUT: "img/normal-profile-out.png",
  NORMAL_PROFILE_IN: "img/normal-profile-in.png",
  NORMAL_PROFILE_CLICK: "img/normal-profile-click.png",
  FOREST_PROFILE_OUT: "img/forest-profile-out.png",
  FOREST_PROFILE_IN: "img/forest-profile-in.png",
  FOREST_PROFILE_CLICK: "img/forest-profile-click.png",
  ZOMBIE_PROFILE_OUT: "img/zombie-profile-out.png",
  ZOMBIE_PROFILE_IN: "img/zombie-profile-in.png",
  ZOMBIE_PROFILE_CLICK: "img/zombie-profile-click.png",
  VAMPIRE_PROFILE_OUT: "img/vampire-profile-out.png",
  VAMPIRE_PROFILE_IN: "img/vampire-profile-in.png",
  VAMPIRE_PROFILE_CLICK: "img/vampire-profile-click.png",
  TOTAL_PROFILE_OUT: "img/total-profile-out.png",
  TOTAL_PROFILE_IN: "img/total-profile-in.png",
  TOTAL_PROFILE_CLICK: "img/total-profile-click.png",
  SEASON1_PROFILE_OUT: "img/season1-profile-out.png",
  SEASON1_PROFILE_IN: "img/season1-profile-in.png",
  SEASON1_PROFILE_CLICK: "img/season1-profile-click.png",
  SEASON2_PROFILE_OUT: "img/season2-profile-out.png",
  SEASON2_PROFILE_IN: "img/season2-profile-in.png",
  SEASON2_PROFILE_CLICK: "img/season2-profile-click.png",
  SEASON3_PROFILE_OUT: "img/season3-profile-out.png",
  SEASON3_PROFILE_IN: "img/season3-profile-in.png",
  SEASON3_PROFILE_CLICK: "img/season3-profile-click.png",
  SEASON4_PROFILE_OUT: "img/season4-profile-out.png",
  SEASON4_PROFILE_IN: "img/season4-profile-in.png",
  SEASON4_PROFILE_CLICK: "img/season4-profile-click.png",
  SEASON5_PROFILE_OUT: "img/season5-profile-out.png",
  SEASON5_PROFILE_IN: "img/season5-profile-in.png",
  SEASON5_PROFILE_CLICK: "img/season5-profile-click.png",
  LOCKED_SKIN_ALERT: "img/locked-skin-alert.png",
  LOCKED_CUSTOM_ALERT: "img/locked-custom-alert.png",
  RED_LOCKED: "img/bg-red-locked.png",
  SKIN_BUTTON_OUT: "img/skin-button-out.png",
  SKIN_BUTTON_IN: "img/skin-button-in.png",
  SKIN_BUTTON_CLICK: "img/skin-button-click.png",
  ACCESSORY_BUTTON_OUT: "img/accessory-button-out.png",
  ACCESSORY_BUTTON_IN: "img/accessory-button-in.png",
  ACCESSORY_BUTTON_CLICK: "img/accessory-button-click.png",
  BAG_BUTTON_OUT: "img/bag-button-out.png",
  BAG_BUTTON_IN: "img/bag-button-in.png",
  BAG_BUTTON_CLICK: "img/bag-button-click.png",
  BOOK_BUTTON_OUT: "img/book-button-out.png",
  BOOK_BUTTON_IN: "img/book-button-in.png",
  BOOK_BUTTON_CLICK: "img/book-button-click.png",
  CRATE_BUTTON_OUT: "img/deadbox-button-out.png",
  CRATE_BUTTON_IN: "img/deadbox-button-in.png",
  CRATE_BUTTON_CLICK: "img/deadbox-button-click.png",
  LOOT_BUTTON_OUT: "img/loot-button-out.png",
  LOOT_BUTTON_IN: "img/loot-button-in.png",
  LOOT_BUTTON_CLICK: "img/loot-button-click.png",
  FREE_ITEM_OUT: "img/free-item-out.png",
  FREE_ITEM_IN: "img/free-item-in.png",
  FREE_ITEM_CLICK: "img/free-item-click.png",
  WOOD_ITEM_OUT: "img/wood-item-out.png",
  WOOD_ITEM_IN: "img/wood-item-in.png",
  WOOD_ITEM_CLICK: "img/wood-item-click.png",
  STONE_ITEM_OUT: "img/stone-item.png",
  STONE_ITEM_IN: "img/stone-item-in.png",
  STONE_ITEM_CLICK: "img/stone-item-click.png",
  GOLD_ITEM_OUT: "img/gold-item.png",
  GOLD_ITEM_IN: "img/gold-item-in.png",
  GOLD_ITEM_CLICK: "img/gold-item-click.png",
  DIAMOND_ITEM_OUT: "img/diamond-item.png",
  DIAMOND_ITEM_IN: "img/diamond-item-in.png",
  DIAMOND_ITEM_CLICK: "img/diamond-item-click.png",
  AMETHYST_ITEM_OUT: "img/amethyst-item.png",
  AMETHYST_ITEM_IN: "img/amethyst-item-in.png",
  AMETHYST_ITEM_CLICK: "img/amethyst-item-click.png",
  REIDITE_ITEM_OUT: "img/reidite-item.png",
  REIDITE_ITEM_IN: "img/reidite-item-in.png",
  REIDITE_ITEM_CLICK: "img/reidite-item-click.png",
  SPECIAL_ITEM_OUT: "img/special-item-out.png",
  SPECIAL_ITEM_IN: "img/special-item-in.png",
  SPECIAL_ITEM_CLICK: "img/special-item-click.png",
  LEVEL_ITEM_OUT: "img/level-item-out.png",
  LEVEL_ITEM_IN: "img/level-item-in.png",
  LEVEL_ITEM_CLICK: "img/level-item-click.png",
  SKIN_PREVIOUS_OUT: "img/skin-previous-out.png",
  SKIN_PREVIOUS_IN: "img/skin-previous-in.png",
  SKIN_PREVIOUS_CLICK: "img/skin-previous-click.png",
  SKIN_NEXT_OUT: "img/skin-next-out.png",
  SKIN_NEXT_IN: "img/skin-next-in.png",
  SKIN_NEXT_CLICK: "img/skin-next-click.png",
  BACK_BUTTON_OUT: "img/back-button-out.png",
  BACK_BUTTON_IN: "img/back-button-in.png",
  BACK_BUTTON_CLICK: "img/back-button-click.png",
  GET_MORE_BUTTON_OUT: "img/get-more-button-out.png",
  GET_MORE_BUTTON_IN: "img/get-more-button-in.png",
  GET_MORE_BUTTON_CLICK: "img/get-more-button-click.png",
  CURRENCY1_OUT: "img/currency1-out.png",
  CURRENCY1_IN: "img/currency1-in.png",
  CURRENCY1_CLICK: "img/currency1-click.png",
  CURRENCY2_OUT: "img/currency2-out.png",
  CURRENCY2_IN: "img/currency2-in.png",
  CURRENCY2_CLICK: "img/currency2-click.png",
  CURRENCY3_OUT: "img/currency3-out.png",
  CURRENCY3_IN: "img/currency3-in.png",
  CURRENCY3_CLICK: "img/currency3-click.png",
  CURRENCY4_OUT: "img/currency4-out.png",
  CURRENCY4_IN: "img/currency4-in.png",
  CURRENCY4_CLICK: "img/currency4-click.png",
  CURRENCY5_OUT: "img/currency5-out.png",
  CURRENCY5_IN: "img/currency5-in.png",
  CURRENCY5_CLICK: "img/currency5-click.png",
  PRICE1_OUT: "img/price1-out.png",
  PRICE1_IN: "img/price1-in.png",
  PRICE1_CLICK: "img/price1-click.png",
  PRICE2_OUT: "img/price2-out.png",
  PRICE2_IN: "img/price2-in.png",
  PRICE2_CLICK: "img/price2-click.png",
  PRICE3_OUT: "img/price3-out.png",
  PRICE3_IN: "img/price3-in.png",
  PRICE3_CLICK: "img/price3-click.png",
  PRICE4_OUT: "img/price4-out.png",
  PRICE4_IN: "img/price4-in.png",
  PRICE4_CLICK: "img/price4-click.png",
  PRICE5_OUT: "img/price5-out.png",
  PRICE5_IN: "img/price5-in.png",
  PRICE5_CLICK: "img/price5-click.png",
  BUY_PRIVATE_SERVER_OUT: "img/buy-private-server-out.png",
  BUY_PRIVATE_SERVER_IN: "img/buy-private-server-in.png",
  BUY_PRIVATE_SERVER_CLICK: "img/buy-private-server-click.png",
  ATLANTA_OUT: "img/atlanta-out.png",
  ATLANTA_IN: "img/atlanta-in.png",
  ATLANTA_CLICK: "img/atlanta-click.png",
  DALLAS_OUT: "img/dallas-out.png",
  DALLAS_IN: "img/dallas-in.png",
  DALLAS_CLICK: "img/dallas-click.png",
  FREMONT_OUT: "img/fremont-out.png",
  FREMONT_IN: "img/fremont-in.png",
  FREMONT_CLICK: "img/fremont-click.png",
  NEWARK_OUT: "img/newark-out.png",
  NEWARK_IN: "img/newark-in.png",
  NEWARK_CLICK: "img/newark-click.png",
  TORONTO_OUT: "img/toronto-out.png",
  TORONTO_IN: "img/toronto-in.png",
  TORONTO_CLICK: "img/toronto-click.png",
  SINGAPORE_OUT: "img/singapore-out.png",
  SINGAPORE_IN: "img/singapore-in.png",
  SINGAPORE_CLICK: "img/singapore-click.png",
  FRANKFURT_OUT: "img/frankfurt-out.png",
  FRANKFURT_IN: "img/frankfurt-in.png",
  FRANKFURT_CLICK: "img/frankfurt-click.png",
  LONDON_OUT: "img/london-out.png",
  LONDON_IN: "img/london-in.png",
  LONDON_CLICK: "img/london-click.png",
  MUMBAI_OUT: "img/mumbai-out.png",
  MUMBAI_IN: "img/mumbai-in.png",
  MUMBAI_CLICK: "img/mumbai-click.png",
  TOKYO_OUT: "img/tokyo-out.png",
  TOKYO_IN: "img/tokyo-in.png",
  TOKYO_CLICK: "img/tokyo-click.png",
  YES_LOCATION_OUT: "img/yes-location-out.png",
  YES_LOCATION_IN: "img/yes-location-in.png",
  YES_LOCATION_CLICK: "img/yes-location-click.png",
  DAYS3_OUT: "img/3days-out.png",
  DAYS3_IN: "img/3days-in.png",
  DAYS3_CLICK: "img/3days-click.png",
  DAYS7_OUT: "img/7days-out.png",
  DAYS7_IN: "img/7days-in.png",
  DAYS7_CLICK: "img/7days-click.png",
  DAYS30_OUT: "img/30days-out.png",
  DAYS30_IN: "img/30days-in.png",
  DAYS30_CLICK: "img/30days-click.png",
  DAYS90_OUT: "img/90days-out.png",
  DAYS90_IN: "img/90days-in.png",
  DAYS90_CLICK: "img/90days-click.png",
  SPIN1: "img/spin1.png",
  SPIN2: "img/spin2.png",
  SPIN3: "img/spin3.png",
  SPIN4: "img/spin4.png",
  SPIN5: "img/spin5.png",
  SPIN6: "img/spin6.png",
  ARROW_SPIN: "img/arrow-spin.png",
  SPIN_BUTTON_1_OUT: "img/spin-button-1-out.png",
  SPIN_BUTTON_1_IN: "img/spin-button-1-in.png",
  SPIN_BUTTON_1_CLICK: "img/spin-button-1-click.png",
  SPIN_BUTTON_2_OUT: "img/spin-button-2-out.png",
  SPIN_BUTTON_2_IN: "img/spin-button-2-in.png",
  SPIN_BUTTON_2_CLICK: "img/spin-button-2-click.png",
  SPIN_BUTTON_3_OUT: "img/spin-button-3-out.png",
  SPIN_BUTTON_3_IN: "img/spin-button-3-in.png",
  SPIN_BUTTON_3_CLICK: "img/spin-button-3-click.png",
  SPIN_BUTTON_4_OUT: "img/spin-button-4-out.png",
  SPIN_BUTTON_4_IN: "img/spin-button-4-in.png",
  SPIN_BUTTON_4_CLICK: "img/spin-button-4-click.png",
  SPIN_BUTTON_5_OUT: "img/spin-button-5-out.png",
  SPIN_BUTTON_5_IN: "img/spin-button-5-in.png",
  SPIN_BUTTON_5_CLICK: "img/spin-button-5-click.png",
  SPIN_LIGHT: "img/spin-light.png",
  TUTO_WIKI_OUT: "img/tuto-wiki-out.png",
  TUTO_WIKI_IN: "img/tuto-wiki-in.png",
  TUTO_WIKI_CLICK: "img/tuto-wiki-click.png",
  TUTO_PREVIOUS_OUT: "img/tuto-previous-out.png",
  TUTO_PREVIOUS_IN: "img/tuto-previous-in.png",
  TUTO_PREVIOUS_CLICK: "img/tuto-previous-click.png",
  TUTO_NEXT_OUT: "img/tuto-next-out.png",
  TUTO_NEXT_IN: "img/tuto-next-in.png",
  TUTO_NEXT_CLICK: "img/tuto-next-click.png",
  TIME_LEADERBOARD_OUT: "img/time-leaderboard-out.png",
  TIME_LEADERBOARD_IN: "img/time-leaderboard-in.png",
  TIME_LEADERBOARD_CLICK: "img/time-leaderboard-click.png",
  SCORE_LEADERBOARD_OUT: "img/score-leaderboard-out.png",
  SCORE_LEADERBOARD_IN: "img/score-leaderboard-in.png",
  SCORE_LEADERBOARD_CLICK: "img/score-leaderboard-click.png",
  LVL_LEADERBOARD_OUT: "img/lvl-leaderboard-out.png",
  LVL_LEADERBOARD_IN: "img/lvl-leaderboard-in.png",
  LVL_LEADERBOARD_CLICK: "img/lvl-leaderboard-click.png",
  KILL_LEADERBOARD_OUT: "img/kill-leaderboard-out.png",
  KILL_LEADERBOARD_IN: "img/kill-leaderboard-in.png",
  KILL_LEADERBOARD_CLICK: "img/kill-leaderboard-click.png",
  ALL_LEADERBOARD_OUT: "img/all-leaderboard-out.png",
  ALL_LEADERBOARD_IN: "img/all-leaderboard-in.png",
  ALL_LEADERBOARD_CLICK: "img/all-leaderboard-click.png",
  TODAY_LEADERBOARD_OUT: "img/today-leaderboard-out.png",
  TODAY_LEADERBOARD_IN: "img/today-leaderboard-in.png",
  TODAY_LEADERBOARD_CLICK: "img/today-leaderboard-click.png",
  WEEK_LEADERBOARD_OUT: "img/week-leaderboard-out.png",
  WEEK_LEADERBOARD_IN: "img/week-leaderboard-in.png",
  WEEK_LEADERBOARD_CLICK: "img/week-leaderboard-click.png",
  SEASON1_LEADERBOARD_OUT: "img/season1-out.png",
  SEASON1_LEADERBOARD_IN: "img/season1-in.png",
  SEASON1_LEADERBOARD_CLICK: "img/season1-click.png",
  SEASON2_LEADERBOARD_OUT: "img/season2--out.png",
  SEASON2_LEADERBOARD_IN: "img/season2--in.png",
  SEASON2_LEADERBOARD_CLICK: "img/season2--click.png",
  SEASON3_LEADERBOARD_OUT: "img/season3-out.png",
  SEASON3_LEADERBOARD_IN: "img/season3-in.png",
  SEASON3_LEADERBOARD_CLICK: "img/season3-click.png",
  SEASON4_LEADERBOARD_OUT: "img/season4-out.png",
  SEASON4_LEADERBOARD_IN: "img/season4-in.png",
  SEASON4_LEADERBOARD_CLICK: "img/season4-click.png",
  SEASON5_LEADERBOARD_OUT: "img/season5-out.png",
  SEASON5_LEADERBOARD_IN: "img/season5-in.png",
  SEASON5_LEADERBOARD_CLICK: "img/season5-click.png",
  TOTAL_LEAD_OUT: "img/total-lead-out.png",
  TOTAL_LEAD_IN: "img/total-lead-in.png",
  TOTAL_LEAD_CLICK: "img/total-lead-click.png",
  NORMAL_LEAD_OUT: "img/normal-lead-out.png",
  NORMAL_LEAD_IN: "img/normal-lead-in.png",
  NORMAL_LEAD_CLICK: "img/normal-lead-click.png",
  FOREST_LEAD_OUT: "img/forest-lead-out.png",
  FOREST_LEAD_IN: "img/forest-lead-in.png",
  FOREST_LEAD_CLICK: "img/forest-lead-click.png",
  VAMPIRE_LEAD_OUT: "img/vampire-lead-out.png",
  VAMPIRE_LEAD_IN: "img/vampire-lead-in.png",
  VAMPIRE_LEAD_CLICK: "img/vampire-lead-click.png",
  ZOMBIE_LEAD_OUT: "img/zombie-lead-out.png",
  ZOMBIE_LEAD_IN: "img/zombie-lead-in.png",
  ZOMBIE_LEAD_CLICK: "img/zombie-lead-click.png",
  LEVEL5D: "img/day-level5.png",
  LEVEL5N: "img/night-level5.png",
  LEVEL10D: "img/day-level10.png",
  LEVEL10N: "img/night-level10.png",
  LEVEL15D: "img/day-level15.png",
  LEVEL15N: "img/night-level15.png",
  LEVEL20D: "img/day-level20.png",
  LEVEL20N: "img/night-level20.png",
  LEVEL25D: "img/day-level25.png",
  LEVEL25N: "img/night-level25.png",
  LEVEL30D: "img/day-level30.png",
  LEVEL30N: "img/night-level30.png",
  LEVEL35D: "img/day-level35.png",
  LEVEL35N: "img/night-level35.png",
  LEVEL40D: "img/day-level40.png",
  LEVEL40N: "img/night-level40.png",
  LEVEL45D: "img/day-level45.png",
  LEVEL45N: "img/night-level45.png",
  LEVEL50D: "img/day-level50.png",
  LEVEL50N: "img/night-level50.png",
  LEVEL55D: "img/day-level55.png",
  LEVEL55N: "img/night-level55.png",
  LEVEL60D: "img/day-level60.png",
  LEVEL60N: "img/night-level60.png",
  SKIN_DEVASTD: "img/day-skin-devast0.png",
  SKIN_DEVASTN: "img/night-skin-devast0.png",
  HAND_DEVASTD: "img/day-hand-devaster.png",
  HAND_DEVASTN: "img/night-hand-devaster.png",
  SKIN_STARD: "img/day-skin-star0.png",
  SKIN_STARN: "img/night-skin-star0.png",
  HAND_STARD: "img/day-hand-star0.png",
  HAND_STARN: "img/night-hand-star0.png",
  SKIN_VAMPIRED: "img/day-vampire.png",
  SKIN_VAMPIREN: "img/night-vampire.png",
  HAND_VAMPIRED: "img/day-hand-vampire.png",
  HAND_VAMPIREN: "img/night-hand-vampire.png",
  SKIN_ZOMBIED: "img/day-zombie.png",
  SKIN_ZOMBIEN: "img/night-zombie.png",
  HAND_ZOMBIED: "img/day-hand-zombie.png",
  HAND_ZOMBIEN: "img/night-hand-zombie.png",
  SKIN_ROBOTD: "img/day-skin113.png",
  SKIN_ROBOTN: "img/night-skin113.png",
  HAND_ROBOTD: "img/day-hand-skin113.png",
  HAND_ROBOTN: "img/night-hand-skin113.png",
  SKIN0D: "img/day-skin0.png",
  SKIN0N: "img/night-skin0.png",
  SKIN1D: "img/day-skin1.png",
  SKIN1N: "img/night-skin1.png",
  SKIN2D: "img/day-skin2.png",
  SKIN2N: "img/night-skin2.png",
  SKIN3D: "img/day-skin3.png",
  SKIN3N: "img/night-skin3.png",
  SKIN4D: "img/day-skin4.png",
  SKIN4N: "img/night-skin4.png",
  SKIN5D: "img/day-skin5.png",
  SKIN5N: "img/night-skin5.png",
  SKIN6D: "img/day-skin6.png",
  SKIN6N: "img/night-skin6.png",
  SKIN7D: "img/day-skin7.png",
  SKIN7N: "img/night-skin7.png",
  SKIN8D: "img/day-skin8.png",
  SKIN8N: "img/night-skin8.png",
  SKIN9D: "img/day-skin9.png",
  SKIN9N: "img/night-skin9.png",
  SKIN10D: "img/day-skin10.png",
  SKIN10N: "img/night-skin10.png",
  SKIN11D: "img/day-skin11.png",
  SKIN11N: "img/night-skin11.png",
  SKIN12D: "img/day-skin12.png",
  SKIN12N: "img/night-skin12.png",
  SKIN13D: "img/day-skin13.png",
  SKIN13N: "img/night-skin13.png",
  SKIN14D: "img/day-skin14.png",
  SKIN14N: "img/night-skin14.png",
  SKIN15D: "img/day-skin15.png",
  SKIN15N: "img/night-skin15.png",
  SKIN16D: "img/day-skin16.png",
  SKIN16N: "img/night-skin16.png",
  SKIN17D: "img/day-skin17.png",
  SKIN17N: "img/night-skin17.png",
  SKIN18D: "img/day-skin18.png",
  SKIN18N: "img/night-skin18.png",
  SKIN19D: "img/day-skin19.png",
  SKIN19N: "img/night-skin19.png",
  SKIN20D: "img/day-skin20.png",
  SKIN20N: "img/night-skin20.png",
  SKIN21D: "img/day-skin21.png",
  SKIN21N: "img/night-skin21.png",
  SKIN22D: "img/day-skin22.png",
  SKIN22N: "img/night-skin22.png",
  SKIN23D: "img/day-skin23.png",
  SKIN23N: "img/night-skin23.png",
  SKIN24D: "img/day-skin24.png",
  SKIN24N: "img/night-skin24.png",
  SKIN25D: "img/day-skin25.png",
  SKIN25N: "img/night-skin25.png",
  SKIN26D: "img/day-skin26.png",
  SKIN26N: "img/night-skin26.png",
  SKIN27D: "img/day-skin27.png",
  SKIN27N: "img/night-skin27.png",
  SKIN28D: "img/day-skin28.png",
  SKIN28N: "img/night-skin28.png",
  SKIN29D: "img/day-skin29.png",
  SKIN29N: "img/night-skin29.png",
  SKIN30D: "img/day-skin30.png",
  SKIN30N: "img/night-skin30.png",
  SKIN31D: "img/day-skin31.png",
  SKIN31N: "img/night-skin31.png",
  SKIN32D: "img/day-skin32.png",
  SKIN32N: "img/night-skin32.png",
  SKIN33D: "img/day-skin33.png",
  SKIN33N: "img/night-skin33.png",
  SKIN34D: "img/day-skin34.png",
  SKIN34N: "img/night-skin34.png",
  SKIN35D: "img/day-skin35.png",
  SKIN35N: "img/night-skin35.png",
  SKIN36D: "img/day-skin36.png",
  SKIN36N: "img/night-skin36.png",
  SKIN37D: "img/day-skin37.png",
  SKIN37N: "img/night-skin37.png",
  SKIN38D: "img/day-skin38.png",
  SKIN38N: "img/night-skin38.png",
  SKIN39D: "img/day-skin39.png",
  SKIN39N: "img/night-skin39.png",
  SKIN40D: "img/day-skin40.png",
  SKIN40N: "img/night-skin40.png",
  SKIN41D: "img/day-skin41.png",
  SKIN41N: "img/night-skin41.png",
  SKIN42D: "img/day-skin42.png",
  SKIN42N: "img/night-skin42.png",
  SKIN43D: "img/day-skin43.png",
  SKIN43N: "img/night-skin43.png",
  SKIN44D: "img/day-skin44.png",
  SKIN44N: "img/night-skin44.png",
  SKIN45D: "img/day-skin45.png",
  SKIN45N: "img/night-skin45.png",
  SKIN46D: "img/day-skin46.png",
  SKIN46N: "img/night-skin46.png",
  SKIN47D: "img/day-skin47.png",
  SKIN47N: "img/night-skin47.png",
  SKIN48D: "img/day-skin48.png",
  SKIN48N: "img/night-skin48.png",
  SKIN49D: "img/day-skin49.png",
  SKIN49N: "img/night-skin49.png",
  SKIN50D: "img/day-skin50.png",
  SKIN50N: "img/night-skin50.png",
  SKIN51D: "img/day-skin51.png",
  SKIN51N: "img/night-skin51.png",
  SKIN52D: "img/day-skin52.png",
  SKIN52N: "img/night-skin52.png",
  SKIN53D: "img/day-skin53.png",
  SKIN53N: "img/night-skin53.png",
  SKIN54D: "img/day-skin54.png",
  SKIN54N: "img/night-skin54.png",
  SKIN55D: "img/day-skin55.png",
  SKIN55N: "img/night-skin55.png",
  SKIN56D: "img/day-skin56.png",
  SKIN56N: "img/night-skin56.png",
  SKIN57D: "img/day-skin57.png",
  SKIN57N: "img/night-skin57.png",
  SKIN58D: "img/day-skin58.png",
  SKIN58N: "img/night-skin58.png",
  SKIN59D: "img/day-skin59.png",
  SKIN59N: "img/night-skin59.png",
  SKIN60D: "img/day-skin60.png",
  SKIN60N: "img/night-skin60.png",
  SKIN61D: "img/day-skin61.png",
  SKIN61N: "img/night-skin61.png",
  SKIN62D: "img/day-skin62.png",
  SKIN62N: "img/night-skin62.png",
  SKIN63D: "img/day-skin63.png",
  SKIN63N: "img/night-skin63.png",
  SKIN64D: "img/day-skin64.png",
  SKIN64N: "img/night-skin64.png",
  SKIN65D: "img/day-skin65.png",
  SKIN65N: "img/night-skin65.png",
  SKIN66D: "img/day-skin66.png",
  SKIN66N: "img/night-skin66.png",
  SKIN67D: "img/day-skin67.png",
  SKIN67N: "img/night-skin67.png",
  SKIN68D: "img/day-skin68.png",
  SKIN68N: "img/night-skin68.png",
  SKIN69D: "img/day-skin69.png",
  SKIN69N: "img/night-skin69.png",
  SKIN70D: "img/day-skin70.png",
  SKIN70N: "img/night-skin70.png",
  SKIN71D: "img/day-skin71.png",
  SKIN71N: "img/night-skin71.png",
  SKIN72D: "img/day-skin72.png",
  SKIN72N: "img/night-skin72.png",
  SKIN73D: "img/day-skin73.png",
  SKIN73N: "img/night-skin73.png",
  SKIN74D: "img/day-skin74.png",
  SKIN74N: "img/night-skin74.png",
  SKIN75D: "img/day-skin75.png",
  SKIN75N: "img/night-skin75.png",
  SKIN76D: "img/day-skin76.png",
  SKIN76N: "img/night-skin76.png",
  SKIN77D: "img/day-skin77.png",
  SKIN77N: "img/night-skin77.png",
  SKIN78D: "img/day-skin78.png",
  SKIN78N: "img/night-skin78.png",
  SKIN79D: "img/day-skin79.png",
  SKIN79N: "img/night-skin79.png",
  SKIN80D: "img/day-skin80.png",
  SKIN80N: "img/night-skin80.png",
  SKIN81D: "img/day-skin81.png",
  SKIN81N: "img/night-skin81.png",
  SKIN82D: "img/day-skin82.png",
  SKIN82N: "img/night-skin82.png",
  SKIN83D: "img/day-skin83.png",
  SKIN83N: "img/night-skin83.png",
  SKIN84D: "img/day-skin84.png",
  SKIN84N: "img/night-skin84.png",
  SKIN85D: "img/day-skin85.png",
  SKIN85N: "img/night-skin85.png",
  SKIN86D: "img/day-skin86.png",
  SKIN86N: "img/night-skin86.png",
  SKIN87D: "img/day-skin87.png",
  SKIN87N: "img/night-skin87.png",
  SKIN88D: "img/day-skin88.png",
  SKIN88N: "img/night-skin88.png",
  SKIN89D: "img/day-skin89.png",
  SKIN89N: "img/night-skin89.png",
  SKIN90D: "img/day-skin90.png",
  SKIN90N: "img/night-skin90.png",
  SKIN91D: "img/day-skin91.png",
  SKIN91N: "img/night-skin91.png",
  SKIN92D: "img/day-skin92.png",
  SKIN92N: "img/night-skin92.png",
  SKIN93D: "img/day-skin93.png",
  SKIN93N: "img/night-skin93.png",
  SKIN94D: "img/day-skin94.png",
  SKIN94N: "img/night-skin94.png",
  SKIN95D: "img/day-skin95.png",
  SKIN95N: "img/night-skin95.png",
  SKIN96D: "img/day-skin96.png",
  SKIN96N: "img/night-skin96.png",
  SKIN97D: "img/day-skin97.png",
  SKIN97N: "img/night-skin97.png",
  SKIN98D: "img/day-skin98.png",
  SKIN98N: "img/night-skin98.png",
  SKIN99D: "img/day-skin99.png",
  SKIN99N: "img/night-skin99.png",
  SKIN100D: "img/day-skin100.png",
  SKIN100N: "img/night-skin100.png",
  SKIN101D: "img/day-skin101.png",
  SKIN101N: "img/night-skin101.png",
  SKIN102D: "img/day-skin102.png",
  SKIN102N: "img/night-skin102.png",
  SKIN103D: "img/day-skin103.png",
  SKIN103N: "img/night-skin103.png",
  SKIN104D: "img/day-skin104.png",
  SKIN104N: "img/night-skin104.png",
  SKIN105D: "img/day-skin105.png",
  SKIN105N: "img/night-skin105.png",
  SKIN106D: "img/day-skin106.png",
  SKIN106N: "img/night-skin106.png",
  SKIN107D: "img/day-skin107.png",
  SKIN107N: "img/night-skin107.png",
  SKIN108D: "img/day-skin108.png",
  SKIN108N: "img/night-skin108.png",
  SKIN109D: "img/day-skin109.png",
  SKIN109N: "img/night-skin109.png",
  SKIN110D: "img/day-skin110.png",
  SKIN110N: "img/night-skin110.png",
  SKIN111D: "img/day-skin111.png",
  SKIN111N: "img/night-skin111.png",
  SKIN112D: "img/day-skin112.png",
  SKIN112N: "img/night-skin112.png",
  SKIN113D: "img/day-skin113.png",
  SKIN113N: "img/night-skin113.png",
  SKIN114D: "img/day-skin114.png",
  SKIN114N: "img/night-skin114.png",
  SKIN115D: "img/day-skin115.png",
  SKIN115N: "img/night-skin115.png",
  SKIN116D: "img/day-skin116.png",
  SKIN116N: "img/night-skin116.png",
  SKIN117D: "img/day-skin117.png",
  SKIN117N: "img/night-skin117.png",
  SKIN118D: "img/day-skin118.png",
  SKIN118N: "img/night-skin118.png",
  SKIN119D: "img/day-skin119.png",
  SKIN119N: "img/night-skin119.png",
  SKIN120D: "img/day-skin120.png",
  SKIN120N: "img/night-skin120.png",
  SKIN121D: "img/day-skin121.png",
  SKIN121N: "img/night-skin121.png",
  SKIN122D: "img/day-skin122.png",
  SKIN122N: "img/night-skin122.png",
  SKIN123D: "img/day-skin123.png",
  SKIN123N: "img/night-skin123.png",
  SKIN124D: "img/day-skin124.png",
  SKIN124N: "img/night-skin124.png",
  SKIN125D: "img/day-skin125.png",
  SKIN125N: "img/night-skin125.png",
  SKIN126D: "img/day-skin126.png",
  SKIN126N: "img/night-skin126.png",
  SKIN127D: "img/day-skin127.png",
  SKIN127N: "img/night-skin127.png",
  SKIN128D: "img/day-skin128.png",
  SKIN128N: "img/night-skin128.png",
  SKIN129D: "img/day-skin129.png",
  SKIN129N: "img/night-skin129.png",
  SKIN130D: "img/day-skin130-1.png",
  SKIN130N: "img/night-skin130-1.png",
  SKIN131D: "img/day-skin131.png",
  SKIN131N: "img/night-skin131.png",
  SKIN132D: "img/day-skin132.png",
  SKIN132N: "img/night-skin132.png",
  SKIN133D: "img/day-skin133.png",
  SKIN133N: "img/night-skin133.png",
  SKIN134D: "img/day-skin134.png",
  SKIN134N: "img/night-skin134.png",
  SKIN135D: "img/day-skin135.png",
  SKIN135N: "img/night-skin135.png",
  SKIN136D: "img/day-skin136.png",
  SKIN136N: "img/night-skin136.png",
  SKIN137D: "img/day-skin137.png",
  SKIN137N: "img/night-skin137.png",
  SKIN138D: "img/day-skin138.png",
  SKIN138N: "img/night-skin138.png",
  SKIN139D: "img/day-skin139.png",
  SKIN139N: "img/night-skin139.png",
  SKIN140D: "img/day-skin140.png",
  SKIN140N: "img/night-skin140.png",
  SKIN141D: "img/day-skin141.png",
  SKIN141N: "img/night-skin141.png",
  SKIN142D: "img/day-skin142.png",
  SKIN142N: "img/night-skin142.png",
  SKIN143D: "img/day-skin143.png",
  SKIN143N: "img/night-skin143.png",
  SKIN144D: "img/day-skin144.png",
  SKIN144N: "img/night-skin144.png",
  SKIN145D: "img/day-skin145.png",
  SKIN145N: "img/night-skin145.png",
  SKIN146D: "img/day-skin146.png",
  SKIN146N: "img/night-skin146.png",
  SKIN147D: "img/day-skin147.png",
  SKIN147N: "img/night-skin147.png",
  SKIN148D: "img/day-skin148.png",
  SKIN148N: "img/night-skin148.png",
  SKIN149D: "img/day-skin149.png",
  SKIN149N: "img/night-skin149.png",
  SKIN150D: "img/day-skin150.png",
  SKIN150N: "img/night-skin150.png",
  HAND_SKIN0D: "img/day-hand-skin0.png",
  HAND_SKIN0N: "img/night-hand-skin0.png",
  HAND_SKIN1D: "img/day-hand-skin1.png",
  HAND_SKIN1N: "img/night-hand-skin1.png",
  HAND_SKIN2D: "img/day-hand-skin2.png",
  HAND_SKIN2N: "img/night-hand-skin2.png",
  HAND_SKIN3D: "img/day-hand-skin3.png",
  HAND_SKIN3N: "img/night-hand-skin3.png",
  HAND_SKIN4D: "img/day-hand-skin4.png",
  HAND_SKIN4N: "img/night-hand-skin4.png",
  HAND_SKIN5D: "img/day-hand-skin5.png",
  HAND_SKIN5N: "img/night-hand-skin5.png",
  HAND_SKIN6D: "img/day-hand-skin6.png",
  HAND_SKIN6N: "img/night-hand-skin6.png",
  HAND_SKIN7D: "img/day-hand-skin6.png",
  HAND_SKIN7N: "img/night-hand-skin6.png",
  HAND_SKIN8D: "img/day-hand-skin8.png",
  HAND_SKIN8N: "img/night-hand-skin8.png",
  HAND_SKIN9D: "img/day-hand-skin9.png",
  HAND_SKIN9N: "img/night-hand-skin9.png",
  HAND_SKIN10D: "img/day-hand-skin10.png",
  HAND_SKIN10N: "img/night-hand-skin10.png",
  HAND_SKIN11D: "img/day-hand-skin11.png",
  HAND_SKIN11N: "img/night-hand-skin11.png",
  HAND_SKIN12D: "img/day-hand-skin12.png",
  HAND_SKIN12N: "img/night-hand-skin12.png",
  HAND_SKIN13D: "img/day-hand-skin13.png",
  HAND_SKIN13N: "img/night-hand-skin13.png",
  HAND_SKIN14D: "img/day-hand-skin14.png",
  HAND_SKIN14N: "img/night-hand-skin14.png",
  HAND_SKIN15D: "img/day-hand-skin15.png",
  HAND_SKIN15N: "img/night-hand-skin15.png",
  HAND_SKIN16D: "img/day-hand-skin16.png",
  HAND_SKIN16N: "img/night-hand-skin16.png",
  HAND_SKIN17D: "img/day-hand-skin17.png",
  HAND_SKIN17N: "img/night-hand-skin17.png",
  HAND_SKIN18D: "img/day-hand-skin18.png",
  HAND_SKIN18N: "img/night-hand-skin18.png",
  HAND_SKIN19D: "img/day-hand-skin19.png",
  HAND_SKIN19N: "img/night-hand-skin19.png",
  HAND_SKIN20D: "img/day-hand-skin20.png",
  HAND_SKIN20N: "img/night-hand-skin20.png",
  HAND_SKIN21D: "img/day-hand-skin21.png",
  HAND_SKIN21N: "img/night-hand-skin21.png",
  HAND_SKIN22D: "img/day-hand-skin22.png",
  HAND_SKIN22N: "img/night-hand-skin22.png",
  HAND_SKIN23D: "img/day-hand-skin23.png",
  HAND_SKIN23N: "img/night-hand-skin23.png",
  HAND_SKIN24D: "img/day-hand-skin24.png",
  HAND_SKIN24N: "img/night-hand-skin24.png",
  HAND_SKIN25D: "img/day-hand-skin25.png",
  HAND_SKIN25N: "img/night-hand-skin25.png",
  HAND_SKIN26D: "img/day-hand-skin26.png",
  HAND_SKIN26N: "img/night-hand-skin26.png",
  HAND_SKIN27D: "img/day-hand-skin27.png",
  HAND_SKIN27N: "img/night-hand-skin27.png",
  HAND_SKIN28D: "img/day-hand-skin28.png",
  HAND_SKIN28N: "img/night-hand-skin28.png",
  HAND_SKIN29D: "img/day-hand-skin29.png",
  HAND_SKIN29N: "img/night-hand-skin29.png",
  HAND_SKIN30D: "img/day-hand-skin30.png",
  HAND_SKIN30N: "img/night-hand-skin30.png",
  HAND_SKIN31D: "img/day-hand-skin31.png",
  HAND_SKIN31N: "img/night-hand-skin31.png",
  HAND_SKIN32D: "img/day-hand-skin32.png",
  HAND_SKIN32N: "img/night-hand-skin32.png",
  HAND_SKIN33D: "img/day-hand-skin33.png",
  HAND_SKIN33N: "img/night-hand-skin33.png",
  HAND_SKIN34D: "img/day-hand-skin34.png",
  HAND_SKIN34N: "img/night-hand-skin34.png",
  HAND_SKIN35D: "img/day-hand-skin35.png",
  HAND_SKIN35N: "img/night-hand-skin35.png",
  HAND_SKIN36D: "img/day-hand-skin36.png",
  HAND_SKIN36N: "img/night-hand-skin36.png",
  HAND_SKIN37D: "img/day-hand-skin37.png",
  HAND_SKIN37N: "img/night-hand-skin37.png",
  HAND_SKIN38D: "img/day-hand-skin38.png",
  HAND_SKIN38N: "img/night-hand-skin38.png",
  HAND_SKIN39D: "img/day-hand-skin39.png",
  HAND_SKIN39N: "img/night-hand-skin39.png",
  HAND_SKIN40D: "img/day-hand-skin40.png",
  HAND_SKIN40N: "img/night-hand-skin40.png",
  HAND_SKIN41D: "img/day-hand-skin41.png",
  HAND_SKIN41N: "img/night-hand-skin41.png",
  HAND_SKIN42D: "img/day-hand-skin42.png",
  HAND_SKIN42N: "img/night-hand-skin42.png",
  HAND_SKIN43D: "img/day-hand-skin43.png",
  HAND_SKIN43N: "img/night-hand-skin43.png",
  HAND_SKIN44D: "img/day-hand-skin16.png",
  HAND_SKIN44N: "img/night-hand-skin16.png",
  HAND_SKIN45D: "img/day-hand-skin45.png",
  HAND_SKIN45N: "img/night-hand-skin45.png",
  HAND_SKIN46D: "img/day-hand-skin46.png",
  HAND_SKIN46N: "img/night-hand-skin46.png",
  HAND_SKIN47D: "img/day-hand-skin47.png",
  HAND_SKIN47N: "img/night-hand-skin47.png",
  HAND_SKIN48D: "img/day-hand-skin48.png",
  HAND_SKIN48N: "img/night-hand-skin48.png",
  HAND_SKIN49D: "img/day-hand-skin49.png",
  HAND_SKIN49N: "img/night-hand-skin49.png",
  HAND_SKIN50D: "img/day-hand-skin49.png",
  HAND_SKIN50N: "img/night-hand-skin49.png",
  HAND_SKIN51D: "img/day-hand-skin51.png",
  HAND_SKIN51N: "img/night-hand-skin51.png",
  HAND_SKIN52D: "img/day-hand-skin52.png",
  HAND_SKIN52N: "img/night-hand-skin52.png",
  HAND_SKIN53D: "img/day-hand-skin53.png",
  HAND_SKIN53N: "img/night-hand-skin53.png",
  HAND_SKIN54D: "img/day-hand-skin53.png",
  HAND_SKIN54N: "img/night-hand-skin53.png",
  HAND_SKIN55D: "img/day-hand-skin55.png",
  HAND_SKIN55N: "img/night-hand-skin55.png",
  HAND_SKIN56D: "img/day-hand-skin56.png",
  HAND_SKIN56N: "img/night-hand-skin56.png",
  HAND_SKIN57D: "img/day-hand-skin57.png",
  HAND_SKIN57N: "img/night-hand-skin57.png",
  HAND_SKIN58D: "img/day-hand-skin58.png",
  HAND_SKIN58N: "img/night-hand-skin58.png",
  HAND_SKIN59D: "img/day-hand-skin59.png",
  HAND_SKIN59N: "img/night-hand-skin59.png",
  HAND_SKIN60D: "img/day-hand-skin61.png",
  HAND_SKIN60N: "img/night-hand-skin61.png",
  HAND_SKIN61D: "img/day-hand-skin61.png",
  HAND_SKIN61N: "img/night-hand-skin61.png",
  HAND_SKIN62D: "img/day-hand-skin62.png",
  HAND_SKIN62N: "img/night-hand-skin62.png",
  HAND_SKIN63D: "img/day-hand-skin63.png",
  HAND_SKIN63N: "img/night-hand-skin63.png",
  HAND_SKIN64D: "img/day-hand-skin64.png",
  HAND_SKIN64N: "img/night-hand-skin64.png",
  HAND_SKIN65D: "img/day-hand-skin65.png",
  HAND_SKIN65N: "img/night-hand-skin65.png",
  HAND_SKIN66D: "img/day-hand-skin66.png",
  HAND_SKIN66N: "img/night-hand-skin66.png",
  HAND_SKIN67D: "img/day-hand-skin67.png",
  HAND_SKIN67N: "img/night-hand-skin67.png",
  HAND_SKIN68D: "img/day-hand-skin68.png",
  HAND_SKIN68N: "img/night-hand-skin68.png",
  HAND_SKIN69D: "img/day-hand-skin69.png",
  HAND_SKIN69N: "img/night-hand-skin69.png",
  HAND_SKIN70D: "img/day-hand-skin70.png",
  HAND_SKIN70N: "img/night-hand-skin70.png",
  HAND_SKIN71D: "img/day-hand-skin71.png",
  HAND_SKIN71N: "img/night-hand-skin71.png",
  HAND_SKIN72D: "img/day-hand-skin72.png",
  HAND_SKIN72N: "img/night-hand-skin72.png",
  HAND_SKIN73D: "img/day-hand-skin73.png",
  HAND_SKIN73N: "img/night-hand-skin73.png",
  HAND_SKIN74D: "img/day-hand-skin74.png",
  HAND_SKIN74N: "img/night-hand-skin74.png",
  HAND_SKIN75D: "img/day-hand-skin75.png",
  HAND_SKIN75N: "img/night-hand-skin75.png",
  HAND_SKIN76D: "img/day-hand-skin76.png",
  HAND_SKIN76N: "img/night-hand-skin76.png",
  HAND_SKIN77D: "img/day-hand-skin77.png",
  HAND_SKIN77N: "img/night-hand-skin77.png",
  HAND_SKIN78D: "img/day-hand-skin78.png",
  HAND_SKIN78N: "img/night-hand-skin78.png",
  HAND_SKIN79D: "img/day-hand-skin79.png",
  HAND_SKIN79N: "img/night-hand-skin79.png",
  HAND_SKIN80D: "img/day-hand-skin80.png",
  HAND_SKIN80N: "img/night-hand-skin80.png",
  HAND_SKIN81D: "img/day-hand-skin81.png",
  HAND_SKIN81N: "img/night-hand-skin81.png",
  HAND_SKIN82D: "img/day-hand-skin82.png",
  HAND_SKIN82N: "img/night-hand-skin82.png",
  HAND_SKIN83D: "img/day-hand-skin83.png",
  HAND_SKIN83N: "img/night-hand-skin83.png",
  HAND_SKIN84D: "img/day-hand-skin84.png",
  HAND_SKIN84N: "img/night-hand-skin84.png",
  HAND_SKIN85D: "img/day-hand-skin85.png",
  HAND_SKIN85N: "img/night-hand-skin85.png",
  HAND_SKIN86D: "img/day-hand-skin86.png",
  HAND_SKIN86N: "img/night-hand-skin86.png",
  HAND_SKIN87D: "img/day-hand-skin87.png",
  HAND_SKIN87N: "img/night-hand-skin87.png",
  HAND_SKIN88D: "img/day-hand-skin88.png",
  HAND_SKIN88N: "img/night-hand-skin88.png",
  HAND_SKIN89D: "img/day-hand-skin89.png",
  HAND_SKIN89N: "img/night-hand-skin89.png",
  HAND_SKIN90D: "img/day-hand-skin90.png",
  HAND_SKIN90N: "img/night-hand-skin90.png",
  HAND_SKIN91D: "img/day-hand-skin91.png",
  HAND_SKIN91N: "img/night-hand-skin91.png",
  HAND_SKIN92D: "img/day-hand-skin92.png",
  HAND_SKIN92N: "img/night-hand-skin92.png",
  HAND_SKIN93D: "img/day-hand-skin93.png",
  HAND_SKIN93N: "img/night-hand-skin93.png",
  HAND_SKIN94D: "img/day-hand-skin94.png",
  HAND_SKIN94N: "img/night-hand-skin94.png",
  HAND_SKIN95D: "img/day-hand-skin95.png",
  HAND_SKIN95N: "img/night-hand-skin95.png",
  HAND_SKIN96D: "img/day-hand-skin96.png",
  HAND_SKIN96N: "img/night-hand-skin96.png",
  HAND_SKIN97D: "img/day-hand-skin97.png",
  HAND_SKIN97N: "img/night-hand-skin97.png",
  HAND_SKIN98D: "img/day-hand-skin98.png",
  HAND_SKIN98N: "img/night-hand-skin98.png",
  HAND_SKIN99D: "img/day-hand-skin99.png",
  HAND_SKIN99N: "img/night-hand-skin99.png",
  HAND_SKIN100D: "img/day-hand-skin100.png",
  HAND_SKIN100N: "img/night-hand-skin100.png",
  HAND_SKIN101D: "img/day-hand-skin101.png",
  HAND_SKIN101N: "img/night-hand-skin101.png",
  HAND_SKIN102D: "img/day-hand-skin102.png",
  HAND_SKIN102N: "img/night-hand-skin102.png",
  HAND_SKIN103D: "img/day-hand-skin103.png",
  HAND_SKIN103N: "img/night-hand-skin103.png",
  HAND_SKIN104D: "img/day-hand-skin104.png",
  HAND_SKIN104N: "img/night-hand-skin104.png",
  HAND_SKIN105D: "img/day-hand-skin105.png",
  HAND_SKIN105N: "img/night-hand-skin105.png",
  HAND_SKIN106D: "img/day-hand-skin106.png",
  HAND_SKIN106N: "img/night-hand-skin106.png",
  HAND_SKIN107D: "img/day-hand-skin107.png",
  HAND_SKIN107N: "img/night-hand-skin107.png",
  HAND_SKIN108D: "img/day-hand-skin108.png",
  HAND_SKIN108N: "img/night-hand-skin108.png",
  HAND_SKIN109D: "img/day-hand-skin109.png",
  HAND_SKIN109N: "img/night-hand-skin109.png",
  HAND_SKIN110D: "img/day-hand-skin110.png",
  HAND_SKIN110N: "img/night-hand-skin110.png",
  HAND_SKIN111D: "img/day-hand-skin111.png",
  HAND_SKIN111N: "img/night-hand-skin111.png",
  HAND_SKIN112D: "img/day-hand-skin112.png",
  HAND_SKIN112N: "img/night-hand-skin112.png",
  HAND_SKIN113D: "img/day-hand-skin113.png",
  HAND_SKIN113N: "img/night-hand-skin113.png",
  HAND_SKIN114D: "img/day-hand-skin114.png",
  HAND_SKIN114N: "img/night-hand-skin114.png",
  HAND_SKIN115D: "img/day-hand-skin115.png",
  HAND_SKIN115N: "img/night-hand-skin115.png",
  HAND_SKIN116D: "img/day-hand-skin116.png",
  HAND_SKIN116N: "img/night-hand-skin116.png",
  HAND_SKIN117D: "img/day-hand-skin117.png",
  HAND_SKIN117N: "img/night-hand-skin117.png",
  HAND_SKIN118D: "img/day-hand-skin118.png",
  HAND_SKIN118N: "img/night-hand-skin118.png",
  HAND_SKIN119D: "img/day-hand-skin119.png",
  HAND_SKIN119N: "img/night-hand-skin119.png",
  HAND_SKIN120D: "img/day-hand-skin120.png",
  HAND_SKIN120N: "img/night-hand-skin120.png",
  HAND_SKIN121D: "img/day-hand-skin122.png",
  HAND_SKIN121N: "img/night-hand-skin122.png",
  HAND_SKIN122D: "img/day-hand-skin122.png",
  HAND_SKIN122N: "img/night-hand-skin122.png",
  HAND_SKIN123D: "img/day-hand-skin122.png",
  HAND_SKIN123N: "img/night-hand-skin122.png",
  HAND_SKIN124D: "img/day-hand-skin124.png",
  HAND_SKIN124N: "img/night-hand-skin124.png",
  HAND_SKIN125D: "img/day-hand-skin125.png",
  HAND_SKIN125N: "img/night-hand-skin125.png",
  HAND_SKIN126D: "img/day-hand-skin126.png",
  HAND_SKIN126N: "img/night-hand-skin126.png",
  HAND_SKIN127D: "img/day-hand-skin127.png",
  HAND_SKIN127N: "img/night-hand-skin127.png",
  HAND_SKIN128D: "img/day-hand-skin128.png",
  HAND_SKIN128N: "img/night-hand-skin128.png",
  HAND_SKIN129D: "img/day-hand-skin129.png",
  HAND_SKIN129N: "img/night-hand-skin129.png",
  HAND_SKIN130D: "img/day-hand-skin130.png",
  HAND_SKIN130N: "img/night-hand-skin130.png",
  HAND_SKIN131D: "img/day-hand-skin131.png",
  HAND_SKIN131N: "img/night-hand-skin131.png",
  HAND_SKIN132D: "img/day-hand-skin130.png",
  HAND_SKIN132N: "img/night-hand-skin130.png",
  HAND_SKIN133D: "img/day-hand-skin133.png",
  HAND_SKIN133N: "img/night-hand-skin133.png",
  HAND_SKIN134D: "img/day-hand-skin134.png",
  HAND_SKIN134N: "img/night-hand-skin134.png",
  HAND_SKIN135D: "img/day-hand-skin135.png",
  HAND_SKIN135N: "img/night-hand-skin135.png",
  HAND_SKIN136D: "img/day-hand-skin136.png",
  HAND_SKIN136N: "img/night-hand-skin136.png",
  HAND_SKIN137D: "img/day-hand-skin137.png",
  HAND_SKIN137N: "img/night-hand-skin137.png",
  HAND_SKIN138D: "img/day-hand-skin138.png",
  HAND_SKIN138N: "img/night-hand-skin138.png",
  HAND_SKIN139D: "img/day-hand-skin139.png",
  HAND_SKIN139N: "img/night-hand-skin139.png",
  HAND_SKIN140D: "img/day-hand-skin140.png",
  HAND_SKIN140N: "img/night-hand-skin140.png",
  HAND_SKIN141D: "img/day-hand-skin141.png",
  HAND_SKIN141N: "img/night-hand-skin141.png",
  HAND_SKIN142D: "img/day-hand-skin142.png",
  HAND_SKIN142N: "img/night-hand-skin142.png",
  HAND_SKIN143D: "img/day-hand-skin143.png",
  HAND_SKIN143N: "img/night-hand-skin143.png",
  HAND_SKIN144D: "img/day-hand-skin144.png",
  HAND_SKIN144N: "img/night-hand-skin144.png",
  HAND_SKIN145D: "img/day-hand-skin145.png",
  HAND_SKIN145N: "img/night-hand-skin145.png",
  HAND_SKIN146D: "img/day-hand-skin146.png",
  HAND_SKIN146N: "img/night-hand-skin146.png",
  HAND_SKIN147D: "img/day-hand-skin147.png",
  HAND_SKIN147N: "img/night-hand-skin147.png",
  HAND_SKIN148D: "img/day-hand-skin148.png",
  HAND_SKIN148N: "img/night-hand-skin148.png",
  HAND_SKIN149D: "img/day-hand-skin149.png",
  HAND_SKIN149N: "img/night-hand-skin149.png",
  HAND_SKIN150D: "img/day-hand-skin150.png",
  HAND_SKIN150N: "img/night-hand-skin150.png",
  BAG_STARD: "img/day-bag-star0.png",
  BAG_STARN: "img/night-bag-star0.png",
  BAG0D: "img/day-bag0.png",
  BAG0N: "img/night-bag0.png",
  BAG1D: "img/day-bag1.png",
  BAG1N: "img/night-bag1.png",
  BAG2D: "img/day-bag2.png",
  BAG2N: "img/night-bag2.png",
  BAG3D: "img/day-bag3.png",
  BAG3N: "img/night-bag3.png",
  BAG4D: "img/day-bag4.png",
  BAG4N: "img/night-bag4.png",
  BAG5D: "img/day-bag5.png",
  BAG5N: "img/night-bag5.png",
  BAG6D: "img/day-bag6.png",
  BAG6N: "img/night-bag6.png",
  BAG7D: "img/day-bag7.png",
  BAG7N: "img/night-bag7.png",
  BAG8D: "img/day-bag8.png",
  BAG8N: "img/night-bag8.png",
  BAG9D: "img/day-bag9.png",
  BAG9N: "img/night-bag9.png",
  BAG10D: "img/day-bag10.png",
  BAG10N: "img/night-bag10.png",
  BAG11D: "img/day-bag11.png",
  BAG11N: "img/night-bag11.png",
  BAG13D: "img/day-bag13.png",
  BAG13N: "img/night-bag13.png",
  BAG14D: "img/day-bag14.png",
  BAG14N: "img/night-bag14.png",
  BAG16D: "img/day-bag16.png",
  BAG16N: "img/night-bag16.png",
  BAG17D: "img/day-bag17.png",
  BAG17N: "img/night-bag17.png",
  BAG18D: "img/day-bag18.png",
  BAG18N: "img/night-bag18.png",
  BAG19D: "img/day-bag19.png",
  BAG19N: "img/night-bag19.png",
  BAG20D: "img/day-bag20.png",
  BAG20N: "img/night-bag20.png",
  BAG21D: "img/day-bag21.png",
  BAG21N: "img/night-bag21.png",
  BAG22D: "img/day-bag22.png",
  BAG22N: "img/night-bag22.png",
  BAG23D: "img/day-bag23.png",
  BAG23N: "img/night-bag23.png",
  BAG24D: "img/day-bag24.png",
  BAG24N: "img/night-bag24.png",
  BAG25D: "img/day-bag25.png",
  BAG25N: "img/night-bag25.png",
  BAG26D: "img/day-bag26.png",
  BAG26N: "img/night-bag26.png",
  BAG27D: "img/day-bag27.png",
  BAG27N: "img/night-bag27.png",
  BAG28D: "img/day-bag28.png",
  BAG28N: "img/night-bag28.png",
  BAG29D: "img/day-bag29.png",
  BAG29N: "img/night-bag29.png",
  BAG30D: "img/day-bag30.png",
  BAG30N: "img/night-bag30.png",
  BAG31D: "img/day-bag31.png",
  BAG31N: "img/night-bag31.png",
  BAG32D: "img/day-bag32.png",
  BAG32N: "img/night-bag32.png",
  BAG33D: "img/day-bag33.png",
  BAG33N: "img/night-bag33.png",
  BAG34D: "img/day-bag34.png",
  BAG34N: "img/night-bag34.png",
  BAG35D: "img/day-bag35.png",
  BAG35N: "img/night-bag35.png",
  BAG36D: "img/day-bag36.png",
  BAG36N: "img/night-bag36.png",
  BAG37D: "img/day-bag37.png",
  BAG37N: "img/night-bag37.png",
  BAG38D: "img/day-bag38.png",
  BAG38N: "img/night-bag38.png",
  BAG39D: "img/day-bag39.png",
  BAG39N: "img/night-bag39.png",
  BAG40D: "img/day-bag40.png",
  BAG40N: "img/night-bag40.png",
  BAG41D: "img/day-bag41.png",
  BAG41N: "img/night-bag41.png",
  BAG42D: "img/day-bag42.png",
  BAG42N: "img/night-bag42.png",
  BAG43D: "img/day-bag43.png",
  BAG43N: "img/night-bag43.png",
  BAG44D: "img/day-bag44.png",
  BAG44N: "img/night-bag44.png",
  BAG45D: "img/day-bag45.png",
  BAG45N: "img/night-bag45.png",
  BAG46D: "img/day-bag46.png",
  BAG46N: "img/night-bag46.png",
  BAG47D: "img/day-bag47.png",
  BAG47N: "img/night-bag47.png",
  BAG48D: "img/day-bag48.png",
  BAG48N: "img/night-bag48.png",
  BAG49D: "img/day-bag49.png",
  BAG49N: "img/night-bag49.png",
  BAG50D: "img/day-bag50.png",
  BAG50N: "img/night-bag50.png",
  BAG51D: "img/day-bag51.png",
  BAG51N: "img/night-bag51.png",
  BAG52D: "img/day-bag52.png",
  BAG52N: "img/night-bag52.png",
  BAG53D: "img/day-bag53.png",
  BAG53N: "img/night-bag53.png",
  BAG54D: "img/day-bag54.png",
  BAG54N: "img/night-bag54.png",
  BAG55D: "img/day-bag55.png",
  BAG55N: "img/night-bag55.png",
  BAG56D: "img/day-bag56.png",
  BAG56N: "img/night-bag56.png",
  BAG57D: "img/day-bag57.png",
  BAG57N: "img/night-bag57.png",
  BAG58D: "img/day-bag58.png",
  BAG58N: "img/night-bag58.png",
  BAG59D: "img/day-bag59.png",
  BAG59N: "img/night-bag59.png",
  BAG60D: "img/day-bag60.png",
  BAG60N: "img/night-bag60.png",
  BAG61D: "img/day-bag61.png",
  BAG61N: "img/night-bag61.png",
  BAG62D: "img/day-bag62.png",
  BAG62N: "img/night-bag62.png",
  BAG63D: "img/day-bag63.png",
  BAG63N: "img/night-bag63.png",
  BAG64D: "img/day-bag64.png",
  BAG64N: "img/night-bag64.png",
  BAG65D: "img/day-bag65.png",
  BAG65N: "img/night-bag65.png",
  BAG66D: "img/day-bag66.png",
  BAG66N: "img/night-bag66.png",
  BAG67D: "img/day-bag67.png",
  BAG67N: "img/night-bag67.png",
  BAG68D: "img/day-bag68.png",
  BAG68N: "img/night-bag68.png",
  ACCESSORY0D: "img/day-accessory0.png",
  ACCESSORY17D: "img/day-accessory0-pacques.png",
  ACCESSORY17N: "img/night-accessory0-pacques.png",
  ACCESSORY13D: "img/day-accessory13.png",
  ACCESSORY13N: "img/night-accessory13.png",
  ACCESSORY14D: "img/day-accessory14.png",
  ACCESSORY14N: "img/night-accessory14.png",
  ACCESSORY15D: "img/day-accessory15.png",
  ACCESSORY15N: "img/night-accessory15.png",
  ACCESSORY16D: "img/day-accessory16.png",
  ACCESSORY16N: "img/night-accessory16.png",
  ACCESSORY18D: "img/day-accessory17.png",
  ACCESSORY18N: "img/day-accessory17.png",
  ACCESSORY19D: "img/day-accessory19.png",
  ACCESSORY19N: "img/night-accessory19.png",
  ACCESSORY20D: "img/day-accessory20.png",
  ACCESSORY20N: "img/night-accessory20.png",
  ACCESSORY21D: "img/day-accessory21.png",
  ACCESSORY21N: "img/night-accessory21.png",
  ACCESSORY22D: "img/day-accessory22.png",
  ACCESSORY22N: "img/night-accessory22.png",
  ACCESSORY23D: "img/day-accessory23.png",
  ACCESSORY23N: "img/night-accessory23.png",
  ACCESSORY24D: "img/day-accessory24.png",
  ACCESSORY24N: "img/night-accessory24.png",
  ACCESSORY25D: "img/day-accessory25.png",
  ACCESSORY25N: "img/night-accessory25.png",
  ACCESSORY26D: "img/day-accessory26.png",
  ACCESSORY26N: "img/night-accessory26.png",
  ACCESSORY27D: "img/day-accessory27.png",
  ACCESSORY27N: "img/night-accessory27.png",
  ACCESSORY28D: "img/day-accessory18.png",
  ACCESSORY28N: "img/night-accessory18.png",
  ACCESSORY29D: "img/day-accessory29.png",
  ACCESSORY29N: "img/night-accessory29.png",
  ACCESSORY30D: "img/day-accessory30.png",
  ACCESSORY30N: "img/night-accessory30.png",
  ACCESSORY31D: "img/day-accessory31.png",
  ACCESSORY31N: "img/night-accessory31.png",
  ACCESSORY32D: "img/day-accessory32.png",
  ACCESSORY32N: "img/night-accessory32.png",
  ACCESSORY33D: "img/day-accessory33.png",
  ACCESSORY33N: "img/night-accessory33.png",
  ACCESSORY34D: "img/day-accessory34.png",
  ACCESSORY34N: "img/night-accessory34.png",
  ACCESSORY35D: "img/day-accessory35.png",
  ACCESSORY35N: "img/night-accessory35.png",
  ACCESSORY36D: "img/day-accessory28.png",
  ACCESSORY36N: "img/night-accessory28.png",
  ACCESSORY37D: "img/day-accessory36.png",
  ACCESSORY37N: "img/night-accessory36.png",
  ACCESSORY38D: "img/day-accessory37.png",
  ACCESSORY38N: "img/night-accessory37.png",
  ACCESSORY39D: "img/day-accessory39.png",
  ACCESSORY39N: "img/night-accessory39.png",
  ACCESSORY40D: "img/day-accessory40.png",
  ACCESSORY40N: "img/night-accessory40.png",
  ACCESSORY41D: "img/day-accessory41.png",
  ACCESSORY41N: "img/night-accessory41.png",
  ACCESSORY42D: "img/day-accessory42.png",
  ACCESSORY42N: "img/night-accessory42.png",
  ACCESSORY43D: "img/day-accessory43.png",
  ACCESSORY43N: "img/night-accessory43.png",
  ACCESSORY44D: "img/day-accessory44.png",
  ACCESSORY44N: "img/night-accessory44.png",
  ACCESSORY45D: "img/day-accessory38.png",
  ACCESSORY45N: "img/night-accessory38.png",
  ACCESSORY46D: "img/day-accessory46.png",
  ACCESSORY46N: "img/night-accessory46.png",
  ACCESSORY47D: "img/day-accessory47.png",
  ACCESSORY47N: "img/night-accessory47.png",
  ACCESSORY48D: "img/day-accessory48.png",
  ACCESSORY48N: "img/night-accessory48.png",
  ACCESSORY49D: "img/day-accessory49.png",
  ACCESSORY49N: "img/night-accessory49.png",
  ACCESSORY50D: "img/day-accessory45.png",
  ACCESSORY50N: "img/night-accessory45.png",
  ACCESSORY51D: "img/day-accessory50.png",
  ACCESSORY51N: "img/night-accessory50.png",
  ACCESSORY52D: "img/day-accessory51.png",
  ACCESSORY52N: "img/night-accessory51.png",
  ACCESSORY53D: "img/day-accessory52.png",
  ACCESSORY53N: "img/night-accessory52.png",
  ACCESSORY54D: "img/day-accessory53.png",
  ACCESSORY54N: "img/night-accessory53.png",
  ACCESSORY55D: "img/day-accessory54.png",
  ACCESSORY55N: "img/night-accessory54.png",
  ACCESSORY56D: "img/day-accessory55.png",
  ACCESSORY56N: "img/night-accessory55.png",
  ACCESSORY57D: "img/day-accessory56.png",
  ACCESSORY57N: "img/night-accessory56.png",
  ACCESSORY58D: "img/day-accessory57.png",
  ACCESSORY58N: "img/night-accessory57.png",
  ACCESSORY59D: "img/day-accessory58.png",
  ACCESSORY59N: "img/night-accessory58.png",
  ACCESSORY60D: "img/day-accessory59.png",
  ACCESSORY60N: "img/night-accessory59.png",
  ACCESSORY61D: "img/day-accessory60.png",
  ACCESSORY61N: "img/night-accessory60.png",
  ACCESSORY62D: "img/day-accessory61.png",
  ACCESSORY62N: "img/night-accessory61.png",
  ACCESSORY63D: "img/day-accessory62.png",
  ACCESSORY63N: "img/night-accessory62.png",
  ACCESSORY64D: "img/day-accessory63.png",
  ACCESSORY64N: "img/night-accessory63.png",
  ACCESSORY65D: "img/day-accessory64.png",
  ACCESSORY65N: "img/night-accessory64.png",
  ACCESSORY66D: "img/day-accessory65.png",
  ACCESSORY66N: "img/night-accessory65.png",
  ACCESSORY67D: "img/day-accessory66.png",
  ACCESSORY67N: "img/night-accessory66.png",
  ACCESSORY68D: "img/day-accessory67.png",
  ACCESSORY68N: "img/night-accessory67.png",
  ACCESSORY69D: "img/day-accessory68.png",
  ACCESSORY69N: "img/night-accessory68.png",
  ACCESSORY70D: "img/day-accessory69.png",
  ACCESSORY70N: "img/night-accessory69.png",
  ACCESSORY71D: "img/day-accessory70.png",
  ACCESSORY71N: "img/night-accessory70.png",
  ACCESSORY72D: "img/day-accessory71.png",
  ACCESSORY72N: "img/night-accessory71.png",
  ACCESSORY73D: "img/day-accessory72.png",
  ACCESSORY73N: "img/night-accessory72.png",
  ACCESSORY74D: "img/day-accessory73.png",
  ACCESSORY74N: "img/night-accessory73.png",
  ACCESSORY75D: "img/day-accessory74.png",
  ACCESSORY75N: "img/night-accessory74.png",
  ACCESSORY76D: "img/day-accessory75.png",
  ACCESSORY76N: "img/night-accessory75.png",
  ACCESSORY77D: "img/day-accessory76.png",
  ACCESSORY77N: "img/night-accessory76.png",
  ACCESSORY78D: "img/day-accessory77.png",
  ACCESSORY78N: "img/night-accessory77.png",
  ACCESSORY79D: "img/day-accessory78.png",
  ACCESSORY79N: "img/night-accessory78.png",
  ACCESSORY80D: "img/day-accessory79.png",
  ACCESSORY80N: "img/night-accessory79.png",
  ACCESSORY81D: "img/day-accessory80.png",
  ACCESSORY81N: "img/night-accessory80.png",
  ACCESSORY82D: "img/day-accessory81.png",
  ACCESSORY82N: "img/night-accessory81.png",
  BOOK0D: "img/day-book0.png",
  BOOK0N: "img/night-book0.png",
  BOOK1D: "img/day-book1.png",
  BOOK1N: "img/night-book1.png",
  BOOK2D: "img/day-book2.png",
  BOOK2N: "img/night-book2.png",
  BOOK3D: "img/day-book3.png",
  BOOK3N: "img/night-book3.png",
  BOOK4D: "img/day-book4.png",
  BOOK4N: "img/night-book4.png",
  BOOK5D: "img/day-book5.png",
  BOOK5N: "img/night-book5.png",
  BOOK6D: "img/day-book6.png",
  BOOK6N: "img/night-book6.png",
  BOOK7D: "img/day-book7.png",
  BOOK7N: "img/night-book7.png",
  BOOK8D: "img/day-book8.png",
  BOOK8N: "img/night-book8.png",
  BOOK9D: "img/day-book9.png",
  BOOK9N: "img/night-book9.png",
  BOOK10D: "img/day-book10.png",
  BOOK10N: "img/night-book10.png",
  BOOK11D: "img/day-book11.png",
  BOOK11N: "img/night-book11.png",
  BOOK12D: "img/day-book12.png",
  BOOK12N: "img/night-book12.png",
  BOOK13D: "img/day-book13.png",
  BOOK13N: "img/night-book13.png",
  BOOK14D: "img/day-book14.png",
  BOOK14N: "img/night-book14.png",
  BOOK15D: "img/day-book15.png",
  BOOK15N: "img/night-book15.png",
  BOOK16D: "img/day-book16.png",
  BOOK16N: "img/night-book16.png",
  BOOK17D: "img/day-book17.png",
  BOOK17N: "img/night-book17.png",
  BOOK18D: "img/day-book18.png",
  BOOK18N: "img/night-book18.png",
  BOOK19D: "img/day-book19.png",
  BOOK19N: "img/night-book19.png",
  BOOK20D: "img/day-book20.png",
  BOOK20N: "img/night-book20.png",
  BOOK21D: "img/day-book21.png",
  BOOK21N: "img/night-book21.png",
  BOOK22D: "img/day-book22.png",
  BOOK22N: "img/night-book22.png",
  BOOK23D: "img/day-book23.png",
  BOOK23N: "img/night-book23.png",
  BOOK24D: "img/day-book24.png",
  BOOK24N: "img/night-book24.png",
  BOOK25D: "img/day-book25.png",
  BOOK25N: "img/night-book25.png",
  BOOK26D: "img/day-book26.png",
  BOOK26N: "img/night-book26.png",
  BOOK27D: "img/day-book27.png",
  BOOK27N: "img/night-book27.png",
  BOOK28D: "img/day-book28.png",
  BOOK28N: "img/night-book28.png",
  BOOK29D: "img/day-book29.png",
  BOOK29N: "img/night-book29.png",
  BOOK30D: "img/day-book30.png",
  BOOK30N: "img/night-book30.png",
  BOOK31D: "img/day-book31.png",
  BOOK31N: "img/night-book31.png",
  BOOK32D: "img/day-book32.png",
  BOOK32N: "img/night-book32.png",
  BOOK33D: "img/day-book33.png",
  BOOK33N: "img/night-book33.png",
  BOOK34D: "img/day-book34.png",
  BOOK34N: "img/night-book34.png",
  BOOK35D: "img/day-book35.png",
  BOOK35N: "img/night-book35.png",
  BOOK36D: "img/day-book36.png",
  BOOK36N: "img/night-book36.png",
  BOOK37D: "img/day-book37.png",
  BOOK37N: "img/night-book37.png",
  BOOK38D: "img/day-book38.png",
  BOOK38N: "img/night-book38.png",
  BOOK39D: "img/day-book39.png",
  BOOK39N: "img/night-book39.png",
  BOOK40D: "img/day-book40.png",
  BOOK40N: "img/night-book40.png",
  BOOK41D: "img/day-book41.png",
  BOOK41N: "img/night-book41.png",
  BOOK42D: "img/day-book42.png",
  BOOK42N: "img/night-book42.png",
  BOOK43D: "img/day-book43.png",
  BOOK43N: "img/night-book43.png",
  BOOK44D: "img/day-book44.png",
  BOOK44N: "img/night-book44.png",
  BOOK45D: "img/day-book45.png",
  BOOK45N: "img/night-book45.png",
  CRATE1D: "img/day-crate1.png",
  CRATE1N: "img/night-crate1.png",
  CRATE2D: "img/day-crate2.png",
  CRATE2N: "img/night-crate2.png",
  CRATE3D: "img/day-crate3.png",
  CRATE3N: "img/night-crate3.png",
  CRATE4D: "img/day-crate4.png",
  CRATE4N: "img/night-crate4.png",
  CRATE5D: "img/day-crate5.png",
  CRATE5N: "img/night-crate5.png",
  CRATE6D: "img/day-crate6.png",
  CRATE6N: "img/night-crate6.png",
  CRATE7D: "img/day-crate7.png",
  CRATE7N: "img/night-crate7.png",
  CRATE8D: "img/day-crate8.png",
  CRATE8N: "img/night-crate8.png",
  CRATE9D: "img/day-crate9.png",
  CRATE9N: "img/night-crate9.png",
  CRATE10D: "img/day-crate10.png",
  CRATE10N: "img/night-crate10.png",
  CRATE11D: "img/day-crate11.png",
  CRATE11N: "img/night-crate11.png",
  CRATE12D: "img/day-crate12.png",
  CRATE12N: "img/night-crate12.png",
  CRATE13D: "img/day-crate13.png",
  CRATE13N: "img/night-crate13.png",
  CRATE14D: "img/day-crate14.png",
  CRATE14N: "img/night-crate14.png",
  CRATE15D: "img/day-crate15.png",
  CRATE15N: "img/night-crate15.png",
  CRATE16D: "img/day-crate16.png",
  CRATE16N: "img/night-crate16.png",
  CRATE17D: "img/day-crate17.png",
  CRATE17N: "img/night-crate17.png",
  CRATE18D: "img/day-crate18.png",
  CRATE18N: "img/night-crate18.png",
  CRATE19D: "img/day-crate19.png",
  CRATE19N: "img/night-crate19.png",
  CRATE20D: "img/day-crate20.png",
  CRATE20N: "img/night-crate20.png",
  CRATE21D: "img/day-crate21.png",
  CRATE21N: "img/night-crate21.png",
  CRATE22D: "img/day-crate22.png",
  CRATE22N: "img/night-crate22.png",
  CRATE23D: "img/day-crate23.png",
  CRATE23N: "img/night-crate23.png",
  CRATE24D: "img/day-crate24.png",
  CRATE24N: "img/night-crate24.png",
  CRATE25D: "img/day-crate25.png",
  CRATE25N: "img/night-crate25.png",
  CRATE26D: "img/day-crate26.png",
  CRATE26N: "img/night-crate26.png",
  CRATE27D: "img/day-crate27.png",
  CRATE27N: "img/night-crate27.png",
  CRATE28D: "img/day-crate28.png",
  CRATE28N: "img/night-crate28.png",
  CRATE29D: "img/day-crate29.png",
  CRATE29N: "img/night-crate29.png",
  CRATE30D: "img/day-crate30.png",
  CRATE30N: "img/night-crate30.png",
  CRATE31D: "img/day-crate31.png",
  CRATE31N: "img/night-crate31.png",
  CRATE32D: "img/day-crate32.png",
  CRATE32N: "img/night-crate32.png",
  CRATE33D: "img/day-crate33.png",
  CRATE33N: "img/night-crate33.png",
  CRATE34D: "img/day-crate34.png",
  CRATE34N: "img/night-crate34.png",
  CRATE35D: "img/day-crate35.png",
  CRATE35N: "img/night-crate35.png",
  CRATE36D: "img/day-crate36.png",
  CRATE36N: "img/night-crate36.png",
  CRATE37D: "img/day-crate37.png",
  CRATE37N: "img/night-crate37.png",
  CRATE38D: "img/day-crate38.png",
  CRATE38N: "img/night-crate38.png",
  CRATE39D: "img/day-crate39.png",
  CRATE39N: "img/night-crate39.png",
  CRATE40D: "img/day-crate40.png",
  CRATE40N: "img/night-crate40.png",
  CRATE41D: "img/day-crate41.png",
  CRATE41N: "img/night-crate41.png",
  CRATE42D: "img/day-crate42.png",
  CRATE42N: "img/night-crate42.png",
  CRATE43D: "img/day-crate43.png",
  CRATE43N: "img/night-crate43.png",
  CRATE44D: "img/day-crate44.png",
  CRATE44N: "img/night-crate44.png",
  CRATE45D: "img/day-crate45.png",
  CRATE45N: "img/night-crate45.png",
  CRATE46D: "img/day-crate46.png",
  CRATE46N: "img/night-crate46.png",
  CRATE47D: "img/day-crate47.png",
  CRATE47N: "img/night-crate47.png",
  CRATE48D: "img/day-crate48.png",
  CRATE48N: "img/night-crate48.png",
  CRATE49D: "img/day-crate49.png",
  CRATE49N: "img/night-crate49.png",
  CRATE50D: "img/day-crate50.png",
  CRATE50N: "img/night-crate50.png",
  CRATE51D: "img/day-crate51.png",
  CRATE51N: "img/night-crate51.png",
  CRATE52D: "img/day-crate52.png",
  CRATE52N: "img/night-crate52.png",
  CRATE53D: "img/day-crate53.png",
  CRATE53N: "img/night-crate53.png",
  CRATE54D: "img/day-crate54.png",
  CRATE54N: "img/night-crate54.png",
  CRATE55D: "img/day-crate55.png",
  CRATE55N: "img/night-crate55.png",
  CRATE56D: "img/day-crate56.png",
  CRATE56N: "img/night-crate56.png",
  CRATE57D: "img/day-crate57.png",
  CRATE57N: "img/night-crate57.png",
  CRATE58D: "img/day-crate58.png",
  CRATE58N: "img/night-crate58.png",
  CRATE59D: "img/day-crate59.png",
  CRATE59N: "img/night-crate59.png",
  CRATE60D: "img/day-crate60.png",
  CRATE60N: "img/night-crate60.png",
  CRATE61D: "img/day-crate61.png",
  CRATE61N: "img/night-crate61.png",
  CRATE62D: "img/day-crate62.png",
  CRATE62N: "img/night-crate62.png",
  CRATE63D: "img/day-crate63.png",
  CRATE63N: "img/night-crate63.png",
  CRATE64D: "img/day-crate64.png",
  CRATE64N: "img/night-crate64.png",
  CRATE65D: "img/day-crate65.png",
  CRATE65N: "img/night-crate65.png",
  CRATE66D: "img/day-crate66.png",
  CRATE66N: "img/night-crate66.png",
  CRATE67D: "img/day-crate67.png",
  CRATE67N: "img/night-crate67.png",
  CRATE68D: "img/day-crate68.png",
  CRATE68N: "img/night-crate68.png",
  CRATE69D: "img/day-crate69.png",
  CRATE69N: "img/night-crate69.png",
  CRATE70D: "img/day-crate70.png",
  CRATE70N: "img/night-crate70.png",
  CRATE71D: "img/day-crate71.png",
  CRATE71N: "img/night-crate71.png",
  CRATE72D: "img/day-crate72.png",
  CRATE72N: "img/night-crate72.png",
  DECORATION_0D: "img/day-herb0.png",
  DECORATION_1D: "img/day-herb1.png",
  DECORATION_2D: "img/day-herb2.png",
  DECORATION_3D: "img/day-herb3.png",
  DECORATION_4D: "img/day-herb4.png",
  DECORATION_5D: "img/day-herb5.png",
  DECORATION_6D: "img/day-herb6.png",
  DECORATION_7D: "img/day-herb7.png",
  DECORATION_8D: "img/day-herb8.png",
  DECORATION_9D: "img/day-herb9.png",
  DECORATION_10D: "img/day-herb10.png",
  DECORATION_11D: "img/day-herb11.png",
  DECORATION_12D: "img/day-herb12.png",
  DECORATION_13D: "img/day-herb13.png",
  DECORATION_14D: "img/day-herb14.png",
  DECORATION_15D: "img/day-herb15.png",
  DECORATION_16D: "img/day-shell0.png",
  DECORATION_17D: "img/day-shell1.png",
  DECORATION_18D: "img/day-shell2.png",
  DECORATION_19D: "img/day-leaf1.png",
  DECORATION_20D: "img/day-leaf2.png",
  DECORATION_21D: "img/day-leaf3.png",
  DECORATION_22D: "img/day-leaf4.png",
  DECORATION_23D: "img/day-leaf5.png",
  DECORATION_24D: "img/day-leaf6.png",
  DECORATION_25D: "img/day-leaf7.png",
  DECORATION_26D: "img/day-leaf8.png",
  DECORATION_27D: "img/day-rock0.png",
  DECORATION_28D: "img/day-rock1.png",
  DECORATION_29D: "img/day-rock2.png",
  DECORATION_30D: "img/day-rock3.png",
  DECORATION_31D: "img/day-rock4.png",
  DECORATION_32D: "img/day-rock5.png",
  DECORATION_33D: "img/day-rock6.png",
  DECORATION_34D: "img/day-rock7.png",
  DECORATION_35D: "img/day-rock8.png",
  DECORATION_36D: "img/day-rock9.png",
  DECORATION_37D: "img/day-rock10.png",
  DECORATION_38D: "img/day-rock11.png",
  DECORATION_39D: "img/day-rock12.png",
  DECORATION_40D: "img/day-rock13.png",
  DECORATION_41D: "img/day-flower1.png",
  DECORATION_42D: "img/day-flower2.png",
  DECORATION_43D: "img/day-flower3.png",
  DECORATION_44D: "img/day-flower4.png",
  DECORATION_45D: "img/day-flower5.png",
  DECORATION_46D: "img/day-flower6.png",
  DECORATION_47D: "img/day-flower7.png",
  DECORATION_48D: "img/day-flower8.png",
  DECORATION_49D: "img/day-flower9.png",
  DECORATION_50D: "img/day-herb16.png",
  DECORATION_51D: "img/day-herb17.png",
  DECORATION_52D: "img/day-herb18.png",
  DECORATION_53D: "img/day-herb19.png",
  DECORATION_54D: "img/day-herb20.png",
  DECORATION_55D: "img/day-herb21.png",
  DECORATION_0N: "img/night-herb0.png",
  DECORATION_1N: "img/night-herb1.png",
  DECORATION_2N: "img/night-herb2.png",
  DECORATION_3N: "img/night-herb3.png",
  DECORATION_4N: "img/night-herb4.png",
  DECORATION_5N: "img/night-herb5.png",
  DECORATION_6N: "img/night-herb6.png",
  DECORATION_7N: "img/night-herb7.png",
  DECORATION_8N: "img/night-herb8.png",
  DECORATION_9N: "img/night-herb9.png",
  DECORATION_10N: "img/night-herb10.png",
  DECORATION_11N: "img/night-herb11.png",
  DECORATION_12N: "img/night-herb12.png",
  DECORATION_13N: "img/night-herb13.png",
  DECORATION_14N: "img/night-herb14.png",
  DECORATION_15N: "img/night-herb15.png",
  DECORATION_16N: "img/night-shell0.png",
  DECORATION_17N: "img/night-shell1.png",
  DECORATION_18N: "img/night-shell2.png",
  DECORATION_19N: "img/night-leaf1.png",
  DECORATION_20N: "img/night-leaf2.png",
  DECORATION_21N: "img/night-leaf3.png",
  DECORATION_22N: "img/night-leaf4.png",
  DECORATION_23N: "img/night-leaf5.png",
  DECORATION_24N: "img/night-leaf6.png",
  DECORATION_25N: "img/night-leaf7.png",
  DECORATION_26N: "img/night-leaf8.png",
  DECORATION_27N: "img/night-rock0.png",
  DECORATION_28N: "img/night-rock1.png",
  DECORATION_29N: "img/night-rock2.png",
  DECORATION_30N: "img/night-rock3.png",
  DECORATION_31N: "img/night-rock4.png",
  DECORATION_32N: "img/night-rock5.png",
  DECORATION_33N: "img/night-rock6.png",
  DECORATION_34N: "img/night-rock7.png",
  DECORATION_35N: "img/night-rock8.png",
  DECORATION_36N: "img/night-rock9.png",
  DECORATION_37N: "img/night-rock10.png",
  DECORATION_38N: "img/night-rock11.png",
  DECORATION_39N: "img/night-rock12.png",
  DECORATION_40N: "img/night-rock13.png",
  DECORATION_41N: "img/night-flower1.png",
  DECORATION_42N: "img/night-flower2.png",
  DECORATION_43N: "img/night-flower3.png",
  DECORATION_44N: "img/night-flower4.png",
  DECORATION_45N: "img/night-flower5.png",
  DECORATION_46N: "img/night-flower6.png",
  DECORATION_47N: "img/night-flower7.png",
  DECORATION_48N: "img/night-flower8.png",
  DECORATION_49N: "img/night-flower9.png",
  DECORATION_50N: "img/night-herb16.png",
  DECORATION_51N: "img/night-herb17.png",
  DECORATION_52N: "img/night-herb18.png",
  DECORATION_53N: "img/night-herb19.png",
  DECORATION_54N: "img/night-herb20.png",
  DECORATION_55N: "img/night-herb21.png",
  DAY_RIVER_000_010_000: "img/day-river000-010-000.png",
  DAY_RIVER_000_010_010: "img/day-river000-010-010.png",
  DAY_RIVER_000_011_000: "img/day-river000-011-000.png",
  DAY_RIVER_000_011_010: "img/day-river000-011-010.png",
  DAY_RIVER_000_011_011: "img/day-river000-011-011.png",
  DAY_RIVER_000_110_000: "img/day-river000-110-000.png",
  DAY_RIVER_000_110_010: "img/day-river000-110-010.png",
  DAY_RIVER_000_110_110: "img/day-river000-110-110.png",
  DAY_RIVER_000_111_000: "img/day-river000-111-000.png",
  DAY_RIVER_000_111_010: "img/day-river000-111-010.png",
  DAY_RIVER_000_111_011: "img/day-river000-111-011.png",
  DAY_RIVER_000_111_110: "img/day-river000-111-110.png",
  DAY_RIVER_000_111_111: "img/day-river000-111-111.png",
  DAY_RIVER_010_010_000: "img/day-river010-010-000.png",
  DAY_RIVER_010_010_010: "img/day-river010-010-010.png",
  DAY_RIVER_010_011_000: "img/day-river010-011-000.png",
  DAY_RIVER_010_011_010: "img/day-river010-011-010.png",
  DAY_RIVER_010_011_011: "img/day-river010-011-011.png",
  DAY_RIVER_010_110_000: "img/day-river010-110-000.png",
  DAY_RIVER_010_110_010: "img/day-river010-110-010.png",
  DAY_RIVER_010_110_110: "img/day-river010-110-110.png",
  DAY_RIVER_010_111_000: "img/day-river010-111-000.png",
  DAY_RIVER_010_111_010: "img/day-river010-111-010.png",
  DAY_RIVER_010_111_011: "img/day-river010-111-011.png",
  DAY_RIVER_010_111_110: "img/day-river010-111-110.png",
  DAY_RIVER_010_111_111: "img/day-river010-111-111.png",
  DAY_RIVER_011_011_000: "img/day-river011-011-000.png",
  DAY_RIVER_011_011_010: "img/day-river011-011-010.png",
  DAY_RIVER_011_011_011: "img/day-river011-011-011.png",
  DAY_RIVER_011_111_000: "img/day-river011-111-000.png",
  DAY_RIVER_011_111_010: "img/day-river011-111-010.png",
  DAY_RIVER_011_111_011: "img/day-river011-111-011.png",
  DAY_RIVER_011_111_110: "img/day-river011-111-110.png",
  DAY_RIVER_011_111_111: "img/day-river011-111-111.png",
  DAY_RIVER_110_110_000: "img/day-river110-110-000.png",
  DAY_RIVER_110_110_010: "img/day-river110-110-010.png",
  DAY_RIVER_110_110_110: "img/day-river110-110-110.png",
  DAY_RIVER_110_111_000: "img/day-river110-111-000.png",
  DAY_RIVER_110_111_010: "img/day-river110-111-010.png",
  DAY_RIVER_110_111_011: "img/day-river110-111-011.png",
  DAY_RIVER_110_111_110: "img/day-river110-111-110.png",
  DAY_RIVER_110_111_111: "img/day-river110-111-111.png",
  DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
  DAY_RIVER_111_111_110: "img/day-river111-111-110.png",
  DAY_RIVER_111_111_011: "img/day-river111-111-011.png",
  DAY_RIVER_111_111_000: "img/day-river111-111-000.png",
  DAY_RIVER_111_111_111: "img/day-river111-111-111.png",
  DAY_RIVER_111_111_010: "img/day-river111-111-010.png",
  NIGHT_RIVER_000_010_000: "img/night-river000-010-000.png",
  NIGHT_RIVER_000_010_010: "img/night-river000-010-010.png",
  NIGHT_RIVER_000_011_000: "img/night-river000-011-000.png",
  NIGHT_RIVER_000_011_010: "img/night-river000-011-010.png",
  NIGHT_RIVER_000_011_011: "img/night-river000-011-011.png",
  NIGHT_RIVER_000_110_000: "img/night-river000-110-000.png",
  NIGHT_RIVER_000_110_010: "img/night-river000-110-010.png",
  NIGHT_RIVER_000_110_110: "img/night-river000-110-110.png",
  NIGHT_RIVER_000_111_000: "img/night-river000-111-000.png",
  NIGHT_RIVER_000_111_010: "img/night-river000-111-010.png",
  NIGHT_RIVER_000_111_011: "img/night-river000-111-011.png",
  NIGHT_RIVER_000_111_110: "img/night-river000-111-110.png",
  NIGHT_RIVER_000_111_111: "img/night-river000-111-111.png",
  NIGHT_RIVER_010_010_000: "img/night-river010-010-000.png",
  NIGHT_RIVER_010_010_010: "img/night-river010-010-010.png",
  NIGHT_RIVER_010_011_000: "img/night-river010-011-000.png",
  NIGHT_RIVER_010_011_010: "img/night-river010-011-010.png",
  NIGHT_RIVER_010_011_011: "img/night-river010-011-011.png",
  NIGHT_RIVER_010_110_000: "img/night-river010-110-000.png",
  NIGHT_RIVER_010_110_010: "img/night-river010-110-010.png",
  NIGHT_RIVER_010_110_110: "img/night-river010-110-110.png",
  NIGHT_RIVER_010_111_000: "img/night-river010-111-000.png",
  NIGHT_RIVER_010_111_010: "img/night-river010-111-010.png",
  NIGHT_RIVER_010_111_011: "img/night-river010-111-011.png",
  NIGHT_RIVER_010_111_110: "img/night-river010-111-110.png",
  NIGHT_RIVER_010_111_111: "img/night-river010-111-111.png",
  NIGHT_RIVER_011_011_000: "img/night-river011-011-000.png",
  NIGHT_RIVER_011_011_010: "img/night-river011-011-010.png",
  NIGHT_RIVER_011_011_011: "img/night-river011-011-011.png",
  NIGHT_RIVER_011_111_000: "img/night-river011-111-000.png",
  NIGHT_RIVER_011_111_010: "img/night-river011-111-010.png",
  NIGHT_RIVER_011_111_011: "img/night-river011-111-011.png",
  NIGHT_RIVER_011_111_110: "img/night-river011-111-110.png",
  NIGHT_RIVER_011_111_111: "img/night-river011-111-111.png",
  NIGHT_RIVER_110_110_000: "img/night-river110-110-000.png",
  NIGHT_RIVER_110_110_010: "img/night-river110-110-010.png",
  NIGHT_RIVER_110_110_110: "img/night-river110-110-110.png",
  NIGHT_RIVER_110_111_000: "img/night-river110-111-000.png",
  NIGHT_RIVER_110_111_010: "img/night-river110-111-010.png",
  NIGHT_RIVER_110_111_011: "img/night-river110-111-011.png",
  NIGHT_RIVER_110_111_110: "img/night-river110-111-110.png",
  NIGHT_RIVER_110_111_111: "img/night-river110-111-111.png",
  NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
  NIGHT_RIVER_111_111_110: "img/night-river111-111-110.png",
  NIGHT_RIVER_111_111_011: "img/night-river111-111-011.png",
  NIGHT_RIVER_111_111_000: "img/night-river111-111-000.png",
  NIGHT_RIVER_111_111_111: "img/night-river111-111-111.png",
  NIGHT_RIVER_111_111_010: "img/night-river111-111-010.png",
  DAY_RIVER_COMPO1: "img/day-pebblecompo1.png",
  DAY_RIVER_COMPO2: "img/day-pebblecompo2.png",
  DAY_RIVER_COMPO3: "img/day-pebblecompo3.png",
  DAY_RIVER_COMPO4: "img/day-pebblecompo4.png",
  DAY_RIVER_COMPO5: "img/day-pebblecompo5.png",
  DAY_RIVER_COMPO6: "img/day-pebblecompo6.png",
  DAY_RIVER_COMPO7: "img/day-pebblecompo7.png",
  DAY_RIVER_COMPO8: "img/day-pebblecompo8.png",
  DAY_RIVER_COMPO9: "img/day-pebblecompo9.png",
  DAY_RIVER_COMPO10: "img/day-pebblecompo10.png",
  DAY_RIVER_COMPO11: "img/day-pebblecompo11.png",
  DAY_RIVER_COMPO12: "img/day-pebblecompo12.png",
  DAY_RIVER_COMPO13: "img/day-pebblecompo13.png",
  DAY_RIVER_COMPO14: "img/day-pebblecompo14.png",
  DAY_RIVER_COMPO15: "img/day-pebblecompo15.png",
  DAY_RIVER_COMPO16: "img/day-pebblecompo16.png",
  DAY_RIVER_COMPO17: "img/day-pebblecompo17.png",
  DAY_RIVER_COMPO18: "img/day-pebblecompo18.png",
  DAY_RIVER_COMPO19: "img/day-pebblecompo19.png",
  DAY_RIVER_COMPO20: "img/day-pebblecompo20.png",
  DAY_RIVER_COMPO21: "img/day-pebblecompo21.png",
  DAY_RIVER_COMPO22: "img/day-pebblecompo22.png",
  DAY_RIVER_COMPO23: "img/day-pebblecompo23.png",
  DAY_RIVER_COMPO24: "img/day-pebblecompo24.png",
  DAY_RIVER_COMPO25: "img/day-pebblecompo25.png",
  DAY_RIVER_COMPO26: "img/day-pebblecompo26.png",
  DAY_RIVER_COMPO27: "img/day-pebblecompo27.png",
  DAY_RIVER_COMPO28: "img/day-pebblecompo28.png",
  NIGHT_RIVER_COMPO1: "img/night-pebblecompo1.png",
  NIGHT_RIVER_COMPO2: "img/night-pebblecompo2.png",
  NIGHT_RIVER_COMPO3: "img/night-pebblecompo3.png",
  NIGHT_RIVER_COMPO4: "img/night-pebblecompo4.png",
  NIGHT_RIVER_COMPO5: "img/night-pebblecompo5.png",
  NIGHT_RIVER_COMPO6: "img/night-pebblecompo6.png",
  NIGHT_RIVER_COMPO7: "img/night-pebblecompo7.png",
  NIGHT_RIVER_COMPO8: "img/night-pebblecompo8.png",
  NIGHT_RIVER_COMPO9: "img/night-pebblecompo9.png",
  NIGHT_RIVER_COMPO10: "img/night-pebblecompo10.png",
  NIGHT_RIVER_COMPO11: "img/night-pebblecompo11.png",
  NIGHT_RIVER_COMPO12: "img/night-pebblecompo12.png",
  NIGHT_RIVER_COMPO13: "img/night-pebblecompo13.png",
  NIGHT_RIVER_COMPO14: "img/night-pebblecompo14.png",
  NIGHT_RIVER_COMPO15: "img/night-pebblecompo15.png",
  NIGHT_RIVER_COMPO16: "img/night-pebblecompo16.png",
  NIGHT_RIVER_COMPO17: "img/night-pebblecompo17.png",
  NIGHT_RIVER_COMPO18: "img/night-pebblecompo18.png",
  NIGHT_RIVER_COMPO19: "img/night-pebblecompo19.png",
  NIGHT_RIVER_COMPO20: "img/night-pebblecompo20.png",
  NIGHT_RIVER_COMPO21: "img/night-pebblecompo21.png",
  NIGHT_RIVER_COMPO22: "img/night-pebblecompo22.png",
  NIGHT_RIVER_COMPO23: "img/night-pebblecompo23.png",
  NIGHT_RIVER_COMPO24: "img/night-pebblecompo24.png",
  NIGHT_RIVER_COMPO25: "img/night-pebblecompo25.png",
  NIGHT_RIVER_COMPO26: "img/night-pebblecompo26.png",
  NIGHT_RIVER_COMPO27: "img/night-pebblecompo27.png",
  NIGHT_RIVER_COMPO28: "img/night-pebblecompo28.png",
  BABY_MAMMOTHD: "img/day-baby-mammoth.png",
  BABY_MAMMOTH_TAMEDD: "img/day-baby-mammoth-tamed.png",
  BABY_MAMMOTH_ATTACKD: "img/day-baby-mammoth-angry.png",
  BABY_MAMMOTHN: "img/night-baby-mammoth.png",
  BABY_MAMMOTH_TAMEDN: "img/night-baby-mammoth-tamed.png",
  BABY_MAMMOTH_ATTACKN: "img/night-baby-mammoth-angry.png",
  INV_BABY_MAMMOTH_OUT: "img/inv-mammoth-out.png",
  INV_BABY_MAMMOTH_IN: "img/inv-mammoth-in.png",
  INV_BABY_MAMMOTH_CLICK: "img/inv-mammoth-click.png",
  HURT_BABY_MAMMOTH: "img/hurt-baby-mammoth.png",
  BABY_MAMMOTH_STEP: "img/baby-mammoth-step.png",
  FLOWER_HATD: "img/day-flower-hat.png",
  FLOWER_HATN: "img/night-flower-hat.png",
  INV_FLOWER_HAT_OUT: "img/inv-flower-hat-out.png",
  INV_FLOWER_HAT_IN: "img/inv-flower-hat-in.png",
  INV_FLOWER_HAT_CLICK: "img/inv-flower-hat-click.png",
  FUR_HATD: "img/day-fur-hat.png",
  FUR_HATN: "img/night-fur-hat.png",
  INV_FUR_HAT_OUT: "img/inv-fur-hat-out.png",
  INV_FUR_HAT_IN: "img/inv-fur-hat-in.png",
  INV_FUR_HAT_CLICK: "img/inv-fur-hat-click.png",
  MAMMOTHD: "img/day-mammoth.png",
  MAMMOTHN: "img/night-mammoth.png",
  HURT_MAMMOTH: "img/hurt-mammoth.png",
  INV_FUR_MAMMOTH_OUT: "img/inv-mammoth-fur-out.png",
  INV_FUR_MAMMOTH_IN: "img/inv-mammoth-fur-in.png",
  INV_FUR_MAMMOTH_CLICK: "img/inv-mammoth-fur-click.png",
  INV_WOOD_BOW_OUT: "img/inv-wood-bow-out.png",
  INV_WOOD_BOW_IN: "img/inv-wood-bow-in.png",
  INV_WOOD_BOW_CLICK: "img/inv-wood-bow-click.png",
  INV_WOOD_ARROW_OUT: "img/inv-wood-arrow-out.png",
  INV_WOOD_ARROW_IN: "img/inv-wood-arrow-in.png",
  INV_WOOD_ARROW_CLICK: "img/inv-wood-arrow-click.png",
  WOOD_BOWD: "img/day-wood-bow2.png",
  WOOD_BOWN: "img/night-wood-bow2.png",
  WOOD_ARROWD: "img/day-wood-arrow.png",
  WOOD_ARROWN: "img/night-wood-arrow.png",
  INV_STONE_BOW_OUT: "img/inv-stone-bow-out.png",
  INV_STONE_BOW_IN: "img/inv-stone-bow-in.png",
  INV_STONE_BOW_CLICK: "img/inv-stone-bow-click.png",
  INV_STONE_ARROW_OUT: "img/inv-stone-arrow-out.png",
  INV_STONE_ARROW_IN: "img/inv-stone-arrow-in.png",
  INV_STONE_ARROW_CLICK: "img/inv-stone-arrow-click.png",
  STONE_BOWD: "img/day-stone-bow.png",
  STONE_BOWN: "img/night-stone-bow.png",
  STONE_ARROWD: "img/day-stone-arrow.png",
  STONE_ARROWN: "img/night-stone-arrow.png",
  INV_GOLD_BOW_OUT: "img/inv-gold-bow-out.png",
  INV_GOLD_BOW_IN: "img/inv-gold-bow-in.png",
  INV_GOLD_BOW_CLICK: "img/inv-gold-bow-click.png",
  INV_GOLD_ARROW_OUT: "img/inv-gold-arrow-out.png",
  INV_GOLD_ARROW_IN: "img/inv-gold-arrow-in.png",
  INV_GOLD_ARROW_CLICK: "img/inv-gold-arrow-click.png",
  GOLD_BOWD: "img/day-gold-bow.png",
  GOLD_BOWN: "img/night-gold-bow.png",
  GOLD_ARROWD: "img/day-gold-arrow.png",
  GOLD_ARROWN: "img/night-gold-arrow.png",
  INV_DIAMOND_BOW_OUT: "img/inv-diamond-bow-out.png",
  INV_DIAMOND_BOW_IN: "img/inv-diamond-bow-in.png",
  INV_DIAMOND_BOW_CLICK: "img/inv-diamond-bow-click.png",
  INV_DIAMOND_ARROW_OUT: "img/inv-diamond-arrow-out.png",
  INV_DIAMOND_ARROW_IN: "img/inv-diamond-arrow-in.png",
  INV_DIAMOND_ARROW_CLICK: "img/inv-diamond-arrow-click.png",
  DIAMOND_BOWD: "img/day-diamond-bow.png",
  DIAMOND_BOWN: "img/night-diamond-bow.png",
  DIAMOND_ARROWD: "img/day-diamond-arrow.png",
  DIAMOND_ARROWN: "img/night-diamond-arrow.png",
  INV_AMETHYST_BOW_OUT: "img/inv-amethyst-bow-out.png",
  INV_AMETHYST_BOW_IN: "img/inv-amethyst-bow-in.png",
  INV_AMETHYST_BOW_CLICK: "img/inv-amethyst-bow-click.png",
  INV_AMETHYST_ARROW_OUT: "img/inv-amethyst-arrow-out.png",
  INV_AMETHYST_ARROW_IN: "img/inv-amethyst-arrow-in.png",
  INV_AMETHYST_ARROW_CLICK: "img/inv-amethyst-arrow-click.png",
  AMETHYST_BOWD: "img/day-amethyst-bow.png",
  AMETHYST_BOWN: "img/night-amethyst-bow.png",
  AMETHYST_ARROWD: "img/day-amethyst-arrow.png",
  AMETHYST_ARROWN: "img/night-amethyst-arrow.png",
  INV_DRAGON_BOW_OUT: "img/inv-dragon-bow-out.png",
  INV_DRAGON_BOW_IN: "img/inv-dragon-bow-in.png",
  INV_DRAGON_BOW_CLICK: "img/inv-dragon-bow-click.png",
  INV_DRAGON_ARROW_OUT: "img/inv-dragon-arrow-out.png",
  INV_DRAGON_ARROW_IN: "img/inv-dragon-arrow-in.png",
  INV_DRAGON_ARROW_CLICK: "img/inv-dragon-arrow-click.png",
  DRAGON_BOWD: "img/day-dragon-bow.png",
  DRAGON_BOWN: "img/night-dragon-bow.png",
  DRAGON_ARROWD: "img/day-dragon-arrow.png",
  DRAGON_ARROWN: "img/night-dragon-arrow.png",
  INV_REIDITE_BOW_OUT: "img/inv-reidite-bow-out.png",
  INV_REIDITE_BOW_IN: "img/inv-reidite-bow-in.png",
  INV_REIDITE_BOW_CLICK: "img/inv-reidite-bow-click.png",
  INV_REIDITE_ARROW_OUT: "img/inv-reidite-arrow-out.png",
  INV_REIDITE_ARROW_IN: "img/inv-reidite-arrow-in.png",
  INV_REIDITE_ARROW_CLICK: "img/inv-reidite-arrow-click.png",
  REIDITE_BOWD: "img/day-reidite-bow.png",
  REIDITE_BOWN: "img/night-reidite-bow.png",
  REIDITE_ARROWD: "img/day-reidite-arrow.png",
  REIDITE_ARROWN: "img/night-reidite-arrow.png",
  BANDAGE_ACTIVATED: "img/bandage-activated.png",
  AUTO_FEED: "img/auto-feed.png",
  STOP_REGENERATION_BLIZZARD: "img/stop-regeneration.png",
  STOP_REGENERATION: "img/stop-regeneration2.png",
  WOOD_TOWERD: "img/day-wood-platform.png",
  WOOD_TOWERN: "img/night-wood-platform.png",
  INV_WOOD_TOWER_IN: "img/inv-wood-platform-in.png",
  INV_WOOD_TOWER_OUT: "img/inv-wood-platform-out.png",
  INV_WOOD_TOWER_CLICK: "img/inv-wood-platform-click.png",
  WOOD_SHIELDD: "img/day-wood-shield.png",
  WOOD_SHIELDN: "img/night-wood-shield.png",
  STONE_SHIELDD: "img/day-stone-shield.png",
  STONE_SHIELDN: "img/night-stone-shield.png",
  GOLD_SHIELDD: "img/day-gold-shield.png",
  GOLD_SHIELDN: "img/night-gold-shield.png",
  DIAMOND_SHIELDD: "img/day-diamond-shield.png",
  DIAMOND_SHIELDN: "img/night-diamond-shield.png",
  AMETHYST_SHIELDD: "img/day-amethyst-shield.png",
  AMETHYST_SHIELDN: "img/night-amethyst-shield.png",
  REIDITE_SHIELDD: "img/day-reidite-shield.png",
  REIDITE_SHIELDN: "img/night-reidite-shield.png",
  INV_WOOD_SHIELD_IN: "img/inv-wood-shield-in.png",
  INV_WOOD_SHIELD_OUT: "img/inv-wood-shield-out.png",
  INV_WOOD_SHIELD_CLICK: "img/inv-wood-shield-click.png",
  INV_STONE_SHIELD_IN: "img/inv-stone-shield-in.png",
  INV_STONE_SHIELD_OUT: "img/inv-stone-shield-out.png",
  INV_STONE_SHIELD_CLICK: "img/inv-stone-shield-click.png",
  INV_GOLD_SHIELD_IN: "img/inv-gold-shield-in.png",
  INV_GOLD_SHIELD_OUT: "img/inv-gold-shield-out.png",
  INV_GOLD_SHIELD_CLICK: "img/inv-gold-shield-click.png",
  INV_DIAMOND_SHIELD_IN: "img/inv-diamond-shield-in.png",
  INV_DIAMOND_SHIELD_OUT: "img/inv-diamond-shield-out.png",
  INV_DIAMOND_SHIELD_CLICK: "img/inv-diamond-shield-click.png",
  INV_AMETHYST_SHIELD_IN: "img/inv-amethyst-shield-in.png",
  INV_AMETHYST_SHIELD_OUT: "img/inv-amethyst-shield-out.png",
  INV_AMETHYST_SHIELD_CLICK: "img/inv-amethyst-shield-click.png",
  INV_REIDITE_SHIELD_IN: "img/inv-reidite-shield-in.png",
  INV_REIDITE_SHIELD_OUT: "img/inv-reidite-shield-out.png",
  INV_REIDITE_SHIELD_CLICK: "img/inv-reidite-shield-click.png",
  MACHETED: "img/day-machete.png",
  MACHETEN: "img/night-machete.png",
  INV_MACHETE_IN: "img/inv-machete-in.png",
  INV_MACHETE_OUT: "img/inv-machete-out.png",
  INV_MACHETE_CLICK: "img/inv-machete-click.png",
};
WINDOW12 = [{}];
WINDOW12[0].stringify = function (_0x42d07a) {
  var _0x5cda7f = new Uint8Array(new ArrayBuffer(_0x42d07a.length));
  for (var _0x585843 = 0; _0x585843 < _0x42d07a.length; _0x585843++) {
    _0x5cda7f[_0x585843] = _0x42d07a[_0x585843];
  }
  return _0x5cda7f;
};
DUMP_IMAGES = {};
PREPROC_IMAGES = {};
for (var i in IMAGES) DUMP_IMAGES[i] = IMAGES[i];
sprite = [];
RARITY = {};
RARITY.FREE = 0;
RARITY.WOOD = 1;
RARITY.STONE = 2;
RARITY.GOLD = 3;
RARITY.DIAMOND = 4;
RARITY.AMETHYST = 5;
RARITY.REIDITE = 6;
RARITY.SPECIAL = 7;
RARITY.LEVEL = 8;
COSMETICS = {};
MINIMAP_UTILS = [];
find_cosmetics_per_id = function (e, t) {
  for (var i = 0; i < e.length; i++) {
    if (e[i].id === t) {
      return i;
    }
  }
  return -1;
};
var MINIMAP_LIST = [];
function render_type_resources_minimap(e, t) {
  for (var i = 0; i < MINIMAP_LIST.length; i += t) {
    var r = MINIMAP_LIST[i];
    if (r[0] === e) {
      render_resource_minimap(r[0], r[1], r[2], r[3]);
    }
  }
}
function render_all_resources_minimap() {
  render_type_resources_minimap("isl", 1);
  render_type_resources_minimap("wtb", 20);
  render_type_resources_minimap("la", 1);
  render_type_resources_minimap("c", 1);
  render_type_resources_minimap("s", 1);
  render_type_resources_minimap("f", 1);
  render_type_resources_minimap("p", 1);
  render_type_resources_minimap("g", 1);
  render_type_resources_minimap("d", 1);
  render_type_resources_minimap("a", 1);
  render_type_resources_minimap("re", 1);
  render_type_resources_minimap("m", 1);
  MINIMAP_LIST = [];
}
function add_resource_minimap(e, t, i, r) {
  MINIMAP_LIST.push([e, t, i, r]);
}
function render_resource_minimap(e, t, i, r) {
  var a = MINIMAP_UTILS[e];
  if (a === undefined) {
    return;
  }
  for (var _0xdd6f02 = 0; _0xdd6f02 < 2; _0xdd6f02++) {
    var _0x1c31ff = a[t][_0xdd6f02];
    var _0x46740a = (193 * r) / world.nw;
    var _0xb37bc5 = (193 * i) / world.nh;
    var _0x216aa5 = _0x1c31ff.width / 3.5;
    var _0x1bc566 = _0x1c31ff.height / 3.5;
    sprite[SPRITE.MINIMAP_CTX][_0xdd6f02].drawImage(
      _0x1c31ff,
      _0x46740a - _0x216aa5 / 2,
      _0xb37bc5 - _0x1bc566 / 2,
      _0x216aa5,
      _0x1bc566
    );
    _0x46740a = (600 * r) / world.nw;
    _0xb37bc5 = (600 * i) / world.nh;
    _0x216aa5 = _0x1c31ff.width / 1.5;
    _0x1bc566 = _0x1c31ff.height / 1.5;
    sprite[SPRITE.BIGMAP_CTX][_0xdd6f02].drawImage(
      _0x1c31ff,
      _0x46740a - _0x216aa5 / 2,
      _0xb37bc5 - _0x1bc566 / 2,
      _0x216aa5,
      _0x1bc566
    );
  }
}
render_minimap = function () {
  for (var _0x2d8ade = 0; _0x2d8ade < 2; _0x2d8ade++) {
    sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].clearRect(0, 0, 193, 193);
    sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
      MINIMAP_UTILS.MAP[_0x2d8ade],
      0,
      0,
      193,
      193
    );
    sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].clearRect(0, 0, 600, 600);
    sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
      MINIMAP_UTILS.MAP[_0x2d8ade],
      0,
      0,
      600,
      600
    );
    for (var _0x38b39a = world.biomes.length - 1; _0x38b39a >= 0; _0x38b39a--) {
      var _0x2fa5c1 = world.biomes[_0x38b39a];
      var _0x50ac2d = (193 * _0x2fa5c1.x1) / (100 * world.nw);
      var _0x23eddd = (193 * _0x2fa5c1.y1) / (100 * world.nh);
      var _0x2d34fc = (193 * _0x2fa5c1.w) / (100 * world.nw);
      var _0x564e47 = (193 * _0x2fa5c1.h) / (100 * world.nh);
      var _0x24482b = (600 * _0x2fa5c1.x1) / (100 * world.nw);
      var _0x789651 = (600 * _0x2fa5c1.y1) / (100 * world.nh);
      var _0x5d3bcd = (600 * _0x2fa5c1.w) / (100 * world.nw);
      var _0x5b0ef2 = (600 * _0x2fa5c1.h) / (100 * world.nh);
      _0x2fa5c1.t === world.BIOME_FOREST &&
        (sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.FOREST[_0x2d8ade],
          _0x50ac2d,
          _0x23eddd,
          _0x2d34fc,
          _0x564e47
        ),
        sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.FOREST[_0x2d8ade],
          _0x24482b,
          _0x789651,
          _0x5d3bcd,
          _0x5b0ef2
        ));
      _0x2fa5c1.t === world.BIOME_WINTER &&
        (sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.WINTER[_0x2d8ade],
          _0x50ac2d,
          _0x23eddd,
          _0x2d34fc,
          _0x564e47
        ),
        sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.WINTER[_0x2d8ade],
          _0x24482b,
          _0x789651,
          _0x5d3bcd,
          _0x5b0ef2
        ));
      _0x2fa5c1.t === world.BIOME_LAVA &&
        (sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.LAVA[_0x2d8ade],
          _0x50ac2d,
          _0x23eddd,
          _0x2d34fc,
          _0x564e47
        ),
        sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.LAVA[_0x2d8ade],
          _0x24482b,
          _0x789651,
          _0x5d3bcd,
          _0x5b0ef2
        ));
      _0x2fa5c1.t === world.BIOME_DRAGON &&
        (sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.CAVE[_0x2d8ade],
          _0x50ac2d,
          _0x23eddd,
          _0x2d34fc,
          _0x564e47
        ),
        sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.CAVE[_0x2d8ade],
          _0x24482b,
          _0x789651,
          _0x5d3bcd,
          _0x5b0ef2
        ));
      _0x2fa5c1.t === world.BIOME_DESERT &&
        (sprite[SPRITE.MINIMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.DESERT[_0x2d8ade],
          _0x50ac2d,
          _0x23eddd,
          _0x2d34fc,
          _0x564e47
        ),
        sprite[SPRITE.BIGMAP_CTX][_0x2d8ade].drawImage(
          MINIMAP_UTILS.DESERT[_0x2d8ade],
          _0x24482b,
          _0x789651,
          _0x5d3bcd,
          _0x5b0ef2
        ));
    }
  }
};
render_cosmetics = function () {
  COSMETICS = {
    SKIN: [
      {
        id: 0,
        day: IMAGES.PLAYER0D,
        night: IMAGES.PLAYER0N,
        dayHand: IMAGES.HAND0D,
        nightHand: IMAGES.HAND0N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Starver",
      },
      {
        id: 3,
        day: IMAGES.PLAYER3D,
        night: IMAGES.PLAYER3N,
        dayHand: IMAGES.HAND3D,
        nightHand: IMAGES.HAND3N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Angry",
      },
      {
        id: 2,
        day: IMAGES.PLAYER2D,
        night: IMAGES.PLAYER2N,
        dayHand: IMAGES.HAND2D,
        nightHand: IMAGES.HAND2N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Sad",
      },
      {
        id: 9,
        day: IMAGES.PLAYER9D,
        night: IMAGES.PLAYER9N,
        dayHand: IMAGES.HAND9D,
        nightHand: IMAGES.HAND9N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Happy 1",
      },
      {
        id: 1,
        day: IMAGES.PLAYER1D,
        night: IMAGES.PLAYER1N,
        dayHand: IMAGES.HAND1D,
        nightHand: IMAGES.HAND1N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "What?",
      },
      {
        id: 4,
        day: IMAGES.PLAYER4D,
        night: IMAGES.PLAYER4N,
        dayHand: IMAGES.HAND4D,
        nightHand: IMAGES.HAND4N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Suspicious",
      },
      {
        id: 5,
        day: IMAGES.PLAYER5D,
        night: IMAGES.PLAYER5N,
        dayHand: IMAGES.HAND5D,
        nightHand: IMAGES.HAND5N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Scar",
      },
      {
        id: 6,
        day: IMAGES.PLAYER6D,
        night: IMAGES.PLAYER6N,
        dayHand: IMAGES.HAND6D,
        nightHand: IMAGES.HAND6N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "In Trouble",
      },
      {
        id: 7,
        day: IMAGES.PLAYER7D,
        night: IMAGES.PLAYER7N,
        dayHand: IMAGES.HAND7D,
        nightHand: IMAGES.HAND7N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Cute",
      },
      {
        id: 8,
        day: IMAGES.PLAYER8D,
        night: IMAGES.PLAYER8N,
        dayHand: IMAGES.HAND8D,
        nightHand: IMAGES.HAND8N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bored 1",
      },
      {
        id: 10,
        day: IMAGES.PLAYER10D,
        night: IMAGES.PLAYER10N,
        dayHand: IMAGES.HAND10D,
        nightHand: IMAGES.HAND10N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Happy 2",
      },
      {
        id: 11,
        day: IMAGES.PLAYER11D,
        night: IMAGES.PLAYER11N,
        dayHand: IMAGES.HAND11D,
        nightHand: IMAGES.HAND11N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Crazy",
      },
      {
        id: 12,
        day: IMAGES.PLAYER12D,
        night: IMAGES.PLAYER12N,
        dayHand: IMAGES.HAND12D,
        nightHand: IMAGES.HAND12N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Happy 3",
      },
      {
        id: 13,
        day: IMAGES.PLAYER13D,
        night: IMAGES.PLAYER13N,
        dayHand: IMAGES.HAND13D,
        nightHand: IMAGES.HAND13N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Very Cute",
      },
      {
        id: 14,
        day: IMAGES.PLAYER14D,
        night: IMAGES.PLAYER14N,
        dayHand: IMAGES.HAND14D,
        nightHand: IMAGES.HAND14N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Curious",
      },
      {
        id: 15,
        day: IMAGES.PLAYER15D,
        night: IMAGES.PLAYER15N,
        dayHand: IMAGES.HAND15D,
        nightHand: IMAGES.HAND15N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bored 2",
      },
      {
        id: 16,
        day: IMAGES.PLAYER16D,
        night: IMAGES.PLAYER16N,
        dayHand: IMAGES.HAND16D,
        nightHand: IMAGES.HAND16N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Happy 4",
      },
      {
        id: 17,
        day: IMAGES.PLAYER17D,
        night: IMAGES.PLAYER17N,
        dayHand: IMAGES.HAND17D,
        nightHand: IMAGES.HAND17N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Scar 2",
      },
      {
        id: 18,
        day: IMAGES.PLAYER18D,
        night: IMAGES.PLAYER18N,
        dayHand: IMAGES.HAND18D,
        nightHand: IMAGES.HAND18N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Sick",
      },
      {
        id: 19,
        day: IMAGES.PLAYER19D,
        night: IMAGES.PLAYER19N,
        dayHand: IMAGES.HAND19D,
        nightHand: IMAGES.HAND19N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Somnambule",
      },
      {
        id: 24,
        day: IMAGES.SKIN7D,
        night: IMAGES.SKIN7N,
        dayHand: IMAGES.HAND_SKIN7D,
        nightHand: IMAGES.HAND_SKIN7N,
        rarity: RARITY.WOOD,
        author: "Pixelbitie",
        name: "Feel Bad",
      },
      {
        id: 23,
        day: IMAGES.SKIN0D,
        night: IMAGES.SKIN0N,
        dayHand: IMAGES.HAND_SKIN0D,
        nightHand: IMAGES.HAND_SKIN0N,
        rarity: RARITY.WOOD,
        author: "Pixelbitie",
        name: "Mmmh.",
      },
      {
        id: 103,
        day: IMAGES.SKIN78D,
        night: IMAGES.SKIN78N,
        dayHand: IMAGES.HAND_SKIN78D,
        nightHand: IMAGES.HAND_SKIN78N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Panic",
      },
      {
        id: 105,
        day: IMAGES.SKIN80D,
        night: IMAGES.SKIN80N,
        dayHand: IMAGES.HAND_SKIN80D,
        nightHand: IMAGES.HAND_SKIN80N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Hypnotic",
      },
      {
        id: 106,
        day: IMAGES.SKIN81D,
        night: IMAGES.SKIN81N,
        dayHand: IMAGES.HAND_SKIN81D,
        nightHand: IMAGES.HAND_SKIN81N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Stars in the eyes",
      },
      {
        id: 104,
        day: IMAGES.SKIN79D,
        night: IMAGES.SKIN79N,
        dayHand: IMAGES.HAND_SKIN79D,
        nightHand: IMAGES.HAND_SKIN79N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Scared at night",
      },
      {
        id: 20,
        day: IMAGES.SKIN_VAMPIRED,
        night: IMAGES.SKIN_VAMPIREN,
        dayHand: IMAGES.HAND_VAMPIRED,
        nightHand: IMAGES.HAND_VAMPIREN,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Vampire",
      },
      {
        id: 21,
        day: IMAGES.SKIN_ZOMBIED,
        night: IMAGES.SKIN_ZOMBIEN,
        dayHand: IMAGES.HAND_ZOMBIED,
        nightHand: IMAGES.HAND_ZOMBIEN,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Zombie",
      },
      {
        id: 22,
        day: IMAGES.SKIN_DEVASTD,
        night: IMAGES.SKIN_DEVASTN,
        dayHand: IMAGES.HAND_DEVASTD,
        nightHand: IMAGES.HAND_DEVASTN,
        rarity: RARITY.STONE,
        author: "Pixelbitie",
        name: "Devaster",
      },
      {
        id: 116,
        day: IMAGES.SKIN91D,
        night: IMAGES.SKIN91N,
        dayHand: IMAGES.HAND_SKIN91D,
        nightHand: IMAGES.HAND_SKIN91N,
        rarity: RARITY.STONE,
        author: "Fukss",
        name: "Dead Devaster",
      },
      {
        id: 27,
        day: IMAGES.SKIN19D,
        night: IMAGES.SKIN19N,
        dayHand: IMAGES.HAND_SKIN19D,
        nightHand: IMAGES.HAND_SKIN19N,
        rarity: RARITY.STONE,
        author: "Winter",
        name: "Cactus",
      },
      {
        id: 28,
        day: IMAGES.SKIN20D,
        night: IMAGES.SKIN20N,
        dayHand: IMAGES.HAND_SKIN20D,
        nightHand: IMAGES.HAND_SKIN20N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Bee",
      },
      {
        id: 49,
        day: IMAGES.SKIN24D,
        night: IMAGES.SKIN24N,
        dayHand: IMAGES.HAND_SKIN24D,
        nightHand: IMAGES.HAND_SKIN24N,
        rarity: RARITY.STONE,
        author: "Taco4Life",
        name: "Camo Skin",
      },
      {
        id: 58,
        day: IMAGES.SKIN34D,
        night: IMAGES.SKIN34N,
        dayHand: IMAGES.HAND_SKIN34D,
        nightHand: IMAGES.HAND_SKIN34N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Blue Limax Skin",
      },
      {
        id: 59,
        day: IMAGES.SKIN33D,
        night: IMAGES.SKIN33N,
        dayHand: IMAGES.HAND_SKIN33D,
        nightHand: IMAGES.HAND_SKIN33N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Red Limax Skin",
      },
      {
        id: 94,
        day: IMAGES.SKIN69D,
        night: IMAGES.SKIN69N,
        dayHand: IMAGES.HAND_SKIN69D,
        nightHand: IMAGES.HAND_SKIN69N,
        rarity: RARITY.STONE,
        author: "Taco4Life",
        name: "Mr. Pumpkin",
      },
      {
        id: 109,
        day: IMAGES.SKIN84D,
        night: IMAGES.SKIN84N,
        dayHand: IMAGES.HAND_SKIN84D,
        nightHand: IMAGES.HAND_SKIN84N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Wood",
      },
      {
        id: 114,
        day: IMAGES.SKIN89D,
        night: IMAGES.SKIN89N,
        dayHand: IMAGES.HAND_SKIN89D,
        nightHand: IMAGES.HAND_SKIN89N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Zebra",
      },
      {
        id: 120,
        day: IMAGES.SKIN95D,
        night: IMAGES.SKIN95N,
        dayHand: IMAGES.HAND_SKIN95D,
        nightHand: IMAGES.HAND_SKIN95N,
        rarity: RARITY.STONE,
        author: "CrysTal",
        name: "Tiger",
      },
      {
        id: 134,
        day: IMAGES.SKIN109D,
        night: IMAGES.SKIN109N,
        dayHand: IMAGES.HAND_SKIN109D,
        nightHand: IMAGES.HAND_SKIN109N,
        rarity: RARITY.STONE,
        author: "Franchestcreator",
        name: "Day or Night",
      },
      {
        id: 135,
        day: IMAGES.SKIN110D,
        night: IMAGES.SKIN110N,
        dayHand: IMAGES.HAND_SKIN110D,
        nightHand: IMAGES.HAND_SKIN110N,
        rarity: RARITY.STONE,
        author: "Poinet",
        name: "Square Starver",
      },
      {
        id: 136,
        day: IMAGES.SKIN111D,
        night: IMAGES.SKIN111N,
        dayHand: IMAGES.HAND_SKIN111D,
        nightHand: IMAGES.HAND_SKIN111N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Voodoo Doll",
      },
      {
        id: 137,
        day: IMAGES.SKIN112D,
        night: IMAGES.SKIN112N,
        dayHand: IMAGES.HAND_SKIN112D,
        nightHand: IMAGES.HAND_SKIN112N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Frankenstein",
      },
      {
        id: 138,
        day: IMAGES.SKIN114D,
        night: IMAGES.SKIN114N,
        dayHand: IMAGES.HAND_SKIN114D,
        nightHand: IMAGES.HAND_SKIN114N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Mummy",
      },
      {
        id: 139,
        day: IMAGES.SKIN115D,
        night: IMAGES.SKIN115N,
        dayHand: IMAGES.HAND_SKIN115D,
        nightHand: IMAGES.HAND_SKIN115N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Werewolf",
      },
      {
        id: 140,
        day: IMAGES.SKIN116D,
        night: IMAGES.SKIN116N,
        dayHand: IMAGES.HAND_SKIN116D,
        nightHand: IMAGES.HAND_SKIN116N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Cthulhu",
      },
      {
        id: 141,
        day: IMAGES.SKIN117D,
        night: IMAGES.SKIN117N,
        dayHand: IMAGES.HAND_SKIN117D,
        nightHand: IMAGES.HAND_SKIN117N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Sea Man",
      },
      {
        id: 142,
        day: IMAGES.SKIN118D,
        night: IMAGES.SKIN118N,
        dayHand: IMAGES.HAND_SKIN118D,
        nightHand: IMAGES.HAND_SKIN118N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Pumpkin",
      },
      {
        id: 148,
        day: IMAGES.SKIN124D,
        night: IMAGES.SKIN124N,
        dayHand: IMAGES.HAND_SKIN124D,
        nightHand: IMAGES.HAND_SKIN124N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Snowman",
      },
      {
        id: 149,
        day: IMAGES.SKIN125D,
        night: IMAGES.SKIN125N,
        dayHand: IMAGES.HAND_SKIN125D,
        nightHand: IMAGES.HAND_SKIN125N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Christmas Tree Man",
      },
      {
        id: 150,
        day: IMAGES.SKIN126D,
        night: IMAGES.SKIN126N,
        dayHand: IMAGES.HAND_SKIN126D,
        nightHand: IMAGES.HAND_SKIN126N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Mrs Bell",
      },
      {
        id: 151,
        day: IMAGES.SKIN127D,
        night: IMAGES.SKIN127N,
        dayHand: IMAGES.HAND_SKIN127D,
        nightHand: IMAGES.HAND_SKIN127N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Elfy",
      },
      {
        id: 152,
        day: IMAGES.SKIN128D,
        night: IMAGES.SKIN128N,
        dayHand: IMAGES.HAND_SKIN128D,
        nightHand: IMAGES.HAND_SKIN128N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Old Mr Present",
      },
      {
        id: 153,
        day: IMAGES.SKIN129D,
        night: IMAGES.SKIN129N,
        dayHand: IMAGES.HAND_SKIN129D,
        nightHand: IMAGES.HAND_SKIN129N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "My Dear Old Deer",
      },
      {
        id: 154,
        day: IMAGES.SKIN130D,
        night: IMAGES.SKIN130N,
        dayHand: IMAGES.HAND_SKIN130D,
        nightHand: IMAGES.HAND_SKIN130N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Mr Angel",
      },
      {
        id: 155,
        day: IMAGES.SKIN131D,
        night: IMAGES.SKIN131N,
        dayHand: IMAGES.HAND_SKIN131D,
        nightHand: IMAGES.HAND_SKIN131N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Mr Ice Cube",
      },
      {
        id: 156,
        day: IMAGES.SKIN132D,
        night: IMAGES.SKIN132N,
        dayHand: IMAGES.HAND_SKIN132D,
        nightHand: IMAGES.HAND_SKIN132N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Mr Snowman",
      },
      {
        id: 159,
        day: IMAGES.SKIN135D,
        night: IMAGES.SKIN135N,
        dayHand: IMAGES.HAND_SKIN135D,
        nightHand: IMAGES.HAND_SKIN135N,
        rarity: RARITY.STONE,
        author: "CrysTal",
        name: "Crystal Sky Skin",
      },
      {
        id: 167,
        day: IMAGES.SKIN143D,
        night: IMAGES.SKIN143N,
        dayHand: IMAGES.HAND_SKIN143D,
        nightHand: IMAGES.HAND_SKIN143N,
        rarity: RARITY.STONE,
        author: "Franchestcreator",
        name: "Radioactive Starver",
      },
      {
        id: 169,
        day: IMAGES.SKIN146D,
        night: IMAGES.SKIN146N,
        dayHand: IMAGES.HAND_SKIN146D,
        nightHand: IMAGES.HAND_SKIN146N,
        rarity: RARITY.STONE,
        author: "TheScaryBlaze",
        name: "Eaten Cookie",
      },
      {
        id: 170,
        day: IMAGES.SKIN147D,
        night: IMAGES.SKIN147N,
        dayHand: IMAGES.HAND_SKIN147D,
        nightHand: IMAGES.HAND_SKIN147N,
        rarity: RARITY.STONE,
        author: "aloner",
        name: "Blob Thing",
      },
      {
        id: 172,
        day: IMAGES.SKIN149D,
        night: IMAGES.SKIN149N,
        dayHand: IMAGES.HAND_SKIN149D,
        nightHand: IMAGES.HAND_SKIN149N,
        rarity: RARITY.STONE,
        author: "aloner",
        name: "Machine Mask",
      },
      {
        id: 29,
        day: IMAGES.SKIN2D,
        night: IMAGES.SKIN2N,
        dayHand: IMAGES.HAND_SKIN2D,
        nightHand: IMAGES.HAND_SKIN2N,
        rarity: RARITY.GOLD,
        author: "Pixelbitie",
        name: "Lollipop 1",
      },
      {
        id: 30,
        day: IMAGES.SKIN3D,
        night: IMAGES.SKIN3N,
        dayHand: IMAGES.HAND_SKIN3D,
        nightHand: IMAGES.HAND_SKIN3N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Lollipop 2",
      },
      {
        id: 31,
        day: IMAGES.SKIN4D,
        night: IMAGES.SKIN4N,
        dayHand: IMAGES.HAND_SKIN4D,
        nightHand: IMAGES.HAND_SKIN4N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Lollipop 3",
      },
      {
        id: 32,
        day: IMAGES.SKIN5D,
        night: IMAGES.SKIN5N,
        dayHand: IMAGES.HAND_SKIN5D,
        nightHand: IMAGES.HAND_SKIN5N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Lollipop 4",
      },
      {
        id: 33,
        day: IMAGES.SKIN8D,
        night: IMAGES.SKIN8N,
        dayHand: IMAGES.HAND_SKIN8D,
        nightHand: IMAGES.HAND_SKIN8N,
        rarity: RARITY.GOLD,
        author: "Sushui",
        name: "Yellow Bird",
      },
      {
        id: 34,
        day: IMAGES.SKIN9D,
        night: IMAGES.SKIN9N,
        dayHand: IMAGES.HAND_SKIN9D,
        nightHand: IMAGES.HAND_SKIN9N,
        rarity: RARITY.GOLD,
        author: "Sushui",
        name: "Red Bird",
      },
      {
        id: 35,
        day: IMAGES.SKIN10D,
        night: IMAGES.SKIN10N,
        dayHand: IMAGES.HAND_SKIN10D,
        nightHand: IMAGES.HAND_SKIN10N,
        rarity: RARITY.GOLD,
        author: "Sushui",
        name: "Blue Bird",
      },
      {
        id: 37,
        day: IMAGES.SKIN17D,
        night: IMAGES.SKIN17N,
        dayHand: IMAGES.HAND_SKIN17D,
        nightHand: IMAGES.HAND_SKIN17N,
        rarity: RARITY.GOLD,
        author: "Winter",
        name: "Owl",
      },
      {
        id: 52,
        day: IMAGES.SKIN27D,
        night: IMAGES.SKIN27N,
        dayHand: IMAGES.HAND_SKIN27D,
        nightHand: IMAGES.HAND_SKIN27N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Nemo",
      },
      {
        id: 53,
        day: IMAGES.SKIN28D,
        night: IMAGES.SKIN28N,
        dayHand: IMAGES.HAND_SKIN28D,
        nightHand: IMAGES.HAND_SKIN28N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Mr. Bread",
      },
      {
        id: 74,
        day: IMAGES.SKIN49D,
        night: IMAGES.SKIN49N,
        dayHand: IMAGES.HAND_SKIN49D,
        nightHand: IMAGES.HAND_SKIN49N,
        rarity: RARITY.GOLD,
        author: "Communist & Taco4Life",
        name: "Mr. Bread 2",
      },
      {
        id: 75,
        day: IMAGES.SKIN50D,
        night: IMAGES.SKIN50N,
        dayHand: IMAGES.HAND_SKIN50D,
        nightHand: IMAGES.HAND_SKIN50N,
        rarity: RARITY.GOLD,
        author: "Communist & Taco4Life",
        name: "Mr. Bread 3",
      },
      {
        id: 60,
        day: IMAGES.SKIN35D,
        night: IMAGES.SKIN35N,
        dayHand: IMAGES.HAND_SKIN35D,
        nightHand: IMAGES.HAND_SKIN35N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Red Berry",
      },
      {
        id: 61,
        day: IMAGES.SKIN36D,
        night: IMAGES.SKIN36N,
        dayHand: IMAGES.HAND_SKIN36D,
        nightHand: IMAGES.HAND_SKIN36N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Old Berry",
      },
      {
        id: 70,
        day: IMAGES.SKIN45D,
        night: IMAGES.SKIN45N,
        dayHand: IMAGES.HAND_SKIN45D,
        nightHand: IMAGES.HAND_SKIN45N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Cake",
      },
      {
        id: 71,
        day: IMAGES.SKIN46D,
        night: IMAGES.SKIN46N,
        dayHand: IMAGES.HAND_SKIN46D,
        nightHand: IMAGES.HAND_SKIN46N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Christmas Cake",
      },
      {
        id: 77,
        day: IMAGES.SKIN52D,
        night: IMAGES.SKIN52N,
        dayHand: IMAGES.HAND_SKIN52D,
        nightHand: IMAGES.HAND_SKIN52N,
        rarity: RARITY.GOLD,
        author: "Pancakez",
        name: "Mr. Pancake",
      },
      {
        id: 87,
        day: IMAGES.SKIN62D,
        night: IMAGES.SKIN62N,
        dayHand: IMAGES.HAND_SKIN62D,
        nightHand: IMAGES.HAND_SKIN62N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Mr. Taco",
      },
      {
        id: 78,
        day: IMAGES.SKIN53D,
        night: IMAGES.SKIN53N,
        dayHand: IMAGES.HAND_SKIN53D,
        nightHand: IMAGES.HAND_SKIN53N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Mr. Bottle",
      },
      {
        id: 79,
        day: IMAGES.SKIN54D,
        night: IMAGES.SKIN54N,
        dayHand: IMAGES.HAND_SKIN54D,
        nightHand: IMAGES.HAND_SKIN54N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Mr. Bottle 2",
      },
      {
        id: 97,
        day: IMAGES.SKIN71D,
        night: IMAGES.SKIN71N,
        dayHand: IMAGES.HAND_SKIN71D,
        nightHand: IMAGES.HAND_SKIN71N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Pink Rabbit",
      },
      {
        id: 102,
        day: IMAGES.SKIN77D,
        night: IMAGES.SKIN77N,
        dayHand: IMAGES.HAND_SKIN77D,
        nightHand: IMAGES.HAND_SKIN77N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Marshmallow",
      },
      {
        id: 107,
        day: IMAGES.SKIN82D,
        night: IMAGES.SKIN82N,
        dayHand: IMAGES.HAND_SKIN82D,
        nightHand: IMAGES.HAND_SKIN82N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Fox",
      },
      {
        id: 132,
        day: IMAGES.SKIN107D,
        night: IMAGES.SKIN107N,
        dayHand: IMAGES.HAND_SKIN107D,
        nightHand: IMAGES.HAND_SKIN107N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Raccoon",
      },
      {
        id: 111,
        day: IMAGES.SKIN86D,
        night: IMAGES.SKIN86N,
        dayHand: IMAGES.HAND_SKIN86D,
        nightHand: IMAGES.HAND_SKIN86N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Cloud",
      },
      {
        id: 113,
        day: IMAGES.SKIN88D,
        night: IMAGES.SKIN88N,
        dayHand: IMAGES.HAND_SKIN88D,
        nightHand: IMAGES.HAND_SKIN88N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Moon",
      },
      {
        id: 117,
        day: IMAGES.SKIN92D,
        night: IMAGES.SKIN92N,
        dayHand: IMAGES.HAND_SKIN92D,
        nightHand: IMAGES.HAND_SKIN92N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Mr. Panda",
      },
      {
        id: 118,
        day: IMAGES.SKIN93D,
        night: IMAGES.SKIN93N,
        dayHand: IMAGES.HAND_SKIN93D,
        nightHand: IMAGES.HAND_SKIN93N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Mr. Strawberry",
      },
      {
        id: 119,
        day: IMAGES.SKIN94D,
        night: IMAGES.SKIN94N,
        dayHand: IMAGES.HAND_SKIN94D,
        nightHand: IMAGES.HAND_SKIN94N,
        rarity: RARITY.GOLD,
        author: "eogito & Sushuui",
        name: "Mummy",
      },
      {
        id: 122,
        day: IMAGES.SKIN97D,
        night: IMAGES.SKIN97N,
        dayHand: IMAGES.HAND_SKIN97D,
        nightHand: IMAGES.HAND_SKIN97N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Dino",
      },
      {
        id: 127,
        day: IMAGES.SKIN102D,
        night: IMAGES.SKIN102N,
        dayHand: IMAGES.HAND_SKIN102D,
        nightHand: IMAGES.HAND_SKIN102N,
        rarity: RARITY.GOLD,
        author: "MADBalgouthi",
        name: "Mr. Koala",
      },
      {
        id: 160,
        day: IMAGES.SKIN136D,
        night: IMAGES.SKIN136N,
        dayHand: IMAGES.HAND_SKIN136D,
        nightHand: IMAGES.HAND_SKIN136N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Bottle Protection",
      },
      {
        id: 162,
        day: IMAGES.SKIN138D,
        night: IMAGES.SKIN138N,
        dayHand: IMAGES.HAND_SKIN138D,
        nightHand: IMAGES.HAND_SKIN138N,
        rarity: RARITY.GOLD,
        author: "CrysTal",
        name: "Leaf Man",
      },
      {
        id: 166,
        day: IMAGES.SKIN142D,
        night: IMAGES.SKIN142N,
        dayHand: IMAGES.HAND_SKIN142D,
        nightHand: IMAGES.HAND_SKIN142N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Bubble",
      },
      {
        id: 174,
        day: IMAGES.SKIN145D,
        night: IMAGES.SKIN145N,
        dayHand: IMAGES.HAND_SKIN145D,
        nightHand: IMAGES.HAND_SKIN145N,
        rarity: RARITY.GOLD,
        author: "upfiz",
        name: "Potato",
      },
      {
        id: 171,
        day: IMAGES.SKIN148D,
        night: IMAGES.SKIN148N,
        dayHand: IMAGES.HAND_SKIN148D,
        nightHand: IMAGES.HAND_SKIN148N,
        rarity: RARITY.GOLD,
        author: "aloner",
        name: "Axolotl",
      },
      {
        id: 25,
        day: IMAGES.SKIN6D,
        night: IMAGES.SKIN6N,
        dayHand: IMAGES.HAND_SKIN6D,
        nightHand: IMAGES.HAND_SKIN0N,
        rarity: RARITY.DIAMOND,
        author: "Pixelbitie",
        name: "Test Dummy",
      },
      {
        id: 41,
        day: IMAGES.SKIN_STARD,
        night: IMAGES.SKIN_STARN,
        dayHand: IMAGES.HAND_STARD,
        nightHand: IMAGES.HAND_STARN,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Star-ver",
      },
      {
        id: 43,
        day: IMAGES.SKIN11D,
        night: IMAGES.SKIN11N,
        dayHand: IMAGES.HAND_SKIN11D,
        nightHand: IMAGES.HAND_SKIN11N,
        rarity: RARITY.DIAMOND,
        author: "Communist",
        name: "Starver Chest",
      },
      {
        id: 88,
        day: IMAGES.SKIN63D,
        night: IMAGES.SKIN63N,
        dayHand: IMAGES.HAND_SKIN63D,
        nightHand: IMAGES.HAND_SKIN63N,
        rarity: RARITY.DIAMOND,
        author: "Communist",
        name: "Starver Workbench",
      },
      {
        id: 121,
        day: IMAGES.SKIN96D,
        night: IMAGES.SKIN96N,
        dayHand: IMAGES.HAND_SKIN96D,
        nightHand: IMAGES.HAND_SKIN96N,
        rarity: RARITY.DIAMOND,
        author: "MADBalgouthi",
        name: "Fish",
      },
      {
        id: 39,
        day: IMAGES.SKIN22D,
        night: IMAGES.SKIN22N,
        dayHand: IMAGES.HAND_SKIN22D,
        nightHand: IMAGES.HAND_SKIN22N,
        rarity: RARITY.DIAMOND,
        author: "Negligent4Dia",
        name: "Crab",
      },
      {
        id: 40,
        day: IMAGES.SKIN23D,
        night: IMAGES.SKIN23N,
        dayHand: IMAGES.HAND_SKIN23D,
        nightHand: IMAGES.HAND_SKIN23N,
        rarity: RARITY.DIAMOND,
        author: "Negligent4Dia",
        name: "Piranha",
      },
      {
        id: 36,
        day: IMAGES.SKIN16D,
        night: IMAGES.SKIN16N,
        dayHand: IMAGES.HAND_SKIN16D,
        nightHand: IMAGES.HAND_SKIN16N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Winter Fox",
      },
      {
        id: 69,
        day: IMAGES.SKIN44D,
        night: IMAGES.SKIN44N,
        dayHand: IMAGES.HAND_SKIN44D,
        nightHand: IMAGES.HAND_SKIN44N,
        rarity: RARITY.DIAMOND,
        author: "Zed",
        name: "Baby Foxy",
      },
      {
        id: 51,
        day: IMAGES.SKIN26D,
        night: IMAGES.SKIN26N,
        dayHand: IMAGES.HAND_SKIN26D,
        nightHand: IMAGES.HAND_SKIN26N,
        rarity: RARITY.DIAMOND,
        author: "HOWI",
        name: "Winter Bear",
      },
      {
        id: 133,
        day: IMAGES.SKIN108D,
        night: IMAGES.SKIN108N,
        dayHand: IMAGES.HAND_SKIN108D,
        nightHand: IMAGES.HAND_SKIN108N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Hawk",
      },
      {
        id: 55,
        day: IMAGES.SKIN30D,
        night: IMAGES.SKIN30N,
        dayHand: IMAGES.HAND_SKIN30D,
        nightHand: IMAGES.HAND_SKIN30N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Nice Little Yuki",
      },
      {
        id: 68,
        day: IMAGES.SKIN43D,
        night: IMAGES.SKIN43N,
        dayHand: IMAGES.HAND_SKIN43D,
        nightHand: IMAGES.HAND_SKIN43N,
        rarity: RARITY.DIAMOND,
        author: "Taco4Life",
        name: "Baby Yuki",
      },
      {
        id: 62,
        day: IMAGES.SKIN37D,
        night: IMAGES.SKIN37N,
        dayHand: IMAGES.HAND_SKIN37D,
        nightHand: IMAGES.HAND_SKIN37N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Carrot",
      },
      {
        id: 56,
        day: IMAGES.SKIN31D,
        night: IMAGES.SKIN31N,
        dayHand: IMAGES.HAND_SKIN31D,
        nightHand: IMAGES.HAND_SKIN31N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Bat Limax",
      },
      {
        id: 72,
        day: IMAGES.SKIN47D,
        night: IMAGES.SKIN47N,
        dayHand: IMAGES.HAND_SKIN47D,
        nightHand: IMAGES.HAND_SKIN47N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Mr. Crate",
      },
      {
        id: 73,
        day: IMAGES.SKIN48D,
        night: IMAGES.SKIN48N,
        dayHand: IMAGES.HAND_SKIN48D,
        nightHand: IMAGES.HAND_SKIN48N,
        rarity: RARITY.DIAMOND,
        author: "Taco4Life & eogito",
        name: "Mr. Spider",
      },
      {
        id: 93,
        day: IMAGES.SKIN68D,
        night: IMAGES.SKIN68N,
        dayHand: IMAGES.HAND_SKIN68D,
        nightHand: IMAGES.HAND_SKIN68N,
        rarity: RARITY.DIAMOND,
        author: "Anyone want to play?",
        name: "Mr. Spider 2",
      },
      {
        id: 82,
        day: IMAGES.SKIN57D,
        night: IMAGES.SKIN57N,
        dayHand: IMAGES.HAND_SKIN57D,
        nightHand: IMAGES.HAND_SKIN57N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Blue Starfish",
      },
      {
        id: 83,
        day: IMAGES.SKIN58D,
        night: IMAGES.SKIN58N,
        dayHand: IMAGES.HAND_SKIN58D,
        nightHand: IMAGES.HAND_SKIN58N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Orange Starfish",
      },
      {
        id: 84,
        day: IMAGES.SKIN59D,
        night: IMAGES.SKIN59N,
        dayHand: IMAGES.HAND_SKIN59D,
        nightHand: IMAGES.HAND_SKIN59N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Pink Starfish",
      },
      {
        id: 85,
        day: IMAGES.SKIN60D,
        night: IMAGES.SKIN60N,
        dayHand: IMAGES.HAND_SKIN60D,
        nightHand: IMAGES.HAND_SKIN60N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. ShellMauve",
      },
      {
        id: 86,
        day: IMAGES.SKIN61D,
        night: IMAGES.SKIN61N,
        dayHand: IMAGES.HAND_SKIN61D,
        nightHand: IMAGES.HAND_SKIN61N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Shell Bead",
      },
      {
        id: 96,
        day: IMAGES.SKIN72D,
        night: IMAGES.SKIN72N,
        dayHand: IMAGES.HAND_SKIN72D,
        nightHand: IMAGES.HAND_SKIN72N,
        rarity: RARITY.DIAMOND,
        author: "Fukss",
        name: "Angry Crab",
      },
      {
        id: 98,
        day: IMAGES.SKIN73D,
        night: IMAGES.SKIN73N,
        dayHand: IMAGES.HAND_SKIN73D,
        nightHand: IMAGES.HAND_SKIN73N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Penguin",
      },
      {
        id: 126,
        day: IMAGES.SKIN101D,
        night: IMAGES.SKIN101N,
        dayHand: IMAGES.HAND_SKIN101D,
        nightHand: IMAGES.HAND_SKIN101N,
        rarity: RARITY.DIAMOND,
        author: "Anyone want to play?",
        name: "Mr. Boar",
      },
      {
        id: 145,
        day: IMAGES.SKIN121D,
        night: IMAGES.SKIN121N,
        dayHand: IMAGES.HAND_SKIN121D,
        nightHand: IMAGES.HAND_SKIN121N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "I saw you",
      },
      {
        id: 146,
        day: IMAGES.SKIN122D,
        night: IMAGES.SKIN122N,
        dayHand: IMAGES.HAND_SKIN122D,
        nightHand: IMAGES.HAND_SKIN122N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "It was funny",
      },
      {
        id: 147,
        day: IMAGES.SKIN123D,
        night: IMAGES.SKIN123N,
        dayHand: IMAGES.HAND_SKIN123D,
        nightHand: IMAGES.HAND_SKIN123N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "You can scream",
      },
      {
        id: 158,
        day: IMAGES.SKIN134D,
        night: IMAGES.SKIN134N,
        dayHand: IMAGES.HAND_SKIN134D,
        nightHand: IMAGES.HAND_SKIN134N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Mr. Book",
      },
      {
        id: 163,
        day: IMAGES.SKIN139D,
        night: IMAGES.SKIN139N,
        dayHand: IMAGES.HAND_SKIN139D,
        nightHand: IMAGES.HAND_SKIN139N,
        rarity: RARITY.DIAMOND,
        author: "Anyone want to play?",
        name: "Mr. Mammoth",
      },
      {
        id: 164,
        day: IMAGES.SKIN140D,
        night: IMAGES.SKIN140N,
        dayHand: IMAGES.HAND_SKIN140D,
        nightHand: IMAGES.HAND_SKIN140N,
        rarity: RARITY.DIAMOND,
        author: "SoOw",
        name: "Mr. Mammoth 2",
      },
      {
        id: 161,
        day: IMAGES.SKIN137D,
        night: IMAGES.SKIN137N,
        dayHand: IMAGES.HAND_SKIN137D,
        nightHand: IMAGES.HAND_SKIN137N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Nightmare",
      },
      {
        id: 168,
        day: IMAGES.SKIN144D,
        night: IMAGES.SKIN144N,
        dayHand: IMAGES.HAND_SKIN144D,
        nightHand: IMAGES.HAND_SKIN144N,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Shiny Crystal",
      },
      {
        id: 173,
        day: IMAGES.SKIN150D,
        night: IMAGES.SKIN150N,
        dayHand: IMAGES.HAND_SKIN150D,
        nightHand: IMAGES.HAND_SKIN150N,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Water skin",
      },
      {
        id: 42,
        day: IMAGES.SKIN14D,
        night: IMAGES.SKIN14N,
        dayHand: IMAGES.HAND_SKIN14D,
        nightHand: IMAGES.HAND_SKIN14N,
        rarity: RARITY.AMETHYST,
        author: "Winter",
        name: "Will-O'-The-Wisp",
      },
      {
        id: 91,
        day: IMAGES.SKIN66D,
        night: IMAGES.SKIN66N,
        dayHand: IMAGES.HAND_SKIN66D,
        nightHand: IMAGES.HAND_SKIN66N,
        rarity: RARITY.AMETHYST,
        author: "ExpertyAnimations",
        name: "Flame",
      },
      {
        id: 26,
        day: IMAGES.SKIN15D,
        night: IMAGES.SKIN15N,
        dayHand: IMAGES.HAND_SKIN15D,
        nightHand: IMAGES.HAND_SKIN15N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Be a Tree",
      },
      {
        id: 38,
        day: IMAGES.SKIN18D,
        night: IMAGES.SKIN18N,
        dayHand: IMAGES.HAND_SKIN18D,
        nightHand: IMAGES.HAND_SKIN18N,
        rarity: RARITY.AMETHYST,
        author: "Winter",
        name: "Toxic Mutant",
      },
      {
        id: 50,
        day: IMAGES.SKIN25D,
        night: IMAGES.SKIN25N,
        dayHand: IMAGES.HAND_SKIN25D,
        nightHand: IMAGES.HAND_SKIN25N,
        rarity: RARITY.AMETHYST,
        author: "Communist",
        name: "Mr. Tomato",
      },
      {
        id: 54,
        day: IMAGES.SKIN29D,
        night: IMAGES.SKIN29N,
        dayHand: IMAGES.HAND_SKIN29D,
        nightHand: IMAGES.HAND_SKIN29N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mr. Mauve, the Lapa",
      },
      {
        id: 57,
        day: IMAGES.SKIN32D,
        night: IMAGES.SKIN32N,
        dayHand: IMAGES.HAND_SKIN32D,
        nightHand: IMAGES.HAND_SKIN32N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Golden Fish",
      },
      {
        id: 64,
        day: IMAGES.SKIN39D,
        night: IMAGES.SKIN39N,
        dayHand: IMAGES.HAND_SKIN39D,
        nightHand: IMAGES.HAND_SKIN39N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "LapaMauve",
      },
      {
        id: 65,
        day: IMAGES.SKIN40D,
        night: IMAGES.SKIN40N,
        dayHand: IMAGES.HAND_SKIN40D,
        nightHand: IMAGES.HAND_SKIN40N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "LapaMauve ",
      },
      {
        id: 92,
        day: IMAGES.SKIN67D,
        night: IMAGES.SKIN67N,
        dayHand: IMAGES.HAND_SKIN67D,
        nightHand: IMAGES.HAND_SKIN67N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mr. Burger",
      },
      {
        id: 66,
        day: IMAGES.SKIN41D,
        night: IMAGES.SKIN41N,
        dayHand: IMAGES.HAND_SKIN41D,
        nightHand: IMAGES.HAND_SKIN41N,
        rarity: RARITY.AMETHYST,
        author: "pizza wa",
        name: "Tropical Starver",
      },
      {
        id: 80,
        day: IMAGES.SKIN55D,
        night: IMAGES.SKIN55N,
        dayHand: IMAGES.HAND_SKIN55D,
        nightHand: IMAGES.HAND_SKIN55N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mr. ShellPink",
      },
      {
        id: 81,
        day: IMAGES.SKIN56D,
        night: IMAGES.SKIN56N,
        dayHand: IMAGES.HAND_SKIN56D,
        nightHand: IMAGES.HAND_SKIN56N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mr. OranShell",
      },
      {
        id: 99,
        day: IMAGES.SKIN74D,
        night: IMAGES.SKIN74N,
        dayHand: IMAGES.HAND_SKIN74D,
        nightHand: IMAGES.HAND_SKIN74N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Pepe",
      },
      {
        id: 100,
        day: IMAGES.SKIN75D,
        night: IMAGES.SKIN75N,
        dayHand: IMAGES.HAND_SKIN75D,
        nightHand: IMAGES.HAND_SKIN75N,
        rarity: RARITY.AMETHYST,
        author: "fatant",
        name: "Mr. Ant",
      },
      {
        id: 115,
        day: IMAGES.SKIN90D,
        night: IMAGES.SKIN90N,
        dayHand: IMAGES.HAND_SKIN90D,
        nightHand: IMAGES.HAND_SKIN90N,
        rarity: RARITY.AMETHYST,
        author: "MADBalgouthi",
        name: "Mr. Watermelon",
      },
      {
        id: 101,
        day: IMAGES.SKIN76D,
        night: IMAGES.SKIN76N,
        dayHand: IMAGES.HAND_SKIN76D,
        nightHand: IMAGES.HAND_SKIN76N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Mr. Thornbush",
      },
      {
        id: 131,
        day: IMAGES.SKIN106D,
        night: IMAGES.SKIN106N,
        dayHand: IMAGES.HAND_SKIN106D,
        nightHand: IMAGES.HAND_SKIN106N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Cthulhu",
      },
      {
        id: 143,
        day: IMAGES.SKIN119D,
        night: IMAGES.SKIN119N,
        dayHand: IMAGES.HAND_SKIN119D,
        nightHand: IMAGES.HAND_SKIN119N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Mr. Cactus",
      },
      {
        id: 144,
        day: IMAGES.SKIN120D,
        night: IMAGES.SKIN120N,
        dayHand: IMAGES.HAND_SKIN120D,
        nightHand: IMAGES.HAND_SKIN120N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Momo",
      },
      {
        id: 95,
        day: IMAGES.SKIN70D,
        night: IMAGES.SKIN70N,
        dayHand: IMAGES.HAND_SKIN70D,
        nightHand: IMAGES.HAND_SKIN70N,
        rarity: RARITY.REIDITE,
        author: "Taco4Life",
        name: "Mr. Garlic",
      },
      {
        id: 76,
        day: IMAGES.SKIN51D,
        night: IMAGES.SKIN51N,
        dayHand: IMAGES.HAND_SKIN51D,
        nightHand: IMAGES.HAND_SKIN51N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Robot Dragon",
      },
      {
        id: 44,
        day: IMAGES.SKIN1D,
        night: IMAGES.SKIN1N,
        dayHand: IMAGES.HAND_SKIN1D,
        nightHand: IMAGES.HAND_SKIN1N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Lava Dragon Version 1",
      },
      {
        id: 90,
        day: IMAGES.SKIN65D,
        night: IMAGES.SKIN65N,
        dayHand: IMAGES.HAND_SKIN65D,
        nightHand: IMAGES.HAND_SKIN65N,
        rarity: RARITY.REIDITE,
        author: "ExpertyAnimations",
        name: "Lava Dragon Version 2",
      },
      {
        id: 124,
        day: IMAGES.SKIN99D,
        night: IMAGES.SKIN99N,
        dayHand: IMAGES.HAND_SKIN99D,
        nightHand: IMAGES.HAND_SKIN99N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Lava Dragon Version 3",
      },
      {
        id: 45,
        day: IMAGES.SKIN12D,
        night: IMAGES.SKIN12N,
        dayHand: IMAGES.HAND_SKIN12D,
        nightHand: IMAGES.HAND_SKIN12N,
        rarity: RARITY.REIDITE,
        author: "Sushui",
        name: "Ice Dragon Version 1",
      },
      {
        id: 46,
        day: IMAGES.SKIN13D,
        night: IMAGES.SKIN13N,
        dayHand: IMAGES.HAND_SKIN13D,
        nightHand: IMAGES.HAND_SKIN13N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Ice Dragon Version 2",
      },
      {
        id: 108,
        day: IMAGES.SKIN83D,
        night: IMAGES.SKIN83N,
        dayHand: IMAGES.HAND_SKIN83D,
        nightHand: IMAGES.HAND_SKIN83N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Ice Dragon Version 3",
      },
      {
        id: 123,
        day: IMAGES.SKIN98D,
        night: IMAGES.SKIN98N,
        dayHand: IMAGES.HAND_SKIN98D,
        nightHand: IMAGES.HAND_SKIN98N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Baby Dragon Version 1",
      },
      {
        id: 128,
        day: IMAGES.SKIN103D,
        night: IMAGES.SKIN103N,
        dayHand: IMAGES.HAND_SKIN103D,
        nightHand: IMAGES.HAND_SKIN103N,
        rarity: RARITY.REIDITE,
        author: "MADBalgouthi",
        name: "Baby Dragon Version 2",
      },
      {
        id: 125,
        day: IMAGES.SKIN100D,
        night: IMAGES.SKIN100N,
        dayHand: IMAGES.HAND_SKIN100D,
        nightHand: IMAGES.HAND_SKIN100N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Baby Lava",
      },
      {
        id: 47,
        day: IMAGES.SKIN21D,
        night: IMAGES.SKIN21N,
        dayHand: IMAGES.HAND_SKIN21D,
        nightHand: IMAGES.HAND_SKIN21N,
        rarity: RARITY.REIDITE,
        author: "Taco4Life",
        name: "Kraken",
      },
      {
        id: 129,
        day: IMAGES.SKIN104D,
        night: IMAGES.SKIN104N,
        dayHand: IMAGES.HAND_SKIN104D,
        nightHand: IMAGES.HAND_SKIN104N,
        rarity: RARITY.REIDITE,
        author: "Taco4Life",
        name: "Sandworm",
      },
      {
        id: 63,
        day: IMAGES.SKIN38D,
        night: IMAGES.SKIN38N,
        dayHand: IMAGES.HAND_SKIN38D,
        nightHand: IMAGES.HAND_SKIN38N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Mr. Golden Bread",
      },
      {
        id: 67,
        day: IMAGES.SKIN42D,
        night: IMAGES.SKIN42N,
        dayHand: IMAGES.HAND_SKIN42D,
        nightHand: IMAGES.HAND_SKIN42N,
        rarity: RARITY.REIDITE,
        author: "ForgottenHeroe",
        name: "Starver Ores",
      },
      {
        id: 130,
        day: IMAGES.SKIN105D,
        night: IMAGES.SKIN105N,
        dayHand: IMAGES.HAND_SKIN105D,
        nightHand: IMAGES.HAND_SKIN105N,
        rarity: RARITY.REIDITE,
        author: "Taco4Life",
        name: "Poo",
      },
      {
        id: 89,
        day: IMAGES.SKIN64D,
        night: IMAGES.SKIN64N,
        dayHand: IMAGES.HAND_SKIN64D,
        nightHand: IMAGES.HAND_SKIN64N,
        rarity: RARITY.REIDITE,
        author: "Poinet",
        name: "Volcano Starver",
      },
      {
        id: 112,
        day: IMAGES.SKIN87D,
        night: IMAGES.SKIN87N,
        dayHand: IMAGES.HAND_SKIN87D,
        nightHand: IMAGES.HAND_SKIN87N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Lava Starver",
      },
      {
        id: 48,
        day: IMAGES.SKIN_ROBOTD,
        night: IMAGES.SKIN_ROBOTN,
        dayHand: IMAGES.HAND_ROBOTD,
        nightHand: IMAGES.HAND_ROBOTN,
        rarity: RARITY.SPECIAL,
        author: "eogito",
        name: "Robot",
      },
      {
        id: 110,
        day: IMAGES.SKIN85D,
        night: IMAGES.SKIN85N,
        dayHand: IMAGES.HAND_SKIN85D,
        nightHand: IMAGES.HAND_SKIN85N,
        rarity: RARITY.SPECIAL,
        author: "pizza wa",
        name: "Blue Butterfly",
      },
      {
        id: 157,
        day: IMAGES.SKIN133D,
        night: IMAGES.SKIN133N,
        dayHand: IMAGES.HAND_SKIN133D,
        nightHand: IMAGES.HAND_SKIN133N,
        rarity: RARITY.SPECIAL,
        author: "eogito",
        name: "Yrifox",
      },
      {
        id: 165,
        day: IMAGES.SKIN141D,
        night: IMAGES.SKIN141N,
        dayHand: IMAGES.HAND_SKIN141D,
        nightHand: IMAGES.HAND_SKIN141N,
        rarity: RARITY.SPECIAL,
        author: "OmarJr13",
        name: "Blob Skin",
      },
    ],
    BAG: [
      {
        id: 0,
        day: IMAGES.BAGD,
        night: IMAGES.BAGN,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Bag 1",
      },
      {
        id: 1,
        day: IMAGES.BAG0D,
        night: IMAGES.BAG0N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Old Bag",
      },
      {
        id: 2,
        day: IMAGES.BAG4D,
        night: IMAGES.BAG4N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bag 2",
      },
      {
        id: 3,
        day: IMAGES.BAG5D,
        night: IMAGES.BAG5N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bag 3",
      },
      {
        id: 4,
        day: IMAGES.BAG6D,
        night: IMAGES.BAG6N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bag 4",
      },
      {
        id: 5,
        day: IMAGES.BAG7D,
        night: IMAGES.BAG7N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bag 5",
      },
      {
        id: 11,
        day: IMAGES.BAG23D,
        night: IMAGES.BAG23N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wood Pickaxe Bag",
      },
      {
        id: 19,
        day: IMAGES.BAG16D,
        night: IMAGES.BAG16N,
        rarity: RARITY.WOOD,
        author: "Starve.io ",
        name: "Wood Carrier",
      },
      {
        id: 37,
        day: IMAGES.BAG36D,
        night: IMAGES.BAG36N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Bag 6",
      },
      {
        id: 39,
        day: IMAGES.BAG38D,
        night: IMAGES.BAG38N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Bag with Wooden Swords",
      },
      {
        id: 44,
        day: IMAGES.BAG43D,
        night: IMAGES.BAG43N,
        rarity: RARITY.WOOD,
        author: "Communist",
        name: "Big Bag",
      },
      {
        id: 7,
        day: IMAGES.BAG14D,
        night: IMAGES.BAG14N,
        rarity: RARITY.STONE,
        author: "Communist",
        name: "Bag 6",
      },
      {
        id: 8,
        day: IMAGES.BAG_EASTERD,
        night: IMAGES.BAG_EASTERN,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Easter Bag",
      },
      {
        id: 9,
        day: IMAGES.BAG_STARD,
        night: IMAGES.BAG_STARN,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Star Bag",
      },
      {
        id: 10,
        day: IMAGES.BAG9D,
        night: IMAGES.BAG9N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Winter Bag",
      },
      {
        id: 20,
        day: IMAGES.BAG17D,
        night: IMAGES.BAG17N,
        rarity: RARITY.STONE,
        author: "Starve.io ",
        name: "Stone Carrier",
      },
      {
        id: 24,
        day: IMAGES.BAG24D,
        night: IMAGES.BAG24N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Stone Pickaxe Bag",
      },
      {
        id: 6,
        day: IMAGES.BAG13D,
        night: IMAGES.BAG13N,
        rarity: RARITY.STONE,
        author: "Communist",
        name: "Bag Camouflage",
      },
      {
        id: 38,
        day: IMAGES.BAG37D,
        night: IMAGES.BAG37N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Bag with Stone Swords",
      },
      {
        id: 54,
        day: IMAGES.BAG53D,
        night: IMAGES.BAG53N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Cow Bag",
      },
      {
        id: 59,
        day: IMAGES.BAG58D,
        night: IMAGES.BAG58N,
        rarity: RARITY.STONE,
        author: "CrysTal",
        name: "Starver Bag",
      },
      {
        id: 62,
        day: IMAGES.BAG61D,
        night: IMAGES.BAG61N,
        rarity: RARITY.STONE,
        author: "CrysTal",
        name: "Crystal Sky Bag",
      },
      {
        id: 13,
        day: IMAGES.BAG10D,
        night: IMAGES.BAG10N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Honey Pot",
      },
      {
        id: 21,
        day: IMAGES.BAG18D,
        night: IMAGES.BAG18N,
        rarity: RARITY.GOLD,
        author: "Starve.io ",
        name: "Gold Carrier",
      },
      {
        id: 30,
        day: IMAGES.BAG25D,
        night: IMAGES.BAG25N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Gold Pickaxe Bag",
      },
      {
        id: 29,
        day: IMAGES.BAG31D,
        night: IMAGES.BAG31N,
        rarity: RARITY.GOLD,
        author: "Ariel",
        name: "Mr and Mrs Bakers",
      },
      {
        id: 41,
        day: IMAGES.BAG40D,
        night: IMAGES.BAG40N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Bag with Golden Swords",
      },
      {
        id: 47,
        day: IMAGES.BAG46D,
        night: IMAGES.BAG46N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Explorer Bag",
      },
      {
        id: 51,
        day: IMAGES.BAG50D,
        night: IMAGES.BAG50N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Bamboo Bag",
      },
      {
        id: 53,
        day: IMAGES.BAG52D,
        night: IMAGES.BAG52N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Mummy Bag",
      },
      {
        id: 58,
        day: IMAGES.BAG57D,
        night: IMAGES.BAG57N,
        rarity: RARITY.GOLD,
        author: "MADBalgouthi",
        name: "Watermelon Bag",
      },
      {
        id: 60,
        day: IMAGES.BAG59D,
        night: IMAGES.BAG60N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Garlic Bag",
      },
      {
        id: 61,
        day: IMAGES.BAG60D,
        night: IMAGES.BAG59N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Pumpkin Bag",
      },
      {
        id: 64,
        day: IMAGES.BAG63D,
        night: IMAGES.BAG63N,
        rarity: RARITY.GOLD,
        author: "upfiz",
        name: "Oil Barel bag",
      },
      {
        id: 67,
        day: IMAGES.BAG68D,
        night: IMAGES.BAG68N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Tree Bag",
      },
      {
        id: 14,
        day: IMAGES.BAG1D,
        night: IMAGES.BAG1N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "a Rabbit in my Bag",
      },
      {
        id: 15,
        day: IMAGES.BAG2D,
        night: IMAGES.BAG2N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Bird's nest",
      },
      {
        id: 16,
        day: IMAGES.BAG3D,
        night: IMAGES.BAG3N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "a Fish on your Back",
      },
      {
        id: 17,
        day: IMAGES.BAG8D,
        night: IMAGES.BAG8N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "a Squirrel in my Bag",
      },
      {
        id: 22,
        day: IMAGES.BAG19D,
        night: IMAGES.BAG19N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io ",
        name: "Diamond Carrier",
      },
      {
        id: 12,
        day: IMAGES.BAG22D,
        night: IMAGES.BAG22N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Resources Bag",
      },
      {
        id: 32,
        day: IMAGES.BAG26D,
        night: IMAGES.BAG26N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Diamond Pickaxe Bag",
      },
      {
        id: 40,
        day: IMAGES.BAG39D,
        night: IMAGES.BAG39N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Bag with Diamond Swords",
      },
      {
        id: 45,
        day: IMAGES.BAG44D,
        night: IMAGES.BAG44N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "My Cake Bag",
      },
      {
        id: 46,
        day: IMAGES.BAG45D,
        night: IMAGES.BAG45N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "My Christmas Cake Bag",
      },
      {
        id: 52,
        day: IMAGES.BAG51D,
        night: IMAGES.BAG51N,
        rarity: RARITY.DIAMOND,
        author: "MADBalgouthi",
        name: "Fish Bag",
      },
      {
        id: 65,
        day: IMAGES.BAG64D,
        night: IMAGES.BAG64N,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Cloud Bag",
      },
      {
        id: 68,
        day: IMAGES.BAG66D,
        night: IMAGES.BAG66N,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Bee Bag",
      },
      {
        id: 48,
        day: IMAGES.BAG47D,
        night: IMAGES.BAG47N,
        rarity: RARITY.AMETHYST,
        author: "fatant",
        name: "Natural Bag",
      },
      {
        id: 23,
        day: IMAGES.BAG20D,
        night: IMAGES.BAG20N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io ",
        name: "Amethyst Carrier",
      },
      {
        id: 25,
        day: IMAGES.BAG27D,
        night: IMAGES.BAG27N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Amethyst Pickaxe Bag",
      },
      {
        id: 28,
        day: IMAGES.BAG30D,
        night: IMAGES.BAG30N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Your Baby",
      },
      {
        id: 33,
        day: IMAGES.BAG32D,
        night: IMAGES.BAG32N,
        rarity: RARITY.AMETHYST,
        author: "pizza wa",
        name: "Tropical Bag",
      },
      {
        id: 43,
        day: IMAGES.BAG42D,
        night: IMAGES.BAG42N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Bag with Amethyst Swords",
      },
      {
        id: 35,
        day: IMAGES.BAG34D,
        night: IMAGES.BAG34N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Ice Bag",
      },
      {
        id: 50,
        day: IMAGES.BAG49D,
        night: IMAGES.BAG49N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Thornbush Bag",
      },
      {
        id: 56,
        day: IMAGES.BAG55D,
        night: IMAGES.BAG55N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Autumn Bag",
      },
      {
        id: 57,
        day: IMAGES.BAG56D,
        night: IMAGES.BAG56N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Dino Egg Bag",
      },
      {
        id: 66,
        day: IMAGES.BAG65D,
        night: IMAGES.BAG65N,
        rarity: RARITY.AMETHYST,
        author: "pizza wa",
        name: "Magic Cloud Bag",
      },
      {
        id: 69,
        day: IMAGES.BAG67D,
        night: IMAGES.BAG67N,
        rarity: RARITY.AMETHYST,
        author: "pizza wa",
        name: "Chest Bag",
      },
      {
        id: 31,
        day: IMAGES.BAG21D,
        night: IMAGES.BAG21N,
        rarity: RARITY.REIDITE,
        author: "Starve.io ",
        name: "Reidite Carrier",
      },
      {
        id: 18,
        day: IMAGES.BAG11D,
        night: IMAGES.BAG11N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Lava Bag",
      },
      {
        id: 49,
        day: IMAGES.BAG48D,
        night: IMAGES.BAG48N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Lava Bag 2",
      },
      {
        id: 36,
        day: IMAGES.BAG35D,
        night: IMAGES.BAG35N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Dragon Bag",
      },
      {
        id: 55,
        day: IMAGES.BAG54D,
        night: IMAGES.BAG54N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Winter Ice Bag",
      },
      {
        id: 26,
        day: IMAGES.BAG28D,
        night: IMAGES.BAG28N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Reidite Pickaxe Bag",
      },
      {
        id: 27,
        day: IMAGES.BAG29D,
        night: IMAGES.BAG29N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Octopus Bowl",
      },
      {
        id: 34,
        day: IMAGES.BAG33D,
        night: IMAGES.BAG33N,
        rarity: RARITY.REIDITE,
        author: "Taco4Life",
        name: "Cave Bag",
      },
      {
        id: 42,
        day: IMAGES.BAG41D,
        night: IMAGES.BAG41N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Bag with Reidite Swords",
      },
      {
        id: 63,
        day: IMAGES.BAG62D,
        night: IMAGES.BAG62N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Engineer Bag",
      },
    ],
    CRATE: [
      {
        id: 0,
        day: IMAGES.CRATE7D,
        night: IMAGES.CRATE7N,
        rarity: RARITY.FREE,
        author: "eogito",
        name: "Wooden Dead Box",
      },
      {
        id: 1,
        day: IMAGES.CRATE6D,
        night: IMAGES.CRATE6N,
        rarity: RARITY.FREE,
        author: "eogito",
        name: "Hidden item",
      },
      {
        id: 2,
        day: IMAGES.CRATE1D,
        night: IMAGES.CRATE1N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box 1",
      },
      {
        id: 3,
        day: IMAGES.CRATE2D,
        night: IMAGES.CRATE2N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box 2",
      },
      {
        id: 4,
        day: IMAGES.CRATE3D,
        night: IMAGES.CRATE3N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box 3",
      },
      {
        id: 5,
        day: IMAGES.CRATE4D,
        night: IMAGES.CRATE4N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Broken Wooden Box",
      },
      {
        id: 6,
        day: IMAGES.CRATE5D,
        night: IMAGES.CRATE5N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box",
      },
      {
        id: 7,
        day: IMAGES.CRATE8D,
        night: IMAGES.CRATE8N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Battle Box",
      },
      {
        id: 8,
        day: IMAGES.CRATE9D,
        night: IMAGES.CRATE9N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box with a Cross",
      },
      {
        id: 9,
        day: IMAGES.CRATE10D,
        night: IMAGES.CRATE10N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box with Bubbles",
      },
      {
        id: 10,
        day: IMAGES.CRATE11D,
        night: IMAGES.CRATE11N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Wooden Box with Eyes",
      },
      {
        id: 11,
        day: IMAGES.CRATE12D,
        night: IMAGES.CRATE12N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Dark Wooden Box",
      },
      {
        id: 38,
        day: IMAGES.CRATE39D,
        night: IMAGES.CRATE39N,
        rarity: RARITY.WOOD,
        author: "Weddlz",
        name: "Noob Box",
      },
      {
        id: 12,
        day: IMAGES.CRATE13D,
        night: IMAGES.CRATE13N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Wooden and Stone Box",
      },
      {
        id: 14,
        day: IMAGES.CRATE19D,
        night: IMAGES.CRATE19N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Star Box 1",
      },
      {
        id: 15,
        day: IMAGES.CRATE20D,
        night: IMAGES.CRATE20N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Star Box 2",
      },
      {
        id: 27,
        day: IMAGES.CRATE29D,
        night: IMAGES.CRATE29N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Flower Box",
      },
      {
        id: 46,
        day: IMAGES.CRATE47D,
        night: IMAGES.CRATE47N,
        rarity: RARITY.STONE,
        author: "MADBalgouthi",
        name: "Blue Box",
      },
      {
        id: 19,
        day: IMAGES.CRATE21D,
        night: IMAGES.CRATE21N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Beehive",
      },
      {
        id: 13,
        day: IMAGES.CRATE14D,
        night: IMAGES.CRATE14N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Wooden and Golden Box",
      },
      {
        id: 21,
        day: IMAGES.CRATE22D,
        night: IMAGES.CRATE22N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Gravestone",
      },
      {
        id: 25,
        day: IMAGES.CRATE26D,
        night: IMAGES.CRATE26N,
        rarity: RARITY.GOLD,
        author: "Communist",
        name: "Sky Box",
      },
      {
        id: 29,
        day: IMAGES.CRATE30D,
        night: IMAGES.CRATE30N,
        rarity: RARITY.GOLD,
        author: "Winter",
        name: "Golden Box",
      },
      {
        id: 34,
        day: IMAGES.CRATE35D,
        night: IMAGES.CRATE35N,
        rarity: RARITY.GOLD,
        author: "Communist",
        name: "Water Crate",
      },
      {
        id: 35,
        day: IMAGES.CRATE36D,
        night: IMAGES.CRATE36N,
        rarity: RARITY.GOLD,
        author: "Communist",
        name: "Glass Crate",
      },
      {
        id: 16,
        day: IMAGES.CRATE15D,
        night: IMAGES.CRATE15N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Wooden and Diamond Box",
      },
      {
        id: 18,
        day: IMAGES.CRATE18D,
        night: IMAGES.CRATE18N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Don't Hit Me",
      },
      {
        id: 26,
        day: IMAGES.CRATE27D,
        night: IMAGES.CRATE27N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Underwater Box",
      },
      {
        id: 31,
        day: IMAGES.CRATE32D,
        night: IMAGES.CRATE32N,
        rarity: RARITY.DIAMOND,
        author: "Communist",
        name: "Items Pile",
      },
      {
        id: 32,
        day: IMAGES.CRATE33D,
        night: IMAGES.CRATE33N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Cake Box",
      },
      {
        id: 33,
        day: IMAGES.CRATE34D,
        night: IMAGES.CRATE34N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Christmas Cake Box",
      },
      {
        id: 36,
        day: IMAGES.CRATE37D,
        night: IMAGES.CRATE37N,
        rarity: RARITY.DIAMOND,
        author: "Fukss",
        name: "Crab Box",
      },
      {
        id: 42,
        day: IMAGES.CRATE43D,
        night: IMAGES.CRATE43N,
        rarity: RARITY.DIAMOND,
        author: "MADBalgouthi",
        name: "Fishing Box",
      },
      {
        id: 22,
        day: IMAGES.CRATE23D,
        night: IMAGES.CRATE23N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Let me out of here",
      },
      {
        id: 17,
        day: IMAGES.CRATE16D,
        night: IMAGES.CRATE16N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Wooden and Amethyst Box",
      },
      {
        id: 24,
        day: IMAGES.CRATE25D,
        night: IMAGES.CRATE25N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Aquarium",
      },
      {
        id: 28,
        day: IMAGES.CRATE28D,
        night: IMAGES.CRATE28N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Gift Box",
      },
      {
        id: 40,
        day: IMAGES.CRATE41D,
        night: IMAGES.CRATE41N,
        rarity: RARITY.AMETHYST,
        author: "MADBalgouthi",
        name: "Open Watermelon Box",
      },
      {
        id: 41,
        day: IMAGES.CRATE42D,
        night: IMAGES.CRATE42N,
        rarity: RARITY.AMETHYST,
        author: "MADBalgouthi",
        name: "Watermelon Box",
      },
      {
        id: 39,
        day: IMAGES.CRATE40D,
        night: IMAGES.CRATE40N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Thornbush Box",
      },
      {
        id: 43,
        day: IMAGES.CRATE44D,
        night: IMAGES.CRATE44N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Rabbit in the Box",
      },
      {
        id: 47,
        day: IMAGES.CRATE48D,
        night: IMAGES.CRATE48N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Garlic Plot",
      },
      {
        id: 48,
        day: IMAGES.CRATE49D,
        night: IMAGES.CRATE49N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Pumpkin Plot",
      },
      {
        id: 45,
        day: IMAGES.CRATE46D,
        night: IMAGES.CRATE46N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Autumn Box",
      },
      {
        id: 44,
        day: IMAGES.CRATE45D,
        night: IMAGES.CRATE45N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Winter Box",
      },
      {
        id: 20,
        day: IMAGES.CRATE17D,
        night: IMAGES.CRATE17N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Metal and Reidite Box",
      },
      {
        id: 23,
        day: IMAGES.CRATE24D,
        night: IMAGES.CRATE24N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Kraken Box",
      },
      {
        id: 30,
        day: IMAGES.CRATE31D,
        night: IMAGES.CRATE31N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Lava Box",
      },
      {
        id: 37,
        day: IMAGES.CRATE38D,
        night: IMAGES.CRATE38N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Lava Box 2",
      },
      {
        id: 49,
        day: IMAGES.CRATE50D,
        night: IMAGES.CRATE50N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Rabbit",
      },
      {
        id: 50,
        day: IMAGES.CRATE51D,
        night: IMAGES.CRATE51N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Wolf",
      },
      {
        id: 51,
        day: IMAGES.CRATE52D,
        night: IMAGES.CRATE52N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Spider",
      },
      {
        id: 52,
        day: IMAGES.CRATE53D,
        night: IMAGES.CRATE53N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Hawk",
      },
      {
        id: 53,
        day: IMAGES.CRATE54D,
        night: IMAGES.CRATE54N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Bear",
      },
      {
        id: 54,
        day: IMAGES.CRATE55D,
        night: IMAGES.CRATE55N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Fox",
      },
      {
        id: 55,
        day: IMAGES.CRATE56D,
        night: IMAGES.CRATE56N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Baby Mammoth",
      },
      {
        id: 56,
        day: IMAGES.CRATE57D,
        night: IMAGES.CRATE57N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Mammoth",
      },
      {
        id: 57,
        day: IMAGES.CRATE58D,
        night: IMAGES.CRATE58N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Sandworm",
      },
      {
        id: 58,
        day: IMAGES.CRATE59D,
        night: IMAGES.CRATE59N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Vulture",
      },
      {
        id: 59,
        day: IMAGES.CRATE60D,
        night: IMAGES.CRATE60N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Kraken",
      },
      {
        id: 60,
        day: IMAGES.CRATE61D,
        night: IMAGES.CRATE61N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Piranha",
      },
      {
        id: 61,
        day: IMAGES.CRATE62D,
        night: IMAGES.CRATE62N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Baby Dragon",
      },
      {
        id: 62,
        day: IMAGES.CRATE63D,
        night: IMAGES.CRATE63N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Baby Lava",
      },
      {
        id: 63,
        day: IMAGES.CRATE64D,
        night: IMAGES.CRATE64N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Dragon",
      },
      {
        id: 64,
        day: IMAGES.CRATE65D,
        night: IMAGES.CRATE65N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Penguin",
      },
      {
        id: 65,
        day: IMAGES.CRATE66D,
        night: IMAGES.CRATE66N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Lava Dragon",
      },
      {
        id: 66,
        day: IMAGES.CRATE67D,
        night: IMAGES.CRATE67N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Boar",
      },
      {
        id: 67,
        day: IMAGES.CRATE68D,
        night: IMAGES.CRATE68N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Fire mob",
      },
      {
        id: 68,
        day: IMAGES.CRATE69D,
        night: IMAGES.CRATE69N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the Crab",
      },
      {
        id: 69,
        day: IMAGES.CRATE70D,
        night: IMAGES.CRATE70N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Box of the King Crab",
      },
      {
        id: 70,
        day: IMAGES.CRATE71D,
        night: IMAGES.CRATE71N,
        rarity: RARITY.GOLD,
        author: "CrysTal",
        name: "Crystal Sky Box",
      },
      {
        id: 71,
        day: IMAGES.CRATE72D,
        night: IMAGES.CRATE72N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Dragon Box",
      },
    ],
    BOOK: [
      {
        id: 0,
        day: IMAGES.BOOK0D,
        night: IMAGES.BOOK0N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Book 1",
      },
      {
        id: 1,
        day: IMAGES.BOOK3D,
        night: IMAGES.BOOK3N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Book 2",
      },
      {
        id: 2,
        day: IMAGES.BOOK4D,
        night: IMAGES.BOOK4N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Book 3",
      },
      {
        id: 3,
        day: IMAGES.BOOK5D,
        night: IMAGES.BOOK5N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Book 4",
      },
      {
        id: 4,
        day: IMAGES.BOOK6D,
        night: IMAGES.BOOK6N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Damaged Book 1",
      },
      {
        id: 18,
        day: IMAGES.BOOK18D,
        night: IMAGES.BOOK18N,
        rarity: RARITY.WOOD,
        author: "SeveR",
        name: "Damaged Book 2",
      },
      {
        id: 5,
        day: IMAGES.BOOK1D,
        night: IMAGES.BOOK1N,
        rarity: RARITY.STONE,
        author: "Doctorpus",
        name: "Scroll",
      },
      {
        id: 6,
        day: IMAGES.BOOK2D,
        night: IMAGES.BOOK2N,
        rarity: RARITY.STONE,
        author: "Doctorpus",
        name: "Clipboard",
      },
      {
        id: 7,
        day: IMAGES.BOOK7D,
        night: IMAGES.BOOK7N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Seed Book",
      },
      {
        id: 20,
        day: IMAGES.BOOK20D,
        night: IMAGES.BOOK20N,
        rarity: RARITY.STONE,
        author: "Taco4Life",
        name: "Camo Book",
      },
      {
        id: 24,
        day: IMAGES.BOOK24D,
        night: IMAGES.BOOK24N,
        rarity: RARITY.STONE,
        author: "Communist",
        name: "Stone Tablet",
      },
      {
        id: 10,
        day: IMAGES.BOOK13D,
        night: IMAGES.BOOK13N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Star Book",
      },
      {
        id: 8,
        day: IMAGES.BOOK9D,
        night: IMAGES.BOOK9N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Gold Book",
      },
      {
        id: 15,
        day: IMAGES.BOOK15D,
        night: IMAGES.BOOK15N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Old Mysterious Paper",
      },
      {
        id: 17,
        day: IMAGES.BOOK17D,
        night: IMAGES.BOOK17N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Gold Engraving",
      },
      {
        id: 25,
        day: IMAGES.BOOK25D,
        night: IMAGES.BOOK25N,
        rarity: RARITY.GOLD,
        author: "fatant",
        name: "Ant Book",
      },
      {
        id: 32,
        day: IMAGES.BOOK32D,
        night: IMAGES.BOOK32N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Mummy Book",
      },
      {
        id: 37,
        day: IMAGES.BOOK39D,
        night: IMAGES.BOOK39N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Garlic Book",
      },
      {
        id: 38,
        day: IMAGES.BOOK38D,
        night: IMAGES.BOOK38N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Pumpkin Book",
      },
      {
        id: 39,
        day: IMAGES.BOOK40D,
        night: IMAGES.BOOK40N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Christmas Tree Book",
      },
      {
        id: 11,
        day: IMAGES.BOOK10D,
        night: IMAGES.BOOK10N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Diamond Book",
      },
      {
        id: 9,
        day: IMAGES.BOOK8D,
        night: IMAGES.BOOK8N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Obscure Book",
      },
      {
        id: 16,
        day: IMAGES.BOOK16D,
        night: IMAGES.BOOK16N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Rolled Parchment",
      },
      {
        id: 22,
        day: IMAGES.BOOK22D,
        night: IMAGES.BOOK22N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Cake Book",
      },
      {
        id: 23,
        day: IMAGES.BOOK23D,
        night: IMAGES.BOOK23N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Christmas Cake Book",
      },
      {
        id: 30,
        day: IMAGES.BOOK30D,
        night: IMAGES.BOOK30N,
        rarity: RARITY.DIAMOND,
        author: "MADBalgouthi",
        name: "Fish Book",
      },
      {
        id: 31,
        day: IMAGES.BOOK31D,
        night: IMAGES.BOOK31N,
        rarity: RARITY.DIAMOND,
        author: "CrysTal",
        name: "Once upon a time",
      },
      {
        id: 13,
        day: IMAGES.BOOK11D,
        night: IMAGES.BOOK11N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Amethyst Book",
      },
      {
        id: 28,
        day: IMAGES.BOOK28D,
        night: IMAGES.BOOK28N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Paint Pallet",
      },
      {
        id: 29,
        day: IMAGES.BOOK29D,
        night: IMAGES.BOOK29N,
        rarity: RARITY.AMETHYST,
        author: "CrysTal",
        name: "Watermelon Book",
      },
      {
        id: 27,
        day: IMAGES.BOOK27D,
        night: IMAGES.BOOK27N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Thornbush Book",
      },
      {
        id: 35,
        day: IMAGES.BOOK35D,
        night: IMAGES.BOOK35N,
        rarity: RARITY.AMETHYST,
        author: "Taco4Life",
        name: "Menu",
      },
      {
        id: 36,
        day: IMAGES.BOOK36D,
        night: IMAGES.BOOK36N,
        rarity: RARITY.AMETHYST,
        author: "CrysTal",
        name: "Lover Letter",
      },
      {
        id: 40,
        day: IMAGES.BOOK41D,
        night: IMAGES.BOOK41N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Fresh-Baked Cookies",
      },
      {
        id: 41,
        day: IMAGES.BOOK42D,
        night: IMAGES.BOOK42N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Inside, there is just a book.",
      },
      {
        id: 33,
        day: IMAGES.BOOK33D,
        night: IMAGES.BOOK33N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Winter Book",
      },
      {
        id: 34,
        day: IMAGES.BOOK34D,
        night: IMAGES.BOOK34N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Autumn Book",
      },
      {
        id: 14,
        day: IMAGES.BOOK12D,
        night: IMAGES.BOOK12N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Reidite Book",
      },
      {
        id: 12,
        day: IMAGES.BOOK14D,
        night: IMAGES.BOOK14N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Lava Book",
      },
      {
        id: 26,
        day: IMAGES.BOOK26D,
        night: IMAGES.BOOK26N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Lava Book 2",
      },
      {
        id: 19,
        day: IMAGES.BOOK19D,
        night: IMAGES.BOOK19N,
        rarity: RARITY.REIDITE,
        author: "Winter",
        name: "Ocean Mystery",
      },
      {
        id: 21,
        day: IMAGES.BOOK21D,
        night: IMAGES.BOOK21N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Dragon Book",
      },
      {
        id: 42,
        day: IMAGES.BOOK43D,
        night: IMAGES.BOOK43N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Engineer Book",
      },
      {
        id: 43,
        day: IMAGES.BOOK44D,
        night: IMAGES.BOOK44N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Nightmare Book",
      },
      {
        id: 44,
        day: IMAGES.BOOK45D,
        night: IMAGES.BOOK45N,
        rarity: RARITY.REIDITE,
        author: "aloner",
        name: "Mystery Book",
      },
    ],
    ACCESSORY: [
      {
        id: 0,
        day: IMAGES.ACCESSORY0D,
        night: IMAGES.ACCESSORY0D,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Nothing",
      },
      {
        id: 2,
        day: IMAGES.ACCESSORY4D,
        night: IMAGES.ACCESSORY4N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Pink Cheeks",
      },
      {
        id: 3,
        day: IMAGES.ACCESSORY5D,
        night: IMAGES.ACCESSORY5N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Heart",
      },
      {
        id: 1,
        day: IMAGES.ACCESSORY3D,
        night: IMAGES.ACCESSORY3N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Bandage 1",
      },
      {
        id: 4,
        day: IMAGES.ACCESSORY6D,
        night: IMAGES.ACCESSORY6N,
        rarity: RARITY.FREE,
        author: "Starve.io",
        name: "Flower 1",
      },
      {
        id: 5,
        day: IMAGES.ACCESSORY8D,
        night: IMAGES.ACCESSORY8N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Bow 1",
      },
      {
        id: 6,
        day: IMAGES.ACCESSORY9D,
        night: IMAGES.ACCESSORY9N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Bandage 2",
      },
      {
        id: 7,
        day: IMAGES.ACCESSORY15D,
        night: IMAGES.ACCESSORY15N,
        rarity: RARITY.WOOD,
        author: "Starve.io",
        name: "Flower 2",
      },
      {
        id: 8,
        day: IMAGES.ACCESSORY10D,
        night: IMAGES.ACCESSORY10N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Bandage 3",
      },
      {
        id: 36,
        day: IMAGES.ACCESSORY36D,
        night: IMAGES.ACCESSORY36N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Foliage",
      },
      {
        id: 59,
        day: IMAGES.ACCESSORY47D,
        night: IMAGES.ACCESSORY47N,
        rarity: RARITY.WOOD,
        author: "eogito",
        name: "Peaceful",
      },
      {
        id: 67,
        day: IMAGES.ACCESSORY55D,
        night: IMAGES.ACCESSORY55N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Sparkles",
      },
      {
        id: 68,
        day: IMAGES.ACCESSORY56D,
        night: IMAGES.ACCESSORY56N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Luxury",
      },
      {
        id: 69,
        day: IMAGES.ACCESSORY57D,
        night: IMAGES.ACCESSORY57N,
        rarity: RARITY.WOOD,
        author: "pizza wa",
        name: "Snow Flakes Crown",
      },
      {
        id: 17,
        day: IMAGES.ACCESSORY17D,
        night: IMAGES.ACCESSORY17N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Glasses 1",
      },
      {
        id: 10,
        day: IMAGES.ACCESSORY7D,
        night: IMAGES.ACCESSORY7N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Bow 2",
      },
      {
        id: 11,
        day: IMAGES.ACCESSORY13D,
        night: IMAGES.ACCESSORY13N,
        rarity: RARITY.STONE,
        author: "pizza wa",
        name: "Little Stars",
      },
      {
        id: 12,
        day: IMAGES.ACCESSORY11D,
        night: IMAGES.ACCESSORY11N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Pirate Eye Patch 1",
      },
      {
        id: 44,
        day: IMAGES.ACCESSORY44D,
        night: IMAGES.ACCESSORY44N,
        rarity: RARITY.STONE,
        author: "Taco4Life",
        name: "Pirate Eye Patch 2",
      },
      {
        id: 23,
        day: IMAGES.ACCESSORY23D,
        night: IMAGES.ACCESSORY23N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Clown nose",
      },
      {
        id: 16,
        day: IMAGES.ACCESSORY2D,
        night: IMAGES.ACCESSORY2N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Eye Patch",
      },
      {
        id: 30,
        day: IMAGES.ACCESSORY30D,
        night: IMAGES.ACCESSORY30N,
        rarity: RARITY.STONE,
        author: "eogito",
        name: "Flower 3",
      },
      {
        id: 38,
        day: IMAGES.ACCESSORY38D,
        night: IMAGES.ACCESSORY38N,
        rarity: RARITY.STONE,
        author: "Winter",
        name: "False Nose",
      },
      {
        id: 74,
        day: IMAGES.ACCESSORY62D,
        night: IMAGES.ACCESSORY62N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Red Cloth",
      },
      {
        id: 75,
        day: IMAGES.ACCESSORY63D,
        night: IMAGES.ACCESSORY63N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Blue Cloth",
      },
      {
        id: 79,
        day: IMAGES.ACCESSORY67D,
        night: IMAGES.ACCESSORY67N,
        rarity: RARITY.STONE,
        author: "Starve.io",
        name: "Transparent Mask",
      },
      {
        id: 89,
        day: IMAGES.ACCESSORY77D,
        night: IMAGES.ACCESSORY77N,
        rarity: RARITY.STONE,
        author: "Anyone want to play?",
        name: "Starve.io Anime",
      },
      {
        id: 94,
        day: IMAGES.ACCESSORY78D,
        night: IMAGES.ACCESSORY78N,
        rarity: RARITY.STONE,
        author: "Ant",
        name: "Hero Mask",
      },
      {
        id: 15,
        day: IMAGES.ACCESSORY16D,
        night: IMAGES.ACCESSORY16N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Star Glasses",
      },
      {
        id: 21,
        day: IMAGES.ACCESSORY21D,
        night: IMAGES.ACCESSORY21N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Great-aunt's Glasses",
      },
      {
        id: 24,
        day: IMAGES.ACCESSORY24D,
        night: IMAGES.ACCESSORY24N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Little Starver",
      },
      {
        id: 22,
        day: IMAGES.ACCESSORY22D,
        night: IMAGES.ACCESSORY22N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Little Glasses",
      },
      {
        id: 13,
        day: IMAGES.ACCESSORY14D,
        night: IMAGES.ACCESSORY14N,
        rarity: RARITY.GOLD,
        author: "Starve.io",
        name: "Flower Chain",
      },
      {
        id: 29,
        day: IMAGES.ACCESSORY29D,
        night: IMAGES.ACCESSORY29N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Horns",
      },
      {
        id: 31,
        day: IMAGES.ACCESSORY31D,
        night: IMAGES.ACCESSORY31N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Golden Flower",
      },
      {
        id: 40,
        day: IMAGES.ACCESSORY40D,
        night: IMAGES.ACCESSORY40N,
        rarity: RARITY.GOLD,
        author: "pizza wa",
        name: "Sleeping Mask",
      },
      {
        id: 57,
        day: IMAGES.ACCESSORY50D,
        night: IMAGES.ACCESSORY50N,
        rarity: RARITY.GOLD,
        author: "Taco4Life",
        name: "Fish on your head",
      },
      {
        id: 58,
        day: IMAGES.ACCESSORY46D,
        night: IMAGES.ACCESSORY46N,
        rarity: RARITY.GOLD,
        author: "eogito",
        name: "Rose",
      },
      {
        id: 91,
        day: IMAGES.ACCESSORY80D,
        night: IMAGES.ACCESSORY80N,
        rarity: RARITY.GOLD,
        author: "upfiz",
        name: "Grey Scarf",
      },
      {
        id: 92,
        day: IMAGES.ACCESSORY81D,
        night: IMAGES.ACCESSORY81N,
        rarity: RARITY.GOLD,
        author: "upfiz",
        name: "Black Scarf",
      },
      {
        id: 93,
        day: IMAGES.ACCESSORY82D,
        night: IMAGES.ACCESSORY82N,
        rarity: RARITY.GOLD,
        author: "upfiz",
        name: "Skull Mask",
      },
      {
        id: 9,
        day: IMAGES.ACCESSORY1D,
        night: IMAGES.ACCESSORY1N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Fancy Glasses",
      },
      {
        id: 25,
        day: IMAGES.ACCESSORY25D,
        night: IMAGES.ACCESSORY25N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Medecin Mask",
      },
      {
        id: 14,
        day: IMAGES.ACCESSORY12D,
        night: IMAGES.ACCESSORY12N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mr. Mayor",
      },
      {
        id: 19,
        day: IMAGES.ACCESSORY19D,
        night: IMAGES.ACCESSORY19N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Sunglasses 2",
      },
      {
        id: 28,
        day: IMAGES.ACCESSORY28D,
        night: IMAGES.ACCESSORY28N,
        rarity: RARITY.DIAMOND,
        author: "pizza wa",
        name: "Starfish",
      },
      {
        id: 37,
        day: IMAGES.ACCESSORY37D,
        night: IMAGES.ACCESSORY37N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Berry",
      },
      {
        id: 39,
        day: IMAGES.ACCESSORY39D,
        night: IMAGES.ACCESSORY39N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Flake",
      },
      {
        id: 43,
        day: IMAGES.ACCESSORY43D,
        night: IMAGES.ACCESSORY43N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Leaf ",
      },
      {
        id: 61,
        day: IMAGES.ACCESSORY49D,
        night: IMAGES.ACCESSORY49N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "A sword in your head",
      },
      {
        id: 62,
        day: IMAGES.ACCESSORY51D,
        night: IMAGES.ACCESSORY51N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Winter Scarf",
      },
      {
        id: 64,
        day: IMAGES.ACCESSORY53D,
        night: IMAGES.ACCESSORY53N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Winter Scarf 2",
      },
      {
        id: 66,
        day: IMAGES.ACCESSORY54D,
        night: IMAGES.ACCESSORY54N,
        rarity: RARITY.DIAMOND,
        author: "eogito",
        name: "Winter Scarf 3",
      },
      {
        id: 70,
        day: IMAGES.ACCESSORY58D,
        night: IMAGES.ACCESSORY58N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Mask with animal tracks",
      },
      {
        id: 71,
        day: IMAGES.ACCESSORY59D,
        night: IMAGES.ACCESSORY59N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Spring Mask",
      },
      {
        id: 72,
        day: IMAGES.ACCESSORY60D,
        night: IMAGES.ACCESSORY60N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Pink Mask",
      },
      {
        id: 73,
        day: IMAGES.ACCESSORY61D,
        night: IMAGES.ACCESSORY61N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Blue Mask",
      },
      {
        id: 76,
        day: IMAGES.ACCESSORY64D,
        night: IMAGES.ACCESSORY64N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Military Mask",
      },
      {
        id: 77,
        day: IMAGES.ACCESSORY65D,
        night: IMAGES.ACCESSORY65N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Orange Mask",
      },
      {
        id: 78,
        day: IMAGES.ACCESSORY66D,
        night: IMAGES.ACCESSORY66N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "White and Red Points Mask",
      },
      {
        id: 80,
        day: IMAGES.ACCESSORY68D,
        night: IMAGES.ACCESSORY68N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Stick out your tongue Mask",
      },
      {
        id: 81,
        day: IMAGES.ACCESSORY69D,
        night: IMAGES.ACCESSORY69N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Two Teeth Mask",
      },
      {
        id: 82,
        day: IMAGES.ACCESSORY70D,
        night: IMAGES.ACCESSORY70N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Make-up Mask",
      },
      {
        id: 83,
        day: IMAGES.ACCESSORY71D,
        night: IMAGES.ACCESSORY71N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Sad Mask",
      },
      {
        id: 84,
        day: IMAGES.ACCESSORY72D,
        night: IMAGES.ACCESSORY72N,
        rarity: RARITY.DIAMOND,
        author: "Starve.io",
        name: "Happy Mask",
      },
      {
        id: 90,
        day: IMAGES.ACCESSORY79D,
        night: IMAGES.ACCESSORY79N,
        rarity: RARITY.DIAMOND,
        author: "aloner",
        name: "Blood",
      },
      {
        id: 27,
        day: IMAGES.ACCESSORY27D,
        night: IMAGES.ACCESSORY27N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Clown Face",
      },
      {
        id: 20,
        day: IMAGES.ACCESSORY20D,
        night: IMAGES.ACCESSORY20N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Sunglasses 3",
      },
      {
        id: 32,
        day: IMAGES.ACCESSORY32D,
        night: IMAGES.ACCESSORY32N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Engineer's Glasses",
      },
      {
        id: 33,
        day: IMAGES.ACCESSORY33D,
        night: IMAGES.ACCESSORY33N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Engineer's Monocle",
      },
      {
        id: 34,
        day: IMAGES.ACCESSORY34D,
        night: IMAGES.ACCESSORY34N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mauve's butt",
      },
      {
        id: 41,
        day: IMAGES.ACCESSORY41D,
        night: IMAGES.ACCESSORY41N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Lapa Head",
      },
      {
        id: 42,
        day: IMAGES.ACCESSORY42D,
        night: IMAGES.ACCESSORY42N,
        rarity: RARITY.AMETHYST,
        author: "eogito",
        name: "Lapa Head ",
      },
      {
        id: 85,
        day: IMAGES.ACCESSORY73D,
        night: IMAGES.ACCESSORY73N,
        rarity: RARITY.AMETHYST,
        author: "Starve.io",
        name: "Mask and Glasses",
      },
      {
        id: 60,
        day: IMAGES.ACCESSORY48D,
        night: IMAGES.ACCESSORY48N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Jason",
      },
      {
        id: 26,
        day: IMAGES.ACCESSORY26D,
        night: IMAGES.ACCESSORY26N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Devil Horns",
      },
      {
        id: 18,
        day: IMAGES.ACCESSORY18D,
        night: IMAGES.ACCESSORY18N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Big Boss",
      },
      {
        id: 35,
        day: IMAGES.ACCESSORY35D,
        night: IMAGES.ACCESSORY35N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Baby Kraken",
      },
      {
        id: 63,
        day: IMAGES.ACCESSORY52D,
        night: IMAGES.ACCESSORY52N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Deer Antlers",
      },
      {
        id: 65,
        day: IMAGES.ACCESSORY45D,
        night: IMAGES.ACCESSORY45N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Baby Dragon on your head",
      },
      {
        id: 86,
        day: IMAGES.ACCESSORY74D,
        night: IMAGES.ACCESSORY74N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Gaz Mask and Glasses",
      },
      {
        id: 87,
        day: IMAGES.ACCESSORY75D,
        night: IMAGES.ACCESSORY75N,
        rarity: RARITY.REIDITE,
        author: "Starve.io",
        name: "Pink Gaz Mask and Glasses",
      },
      {
        id: 88,
        day: IMAGES.ACCESSORY76D,
        night: IMAGES.ACCESSORY76N,
        rarity: RARITY.REIDITE,
        author: "eogito",
        name: "Engineer Glasses",
      },
      {
        id: 45,
        day: IMAGES.LEVEL5D,
        night: IMAGES.LEVEL5N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 5",
        level: 5,
      },
      {
        id: 46,
        day: IMAGES.LEVEL10D,
        night: IMAGES.LEVEL10N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 10",
        level: 10,
      },
      {
        id: 47,
        day: IMAGES.LEVEL15D,
        night: IMAGES.LEVEL15N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 15",
        level: 15,
      },
      {
        id: 48,
        day: IMAGES.LEVEL20D,
        night: IMAGES.LEVEL20N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 20",
        level: 20,
      },
      {
        id: 49,
        day: IMAGES.LEVEL25D,
        night: IMAGES.LEVEL25N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 25",
        level: 25,
      },
      {
        id: 50,
        day: IMAGES.LEVEL30D,
        night: IMAGES.LEVEL30N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 30",
        level: 30,
      },
      {
        id: 51,
        day: IMAGES.LEVEL35D,
        night: IMAGES.LEVEL35N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 35",
        level: 35,
      },
      {
        id: 52,
        day: IMAGES.LEVEL40D,
        night: IMAGES.LEVEL40N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 40",
        level: 40,
      },
      {
        id: 53,
        day: IMAGES.LEVEL45D,
        night: IMAGES.LEVEL45N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 45",
        level: 45,
      },
      {
        id: 54,
        day: IMAGES.LEVEL50D,
        night: IMAGES.LEVEL50N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 50",
        level: 50,
      },
      {
        id: 55,
        day: IMAGES.LEVEL55D,
        night: IMAGES.LEVEL55N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 55",
        level: 55,
      },
      {
        id: 56,
        day: IMAGES.LEVEL60D,
        night: IMAGES.LEVEL60N,
        rarity: RARITY.LEVEL,
        author: "Starve.io",
        name: "More than Level 60",
        level: 60,
      },
    ],
  };
  WORLD.ZOMBIE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 21);
  WORLD.VAMPIRE_SKIN = find_cosmetics_per_id(COSMETICS.SKIN, 20);
  sprite[SPRITE.BODY] = [];
  sprite[SPRITE.HAND] = [];
  sprite[SPRITE.CRATE] = [];
  sprite[SPRITE.BOOK] = [];
  sprite[SPRITE.BAG] = [];
  sprite[SPRITE.ACCESSORY] = [];
  for (let i = 0; i < COSMETICS.SKIN.length; i++) {
    sprite[SPRITE.BODY][i] = [COSMETICS.SKIN[i].day, COSMETICS.SKIN[i].night];
    sprite[SPRITE.HAND][i] = [
      COSMETICS.SKIN[i].dayHand,
      COSMETICS.SKIN[i].nightHand,
    ];
  }
  for (let i = 0; i < COSMETICS.BOOK.length; i++) {
    sprite[SPRITE.BOOK][i] = [COSMETICS.BOOK[i].day, COSMETICS.BOOK[i].night];
  }
  for (let i = 0; i < COSMETICS.CRATE.length; i++) {
    sprite[SPRITE.CRATE][i] = [
      COSMETICS.CRATE[i].day,
      COSMETICS.CRATE[i].night,
    ];
  }
  for (let i = 0; i < COSMETICS.BAG.length; i++) {
    sprite[SPRITE.BAG][i] = [COSMETICS.BAG[i].day, COSMETICS.BAG[i].night];
  }
  for (let i = 0; i < COSMETICS.ACCESSORY.length; i++) {
    sprite[SPRITE.ACCESSORY][i] = [
      COSMETICS.ACCESSORY[i].day,
      COSMETICS.ACCESSORY[i].night,
    ];
  }
};
function fill_path(e, t, i, r) {
  t && ((e.fillStyle = t), e.fill());
  i && ((e.lineWidth = r), (e.strokeStyle = i), e.stroke());
}
function round_rect(
  _0x5b8000,
  _0x4ee7fd,
  _0x4af0ac,
  _0x162f7f,
  _0x5bf230,
  _0x135e62
) {
  _0x162f7f < 2 * _0x135e62 && (_0x135e62 = _0x162f7f / 2);
  _0x5bf230 < 2 * _0x135e62 && (_0x135e62 = _0x5bf230 / 2);
  0 > _0x135e62 && (_0x135e62 = 0);
  _0x5b8000.beginPath();
  _0x5b8000.moveTo(_0x4ee7fd + _0x135e62, _0x4af0ac);
  _0x5b8000.arcTo(
    _0x4ee7fd + _0x162f7f,
    _0x4af0ac,
    _0x4ee7fd + _0x162f7f,
    _0x4af0ac + _0x5bf230,
    _0x135e62
  );
  _0x5b8000.arcTo(
    _0x4ee7fd + _0x162f7f,
    _0x4af0ac + _0x5bf230,
    _0x4ee7fd,
    _0x4af0ac + _0x5bf230,
    _0x135e62
  );
  _0x5b8000.arcTo(
    _0x4ee7fd,
    _0x4af0ac + _0x5bf230,
    _0x4ee7fd,
    _0x4af0ac,
    _0x135e62
  );
  _0x5b8000.arcTo(
    _0x4ee7fd,
    _0x4af0ac,
    _0x4ee7fd + _0x162f7f,
    _0x4af0ac,
    _0x135e62
  );
  _0x5b8000.closePath();
}
function semi_round_rect(
  _0x2511fe,
  _0x3c242d,
  _0x593fa2,
  _0x2aa93c,
  _0x5cfd24,
  _0x35a595
) {
  _0x2aa93c < 2 * _0x35a595 && (_0x35a595 = _0x2aa93c / 2);
  _0x5cfd24 < 2 * _0x35a595 && (_0x35a595 = _0x5cfd24 / 2);
  0 > _0x35a595 && (_0x35a595 = 0);
  _0x2511fe.beginPath();
  _0x2511fe.moveTo(_0x3c242d + _0x35a595, _0x593fa2);
  _0x2511fe.arcTo(
    _0x3c242d + _0x2aa93c,
    _0x593fa2,
    _0x3c242d + _0x2aa93c,
    _0x593fa2 + _0x5cfd24,
    0
  );
  _0x2511fe.arcTo(
    _0x3c242d + _0x2aa93c,
    _0x593fa2 + _0x5cfd24,
    _0x3c242d,
    _0x593fa2 + _0x5cfd24,
    _0x35a595
  );
  _0x2511fe.arcTo(_0x3c242d, _0x593fa2 + _0x5cfd24, _0x3c242d, _0x593fa2, 0);
  _0x2511fe.arcTo(
    _0x3c242d,
    _0x593fa2,
    _0x3c242d + _0x2aa93c,
    _0x593fa2,
    _0x35a595
  );
  _0x2511fe.closePath();
}
function circle(e, t, i, r) {
  e.beginPath();
  e.arc(t, i, r, 0, Math.PI * 2);
}
function circle_angle(e, t, i, r, a) {
  e.beginPath();
  e.lineCap = "round";
  e.arc(t, i, r, 0, Math.PI * 2 * a);
}
function round_regular_polygon(e, t, i, r) {
  var _0x231b55 = (Math.PI * 2) / t;
  e.beginPath();
  var _0x3ffc2e = [
    {
      x: i,
      y: 0,
    },
  ];
  var _0x303cea = [];
  for (var _0x2d50e5 = 1; _0x2d50e5 < t; _0x2d50e5++) {
    _0x3ffc2e.push({
      x: Math.cos(_0x2d50e5 * _0x231b55) * i,
      y: Math.sin(_0x2d50e5 * _0x231b55) * i,
    });
    var _0x396b13 = _0x3ffc2e.length;
    _0x303cea.push(
      Utils.middle_point(_0x3ffc2e[_0x396b13 - 2], _0x3ffc2e[_0x396b13 - 1])
    );
  }
  _0x303cea.push(
    Utils.middle_point(_0x3ffc2e[_0x3ffc2e.length - 1], _0x3ffc2e[0])
  );
  var _0x5325f2 = _0x303cea[_0x303cea.length - 1];
  e.moveTo(_0x5325f2.x, _0x5325f2.y);
  for (var _0x2d50e5 = 0; _0x2d50e5 < t; _0x2d50e5++) {
    e.arcTo(
      _0x3ffc2e[_0x2d50e5].x,
      _0x3ffc2e[_0x2d50e5].y,
      _0x303cea[_0x2d50e5].x,
      _0x303cea[_0x2d50e5].y,
      r
    );
  }
  e.closePath();
}
function create_rotated_img(_0x447806, _0x543a93) {
  var _0x336c72 = document.createElement("canvas");
  var _0x2c6ff3 = _0x336c72.getContext("2d");
  var _0x33ef86 = Math.sqrt(
    _0x543a93.width * _0x543a93.width + _0x543a93.height * _0x543a93.height
  );
  d2 = _0x33ef86 / 2;
  _0x336c72.width = _0x33ef86;
  _0x336c72.height = _0x33ef86;
  _0x2c6ff3.translate(d2, d2);
  _0x2c6ff3.rotate(_0x447806);
  _0x2c6ff3.drawImage(_0x543a93, -_0x543a93.width / 2, -_0x543a93.height / 2);
  return _0x336c72;
}
function create_message(_0x310c7e, _0x5e2dcf) {
  var _0x25868a = document.createElement("canvas");
  var _0x488cb0 = _0x25868a.getContext("2d");
  var _0x13b5ae = Math.floor(_0x310c7e * 28);
  var _0x4bf820 = Math.floor(_0x310c7e * 20);
  _0x488cb0.font = _0x4bf820 + "px Baloo Paaji";
  var _0x355e5f = 8 * _0x310c7e;
  var _0x24f0aa = _0x488cb0.measureText(_0x5e2dcf).width + _0x355e5f * 2;
  _0x25868a.width = _0x24f0aa;
  _0x25868a.height = _0x13b5ae;
  round_rect(_0x488cb0, 0, 0, _0x24f0aa, _0x13b5ae, 10 * _0x310c7e);
  _0x488cb0.globalAlpha = 0.5;
  fill_path(_0x488cb0, "#000");
  _0x488cb0.globalAlpha = 1;
  _0x488cb0.textBaseline = "middle";
  _0x488cb0.font = _0x4bf820 + "px Baloo Paaji";
  _0x488cb0.beginPath();
  _0x488cb0.fillStyle = "#FFF";
  _0x488cb0.fillText(_0x5e2dcf, _0x355e5f, _0x13b5ae / 2);
  return _0x25868a;
}
function create_accessory(_0x5c3421, _0x155f71, _0x56d20d) {
  var _0x4c0cc2 = document.createElement("canvas");
  var _0x52bcc8 = _0x4c0cc2.getContext("2d");
  _0x4c0cc2.width = 120 * _0x5c3421;
  _0x4c0cc2.height = 110 * _0x5c3421;
  if (_0x56d20d == 1) {
    circle(
      _0x52bcc8,
      35 * _0x5c3421,
      75 * _0x5c3421,
      19.72308292331602 * _0x5c3421
    );
    fill_path(_0x52bcc8, _0x155f71[1], _0x155f71[0], 4 * _0x5c3421);
    _0x52bcc8.save();
    _0x52bcc8.translate(11 * _0x5c3421, 77 * _0x5c3421);
    round_rect(
      _0x52bcc8,
      -4 * _0x5c3421,
      -4 * _0x5c3421,
      8 * _0x5c3421,
      8 * _0x5c3421,
      10 * _0x5c3421
    );
    _0x52bcc8.restore();
    fill_path(_0x52bcc8, undefined, _0x155f71[0], 4 * _0x5c3421);
    _0x52bcc8.beginPath();
    _0x52bcc8.lineCap = "round";
    _0x52bcc8.lineJoin = "round";
    _0x52bcc8.moveTo(11 * _0x5c3421, 81 * _0x5c3421);
    _0x52bcc8.bezierCurveTo(
      13 * _0x5c3421,
      105 * _0x5c3421,
      9 * _0x5c3421,
      106 * _0x5c3421,
      8 * _0x5c3421,
      91 * _0x5c3421
    );
    fill_path(_0x52bcc8, undefined, _0x155f71[0], 4 * _0x5c3421);
  } else {
    if (_0x56d20d == 2) {
      circle(_0x52bcc8, 85 * _0x5c3421, 75 * _0x5c3421, 16 * _0x5c3421);
      fill_path(_0x52bcc8, _0x155f71[0], _0x155f71[0], 4 * _0x5c3421);
      _0x52bcc8.scale(-1.7 * _0x5c3421, 1.7 * _0x5c3421);
      _0x52bcc8.translate(-120 * _0x5c3421, 0 * _0x5c3421);
      _0x52bcc8.beginPath();
      _0x52bcc8.lineCap = "round";
      _0x52bcc8.lineJoin = "round";
      _0x52bcc8.moveTo(20 * _0x5c3421, 95 * _0x5c3421);
      _0x52bcc8.bezierCurveTo(
        56.5 * _0x5c3421,
        54 * _0x5c3421,
        56.5 * _0x5c3421,
        54 * _0x5c3421,
        93 * _0x5c3421,
        13 * _0x5c3421
      );
      _0x52bcc8.bezierCurveTo(
        89 * _0x5c3421,
        13 * _0x5c3421,
        89 * _0x5c3421,
        13 * _0x5c3421,
        85 * _0x5c3421,
        13 * _0x5c3421
      );
      _0x52bcc8.bezierCurveTo(
        49.5 * _0x5c3421,
        53 * _0x5c3421,
        49.5 * _0x5c3421,
        53 * _0x5c3421,
        14 * _0x5c3421,
        93 * _0x5c3421
      );
      _0x52bcc8.bezierCurveTo(
        15 * _0x5c3421,
        94 * _0x5c3421,
        15 * _0x5c3421,
        94 * _0x5c3421,
        19 * _0x5c3421,
        95 * _0x5c3421
      );
      _0x52bcc8.closePath();
      fill_path(_0x52bcc8, _0x155f71[0], _0x155f71[0], 4 * _0x5c3421);
    } else {
      if (_0x56d20d == 3) {
        _0x52bcc8.translate(-52 * _0x5c3421, 0);
        _0x52bcc8.save();
        _0x52bcc8.translate(84.5 * _0x5c3421, 36.5 * _0x5c3421);
        _0x52bcc8.rotate(-0.96);
        round_rect(
          _0x52bcc8,
          -5.5 * _0x5c3421,
          -15.5 * _0x5c3421,
          11 * _0x5c3421,
          31 * _0x5c3421,
          4 * _0x5c3421
        );
        _0x52bcc8.restore();
        fill_path(_0x52bcc8, _0x155f71[0], _0x155f71[1], 4 * _0x5c3421);
        _0x52bcc8.save();
        _0x52bcc8.translate(84 * _0x5c3421, 36 * _0x5c3421);
        _0x52bcc8.rotate(0.64);
        round_rect(
          _0x52bcc8,
          -5 * _0x5c3421,
          -16 * _0x5c3421,
          10 * _0x5c3421,
          32 * _0x5c3421,
          4 * _0x5c3421
        );
        _0x52bcc8.restore();
        fill_path(_0x52bcc8, _0x155f71[0], _0x155f71[1], 4 * _0x5c3421);
        _0x52bcc8.save();
        _0x52bcc8.translate(83.5 * _0x5c3421, 36.5 * _0x5c3421);
        _0x52bcc8.rotate(0.68);
        round_rect(
          _0x52bcc8,
          -2.5 * _0x5c3421,
          -6.5 * _0x5c3421,
          5 * _0x5c3421,
          13 * _0x5c3421,
          4 * _0x5c3421
        );
        _0x52bcc8.restore();
        fill_path(_0x52bcc8, _0x155f71[1]);
      } else {
        if (_0x56d20d == 4) {
          circle(_0x52bcc8, 35 * _0x5c3421, 85 * _0x5c3421, 17 * _0x5c3421);
          fill_path(_0x52bcc8, _0x155f71[1], _0x155f71[0], 3 * _0x5c3421);
          circle(_0x52bcc8, 85 * _0x5c3421, 85 * _0x5c3421, 17 * _0x5c3421);
          fill_path(_0x52bcc8, _0x155f71[1], _0x155f71[0], 3 * _0x5c3421);
          _0x52bcc8.beginPath();
          _0x52bcc8.lineCap = "round";
          _0x52bcc8.lineJoin = "round";
          _0x52bcc8.moveTo(53 * _0x5c3421, 86 * _0x5c3421);
          _0x52bcc8.bezierCurveTo(
            59 * _0x5c3421,
            83 * _0x5c3421,
            63 * _0x5c3421,
            83 * _0x5c3421,
            67 * _0x5c3421,
            86 * _0x5c3421
          );
          fill_path(_0x52bcc8, undefined, _0x155f71[0], 4 * _0x5c3421);
        } else {
          if (_0x56d20d == 5) {
            _0x52bcc8.scale(1.2, 1.2);
            _0x52bcc8.translate(-27 * _0x5c3421, -8 * _0x5c3421);
            _0x52bcc8.scale(1.2, 1.2);
            _0x52bcc8.translate(-10 * _0x5c3421, 0);
            _0x52bcc8.beginPath();
            _0x52bcc8.lineCap = "round";
            _0x52bcc8.lineJoin = "round";
            _0x52bcc8.moveTo(97 * _0x5c3421, 23 * _0x5c3421);
            _0x52bcc8.bezierCurveTo(
              105 * _0x5c3421,
              24 * _0x5c3421,
              107 * _0x5c3421,
              37 * _0x5c3421,
              97 * _0x5c3421,
              39 * _0x5c3421
            );
            _0x52bcc8.bezierCurveTo(
              85 * _0x5c3421,
              40 * _0x5c3421,
              84 * _0x5c3421,
              22 * _0x5c3421,
              97 * _0x5c3421,
              23 * _0x5c3421
            );
            _0x52bcc8.closePath();
            fill_path(_0x52bcc8, undefined, _0x155f71[0], 3 * _0x5c3421);
            _0x52bcc8.beginPath();
            _0x52bcc8.lineCap = "round";
            _0x52bcc8.lineJoin = "round";
            _0x52bcc8.moveTo(96 * _0x5c3421, 24 * _0x5c3421);
            _0x52bcc8.bezierCurveTo(
              96 * _0x5c3421,
              30.5 * _0x5c3421,
              96 * _0x5c3421,
              30.5 * _0x5c3421,
              96 * _0x5c3421,
              37 * _0x5c3421
            );
            _0x52bcc8.closePath();
            fill_path(_0x52bcc8, undefined, _0x155f71[0], 3 * _0x5c3421);
            _0x52bcc8.translate(0, -2 * _0x5c3421);
            _0x52bcc8.beginPath();
            _0x52bcc8.lineCap = "round";
            _0x52bcc8.lineJoin = "round";
            _0x52bcc8.moveTo(88 * _0x5c3421, 37 * _0x5c3421);
            _0x52bcc8.bezierCurveTo(
              93 * _0x5c3421,
              33 * _0x5c3421,
              91.5 * _0x5c3421,
              34.5 * _0x5c3421,
              95 * _0x5c3421,
              32 * _0x5c3421
            );
            _0x52bcc8.bezierCurveTo(
              98.5 * _0x5c3421,
              34 * _0x5c3421,
              98.5 * _0x5c3421,
              34 * _0x5c3421,
              102 * _0x5c3421,
              36 * _0x5c3421
            );
            fill_path(_0x52bcc8, undefined, _0x155f71[0], 3 * _0x5c3421);
          } else {
            if (_0x56d20d == 6) {
              circle(_0x52bcc8, 13 * _0x5c3421, 79 * _0x5c3421, 5 * _0x5c3421);
              fill_path(_0x52bcc8, _0x155f71[0]);
              circle(_0x52bcc8, 106 * _0x5c3421, 79 * _0x5c3421, 5 * _0x5c3421);
              fill_path(_0x52bcc8, _0x155f71[0]);
            } else {
              if (_0x56d20d == 7) {
                _0x52bcc8.translate(0 * _0x5c3421, 5 * _0x5c3421);
                _0x52bcc8.globalAlpha = 0.5;
                _0x52bcc8.beginPath();
                _0x52bcc8.lineCap = "round";
                _0x52bcc8.lineJoin = "round";
                _0x52bcc8.moveTo(
                  27 * _0x5c3421,
                  14.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  29 * _0x5c3421,
                  4.399993896484375 * _0x5c3421,
                  44 * _0x5c3421,
                  16.399993896484375 * _0x5c3421,
                  37 * _0x5c3421,
                  21.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  47 * _0x5c3421,
                  17.399993896484375 * _0x5c3421,
                  45 * _0x5c3421,
                  36.399993896484375 * _0x5c3421,
                  37 * _0x5c3421,
                  32.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  44 * _0x5c3421,
                  40.399993896484375 * _0x5c3421,
                  28 * _0x5c3421,
                  47.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  37.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  22 * _0x5c3421,
                  46.399993896484375 * _0x5c3421,
                  9 * _0x5c3421,
                  37.399993896484375 * _0x5c3421,
                  16 * _0x5c3421,
                  30.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  6 * _0x5c3421,
                  34.399993896484375 * _0x5c3421,
                  9 * _0x5c3421,
                  15.399993896484375 * _0x5c3421,
                  18 * _0x5c3421,
                  19.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  10 * _0x5c3421,
                  12.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  7.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  14.399993896484375 * _0x5c3421
                );
                _0x52bcc8.closePath();
                fill_path(_0x52bcc8, _0x155f71[3]);
                _0x52bcc8.globalAlpha = 1;
                _0x52bcc8.translate(0 * _0x5c3421, -5 * _0x5c3421);
                _0x52bcc8.beginPath();
                _0x52bcc8.lineCap = "round";
                _0x52bcc8.lineJoin = "round";
                _0x52bcc8.moveTo(
                  27 * _0x5c3421,
                  14.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  29 * _0x5c3421,
                  4.399993896484375 * _0x5c3421,
                  44 * _0x5c3421,
                  16.399993896484375 * _0x5c3421,
                  37 * _0x5c3421,
                  21.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  47 * _0x5c3421,
                  17.399993896484375 * _0x5c3421,
                  45 * _0x5c3421,
                  36.399993896484375 * _0x5c3421,
                  37 * _0x5c3421,
                  32.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  44 * _0x5c3421,
                  40.399993896484375 * _0x5c3421,
                  28 * _0x5c3421,
                  47.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  37.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  22 * _0x5c3421,
                  46.399993896484375 * _0x5c3421,
                  9 * _0x5c3421,
                  37.399993896484375 * _0x5c3421,
                  16 * _0x5c3421,
                  30.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  6 * _0x5c3421,
                  34.399993896484375 * _0x5c3421,
                  9 * _0x5c3421,
                  15.399993896484375 * _0x5c3421,
                  18 * _0x5c3421,
                  19.399993896484375 * _0x5c3421
                );
                _0x52bcc8.bezierCurveTo(
                  10 * _0x5c3421,
                  12.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  7.399993896484375 * _0x5c3421,
                  26 * _0x5c3421,
                  14.399993896484375 * _0x5c3421
                );
                _0x52bcc8.closePath();
                fill_path(_0x52bcc8, _0x155f71[1], _0x155f71[2], 2 * _0x5c3421);
                circle(
                  _0x52bcc8,
                  27 * _0x5c3421,
                  26.800003051757812 * _0x5c3421,
                  5 * _0x5c3421
                );
                fill_path(_0x52bcc8, _0x155f71[0]);
              } else {
                if (_0x56d20d == 8) {
                  _0x52bcc8.translate(-32 * _0x5c3421, -19 * _0x5c3421);
                  _0x52bcc8.beginPath();
                  _0x52bcc8.lineCap = "round";
                  _0x52bcc8.lineJoin = "round";
                  _0x52bcc8.moveTo(123 * _0x5c3421, 46 * _0x5c3421);
                  _0x52bcc8.bezierCurveTo(
                    132 * _0x5c3421,
                    46 * _0x5c3421,
                    135 * _0x5c3421,
                    39 * _0x5c3421,
                    134 * _0x5c3421,
                    33 * _0x5c3421
                  );
                  _0x52bcc8.bezierCurveTo(
                    145 * _0x5c3421,
                    43 * _0x5c3421,
                    142 * _0x5c3421,
                    65 * _0x5c3421,
                    127 * _0x5c3421,
                    66 * _0x5c3421
                  );
                  _0x52bcc8.bezierCurveTo(
                    118 * _0x5c3421,
                    61 * _0x5c3421,
                    119 * _0x5c3421,
                    51 * _0x5c3421,
                    123 * _0x5c3421,
                    46 * _0x5c3421
                  );
                  _0x52bcc8.closePath();
                  fill_path(
                    _0x52bcc8,
                    _0x155f71[0],
                    _0x155f71[1],
                    4 * _0x5c3421
                  );
                  _0x52bcc8.beginPath();
                  _0x52bcc8.lineCap = "round";
                  _0x52bcc8.lineJoin = "round";
                  _0x52bcc8.moveTo(49 * _0x5c3421, 32 * _0x5c3421);
                  _0x52bcc8.bezierCurveTo(
                    49 * _0x5c3421,
                    44 * _0x5c3421,
                    56 * _0x5c3421,
                    44 * _0x5c3421,
                    61 * _0x5c3421,
                    46 * _0x5c3421
                  );
                  _0x52bcc8.bezierCurveTo(
                    67 * _0x5c3421,
                    52 * _0x5c3421,
                    65 * _0x5c3421,
                    65 * _0x5c3421,
                    55 * _0x5c3421,
                    66 * _0x5c3421
                  );
                  _0x52bcc8.bezierCurveTo(
                    37 * _0x5c3421,
                    60 * _0x5c3421,
                    42 * _0x5c3421,
                    38 * _0x5c3421,
                    49 * _0x5c3421,
                    32 * _0x5c3421
                  );
                  _0x52bcc8.closePath();
                  fill_path(
                    _0x52bcc8,
                    _0x155f71[0],
                    _0x155f71[1],
                    4 * _0x5c3421
                  );
                }
              }
            }
          }
        }
      }
    }
  }
  return _0x4c0cc2;
}
function create_hurt_player(_0x2b7f51, _0x3182f8) {
  var _0x2ffa27 = document.createElement("canvas");
  var _0x23808e = _0x2ffa27.getContext("2d");
  var _0x36892a = _0x2b7f51 * 120;
  var _0x77ffb2 = _0x2b7f51 * 110;
  var _0x137cce = _0x36892a / 2;
  var _0x456a96 = _0x77ffb2 / 2;
  var _0x279183 = _0x2b7f51 * 20;
  var _0x2a5055 = _0x2b7f51 * 112;
  var _0x43ba7c = _0x2b7f51 * 82;
  var _0x4664ce = _0x2a5055 / 2;
  var _0x59e622 = _0x43ba7c / 2;
  var _0x49ecf1 = _0x2b7f51 * 4;
  _0x2ffa27.width = _0x36892a;
  _0x2ffa27.height = _0x77ffb2;
  _0x23808e.globalAlpha = 1;
  _0x23808e.translate(_0x137cce, _0x456a96);
  round_rect(
    _0x23808e,
    -_0x4664ce,
    -_0x59e622,
    _0x2a5055,
    _0x43ba7c,
    _0x279183
  );
  fill_path(_0x23808e, _0x3182f8, _0x3182f8, _0x49ecf1);
  return _0x2ffa27;
}
function create_player(_0x47655a, _0x3b6aba, _0x391e9b) {
  var _0xed8b8b = document.createElement("canvas");
  var _0x2c6b42 = _0xed8b8b.getContext("2d");
  _0xed8b8b.width = 176 * _0x47655a;
  _0xed8b8b.height = 127 * _0x47655a;
  if (_0x391e9b == 8) {
    _0x2c6b42.globalAlpha = 0.3;
    _0x2c6b42.save();
    _0x2c6b42.translate(87 * _0x47655a, 64.5 * _0x47655a);
    round_rect(
      _0x2c6b42,
      -56 * _0x47655a,
      -41.5 * _0x47655a,
      112 * _0x47655a,
      83 * _0x47655a,
      18 * _0x47655a
    );
    _0x2c6b42.restore();
    fill_path(_0x2c6b42, _0x3b6aba[0], _0x3b6aba[1], 4 * _0x47655a);
    _0x2c6b42.save();
    _0x2c6b42.translate(82 * _0x47655a, 69.5 * _0x47655a);
    round_rect(
      _0x2c6b42,
      -51 * _0x47655a,
      -36.5 * _0x47655a,
      102 * _0x47655a,
      73 * _0x47655a,
      18 * _0x47655a
    );
    _0x2c6b42.restore();
    fill_path(_0x2c6b42, _0x3b6aba[2], _0x3b6aba[1], 4 * _0x47655a);
    _0x2c6b42.beginPath();
    _0x2c6b42.lineCap = "round";
    _0x2c6b42.lineJoin = "round";
    _0x2c6b42.moveTo(55 * _0x47655a, 41 * _0x47655a);
    _0x2c6b42.bezierCurveTo(
      38 * _0x47655a,
      41 * _0x47655a,
      37 * _0x47655a,
      50 * _0x47655a,
      38 * _0x47655a,
      61 * _0x47655a
    );
    _0x2c6b42.bezierCurveTo(
      42 * _0x47655a,
      50 * _0x47655a,
      46 * _0x47655a,
      46 * _0x47655a,
      55 * _0x47655a,
      42 * _0x47655a
    );
    _0x2c6b42.closePath();
    fill_path(_0x2c6b42, _0x3b6aba[3]);
    _0x2c6b42.globalAlpha = 1;
    _0x2c6b42.translate(26 * _0x47655a, 10 * _0x47655a);
    circle(_0x2c6b42, 35 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
    fill_path(_0x2c6b42, _0x3b6aba[4]);
    circle(_0x2c6b42, 85 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
    fill_path(_0x2c6b42, _0x3b6aba[4]);
    circle(_0x2c6b42, 32 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
    fill_path(_0x2c6b42, _0x3b6aba[5]);
    circle(_0x2c6b42, 82 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
    fill_path(_0x2c6b42, _0x3b6aba[5]);
  } else {
    if (_0x391e9b == 9) {
      var _0xed8b8b = document.createElement("canvas");
      var _0x2c6b42 = _0xed8b8b.getContext("2d");
      _0xed8b8b.width = 332 * _0x47655a;
      _0xed8b8b.height = 127 * _0x47655a;
      _0x2c6b42.globalAlpha = 0.5;
      _0x2c6b42.translate(0, -36 * _0x47655a);
      _0x2c6b42.save();
      _0x2c6b42.translate(165.25 * _0x47655a, 106.84375 * _0x47655a);
      round_rect(
        _0x2c6b42,
        -56.5 * _0x47655a,
        -41.5 * _0x47655a,
        113 * _0x47655a,
        83 * _0x47655a,
        18 * _0x47655a
      );
      _0x2c6b42.restore();
      fill_path(_0x2c6b42, _0x3b6aba[0]);
      _0x2c6b42.globalAlpha = 1;
      _0x2c6b42.translate(0, 20 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(210.75 * _0x47655a, 72.84375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        238.75 * _0x47655a,
        74.84375 * _0x47655a,
        270.75 * _0x47655a,
        85.84375 * _0x47655a,
        269.75 * _0x47655a,
        90.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        268.75 * _0x47655a,
        94.84375 * _0x47655a,
        221.75 * _0x47655a,
        81.84375 * _0x47655a,
        206.75 * _0x47655a,
        85.84375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(208.75 * _0x47655a, 69.84375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        241.75 * _0x47655a,
        61.84375 * _0x47655a,
        265.75 * _0x47655a,
        65.84375 * _0x47655a,
        286.75 * _0x47655a,
        69.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        290.75 * _0x47655a,
        75.84375 * _0x47655a,
        225.75 * _0x47655a,
        69.84375 * _0x47655a,
        215.75 * _0x47655a,
        80.84375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(209.75 * _0x47655a, 69.84375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        228.75 * _0x47655a,
        51.84375 * _0x47655a,
        265.75 * _0x47655a,
        46.84375 * _0x47655a,
        294.75 * _0x47655a,
        51.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        301.75 * _0x47655a,
        55.84375 * _0x47655a,
        224.75 * _0x47655a,
        60.84375 * _0x47655a,
        216.75 * _0x47655a,
        80.84375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(193.75 * _0x47655a, 72.84375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        206.75 * _0x47655a,
        47.84375 * _0x47655a,
        221.75 * _0x47655a,
        37.84375 * _0x47655a,
        249.75 * _0x47655a,
        35.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        264.75 * _0x47655a,
        34.84375 * _0x47655a,
        305.75 * _0x47655a,
        16.84375 * _0x47655a,
        300.75 * _0x47655a,
        24.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        273.75 * _0x47655a,
        45.84375 * _0x47655a,
        245.75 * _0x47655a,
        46.84375 * _0x47655a,
        235.75 * _0x47655a,
        62.84375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        218.75 * _0x47655a,
        82.84375 * _0x47655a,
        215.75 * _0x47655a,
        87.84375 * _0x47655a,
        199.75 * _0x47655a,
        84.84375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(126.75 * _0x47655a, 80.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        94.75 * _0x47655a,
        88.34375 * _0x47655a,
        83.75 * _0x47655a,
        88.34375 * _0x47655a,
        65.75 * _0x47655a,
        90.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        61.75 * _0x47655a,
        87.34375 * _0x47655a,
        86.75 * _0x47655a,
        77.34375 * _0x47655a,
        129.75 * _0x47655a,
        70.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(120.75 * _0x47655a, 72.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        128.75 * _0x47655a,
        62.34375 * _0x47655a,
        98.75 * _0x47655a,
        64.34375 * _0x47655a,
        49.75 * _0x47655a,
        68.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        34.75 * _0x47655a,
        75.34375 * _0x47655a,
        101.75 * _0x47655a,
        72.34375 * _0x47655a,
        124.75 * _0x47655a,
        78.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(128.75 * _0x47655a, 76.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        111.75 * _0x47655a,
        54.34375 * _0x47655a,
        69.75 * _0x47655a,
        48.34375 * _0x47655a,
        39.75 * _0x47655a,
        50.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        26.75 * _0x47655a,
        53.34375 * _0x47655a,
        86.75 * _0x47655a,
        59.34375 * _0x47655a,
        123.75 * _0x47655a,
        78.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(143.75 * _0x47655a, 74.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        128.75 * _0x47655a,
        48.34375 * _0x47655a,
        108.75 * _0x47655a,
        35.34375 * _0x47655a,
        81.75 * _0x47655a,
        35.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        63.75 * _0x47655a,
        33.34375 * _0x47655a,
        26.75 * _0x47655a,
        15.34375 * _0x47655a,
        29.75 * _0x47655a,
        25.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        33.75 * _0x47655a,
        30.34375 * _0x47655a,
        49.75 * _0x47655a,
        40.34375 * _0x47655a,
        70.75 * _0x47655a,
        49.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        94.75 * _0x47655a,
        54.34375 * _0x47655a,
        104.75 * _0x47655a,
        72.34375 * _0x47655a,
        128.75 * _0x47655a,
        88.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.translate(0, -28 * _0x47655a);
      _0x2c6b42.save();
      _0x2c6b42.translate(165.25 * _0x47655a, 106.84375 * _0x47655a);
      round_rect(
        _0x2c6b42,
        -56.5 * _0x47655a,
        -41.5 * _0x47655a,
        113 * _0x47655a,
        83 * _0x47655a,
        18 * _0x47655a
      );
      _0x2c6b42.restore();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      _0x2c6b42.translate(28 * _0x47655a, 15 * _0x47655a);
      _0x2c6b42.translate(0, 8 * _0x47655a);
      _0x2c6b42.globalAlpha = 0.5;
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(83 * _0x47655a, 52 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        78 * _0x47655a,
        65 * _0x47655a,
        110 * _0x47655a,
        72 * _0x47655a,
        139 * _0x47655a,
        71 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        176 * _0x47655a,
        71 * _0x47655a,
        193 * _0x47655a,
        61 * _0x47655a,
        191 * _0x47655a,
        54 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        202 * _0x47655a,
        58 * _0x47655a,
        198 * _0x47655a,
        72 * _0x47655a,
        187 * _0x47655a,
        75 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        143 * _0x47655a,
        87 * _0x47655a,
        107 * _0x47655a,
        79 * _0x47655a,
        89 * _0x47655a,
        75 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        72 * _0x47655a,
        69 * _0x47655a,
        74 * _0x47655a,
        58 * _0x47655a,
        83 * _0x47655a,
        52 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[0]);
      _0x2c6b42.globalAlpha = 1;
      _0x2c6b42.translate(0 * _0x47655a, -8 * _0x47655a);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(83 * _0x47655a, 52 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        78 * _0x47655a,
        65 * _0x47655a,
        110 * _0x47655a,
        72 * _0x47655a,
        139 * _0x47655a,
        71 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        176 * _0x47655a,
        71 * _0x47655a,
        193 * _0x47655a,
        61 * _0x47655a,
        191 * _0x47655a,
        54 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        202 * _0x47655a,
        58 * _0x47655a,
        198 * _0x47655a,
        72 * _0x47655a,
        187 * _0x47655a,
        75 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        143 * _0x47655a,
        87 * _0x47655a,
        107 * _0x47655a,
        79 * _0x47655a,
        89 * _0x47655a,
        75 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        72 * _0x47655a,
        69 * _0x47655a,
        74 * _0x47655a,
        58 * _0x47655a,
        83 * _0x47655a,
        52 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[5], _0x3b6aba[6], 4 * _0x47655a);
      _0x2c6b42.translate(-28 * _0x47655a, -15 * _0x47655a);
      circle(
        _0x2c6b42,
        141.75 * _0x47655a,
        127.34375 * _0x47655a,
        15 * _0x47655a
      );
      fill_path(_0x2c6b42, _0x3b6aba[3]);
      circle(
        _0x2c6b42,
        191.75 * _0x47655a,
        127.09375 * _0x47655a,
        15 * _0x47655a
      );
      fill_path(_0x2c6b42, _0x3b6aba[3]);
      circle(
        _0x2c6b42,
        138.75 * _0x47655a,
        119.34375 * _0x47655a,
        5 * _0x47655a
      );
      fill_path(_0x2c6b42, _0x3b6aba[4]);
      circle(
        _0x2c6b42,
        188.75 * _0x47655a,
        119.34375 * _0x47655a,
        5 * _0x47655a
      );
      fill_path(_0x2c6b42, _0x3b6aba[4]);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(125.75 * _0x47655a, 139.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        134.75 * _0x47655a,
        134.34375 * _0x47655a,
        143.75 * _0x47655a,
        134.34375 * _0x47655a,
        156.75 * _0x47655a,
        139.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        153.25 * _0x47655a,
        141.84375 * _0x47655a,
        153.25 * _0x47655a,
        141.84375 * _0x47655a,
        149.75 * _0x47655a,
        144.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        140.25 * _0x47655a,
        144.34375 * _0x47655a,
        140.25 * _0x47655a,
        144.34375 * _0x47655a,
        130.75 * _0x47655a,
        144.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1]);
      _0x2c6b42.beginPath();
      _0x2c6b42.lineCap = "round";
      _0x2c6b42.lineJoin = "round";
      _0x2c6b42.moveTo(176.75 * _0x47655a, 139.34375 * _0x47655a);
      _0x2c6b42.bezierCurveTo(
        183.75 * _0x47655a,
        135.34375 * _0x47655a,
        199.75 * _0x47655a,
        135.34375 * _0x47655a,
        205.75 * _0x47655a,
        139.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        203.25 * _0x47655a,
        141.34375 * _0x47655a,
        203.25 * _0x47655a,
        141.34375 * _0x47655a,
        200.75 * _0x47655a,
        143.34375 * _0x47655a
      );
      _0x2c6b42.bezierCurveTo(
        190.75 * _0x47655a,
        143.84375 * _0x47655a,
        190.75 * _0x47655a,
        143.84375 * _0x47655a,
        180.75 * _0x47655a,
        144.34375 * _0x47655a
      );
      _0x2c6b42.closePath();
      fill_path(_0x2c6b42, _0x3b6aba[1]);
    } else {
      _0x2c6b42.globalAlpha = 0.75;
      _0x2c6b42.translate(0, 8 * _0x47655a);
      _0x2c6b42.save();
      _0x2c6b42.translate(87 * _0x47655a, 64.5 * _0x47655a);
      round_rect(
        _0x2c6b42,
        -56 * _0x47655a,
        -41.5 * _0x47655a,
        112 * _0x47655a,
        83 * _0x47655a,
        18 * _0x47655a
      );
      _0x2c6b42.restore();
      fill_path(_0x2c6b42, _0x3b6aba[0]);
      _0x2c6b42.globalAlpha = 1;
      _0x2c6b42.translate(0, -8 * _0x47655a);
      _0x2c6b42.save();
      _0x2c6b42.translate(87 * _0x47655a, 64.5 * _0x47655a);
      round_rect(
        _0x2c6b42,
        -56 * _0x47655a,
        -41.5 * _0x47655a,
        112 * _0x47655a,
        83 * _0x47655a,
        18 * _0x47655a
      );
      _0x2c6b42.restore();
      fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
      if (_0x391e9b == 0) {
        _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
        circle(_0x2c6b42, 35 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
        fill_path(_0x2c6b42, _0x3b6aba[3]);
        circle(_0x2c6b42, 85 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
        fill_path(_0x2c6b42, _0x3b6aba[3]);
        circle(_0x2c6b42, 32 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
        fill_path(_0x2c6b42, _0x3b6aba[4]);
        circle(_0x2c6b42, 82 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
        fill_path(_0x2c6b42, _0x3b6aba[4]);
      } else {
        if (_0x391e9b == 1) {
          _0x2c6b42.beginPath();
          _0x2c6b42.lineCap = "round";
          _0x2c6b42.lineJoin = "round";
          _0x2c6b42.moveTo(35 * _0x47655a, 73 * _0x47655a);
          _0x2c6b42.bezierCurveTo(
            40 * _0x47655a,
            72 * _0x47655a,
            38 * _0x47655a,
            68 * _0x47655a,
            35 * _0x47655a,
            67 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            25 * _0x47655a,
            67 * _0x47655a,
            21 * _0x47655a,
            65 * _0x47655a,
            16 * _0x47655a,
            61 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            10 * _0x47655a,
            60 * _0x47655a,
            16 * _0x47655a,
            64 * _0x47655a,
            20 * _0x47655a,
            67 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            3 * _0x47655a,
            70 * _0x47655a,
            12 * _0x47655a,
            68.5 * _0x47655a,
            4 * _0x47655a,
            70 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            2 * _0x47655a,
            71 * _0x47655a,
            6 * _0x47655a,
            72 * _0x47655a,
            13 * _0x47655a,
            73 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            12.5 * _0x47655a,
            76.5 * _0x47655a,
            12.5 * _0x47655a,
            76.5 * _0x47655a,
            12 * _0x47655a,
            80 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            12 * _0x47655a,
            83 * _0x47655a,
            15 * _0x47655a,
            80 * _0x47655a,
            18 * _0x47655a,
            73 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            26.5 * _0x47655a,
            73.5 * _0x47655a,
            26.5 * _0x47655a,
            73.5 * _0x47655a,
            35 * _0x47655a,
            74 * _0x47655a
          );
          _0x2c6b42.closePath();
          fill_path(_0x2c6b42, _0x3b6aba[5], _0x3b6aba[6], 4 * _0x47655a);
          _0x2c6b42.beginPath();
          _0x2c6b42.lineCap = "round";
          _0x2c6b42.lineJoin = "round";
          _0x2c6b42.moveTo(134 * _0x47655a, 64 * _0x47655a);
          _0x2c6b42.bezierCurveTo(
            141.5 * _0x47655a,
            64 * _0x47655a,
            141.5 * _0x47655a,
            64 * _0x47655a,
            149 * _0x47655a,
            64 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            153 * _0x47655a,
            59 * _0x47655a,
            156 * _0x47655a,
            56 * _0x47655a,
            159 * _0x47655a,
            56 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            161 * _0x47655a,
            57 * _0x47655a,
            160 * _0x47655a,
            60 * _0x47655a,
            155 * _0x47655a,
            65 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            165 * _0x47655a,
            71 * _0x47655a,
            168 * _0x47655a,
            72 * _0x47655a,
            169 * _0x47655a,
            74 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            169 * _0x47655a,
            76 * _0x47655a,
            159 * _0x47655a,
            71 * _0x47655a,
            156 * _0x47655a,
            72 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            154 * _0x47655a,
            72 * _0x47655a,
            155 * _0x47655a,
            75 * _0x47655a,
            156 * _0x47655a,
            79 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            155 * _0x47655a,
            81 * _0x47655a,
            153 * _0x47655a,
            78 * _0x47655a,
            150 * _0x47655a,
            72 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            142 * _0x47655a,
            71.5 * _0x47655a,
            142 * _0x47655a,
            71.5 * _0x47655a,
            134 * _0x47655a,
            71 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            130 * _0x47655a,
            69 * _0x47655a,
            131 * _0x47655a,
            65 * _0x47655a,
            135 * _0x47655a,
            64 * _0x47655a
          );
          _0x2c6b42.closePath();
          fill_path(_0x2c6b42, _0x3b6aba[5], _0x3b6aba[6], 4 * _0x47655a);
          _0x2c6b42.beginPath();
          _0x2c6b42.lineCap = "round";
          _0x2c6b42.lineJoin = "round";
          _0x2c6b42.moveTo(80 * _0x47655a, 95 * _0x47655a);
          _0x2c6b42.bezierCurveTo(
            83 * _0x47655a,
            88 * _0x47655a,
            89 * _0x47655a,
            88 * _0x47655a,
            92 * _0x47655a,
            95 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            92 * _0x47655a,
            105 * _0x47655a,
            88 * _0x47655a,
            110 * _0x47655a,
            86 * _0x47655a,
            110 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            83 * _0x47655a,
            107 * _0x47655a,
            82 * _0x47655a,
            104 * _0x47655a,
            80 * _0x47655a,
            96 * _0x47655a
          );
          _0x2c6b42.closePath();
          fill_path(_0x2c6b42, _0x3b6aba[7], _0x3b6aba[8], 3 * _0x47655a);
          _0x2c6b42.beginPath();
          _0x2c6b42.lineCap = "round";
          _0x2c6b42.lineJoin = "round";
          _0x2c6b42.moveTo(81 * _0x47655a, 100 * _0x47655a);
          _0x2c6b42.bezierCurveTo(
            82 * _0x47655a,
            97 * _0x47655a,
            83 * _0x47655a,
            96 * _0x47655a,
            85 * _0x47655a,
            96 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            82 * _0x47655a,
            100 * _0x47655a,
            82 * _0x47655a,
            101 * _0x47655a,
            83 * _0x47655a,
            103 * _0x47655a
          );
          _0x2c6b42.closePath();
          fill_path(_0x2c6b42, _0x3b6aba[8]);
          _0x2c6b42.beginPath();
          _0x2c6b42.lineCap = "round";
          _0x2c6b42.lineJoin = "round";
          _0x2c6b42.moveTo(83 * _0x47655a, 103 * _0x47655a);
          _0x2c6b42.bezierCurveTo(
            83 * _0x47655a,
            102 * _0x47655a,
            84 * _0x47655a,
            100 * _0x47655a,
            86 * _0x47655a,
            100 * _0x47655a
          );
          _0x2c6b42.bezierCurveTo(
            84 * _0x47655a,
            103 * _0x47655a,
            84 * _0x47655a,
            105 * _0x47655a,
            84 * _0x47655a,
            106 * _0x47655a
          );
          _0x2c6b42.closePath();
          fill_path(_0x2c6b42, _0x3b6aba[8]);
          _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
          circle(_0x2c6b42, 35 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
          fill_path(_0x2c6b42, _0x3b6aba[3]);
          circle(_0x2c6b42, 85 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
          fill_path(_0x2c6b42, _0x3b6aba[3]);
          circle(_0x2c6b42, 32 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
          fill_path(_0x2c6b42, _0x3b6aba[4]);
          circle(_0x2c6b42, 82 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
          fill_path(_0x2c6b42, _0x3b6aba[4]);
        } else {
          if (_0x391e9b == 2) {
            _0x2c6b42.beginPath();
            _0x2c6b42.lineCap = "round";
            _0x2c6b42.lineJoin = "round";
            _0x2c6b42.moveTo(48 * _0x47655a, 22 * _0x47655a);
            _0x2c6b42.bezierCurveTo(
              85.5 * _0x47655a,
              22 * _0x47655a,
              85.5 * _0x47655a,
              22 * _0x47655a,
              123 * _0x47655a,
              22 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              138 * _0x47655a,
              23 * _0x47655a,
              147 * _0x47655a,
              34 * _0x47655a,
              143 * _0x47655a,
              62 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              142 * _0x47655a,
              67 * _0x47655a,
              144 * _0x47655a,
              70 * _0x47655a,
              149 * _0x47655a,
              73 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              147 * _0x47655a,
              77 * _0x47655a,
              145 * _0x47655a,
              77 * _0x47655a,
              143 * _0x47655a,
              77 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              141 * _0x47655a,
              85 * _0x47655a,
              145 * _0x47655a,
              92 * _0x47655a,
              148 * _0x47655a,
              97 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              142 * _0x47655a,
              103 * _0x47655a,
              134 * _0x47655a,
              105 * _0x47655a,
              121 * _0x47655a,
              106 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              85 * _0x47655a,
              106 * _0x47655a,
              85 * _0x47655a,
              106 * _0x47655a,
              49 * _0x47655a,
              106 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              32 * _0x47655a,
              104 * _0x47655a,
              29 * _0x47655a,
              101 * _0x47655a,
              24 * _0x47655a,
              95 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              30 * _0x47655a,
              86 * _0x47655a,
              31 * _0x47655a,
              85 * _0x47655a,
              30 * _0x47655a,
              78 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              27.5 * _0x47655a,
              76 * _0x47655a,
              27.5 * _0x47655a,
              76 * _0x47655a,
              25 * _0x47655a,
              74 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              31 * _0x47655a,
              68 * _0x47655a,
              31 * _0x47655a,
              60 * _0x47655a,
              30 * _0x47655a,
              46 * _0x47655a
            );
            _0x2c6b42.bezierCurveTo(
              31 * _0x47655a,
              31 * _0x47655a,
              37 * _0x47655a,
              23 * _0x47655a,
              47 * _0x47655a,
              22 * _0x47655a
            );
            _0x2c6b42.closePath();
            fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
            _0x2c6b42.beginPath();
            _0x2c6b42.lineCap = "round";
            _0x2c6b42.lineJoin = "round";
            _0x2c6b42.moveTo(30 * _0x47655a, 44 * _0x47655a);
            _0x2c6b42.bezierCurveTo(
              66 * _0x47655a,
              48 * _0x47655a,
              99 * _0x47655a,
              45 * _0x47655a,
              141 * _0x47655a,
              39 * _0x47655a
            );
            fill_path(_0x2c6b42, undefined, _0x3b6aba[3], 4 * _0x47655a);
            _0x2c6b42.beginPath();
            _0x2c6b42.lineCap = "round";
            _0x2c6b42.lineJoin = "round";
            _0x2c6b42.moveTo(30 * _0x47655a, 67 * _0x47655a);
            _0x2c6b42.bezierCurveTo(
              80 * _0x47655a,
              44 * _0x47655a,
              118 * _0x47655a,
              43 * _0x47655a,
              141 * _0x47655a,
              60 * _0x47655a
            );
            fill_path(_0x2c6b42, undefined, _0x3b6aba[3], 4 * _0x47655a);
            _0x2c6b42.globalAlpha = 0.4;
            circle(_0x2c6b42, 31 * _0x47655a, 44 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 42 * _0x47655a, 47 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            circle(_0x2c6b42, 70 * _0x47655a, 42 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 53 * _0x47655a, 45 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 103 * _0x47655a, 40 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[8]);
            circle(_0x2c6b42, 116 * _0x47655a, 41 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            circle(_0x2c6b42, 131 * _0x47655a, 41 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 39 * _0x47655a, 64 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 51 * _0x47655a, 60 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 74 * _0x47655a, 53 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 83 * _0x47655a, 51 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[8]);
            circle(_0x2c6b42, 95 * _0x47655a, 51 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 107 * _0x47655a, 49 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 120 * _0x47655a, 50 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 137 * _0x47655a, 57 * _0x47655a, 9 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            _0x2c6b42.globalAlpha = 1;
            circle(_0x2c6b42, 31 * _0x47655a, 44 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 42 * _0x47655a, 47 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            circle(_0x2c6b42, 53 * _0x47655a, 45 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 70 * _0x47655a, 43 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 50 * _0x47655a, 59 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 39 * _0x47655a, 64 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 83 * _0x47655a, 51 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 74 * _0x47655a, 53 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[8]);
            circle(_0x2c6b42, 95 * _0x47655a, 51 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[6]);
            circle(_0x2c6b42, 103 * _0x47655a, 41 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[8]);
            circle(_0x2c6b42, 107 * _0x47655a, 49 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[7]);
            circle(_0x2c6b42, 116 * _0x47655a, 41 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            circle(_0x2c6b42, 131 * _0x47655a, 41 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            circle(_0x2c6b42, 137 * _0x47655a, 57 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[5]);
            circle(_0x2c6b42, 120 * _0x47655a, 50 * _0x47655a, 4 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[4]);
            _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
            circle(_0x2c6b42, 35 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[9]);
            circle(_0x2c6b42, 85 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[9]);
            circle(_0x2c6b42, 32 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[10]);
            circle(_0x2c6b42, 82 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
            fill_path(_0x2c6b42, _0x3b6aba[10]);
          } else {
            if (_0x391e9b == 3) {
              _0x2c6b42.beginPath();
              _0x2c6b42.lineCap = "round";
              _0x2c6b42.lineJoin = "round";
              _0x2c6b42.moveTo(23 * _0x47655a, 95 * _0x47655a);
              _0x2c6b42.bezierCurveTo(
                30 * _0x47655a,
                85 * _0x47655a,
                30 * _0x47655a,
                83 * _0x47655a,
                30 * _0x47655a,
                72 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                30 * _0x47655a,
                61.5 * _0x47655a,
                30 * _0x47655a,
                61.5 * _0x47655a,
                30 * _0x47655a,
                51 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                29 * _0x47655a,
                33 * _0x47655a,
                42 * _0x47655a,
                23 * _0x47655a,
                54 * _0x47655a,
                24 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                86.5 * _0x47655a,
                24 * _0x47655a,
                86.5 * _0x47655a,
                24 * _0x47655a,
                119 * _0x47655a,
                24 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                135 * _0x47655a,
                24 * _0x47655a,
                143 * _0x47655a,
                33 * _0x47655a,
                143 * _0x47655a,
                47 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                143 * _0x47655a,
                63.5 * _0x47655a,
                143 * _0x47655a,
                63.5 * _0x47655a,
                143 * _0x47655a,
                80 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                142 * _0x47655a,
                86 * _0x47655a,
                147 * _0x47655a,
                93 * _0x47655a,
                150 * _0x47655a,
                96 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                144 * _0x47655a,
                107 * _0x47655a,
                113 * _0x47655a,
                112 * _0x47655a,
                84 * _0x47655a,
                111 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                52 * _0x47655a,
                112 * _0x47655a,
                34 * _0x47655a,
                106 * _0x47655a,
                23 * _0x47655a,
                96 * _0x47655a
              );
              _0x2c6b42.closePath();
              fill_path(_0x2c6b42, _0x3b6aba[1], _0x3b6aba[2], 4 * _0x47655a);
              _0x2c6b42.beginPath();
              _0x2c6b42.lineCap = "round";
              _0x2c6b42.lineJoin = "round";
              _0x2c6b42.moveTo(30 * _0x47655a, 81 * _0x47655a);
              _0x2c6b42.bezierCurveTo(
                56 * _0x47655a,
                99 * _0x47655a,
                104 * _0x47655a,
                98 * _0x47655a,
                142 * _0x47655a,
                84 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                145.5 * _0x47655a,
                89.5 * _0x47655a,
                145.5 * _0x47655a,
                89.5 * _0x47655a,
                149 * _0x47655a,
                95 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                142 * _0x47655a,
                106 * _0x47655a,
                127 * _0x47655a,
                110 * _0x47655a,
                81 * _0x47655a,
                110 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                36 * _0x47655a,
                112 * _0x47655a,
                28 * _0x47655a,
                99 * _0x47655a,
                23 * _0x47655a,
                95 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                31 * _0x47655a,
                87 * _0x47655a,
                31 * _0x47655a,
                82 * _0x47655a,
                30 * _0x47655a,
                81 * _0x47655a
              );
              _0x2c6b42.closePath();
              fill_path(_0x2c6b42, _0x3b6aba[3], _0x3b6aba[2], 4 * _0x47655a);
              _0x2c6b42.beginPath();
              _0x2c6b42.lineCap = "round";
              _0x2c6b42.lineJoin = "round";
              _0x2c6b42.moveTo(23 * _0x47655a, 95 * _0x47655a);
              _0x2c6b42.bezierCurveTo(
                30 * _0x47655a,
                85 * _0x47655a,
                30 * _0x47655a,
                83 * _0x47655a,
                30 * _0x47655a,
                72 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                30 * _0x47655a,
                61.5 * _0x47655a,
                30 * _0x47655a,
                61.5 * _0x47655a,
                30 * _0x47655a,
                51 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                29 * _0x47655a,
                33 * _0x47655a,
                42 * _0x47655a,
                23 * _0x47655a,
                54 * _0x47655a,
                24 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                86.5 * _0x47655a,
                24 * _0x47655a,
                86.5 * _0x47655a,
                24 * _0x47655a,
                119 * _0x47655a,
                24 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                135 * _0x47655a,
                24 * _0x47655a,
                143 * _0x47655a,
                33 * _0x47655a,
                143 * _0x47655a,
                47 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                143 * _0x47655a,
                63.5 * _0x47655a,
                143 * _0x47655a,
                63.5 * _0x47655a,
                143 * _0x47655a,
                80 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                142 * _0x47655a,
                86 * _0x47655a,
                147 * _0x47655a,
                93 * _0x47655a,
                150 * _0x47655a,
                96 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                144 * _0x47655a,
                107 * _0x47655a,
                113 * _0x47655a,
                112 * _0x47655a,
                84 * _0x47655a,
                111 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                52 * _0x47655a,
                112 * _0x47655a,
                34 * _0x47655a,
                106 * _0x47655a,
                23 * _0x47655a,
                96 * _0x47655a
              );
              _0x2c6b42.closePath();
              fill_path(_0x2c6b42, undefined, _0x3b6aba[2], 4 * _0x47655a);
              _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
              circle(_0x2c6b42, 35 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
              fill_path(_0x2c6b42, _0x3b6aba[6]);
              circle(_0x2c6b42, 85 * _0x47655a, 75 * _0x47655a, 15 * _0x47655a);
              fill_path(_0x2c6b42, _0x3b6aba[6]);
              circle(_0x2c6b42, 32 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
              fill_path(_0x2c6b42, _0x3b6aba[7]);
              circle(_0x2c6b42, 82 * _0x47655a, 67 * _0x47655a, 5 * _0x47655a);
              fill_path(_0x2c6b42, _0x3b6aba[7]);
              _0x2c6b42.translate(-96 * _0x47655a, -25 * _0x47655a);
              _0x2c6b42.scale(1.8, 1.8);
              _0x2c6b42.beginPath();
              _0x2c6b42.lineCap = "round";
              _0x2c6b42.lineJoin = "round";
              _0x2c6b42.moveTo(85 * _0x47655a, 21 * _0x47655a);
              _0x2c6b42.bezierCurveTo(
                73 * _0x47655a,
                16 * _0x47655a,
                70 * _0x47655a,
                16 * _0x47655a,
                70 * _0x47655a,
                26 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                72 * _0x47655a,
                34 * _0x47655a,
                75 * _0x47655a,
                37 * _0x47655a,
                85 * _0x47655a,
                26 * _0x47655a
              );
              _0x2c6b42.closePath();
              fill_path(_0x2c6b42, _0x3b6aba[4], _0x3b6aba[5], 3 * _0x47655a);
              _0x2c6b42.beginPath();
              _0x2c6b42.lineCap = "round";
              _0x2c6b42.lineJoin = "round";
              _0x2c6b42.moveTo(89 * _0x47655a, 21 * _0x47655a);
              _0x2c6b42.bezierCurveTo(
                104 * _0x47655a,
                16 * _0x47655a,
                105 * _0x47655a,
                19 * _0x47655a,
                106 * _0x47655a,
                24 * _0x47655a
              );
              _0x2c6b42.bezierCurveTo(
                105 * _0x47655a,
                36 * _0x47655a,
                97 * _0x47655a,
                36 * _0x47655a,
                90 * _0x47655a,
                28 * _0x47655a
              );
              _0x2c6b42.closePath();
              fill_path(_0x2c6b42, _0x3b6aba[4], _0x3b6aba[5], 3 * _0x47655a);
              circle(
                _0x2c6b42,
                87 * _0x47655a,
                23 * _0x47655a,
                6.324555320336759 * _0x47655a
              );
              fill_path(_0x2c6b42, _0x3b6aba[4], _0x3b6aba[5], 3 * _0x47655a);
            } else {
              if (_0x391e9b == 4) {
                _0x2c6b42.translate(27 * _0x47655a, 8 * _0x47655a);
                circle(
                  _0x2c6b42,
                  15 * _0x47655a,
                  76 * _0x47655a,
                  9.219544457292887 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[3]);
                circle(
                  _0x2c6b42,
                  106 * _0x47655a,
                  76 * _0x47655a,
                  9.219544457292887 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[3]);
                _0x2c6b42.translate(-27 * _0x47655a, -8 * _0x47655a);
                _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
                circle(
                  _0x2c6b42,
                  35 * _0x47655a,
                  75 * _0x47655a,
                  15 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[5]);
                circle(
                  _0x2c6b42,
                  85 * _0x47655a,
                  75 * _0x47655a,
                  15 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[5]);
                circle(
                  _0x2c6b42,
                  32 * _0x47655a,
                  67 * _0x47655a,
                  5 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[6]);
                circle(
                  _0x2c6b42,
                  82 * _0x47655a,
                  67 * _0x47655a,
                  5 * _0x47655a
                );
                fill_path(_0x2c6b42, _0x3b6aba[6]);
                _0x2c6b42.translate(-27 * _0x47655a, -10 * _0x47655a);
                _0x2c6b42.translate(27 * _0x47655a, 8 * _0x47655a);
                _0x2c6b42.beginPath();
                _0x2c6b42.lineCap = "round";
                _0x2c6b42.lineJoin = "round";
                _0x2c6b42.moveTo(52 * _0x47655a, 86 * _0x47655a);
                _0x2c6b42.bezierCurveTo(
                  54 * _0x47655a,
                  78 * _0x47655a,
                  65 * _0x47655a,
                  80 * _0x47655a,
                  67 * _0x47655a,
                  85 * _0x47655a
                );
                _0x2c6b42.bezierCurveTo(
                  69 * _0x47655a,
                  89 * _0x47655a,
                  64 * _0x47655a,
                  99 * _0x47655a,
                  71 * _0x47655a,
                  106 * _0x47655a
                );
                _0x2c6b42.bezierCurveTo(
                  75 * _0x47655a,
                  109 * _0x47655a,
                  61 * _0x47655a,
                  108 * _0x47655a,
                  58 * _0x47655a,
                  102 * _0x47655a
                );
                _0x2c6b42.bezierCurveTo(
                  53 * _0x47655a,
                  97 * _0x47655a,
                  52 * _0x47655a,
                  91 * _0x47655a,
                  52 * _0x47655a,
                  86 * _0x47655a
                );
                _0x2c6b42.closePath();
                fill_path(_0x2c6b42, _0x3b6aba[4]);
              } else {
                if (_0x391e9b == 6) {
                  _0x2c6b42.beginPath();
                  _0x2c6b42.lineCap = "round";
                  _0x2c6b42.lineJoin = "round";
                  _0x2c6b42.translate(2 * _0x47655a, 0);
                  _0x2c6b42.moveTo(28 * _0x47655a, 69 * _0x47655a);
                  _0x2c6b42.bezierCurveTo(
                    26 * _0x47655a,
                    39 * _0x47655a,
                    31 * _0x47655a,
                    25 * _0x47655a,
                    52 * _0x47655a,
                    24 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    86 * _0x47655a,
                    23.5 * _0x47655a,
                    86 * _0x47655a,
                    23.5 * _0x47655a,
                    120 * _0x47655a,
                    23 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    137 * _0x47655a,
                    23 * _0x47655a,
                    145 * _0x47655a,
                    33 * _0x47655a,
                    144 * _0x47655a,
                    53 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    144.5 * _0x47655a,
                    63 * _0x47655a,
                    144.5 * _0x47655a,
                    63 * _0x47655a,
                    145 * _0x47655a,
                    73 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    141 * _0x47655a,
                    41 * _0x47655a,
                    106 * _0x47655a,
                    41 * _0x47655a,
                    98 * _0x47655a,
                    59 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    92 * _0x47655a,
                    69 * _0x47655a,
                    94 * _0x47655a,
                    98 * _0x47655a,
                    90 * _0x47655a,
                    95 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    86 * _0x47655a,
                    95 * _0x47655a,
                    86 * _0x47655a,
                    95 * _0x47655a,
                    82 * _0x47655a,
                    95 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    79 * _0x47655a,
                    94 * _0x47655a,
                    87 * _0x47655a,
                    33 * _0x47655a,
                    48 * _0x47655a,
                    47 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    31 * _0x47655a,
                    57 * _0x47655a,
                    30 * _0x47655a,
                    65 * _0x47655a,
                    28 * _0x47655a,
                    72 * _0x47655a
                  );
                  _0x2c6b42.closePath();
                  fill_path(_0x2c6b42, _0x3b6aba[3]);
                  _0x2c6b42.save();
                  _0x2c6b42.translate(87 * _0x47655a, 64.5 * _0x47655a);
                  round_rect(
                    _0x2c6b42,
                    -56 * _0x47655a,
                    -41.5 * _0x47655a,
                    112 * _0x47655a,
                    83 * _0x47655a,
                    18 * _0x47655a
                  );
                  _0x2c6b42.restore();
                  fill_path(_0x2c6b42, undefined, _0x3b6aba[2], 4 * _0x47655a);
                  _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
                  circle(
                    _0x2c6b42,
                    35 * _0x47655a,
                    75 * _0x47655a,
                    15 * _0x47655a
                  );
                  fill_path(_0x2c6b42, _0x3b6aba[3]);
                  circle(
                    _0x2c6b42,
                    85 * _0x47655a,
                    75 * _0x47655a,
                    15 * _0x47655a
                  );
                  fill_path(_0x2c6b42, _0x3b6aba[3]);
                  circle(
                    _0x2c6b42,
                    32 * _0x47655a,
                    67 * _0x47655a,
                    5 * _0x47655a
                  );
                  fill_path(_0x2c6b42, _0x3b6aba[4]);
                  circle(
                    _0x2c6b42,
                    82 * _0x47655a,
                    67 * _0x47655a,
                    5 * _0x47655a
                  );
                  fill_path(_0x2c6b42, _0x3b6aba[4]);
                  _0x2c6b42.scale(1.4, 1.4);
                  _0x2c6b42.translate(-43.5 * _0x47655a, -32 * _0x47655a);
                  _0x2c6b42.beginPath();
                  _0x2c6b42.lineCap = "round";
                  _0x2c6b42.lineJoin = "round";
                  _0x2c6b42.moveTo(86 * _0x47655a, 105 * _0x47655a);
                  _0x2c6b42.bezierCurveTo(
                    89 * _0x47655a,
                    103 * _0x47655a,
                    90 * _0x47655a,
                    100 * _0x47655a,
                    92 * _0x47655a,
                    97 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    93 * _0x47655a,
                    91 * _0x47655a,
                    85 * _0x47655a,
                    90 * _0x47655a,
                    81 * _0x47655a,
                    95 * _0x47655a
                  );
                  _0x2c6b42.bezierCurveTo(
                    80 * _0x47655a,
                    97 * _0x47655a,
                    83 * _0x47655a,
                    101 * _0x47655a,
                    85 * _0x47655a,
                    105 * _0x47655a
                  );
                  _0x2c6b42.closePath();
                  fill_path(
                    _0x2c6b42,
                    _0x3b6aba[5],
                    _0x3b6aba[6],
                    3 * _0x47655a
                  );
                } else {
                  if (_0x391e9b == 7) {
                    _0x2c6b42.save();
                    _0x2c6b42.translate(86 * _0x47655a, 64.5 * _0x47655a);
                    round_rect(
                      _0x2c6b42,
                      -16 * _0x47655a,
                      -43.5 * _0x47655a,
                      32 * _0x47655a,
                      87 * _0x47655a,
                      5 * _0x47655a
                    );
                    _0x2c6b42.restore();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.translate(0, 6 * _0x47655a);
                    _0x2c6b42.globalAlpha = 0.5;
                    _0x2c6b42.save();
                    _0x2c6b42.translate(85.5 * _0x47655a, 47 * _0x47655a);
                    round_rect(
                      _0x2c6b42,
                      -58.5 * _0x47655a,
                      -8 * _0x47655a,
                      117 * _0x47655a,
                      16 * _0x47655a,
                      5 * _0x47655a
                    );
                    _0x2c6b42.restore();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.translate(0, -6 * _0x47655a);
                    _0x2c6b42.globalAlpha = 1;
                    _0x2c6b42.save();
                    _0x2c6b42.translate(85.5 * _0x47655a, 47 * _0x47655a);
                    round_rect(
                      _0x2c6b42,
                      -58.5 * _0x47655a,
                      -8 * _0x47655a,
                      117 * _0x47655a,
                      16 * _0x47655a,
                      5 * _0x47655a
                    );
                    _0x2c6b42.restore();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.translate(0, 7 * _0x47655a);
                    _0x2c6b42.globalAlpha = 0.5;
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(84 * _0x47655a, 44 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      85 * _0x47655a,
                      26 * _0x47655a,
                      96 * _0x47655a,
                      23 * _0x47655a,
                      103 * _0x47655a,
                      30 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      110 * _0x47655a,
                      36 * _0x47655a,
                      110 * _0x47655a,
                      47 * _0x47655a,
                      92 * _0x47655a,
                      50 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(87 * _0x47655a, 44 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      108 * _0x47655a,
                      47 * _0x47655a,
                      109 * _0x47655a,
                      54 * _0x47655a,
                      102 * _0x47655a,
                      63 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      92 * _0x47655a,
                      77 * _0x47655a,
                      80 * _0x47655a,
                      61 * _0x47655a,
                      84 * _0x47655a,
                      49 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(84 * _0x47655a, 43 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      86 * _0x47655a,
                      24 * _0x47655a,
                      72 * _0x47655a,
                      23 * _0x47655a,
                      68 * _0x47655a,
                      31 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      56 * _0x47655a,
                      42 * _0x47655a,
                      70 * _0x47655a,
                      49 * _0x47655a,
                      81 * _0x47655a,
                      47 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(78 * _0x47655a, 45 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      61 * _0x47655a,
                      49 * _0x47655a,
                      60 * _0x47655a,
                      58 * _0x47655a,
                      68 * _0x47655a,
                      64 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      78 * _0x47655a,
                      75 * _0x47655a,
                      84 * _0x47655a,
                      65 * _0x47655a,
                      89 * _0x47655a,
                      54 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.translate(0, -7 * _0x47655a);
                    _0x2c6b42.globalAlpha = 1;
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(84 * _0x47655a, 44 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      85 * _0x47655a,
                      26 * _0x47655a,
                      96 * _0x47655a,
                      23 * _0x47655a,
                      103 * _0x47655a,
                      30 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      110 * _0x47655a,
                      36 * _0x47655a,
                      110 * _0x47655a,
                      47 * _0x47655a,
                      92 * _0x47655a,
                      50 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(87 * _0x47655a, 44 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      108 * _0x47655a,
                      47 * _0x47655a,
                      109 * _0x47655a,
                      54 * _0x47655a,
                      102 * _0x47655a,
                      63 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      92 * _0x47655a,
                      77 * _0x47655a,
                      80 * _0x47655a,
                      61 * _0x47655a,
                      84 * _0x47655a,
                      49 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(84 * _0x47655a, 43 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      86 * _0x47655a,
                      24 * _0x47655a,
                      72 * _0x47655a,
                      23 * _0x47655a,
                      68 * _0x47655a,
                      31 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      56 * _0x47655a,
                      42 * _0x47655a,
                      70 * _0x47655a,
                      49 * _0x47655a,
                      81 * _0x47655a,
                      47 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.beginPath();
                    _0x2c6b42.lineCap = "round";
                    _0x2c6b42.lineJoin = "round";
                    _0x2c6b42.moveTo(78 * _0x47655a, 45 * _0x47655a);
                    _0x2c6b42.bezierCurveTo(
                      61 * _0x47655a,
                      49 * _0x47655a,
                      60 * _0x47655a,
                      58 * _0x47655a,
                      68 * _0x47655a,
                      64 * _0x47655a
                    );
                    _0x2c6b42.bezierCurveTo(
                      78 * _0x47655a,
                      75 * _0x47655a,
                      84 * _0x47655a,
                      65 * _0x47655a,
                      89 * _0x47655a,
                      54 * _0x47655a
                    );
                    _0x2c6b42.closePath();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.translate(0, 6 * _0x47655a);
                    _0x2c6b42.globalAlpha = 0.5;
                    _0x2c6b42.save();
                    _0x2c6b42.translate(85 * _0x47655a, 47.5 * _0x47655a);
                    _0x2c6b42.rotate(0);
                    round_rect(
                      _0x2c6b42,
                      -10 * _0x47655a,
                      -10.5 * _0x47655a,
                      20 * _0x47655a,
                      21 * _0x47655a,
                      5 * _0x47655a
                    );
                    _0x2c6b42.restore();
                    fill_path(_0x2c6b42, _0x3b6aba[0]);
                    _0x2c6b42.translate(0, -6 * _0x47655a);
                    _0x2c6b42.globalAlpha = 1;
                    _0x2c6b42.save();
                    _0x2c6b42.translate(85 * _0x47655a, 47.5 * _0x47655a);
                    _0x2c6b42.rotate(0);
                    round_rect(
                      _0x2c6b42,
                      -10 * _0x47655a,
                      -10.5 * _0x47655a,
                      20 * _0x47655a,
                      21 * _0x47655a,
                      5 * _0x47655a
                    );
                    _0x2c6b42.restore();
                    fill_path(
                      _0x2c6b42,
                      _0x3b6aba[3],
                      _0x3b6aba[4],
                      4 * _0x47655a
                    );
                    _0x2c6b42.translate(27 * _0x47655a, 10 * _0x47655a);
                    circle(
                      _0x2c6b42,
                      35 * _0x47655a,
                      75 * _0x47655a,
                      15 * _0x47655a
                    );
                    fill_path(_0x2c6b42, _0x3b6aba[5]);
                    circle(
                      _0x2c6b42,
                      85 * _0x47655a,
                      75 * _0x47655a,
                      15 * _0x47655a
                    );
                    fill_path(_0x2c6b42, _0x3b6aba[5]);
                    circle(
                      _0x2c6b42,
                      32 * _0x47655a,
                      67 * _0x47655a,
                      5 * _0x47655a
                    );
                    fill_path(_0x2c6b42, _0x3b6aba[6]);
                    circle(
                      _0x2c6b42,
                      82 * _0x47655a,
                      67 * _0x47655a,
                      5 * _0x47655a
                    );
                    fill_path(_0x2c6b42, _0x3b6aba[6]);
                  } else {
                    if (_0x391e9b == 5) {
                      _0xed8b8b.width = 211 * _0x47655a;
                      _0xed8b8b.height = 152 * _0x47655a;
                      _0x2c6b42.globalAlpha = 0.5;
                      _0x2c6b42.translate(0, 8 * _0x47655a);
                      _0x2c6b42.save();
                      _0x2c6b42.translate(105.5 * _0x47655a, 76.5 * _0x47655a);
                      round_rect(
                        _0x2c6b42,
                        -56 * _0x47655a,
                        -41.5 * _0x47655a,
                        112 * _0x47655a,
                        83 * _0x47655a,
                        18 * _0x47655a
                      );
                      _0x2c6b42.restore();
                      fill_path(_0x2c6b42, _0x3b6aba[0]);
                      _0x2c6b42.globalAlpha = 1;
                      _0x2c6b42.translate(0, -8 * _0x47655a);
                      _0x2c6b42.save();
                      _0x2c6b42.translate(105.5 * _0x47655a, 76.5 * _0x47655a);
                      round_rect(
                        _0x2c6b42,
                        -56 * _0x47655a,
                        -41.5 * _0x47655a,
                        112 * _0x47655a,
                        83 * _0x47655a,
                        18 * _0x47655a
                      );
                      _0x2c6b42.restore();
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[1],
                        _0x3b6aba[2],
                        4 * _0x47655a
                      );
                      _0x2c6b42.beginPath();
                      _0x2c6b42.lineCap = "round";
                      _0x2c6b42.lineJoin = "round";
                      _0x2c6b42.moveTo(68 * _0x47655a, 39 * _0x47655a);
                      _0x2c6b42.bezierCurveTo(
                        48 * _0x47655a,
                        37 * _0x47655a,
                        43 * _0x47655a,
                        27 * _0x47655a,
                        40 * _0x47655a,
                        12 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        31 * _0x47655a,
                        25 * _0x47655a,
                        20 * _0x47655a,
                        17 * _0x47655a,
                        11 * _0x47655a,
                        9 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        9 * _0x47655a,
                        41 * _0x47655a,
                        40 * _0x47655a,
                        44 * _0x47655a,
                        62 * _0x47655a,
                        45 * _0x47655a
                      );
                      _0x2c6b42.closePath();
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[3],
                        _0x3b6aba[2],
                        4 * _0x47655a
                      );
                      _0x2c6b42.beginPath();
                      _0x2c6b42.lineCap = "round";
                      _0x2c6b42.lineJoin = "round";
                      _0x2c6b42.moveTo(143 * _0x47655a, 38 * _0x47655a);
                      _0x2c6b42.bezierCurveTo(
                        161 * _0x47655a,
                        40 * _0x47655a,
                        169 * _0x47655a,
                        24 * _0x47655a,
                        171 * _0x47655a,
                        13 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        181 * _0x47655a,
                        23 * _0x47655a,
                        188 * _0x47655a,
                        20 * _0x47655a,
                        199 * _0x47655a,
                        9 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        204 * _0x47655a,
                        35 * _0x47655a,
                        182 * _0x47655a,
                        44 * _0x47655a,
                        152 * _0x47655a,
                        45 * _0x47655a
                      );
                      _0x2c6b42.closePath();
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[3],
                        _0x3b6aba[2],
                        4 * _0x47655a
                      );
                      _0x2c6b42.save();
                      _0x2c6b42.translate(105.5 * _0x47655a, 76.5 * _0x47655a);
                      round_rect(
                        _0x2c6b42,
                        -55 * _0x47655a,
                        -40.5 * _0x47655a,
                        106 * _0x47655a,
                        77 * _0x47655a,
                        18 * _0x47655a
                      );
                      _0x2c6b42.restore();
                      fill_path(_0x2c6b42, _0x3b6aba[1]);
                      _0x2c6b42.beginPath();
                      _0x2c6b42.lineCap = "round";
                      _0x2c6b42.lineJoin = "round";
                      _0x2c6b42.moveTo(149 * _0x47655a, 45 * _0x47655a);
                      _0x2c6b42.bezierCurveTo(
                        155 * _0x47655a,
                        37 * _0x47655a,
                        158 * _0x47655a,
                        37 * _0x47655a,
                        161 * _0x47655a,
                        52 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        164 * _0x47655a,
                        60 * _0x47655a,
                        161 * _0x47655a,
                        65 * _0x47655a,
                        152 * _0x47655a,
                        58 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        145 * _0x47655a,
                        51 * _0x47655a,
                        143 * _0x47655a,
                        49 * _0x47655a,
                        149 * _0x47655a,
                        45 * _0x47655a
                      );
                      _0x2c6b42.closePath();
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[4],
                        _0x3b6aba[2],
                        4 * _0x47655a
                      );
                      _0x2c6b42.beginPath();
                      _0x2c6b42.lineCap = "round";
                      _0x2c6b42.lineJoin = "round";
                      _0x2c6b42.moveTo(60 * _0x47655a, 43 * _0x47655a);
                      _0x2c6b42.bezierCurveTo(
                        67 * _0x47655a,
                        47 * _0x47655a,
                        67 * _0x47655a,
                        51 * _0x47655a,
                        57 * _0x47655a,
                        59 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        50 * _0x47655a,
                        64 * _0x47655a,
                        47 * _0x47655a,
                        64 * _0x47655a,
                        49 * _0x47655a,
                        55 * _0x47655a
                      );
                      _0x2c6b42.bezierCurveTo(
                        49 * _0x47655a,
                        42 * _0x47655a,
                        51 * _0x47655a,
                        38 * _0x47655a,
                        59 * _0x47655a,
                        42 * _0x47655a
                      );
                      _0x2c6b42.closePath();
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[4],
                        _0x3b6aba[2],
                        4 * _0x47655a
                      );
                      circle(
                        _0x2c6b42,
                        105 * _0x47655a,
                        107 * _0x47655a,
                        10.63014581273465 * _0x47655a
                      );
                      fill_path(
                        _0x2c6b42,
                        _0x3b6aba[5],
                        _0x3b6aba[6],
                        4 * _0x47655a
                      );
                      _0x2c6b42.beginPath();
                      _0x2c6b42.lineCap = "round";
                      _0x2c6b42.lineJoin = "round";
                      _0x2c6b42.moveTo(105 * _0x47655a, 100 * _0x47655a);
                      _0x2c6b42.bezierCurveTo(
                        111 * _0x47655a,
                        101 * _0x47655a,
                        113 * _0x47655a,
                        104 * _0x47655a,
                        112 * _0x47655a,
                        109 * _0x47655a
                      );
                      _0x2c6b42.closePath();
                      fill_path(_0x2c6b42, _0x3b6aba[7]);
                      _0x2c6b42.translate(44.5 * _0x47655a, 22 * _0x47655a);
                      circle(
                        _0x2c6b42,
                        35 * _0x47655a,
                        75 * _0x47655a,
                        15 * _0x47655a
                      );
                      fill_path(_0x2c6b42, _0x3b6aba[8]);
                      circle(
                        _0x2c6b42,
                        85 * _0x47655a,
                        75 * _0x47655a,
                        15 * _0x47655a
                      );
                      fill_path(_0x2c6b42, _0x3b6aba[8]);
                      circle(
                        _0x2c6b42,
                        32 * _0x47655a,
                        67 * _0x47655a,
                        5 * _0x47655a
                      );
                      fill_path(_0x2c6b42, _0x3b6aba[9]);
                      circle(
                        _0x2c6b42,
                        82 * _0x47655a,
                        67 * _0x47655a,
                        5 * _0x47655a
                      );
                      fill_path(_0x2c6b42, _0x3b6aba[9]);
                    } else {
                      if (_0x391e9b == 9) {
                        _0x2c6b42.save();
                        _0x2c6b42.translate(110 * _0x47655a, 22 * _0x47655a);
                        round_rect(
                          _0x2c6b42,
                          -16 * _0x47655a,
                          -5 * _0x47655a,
                          32 * _0x47655a,
                          10 * _0x47655a,
                          10 * _0x47655a
                        );
                        _0x2c6b42.restore();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[1],
                          _0x3b6aba[2],
                          3 * _0x47655a
                        );
                        _0x2c6b42.save();
                        _0x2c6b42.translate(109.5 * _0x47655a, 17 * _0x47655a);
                        round_rect(
                          _0x2c6b42,
                          -18.5 * _0x47655a,
                          -3 * _0x47655a,
                          37 * _0x47655a,
                          6 * _0x47655a,
                          10 * _0x47655a
                        );
                        _0x2c6b42.restore();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[3],
                          _0x3b6aba[4],
                          3 * _0x47655a
                        );
                        _0x2c6b42.globalAlpha = 0.5;
                        _0x2c6b42.translate(0, 5 * _0x47655a);
                        _0x2c6b42.save();
                        _0x2c6b42.translate(86 * _0x47655a, 40 * _0x47655a);
                        round_rect(
                          _0x2c6b42,
                          -58 * _0x47655a,
                          -9 * _0x47655a,
                          116 * _0x47655a,
                          18 * _0x47655a,
                          6 * _0x47655a
                        );
                        _0x2c6b42.restore();
                        fill_path(_0x2c6b42, _0x3b6aba[0]);
                        _0x2c6b42.globalAlpha = 1;
                        _0x2c6b42.translate(0, -5 * _0x47655a);
                        _0x2c6b42.save();
                        _0x2c6b42.translate(86 * _0x47655a, 40 * _0x47655a);
                        round_rect(
                          _0x2c6b42,
                          -58 * _0x47655a,
                          -9 * _0x47655a,
                          116 * _0x47655a,
                          18 * _0x47655a,
                          6 * _0x47655a
                        );
                        _0x2c6b42.restore();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[3],
                          _0x3b6aba[4],
                          3 * _0x47655a
                        );
                        _0x2c6b42.globalAlpha = 0.75;
                        _0x2c6b42.translate(0, 5 * _0x47655a);
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(109 * _0x47655a, 47 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          110.5 * _0x47655a,
                          45 * _0x47655a,
                          110.5 * _0x47655a,
                          45 * _0x47655a,
                          112 * _0x47655a,
                          43 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          114 * _0x47655a,
                          44 * _0x47655a,
                          114 * _0x47655a,
                          44 * _0x47655a,
                          116 * _0x47655a,
                          45 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          117.5 * _0x47655a,
                          43 * _0x47655a,
                          117.5 * _0x47655a,
                          43 * _0x47655a,
                          119 * _0x47655a,
                          41 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          121 * _0x47655a,
                          41.5 * _0x47655a,
                          121 * _0x47655a,
                          41.5 * _0x47655a,
                          123 * _0x47655a,
                          42 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(_0x2c6b42, _0x3b6aba[0]);
                        _0x2c6b42.beginPath();
                        _0x2c6b42.translate(0, 5 * _0x47655a);
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(54 * _0x47655a, 35 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          61.5 * _0x47655a,
                          35 * _0x47655a,
                          61.5 * _0x47655a,
                          35 * _0x47655a,
                          69 * _0x47655a,
                          35 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          70 * _0x47655a,
                          48 * _0x47655a,
                          70 * _0x47655a,
                          60 * _0x47655a,
                          60 * _0x47655a,
                          59 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          45 * _0x47655a,
                          61 * _0x47655a,
                          44 * _0x47655a,
                          60 * _0x47655a,
                          43 * _0x47655a,
                          53 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          42 * _0x47655a,
                          49 * _0x47655a,
                          55 * _0x47655a,
                          51 * _0x47655a,
                          55 * _0x47655a,
                          44 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(_0x2c6b42, _0x3b6aba[0]);
                        _0x2c6b42.globalAlpha = 1;
                        _0x2c6b42.translate(0, -5 * _0x47655a);
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(105 * _0x47655a, 38 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          110 * _0x47655a,
                          48 * _0x47655a,
                          110 * _0x47655a,
                          50 * _0x47655a,
                          105 * _0x47655a,
                          53 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          98 * _0x47655a,
                          62 * _0x47655a,
                          107 * _0x47655a,
                          66 * _0x47655a,
                          117 * _0x47655a,
                          60 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          128 * _0x47655a,
                          56 * _0x47655a,
                          130 * _0x47655a,
                          56 * _0x47655a,
                          126 * _0x47655a,
                          49 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          123.5 * _0x47655a,
                          41.5 * _0x47655a,
                          123.5 * _0x47655a,
                          41.5 * _0x47655a,
                          121 * _0x47655a,
                          34 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[7],
                          _0x3b6aba[8],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(109 * _0x47655a, 47 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          110.5 * _0x47655a,
                          45 * _0x47655a,
                          110.5 * _0x47655a,
                          45 * _0x47655a,
                          112 * _0x47655a,
                          43 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          114 * _0x47655a,
                          44 * _0x47655a,
                          114 * _0x47655a,
                          44 * _0x47655a,
                          116 * _0x47655a,
                          45 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          117.5 * _0x47655a,
                          43 * _0x47655a,
                          117.5 * _0x47655a,
                          43 * _0x47655a,
                          119 * _0x47655a,
                          41 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          121 * _0x47655a,
                          41.5 * _0x47655a,
                          121 * _0x47655a,
                          41.5 * _0x47655a,
                          123 * _0x47655a,
                          42 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          undefined,
                          _0x3b6aba[6],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(84 * _0x47655a, 33 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          88.5 * _0x47655a,
                          34.5 * _0x47655a,
                          88.5 * _0x47655a,
                          34.5 * _0x47655a,
                          93 * _0x47655a,
                          36 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          87 * _0x47655a,
                          43 * _0x47655a,
                          88 * _0x47655a,
                          45 * _0x47655a,
                          91 * _0x47655a,
                          46 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          98 * _0x47655a,
                          56 * _0x47655a,
                          91 * _0x47655a,
                          57 * _0x47655a,
                          85 * _0x47655a,
                          53 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          80 * _0x47655a,
                          50 * _0x47655a,
                          78 * _0x47655a,
                          49 * _0x47655a,
                          82 * _0x47655a,
                          43 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          83.5 * _0x47655a,
                          38 * _0x47655a,
                          83.5 * _0x47655a,
                          38 * _0x47655a,
                          85 * _0x47655a,
                          33 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[5],
                          _0x3b6aba[6],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(54 * _0x47655a, 35 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          61.5 * _0x47655a,
                          35 * _0x47655a,
                          61.5 * _0x47655a,
                          35 * _0x47655a,
                          69 * _0x47655a,
                          35 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          70 * _0x47655a,
                          48 * _0x47655a,
                          70 * _0x47655a,
                          60 * _0x47655a,
                          60 * _0x47655a,
                          59 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          45 * _0x47655a,
                          61 * _0x47655a,
                          44 * _0x47655a,
                          60 * _0x47655a,
                          43 * _0x47655a,
                          53 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          42 * _0x47655a,
                          49 * _0x47655a,
                          55 * _0x47655a,
                          51 * _0x47655a,
                          55 * _0x47655a,
                          44 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          _0x3b6aba[7],
                          _0x3b6aba[8],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(48 * _0x47655a, 49 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          50 * _0x47655a,
                          50 * _0x47655a,
                          50 * _0x47655a,
                          50 * _0x47655a,
                          52 * _0x47655a,
                          51 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          50.5 * _0x47655a,
                          52 * _0x47655a,
                          50.5 * _0x47655a,
                          52 * _0x47655a,
                          49 * _0x47655a,
                          53 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          51 * _0x47655a,
                          54.5 * _0x47655a,
                          51 * _0x47655a,
                          54.5 * _0x47655a,
                          53 * _0x47655a,
                          56 * _0x47655a
                        );
                        _0x2c6b42.bezierCurveTo(
                          51 * _0x47655a,
                          57.5 * _0x47655a,
                          51 * _0x47655a,
                          57.5 * _0x47655a,
                          49 * _0x47655a,
                          59 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          undefined,
                          _0x3b6aba[6],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(54 * _0x47655a, 39 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          61.5 * _0x47655a,
                          39.5 * _0x47655a,
                          61.5 * _0x47655a,
                          39.5 * _0x47655a,
                          69 * _0x47655a,
                          40 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          undefined,
                          _0x3b6aba[6],
                          3 * _0x47655a
                        );
                        _0x2c6b42.beginPath();
                        _0x2c6b42.lineCap = "round";
                        _0x2c6b42.lineJoin = "round";
                        _0x2c6b42.moveTo(55 * _0x47655a, 43 * _0x47655a);
                        _0x2c6b42.bezierCurveTo(
                          61.5 * _0x47655a,
                          43.5 * _0x47655a,
                          61.5 * _0x47655a,
                          43.5 * _0x47655a,
                          68 * _0x47655a,
                          44 * _0x47655a
                        );
                        _0x2c6b42.closePath();
                        fill_path(
                          _0x2c6b42,
                          undefined,
                          _0x3b6aba[6],
                          3 * _0x47655a
                        );
                        _0x2c6b42.translate(27 * _0x47655a, 5 * _0x47655a);
                        circle(
                          _0x2c6b42,
                          35 * _0x47655a,
                          75 * _0x47655a,
                          15 * _0x47655a
                        );
                        fill_path(_0x2c6b42, _0x3b6aba[9]);
                        circle(
                          _0x2c6b42,
                          85 * _0x47655a,
                          75 * _0x47655a,
                          15 * _0x47655a
                        );
                        fill_path(_0x2c6b42, _0x3b6aba[9]);
                        circle(
                          _0x2c6b42,
                          32 * _0x47655a,
                          67 * _0x47655a,
                          5 * _0x47655a
                        );
                        fill_path(_0x2c6b42, _0x3b6aba[10]);
                        circle(
                          _0x2c6b42,
                          82 * _0x47655a,
                          67 * _0x47655a,
                          5 * _0x47655a
                        );
                        fill_path(_0x2c6b42, _0x3b6aba[10]);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _0xed8b8b;
}
function create_robotskin(_0x2b9990, _0x418dc7) {
  var _0xf6ab93 = document.createElement("canvas");
  var _0x5bcfec = _0xf6ab93.getContext("2d");
  _0xf6ab93.width = 350 * _0x2b9990;
  _0xf6ab93.height = 350 * _0x2b9990;
  _0x5bcfec.translate(0, 15 * _0x2b9990);
  _0x5bcfec.globalAlpha = 0.5;
  _0x5bcfec.save();
  _0x5bcfec.translate(174 * _0x2b9990, 172 * _0x2b9990);
  round_rect(
    _0x5bcfec,
    -81 * _0x2b9990,
    -60 * _0x2b9990,
    162 * _0x2b9990,
    120 * _0x2b9990,
    26 * _0x2b9990
  );
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[0]);
  _0x5bcfec.translate(0, -15 * _0x2b9990);
  _0x5bcfec.globalAlpha = 1;
  _0x5bcfec.save();
  _0x5bcfec.translate(174 * _0x2b9990, 172 * _0x2b9990);
  round_rect(
    _0x5bcfec,
    -81 * _0x2b9990,
    -60 * _0x2b9990,
    162 * _0x2b9990,
    120 * _0x2b9990,
    26 * _0x2b9990
  );
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[1], _0x418dc7[2], 7 * _0x2b9990);
  _0x5bcfec.beginPath();
  _0x5bcfec.lineCap = "round";
  _0x5bcfec.lineJoin = "round";
  _0x5bcfec.moveTo(179 * _0x2b9990, 211 * _0x2b9990);
  _0x5bcfec.bezierCurveTo(
    183 * _0x2b9990,
    204.5 * _0x2b9990,
    183 * _0x2b9990,
    204.5 * _0x2b9990,
    187 * _0x2b9990,
    198 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    198.5 * _0x2b9990,
    191.5 * _0x2b9990,
    198.5 * _0x2b9990,
    191.5 * _0x2b9990,
    210 * _0x2b9990,
    185 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    215 * _0x2b9990,
    176.5 * _0x2b9990,
    215 * _0x2b9990,
    176.5 * _0x2b9990,
    220 * _0x2b9990,
    168 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    213 * _0x2b9990,
    173.5 * _0x2b9990,
    213 * _0x2b9990,
    173.5 * _0x2b9990,
    206 * _0x2b9990,
    179 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    195 * _0x2b9990,
    184 * _0x2b9990,
    195 * _0x2b9990,
    184 * _0x2b9990,
    184 * _0x2b9990,
    189 * _0x2b9990
  );
  _0x5bcfec.closePath();
  fill_path(_0x5bcfec, _0x418dc7[3]);
  _0x5bcfec.beginPath();
  _0x5bcfec.lineCap = "round";
  _0x5bcfec.lineJoin = "round";
  _0x5bcfec.moveTo(167 * _0x2b9990, 233 * _0x2b9990);
  _0x5bcfec.bezierCurveTo(
    167 * _0x2b9990,
    207 * _0x2b9990,
    167 * _0x2b9990,
    207 * _0x2b9990,
    167 * _0x2b9990,
    181 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    167 * _0x2b9990,
    166 * _0x2b9990,
    157 * _0x2b9990,
    164 * _0x2b9990,
    148 * _0x2b9990,
    165 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    120 * _0x2b9990,
    165 * _0x2b9990,
    120 * _0x2b9990,
    165 * _0x2b9990,
    92 * _0x2b9990,
    165 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    92 * _0x2b9990,
    186.5 * _0x2b9990,
    92 * _0x2b9990,
    186.5 * _0x2b9990,
    92 * _0x2b9990,
    208 * _0x2b9990
  );
  _0x5bcfec.bezierCurveTo(
    93 * _0x2b9990,
    222 * _0x2b9990,
    102 * _0x2b9990,
    234 * _0x2b9990,
    119 * _0x2b9990,
    233 * _0x2b9990
  );
  _0x5bcfec.closePath();
  fill_path(_0x5bcfec, _0x418dc7[1], _0x418dc7[2], 7 * _0x2b9990);
  circle(_0x5bcfec, 152 * _0x2b9990, 179 * _0x2b9990, 6 * _0x2b9990);
  fill_path(_0x5bcfec, _0x418dc7[4]);
  circle(_0x5bcfec, 107 * _0x2b9990, 179 * _0x2b9990, 6 * _0x2b9990);
  fill_path(_0x5bcfec, _0x418dc7[4]);
  _0x5bcfec.save();
  _0x5bcfec.translate(210 * _0x2b9990, 200 * _0x2b9990);
  _0x5bcfec.rotate(0.2);
  round_regular_polygon(_0x5bcfec, 6, 32 * _0x2b9990, 10 * _0x2b9990);
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[5], _0x418dc7[2], 7 * _0x2b9990);
  _0x5bcfec.save();
  _0x5bcfec.translate(210 * _0x2b9990, 200 * _0x2b9990);
  _0x5bcfec.rotate(1.0471975511965976);
  round_regular_polygon(_0x5bcfec, 6, 19 * _0x2b9990, 6 * _0x2b9990);
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[6], _0x418dc7[7], 7 * _0x2b9990);
  _0x5bcfec.save();
  _0x5bcfec.translate(205 * _0x2b9990, 193 * _0x2b9990);
  _0x5bcfec.rotate(0);
  round_regular_polygon(_0x5bcfec, 6, 10 * _0x2b9990, 3 * _0x2b9990);
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[8]);
  _0x5bcfec.save();
  _0x5bcfec.translate(137 * _0x2b9990, 200 * _0x2b9990);
  _0x5bcfec.rotate(-0.5235987755982988);
  round_regular_polygon(_0x5bcfec, 6, 20 * _0x2b9990, 5 * _0x2b9990);
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[6], _0x418dc7[7], 7 * _0x2b9990);
  _0x5bcfec.save();
  _0x5bcfec.translate(131 * _0x2b9990, 194 * _0x2b9990);
  round_regular_polygon(_0x5bcfec, 6, 10 * _0x2b9990, 3 * _0x2b9990);
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, _0x418dc7[8]);
  _0x5bcfec.save();
  _0x5bcfec.translate(150.5 * _0x2b9990, 120 * _0x2b9990);
  _0x5bcfec.rotate(0);
  round_rect(
    _0x5bcfec,
    -19.5 * _0x2b9990,
    -8 * _0x2b9990,
    39 * _0x2b9990,
    16 * _0x2b9990,
    0 * _0x2b9990
  );
  _0x5bcfec.restore();
  fill_path(_0x5bcfec, undefined, _0x418dc7[2], 7 * _0x2b9990);
  return _0xf6ab93;
}
function create_skins(_0x2c3faa, _0x210db4, _0x5eb827) {
  var _0x393476 = document.createElement("canvas");
  var _0x223b78 = _0x393476.getContext("2d");
  _0x393476.width = 175 * _0x2c3faa;
  _0x393476.height = 150 * _0x2c3faa;
  if (_0x5eb827 == 0) {
    _0x223b78.globalAlpha = 0.5;
    _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
    _0x223b78.save();
    _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
    round_rect(
      _0x223b78,
      -82 * _0x2c3faa,
      -46.5 * _0x2c3faa,
      164 * _0x2c3faa,
      93 * _0x2c3faa,
      30 * _0x2c3faa
    );
    _0x223b78.restore();
    fill_path(_0x223b78, _0x210db4[0]);
    _0x223b78.globalAlpha = 1;
    _0x223b78.save();
    _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
    round_rect(
      _0x223b78,
      -81 * _0x2c3faa,
      -59.5 * _0x2c3faa,
      162 * _0x2c3faa,
      119 * _0x2c3faa,
      28 * _0x2c3faa
    );
    _0x223b78.restore();
    fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
    circle(
      _0x223b78,
      137 * _0x2c3faa,
      200 * _0x2c3faa,
      22.090722034374522 * _0x2c3faa
    );
    fill_path(_0x223b78, _0x210db4[3]);
    circle(
      _0x223b78,
      210 * _0x2c3faa,
      200 * _0x2c3faa,
      22.20360331117452 * _0x2c3faa
    );
    fill_path(_0x223b78, _0x210db4[3]);
    circle(_0x223b78, 131 * _0x2c3faa, 194 * _0x2c3faa, 7 * _0x2c3faa);
    fill_path(_0x223b78, _0x210db4[4]);
    circle(_0x223b78, 206 * _0x2c3faa, 194 * _0x2c3faa, 7 * _0x2c3faa);
    fill_path(_0x223b78, _0x210db4[4]);
    _0x223b78.translate(0, 1 * _0x2c3faa);
    _0x223b78.save();
    _0x223b78.translate(138.5 * _0x2c3faa, 180.5 * _0x2c3faa);
    round_rect(
      _0x223b78,
      -22.5 * _0x2c3faa,
      -11.5 * _0x2c3faa,
      45 * _0x2c3faa,
      23 * _0x2c3faa,
      0 * _0x2c3faa
    );
    _0x223b78.restore();
    fill_path(_0x223b78, _0x210db4[1]);
    _0x223b78.save();
    _0x223b78.translate(207 * _0x2c3faa, 177.5 * _0x2c3faa);
    round_rect(
      _0x223b78,
      -31 * _0x2c3faa,
      -9.5 * _0x2c3faa,
      62 * _0x2c3faa,
      19 * _0x2c3faa,
      0 * _0x2c3faa
    );
    _0x223b78.restore();
    fill_path(_0x223b78, _0x210db4[1]);
    _0x223b78.save();
    _0x223b78.translate(171.5 * _0x2c3faa, 220 * _0x2c3faa);
    round_rect(
      _0x223b78,
      -52.5 * _0x2c3faa,
      -2 * _0x2c3faa,
      105 * _0x2c3faa,
      4 * _0x2c3faa,
      0 * _0x2c3faa
    );
    _0x223b78.restore();
    fill_path(_0x223b78, _0x210db4[1]);
  } else {
    if (_0x5eb827 == 1) {
      _0x223b78.globalAlpha = 0.5;
      _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
      _0x223b78.save();
      _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
      round_rect(
        _0x223b78,
        -82 * _0x2c3faa,
        -46.5 * _0x2c3faa,
        164 * _0x2c3faa,
        93 * _0x2c3faa,
        30 * _0x2c3faa
      );
      _0x223b78.restore();
      fill_path(_0x223b78, _0x210db4[0]);
      _0x223b78.globalAlpha = 1;
      _0x223b78.save();
      _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
      round_rect(
        _0x223b78,
        -81 * _0x2c3faa,
        -59.5 * _0x2c3faa,
        162 * _0x2c3faa,
        119 * _0x2c3faa,
        28 * _0x2c3faa
      );
      _0x223b78.restore();
      fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
      _0x223b78.beginPath();
      _0x223b78.lineCap = "round";
      _0x223b78.lineJoin = "round";
      _0x223b78.moveTo(183 * _0x2c3faa, 223 * _0x2c3faa);
      _0x223b78.bezierCurveTo(
        193 * _0x2c3faa,
        187 * _0x2c3faa,
        215 * _0x2c3faa,
        193 * _0x2c3faa,
        227 * _0x2c3faa,
        159 * _0x2c3faa
      );
      _0x223b78.bezierCurveTo(
        227 * _0x2c3faa,
        194 * _0x2c3faa,
        209 * _0x2c3faa,
        187 * _0x2c3faa,
        183 * _0x2c3faa,
        223 * _0x2c3faa
      );
      _0x223b78.closePath();
      fill_path(_0x223b78, _0x210db4[5]);
      circle(
        _0x223b78,
        137 * _0x2c3faa,
        200 * _0x2c3faa,
        22.090722034374522 * _0x2c3faa
      );
      fill_path(_0x223b78, _0x210db4[3]);
      circle(
        _0x223b78,
        210 * _0x2c3faa,
        200 * _0x2c3faa,
        22.20360331117452 * _0x2c3faa
      );
      fill_path(_0x223b78, _0x210db4[3]);
      circle(_0x223b78, 131 * _0x2c3faa, 190 * _0x2c3faa, 7 * _0x2c3faa);
      fill_path(_0x223b78, _0x210db4[4]);
      circle(_0x223b78, 204 * _0x2c3faa, 190 * _0x2c3faa, 7 * _0x2c3faa);
      fill_path(_0x223b78, _0x210db4[4]);
      _0x223b78.beginPath();
      _0x223b78.lineCap = "round";
      _0x223b78.lineJoin = "round";
      _0x223b78.moveTo(120 * _0x2c3faa, 154 * _0x2c3faa);
      _0x223b78.bezierCurveTo(
        125 * _0x2c3faa,
        146 * _0x2c3faa,
        131 * _0x2c3faa,
        143 * _0x2c3faa,
        147 * _0x2c3faa,
        137 * _0x2c3faa
      );
      _0x223b78.bezierCurveTo(
        139 * _0x2c3faa,
        147 * _0x2c3faa,
        129 * _0x2c3faa,
        152 * _0x2c3faa,
        121 * _0x2c3faa,
        154 * _0x2c3faa
      );
      _0x223b78.closePath();
      fill_path(_0x223b78, _0x210db4[5]);
      _0x223b78.beginPath();
      _0x223b78.lineCap = "round";
      _0x223b78.lineJoin = "round";
      _0x223b78.moveTo(120 * _0x2c3faa, 162 * _0x2c3faa);
      _0x223b78.bezierCurveTo(
        134 * _0x2c3faa,
        153 * _0x2c3faa,
        139 * _0x2c3faa,
        149 * _0x2c3faa,
        150 * _0x2c3faa,
        144 * _0x2c3faa
      );
      _0x223b78.bezierCurveTo(
        143 * _0x2c3faa,
        155 * _0x2c3faa,
        128 * _0x2c3faa,
        163 * _0x2c3faa,
        121 * _0x2c3faa,
        161 * _0x2c3faa
      );
      _0x223b78.closePath();
      fill_path(_0x223b78, _0x210db4[5]);
      _0x223b78.beginPath();
      _0x223b78.lineCap = "round";
      _0x223b78.lineJoin = "round";
      _0x223b78.moveTo(127 * _0x2c3faa, 142 * _0x2c3faa);
      _0x223b78.bezierCurveTo(
        129 * _0x2c3faa,
        151 * _0x2c3faa,
        132 * _0x2c3faa,
        157 * _0x2c3faa,
        137 * _0x2c3faa,
        162 * _0x2c3faa
      );
      _0x223b78.bezierCurveTo(
        134 * _0x2c3faa,
        152 * _0x2c3faa,
        132 * _0x2c3faa,
        146 * _0x2c3faa,
        127 * _0x2c3faa,
        142 * _0x2c3faa
      );
      _0x223b78.closePath();
      fill_path(_0x223b78, _0x210db4[5]);
      _0x223b78.beginPath();
      _0x223b78.lineCap = "round";
      _0x223b78.lineJoin = "round";
      _0x223b78.moveTo(135 * _0x2c3faa, 140 * _0x2c3faa);
      _0x223b78.bezierCurveTo(
        141 * _0x2c3faa,
        144 * _0x2c3faa,
        143 * _0x2c3faa,
        150 * _0x2c3faa,
        143 * _0x2c3faa,
        157 * _0x2c3faa
      );
      _0x223b78.bezierCurveTo(
        138 * _0x2c3faa,
        150 * _0x2c3faa,
        136 * _0x2c3faa,
        145 * _0x2c3faa,
        135 * _0x2c3faa,
        140 * _0x2c3faa
      );
      _0x223b78.closePath();
      fill_path(_0x223b78, _0x210db4[5]);
    } else {
      if (_0x5eb827 == 2) {
        _0x223b78.globalAlpha = 0.5;
        _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
        _0x223b78.save();
        _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
        round_rect(
          _0x223b78,
          -82 * _0x2c3faa,
          -46.5 * _0x2c3faa,
          164 * _0x2c3faa,
          93 * _0x2c3faa,
          30 * _0x2c3faa
        );
        _0x223b78.restore();
        fill_path(_0x223b78, _0x210db4[0]);
        _0x223b78.globalAlpha = 1;
        _0x223b78.save();
        _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
        round_rect(
          _0x223b78,
          -81 * _0x2c3faa,
          -59.5 * _0x2c3faa,
          162 * _0x2c3faa,
          119 * _0x2c3faa,
          28 * _0x2c3faa
        );
        _0x223b78.restore();
        fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
        circle(
          _0x223b78,
          137 * _0x2c3faa,
          200 * _0x2c3faa,
          22.090722034374522 * _0x2c3faa
        );
        fill_path(_0x223b78, _0x210db4[3]);
        circle(
          _0x223b78,
          210 * _0x2c3faa,
          200 * _0x2c3faa,
          22.20360331117452 * _0x2c3faa
        );
        fill_path(_0x223b78, _0x210db4[3]);
        circle(_0x223b78, 130 * _0x2c3faa, 192 * _0x2c3faa, 7 * _0x2c3faa);
        fill_path(_0x223b78, _0x210db4[4]);
        circle(_0x223b78, 203 * _0x2c3faa, 192 * _0x2c3faa, 7 * _0x2c3faa);
        fill_path(_0x223b78, _0x210db4[4]);
        _0x223b78.beginPath();
        _0x223b78.lineCap = "round";
        _0x223b78.lineJoin = "round";
        _0x223b78.moveTo(115 * _0x2c3faa, 224 * _0x2c3faa);
        _0x223b78.bezierCurveTo(
          173 * _0x2c3faa,
          223.5 * _0x2c3faa,
          173 * _0x2c3faa,
          223.5 * _0x2c3faa,
          231 * _0x2c3faa,
          223 * _0x2c3faa
        );
        _0x223b78.bezierCurveTo(
          230 * _0x2c3faa,
          222 * _0x2c3faa,
          198 * _0x2c3faa,
          223 * _0x2c3faa,
          186 * _0x2c3faa,
          209 * _0x2c3faa
        );
        _0x223b78.bezierCurveTo(
          173.5 * _0x2c3faa,
          209 * _0x2c3faa,
          173.5 * _0x2c3faa,
          209 * _0x2c3faa,
          161 * _0x2c3faa,
          209 * _0x2c3faa
        );
        _0x223b78.bezierCurveTo(
          146 * _0x2c3faa,
          224 * _0x2c3faa,
          114 * _0x2c3faa,
          223 * _0x2c3faa,
          116 * _0x2c3faa,
          224 * _0x2c3faa
        );
        _0x223b78.closePath();
        fill_path(_0x223b78, _0x210db4[1]);
        _0x223b78.beginPath();
        _0x223b78.lineCap = "round";
        _0x223b78.lineJoin = "round";
        _0x223b78.moveTo(112 * _0x2c3faa, 193 * _0x2c3faa);
        _0x223b78.bezierCurveTo(
          154 * _0x2c3faa,
          182 * _0x2c3faa,
          194 * _0x2c3faa,
          183 * _0x2c3faa,
          234 * _0x2c3faa,
          192 * _0x2c3faa
        );
        _0x223b78.bezierCurveTo(
          217 * _0x2c3faa,
          154 * _0x2c3faa,
          148 * _0x2c3faa,
          127 * _0x2c3faa,
          112 * _0x2c3faa,
          192 * _0x2c3faa
        );
        _0x223b78.closePath();
        fill_path(_0x223b78, _0x210db4[1]);
      } else {
        if (_0x5eb827 == 3) {
          _0x223b78.globalAlpha = 0.5;
          _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
          _0x223b78.save();
          _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
          round_rect(
            _0x223b78,
            -82 * _0x2c3faa,
            -46.5 * _0x2c3faa,
            164 * _0x2c3faa,
            93 * _0x2c3faa,
            30 * _0x2c3faa
          );
          _0x223b78.restore();
          fill_path(_0x223b78, _0x210db4[0]);
          _0x223b78.globalAlpha = 1;
          _0x223b78.save();
          _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
          round_rect(
            _0x223b78,
            -81 * _0x2c3faa,
            -59.5 * _0x2c3faa,
            162 * _0x2c3faa,
            119 * _0x2c3faa,
            28 * _0x2c3faa
          );
          _0x223b78.restore();
          fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
          circle(
            _0x223b78,
            137 * _0x2c3faa,
            200 * _0x2c3faa,
            22.090722034374522 * _0x2c3faa
          );
          fill_path(_0x223b78, _0x210db4[3]);
          circle(
            _0x223b78,
            210 * _0x2c3faa,
            200 * _0x2c3faa,
            22.20360331117452 * _0x2c3faa
          );
          fill_path(_0x223b78, _0x210db4[3]);
          circle(_0x223b78, 130 * _0x2c3faa, 192 * _0x2c3faa, 7 * _0x2c3faa);
          fill_path(_0x223b78, _0x210db4[4]);
          circle(_0x223b78, 203 * _0x2c3faa, 192 * _0x2c3faa, 7 * _0x2c3faa);
          fill_path(_0x223b78, _0x210db4[4]);
          _0x223b78.beginPath();
          _0x223b78.lineCap = "round";
          _0x223b78.lineJoin = "round";
          _0x223b78.moveTo(120 * _0x2c3faa, 176 * _0x2c3faa);
          _0x223b78.bezierCurveTo(
            175 * _0x2c3faa,
            193 * _0x2c3faa,
            147.5 * _0x2c3faa,
            184.5 * _0x2c3faa,
            175 * _0x2c3faa,
            193 * _0x2c3faa
          );
          _0x223b78.bezierCurveTo(
            200 * _0x2c3faa,
            184.5 * _0x2c3faa,
            200 * _0x2c3faa,
            184.5 * _0x2c3faa,
            225 * _0x2c3faa,
            176 * _0x2c3faa
          );
          _0x223b78.closePath();
          fill_path(_0x223b78, _0x210db4[1]);
          _0x223b78.beginPath();
          _0x223b78.lineCap = "round";
          _0x223b78.lineJoin = "round";
          _0x223b78.moveTo(226 * _0x2c3faa, 223 * _0x2c3faa);
          _0x223b78.bezierCurveTo(
            173.5 * _0x2c3faa,
            223 * _0x2c3faa,
            173.5 * _0x2c3faa,
            223 * _0x2c3faa,
            121 * _0x2c3faa,
            223 * _0x2c3faa
          );
          _0x223b78.bezierCurveTo(
            148 * _0x2c3faa,
            218 * _0x2c3faa,
            148 * _0x2c3faa,
            218 * _0x2c3faa,
            175 * _0x2c3faa,
            213 * _0x2c3faa
          );
          _0x223b78.closePath();
          fill_path(_0x223b78, _0x210db4[1]);
        } else {
          if (_0x5eb827 == 4) {
            _0x223b78.globalAlpha = 0.5;
            _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
            _0x223b78.save();
            _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
            round_rect(
              _0x223b78,
              -82 * _0x2c3faa,
              -46.5 * _0x2c3faa,
              164 * _0x2c3faa,
              93 * _0x2c3faa,
              30 * _0x2c3faa
            );
            _0x223b78.restore();
            fill_path(_0x223b78, _0x210db4[0]);
            _0x223b78.globalAlpha = 1;
            _0x223b78.save();
            _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
            _0x223b78.rotate(0);
            round_rect(
              _0x223b78,
              -81 * _0x2c3faa,
              -59.5 * _0x2c3faa,
              162 * _0x2c3faa,
              119 * _0x2c3faa,
              28 * _0x2c3faa
            );
            _0x223b78.restore();
            fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
            circle(
              _0x223b78,
              137 * _0x2c3faa,
              200 * _0x2c3faa,
              22.090722034374522 * _0x2c3faa
            );
            fill_path(_0x223b78, _0x210db4[3]);
            circle(
              _0x223b78,
              210 * _0x2c3faa,
              200 * _0x2c3faa,
              22.20360331117452 * _0x2c3faa
            );
            fill_path(_0x223b78, _0x210db4[3]);
            circle(_0x223b78, 137 * _0x2c3faa, 203 * _0x2c3faa, 8 * _0x2c3faa);
            fill_path(_0x223b78, _0x210db4[4]);
            circle(_0x223b78, 209 * _0x2c3faa, 203 * _0x2c3faa, 8 * _0x2c3faa);
            fill_path(_0x223b78, _0x210db4[4]);
            _0x223b78.save();
            _0x223b78.translate(174.5 * _0x2c3faa, 218 * _0x2c3faa);
            _0x223b78.rotate(0);
            round_rect(
              _0x223b78,
              -60.5 * _0x2c3faa,
              -5 * _0x2c3faa,
              121 * _0x2c3faa,
              10 * _0x2c3faa,
              28 * _0x2c3faa
            );
            _0x223b78.restore();
            fill_path(_0x223b78, _0x210db4[1]);
            _0x223b78.beginPath();
            _0x223b78.lineCap = "round";
            _0x223b78.lineJoin = "round";
            _0x223b78.moveTo(113 * _0x2c3faa, 190 * _0x2c3faa);
            _0x223b78.bezierCurveTo(
              144 * _0x2c3faa,
              181.5 * _0x2c3faa,
              144 * _0x2c3faa,
              181.5 * _0x2c3faa,
              175 * _0x2c3faa,
              173 * _0x2c3faa
            );
            _0x223b78.bezierCurveTo(
              205 * _0x2c3faa,
              182 * _0x2c3faa,
              205 * _0x2c3faa,
              182 * _0x2c3faa,
              235 * _0x2c3faa,
              191 * _0x2c3faa
            );
            _0x223b78.bezierCurveTo(
              242 * _0x2c3faa,
              141 * _0x2c3faa,
              106 * _0x2c3faa,
              119 * _0x2c3faa,
              112 * _0x2c3faa,
              189 * _0x2c3faa
            );
            _0x223b78.closePath();
            fill_path(_0x223b78, _0x210db4[1]);
          } else {
            if (_0x5eb827 == 5) {
              _0x223b78.globalAlpha = 0.5;
              _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
              _0x223b78.save();
              _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
              round_rect(
                _0x223b78,
                -82 * _0x2c3faa,
                -46.5 * _0x2c3faa,
                164 * _0x2c3faa,
                93 * _0x2c3faa,
                30 * _0x2c3faa
              );
              _0x223b78.restore();
              fill_path(_0x223b78, _0x210db4[0]);
              _0x223b78.globalAlpha = 1;
              _0x223b78.save();
              _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
              _0x223b78.rotate(0);
              round_rect(
                _0x223b78,
                -81 * _0x2c3faa,
                -59.5 * _0x2c3faa,
                162 * _0x2c3faa,
                119 * _0x2c3faa,
                28 * _0x2c3faa
              );
              _0x223b78.restore();
              fill_path(_0x223b78, _0x210db4[1], _0x210db4[2], 6.5 * _0x2c3faa);
              circle(
                _0x223b78,
                137 * _0x2c3faa,
                200 * _0x2c3faa,
                22.090722034374522 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[3]);
              circle(
                _0x223b78,
                210 * _0x2c3faa,
                200 * _0x2c3faa,
                22.20360331117452 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[3]);
              circle(
                _0x223b78,
                140 * _0x2c3faa,
                196 * _0x2c3faa,
                7 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[4]);
              circle(
                _0x223b78,
                213 * _0x2c3faa,
                196 * _0x2c3faa,
                7 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[4]);
              circle(
                _0x223b78,
                131 * _0x2c3faa,
                206 * _0x2c3faa,
                3 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[4]);
              circle(
                _0x223b78,
                204 * _0x2c3faa,
                206 * _0x2c3faa,
                3 * _0x2c3faa
              );
              fill_path(_0x223b78, _0x210db4[4]);
              _0x223b78.beginPath();
              _0x223b78.lineCap = "round";
              _0x223b78.lineJoin = "round";
              _0x223b78.moveTo(113 * _0x2c3faa, 181 * _0x2c3faa);
              _0x223b78.bezierCurveTo(
                159 * _0x2c3faa,
                204 * _0x2c3faa,
                190 * _0x2c3faa,
                202 * _0x2c3faa,
                235 * _0x2c3faa,
                181 * _0x2c3faa
              );
              _0x223b78.bezierCurveTo(
                241 * _0x2c3faa,
                137 * _0x2c3faa,
                109 * _0x2c3faa,
                130 * _0x2c3faa,
                112 * _0x2c3faa,
                180 * _0x2c3faa
              );
              _0x223b78.closePath();
              fill_path(_0x223b78, _0x210db4[1]);
              _0x223b78.save();
              _0x223b78.translate(174 * _0x2c3faa, 220 * _0x2c3faa);
              _0x223b78.rotate(0);
              round_rect(
                _0x223b78,
                -56 * _0x2c3faa,
                -5 * _0x2c3faa,
                112 * _0x2c3faa,
                10 * _0x2c3faa,
                1 * _0x2c3faa
              );
              _0x223b78.restore();
              fill_path(_0x223b78, _0x210db4[1]);
            } else {
              if (_0x5eb827 == 6) {
                _0x223b78.globalAlpha = 0.5;
                _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
                _0x223b78.save();
                _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
                round_rect(
                  _0x223b78,
                  -82 * _0x2c3faa,
                  -46.5 * _0x2c3faa,
                  164 * _0x2c3faa,
                  93 * _0x2c3faa,
                  30 * _0x2c3faa
                );
                _0x223b78.restore();
                fill_path(_0x223b78, _0x210db4[0]);
                _0x223b78.globalAlpha = 1;
                _0x223b78.save();
                _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
                round_rect(
                  _0x223b78,
                  -81 * _0x2c3faa,
                  -59.5 * _0x2c3faa,
                  162 * _0x2c3faa,
                  119 * _0x2c3faa,
                  28 * _0x2c3faa
                );
                _0x223b78.restore();
                fill_path(
                  _0x223b78,
                  _0x210db4[1],
                  _0x210db4[2],
                  6.5 * _0x2c3faa
                );
                circle(
                  _0x223b78,
                  137 * _0x2c3faa,
                  200 * _0x2c3faa,
                  22.090722034374522 * _0x2c3faa
                );
                fill_path(_0x223b78, _0x210db4[3]);
                circle(
                  _0x223b78,
                  210 * _0x2c3faa,
                  200 * _0x2c3faa,
                  22.20360331117452 * _0x2c3faa
                );
                fill_path(_0x223b78, _0x210db4[3]);
                circle(
                  _0x223b78,
                  133 * _0x2c3faa,
                  188 * _0x2c3faa,
                  7 * _0x2c3faa
                );
                fill_path(_0x223b78, _0x210db4[4]);
                circle(
                  _0x223b78,
                  206 * _0x2c3faa,
                  188 * _0x2c3faa,
                  7 * _0x2c3faa
                );
                fill_path(_0x223b78, _0x210db4[4]);
                _0x223b78.beginPath();
                _0x223b78.lineCap = "round";
                _0x223b78.lineJoin = "round";
                _0x223b78.moveTo(110 * _0x2c3faa, 193 * _0x2c3faa);
                _0x223b78.bezierCurveTo(
                  130 * _0x2c3faa,
                  182 * _0x2c3faa,
                  142 * _0x2c3faa,
                  183 * _0x2c3faa,
                  162 * _0x2c3faa,
                  193 * _0x2c3faa
                );
                _0x223b78.bezierCurveTo(
                  164 * _0x2c3faa,
                  176.5 * _0x2c3faa,
                  164 * _0x2c3faa,
                  176.5 * _0x2c3faa,
                  166 * _0x2c3faa,
                  160 * _0x2c3faa
                );
                _0x223b78.bezierCurveTo(
                  137 * _0x2c3faa,
                  159 * _0x2c3faa,
                  137 * _0x2c3faa,
                  159 * _0x2c3faa,
                  108 * _0x2c3faa,
                  158 * _0x2c3faa
                );
                _0x223b78.closePath();
                fill_path(_0x223b78, _0x210db4[1]);
                _0x223b78.beginPath();
                _0x223b78.lineCap = "round";
                _0x223b78.lineJoin = "round";
                _0x223b78.moveTo(184 * _0x2c3faa, 192 * _0x2c3faa);
                _0x223b78.bezierCurveTo(
                  205 * _0x2c3faa,
                  183 * _0x2c3faa,
                  216 * _0x2c3faa,
                  183 * _0x2c3faa,
                  234 * _0x2c3faa,
                  192 * _0x2c3faa
                );
                _0x223b78.bezierCurveTo(
                  233.5 * _0x2c3faa,
                  177 * _0x2c3faa,
                  233.5 * _0x2c3faa,
                  177 * _0x2c3faa,
                  233 * _0x2c3faa,
                  162 * _0x2c3faa
                );
                _0x223b78.bezierCurveTo(
                  209 * _0x2c3faa,
                  161.5 * _0x2c3faa,
                  186 * _0x2c3faa,
                  162 * _0x2c3faa,
                  185 * _0x2c3faa,
                  161 * _0x2c3faa
                );
                _0x223b78.closePath();
                fill_path(_0x223b78, _0x210db4[1]);
              } else {
                if (_0x5eb827 == 7) {
                  _0x223b78.globalAlpha = 0.5;
                  _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
                  _0x223b78.save();
                  _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
                  round_rect(
                    _0x223b78,
                    -82 * _0x2c3faa,
                    -46.5 * _0x2c3faa,
                    164 * _0x2c3faa,
                    93 * _0x2c3faa,
                    30 * _0x2c3faa
                  );
                  _0x223b78.restore();
                  fill_path(_0x223b78, _0x210db4[0]);
                  _0x223b78.globalAlpha = 1;
                  _0x223b78.save();
                  _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
                  round_rect(
                    _0x223b78,
                    -81 * _0x2c3faa,
                    -59.5 * _0x2c3faa,
                    162 * _0x2c3faa,
                    119 * _0x2c3faa,
                    28 * _0x2c3faa
                  );
                  _0x223b78.restore();
                  fill_path(
                    _0x223b78,
                    _0x210db4[1],
                    _0x210db4[2],
                    6.5 * _0x2c3faa
                  );
                  circle(
                    _0x223b78,
                    137 * _0x2c3faa,
                    200 * _0x2c3faa,
                    22.090722034374522 * _0x2c3faa
                  );
                  fill_path(_0x223b78, _0x210db4[3]);
                  circle(
                    _0x223b78,
                    210 * _0x2c3faa,
                    200 * _0x2c3faa,
                    22.20360331117452 * _0x2c3faa
                  );
                  fill_path(_0x223b78, _0x210db4[3]);
                  circle(
                    _0x223b78,
                    130 * _0x2c3faa,
                    206 * _0x2c3faa,
                    7 * _0x2c3faa
                  );
                  fill_path(_0x223b78, _0x210db4[4]);
                  circle(
                    _0x223b78,
                    203 * _0x2c3faa,
                    206 * _0x2c3faa,
                    7 * _0x2c3faa
                  );
                  fill_path(_0x223b78, _0x210db4[4]);
                  _0x223b78.beginPath();
                  _0x223b78.lineCap = "round";
                  _0x223b78.lineJoin = "round";
                  _0x223b78.moveTo(108 * _0x2c3faa, 191 * _0x2c3faa);
                  _0x223b78.bezierCurveTo(
                    141 * _0x2c3faa,
                    184 * _0x2c3faa,
                    141 * _0x2c3faa,
                    184 * _0x2c3faa,
                    174 * _0x2c3faa,
                    177 * _0x2c3faa
                  );
                  _0x223b78.bezierCurveTo(
                    207 * _0x2c3faa,
                    184 * _0x2c3faa,
                    207 * _0x2c3faa,
                    184 * _0x2c3faa,
                    240 * _0x2c3faa,
                    191 * _0x2c3faa
                  );
                  _0x223b78.bezierCurveTo(
                    244 * _0x2c3faa,
                    140 * _0x2c3faa,
                    113 * _0x2c3faa,
                    121 * _0x2c3faa,
                    108 * _0x2c3faa,
                    191 * _0x2c3faa
                  );
                  _0x223b78.closePath();
                  fill_path(_0x223b78, _0x210db4[1]);
                } else {
                  if (_0x5eb827 == 8) {
                    _0x223b78.globalAlpha = 0.5;
                    _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
                    _0x223b78.save();
                    _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
                    round_rect(
                      _0x223b78,
                      -82 * _0x2c3faa,
                      -46.5 * _0x2c3faa,
                      164 * _0x2c3faa,
                      93 * _0x2c3faa,
                      30 * _0x2c3faa
                    );
                    _0x223b78.restore();
                    fill_path(_0x223b78, _0x210db4[0]);
                    _0x223b78.globalAlpha = 1;
                    _0x223b78.save();
                    _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
                    round_rect(
                      _0x223b78,
                      -81 * _0x2c3faa,
                      -59.5 * _0x2c3faa,
                      162 * _0x2c3faa,
                      119 * _0x2c3faa,
                      28 * _0x2c3faa
                    );
                    _0x223b78.restore();
                    fill_path(
                      _0x223b78,
                      _0x210db4[1],
                      _0x210db4[2],
                      6.5 * _0x2c3faa
                    );
                    circle(
                      _0x223b78,
                      137 * _0x2c3faa,
                      200 * _0x2c3faa,
                      22.090722034374522 * _0x2c3faa
                    );
                    fill_path(_0x223b78, _0x210db4[3]);
                    circle(
                      _0x223b78,
                      210 * _0x2c3faa,
                      200 * _0x2c3faa,
                      22.20360331117452 * _0x2c3faa
                    );
                    fill_path(_0x223b78, _0x210db4[3]);
                    circle(
                      _0x223b78,
                      127 * _0x2c3faa,
                      198 * _0x2c3faa,
                      7 * _0x2c3faa
                    );
                    fill_path(_0x223b78, _0x210db4[4]);
                    circle(
                      _0x223b78,
                      200 * _0x2c3faa,
                      198 * _0x2c3faa,
                      7 * _0x2c3faa
                    );
                    fill_path(_0x223b78, _0x210db4[4]);
                    _0x223b78.save();
                    _0x223b78.translate(175 * _0x2c3faa, 175.5 * _0x2c3faa);
                    round_rect(
                      _0x223b78,
                      -67 * _0x2c3faa,
                      -13.5 * _0x2c3faa,
                      134 * _0x2c3faa,
                      27 * _0x2c3faa,
                      0 * _0x2c3faa
                    );
                    _0x223b78.restore();
                    fill_path(_0x223b78, _0x210db4[1]);
                    _0x223b78.save();
                    _0x223b78.translate(172 * _0x2c3faa, 219 * _0x2c3faa);
                    round_rect(
                      _0x223b78,
                      -60 * _0x2c3faa,
                      -4 * _0x2c3faa,
                      120 * _0x2c3faa,
                      8 * _0x2c3faa,
                      0 * _0x2c3faa
                    );
                    _0x223b78.restore();
                    fill_path(_0x223b78, _0x210db4[1]);
                  } else {
                    if (_0x5eb827 == 9) {
                      _0x223b78.globalAlpha = 0.5;
                      _0x223b78.translate(-88 * _0x2c3faa, -95 * _0x2c3faa);
                      _0x223b78.save();
                      _0x223b78.translate(174 * _0x2c3faa, 195.5 * _0x2c3faa);
                      round_rect(
                        _0x223b78,
                        -82 * _0x2c3faa,
                        -46.5 * _0x2c3faa,
                        164 * _0x2c3faa,
                        93 * _0x2c3faa,
                        30 * _0x2c3faa
                      );
                      _0x223b78.restore();
                      fill_path(_0x223b78, _0x210db4[0]);
                      _0x223b78.globalAlpha = 1;
                      _0x223b78.save();
                      _0x223b78.translate(174 * _0x2c3faa, 170.5 * _0x2c3faa);
                      round_rect(
                        _0x223b78,
                        -81 * _0x2c3faa,
                        -59.5 * _0x2c3faa,
                        162 * _0x2c3faa,
                        119 * _0x2c3faa,
                        28 * _0x2c3faa
                      );
                      _0x223b78.restore();
                      fill_path(
                        _0x223b78,
                        _0x210db4[1],
                        _0x210db4[2],
                        6.5 * _0x2c3faa
                      );
                      circle(
                        _0x223b78,
                        137 * _0x2c3faa,
                        200 * _0x2c3faa,
                        22.090722034374522 * _0x2c3faa
                      );
                      fill_path(_0x223b78, _0x210db4[3]);
                      circle(
                        _0x223b78,
                        210 * _0x2c3faa,
                        200 * _0x2c3faa,
                        22.090722034374522 * _0x2c3faa
                      );
                      fill_path(_0x223b78, _0x210db4[3]);
                      circle(
                        _0x223b78,
                        143 * _0x2c3faa,
                        200 * _0x2c3faa,
                        7 * _0x2c3faa
                      );
                      fill_path(_0x223b78, _0x210db4[4]);
                      circle(
                        _0x223b78,
                        204 * _0x2c3faa,
                        200 * _0x2c3faa,
                        7 * _0x2c3faa
                      );
                      fill_path(_0x223b78, _0x210db4[4]);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _0x393476;
}
function create_garlic(_0x381f24, _0xa2a49e, _0x1879da) {
  var _0x493e8b = document.createElement("canvas");
  var _0x354061 = _0x493e8b.getContext("2d");
  _0x493e8b.width = 264 * _0x381f24;
  _0x493e8b.height = 246 * _0x381f24;
  _0x354061.translate(0, 10 * _0x381f24);
  _0x354061.globalAlpha = _0xa2a49e ? 0.5 : 1;
  _0x354061.beginPath();
  _0x354061.lineCap = "round";
  _0x354061.lineJoin = "round";
  _0x354061.moveTo(75 * _0x381f24, 54 * _0x381f24);
  _0x354061.bezierCurveTo(
    79 * _0x381f24,
    21 * _0x381f24,
    131 * _0x381f24,
    13 * _0x381f24,
    153 * _0x381f24,
    36 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    204 * _0x381f24,
    27 * _0x381f24,
    221 * _0x381f24,
    52 * _0x381f24,
    216 * _0x381f24,
    83 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    241 * _0x381f24,
    103 * _0x381f24,
    232 * _0x381f24,
    138 * _0x381f24,
    214 * _0x381f24,
    147 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    223 * _0x381f24,
    184 * _0x381f24,
    201 * _0x381f24,
    200 * _0x381f24,
    175 * _0x381f24,
    199 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    156 * _0x381f24,
    218 * _0x381f24,
    135 * _0x381f24,
    222 * _0x381f24,
    114 * _0x381f24,
    203 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    62 * _0x381f24,
    213 * _0x381f24,
    66 * _0x381f24,
    189 * _0x381f24,
    59 * _0x381f24,
    170 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    27 * _0x381f24,
    164 * _0x381f24,
    31 * _0x381f24,
    134 * _0x381f24,
    38 * _0x381f24,
    123 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    11 * _0x381f24,
    80 * _0x381f24,
    51 * _0x381f24,
    52 * _0x381f24,
    75 * _0x381f24,
    54 * _0x381f24
  );
  _0x354061.closePath();
  fill_path(_0x354061, _0x1879da[0]);
  _0x354061.translate(0, -10 * _0x381f24);
  _0x354061.globalAlpha = 1;
  _0x354061.beginPath();
  _0x354061.lineCap = "round";
  _0x354061.lineJoin = "round";
  _0x354061.moveTo(75 * _0x381f24, 54 * _0x381f24);
  _0x354061.bezierCurveTo(
    79 * _0x381f24,
    21 * _0x381f24,
    131 * _0x381f24,
    13 * _0x381f24,
    153 * _0x381f24,
    36 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    204 * _0x381f24,
    27 * _0x381f24,
    221 * _0x381f24,
    52 * _0x381f24,
    216 * _0x381f24,
    83 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    241 * _0x381f24,
    103 * _0x381f24,
    232 * _0x381f24,
    138 * _0x381f24,
    214 * _0x381f24,
    147 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    223 * _0x381f24,
    184 * _0x381f24,
    201 * _0x381f24,
    200 * _0x381f24,
    175 * _0x381f24,
    199 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    156 * _0x381f24,
    218 * _0x381f24,
    135 * _0x381f24,
    222 * _0x381f24,
    114 * _0x381f24,
    203 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    62 * _0x381f24,
    213 * _0x381f24,
    66 * _0x381f24,
    189 * _0x381f24,
    59 * _0x381f24,
    170 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    27 * _0x381f24,
    164 * _0x381f24,
    31 * _0x381f24,
    134 * _0x381f24,
    38 * _0x381f24,
    123 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    11 * _0x381f24,
    80 * _0x381f24,
    51 * _0x381f24,
    52 * _0x381f24,
    75 * _0x381f24,
    54 * _0x381f24
  );
  _0x354061.closePath();
  fill_path(_0x354061, _0x1879da[1], _0x1879da[2], 8 * _0x381f24);
  _0x354061.beginPath();
  _0x354061.lineCap = "round";
  _0x354061.lineJoin = "round";
  _0x354061.moveTo(121 * _0x381f24, 102 * _0x381f24);
  _0x354061.bezierCurveTo(
    111 * _0x381f24,
    80 * _0x381f24,
    110 * _0x381f24,
    66 * _0x381f24,
    108 * _0x381f24,
    51 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    119 * _0x381f24,
    65 * _0x381f24,
    129 * _0x381f24,
    85 * _0x381f24,
    135 * _0x381f24,
    99 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    142 * _0x381f24,
    67 * _0x381f24,
    146 * _0x381f24,
    60 * _0x381f24,
    152 * _0x381f24,
    50 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    154 * _0x381f24,
    71 * _0x381f24,
    152 * _0x381f24,
    85 * _0x381f24,
    149 * _0x381f24,
    104 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    166 * _0x381f24,
    88 * _0x381f24,
    175 * _0x381f24,
    83 * _0x381f24,
    188 * _0x381f24,
    78 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    179 * _0x381f24,
    91 * _0x381f24,
    170 * _0x381f24,
    103 * _0x381f24,
    160 * _0x381f24,
    112 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    186 * _0x381f24,
    107 * _0x381f24,
    191 * _0x381f24,
    107 * _0x381f24,
    204 * _0x381f24,
    108 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    195 * _0x381f24,
    114 * _0x381f24,
    179 * _0x381f24,
    120 * _0x381f24,
    163 * _0x381f24,
    123 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    183 * _0x381f24,
    130 * _0x381f24,
    186 * _0x381f24,
    135 * _0x381f24,
    192 * _0x381f24,
    140 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    179 * _0x381f24,
    141 * _0x381f24,
    164 * _0x381f24,
    139 * _0x381f24,
    153 * _0x381f24,
    135 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    158 * _0x381f24,
    145 * _0x381f24,
    163 * _0x381f24,
    159 * _0x381f24,
    165 * _0x381f24,
    177 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    154 * _0x381f24,
    166 * _0x381f24,
    145 * _0x381f24,
    153 * _0x381f24,
    138 * _0x381f24,
    139 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    133 * _0x381f24,
    155 * _0x381f24,
    125 * _0x381f24,
    170 * _0x381f24,
    117 * _0x381f24,
    182 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    116 * _0x381f24,
    160 * _0x381f24,
    119 * _0x381f24,
    151 * _0x381f24,
    124 * _0x381f24,
    138 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    107 * _0x381f24,
    150 * _0x381f24,
    95 * _0x381f24,
    156 * _0x381f24,
    82 * _0x381f24,
    159 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    94 * _0x381f24,
    140 * _0x381f24,
    101 * _0x381f24,
    136 * _0x381f24,
    113 * _0x381f24,
    128 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    78 * _0x381f24,
    123 * _0x381f24,
    75 * _0x381f24,
    121 * _0x381f24,
    67 * _0x381f24,
    118 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    85 * _0x381f24,
    112 * _0x381f24,
    94 * _0x381f24,
    112 * _0x381f24,
    111 * _0x381f24,
    113 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    89 * _0x381f24,
    97 * _0x381f24,
    85 * _0x381f24,
    93 * _0x381f24,
    78 * _0x381f24,
    82 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    92 * _0x381f24,
    85 * _0x381f24,
    101 * _0x381f24,
    90 * _0x381f24,
    121 * _0x381f24,
    102 * _0x381f24
  );
  _0x354061.closePath();
  fill_path(_0x354061, _0x1879da[2]);
  _0x354061.beginPath();
  _0x354061.lineCap = "round";
  _0x354061.lineJoin = "round";
  _0x354061.moveTo(128 * _0x381f24, 103 * _0x381f24);
  _0x354061.bezierCurveTo(
    111 * _0x381f24,
    112 * _0x381f24,
    117 * _0x381f24,
    136 * _0x381f24,
    140 * _0x381f24,
    130 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    151 * _0x381f24,
    126 * _0x381f24,
    156 * _0x381f24,
    115 * _0x381f24,
    155 * _0x381f24,
    107 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    155 * _0x381f24,
    96 * _0x381f24,
    154 * _0x381f24,
    94 * _0x381f24,
    148 * _0x381f24,
    94 * _0x381f24
  );
  _0x354061.bezierCurveTo(
    141 * _0x381f24,
    94 * _0x381f24,
    146 * _0x381f24,
    104 * _0x381f24,
    136 * _0x381f24,
    104 * _0x381f24
  );
  _0x354061.closePath();
  fill_path(_0x354061, _0x1879da[3], _0x1879da[4], 4 * _0x381f24);
  return _0x493e8b;
}
function create_garland_inv(_0x510e42, _0x42bf00, _0xb0d7d3) {
  var _0x20a139 = document.createElement("canvas");
  var _0x44a71f = _0x20a139.getContext("2d");
  _0x20a139.width = 70 * _0x510e42;
  _0x20a139.height = 70 * _0x510e42;
  _0x44a71f.globalAlpha = 0.5;
  circle(_0x44a71f, 26 * _0x510e42, 26 * _0x510e42, 9 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[0]);
  circle(_0x44a71f, 56 * _0x510e42, 36 * _0x510e42, 9 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[1]);
  circle(_0x44a71f, 40 * _0x510e42, 50 * _0x510e42, 9 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[2]);
  _0x44a71f.globalAlpha = 1;
  circle(_0x44a71f, 26 * _0x510e42, 26 * _0x510e42, 5 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[0]);
  circle(_0x44a71f, 56 * _0x510e42, 36 * _0x510e42, 5 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[1]);
  circle(_0x44a71f, 40 * _0x510e42, 50 * _0x510e42, 5 * _0x510e42);
  fill_path(_0x44a71f, _0xb0d7d3[2]);
  return _0x20a139;
}
function create_garland(_0x13af2c, _0x592496, _0x23d469) {
  var _0x5f41e3 = document.createElement("canvas");
  var _0x210759 = _0x5f41e3.getContext("2d");
  _0x5f41e3.width = 22 * _0x13af2c;
  _0x5f41e3.height = 22 * _0x13af2c;
  _0x210759.globalAlpha = 0.4;
  circle(_0x210759, 11 * _0x13af2c, 11 * _0x13af2c, 10 * _0x13af2c);
  fill_path(_0x210759, _0x23d469[0]);
  _0x210759.globalAlpha = 0.7;
  circle(_0x210759, 11 * _0x13af2c, 11 * _0x13af2c, 7 * _0x13af2c);
  fill_path(_0x210759, _0x23d469[0]);
  _0x210759.globalAlpha = 1;
  circle(_0x210759, 11 * _0x13af2c, 11 * _0x13af2c, 4 * _0x13af2c);
  fill_path(_0x210759, _0x23d469[0]);
  return _0x5f41e3;
}
function create_garland_light(_0x765161, _0x35bfa5, _0xff4b58) {
  var _0x4b4f3d = document.createElement("canvas");
  var _0xbaee62 = _0x4b4f3d.getContext("2d");
  _0x4b4f3d.width = 20 * _0x765161;
  _0x4b4f3d.height = 20 * _0x765161;
  _0xbaee62.globalAlpha = 0.5;
  circle(_0xbaee62, 10 * _0x765161, 10 * _0x765161, 9 * _0x765161);
  fill_path(_0xbaee62, _0xff4b58[0]);
  return _0x4b4f3d;
}
function create_roof(_0x3967d9, _0x3f1dbf, _0x38f2c3) {
  var _0x50400d = document.createElement("canvas");
  var _0x382382 = _0x50400d.getContext("2d");
  _0x50400d.width = 248 * _0x3967d9;
  _0x50400d.height = 247 * _0x3967d9;
  _0x382382.save();
  _0x382382.translate(69.5 * _0x3967d9, 145 * _0x3967d9);
  round_rect(
    _0x382382,
    -8.5 * _0x3967d9,
    -63 * _0x3967d9,
    17 * _0x3967d9,
    127 * _0x3967d9,
    1 * _0x3967d9
  );
  _0x382382.restore();
  fill_path(_0x382382, _0x38f2c3[0]);
  _0x382382.save();
  _0x382382.translate(183 * _0x3967d9, 145 * _0x3967d9);
  round_rect(
    _0x382382,
    -8 * _0x3967d9,
    -63 * _0x3967d9,
    16 * _0x3967d9,
    126 * _0x3967d9,
    1 * _0x3967d9
  );
  _0x382382.restore();
  fill_path(_0x382382, _0x38f2c3[0]);
  _0x382382.save();
  _0x382382.translate(123.5 * _0x3967d9, 62.5 * _0x3967d9);
  _0x382382.rotate(6.28);
  round_rect(
    _0x382382,
    -84.5 * _0x3967d9,
    -25.5 * _0x3967d9,
    169 * _0x3967d9,
    51 * _0x3967d9,
    5 * _0x3967d9
  );
  _0x382382.restore();
  fill_path(_0x382382, _0x38f2c3[2], _0x38f2c3[1], 6 * _0x3967d9);
  _0x382382.save();
  _0x382382.translate(123.5 * _0x3967d9, 118 * _0x3967d9);
  _0x382382.rotate(6.24);
  round_rect(
    _0x382382,
    -85.5 * _0x3967d9,
    -24 * _0x3967d9,
    169 * _0x3967d9,
    48 * _0x3967d9,
    5 * _0x3967d9
  );
  _0x382382.restore();
  fill_path(_0x382382, _0x38f2c3[3], _0x38f2c3[1], 6 * _0x3967d9);
  _0x382382.save();
  _0x382382.translate(122 * _0x3967d9, 177.5 * _0x3967d9);
  _0x382382.rotate(6.32);
  round_rect(
    _0x382382,
    -84 * _0x3967d9,
    -23.5 * _0x3967d9,
    169 * _0x3967d9,
    47 * _0x3967d9,
    5 * _0x3967d9
  );
  _0x382382.restore();
  fill_path(_0x382382, _0x38f2c3[2], _0x38f2c3[1], 6 * _0x3967d9);
  _0x382382.beginPath();
  _0x382382.lineCap = "round";
  _0x382382.lineJoin = "round";
  _0x382382.moveTo(37 * _0x3967d9, 157 * _0x3967d9);
  _0x382382.bezierCurveTo(
    49 * _0x3967d9,
    160 * _0x3967d9,
    49 * _0x3967d9,
    160 * _0x3967d9,
    61 * _0x3967d9,
    163 * _0x3967d9
  );
  _0x382382.bezierCurveTo(
    49.5 * _0x3967d9,
    165.5 * _0x3967d9,
    49.5 * _0x3967d9,
    165.5 * _0x3967d9,
    38 * _0x3967d9,
    168 * _0x3967d9
  );
  _0x382382.closePath();
  fill_path(_0x382382, _0x38f2c3[1]);
  _0x382382.beginPath();
  _0x382382.lineCap = "round";
  _0x382382.lineJoin = "round";
  _0x382382.moveTo(205 * _0x3967d9, 175 * _0x3967d9);
  _0x382382.bezierCurveTo(
    192.5 * _0x3967d9,
    180 * _0x3967d9,
    192.5 * _0x3967d9,
    180 * _0x3967d9,
    180 * _0x3967d9,
    185 * _0x3967d9
  );
  _0x382382.bezierCurveTo(
    193 * _0x3967d9,
    188 * _0x3967d9,
    193 * _0x3967d9,
    188 * _0x3967d9,
    206 * _0x3967d9,
    191 * _0x3967d9
  );
  _0x382382.closePath();
  fill_path(_0x382382, _0x38f2c3[1]);
  return _0x50400d;
}
function create_roof1(_0x4dcbf8, _0x51eebf, _0x25b948) {
  var _0x127594 = document.createElement("canvas");
  var _0x50caa1 = _0x127594.getContext("2d");
  _0x127594.width = 248 * _0x4dcbf8;
  _0x127594.height = 247 * _0x4dcbf8;
  _0x50caa1.save();
  _0x50caa1.translate(182 * _0x4dcbf8, 120 * _0x4dcbf8);
  round_rect(
    _0x50caa1,
    -8 * _0x4dcbf8,
    -67 * _0x4dcbf8,
    16 * _0x4dcbf8,
    134 * _0x4dcbf8,
    1 * _0x4dcbf8
  );
  _0x50caa1.restore();
  fill_path(_0x50caa1, _0x25b948[0]);
  _0x50caa1.save();
  _0x50caa1.translate(68.5 * _0x4dcbf8, 127.5 * _0x4dcbf8);
  round_rect(
    _0x50caa1,
    -8.5 * _0x4dcbf8,
    -70.5 * _0x4dcbf8,
    17 * _0x4dcbf8,
    141 * _0x4dcbf8,
    1 * _0x4dcbf8
  );
  _0x50caa1.restore();
  fill_path(_0x50caa1, _0x25b948[0]);
  _0x50caa1.save();
  _0x50caa1.translate(123.5 * _0x4dcbf8, 68 * _0x4dcbf8);
  round_rect(
    _0x50caa1,
    -82.5 * _0x4dcbf8,
    -24 * _0x4dcbf8,
    165 * _0x4dcbf8,
    48 * _0x4dcbf8,
    4 * _0x4dcbf8
  );
  _0x50caa1.restore();
  fill_path(_0x50caa1, _0x25b948[2], _0x25b948[1], 6 * _0x4dcbf8);
  _0x50caa1.save();
  _0x50caa1.translate(123 * _0x4dcbf8, 179.5 * _0x4dcbf8);
  round_rect(
    _0x50caa1,
    -83 * _0x4dcbf8,
    -24.5 * _0x4dcbf8,
    166 * _0x4dcbf8,
    49 * _0x4dcbf8,
    4 * _0x4dcbf8
  );
  _0x50caa1.restore();
  fill_path(_0x50caa1, _0x25b948[2], _0x25b948[1], 6 * _0x4dcbf8);
  _0x50caa1.save();
  _0x50caa1.translate(123.5 * _0x4dcbf8, 123.5 * _0x4dcbf8);
  _0x50caa1.rotate(6.24);
  round_rect(
    _0x50caa1,
    -82.5 * _0x4dcbf8,
    -24.5 * _0x4dcbf8,
    165 * _0x4dcbf8,
    49 * _0x4dcbf8,
    4 * _0x4dcbf8
  );
  _0x50caa1.restore();
  fill_path(_0x50caa1, _0x25b948[3], _0x25b948[1], 6 * _0x4dcbf8);
  _0x50caa1.beginPath();
  _0x50caa1.lineCap = "round";
  _0x50caa1.lineJoin = "round";
  _0x50caa1.moveTo(204 * _0x4dcbf8, 112 * _0x4dcbf8);
  _0x50caa1.bezierCurveTo(
    149 * _0x4dcbf8,
    121.5 * _0x4dcbf8,
    96 * _0x4dcbf8,
    130 * _0x4dcbf8,
    94 * _0x4dcbf8,
    131 * _0x4dcbf8
  );
  _0x50caa1.bezierCurveTo(
    149.5 * _0x4dcbf8,
    127.5 * _0x4dcbf8,
    149.5 * _0x4dcbf8,
    127.5 * _0x4dcbf8,
    205 * _0x4dcbf8,
    124 * _0x4dcbf8
  );
  _0x50caa1.closePath();
  fill_path(_0x50caa1, _0x25b948[1]);
  return _0x127594;
}
function create_roof2(_0xabb913, _0xc09c55, _0x475c95) {
  var _0x527347 = document.createElement("canvas");
  var _0x287147 = _0x527347.getContext("2d");
  _0x527347.width = 248 * _0xabb913;
  _0x527347.height = 247 * _0xabb913;
  _0x287147.save();
  _0x287147.translate(183 * _0xabb913, 107 * _0xabb913);
  round_rect(
    _0x287147,
    -8 * _0xabb913,
    -70.5 * _0xabb913,
    16 * _0xabb913,
    141 * _0xabb913,
    1 * _0xabb913
  );
  _0x287147.restore();
  fill_path(_0x287147, _0x475c95[0]);
  _0x287147.save();
  _0x287147.translate(69.5 * _0xabb913, 110 * _0xabb913);
  round_rect(
    _0x287147,
    -8.5 * _0xabb913,
    -71 * _0xabb913,
    17 * _0xabb913,
    143 * _0xabb913,
    1 * _0xabb913
  );
  _0x287147.restore();
  fill_path(_0x287147, _0x475c95[0]);
  _0x287147.save();
  _0x287147.translate(123.5 * _0xabb913, 181 * _0xabb913);
  round_rect(
    _0x287147,
    -84.5 * _0xabb913,
    -26 * _0xabb913,
    169 * _0xabb913,
    52 * _0xabb913,
    5 * _0xabb913
  );
  _0x287147.restore();
  fill_path(_0x287147, _0x475c95[2], _0x475c95[1], 6 * _0xabb913);
  _0x287147.beginPath();
  _0x287147.lineCap = "round";
  _0x287147.lineJoin = "round";
  _0x287147.moveTo(41 * _0xabb913, 95 * _0xabb913);
  _0x287147.bezierCurveTo(
    105 * _0xabb913,
    96 * _0xabb913,
    113 * _0xabb913,
    99 * _0xabb913,
    134 * _0xabb913,
    102 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    147 * _0xabb913,
    106 * _0xabb913,
    173 * _0xabb913,
    100 * _0xabb913,
    207 * _0xabb913,
    105 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    210 * _0xabb913,
    105 * _0xabb913,
    207 * _0xabb913,
    140 * _0xabb913,
    207 * _0xabb913,
    154 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    123.5 * _0xabb913,
    151.5 * _0xabb913,
    123.5 * _0xabb913,
    151.5 * _0xabb913,
    40 * _0xabb913,
    149 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    37 * _0xabb913,
    145 * _0xabb913,
    39 * _0xabb913,
    95 * _0xabb913,
    41 * _0xabb913,
    96 * _0xabb913
  );
  _0x287147.closePath();
  fill_path(_0x287147, _0x475c95[2], _0x475c95[1], 6 * _0xabb913);
  _0x287147.beginPath();
  _0x287147.lineCap = "round";
  _0x287147.lineJoin = "round";
  _0x287147.moveTo(68 * _0xabb913, 75 * _0xabb913);
  _0x287147.bezierCurveTo(
    54 * _0xabb913,
    72.5 * _0xabb913,
    54 * _0xabb913,
    72.5 * _0xabb913,
    40 * _0xabb913,
    70 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    38 * _0xabb913,
    46 * _0xabb913,
    40 * _0xabb913,
    46 * _0xabb913,
    53 * _0xabb913,
    46 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    201 * _0xabb913,
    41 * _0xabb913,
    201 * _0xabb913,
    41 * _0xabb913,
    201 * _0xabb913,
    42 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    211 * _0xabb913,
    40 * _0xabb913,
    208 * _0xabb913,
    53 * _0xabb913,
    208 * _0xabb913,
    72 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    209 * _0xabb913,
    91 * _0xabb913,
    210 * _0xabb913,
    96 * _0xabb913,
    194 * _0xabb913,
    94 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    119 * _0xabb913,
    97 * _0xabb913,
    119 * _0xabb913,
    97 * _0xabb913,
    44 * _0xabb913,
    100 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    39 * _0xabb913,
    99 * _0xabb913,
    40 * _0xabb913,
    96 * _0xabb913,
    40 * _0xabb913,
    80 * _0xabb913
  );
  _0x287147.bezierCurveTo(
    54 * _0xabb913,
    77.5 * _0xabb913,
    54 * _0xabb913,
    77.5 * _0xabb913,
    68 * _0xabb913,
    75 * _0xabb913
  );
  _0x287147.closePath();
  fill_path(_0x287147, _0x475c95[3], _0x475c95[1], 6 * _0xabb913);
  return _0x527347;
}
function create_zombie_head(_0x44f7c8, _0x3248bc, _0x53bc34) {
  var _0x38755f = document.createElement("canvas");
  var _0x16020f = _0x38755f.getContext("2d");
  _0x38755f.width = 191 * _0x44f7c8;
  _0x38755f.height = 153 * _0x44f7c8;
  _0x16020f.globalAlpha = 0.5;
  _0x16020f.translate(0, 10 * _0x44f7c8);
  _0x16020f.save();
  _0x16020f.translate(
    97.49996948242188 * _0x44f7c8,
    95.12844848632812 * _0x44f7c8
  );
  round_rect(
    _0x16020f,
    -62.5 * _0x44f7c8,
    -41.5 * _0x44f7c8,
    125 * _0x44f7c8,
    83 * _0x44f7c8,
    20 * _0x44f7c8
  );
  _0x16020f.restore();
  fill_path(_0x16020f, _0x53bc34[0], _0x53bc34[0], 4 * _0x44f7c8);
  _0x16020f.globalAlpha = 1;
  _0x16020f.translate(0, -10 * _0x44f7c8);
  _0x16020f.save();
  _0x16020f.translate(
    97.49996948242188 * _0x44f7c8,
    95.12844848632812 * _0x44f7c8
  );
  round_rect(
    _0x16020f,
    -62.5 * _0x44f7c8,
    -41.5 * _0x44f7c8,
    125 * _0x44f7c8,
    83 * _0x44f7c8,
    20 * _0x44f7c8
  );
  _0x16020f.restore();
  fill_path(_0x16020f, _0x53bc34[1], _0x53bc34[2], 4 * _0x44f7c8);
  _0x16020f.globalCompositeOperation = "destination-out";
  _0x16020f.beginPath();
  _0x16020f.lineCap = "round";
  _0x16020f.lineJoin = "round";
  _0x16020f.moveTo(
    26.999969482421875 * _0x44f7c8,
    50.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    46.499969482421875 * _0x44f7c8,
    64.85067749023438 * _0x44f7c8,
    46.499969482421875 * _0x44f7c8,
    64.85067749023438 * _0x44f7c8,
    65.99996948242188 * _0x44f7c8,
    78.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    80.99996948242188 * _0x44f7c8,
    87.85067749023438 * _0x44f7c8,
    105.99996948242188 * _0x44f7c8,
    82.85067749023438 * _0x44f7c8,
    114.99996948242188 * _0x44f7c8,
    80.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    130.99996948242188 * _0x44f7c8,
    69.85067749023438 * _0x44f7c8,
    152.99996948242188 * _0x44f7c8,
    70.85067749023438 * _0x44f7c8,
    166.99996948242188 * _0x44f7c8,
    67.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    156.99996948242188 * _0x44f7c8,
    52.850677490234375 * _0x44f7c8,
    156.99996948242188 * _0x44f7c8,
    52.850677490234375 * _0x44f7c8,
    146.99996948242188 * _0x44f7c8,
    37.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    101.49996948242188 * _0x44f7c8,
    37.350677490234375 * _0x44f7c8,
    101.49996948242188 * _0x44f7c8,
    37.350677490234375 * _0x44f7c8,
    55.999969482421875 * _0x44f7c8,
    36.850677490234375 * _0x44f7c8
  );
  _0x16020f.closePath();
  fill_path(_0x16020f, _0x53bc34[2], _0x53bc34[3], 4 * _0x44f7c8);
  _0x16020f.globalCompositeOperation = "source-over";
  _0x16020f.beginPath();
  _0x16020f.lineCap = "round";
  _0x16020f.lineJoin = "round";
  _0x16020f.moveTo(
    40.999969482421875 * _0x44f7c8,
    59.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    41.999969482421875 * _0x44f7c8,
    50.850677490234375 * _0x44f7c8,
    47.999969482421875 * _0x44f7c8,
    47.850677490234375 * _0x44f7c8,
    56.999969482421875 * _0x44f7c8,
    49.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    65.99996948242188 * _0x44f7c8,
    41.850677490234375 * _0x44f7c8,
    76.99996948242188 * _0x44f7c8,
    42.850677490234375 * _0x44f7c8,
    90.99996948242188 * _0x44f7c8,
    47.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    94.99996948242188 * _0x44f7c8,
    42.850677490234375 * _0x44f7c8,
    104.99996948242188 * _0x44f7c8,
    42.850677490234375 * _0x44f7c8,
    114.99996948242188 * _0x44f7c8,
    47.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    131.99996948242188 * _0x44f7c8,
    42.850677490234375 * _0x44f7c8,
    142.99996948242188 * _0x44f7c8,
    48.850677490234375 * _0x44f7c8,
    145.99996948242188 * _0x44f7c8,
    56.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    160.99996948242188 * _0x44f7c8,
    63.850677490234375 * _0x44f7c8,
    154.99996948242188 * _0x44f7c8,
    69.85067749023438 * _0x44f7c8,
    155.99996948242188 * _0x44f7c8,
    70.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    141.99996948242188 * _0x44f7c8,
    71.85067749023438 * _0x44f7c8,
    141.99996948242188 * _0x44f7c8,
    71.85067749023438 * _0x44f7c8,
    127.99996948242188 * _0x44f7c8,
    72.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    110.99996948242188 * _0x44f7c8,
    83.85067749023438 * _0x44f7c8,
    107.99996948242188 * _0x44f7c8,
    82.85067749023438 * _0x44f7c8,
    90.99996948242188 * _0x44f7c8,
    85.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    70.99996948242188 * _0x44f7c8,
    83.85067749023438 * _0x44f7c8,
    64.99996948242188 * _0x44f7c8,
    79.85067749023438 * _0x44f7c8,
    53.999969482421875 * _0x44f7c8,
    70.85067749023438 * _0x44f7c8
  );
  _0x16020f.closePath();
  fill_path(_0x16020f, _0x53bc34[3], _0x53bc34[4], 4 * _0x44f7c8);
  _0x16020f.beginPath();
  _0x16020f.lineCap = "round";
  _0x16020f.lineJoin = "round";
  _0x16020f.moveTo(
    33.999969482421875 * _0x44f7c8,
    65.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    36.999969482421875 * _0x44f7c8,
    59.850677490234375 * _0x44f7c8,
    34.999969482421875 * _0x44f7c8,
    60.850677490234375 * _0x44f7c8,
    39.999969482421875 * _0x44f7c8,
    59.850677490234375 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    47.999969482421875 * _0x44f7c8,
    61.850677490234375 * _0x44f7c8,
    62.999969482421875 * _0x44f7c8,
    76.85067749023438 * _0x44f7c8,
    74.99996948242188 * _0x44f7c8,
    79.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    93.99996948242188 * _0x44f7c8,
    85.85067749023438 * _0x44f7c8,
    111.99996948242188 * _0x44f7c8,
    83.85067749023438 * _0x44f7c8,
    124.99996948242188 * _0x44f7c8,
    70.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    129.99996948242188 * _0x44f7c8,
    67.85067749023438 * _0x44f7c8,
    145.99996948242188 * _0x44f7c8,
    65.85067749023438 * _0x44f7c8,
    159.99996948242188 * _0x44f7c8,
    67.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    159.99996948242188 * _0x44f7c8,
    71.85067749023438 * _0x44f7c8,
    159.99996948242188 * _0x44f7c8,
    71.85067749023438 * _0x44f7c8,
    159.99996948242188 * _0x44f7c8,
    75.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    146.99996948242188 * _0x44f7c8,
    72.85067749023438 * _0x44f7c8,
    144.99996948242188 * _0x44f7c8,
    75.85067749023438 * _0x44f7c8,
    143.99996948242188 * _0x44f7c8,
    82.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    144.99996948242188 * _0x44f7c8,
    86.85067749023438 * _0x44f7c8,
    140.99996948242188 * _0x44f7c8,
    90.85067749023438 * _0x44f7c8,
    137.99996948242188 * _0x44f7c8,
    86.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    139.99996948242188 * _0x44f7c8,
    72.85067749023438 * _0x44f7c8,
    135.99996948242188 * _0x44f7c8,
    72.85067749023438 * _0x44f7c8,
    133.99996948242188 * _0x44f7c8,
    82.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    127.99996948242188 * _0x44f7c8,
    88.85067749023438 * _0x44f7c8,
    124.99996948242188 * _0x44f7c8,
    70.85067749023438 * _0x44f7c8,
    116.99996948242188 * _0x44f7c8,
    86.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    110.99996948242188 * _0x44f7c8,
    91.85067749023438 * _0x44f7c8,
    96.99996948242188 * _0x44f7c8,
    81.85067749023438 * _0x44f7c8,
    89.99996948242188 * _0x44f7c8,
    90.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    85.99996948242188 * _0x44f7c8,
    92.85067749023438 * _0x44f7c8,
    81.99996948242188 * _0x44f7c8,
    95.85067749023438 * _0x44f7c8,
    76.99996948242188 * _0x44f7c8,
    86.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    67.99996948242188 * _0x44f7c8,
    93.85067749023438 * _0x44f7c8,
    67.99996948242188 * _0x44f7c8,
    91.85067749023438 * _0x44f7c8,
    60.999969482421875 * _0x44f7c8,
    79.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    53.999969482421875 * _0x44f7c8,
    71.85067749023438 * _0x44f7c8,
    52.999969482421875 * _0x44f7c8,
    72.85067749023438 * _0x44f7c8,
    46.999969482421875 * _0x44f7c8,
    77.85067749023438 * _0x44f7c8
  );
  _0x16020f.bezierCurveTo(
    41.999969482421875 * _0x44f7c8,
    78.85067749023438 * _0x44f7c8,
    42.999969482421875 * _0x44f7c8,
    69.85067749023438 * _0x44f7c8,
    33.999969482421875 * _0x44f7c8,
    65.85067749023438 * _0x44f7c8
  );
  _0x16020f.closePath();
  fill_path(_0x16020f, _0x53bc34[5], _0x53bc34[6], 4 * _0x44f7c8);
  circle(
    _0x16020f,
    68 * _0x44f7c8,
    111.29513549804688 * _0x44f7c8,
    15 * _0x44f7c8
  );
  fill_path(_0x16020f, _0x53bc34[7], _0x53bc34[8], 4 * _0x44f7c8);
  circle(
    _0x16020f,
    123 * _0x44f7c8,
    111.29510498046875 * _0x44f7c8,
    15 * _0x44f7c8
  );
  fill_path(_0x16020f, _0x53bc34[7], _0x53bc34[8], 4 * _0x44f7c8);
  circle(_0x16020f, 63 * _0x44f7c8, 106 * _0x44f7c8, 5 * _0x44f7c8);
  fill_path(_0x16020f, _0x53bc34[9]);
  circle(_0x16020f, 118 * _0x44f7c8, 106 * _0x44f7c8, 5 * _0x44f7c8);
  fill_path(_0x16020f, _0x53bc34[9]);
  return _0x38755f;
}
function create_zombie_boss(_0x3c3a39, _0x4b0605, _0x1d8cb5) {
  var _0x155cc5 = document.createElement("canvas");
  var _0x49ae63 = _0x155cc5.getContext("2d");
  _0x155cc5.width = 191 * _0x3c3a39;
  _0x155cc5.height = 153 * _0x3c3a39;
  _0x49ae63.globalAlpha = 0.5;
  _0x49ae63.translate(0, 10 * _0x3c3a39);
  _0x49ae63.save();
  _0x49ae63.translate(
    96.49996948242188 * _0x3c3a39,
    66.79510498046875 * _0x3c3a39
  );
  _0x49ae63.rotate(0);
  round_rect(
    _0x49ae63,
    -79.5 * _0x3c3a39,
    -48.5 * _0x3c3a39,
    159 * _0x3c3a39,
    97 * _0x3c3a39,
    22 * _0x3c3a39
  );
  _0x49ae63.restore();
  fill_path(_0x49ae63, _0x1d8cb5[0], _0x1d8cb5[0], 4 * _0x3c3a39);
  _0x49ae63.globalAlpha = 1;
  _0x49ae63.translate(0, -10 * _0x3c3a39);
  _0x49ae63.save();
  _0x49ae63.translate(
    96.49996948242188 * _0x3c3a39,
    66.79510498046875 * _0x3c3a39
  );
  _0x49ae63.rotate(0);
  round_rect(
    _0x49ae63,
    -79.5 * _0x3c3a39,
    -48.5 * _0x3c3a39,
    159 * _0x3c3a39,
    97 * _0x3c3a39,
    22 * _0x3c3a39
  );
  _0x49ae63.restore();
  fill_path(_0x49ae63, _0x1d8cb5[1], _0x1d8cb5[2], 4 * _0x3c3a39);
  _0x49ae63.translate(2 * _0x3c3a39, 0);
  _0x49ae63.beginPath();
  _0x49ae63.lineCap = "round";
  _0x49ae63.lineJoin = "round";
  _0x49ae63.moveTo(119 * _0x3c3a39, 28 * _0x3c3a39);
  _0x49ae63.bezierCurveTo(
    119 * _0x3c3a39,
    22 * _0x3c3a39,
    119 * _0x3c3a39,
    20 * _0x3c3a39,
    122 * _0x3c3a39,
    16 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    149 * _0x3c3a39,
    39 * _0x3c3a39,
    149 * _0x3c3a39,
    39 * _0x3c3a39,
    176 * _0x3c3a39,
    63 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    176 * _0x3c3a39,
    75 * _0x3c3a39,
    176 * _0x3c3a39,
    75 * _0x3c3a39,
    175 * _0x3c3a39,
    88 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    174 * _0x3c3a39,
    90 * _0x3c3a39,
    174 * _0x3c3a39,
    90 * _0x3c3a39,
    172 * _0x3c3a39,
    93 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    171 * _0x3c3a39,
    101 * _0x3c3a39,
    169 * _0x3c3a39,
    109 * _0x3c3a39,
    164 * _0x3c3a39,
    113 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    163 * _0x3c3a39,
    104 * _0x3c3a39,
    163 * _0x3c3a39,
    104 * _0x3c3a39,
    162 * _0x3c3a39,
    95 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    155 * _0x3c3a39,
    105 * _0x3c3a39,
    155 * _0x3c3a39,
    105 * _0x3c3a39,
    147 * _0x3c3a39,
    116 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    87 * _0x3c3a39,
    114 * _0x3c3a39,
    87 * _0x3c3a39,
    114 * _0x3c3a39,
    26 * _0x3c3a39,
    112 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    27 * _0x3c3a39,
    106 * _0x3c3a39,
    27 * _0x3c3a39,
    106 * _0x3c3a39,
    27 * _0x3c3a39,
    101 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    24 * _0x3c3a39,
    104 * _0x3c3a39,
    24 * _0x3c3a39,
    104 * _0x3c3a39,
    20 * _0x3c3a39,
    108 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    17 * _0x3c3a39,
    103 * _0x3c3a39,
    20 * _0x3c3a39,
    86 * _0x3c3a39,
    23 * _0x3c3a39,
    72 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    15 * _0x3c3a39,
    74 * _0x3c3a39,
    14 * _0x3c3a39,
    78 * _0x3c3a39,
    12 * _0x3c3a39,
    83 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    12 * _0x3c3a39,
    65 * _0x3c3a39,
    12 * _0x3c3a39,
    54 * _0x3c3a39,
    16 * _0x3c3a39,
    42 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    14 * _0x3c3a39,
    39 * _0x3c3a39,
    14 * _0x3c3a39,
    39 * _0x3c3a39,
    12 * _0x3c3a39,
    36 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    16 * _0x3c3a39,
    33 * _0x3c3a39,
    16 * _0x3c3a39,
    33 * _0x3c3a39,
    19 * _0x3c3a39,
    30 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    18 * _0x3c3a39,
    27 * _0x3c3a39,
    18 * _0x3c3a39,
    27 * _0x3c3a39,
    17 * _0x3c3a39,
    25 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    24 * _0x3c3a39,
    24 * _0x3c3a39,
    31 * _0x3c3a39,
    21 * _0x3c3a39,
    29 * _0x3c3a39,
    19 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    37 * _0x3c3a39,
    25 * _0x3c3a39,
    37 * _0x3c3a39,
    25 * _0x3c3a39,
    45 * _0x3c3a39,
    31 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    40 * _0x3c3a39,
    23 * _0x3c3a39,
    40 * _0x3c3a39,
    21 * _0x3c3a39,
    42 * _0x3c3a39,
    16 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    74 * _0x3c3a39,
    16 * _0x3c3a39,
    74 * _0x3c3a39,
    16 * _0x3c3a39,
    106 * _0x3c3a39,
    16 * _0x3c3a39
  );
  _0x49ae63.bezierCurveTo(
    113 * _0x3c3a39,
    21 * _0x3c3a39,
    113 * _0x3c3a39,
    21 * _0x3c3a39,
    119 * _0x3c3a39,
    26 * _0x3c3a39
  );
  _0x49ae63.closePath();
  fill_path(_0x49ae63, _0x1d8cb5[3], _0x1d8cb5[4], 4 * _0x3c3a39);
  return _0x155cc5;
}
function create_zombie_hurt(_0x5a5865, _0x27f9c8) {
  var _0x403066 = document.createElement("canvas");
  var _0x152e85 = _0x403066.getContext("2d");
  _0x403066.width = 191 * _0x5a5865;
  _0x403066.height = 153 * _0x5a5865;
  _0x152e85.save();
  _0x152e85.translate(
    96.49996948242188 * _0x5a5865,
    66.79510498046875 * _0x5a5865
  );
  round_rect(
    _0x152e85,
    -79.5 * _0x5a5865,
    -48.5 * _0x5a5865,
    159 * _0x5a5865,
    97 * _0x5a5865,
    22 * _0x5a5865
  );
  _0x152e85.restore();
  fill_path(_0x152e85, _0x27f9c8[0], _0x27f9c8[0], 4 * _0x5a5865);
  _0x152e85.translate(2 * _0x5a5865, 0);
  _0x152e85.beginPath();
  _0x152e85.lineCap = "round";
  _0x152e85.lineJoin = "round";
  _0x152e85.moveTo(119 * _0x5a5865, 28 * _0x5a5865);
  _0x152e85.bezierCurveTo(
    119 * _0x5a5865,
    22 * _0x5a5865,
    119 * _0x5a5865,
    20 * _0x5a5865,
    122 * _0x5a5865,
    16 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    149 * _0x5a5865,
    39 * _0x5a5865,
    149 * _0x5a5865,
    39 * _0x5a5865,
    176 * _0x5a5865,
    63 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    176 * _0x5a5865,
    75 * _0x5a5865,
    176 * _0x5a5865,
    75 * _0x5a5865,
    175 * _0x5a5865,
    88 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    174 * _0x5a5865,
    90 * _0x5a5865,
    174 * _0x5a5865,
    90 * _0x5a5865,
    172 * _0x5a5865,
    93 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    171 * _0x5a5865,
    101 * _0x5a5865,
    169 * _0x5a5865,
    109 * _0x5a5865,
    164 * _0x5a5865,
    113 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    163 * _0x5a5865,
    104 * _0x5a5865,
    163 * _0x5a5865,
    104 * _0x5a5865,
    162 * _0x5a5865,
    95 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    155 * _0x5a5865,
    105 * _0x5a5865,
    155 * _0x5a5865,
    105 * _0x5a5865,
    147 * _0x5a5865,
    116 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    87 * _0x5a5865,
    114 * _0x5a5865,
    87 * _0x5a5865,
    114 * _0x5a5865,
    26 * _0x5a5865,
    112 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    27 * _0x5a5865,
    106 * _0x5a5865,
    27 * _0x5a5865,
    106 * _0x5a5865,
    27 * _0x5a5865,
    101 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    24 * _0x5a5865,
    104 * _0x5a5865,
    24 * _0x5a5865,
    104 * _0x5a5865,
    20 * _0x5a5865,
    108 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    17 * _0x5a5865,
    103 * _0x5a5865,
    20 * _0x5a5865,
    86 * _0x5a5865,
    23 * _0x5a5865,
    72 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    15 * _0x5a5865,
    74 * _0x5a5865,
    14 * _0x5a5865,
    78 * _0x5a5865,
    12 * _0x5a5865,
    83 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    12 * _0x5a5865,
    65 * _0x5a5865,
    12 * _0x5a5865,
    54 * _0x5a5865,
    16 * _0x5a5865,
    42 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    14 * _0x5a5865,
    39 * _0x5a5865,
    14 * _0x5a5865,
    39 * _0x5a5865,
    12 * _0x5a5865,
    36 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    16 * _0x5a5865,
    33 * _0x5a5865,
    16 * _0x5a5865,
    33 * _0x5a5865,
    19 * _0x5a5865,
    30 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    18 * _0x5a5865,
    27 * _0x5a5865,
    18 * _0x5a5865,
    27 * _0x5a5865,
    17 * _0x5a5865,
    25 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    24 * _0x5a5865,
    24 * _0x5a5865,
    31 * _0x5a5865,
    21 * _0x5a5865,
    29 * _0x5a5865,
    19 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    37 * _0x5a5865,
    25 * _0x5a5865,
    37 * _0x5a5865,
    25 * _0x5a5865,
    45 * _0x5a5865,
    31 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    40 * _0x5a5865,
    23 * _0x5a5865,
    40 * _0x5a5865,
    21 * _0x5a5865,
    42 * _0x5a5865,
    16 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    74 * _0x5a5865,
    16 * _0x5a5865,
    74 * _0x5a5865,
    16 * _0x5a5865,
    106 * _0x5a5865,
    16 * _0x5a5865
  );
  _0x152e85.bezierCurveTo(
    113 * _0x5a5865,
    21 * _0x5a5865,
    113 * _0x5a5865,
    21 * _0x5a5865,
    119 * _0x5a5865,
    26 * _0x5a5865
  );
  _0x152e85.closePath();
  fill_path(_0x152e85, _0x27f9c8[0], _0x27f9c8[0], 4 * _0x5a5865);
  _0x152e85.save();
  _0x152e85.translate(
    97.49996948242188 * _0x5a5865,
    95.12844848632812 * _0x5a5865
  );
  round_rect(
    _0x152e85,
    -62.5 * _0x5a5865,
    -41.5 * _0x5a5865,
    125 * _0x5a5865,
    83 * _0x5a5865,
    20 * _0x5a5865
  );
  _0x152e85.restore();
  fill_path(_0x152e85, _0x27f9c8[0], _0x27f9c8[0], 4 * _0x5a5865);
  return _0x403066;
}
function create_plant_seed(_0x1e7dc8, _0x56a7c9, _0x14ef55) {
  var _0x756ed4 = document.createElement("canvas");
  var _0x30855a = _0x756ed4.getContext("2d");
  var _0xea268d = _0x1e7dc8 * 40;
  var _0x3c3b22 = _0x1e7dc8 * 40;
  _0x756ed4.width = _0xea268d;
  _0x756ed4.height = _0x3c3b22;
  var _0xf6d668 = (_0x1e7dc8 * _0xea268d) / 2;
  var _0x4d62bb = (_0x1e7dc8 * _0x3c3b22) / 2;
  var _0x4710db = _0x1e7dc8 * 15;
  _0x30855a.save();
  _0x30855a.translate(_0xf6d668, _0x4d62bb);
  _0x30855a.globalAlpha = 1;
  circle(_0x30855a, 0, 0, _0x4710db);
  fill_path(_0x30855a, _0x14ef55[0]);
  var _0x4710db = 5 * _0x1e7dc8;
  var _0xf6d668 = 2 * _0x1e7dc8;
  var _0x4d62bb = 1 * _0x1e7dc8;
  _0x30855a.translate(_0xf6d668, _0x4d62bb);
  _0x30855a.globalAlpha = 1;
  circle(_0x30855a, 0, 0, _0x4710db);
  fill_path(_0x30855a, _0x14ef55[1]);
  _0x30855a.restore();
  return _0x756ed4;
}
function create_fish1(_0x477a8c, _0x14c958, _0x3b9f4e, _0x4800e0) {
  var _0x4c7305 = document.createElement("canvas");
  var _0x13e080 = _0x4c7305.getContext("2d");
  _0x4c7305.width = 185 * _0x477a8c;
  _0x4c7305.height = 240 * _0x477a8c;
  _0x13e080.globalAlpha = 0.5;
  _0x13e080.translate(0, 10 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(44 * _0x477a8c, 137 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    60 * _0x477a8c,
    87 * _0x477a8c,
    68 * _0x477a8c,
    66 * _0x477a8c,
    92 * _0x477a8c,
    67 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    115 * _0x477a8c,
    64 * _0x477a8c,
    129 * _0x477a8c,
    97 * _0x477a8c,
    137 * _0x477a8c,
    136 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[0]);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(53 * _0x477a8c, 181 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    30 * _0x477a8c,
    164 * _0x477a8c,
    19 * _0x477a8c,
    150 * _0x477a8c,
    11 * _0x477a8c,
    136 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    28 * _0x477a8c,
    121 * _0x477a8c,
    38 * _0x477a8c,
    132 * _0x477a8c,
    48 * _0x477a8c,
    150 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[0]);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(63 * _0x477a8c, 208 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    75 * _0x477a8c,
    224 * _0x477a8c,
    86 * _0x477a8c,
    228 * _0x477a8c,
    93 * _0x477a8c,
    228 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    104 * _0x477a8c,
    229 * _0x477a8c,
    116 * _0x477a8c,
    219 * _0x477a8c,
    122 * _0x477a8c,
    205 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[0]);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(130 * _0x477a8c, 170 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    146 * _0x477a8c,
    125 * _0x477a8c,
    156 * _0x477a8c,
    126 * _0x477a8c,
    173 * _0x477a8c,
    137 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    167 * _0x477a8c,
    151 * _0x477a8c,
    143 * _0x477a8c,
    174 * _0x477a8c,
    131 * _0x477a8c,
    183 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[0]);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(39 * _0x477a8c, 140 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    75 * _0x477a8c,
    126 * _0x477a8c,
    113 * _0x477a8c,
    127 * _0x477a8c,
    143 * _0x477a8c,
    137 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    141 * _0x477a8c,
    186 * _0x477a8c,
    130 * _0x477a8c,
    202 * _0x477a8c,
    113 * _0x477a8c,
    214 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    85 * _0x477a8c,
    228 * _0x477a8c,
    56 * _0x477a8c,
    219 * _0x477a8c,
    48 * _0x477a8c,
    173 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    40 * _0x477a8c,
    148 * _0x477a8c,
    43 * _0x477a8c,
    145 * _0x477a8c,
    39 * _0x477a8c,
    140 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[0]);
  _0x13e080.globalAlpha = 1;
  _0x13e080.translate(0, -10 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(44 * _0x477a8c, 137 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    60 * _0x477a8c,
    87 * _0x477a8c,
    68 * _0x477a8c,
    66 * _0x477a8c,
    92 * _0x477a8c,
    67 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    115 * _0x477a8c,
    64 * _0x477a8c,
    129 * _0x477a8c,
    97 * _0x477a8c,
    137 * _0x477a8c,
    136 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(53 * _0x477a8c, 181 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    30 * _0x477a8c,
    164 * _0x477a8c,
    19 * _0x477a8c,
    150 * _0x477a8c,
    11 * _0x477a8c,
    136 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    28 * _0x477a8c,
    121 * _0x477a8c,
    38 * _0x477a8c,
    132 * _0x477a8c,
    48 * _0x477a8c,
    150 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(63 * _0x477a8c, 208 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    75 * _0x477a8c,
    224 * _0x477a8c,
    86 * _0x477a8c,
    228 * _0x477a8c,
    93 * _0x477a8c,
    228 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    104 * _0x477a8c,
    229 * _0x477a8c,
    116 * _0x477a8c,
    219 * _0x477a8c,
    122 * _0x477a8c,
    205 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(130 * _0x477a8c, 170 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    146 * _0x477a8c,
    125 * _0x477a8c,
    156 * _0x477a8c,
    126 * _0x477a8c,
    173 * _0x477a8c,
    137 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    167 * _0x477a8c,
    151 * _0x477a8c,
    143 * _0x477a8c,
    174 * _0x477a8c,
    131 * _0x477a8c,
    183 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(39 * _0x477a8c, 140 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    75 * _0x477a8c,
    126 * _0x477a8c,
    113 * _0x477a8c,
    127 * _0x477a8c,
    143 * _0x477a8c,
    137 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    141 * _0x477a8c,
    186 * _0x477a8c,
    130 * _0x477a8c,
    202 * _0x477a8c,
    113 * _0x477a8c,
    214 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    85 * _0x477a8c,
    228 * _0x477a8c,
    56 * _0x477a8c,
    219 * _0x477a8c,
    48 * _0x477a8c,
    173 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    40 * _0x477a8c,
    148 * _0x477a8c,
    43 * _0x477a8c,
    145 * _0x477a8c,
    39 * _0x477a8c,
    140 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(59 * _0x477a8c, 99 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    71 * _0x477a8c,
    68 * _0x477a8c,
    81 * _0x477a8c,
    68 * _0x477a8c,
    94 * _0x477a8c,
    67 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    105 * _0x477a8c,
    66 * _0x477a8c,
    119 * _0x477a8c,
    75 * _0x477a8c,
    123 * _0x477a8c,
    96 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    104 * _0x477a8c,
    91 * _0x477a8c,
    101 * _0x477a8c,
    94 * _0x477a8c,
    94 * _0x477a8c,
    97 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    76 * _0x477a8c,
    92 * _0x477a8c,
    73 * _0x477a8c,
    93 * _0x477a8c,
    60 * _0x477a8c,
    99 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[3], _0x3b9f4e[2], 4 * _0x477a8c);
  if (_0x4800e0 === 0) {
    _0x13e080.beginPath();
    _0x13e080.lineCap = "round";
    _0x13e080.lineJoin = "round";
    _0x13e080.moveTo(47 * _0x477a8c, 149 * _0x477a8c);
    _0x13e080.bezierCurveTo(
      43 * _0x477a8c,
      140 * _0x477a8c,
      48 * _0x477a8c,
      130 * _0x477a8c,
      59 * _0x477a8c,
      127 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      77 * _0x477a8c,
      126 * _0x477a8c,
      90 * _0x477a8c,
      131 * _0x477a8c,
      131 * _0x477a8c,
      127 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      143 * _0x477a8c,
      130 * _0x477a8c,
      144 * _0x477a8c,
      143 * _0x477a8c,
      132 * _0x477a8c,
      154 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      90 * _0x477a8c,
      152 * _0x477a8c,
      90 * _0x477a8c,
      152 * _0x477a8c,
      48 * _0x477a8c,
      150 * _0x477a8c
    );
    _0x13e080.closePath();
    fill_path(_0x13e080, _0x3b9f4e[1]);
    _0x13e080.beginPath();
    _0x13e080.lineCap = "round";
    _0x13e080.lineJoin = "round";
    _0x13e080.moveTo(40 * _0x477a8c, 139 * _0x477a8c);
    _0x13e080.bezierCurveTo(
      48 * _0x477a8c,
      113 * _0x477a8c,
      76 * _0x477a8c,
      119 * _0x477a8c,
      91 * _0x477a8c,
      126 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      117 * _0x477a8c,
      113 * _0x477a8c,
      135 * _0x477a8c,
      117 * _0x477a8c,
      144 * _0x477a8c,
      134 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      144 * _0x477a8c,
      138 * _0x477a8c,
      144 * _0x477a8c,
      138 * _0x477a8c,
      144 * _0x477a8c,
      142 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      128 * _0x477a8c,
      124 * _0x477a8c,
      108 * _0x477a8c,
      124 * _0x477a8c,
      91 * _0x477a8c,
      136 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      59 * _0x477a8c,
      124 * _0x477a8c,
      50 * _0x477a8c,
      137 * _0x477a8c,
      42 * _0x477a8c,
      148 * _0x477a8c
    );
    _0x13e080.closePath();
    fill_path(_0x13e080, _0x3b9f4e[3], _0x3b9f4e[2], 4 * _0x477a8c);
  } else {
    _0x13e080.beginPath();
    _0x13e080.lineCap = "round";
    _0x13e080.lineJoin = "round";
    _0x13e080.moveTo(41 * _0x477a8c, 139 * _0x477a8c);
    _0x13e080.bezierCurveTo(
      53 * _0x477a8c,
      117 * _0x477a8c,
      69 * _0x477a8c,
      118 * _0x477a8c,
      92 * _0x477a8c,
      127 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      124 * _0x477a8c,
      111 * _0x477a8c,
      136 * _0x477a8c,
      121 * _0x477a8c,
      143 * _0x477a8c,
      136 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      142 * _0x477a8c,
      144 * _0x477a8c,
      142 * _0x477a8c,
      144 * _0x477a8c,
      141 * _0x477a8c,
      152 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      128 * _0x477a8c,
      131 * _0x477a8c,
      113 * _0x477a8c,
      138 * _0x477a8c,
      92 * _0x477a8c,
      145 * _0x477a8c
    );
    _0x13e080.bezierCurveTo(
      57 * _0x477a8c,
      133 * _0x477a8c,
      57 * _0x477a8c,
      147 * _0x477a8c,
      44 * _0x477a8c,
      154 * _0x477a8c
    );
    _0x13e080.closePath();
    fill_path(_0x13e080, _0x3b9f4e[3], _0x3b9f4e[2], 4 * _0x477a8c);
  }
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(90 * _0x477a8c, 95 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    99 * _0x477a8c,
    82 * _0x477a8c,
    98 * _0x477a8c,
    58 * _0x477a8c,
    99 * _0x477a8c,
    40 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    90 * _0x477a8c,
    38 * _0x477a8c,
    89 * _0x477a8c,
    34 * _0x477a8c,
    92 * _0x477a8c,
    17 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    92 * _0x477a8c,
    5 * _0x477a8c,
    83 * _0x477a8c,
    16 * _0x477a8c,
    78 * _0x477a8c,
    29 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    72 * _0x477a8c,
    59 * _0x477a8c,
    87 * _0x477a8c,
    81 * _0x477a8c,
    89 * _0x477a8c,
    87 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[2], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(90 * _0x477a8c, 86 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    95 * _0x477a8c,
    74 * _0x477a8c,
    95 * _0x477a8c,
    62 * _0x477a8c,
    95 * _0x477a8c,
    43 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    84 * _0x477a8c,
    37 * _0x477a8c,
    86 * _0x477a8c,
    34 * _0x477a8c,
    89 * _0x477a8c,
    16 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    75 * _0x477a8c,
    29 * _0x477a8c,
    80 * _0x477a8c,
    58 * _0x477a8c,
    90 * _0x477a8c,
    85 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[3], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(92 * _0x477a8c, 117 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    98 * _0x477a8c,
    87 * _0x477a8c,
    93 * _0x477a8c,
    78 * _0x477a8c,
    85 * _0x477a8c,
    76 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    85.5 * _0x477a8c,
    79.5 * _0x477a8c,
    85.5 * _0x477a8c,
    79.5 * _0x477a8c,
    86 * _0x477a8c,
    83 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    84 * _0x477a8c,
    85.5 * _0x477a8c,
    84 * _0x477a8c,
    85.5 * _0x477a8c,
    82 * _0x477a8c,
    88 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    90 * _0x477a8c,
    93 * _0x477a8c,
    89 * _0x477a8c,
    100 * _0x477a8c,
    92 * _0x477a8c,
    117 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[3], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(92 * _0x477a8c, 175 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    95 * _0x477a8c,
    135 * _0x477a8c,
    98 * _0x477a8c,
    125 * _0x477a8c,
    109 * _0x477a8c,
    121 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    106 * _0x477a8c,
    114 * _0x477a8c,
    104 * _0x477a8c,
    114 * _0x477a8c,
    102 * _0x477a8c,
    113 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    103 * _0x477a8c,
    106 * _0x477a8c,
    104 * _0x477a8c,
    103 * _0x477a8c,
    107 * _0x477a8c,
    96 * _0x477a8c
  );
  _0x13e080.bezierCurveTo(
    74 * _0x477a8c,
    108 * _0x477a8c,
    86 * _0x477a8c,
    157 * _0x477a8c,
    92 * _0x477a8c,
    174 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, _0x3b9f4e[1], _0x3b9f4e[3], 4 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(48 * _0x477a8c, 169 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    42 * _0x477a8c,
    187 * _0x477a8c,
    50 * _0x477a8c,
    193 * _0x477a8c,
    59 * _0x477a8c,
    198 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, undefined, _0x3b9f4e[2], 5 * _0x477a8c);
  _0x13e080.beginPath();
  _0x13e080.lineCap = "round";
  _0x13e080.lineJoin = "round";
  _0x13e080.moveTo(136 * _0x477a8c, 171 * _0x477a8c);
  _0x13e080.bezierCurveTo(
    139 * _0x477a8c,
    186 * _0x477a8c,
    138 * _0x477a8c,
    191 * _0x477a8c,
    124 * _0x477a8c,
    199 * _0x477a8c
  );
  _0x13e080.closePath();
  fill_path(_0x13e080, undefined, _0x3b9f4e[2], 4 * _0x477a8c);
  circle(
    _0x13e080,
    63 * _0x477a8c,
    180 * _0x477a8c,
    15.231546211727817 * _0x477a8c
  );
  fill_path(_0x13e080, _0x3b9f4e[4]);
  circle(
    _0x13e080,
    121 * _0x477a8c,
    181 * _0x477a8c,
    15.652475842498529 * _0x477a8c
  );
  fill_path(_0x13e080, _0x3b9f4e[4]);
  circle(
    _0x13e080,
    58 * _0x477a8c,
    175 * _0x477a8c,
    5.656854249492381 * _0x477a8c
  );
  fill_path(_0x13e080, _0x3b9f4e[2]);
  circle(
    _0x13e080,
    116 * _0x477a8c,
    175 * _0x477a8c,
    5.656854249492381 * _0x477a8c
  );
  fill_path(_0x13e080, _0x3b9f4e[2]);
  return _0x4c7305;
}
function create_hurt_fish1(_0x4fe509, _0x2141d0) {
  var _0xc709da = document.createElement("canvas");
  var _0x4b64b4 = _0xc709da.getContext("2d");
  _0xc709da.width = 185 * _0x4fe509;
  _0xc709da.height = 240 * _0x4fe509;
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(44 * _0x4fe509, 137 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    60 * _0x4fe509,
    87 * _0x4fe509,
    68 * _0x4fe509,
    66 * _0x4fe509,
    92 * _0x4fe509,
    67 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    115 * _0x4fe509,
    64 * _0x4fe509,
    129 * _0x4fe509,
    97 * _0x4fe509,
    137 * _0x4fe509,
    136 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(53 * _0x4fe509, 181 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    30 * _0x4fe509,
    164 * _0x4fe509,
    19 * _0x4fe509,
    150 * _0x4fe509,
    11 * _0x4fe509,
    136 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    28 * _0x4fe509,
    121 * _0x4fe509,
    38 * _0x4fe509,
    132 * _0x4fe509,
    48 * _0x4fe509,
    150 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(63 * _0x4fe509, 208 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    75 * _0x4fe509,
    224 * _0x4fe509,
    86 * _0x4fe509,
    228 * _0x4fe509,
    93 * _0x4fe509,
    228 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    104 * _0x4fe509,
    229 * _0x4fe509,
    116 * _0x4fe509,
    219 * _0x4fe509,
    122 * _0x4fe509,
    205 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(130 * _0x4fe509, 170 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    146 * _0x4fe509,
    125 * _0x4fe509,
    156 * _0x4fe509,
    126 * _0x4fe509,
    173 * _0x4fe509,
    137 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    167 * _0x4fe509,
    151 * _0x4fe509,
    143 * _0x4fe509,
    174 * _0x4fe509,
    131 * _0x4fe509,
    183 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(39 * _0x4fe509, 140 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    75 * _0x4fe509,
    126 * _0x4fe509,
    113 * _0x4fe509,
    127 * _0x4fe509,
    143 * _0x4fe509,
    137 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    141 * _0x4fe509,
    186 * _0x4fe509,
    130 * _0x4fe509,
    202 * _0x4fe509,
    113 * _0x4fe509,
    214 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    85 * _0x4fe509,
    228 * _0x4fe509,
    56 * _0x4fe509,
    219 * _0x4fe509,
    48 * _0x4fe509,
    173 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    40 * _0x4fe509,
    148 * _0x4fe509,
    43 * _0x4fe509,
    145 * _0x4fe509,
    39 * _0x4fe509,
    140 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(90 * _0x4fe509, 95 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    99 * _0x4fe509,
    82 * _0x4fe509,
    98 * _0x4fe509,
    58 * _0x4fe509,
    99 * _0x4fe509,
    40 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    90 * _0x4fe509,
    38 * _0x4fe509,
    89 * _0x4fe509,
    34 * _0x4fe509,
    92 * _0x4fe509,
    17 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    92 * _0x4fe509,
    5 * _0x4fe509,
    83 * _0x4fe509,
    16 * _0x4fe509,
    78 * _0x4fe509,
    29 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    72 * _0x4fe509,
    59 * _0x4fe509,
    87 * _0x4fe509,
    81 * _0x4fe509,
    89 * _0x4fe509,
    87 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(90 * _0x4fe509, 86 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    95 * _0x4fe509,
    74 * _0x4fe509,
    95 * _0x4fe509,
    62 * _0x4fe509,
    95 * _0x4fe509,
    43 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    84 * _0x4fe509,
    37 * _0x4fe509,
    86 * _0x4fe509,
    34 * _0x4fe509,
    89 * _0x4fe509,
    16 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    75 * _0x4fe509,
    29 * _0x4fe509,
    80 * _0x4fe509,
    58 * _0x4fe509,
    90 * _0x4fe509,
    85 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(92 * _0x4fe509, 117 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    98 * _0x4fe509,
    87 * _0x4fe509,
    93 * _0x4fe509,
    78 * _0x4fe509,
    85 * _0x4fe509,
    76 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    85.5 * _0x4fe509,
    79.5 * _0x4fe509,
    85.5 * _0x4fe509,
    79.5 * _0x4fe509,
    86 * _0x4fe509,
    83 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    84 * _0x4fe509,
    85.5 * _0x4fe509,
    84 * _0x4fe509,
    85.5 * _0x4fe509,
    82 * _0x4fe509,
    88 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    90 * _0x4fe509,
    93 * _0x4fe509,
    89 * _0x4fe509,
    100 * _0x4fe509,
    92 * _0x4fe509,
    117 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  _0x4b64b4.beginPath();
  _0x4b64b4.lineCap = "round";
  _0x4b64b4.lineJoin = "round";
  _0x4b64b4.moveTo(92 * _0x4fe509, 175 * _0x4fe509);
  _0x4b64b4.bezierCurveTo(
    95 * _0x4fe509,
    135 * _0x4fe509,
    98 * _0x4fe509,
    125 * _0x4fe509,
    109 * _0x4fe509,
    121 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    106 * _0x4fe509,
    114 * _0x4fe509,
    104 * _0x4fe509,
    114 * _0x4fe509,
    102 * _0x4fe509,
    113 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    103 * _0x4fe509,
    106 * _0x4fe509,
    104 * _0x4fe509,
    103 * _0x4fe509,
    107 * _0x4fe509,
    96 * _0x4fe509
  );
  _0x4b64b4.bezierCurveTo(
    74 * _0x4fe509,
    108 * _0x4fe509,
    86 * _0x4fe509,
    157 * _0x4fe509,
    92 * _0x4fe509,
    174 * _0x4fe509
  );
  _0x4b64b4.closePath();
  fill_path(_0x4b64b4, _0x2141d0[0]);
  return _0xc709da;
}
function create_fish2(_0x1ca0cc, _0x14751c, _0x3a931c, _0x1c82d7) {
  var _0x4a8881 = document.createElement("canvas");
  var _0x649b71 = _0x4a8881.getContext("2d");
  _0x4a8881.width = 185 * _0x1ca0cc;
  _0x4a8881.height = 240 * _0x1ca0cc;
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(58 * _0x1ca0cc, 205 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    74 * _0x1ca0cc,
    227 * _0x1ca0cc,
    83 * _0x1ca0cc,
    230 * _0x1ca0cc,
    92 * _0x1ca0cc,
    230 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    101 * _0x1ca0cc,
    232 * _0x1ca0cc,
    119 * _0x1ca0cc,
    219 * _0x1ca0cc,
    122 * _0x1ca0cc,
    205 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[1], _0x3a931c[2], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(46 * _0x1ca0cc, 151 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    34 * _0x1ca0cc,
    126 * _0x1ca0cc,
    21 * _0x1ca0cc,
    130 * _0x1ca0cc,
    10 * _0x1ca0cc,
    139 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    27 * _0x1ca0cc,
    168 * _0x1ca0cc,
    48 * _0x1ca0cc,
    180 * _0x1ca0cc,
    53 * _0x1ca0cc,
    184 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[3], _0x3a931c[2], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(122 * _0x1ca0cc, 165 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    143 * _0x1ca0cc,
    140 * _0x1ca0cc,
    154 * _0x1ca0cc,
    123 * _0x1ca0cc,
    172 * _0x1ca0cc,
    139 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    169 * _0x1ca0cc,
    149 * _0x1ca0cc,
    147 * _0x1ca0cc,
    173 * _0x1ca0cc,
    126 * _0x1ca0cc,
    192 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[3], _0x3a931c[2], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(47 * _0x1ca0cc, 129 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    55 * _0x1ca0cc,
    90 * _0x1ca0cc,
    71 * _0x1ca0cc,
    66 * _0x1ca0cc,
    93 * _0x1ca0cc,
    69 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    116 * _0x1ca0cc,
    70 * _0x1ca0cc,
    122 * _0x1ca0cc,
    88 * _0x1ca0cc,
    136 * _0x1ca0cc,
    127 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    143 * _0x1ca0cc,
    137 * _0x1ca0cc,
    144 * _0x1ca0cc,
    137 * _0x1ca0cc,
    144 * _0x1ca0cc,
    142 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    138 * _0x1ca0cc,
    199 * _0x1ca0cc,
    128 * _0x1ca0cc,
    206 * _0x1ca0cc,
    108 * _0x1ca0cc,
    219 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    84 * _0x1ca0cc,
    228 * _0x1ca0cc,
    65 * _0x1ca0cc,
    224 * _0x1ca0cc,
    50 * _0x1ca0cc,
    191 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    41 * _0x1ca0cc,
    161 * _0x1ca0cc,
    41 * _0x1ca0cc,
    157 * _0x1ca0cc,
    39 * _0x1ca0cc,
    144 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    40 * _0x1ca0cc,
    140 * _0x1ca0cc,
    42 * _0x1ca0cc,
    137 * _0x1ca0cc,
    47 * _0x1ca0cc,
    129 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[1], _0x3a931c[2], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(47 * _0x1ca0cc, 133 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    65 * _0x1ca0cc,
    143 * _0x1ca0cc,
    74 * _0x1ca0cc,
    162 * _0x1ca0cc,
    70 * _0x1ca0cc,
    186 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    71 * _0x1ca0cc,
    188.5 * _0x1ca0cc,
    71 * _0x1ca0cc,
    188.5 * _0x1ca0cc,
    72 * _0x1ca0cc,
    191 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    81 * _0x1ca0cc,
    185.5 * _0x1ca0cc,
    81 * _0x1ca0cc,
    185.5 * _0x1ca0cc,
    90 * _0x1ca0cc,
    180 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    99 * _0x1ca0cc,
    185 * _0x1ca0cc,
    99 * _0x1ca0cc,
    185 * _0x1ca0cc,
    108 * _0x1ca0cc,
    190 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    110.5 * _0x1ca0cc,
    184.5 * _0x1ca0cc,
    110.5 * _0x1ca0cc,
    184.5 * _0x1ca0cc,
    113 * _0x1ca0cc,
    179 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    110 * _0x1ca0cc,
    156 * _0x1ca0cc,
    121 * _0x1ca0cc,
    156 * _0x1ca0cc,
    142 * _0x1ca0cc,
    141 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    137.5 * _0x1ca0cc,
    133 * _0x1ca0cc,
    137.5 * _0x1ca0cc,
    133 * _0x1ca0cc,
    133 * _0x1ca0cc,
    125 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    116 * _0x1ca0cc,
    78 * _0x1ca0cc,
    112 * _0x1ca0cc,
    70 * _0x1ca0cc,
    91 * _0x1ca0cc,
    71 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    62 * _0x1ca0cc,
    69 * _0x1ca0cc,
    59 * _0x1ca0cc,
    107 * _0x1ca0cc,
    48 * _0x1ca0cc,
    132 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[4]);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(93 * _0x1ca0cc, 86 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    101 * _0x1ca0cc,
    79 * _0x1ca0cc,
    99 * _0x1ca0cc,
    56 * _0x1ca0cc,
    100 * _0x1ca0cc,
    37 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    90 * _0x1ca0cc,
    34 * _0x1ca0cc,
    90 * _0x1ca0cc,
    27 * _0x1ca0cc,
    93 * _0x1ca0cc,
    13 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    96 * _0x1ca0cc,
    0 * _0x1ca0cc,
    85 * _0x1ca0cc,
    13 * _0x1ca0cc,
    82 * _0x1ca0cc,
    26 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    78 * _0x1ca0cc,
    43 * _0x1ca0cc,
    89 * _0x1ca0cc,
    74 * _0x1ca0cc,
    93 * _0x1ca0cc,
    85 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[3], _0x3a931c[2], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(94 * _0x1ca0cc, 86 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    120 * _0x1ca0cc,
    88 * _0x1ca0cc,
    132 * _0x1ca0cc,
    109 * _0x1ca0cc,
    122 * _0x1ca0cc,
    128 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    118 * _0x1ca0cc,
    139 * _0x1ca0cc,
    101 * _0x1ca0cc,
    146 * _0x1ca0cc,
    90 * _0x1ca0cc,
    143 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    57 * _0x1ca0cc,
    141 * _0x1ca0cc,
    49 * _0x1ca0cc,
    109 * _0x1ca0cc,
    68 * _0x1ca0cc,
    94 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    78 * _0x1ca0cc,
    85 * _0x1ca0cc,
    90 * _0x1ca0cc,
    86 * _0x1ca0cc,
    95 * _0x1ca0cc,
    86 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[1]);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(91 * _0x1ca0cc, 178 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    78 * _0x1ca0cc,
    136 * _0x1ca0cc,
    81 * _0x1ca0cc,
    88 * _0x1ca0cc,
    93 * _0x1ca0cc,
    87 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    101 * _0x1ca0cc,
    84 * _0x1ca0cc,
    94 * _0x1ca0cc,
    97 * _0x1ca0cc,
    94 * _0x1ca0cc,
    107 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    91 * _0x1ca0cc,
    112 * _0x1ca0cc,
    92 * _0x1ca0cc,
    117 * _0x1ca0cc,
    94 * _0x1ca0cc,
    121 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    98 * _0x1ca0cc,
    126 * _0x1ca0cc,
    102 * _0x1ca0cc,
    128 * _0x1ca0cc,
    97 * _0x1ca0cc,
    135 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    92 * _0x1ca0cc,
    140 * _0x1ca0cc,
    93 * _0x1ca0cc,
    160 * _0x1ca0cc,
    91 * _0x1ca0cc,
    179 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[5], _0x3a931c[1], 4 * _0x1ca0cc);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(20 * _0x1ca0cc, 151 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    22 * _0x1ca0cc,
    147 * _0x1ca0cc,
    22 * _0x1ca0cc,
    147 * _0x1ca0cc,
    24 * _0x1ca0cc,
    143 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    27 * _0x1ca0cc,
    144.5 * _0x1ca0cc,
    27 * _0x1ca0cc,
    144.5 * _0x1ca0cc,
    30 * _0x1ca0cc,
    146 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    31 * _0x1ca0cc,
    143 * _0x1ca0cc,
    31 * _0x1ca0cc,
    143 * _0x1ca0cc,
    32 * _0x1ca0cc,
    140 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    35 * _0x1ca0cc,
    140.5 * _0x1ca0cc,
    35 * _0x1ca0cc,
    140.5 * _0x1ca0cc,
    38 * _0x1ca0cc,
    141 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    31 * _0x1ca0cc,
    132 * _0x1ca0cc,
    29 * _0x1ca0cc,
    131 * _0x1ca0cc,
    22 * _0x1ca0cc,
    132 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    14 * _0x1ca0cc,
    135 * _0x1ca0cc,
    13 * _0x1ca0cc,
    135 * _0x1ca0cc,
    11 * _0x1ca0cc,
    138 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    15.5 * _0x1ca0cc,
    144.5 * _0x1ca0cc,
    15.5 * _0x1ca0cc,
    144.5 * _0x1ca0cc,
    20 * _0x1ca0cc,
    151 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[6]);
  circle(
    _0x649b71,
    61 * _0x1ca0cc,
    183 * _0x1ca0cc,
    16.15549442140351 * _0x1ca0cc
  );
  fill_path(_0x649b71, _0x3a931c[7]);
  circle(
    _0x649b71,
    121 * _0x1ca0cc,
    184 * _0x1ca0cc,
    14.866068747318506 * _0x1ca0cc
  );
  fill_path(_0x649b71, _0x3a931c[7]);
  circle(
    _0x649b71,
    57 * _0x1ca0cc,
    178 * _0x1ca0cc,
    5.656854249492381 * _0x1ca0cc
  );
  fill_path(_0x649b71, _0x3a931c[2]);
  circle(
    _0x649b71,
    116 * _0x1ca0cc,
    177 * _0x1ca0cc,
    5.830951894845301 * _0x1ca0cc
  );
  fill_path(_0x649b71, _0x3a931c[2]);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(162 * _0x1ca0cc, 152 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    161.5 * _0x1ca0cc,
    148 * _0x1ca0cc,
    161.5 * _0x1ca0cc,
    148 * _0x1ca0cc,
    161 * _0x1ca0cc,
    144 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    157.5 * _0x1ca0cc,
    145 * _0x1ca0cc,
    157.5 * _0x1ca0cc,
    145 * _0x1ca0cc,
    154 * _0x1ca0cc,
    146 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    153.5 * _0x1ca0cc,
    143 * _0x1ca0cc,
    153.5 * _0x1ca0cc,
    143 * _0x1ca0cc,
    153 * _0x1ca0cc,
    140 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    149 * _0x1ca0cc,
    140.5 * _0x1ca0cc,
    149 * _0x1ca0cc,
    140.5 * _0x1ca0cc,
    145 * _0x1ca0cc,
    141 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    150 * _0x1ca0cc,
    132 * _0x1ca0cc,
    161 * _0x1ca0cc,
    131 * _0x1ca0cc,
    170 * _0x1ca0cc,
    138 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    173 * _0x1ca0cc,
    141 * _0x1ca0cc,
    165 * _0x1ca0cc,
    150 * _0x1ca0cc,
    162 * _0x1ca0cc,
    150 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[6]);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(106 * _0x1ca0cc, 110 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    104 * _0x1ca0cc,
    98 * _0x1ca0cc,
    112 * _0x1ca0cc,
    91 * _0x1ca0cc,
    118 * _0x1ca0cc,
    101 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    122 * _0x1ca0cc,
    115 * _0x1ca0cc,
    121 * _0x1ca0cc,
    119 * _0x1ca0cc,
    117 * _0x1ca0cc,
    124 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    112 * _0x1ca0cc,
    129 * _0x1ca0cc,
    107 * _0x1ca0cc,
    124 * _0x1ca0cc,
    106 * _0x1ca0cc,
    112 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[1]);
  _0x649b71.beginPath();
  _0x649b71.lineCap = "round";
  _0x649b71.lineJoin = "round";
  _0x649b71.moveTo(64 * _0x1ca0cc, 106 * _0x1ca0cc);
  _0x649b71.bezierCurveTo(
    66 * _0x1ca0cc,
    97 * _0x1ca0cc,
    72 * _0x1ca0cc,
    89 * _0x1ca0cc,
    76 * _0x1ca0cc,
    98 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    78 * _0x1ca0cc,
    106 * _0x1ca0cc,
    79 * _0x1ca0cc,
    118 * _0x1ca0cc,
    72 * _0x1ca0cc,
    126 * _0x1ca0cc
  );
  _0x649b71.bezierCurveTo(
    65 * _0x1ca0cc,
    130 * _0x1ca0cc,
    63 * _0x1ca0cc,
    117 * _0x1ca0cc,
    64 * _0x1ca0cc,
    108 * _0x1ca0cc
  );
  _0x649b71.closePath();
  fill_path(_0x649b71, _0x3a931c[1]);
  return _0x4a8881;
}
function create_food_plant(_0x2798f7) {
  var _0x5cbc86 = document.createElement("canvas");
  var _0x335265 = _0x5cbc86.getContext("2d");
  var _0x5cef3e = _0x2798f7 * 200;
  var _0x267f5a = _0x2798f7 * 200;
  _0x5cbc86.width = _0x5cef3e;
  _0x5cbc86.height = _0x267f5a;
  var _0x244547 = create_plant(0.35, false, ["#0e3022", "#0b8052", "#077b49"]);
  _0x335265.drawImage(_0x244547, 10, 10);
  var _0x244547 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x335265.drawImage(_0x244547, 21, 20);
  var _0x244547 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x335265.drawImage(_0x244547, 38, 28);
  var _0x244547 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x335265.drawImage(_0x244547, 15, 37);
  var _0x244547 = create_fruit(0.9, false, ["#3d2a6e", "#8255b5"]);
  _0x335265.drawImage(_0x244547, 32, 45);
  return _0x5cbc86;
}
function create_gear(_0x2dd497, _0x43dfb8) {
  var _0x57361a = document.createElement("canvas");
  var _0x49d78e = _0x57361a.getContext("2d");
  var _0x5db688 = _0x2dd497 * 100;
  var _0x4753ce = _0x2dd497 * 100;
  var _0x3c77ca = _0x5db688 / 2;
  var _0x3d8154 = _0x4753ce / 2;
  _0x57361a.width = _0x5db688;
  _0x57361a.height = _0x4753ce;
  var _0x591f5a = _0x2dd497 * 5;
  var _0x3df681 = _0x2dd497 * 28;
  var _0x1f03a5 = _0x591f5a / 2;
  var _0x33ed90 = _0x3df681 / 2;
  _0x49d78e.translate(_0x3c77ca, _0x3d8154);
  for (var _0x58dfd9 = 0; _0x58dfd9 < 4; _0x58dfd9++) {
    round_rect(
      _0x49d78e,
      -_0x1f03a5,
      -_0x33ed90,
      _0x591f5a,
      _0x3df681,
      _0x2dd497 * 2
    );
    _0x49d78e.rotate(Math.PI / 4);
    fill_path(_0x49d78e, _0x43dfb8);
  }
  _0x49d78e.arc(0, 0, 10 * _0x2dd497, 0, Math.PI * 2);
  fill_path(_0x49d78e, _0x43dfb8);
  _0x49d78e.globalCompositeOperation = "destination-out";
  circle(_0x49d78e, 0, 0, _0x2dd497 * 4);
  _0x49d78e.fill();
  return _0x57361a;
}
function create_gear_option(_0x9d2000, _0xd5aee8, _0x89da4c) {
  var _0x463b7d = document.createElement("canvas");
  var _0x5cbe6c = _0x463b7d.getContext("2d");
  var _0x30fb9c = _0x9d2000 * 32;
  var _0xd948ed = _0x9d2000 * 32;
  var _0x3820b8 = _0x30fb9c / 2;
  var _0x3d09bb = _0xd948ed / 2;
  _0x463b7d.width = _0x30fb9c;
  _0x463b7d.height = _0xd948ed;
  var _0xce882d = _0x9d2000 * 5;
  var _0x53851e = _0x9d2000 * 28;
  var _0x384b3d = _0xce882d / 2;
  var _0x2bc055 = _0x53851e / 2;
  _0x5cbe6c.translate(0 * _0x9d2000, 0 * _0x9d2000);
  _0x5cbe6c.translate(_0x3820b8, _0x3d09bb);
  if (_0x89da4c == 1) {
    circle(_0x5cbe6c, 0, 0, 10 * _0x9d2000, 0);
    fill_path(_0x5cbe6c, _0xd5aee8[2], _0xd5aee8[2], 3 * _0x9d2000);
    for (var _0x47b4ac = 0; _0x47b4ac < 4; _0x47b4ac++) {
      round_rect(
        _0x5cbe6c,
        -_0x384b3d,
        -_0x2bc055,
        _0xce882d,
        _0x53851e,
        _0x9d2000 * 2
      );
      _0x5cbe6c.rotate(Math.PI / 4);
      fill_path(_0x5cbe6c, _0xd5aee8[2], _0xd5aee8[2], 4 * _0x9d2000);
    }
  }
  circle(_0x5cbe6c, 0, 0, 10 * _0x9d2000, 0);
  fill_path(_0x5cbe6c, _0xd5aee8[0], _0xd5aee8[1], 1.5 * _0x9d2000);
  for (var _0x47b4ac = 0; _0x47b4ac < 4; _0x47b4ac++) {
    round_rect(
      _0x5cbe6c,
      -_0x384b3d,
      -_0x2bc055,
      _0xce882d,
      _0x53851e,
      _0x9d2000 * 2
    );
    _0x5cbe6c.rotate(Math.PI / 4);
    fill_path(_0x5cbe6c, _0xd5aee8[0], _0xd5aee8[1], 1.5 * _0x9d2000);
  }
  circle(_0x5cbe6c, 0, 0, 10 * _0x9d2000, 0);
  fill_path(_0x5cbe6c, _0xd5aee8[0]);
  circle(_0x5cbe6c, 0, 0, 4 * _0x9d2000, 0);
  fill_path(_0x5cbe6c, _0xd5aee8[2], _0xd5aee8[1], 1.5 * _0x9d2000);
  _0x5cbe6c.globalCompositeOperation = "destination-out";
  circle(_0x5cbe6c, 0, 0, 4 * _0x9d2000, 0);
  fill_path(_0x5cbe6c, _0xd5aee8[0], _0xd5aee8[1], 2 * _0x9d2000);
  _0x5cbe6c.globalCompositeOperation = "source-over";
  circle(_0x5cbe6c, 0, 0, 4 * _0x9d2000, 0);
  fill_path(_0x5cbe6c, undefined, _0xd5aee8[1], 2 * _0x9d2000);
  return _0x463b7d;
}
function create_minimap_object(
  _0x3c9b2a,
  _0x1b069b,
  _0x405098,
  _0x38ce1d,
  _0x5299b5,
  _0x2466a9,
  _0x995a17
) {
  if (_0x995a17 === undefined) {
    _0x995a17 = 0;
  }
  for (
    var _0x28c3e2 = _0x2466a9 == -1 ? 0 : _0x2466a9;
    _0x28c3e2 >= _0x995a17;
    _0x28c3e2--
  ) {
    for (var _0x1a446c = 0; _0x1a446c < 200; _0x1a446c++) {
      for (var _0xe4e2a7 = 0; _0xe4e2a7 < 200; _0xe4e2a7++) {
        var _0x460a5b = MAP.tiles[_0xe4e2a7][_0x1a446c];
        if (!_0x460a5b || !_0x460a5b[_0x38ce1d]) {
          continue;
        }
        if (_0x2466a9 == -1) {
          var _0x49a7cd = _0x460a5b[_0x38ce1d];
        } else {
          var _0x49a7cd = _0x460a5b[_0x38ce1d][_0x28c3e2];
        }
        for (
          var _0x3ec1f5 = 0;
          _0x49a7cd && _0x3ec1f5 < _0x49a7cd.length;
          _0x3ec1f5++
        ) {
          var _0x295b5d = _0x49a7cd[_0x3ec1f5];
          _0x3c9b2a.fillStyle = _0x405098;
          circle(
            _0x3c9b2a,
            _0x295b5d.x * _0x1b069b * 0.0095,
            _0x295b5d.y * _0x1b069b * 0.0095,
            _0x5299b5 * _0x1b069b
          );
          _0x3c9b2a.fill();
        }
      }
    }
  }
}
function create_minimap(_0x2452d5, _0x352a69) {
  var _0x2b8ef1 = document.createElement("canvas");
  var _0x5c6545 = _0x2b8ef1.getContext("2d");
  _0x2b8ef1.width = 200 * _0x2452d5;
  _0x2b8ef1.height = 200 * _0x2452d5;
  _0x5c6545.translate(9 * _0x2452d5, 12 * _0x2452d5);
  _0x5c6545.fillStyle = _0x352a69[0];
  _0x5c6545.fillRect(-2, -3, _0x2b8ef1.width, _0x2b8ef1.height);
  _0x5c6545.fillStyle = _0x352a69[9];
  _0x5c6545.fillRect(0, 0, _0x2b8ef1.width, _0x2b8ef1.height);
  _0x5c6545.fillStyle = _0x352a69[17];
  _0x5c6545.fillRect(0, 0, _0x2b8ef1.width, _0x2b8ef1.height / 2.1);
  _0x5c6545.fillStyle = _0x352a69[26];
  _0x5c6545.fillRect(
    _0x2b8ef1.width / 1.77,
    _0x2b8ef1.height / 2.1,
    _0x2b8ef1.width / 2.1,
    _0x2b8ef1.height / 2.1
  );
  _0x5c6545.fillStyle = _0x352a69[28];
  _0x5c6545.fillRect(
    _0x2b8ef1.width / 1.77,
    _0x2b8ef1.height / 2.1,
    5,
    _0x2b8ef1.height / 2.1
  );
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[17], "so", 3, 6, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[28], "isl", 6, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[28], "isl", 6, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[28], "isl", 6, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[5], "plm", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[5], "plm", 2, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[5], "plm", 2, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[5], "t", 2, 5, 4);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[6], "t", 3, 3, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[7], "t", 4, 1, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[8], "b", 3, 3, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[9], "b", 4, 1, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[2], "s", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[3], "s", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[4], "s", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[10], "g", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[11], "g", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[12], "g", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[1], "p", 4, -1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[25], "dg", 3, 6, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[27], "cs", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[27], "cs", 2, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[27], "cs", 2, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[19], "f", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[20], "f", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[21], "f", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[22], "gw", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[22], "gw", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[22], "gw", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "dw", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "dw", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "dw", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "d", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "d", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[23], "d", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[24], "a", 2, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[24], "a", 3, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[24], "a", 4, 0, 0);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[30], "l", 4, 2, 2);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[30], "l", 4, 1, 1);
  create_minimap_object(_0x5c6545, _0x2452d5, _0x352a69[30], "l", 4, 0, 0);
  circle(_0x5c6545, 0, 0, 0);
  _0x5c6545.globalCompositeOperation = "destination-out";
  _0x5c6545.translate(-9 * _0x2452d5, -4 * _0x2452d5);
  _0x5c6545.rect(
    5 * _0x2452d5,
    0,
    _0x2b8ef1.width * _0x2452d5,
    _0x2b8ef1.height * _0x2452d5,
    10 * _0x2452d5
  );
  _0x5c6545.lineWidth = 7 * _0x2452d5;
  _0x5c6545.strokeStyle = _0x352a69[16];
  _0x5c6545.stroke();
  return _0x2b8ef1;
}
function create_workbench(_0x17aff7, _0x20d5ff, _0x2ac347) {
  var _0x1c3c17 = document.createElement("canvas");
  var _0x590b3e = _0x1c3c17.getContext("2d");
  var _0x599904 = _0x17aff7 * 125;
  var _0x21104d = _0x17aff7 * 95;
  var _0x4db1e7 = _0x599904 / 2;
  var _0x5477b7 = _0x21104d / 2;
  var _0x21f47c = _0x17aff7 * 10;
  var _0x4565ea = _0x17aff7 * 8;
  var _0x3304c1 = _0x17aff7 * 112;
  var _0x1aa95a = _0x17aff7 * 82;
  var _0x11e4a5 = _0x3304c1 / 2;
  var _0x2ee08f = _0x1aa95a / 2;
  var _0x49f3f5 = _0x17aff7 * 4;
  _0x1c3c17.width = _0x599904;
  _0x1c3c17.height = _0x21104d;
  _0x590b3e.translate(_0x4db1e7 - 4 * _0x17aff7, _0x5477b7 + 4 * _0x17aff7);
  _0x590b3e.globalAlpha = _0x20d5ff ? 0.5 : 1;
  round_rect(
    _0x590b3e,
    -_0x11e4a5,
    -_0x2ee08f,
    _0x3304c1,
    _0x1aa95a,
    _0x21f47c
  );
  fill_path(_0x590b3e, _0x2ac347[0]);
  _0x590b3e.globalAlpha = 1;
  _0x590b3e.translate(0, -_0x4565ea);
  round_rect(
    _0x590b3e,
    -_0x11e4a5,
    -_0x2ee08f,
    _0x3304c1,
    _0x1aa95a,
    _0x21f47c
  );
  fill_path(_0x590b3e, _0x2ac347[1], _0x2ac347[2], _0x49f3f5);
  var _0x599904 = 55 * _0x17aff7;
  var _0x21104d = 45 * _0x17aff7;
  var _0x21f47c = 5;
  _0x590b3e.translate(-40 * _0x17aff7, -30 * _0x17aff7);
  round_rect(_0x590b3e, 0, 0, _0x599904, _0x21104d, _0x21f47c);
  fill_path(_0x590b3e, _0x2ac347[3]);
  var _0x2cf03c = create_gear(0.7 * _0x17aff7, _0x2ac347[3]);
  _0x590b3e.drawImage(_0x2cf03c, 45 * _0x17aff7, -25 * _0x17aff7);
  var _0x2cf03c = create_gear(0.7 * _0x17aff7, _0x2ac347[3]);
  _0x590b3e.drawImage(_0x2cf03c, 45 * _0x17aff7, 15 * _0x17aff7);
  var _0x2cf03c = create_gear(1.2 * _0x17aff7, _0x2ac347[3]);
  _0x590b3e.drawImage(_0x2cf03c, 28 * _0x17aff7, -30 * _0x17aff7);
  var _0x599904 = 15 * _0x17aff7;
  var _0x21104d = 70 * _0x17aff7;
  var _0x21f47c = 5 * _0x17aff7;
  _0x590b3e.translate(78 * _0x17aff7, -5 * _0x17aff7);
  round_rect(_0x590b3e, 0, 0, _0x599904, _0x21104d, _0x21f47c);
  fill_path(_0x590b3e, _0x2ac347[4]);
  var _0x599904 = 9 * _0x17aff7;
  var _0x21104d = 50 * _0x17aff7;
  var _0x21f47c = 3 * _0x17aff7;
  _0x590b3e.translate(-20 * _0x17aff7, 20 * _0x17aff7);
  _0x590b3e.rotate(Math.PI / 5);
  _0x590b3e.globalAlpha = 0.6;
  round_rect(_0x590b3e, 0, 0, _0x599904, _0x21104d, _0x21f47c);
  fill_path(_0x590b3e, _0x2ac347[5]);
  _0x590b3e.translate(-20 * _0x17aff7, 29 * _0x17aff7);
  _0x590b3e.rotate(Math.PI / 5);
  _0x590b3e.globalAlpha = 0.6;
  _0x590b3e.beginPath();
  _0x590b3e.lineJoin = "round";
  _0x590b3e.moveTo(0, 0);
  _0x590b3e.lineTo(0, 30 * _0x17aff7);
  _0x590b3e.lineTo(30 * _0x17aff7, 30 * _0x17aff7);
  _0x590b3e.closePath();
  fill_path(_0x590b3e, null, _0x2ac347[5], 8 * _0x17aff7);
  return _0x1c3c17;
}
function create_rabbit(_0xbde94f, _0x3388b2) {
  var _0x18442d = document.createElement("canvas");
  var _0xef4cad = _0x18442d.getContext("2d");
  var _0x585e1c = _0xbde94f * 85;
  var _0x4bf1b8 = _0xbde94f * 115;
  var _0x337682 = _0xbde94f * 6;
  var _0x1674a7 = _0xbde94f * 4;
  _0x18442d.width = _0x585e1c;
  _0x18442d.height = _0x4bf1b8;
  _0xef4cad.translate(-130 * _0xbde94f, -60 * _0xbde94f + _0x337682);
  _0xef4cad.globalAlpha = 0.5;
  _0xef4cad.beginPath();
  _0xef4cad.bezierCurveTo(
    190 * _0xbde94f,
    87 * _0xbde94f,
    201 * _0xbde94f,
    59 * _0xbde94f,
    208 * _0xbde94f,
    64 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    213 * _0xbde94f,
    68 * _0xbde94f,
    204 * _0xbde94f,
    93 * _0xbde94f,
    195 * _0xbde94f,
    109 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    195 * _0xbde94f,
    109 * _0xbde94f,
    202 * _0xbde94f,
    124 * _0xbde94f,
    191 * _0xbde94f,
    141 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    182 * _0xbde94f,
    151 * _0xbde94f,
    164 * _0xbde94f,
    155 * _0xbde94f,
    148 * _0xbde94f,
    144 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    136 * _0xbde94f,
    135 * _0xbde94f,
    138 * _0xbde94f,
    111 * _0xbde94f,
    145 * _0xbde94f,
    104 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    140 * _0xbde94f,
    92 * _0xbde94f,
    131 * _0xbde94f,
    67 * _0xbde94f,
    138 * _0xbde94f,
    63 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    145 * _0xbde94f,
    61 * _0xbde94f,
    153 * _0xbde94f,
    82 * _0xbde94f,
    155 * _0xbde94f,
    96 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    167 * _0xbde94f,
    91 * _0xbde94f,
    178 * _0xbde94f,
    92 * _0xbde94f,
    187 * _0xbde94f,
    98 * _0xbde94f
  );
  _0xef4cad.closePath();
  fill_path(_0xef4cad, _0x3388b2[0]);
  _0xef4cad.translate(0, -_0x337682);
  _0xef4cad.globalAlpha = 1;
  _0xef4cad.beginPath();
  _0xef4cad.bezierCurveTo(
    190 * _0xbde94f,
    87 * _0xbde94f,
    201 * _0xbde94f,
    59 * _0xbde94f,
    208 * _0xbde94f,
    64 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    213 * _0xbde94f,
    68 * _0xbde94f,
    204 * _0xbde94f,
    93 * _0xbde94f,
    195 * _0xbde94f,
    109 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    195 * _0xbde94f,
    109 * _0xbde94f,
    202 * _0xbde94f,
    124 * _0xbde94f,
    191 * _0xbde94f,
    141 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    182 * _0xbde94f,
    151 * _0xbde94f,
    164 * _0xbde94f,
    155 * _0xbde94f,
    148 * _0xbde94f,
    144 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    136 * _0xbde94f,
    135 * _0xbde94f,
    138 * _0xbde94f,
    111 * _0xbde94f,
    145 * _0xbde94f,
    104 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    140 * _0xbde94f,
    92 * _0xbde94f,
    131 * _0xbde94f,
    67 * _0xbde94f,
    138 * _0xbde94f,
    63 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    145 * _0xbde94f,
    61 * _0xbde94f,
    153 * _0xbde94f,
    82 * _0xbde94f,
    155 * _0xbde94f,
    96 * _0xbde94f
  );
  _0xef4cad.bezierCurveTo(
    167 * _0xbde94f,
    91 * _0xbde94f,
    178 * _0xbde94f,
    92 * _0xbde94f,
    187 * _0xbde94f,
    98 * _0xbde94f
  );
  _0xef4cad.closePath();
  fill_path(_0xef4cad, _0x3388b2[1], _0x3388b2[2], 4);
  var _0x5ae1c7 = _0xbde94f * 155;
  var _0x5c41c2 = _0xbde94f * 133;
  var _0x6d7369 = _0xbde94f * 10;
  var _0x4ceb46 = _0xbde94f * 3;
  var _0x438924 = _0x5ae1c7 + _0xbde94f * -3;
  var _0x2003a3 = _0x5c41c2 + _0xbde94f * -5;
  _0xef4cad.save();
  _0xef4cad.translate(_0x5ae1c7, _0x5c41c2);
  _0xef4cad.globalAlpha = 1;
  circle(_0xef4cad, 0, 0, _0x6d7369);
  fill_path(_0xef4cad, _0x3388b2[3]);
  _0xef4cad.restore();
  _0xef4cad.save();
  _0xef4cad.translate(_0x438924, _0x2003a3);
  _0xef4cad.globalAlpha = 1;
  circle(_0xef4cad, 0, 0, _0x4ceb46);
  fill_path(_0xef4cad, _0x3388b2[4]);
  _0xef4cad.restore();
  _0xef4cad.save();
  _0xef4cad.translate(_0x5ae1c7 + 27 * _0xbde94f, _0x5c41c2);
  _0xef4cad.globalAlpha = 1;
  circle(_0xef4cad, 0, 0, _0x6d7369);
  fill_path(_0xef4cad, _0x3388b2[3]);
  _0xef4cad.restore();
  _0xef4cad.save();
  _0xef4cad.translate(27 * _0xbde94f + _0x438924, _0x2003a3);
  _0xef4cad.globalAlpha = 1;
  circle(_0xef4cad, 0, 0, _0x4ceb46);
  fill_path(_0xef4cad, _0x3388b2[4]);
  return _0x18442d;
}
function create_hurt_rabbit(_0x2ae91b, _0x3e7f65) {
  var _0xeed21d = document.createElement("canvas");
  var _0x229e12 = _0xeed21d.getContext("2d");
  var _0x4dc5b6 = _0x2ae91b * 85;
  var _0x1cbe8d = _0x2ae91b * 115;
  var _0x109098 = _0x2ae91b * 6;
  var _0x41cae4 = _0x2ae91b * 4;
  _0xeed21d.width = _0x4dc5b6;
  _0xeed21d.height = _0x1cbe8d;
  _0x229e12.translate(-130 * _0x2ae91b, -60 * _0x2ae91b);
  _0x229e12.globalAlpha = 1;
  _0x229e12.beginPath();
  _0x229e12.bezierCurveTo(
    190 * _0x2ae91b,
    87 * _0x2ae91b,
    201 * _0x2ae91b,
    59 * _0x2ae91b,
    208 * _0x2ae91b,
    64 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    213 * _0x2ae91b,
    68 * _0x2ae91b,
    204 * _0x2ae91b,
    93 * _0x2ae91b,
    195 * _0x2ae91b,
    109 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    195 * _0x2ae91b,
    109 * _0x2ae91b,
    202 * _0x2ae91b,
    124 * _0x2ae91b,
    191 * _0x2ae91b,
    141 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    182 * _0x2ae91b,
    151 * _0x2ae91b,
    164 * _0x2ae91b,
    155 * _0x2ae91b,
    148 * _0x2ae91b,
    144 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    136 * _0x2ae91b,
    135 * _0x2ae91b,
    138 * _0x2ae91b,
    111 * _0x2ae91b,
    145 * _0x2ae91b,
    104 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    140 * _0x2ae91b,
    92 * _0x2ae91b,
    131 * _0x2ae91b,
    67 * _0x2ae91b,
    138 * _0x2ae91b,
    63 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    145 * _0x2ae91b,
    61 * _0x2ae91b,
    153 * _0x2ae91b,
    82 * _0x2ae91b,
    155 * _0x2ae91b,
    96 * _0x2ae91b
  );
  _0x229e12.bezierCurveTo(
    167 * _0x2ae91b,
    91 * _0x2ae91b,
    178 * _0x2ae91b,
    92 * _0x2ae91b,
    187 * _0x2ae91b,
    98 * _0x2ae91b
  );
  _0x229e12.closePath();
  fill_path(_0x229e12, _0x3e7f65, _0x3e7f65, _0x41cae4);
  return _0xeed21d;
}
function create_hurt_wolf(_0x431255, _0xdfe952) {
  var _0x1765b4 = document.createElement("canvas");
  var _0x3f85c5 = _0x1765b4.getContext("2d");
  _0x1765b4.width = 188 * _0x431255;
  _0x1765b4.height = 190 * _0x431255;
  _0x3f85c5.beginPath();
  _0x3f85c5.lineCap = "round";
  _0x3f85c5.lineJoin = "round";
  _0x3f85c5.moveTo(
    33.00567626953125 * _0x431255,
    95.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    42.00567626953125 * _0x431255,
    87.44320678710938 * _0x431255,
    48.00567626953125 * _0x431255,
    51.443206787109375 * _0x431255,
    74.00567626953125 * _0x431255,
    47.443206787109375 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    100.00567626953125 * _0x431255,
    42.443206787109375 * _0x431255,
    118.00567626953125 * _0x431255,
    49.443206787109375 * _0x431255,
    131.00567626953125 * _0x431255,
    55.443206787109375 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    140.00567626953125 * _0x431255,
    70.44320678710938 * _0x431255,
    145.00567626953125 * _0x431255,
    87.44320678710938 * _0x431255,
    152.00567626953125 * _0x431255,
    94.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    149.00567626953125 * _0x431255,
    99.44320678710938 * _0x431255,
    147.00567626953125 * _0x431255,
    98.44320678710938 * _0x431255,
    141.00567626953125 * _0x431255,
    101.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    147.00567626953125 * _0x431255,
    108.44320678710938 * _0x431255,
    147.00567626953125 * _0x431255,
    111.44320678710938 * _0x431255,
    147.00567626953125 * _0x431255,
    112.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    143.00567626953125 * _0x431255,
    112.44320678710938 * _0x431255,
    141.00567626953125 * _0x431255,
    112.44320678710938 * _0x431255,
    137.00567626953125 * _0x431255,
    111.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    138.00567626953125 * _0x431255,
    117.44320678710938 * _0x431255,
    138.00567626953125 * _0x431255,
    120.44320678710938 * _0x431255,
    138.00567626953125 * _0x431255,
    124.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    125.00567626953125 * _0x431255,
    107.44320678710938 * _0x431255,
    121.00567626953125 * _0x431255,
    124.44320678710938 * _0x431255,
    110.00567626953125 * _0x431255,
    141.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    102.00567626953125 * _0x431255,
    158.44320678710938 * _0x431255,
    89.00567626953125 * _0x431255,
    158.44320678710938 * _0x431255,
    80.00567626953125 * _0x431255,
    144.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    61.00567626953125 * _0x431255,
    111.44320678710938 * _0x431255,
    56.00567626953125 * _0x431255,
    117.44320678710938 * _0x431255,
    48.00567626953125 * _0x431255,
    120.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    46.00567626953125 * _0x431255,
    118.44320678710938 * _0x431255,
    47.00567626953125 * _0x431255,
    112.44320678710938 * _0x431255,
    48.00567626953125 * _0x431255,
    107.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    43.00567626953125 * _0x431255,
    111.44320678710938 * _0x431255,
    40.00567626953125 * _0x431255,
    111.44320678710938 * _0x431255,
    37.00567626953125 * _0x431255,
    110.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    39.50567626953125 * _0x431255,
    104.94320678710938 * _0x431255,
    39.50567626953125 * _0x431255,
    104.94320678710938 * _0x431255,
    42.00567626953125 * _0x431255,
    99.44320678710938 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    33.00567626953125 * _0x431255,
    99.44320678710938 * _0x431255,
    33.00567626953125 * _0x431255,
    98.44320678710938 * _0x431255,
    33.00567626953125 * _0x431255,
    96.44320678710938 * _0x431255
  );
  _0x3f85c5.closePath();
  fill_path(_0x3f85c5, _0xdfe952[0], _0xdfe952[0], 4 * _0x431255);
  _0x3f85c5.beginPath();
  _0x3f85c5.lineCap = "round";
  _0x3f85c5.lineJoin = "round";
  _0x3f85c5.moveTo(
    51.00567626953125 * _0x431255,
    72.53409576416016 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    48.00567626953125 * _0x431255,
    56.534095764160156 * _0x431255,
    48.00567626953125 * _0x431255,
    49.534095764160156 * _0x431255,
    54.00567626953125 * _0x431255,
    35.534095764160156 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    58.00567626953125 * _0x431255,
    26.534095764160156 * _0x431255,
    65.00567626953125 * _0x431255,
    27.534095764160156 * _0x431255,
    73.00567626953125 * _0x431255,
    40.534095764160156 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    81.00567626953125 * _0x431255,
    49.534095764160156 * _0x431255,
    82.00567626953125 * _0x431255,
    50.534095764160156 * _0x431255,
    83.00567626953125 * _0x431255,
    51.534095764160156 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    77.00567626953125 * _0x431255,
    71.53409576416016 * _0x431255,
    64.00567626953125 * _0x431255,
    75.53409576416016 * _0x431255,
    51.00567626953125 * _0x431255,
    72.53409576416016 * _0x431255
  );
  _0x3f85c5.closePath();
  fill_path(_0x3f85c5, _0xdfe952[0], _0xdfe952[0], 2 * _0x431255);
  _0x3f85c5.beginPath();
  _0x3f85c5.lineCap = "round";
  _0x3f85c5.lineJoin = "round";
  _0x3f85c5.moveTo(
    105.00567626953125 * _0x431255,
    50.53410339355469 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    112.00567626953125 * _0x431255,
    48.53410339355469 * _0x431255,
    125.00567626953125 * _0x431255,
    21.534103393554688 * _0x431255,
    132.00567626953125 * _0x431255,
    33.53410339355469 * _0x431255
  );
  _0x3f85c5.bezierCurveTo(
    138.00567626953125 * _0x431255,
    42.53410339355469 * _0x431255,
    140.00567626953125 * _0x431255,
    64.53410339355469 * _0x431255,
    136.00567626953125 * _0x431255,
    75.53410339355469 * _0x431255
  );
  _0x3f85c5.closePath();
  fill_path(_0x3f85c5, _0xdfe952[0], _0xdfe952[0], 2 * _0x431255);
  return _0x1765b4;
}
function create_wolf(_0x5eb25d, _0x45337c) {
  var _0x45c042 = document.createElement("canvas");
  var _0x1f2ce8 = _0x45c042.getContext("2d");
  _0x45c042.width = 188 * _0x5eb25d;
  _0x45c042.height = 190 * _0x5eb25d;
  _0x1f2ce8.globalAlpha = 0.5;
  _0x1f2ce8.translate(0, 5 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    33.00567626953125 * _0x5eb25d,
    95.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    42.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    51.443206787109375 * _0x5eb25d,
    74.00567626953125 * _0x5eb25d,
    47.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    100.00567626953125 * _0x5eb25d,
    42.443206787109375 * _0x5eb25d,
    118.00567626953125 * _0x5eb25d,
    49.443206787109375 * _0x5eb25d,
    131.00567626953125 * _0x5eb25d,
    55.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    140.00567626953125 * _0x5eb25d,
    70.44320678710938 * _0x5eb25d,
    145.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    152.00567626953125 * _0x5eb25d,
    94.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    149.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    101.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    147.00567626953125 * _0x5eb25d,
    108.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    143.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    137.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    138.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    125.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d,
    121.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d,
    110.00567626953125 * _0x5eb25d,
    141.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    102.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    89.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    80.00567626953125 * _0x5eb25d,
    144.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    61.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    56.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    46.00567626953125 * _0x5eb25d,
    118.44320678710938 * _0x5eb25d,
    47.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    43.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    40.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    37.00567626953125 * _0x5eb25d,
    110.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    42.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    33.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    96.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[0], _0x45337c[0], 4 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    60.00567626953125 * _0x5eb25d,
    99.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    70.00567626953125 * _0x5eb25d,
    82.35227966308594 * _0x5eb25d,
    85.00567626953125 * _0x5eb25d,
    86.35227966308594 * _0x5eb25d,
    87.00567626953125 * _0x5eb25d,
    97.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    89.00567626953125 * _0x5eb25d,
    101.35227966308594 * _0x5eb25d,
    88.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    87.00567626953125 * _0x5eb25d,
    110.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    89.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    91.00567626953125 * _0x5eb25d,
    112.35227966308594 * _0x5eb25d,
    93.00567626953125 * _0x5eb25d,
    115.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    96.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    99.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    100.00567626953125 * _0x5eb25d,
    110.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    98.00567626953125 * _0x5eb25d,
    92.35227966308594 * _0x5eb25d,
    103.00567626953125 * _0x5eb25d,
    86.35227966308594 * _0x5eb25d,
    113.00567626953125 * _0x5eb25d,
    89.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    122.00567626953125 * _0x5eb25d,
    92.35227966308594 * _0x5eb25d,
    123.00567626953125 * _0x5eb25d,
    94.35227966308594 * _0x5eb25d,
    126.00567626953125 * _0x5eb25d,
    98.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    124.00567626953125 * _0x5eb25d,
    102.35227966308594 * _0x5eb25d,
    123.00567626953125 * _0x5eb25d,
    103.35227966308594 * _0x5eb25d,
    121.00567626953125 * _0x5eb25d,
    104.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    124.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    126.00567626953125 * _0x5eb25d,
    107.35227966308594 * _0x5eb25d,
    129.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    115.00567626953125 * _0x5eb25d,
    122.35227966308594 * _0x5eb25d,
    113.00567626953125 * _0x5eb25d,
    145.35227966308594 * _0x5eb25d,
    100.00567626953125 * _0x5eb25d,
    152.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    91.00567626953125 * _0x5eb25d,
    158.35227966308594 * _0x5eb25d,
    83.00567626953125 * _0x5eb25d,
    149.35227966308594 * _0x5eb25d,
    76.00567626953125 * _0x5eb25d,
    138.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    67.00567626953125 * _0x5eb25d,
    114.35227966308594 * _0x5eb25d,
    63.00567626953125 * _0x5eb25d,
    113.35227966308594 * _0x5eb25d,
    59.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    62.00567626953125 * _0x5eb25d,
    107.35227966308594 * _0x5eb25d,
    64.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    66.00567626953125 * _0x5eb25d,
    104.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    63.00567626953125 * _0x5eb25d,
    100.35227966308594 * _0x5eb25d,
    62.00567626953125 * _0x5eb25d,
    100.35227966308594 * _0x5eb25d,
    60.00567626953125 * _0x5eb25d,
    99.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[0], _0x45337c[0], 2 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    51.00567626953125 * _0x5eb25d,
    72.53409576416016 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    48.00567626953125 * _0x5eb25d,
    56.534095764160156 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    49.534095764160156 * _0x5eb25d,
    54.00567626953125 * _0x5eb25d,
    35.534095764160156 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    58.00567626953125 * _0x5eb25d,
    26.534095764160156 * _0x5eb25d,
    65.00567626953125 * _0x5eb25d,
    27.534095764160156 * _0x5eb25d,
    73.00567626953125 * _0x5eb25d,
    40.534095764160156 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    81.00567626953125 * _0x5eb25d,
    49.534095764160156 * _0x5eb25d,
    82.00567626953125 * _0x5eb25d,
    50.534095764160156 * _0x5eb25d,
    83.00567626953125 * _0x5eb25d,
    51.534095764160156 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    77.00567626953125 * _0x5eb25d,
    71.53409576416016 * _0x5eb25d,
    64.00567626953125 * _0x5eb25d,
    75.53409576416016 * _0x5eb25d,
    51.00567626953125 * _0x5eb25d,
    72.53409576416016 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[0], _0x45337c[0], 2 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    105.00567626953125 * _0x5eb25d,
    50.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    112.00567626953125 * _0x5eb25d,
    48.53410339355469 * _0x5eb25d,
    125.00567626953125 * _0x5eb25d,
    21.534103393554688 * _0x5eb25d,
    132.00567626953125 * _0x5eb25d,
    33.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    138.00567626953125 * _0x5eb25d,
    42.53410339355469 * _0x5eb25d,
    140.00567626953125 * _0x5eb25d,
    64.53410339355469 * _0x5eb25d,
    136.00567626953125 * _0x5eb25d,
    75.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[0], _0x45337c[0], 2 * _0x5eb25d);
  _0x1f2ce8.globalAlpha = 1;
  _0x1f2ce8.translate(0, -5 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    33.00567626953125 * _0x5eb25d,
    95.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    42.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    51.443206787109375 * _0x5eb25d,
    74.00567626953125 * _0x5eb25d,
    47.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    100.00567626953125 * _0x5eb25d,
    42.443206787109375 * _0x5eb25d,
    118.00567626953125 * _0x5eb25d,
    49.443206787109375 * _0x5eb25d,
    131.00567626953125 * _0x5eb25d,
    55.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    140.00567626953125 * _0x5eb25d,
    70.44320678710938 * _0x5eb25d,
    145.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    152.00567626953125 * _0x5eb25d,
    94.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    149.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    101.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    147.00567626953125 * _0x5eb25d,
    108.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    143.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    137.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    138.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    125.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d,
    121.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d,
    110.00567626953125 * _0x5eb25d,
    141.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    102.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    89.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    80.00567626953125 * _0x5eb25d,
    144.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    61.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    56.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    46.00567626953125 * _0x5eb25d,
    118.44320678710938 * _0x5eb25d,
    47.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    43.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    40.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    37.00567626953125 * _0x5eb25d,
    110.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    42.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    33.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    96.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[1], _0x45337c[2], 3 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    60.00567626953125 * _0x5eb25d,
    99.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    70.00567626953125 * _0x5eb25d,
    82.35227966308594 * _0x5eb25d,
    85.00567626953125 * _0x5eb25d,
    86.35227966308594 * _0x5eb25d,
    87.00567626953125 * _0x5eb25d,
    97.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    89.00567626953125 * _0x5eb25d,
    101.35227966308594 * _0x5eb25d,
    88.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    87.00567626953125 * _0x5eb25d,
    110.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    89.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    91.00567626953125 * _0x5eb25d,
    112.35227966308594 * _0x5eb25d,
    93.00567626953125 * _0x5eb25d,
    115.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    96.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    99.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d,
    100.00567626953125 * _0x5eb25d,
    110.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    98.00567626953125 * _0x5eb25d,
    92.35227966308594 * _0x5eb25d,
    103.00567626953125 * _0x5eb25d,
    86.35227966308594 * _0x5eb25d,
    113.00567626953125 * _0x5eb25d,
    89.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    122.00567626953125 * _0x5eb25d,
    92.35227966308594 * _0x5eb25d,
    123.00567626953125 * _0x5eb25d,
    94.35227966308594 * _0x5eb25d,
    126.00567626953125 * _0x5eb25d,
    98.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    124.00567626953125 * _0x5eb25d,
    102.35227966308594 * _0x5eb25d,
    123.00567626953125 * _0x5eb25d,
    103.35227966308594 * _0x5eb25d,
    121.00567626953125 * _0x5eb25d,
    104.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    124.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    126.00567626953125 * _0x5eb25d,
    107.35227966308594 * _0x5eb25d,
    129.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    115.00567626953125 * _0x5eb25d,
    122.35227966308594 * _0x5eb25d,
    113.00567626953125 * _0x5eb25d,
    145.35227966308594 * _0x5eb25d,
    100.00567626953125 * _0x5eb25d,
    152.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    91.00567626953125 * _0x5eb25d,
    158.35227966308594 * _0x5eb25d,
    83.00567626953125 * _0x5eb25d,
    149.35227966308594 * _0x5eb25d,
    76.00567626953125 * _0x5eb25d,
    138.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    67.00567626953125 * _0x5eb25d,
    114.35227966308594 * _0x5eb25d,
    63.00567626953125 * _0x5eb25d,
    113.35227966308594 * _0x5eb25d,
    59.00567626953125 * _0x5eb25d,
    111.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    62.00567626953125 * _0x5eb25d,
    107.35227966308594 * _0x5eb25d,
    64.00567626953125 * _0x5eb25d,
    105.35227966308594 * _0x5eb25d,
    66.00567626953125 * _0x5eb25d,
    104.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    63.00567626953125 * _0x5eb25d,
    100.35227966308594 * _0x5eb25d,
    62.00567626953125 * _0x5eb25d,
    100.35227966308594 * _0x5eb25d,
    60.00567626953125 * _0x5eb25d,
    99.35227966308594 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[3]);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    33.00567626953125 * _0x5eb25d,
    95.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    42.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    51.443206787109375 * _0x5eb25d,
    74.00567626953125 * _0x5eb25d,
    47.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    100.00567626953125 * _0x5eb25d,
    42.443206787109375 * _0x5eb25d,
    118.00567626953125 * _0x5eb25d,
    49.443206787109375 * _0x5eb25d,
    131.00567626953125 * _0x5eb25d,
    55.443206787109375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    140.00567626953125 * _0x5eb25d,
    70.44320678710938 * _0x5eb25d,
    145.00567626953125 * _0x5eb25d,
    87.44320678710938 * _0x5eb25d,
    152.00567626953125 * _0x5eb25d,
    94.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    149.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    101.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    147.00567626953125 * _0x5eb25d,
    108.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    147.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    143.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    141.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    137.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    138.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d,
    138.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    125.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d,
    121.00567626953125 * _0x5eb25d,
    124.44320678710938 * _0x5eb25d,
    110.00567626953125 * _0x5eb25d,
    141.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    102.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    89.00567626953125 * _0x5eb25d,
    158.44320678710938 * _0x5eb25d,
    80.00567626953125 * _0x5eb25d,
    144.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    61.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    56.00567626953125 * _0x5eb25d,
    117.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    120.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    46.00567626953125 * _0x5eb25d,
    118.44320678710938 * _0x5eb25d,
    47.00567626953125 * _0x5eb25d,
    112.44320678710938 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    107.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    43.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    40.00567626953125 * _0x5eb25d,
    111.44320678710938 * _0x5eb25d,
    37.00567626953125 * _0x5eb25d,
    110.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    39.50567626953125 * _0x5eb25d,
    104.94320678710938 * _0x5eb25d,
    42.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    33.00567626953125 * _0x5eb25d,
    99.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    98.44320678710938 * _0x5eb25d,
    33.00567626953125 * _0x5eb25d,
    96.44320678710938 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, undefined, _0x45337c[2], 3 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    51.00567626953125 * _0x5eb25d,
    72.53409576416016 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    48.00567626953125 * _0x5eb25d,
    56.534095764160156 * _0x5eb25d,
    48.00567626953125 * _0x5eb25d,
    49.534095764160156 * _0x5eb25d,
    54.00567626953125 * _0x5eb25d,
    35.534095764160156 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    58.00567626953125 * _0x5eb25d,
    26.534095764160156 * _0x5eb25d,
    65.00567626953125 * _0x5eb25d,
    27.534095764160156 * _0x5eb25d,
    73.00567626953125 * _0x5eb25d,
    40.534095764160156 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    81.00567626953125 * _0x5eb25d,
    49.534095764160156 * _0x5eb25d,
    82.00567626953125 * _0x5eb25d,
    50.534095764160156 * _0x5eb25d,
    83.00567626953125 * _0x5eb25d,
    51.534095764160156 * _0x5eb25d
  );
  fill_path(_0x1f2ce8, _0x45337c[1], _0x45337c[2], 3 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    105.00567626953125 * _0x5eb25d,
    50.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    112.00567626953125 * _0x5eb25d,
    48.53410339355469 * _0x5eb25d,
    125.00567626953125 * _0x5eb25d,
    21.534103393554688 * _0x5eb25d,
    132.00567626953125 * _0x5eb25d,
    33.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    138.00567626953125 * _0x5eb25d,
    42.53410339355469 * _0x5eb25d,
    140.00567626953125 * _0x5eb25d,
    64.53410339355469 * _0x5eb25d,
    136.00567626953125 * _0x5eb25d,
    75.53410339355469 * _0x5eb25d
  );
  fill_path(_0x1f2ce8, _0x45337c[1], _0x45337c[2], 3 * _0x5eb25d);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    57.00567626953125 * _0x5eb25d,
    68.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    63.00567626953125 * _0x5eb25d,
    69.53410339355469 * _0x5eb25d,
    69.00567626953125 * _0x5eb25d,
    66.53410339355469 * _0x5eb25d,
    73.00567626953125 * _0x5eb25d,
    60.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    66.00567626953125 * _0x5eb25d,
    47.53410339355469 * _0x5eb25d,
    61.00567626953125 * _0x5eb25d,
    42.53410339355469 * _0x5eb25d,
    58.00567626953125 * _0x5eb25d,
    49.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    56.00567626953125 * _0x5eb25d,
    59.53410339355469 * _0x5eb25d,
    56.00567626953125 * _0x5eb25d,
    64.53410339355469 * _0x5eb25d,
    57.00567626953125 * _0x5eb25d,
    67.53410339355469 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[3]);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    115.00567626953125 * _0x5eb25d,
    59.715911865234375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    119.00567626953125 * _0x5eb25d,
    48.715911865234375 * _0x5eb25d,
    126.00567626953125 * _0x5eb25d,
    41.715911865234375 * _0x5eb25d,
    129.00567626953125 * _0x5eb25d,
    48.715911865234375 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    131.00567626953125 * _0x5eb25d,
    56.715911865234375 * _0x5eb25d,
    133.00567626953125 * _0x5eb25d,
    71.71591186523438 * _0x5eb25d,
    127.00567626953125 * _0x5eb25d,
    68.71591186523438 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    120.00567626953125 * _0x5eb25d,
    67.71591186523438 * _0x5eb25d,
    114.00567626953125 * _0x5eb25d,
    59.715911865234375 * _0x5eb25d,
    116.00567626953125 * _0x5eb25d,
    58.715911865234375 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[3]);
  circle(_0x1f2ce8, 77 * _0x5eb25d, 107 * _0x5eb25d, 6 * _0x5eb25d);
  fill_path(_0x1f2ce8, _0x45337c[2]);
  circle(_0x1f2ce8, 110 * _0x5eb25d, 107 * _0x5eb25d, 6 * _0x5eb25d);
  fill_path(_0x1f2ce8, _0x45337c[2]);
  circle(_0x1f2ce8, 75 * _0x5eb25d, 105 * _0x5eb25d, 3 * _0x5eb25d);
  fill_path(_0x1f2ce8, _0x45337c[4]);
  circle(_0x1f2ce8, 108 * _0x5eb25d, 105 * _0x5eb25d, 3 * _0x5eb25d);
  fill_path(_0x1f2ce8, _0x45337c[4]);
  _0x1f2ce8.beginPath();
  _0x1f2ce8.lineCap = "round";
  _0x1f2ce8.lineJoin = "round";
  _0x1f2ce8.moveTo(
    88.00567626953125 * _0x5eb25d,
    141.4431915283203 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    93.00567626953125 * _0x5eb25d,
    137.4431915283203 * _0x5eb25d,
    96.00567626953125 * _0x5eb25d,
    138.4431915283203 * _0x5eb25d,
    100.00567626953125 * _0x5eb25d,
    141.4431915283203 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    103.00567626953125 * _0x5eb25d,
    143.4431915283203 * _0x5eb25d,
    101.00567626953125 * _0x5eb25d,
    149.4431915283203 * _0x5eb25d,
    95.00567626953125 * _0x5eb25d,
    148.4431915283203 * _0x5eb25d
  );
  _0x1f2ce8.bezierCurveTo(
    85.00567626953125 * _0x5eb25d,
    148.4431915283203 * _0x5eb25d,
    86.00567626953125 * _0x5eb25d,
    145.4431915283203 * _0x5eb25d,
    88.00567626953125 * _0x5eb25d,
    142.4431915283203 * _0x5eb25d
  );
  _0x1f2ce8.closePath();
  fill_path(_0x1f2ce8, _0x45337c[1]);
  return _0x45c042;
}
function create_meat(_0x5c3555, _0x2e0993, _0x18565b) {
  var _0x5eabac = document.createElement("canvas");
  var _0xf9c330 = _0x5eabac.getContext("2d");
  var _0x230447 = _0x5c3555 * 55;
  var _0x82591c = _0x5c3555 * 55;
  var _0x18e1a9 = _0x5c3555 * 8;
  var _0x28753f = _0x5c3555 * 4;
  _0x5eabac.width = _0x230447;
  _0x5eabac.height = _0x82591c;
  _0xf9c330.translate(-65 * _0x5c3555, -55 * _0x5c3555 + _0x18e1a9);
  _0xf9c330.globalAlpha = 1;
  _0xf9c330.beginPath();
  _0xf9c330.moveTo(95 * _0x5c3555, 60 * _0x5c3555);
  _0xf9c330.bezierCurveTo(
    107 * _0x5c3555,
    62 * _0x5c3555,
    110 * _0x5c3555,
    73 * _0x5c3555,
    107 * _0x5c3555,
    79 * _0x5c3555
  );
  _0xf9c330.bezierCurveTo(
    104 * _0x5c3555,
    85 * _0x5c3555,
    85 * _0x5c3555,
    93 * _0x5c3555,
    81 * _0x5c3555,
    88 * _0x5c3555
  );
  _0xf9c330.bezierCurveTo(
    74 * _0x5c3555,
    80 * _0x5c3555,
    85 * _0x5c3555,
    60 * _0x5c3555,
    95 * _0x5c3555,
    60 * _0x5c3555
  );
  _0xf9c330.closePath();
  fill_path(_0xf9c330, _0x18565b[0], _0x18565b[1], 3);
  _0xf9c330.globalAlpha = 1;
  _0xf9c330.beginPath();
  _0xf9c330.moveTo(91 * _0x5c3555, 70 * _0x5c3555);
  _0xf9c330.bezierCurveTo(
    91 * _0x5c3555,
    75 * _0x5c3555,
    100 * _0x5c3555,
    76 * _0x5c3555,
    100 * _0x5c3555,
    73 * _0x5c3555
  );
  _0xf9c330.bezierCurveTo(
    100 * _0x5c3555,
    69 * _0x5c3555,
    89 * _0x5c3555,
    65 * _0x5c3555,
    91 * _0x5c3555,
    70 * _0x5c3555
  );
  _0xf9c330.closePath();
  fill_path(_0xf9c330, _0x18565b[2], _0x18565b[3], 3);
  return _0x5eabac;
}
function create_hurt_spider(_0x135a99, _0x4042ed) {
  var _0x90a178 = document.createElement("canvas");
  var _0x4a0c8c = _0x90a178.getContext("2d");
  _0x90a178.width = 238 * _0x135a99;
  _0x90a178.height = 230 * _0x135a99;
  _0x4a0c8c.translate(-93 * _0x135a99, -110 * _0x135a99);
  circle(_0x4a0c8c, 213.5 * _0x135a99, 256.75 * _0x135a99, 75 * _0x135a99);
  fill_path(_0x4a0c8c, _0x4042ed);
  circle(_0x4a0c8c, 213.5 * _0x135a99, 175.75 * _0x135a99, 25 * _0x135a99);
  fill_path(_0x4a0c8c, _0x4042ed);
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(156.5 * _0x135a99, 137.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    170.5 * _0x135a99,
    173.75 * _0x135a99,
    195.5 * _0x135a99,
    177.75 * _0x135a99,
    209.5 * _0x135a99,
    177.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(217.5 * _0x135a99, 178.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    251.5 * _0x135a99,
    177.75 * _0x135a99,
    263.5 * _0x135a99,
    153.75 * _0x135a99,
    270.5 * _0x135a99,
    140.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(130.5 * _0x135a99, 124.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    153.5 * _0x135a99,
    185.75 * _0x135a99,
    198.5 * _0x135a99,
    185.75 * _0x135a99,
    213.5 * _0x135a99,
    185.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(214.5 * _0x135a99, 183.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    265.5 * _0x135a99,
    192.75 * _0x135a99,
    293.5 * _0x135a99,
    141.75 * _0x135a99,
    297.5 * _0x135a99,
    124.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(107.5 * _0x135a99, 213.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    151.5 * _0x135a99,
    190.75 * _0x135a99,
    198.5 * _0x135a99,
    184.75 * _0x135a99,
    210.5 * _0x135a99,
    184.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(212.5 * _0x135a99, 187.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    258.5 * _0x135a99,
    182.75 * _0x135a99,
    286.5 * _0x135a99,
    194.75 * _0x135a99,
    314.5 * _0x135a99,
    206.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(102.5 * _0x135a99, 258.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    142.5 * _0x135a99,
    200.75 * _0x135a99,
    193.5 * _0x135a99,
    194.75 * _0x135a99,
    211.5 * _0x135a99,
    185.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(214.5 * _0x135a99, 192.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    276.5 * _0x135a99,
    194.75 * _0x135a99,
    306.5 * _0x135a99,
    233.75 * _0x135a99,
    316.5 * _0x135a99,
    246.75 * _0x135a99
  );
  _0x4a0c8c.lineWidth = 17 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(219.5 * _0x135a99, 158.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    226.5 * _0x135a99,
    159.75 * _0x135a99,
    227.5 * _0x135a99,
    147.75 * _0x135a99,
    219.5 * _0x135a99,
    145.75 * _0x135a99
  );
  _0x4a0c8c.closePath();
  _0x4a0c8c.lineWidth = 10 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  _0x4a0c8c.beginPath();
  _0x4a0c8c.lineCap = "round";
  _0x4a0c8c.lineJoin = "round";
  _0x4a0c8c.moveTo(210.5 * _0x135a99, 160.75 * _0x135a99);
  _0x4a0c8c.bezierCurveTo(
    203.5 * _0x135a99,
    159.75 * _0x135a99,
    199.5 * _0x135a99,
    146.75 * _0x135a99,
    210.5 * _0x135a99,
    145.75 * _0x135a99
  );
  _0x4a0c8c.closePath();
  _0x4a0c8c.lineWidth = 10 * _0x135a99;
  _0x4a0c8c.strokeStyle = _0x4042ed;
  _0x4a0c8c.stroke();
  return _0x90a178;
}
function create_spider(_0x5e7941, _0x411f18) {
  var _0x5cf93e = document.createElement("canvas");
  var _0x5df7ab = _0x5cf93e.getContext("2d");
  _0x5cf93e.width = 238 * _0x5e7941;
  _0x5cf93e.height = 230 * _0x5e7941;
  _0x5df7ab.translate(-93 * _0x5e7941, -110 * _0x5e7941 + 5 * _0x5e7941);
  _0x5df7ab.globalAlpha = 0.3;
  circle(_0x5df7ab, 213.5 * _0x5e7941, 256.75 * _0x5e7941, 75 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[5]);
  circle(_0x5df7ab, 213.5 * _0x5e7941, 175.75 * _0x5e7941, 25 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[5]);
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(156.5 * _0x5e7941, 137.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    170.5 * _0x5e7941,
    173.75 * _0x5e7941,
    195.5 * _0x5e7941,
    177.75 * _0x5e7941,
    209.5 * _0x5e7941,
    177.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(217.5 * _0x5e7941, 178.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    251.5 * _0x5e7941,
    177.75 * _0x5e7941,
    263.5 * _0x5e7941,
    153.75 * _0x5e7941,
    270.5 * _0x5e7941,
    140.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(130.5 * _0x5e7941, 124.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    153.5 * _0x5e7941,
    185.75 * _0x5e7941,
    198.5 * _0x5e7941,
    185.75 * _0x5e7941,
    213.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 183.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    265.5 * _0x5e7941,
    192.75 * _0x5e7941,
    293.5 * _0x5e7941,
    141.75 * _0x5e7941,
    297.5 * _0x5e7941,
    124.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(107.5 * _0x5e7941, 213.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    151.5 * _0x5e7941,
    190.75 * _0x5e7941,
    198.5 * _0x5e7941,
    184.75 * _0x5e7941,
    210.5 * _0x5e7941,
    184.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(212.5 * _0x5e7941, 187.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    258.5 * _0x5e7941,
    182.75 * _0x5e7941,
    286.5 * _0x5e7941,
    194.75 * _0x5e7941,
    314.5 * _0x5e7941,
    206.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(102.5 * _0x5e7941, 258.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    142.5 * _0x5e7941,
    200.75 * _0x5e7941,
    193.5 * _0x5e7941,
    194.75 * _0x5e7941,
    211.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 192.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    276.5 * _0x5e7941,
    194.75 * _0x5e7941,
    306.5 * _0x5e7941,
    233.75 * _0x5e7941,
    316.5 * _0x5e7941,
    246.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[5];
  _0x5df7ab.stroke();
  _0x5df7ab.translate(0, -5);
  _0x5df7ab.globalAlpha = 1;
  circle(_0x5df7ab, 213.5 * _0x5e7941, 256.75 * _0x5e7941, 75 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[3]);
  circle(_0x5df7ab, 213.5 * _0x5e7941, 175.75 * _0x5e7941, 25 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[3]);
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(219.5 * _0x5e7941, 158.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    226.5 * _0x5e7941,
    159.75 * _0x5e7941,
    227.5 * _0x5e7941,
    147.75 * _0x5e7941,
    219.5 * _0x5e7941,
    145.75 * _0x5e7941
  );
  _0x5df7ab.closePath();
  _0x5df7ab.lineWidth = 10 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(210.5 * _0x5e7941, 160.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    203.5 * _0x5e7941,
    159.75 * _0x5e7941,
    199.5 * _0x5e7941,
    146.75 * _0x5e7941,
    210.5 * _0x5e7941,
    145.75 * _0x5e7941
  );
  _0x5df7ab.closePath();
  _0x5df7ab.lineWidth = 10 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(219.5 * _0x5e7941, 158.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    226.5 * _0x5e7941,
    159.75 * _0x5e7941,
    227.5 * _0x5e7941,
    147.75 * _0x5e7941,
    219.5 * _0x5e7941,
    145.75 * _0x5e7941
  );
  _0x5df7ab.closePath();
  _0x5df7ab.fillStyle = _0x411f18[0];
  _0x5df7ab.fill();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(210.5 * _0x5e7941, 160.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    203.5 * _0x5e7941,
    159.75 * _0x5e7941,
    199.5 * _0x5e7941,
    146.75 * _0x5e7941,
    210.5 * _0x5e7941,
    145.75 * _0x5e7941
  );
  _0x5df7ab.closePath();
  _0x5df7ab.fillStyle = _0x411f18[0];
  _0x5df7ab.fill();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(156.5 * _0x5e7941, 137.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    170.5 * _0x5e7941,
    173.75 * _0x5e7941,
    195.5 * _0x5e7941,
    177.75 * _0x5e7941,
    209.5 * _0x5e7941,
    177.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(217.5 * _0x5e7941, 178.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    251.5 * _0x5e7941,
    177.75 * _0x5e7941,
    263.5 * _0x5e7941,
    153.75 * _0x5e7941,
    270.5 * _0x5e7941,
    140.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(130.5 * _0x5e7941, 124.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    153.5 * _0x5e7941,
    185.75 * _0x5e7941,
    198.5 * _0x5e7941,
    185.75 * _0x5e7941,
    213.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 183.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    265.5 * _0x5e7941,
    192.75 * _0x5e7941,
    293.5 * _0x5e7941,
    141.75 * _0x5e7941,
    297.5 * _0x5e7941,
    124.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(107.5 * _0x5e7941, 213.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    151.5 * _0x5e7941,
    190.75 * _0x5e7941,
    198.5 * _0x5e7941,
    184.75 * _0x5e7941,
    210.5 * _0x5e7941,
    184.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(212.5 * _0x5e7941, 187.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    258.5 * _0x5e7941,
    182.75 * _0x5e7941,
    286.5 * _0x5e7941,
    194.75 * _0x5e7941,
    314.5 * _0x5e7941,
    206.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(102.5 * _0x5e7941, 258.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    142.5 * _0x5e7941,
    200.75 * _0x5e7941,
    193.5 * _0x5e7941,
    194.75 * _0x5e7941,
    211.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 192.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    276.5 * _0x5e7941,
    194.75 * _0x5e7941,
    306.5 * _0x5e7941,
    233.75 * _0x5e7941,
    316.5 * _0x5e7941,
    246.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 17 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[3];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(156.5 * _0x5e7941, 137.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    170.5 * _0x5e7941,
    173.75 * _0x5e7941,
    195.5 * _0x5e7941,
    177.75 * _0x5e7941,
    209.5 * _0x5e7941,
    177.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(217.5 * _0x5e7941, 178.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    251.5 * _0x5e7941,
    177.75 * _0x5e7941,
    263.5 * _0x5e7941,
    153.75 * _0x5e7941,
    270.5 * _0x5e7941,
    140.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(130.5 * _0x5e7941, 124.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    153.5 * _0x5e7941,
    185.75 * _0x5e7941,
    198.5 * _0x5e7941,
    185.75 * _0x5e7941,
    213.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 183.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    265.5 * _0x5e7941,
    192.75 * _0x5e7941,
    293.5 * _0x5e7941,
    141.75 * _0x5e7941,
    297.5 * _0x5e7941,
    124.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(107.5 * _0x5e7941, 213.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    151.5 * _0x5e7941,
    190.75 * _0x5e7941,
    198.5 * _0x5e7941,
    184.75 * _0x5e7941,
    210.5 * _0x5e7941,
    184.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(212.5 * _0x5e7941, 187.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    258.5 * _0x5e7941,
    182.75 * _0x5e7941,
    286.5 * _0x5e7941,
    194.75 * _0x5e7941,
    314.5 * _0x5e7941,
    206.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(102.5 * _0x5e7941, 258.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    142.5 * _0x5e7941,
    200.75 * _0x5e7941,
    193.5 * _0x5e7941,
    194.75 * _0x5e7941,
    211.5 * _0x5e7941,
    185.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  _0x5df7ab.beginPath();
  _0x5df7ab.lineCap = "round";
  _0x5df7ab.lineJoin = "round";
  _0x5df7ab.moveTo(214.5 * _0x5e7941, 192.75 * _0x5e7941);
  _0x5df7ab.bezierCurveTo(
    276.5 * _0x5e7941,
    194.75 * _0x5e7941,
    306.5 * _0x5e7941,
    233.75 * _0x5e7941,
    316.5 * _0x5e7941,
    246.75 * _0x5e7941
  );
  _0x5df7ab.lineWidth = 8 * _0x5e7941;
  _0x5df7ab.strokeStyle = _0x411f18[0];
  _0x5df7ab.stroke();
  circle(_0x5df7ab, 213.5 * _0x5e7941, 256.75 * _0x5e7941, 70 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[0]);
  circle(_0x5df7ab, 213.5 * _0x5e7941, 175.75 * _0x5e7941, 20 * _0x5e7941);
  fill_path(_0x5df7ab, _0x411f18[0]);
  circle(_0x5df7ab, 222 * _0x5e7941, 166 * _0x5e7941, 5 * _0x5e7941);
  _0x5df7ab.fillStyle = _0x411f18[2];
  _0x5df7ab.fill();
  circle(_0x5df7ab, 205 * _0x5e7941, 166 * _0x5e7941, 5 * _0x5e7941);
  _0x5df7ab.fillStyle = _0x411f18[2];
  _0x5df7ab.fill();
  circle(_0x5df7ab, 206.2 * _0x5e7941, 167 * _0x5e7941, 2.5 * _0x5e7941);
  _0x5df7ab.fillStyle = _0x411f18[4];
  _0x5df7ab.fill();
  circle(_0x5df7ab, 223.2 * _0x5e7941, 167 * _0x5e7941, 2.5 * _0x5e7941);
  _0x5df7ab.fillStyle = _0x411f18[4];
  _0x5df7ab.fill();
  _0x5df7ab.save();
  _0x5df7ab.translate(213.5 * _0x5e7941, 293.75 * _0x5e7941);
  _0x5df7ab.rotate(0.76);
  round_rect(
    _0x5df7ab,
    -22 * _0x5e7941,
    -21 * _0x5e7941,
    44 * _0x5e7941,
    42 * _0x5e7941,
    6 * _0x5e7941
  );
  _0x5df7ab.restore();
  _0x5df7ab.fillStyle = _0x411f18[1];
  _0x5df7ab.fill();
  _0x5df7ab.save();
  _0x5df7ab.translate(212.5 * _0x5e7941, 258.25 * _0x5e7941);
  _0x5df7ab.rotate(0.8);
  round_rect(
    _0x5df7ab,
    -15 * _0x5e7941,
    -14.5 * _0x5e7941,
    30 * _0x5e7941,
    29 * _0x5e7941,
    6 * _0x5e7941
  );
  _0x5df7ab.restore();
  _0x5df7ab.fillStyle = _0x411f18[1];
  _0x5df7ab.fill();
  return _0x5cf93e;
}
function create_web(_0x238be4, _0x9ea239) {
  var _0x31c7a3 = document.createElement("canvas");
  var _0x17c6ee = _0x31c7a3.getContext("2d");
  _0x31c7a3.width = 450 * _0x238be4;
  _0x31c7a3.height = 470 * _0x238be4;
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(226.5 * _0x238be4, 91.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    254.5 * _0x238be4,
    115.546875 * _0x238be4,
    261.5 * _0x238be4,
    115.546875 * _0x238be4,
    294.5 * _0x238be4,
    109.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    299.5 * _0x238be4,
    141.546875 * _0x238be4,
    315.5 * _0x238be4,
    151.546875 * _0x238be4,
    344.5 * _0x238be4,
    158.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    330.5 * _0x238be4,
    195.546875 * _0x238be4,
    341.5 * _0x238be4,
    207.546875 * _0x238be4,
    361.5 * _0x238be4,
    226.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    331.5 * _0x238be4,
    251.546875 * _0x238be4,
    335.5 * _0x238be4,
    270.546875 * _0x238be4,
    342.5 * _0x238be4,
    295.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    300.5 * _0x238be4,
    296.546875 * _0x238be4,
    293.5 * _0x238be4,
    325.546875 * _0x238be4,
    292.5 * _0x238be4,
    344.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    257.5 * _0x238be4,
    326.546875 * _0x238be4,
    242.5 * _0x238be4,
    338.546875 * _0x238be4,
    224.5 * _0x238be4,
    361.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    200.5 * _0x238be4,
    329.546875 * _0x238be4,
    180.5 * _0x238be4,
    334.546875 * _0x238be4,
    155.5 * _0x238be4,
    341.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    146.5 * _0x238be4,
    307.546875 * _0x238be4,
    140.5 * _0x238be4,
    302.546875 * _0x238be4,
    107.5 * _0x238be4,
    292.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    117.5 * _0x238be4,
    253.546875 * _0x238be4,
    109.5 * _0x238be4,
    244.546875 * _0x238be4,
    89.5 * _0x238be4,
    224.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    118.5 * _0x238be4,
    191.546875 * _0x238be4,
    114.5 * _0x238be4,
    182.546875 * _0x238be4,
    108.5 * _0x238be4,
    156.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    143.5 * _0x238be4,
    149.546875 * _0x238be4,
    150.5 * _0x238be4,
    136.546875 * _0x238be4,
    157.5 * _0x238be4,
    106.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    202.5 * _0x238be4,
    120.546875 * _0x238be4,
    211.5 * _0x238be4,
    103.546875 * _0x238be4,
    228.5 * _0x238be4,
    91.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(224.5 * _0x238be4, 129.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    247.5 * _0x238be4,
    147.546875 * _0x238be4,
    252.5 * _0x238be4,
    143.546875 * _0x238be4,
    274.5 * _0x238be4,
    141.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    279.5 * _0x238be4,
    163.546875 * _0x238be4,
    289.5 * _0x238be4,
    168.546875 * _0x238be4,
    311.5 * _0x238be4,
    178.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    301.5 * _0x238be4,
    199.546875 * _0x238be4,
    307.5 * _0x238be4,
    213.546875 * _0x238be4,
    323.5 * _0x238be4,
    226.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    303.5 * _0x238be4,
    240.546875 * _0x238be4,
    303.5 * _0x238be4,
    255.546875 * _0x238be4,
    312.5 * _0x238be4,
    275.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    281.5 * _0x238be4,
    278.546875 * _0x238be4,
    276.5 * _0x238be4,
    291.546875 * _0x238be4,
    272.5 * _0x238be4,
    313.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    248.5 * _0x238be4,
    301.546875 * _0x238be4,
    239.5 * _0x238be4,
    310.546875 * _0x238be4,
    224.5 * _0x238be4,
    324.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    211.5 * _0x238be4,
    304.546875 * _0x238be4,
    199.5 * _0x238be4,
    301.546875 * _0x238be4,
    176.5 * _0x238be4,
    309.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    165.5 * _0x238be4,
    276.546875 * _0x238be4,
    159.5 * _0x238be4,
    275.546875 * _0x238be4,
    138.5 * _0x238be4,
    274.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    148.5 * _0x238be4,
    248.546875 * _0x238be4,
    140.5 * _0x238be4,
    237.546875 * _0x238be4,
    125.5 * _0x238be4,
    225.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    145.5 * _0x238be4,
    205.546875 * _0x238be4,
    146.5 * _0x238be4,
    195.546875 * _0x238be4,
    142.5 * _0x238be4,
    176.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    173.5 * _0x238be4,
    164.546875 * _0x238be4,
    173.5 * _0x238be4,
    155.546875 * _0x238be4,
    178.5 * _0x238be4,
    140.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    214.5 * _0x238be4,
    143.546875 * _0x238be4,
    214.5 * _0x238be4,
    135.546875 * _0x238be4,
    226.5 * _0x238be4,
    129.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(224.5 * _0x238be4, 160.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    236.5 * _0x238be4,
    168.546875 * _0x238be4,
    239.5 * _0x238be4,
    168.546875 * _0x238be4,
    258.5 * _0x238be4,
    168.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    261.5 * _0x238be4,
    185.546875 * _0x238be4,
    268.5 * _0x238be4,
    187.546875 * _0x238be4,
    282.5 * _0x238be4,
    192.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    277.5 * _0x238be4,
    208.546875 * _0x238be4,
    283.5 * _0x238be4,
    216.546875 * _0x238be4,
    289.5 * _0x238be4,
    228.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    277.5 * _0x238be4,
    243.546875 * _0x238be4,
    280.5 * _0x238be4,
    253.546875 * _0x238be4,
    281.5 * _0x238be4,
    260.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    264.5 * _0x238be4,
    260.546875 * _0x238be4,
    259.5 * _0x238be4,
    269.546875 * _0x238be4,
    256.5 * _0x238be4,
    283.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    244.5 * _0x238be4,
    276.546875 * _0x238be4,
    232.5 * _0x238be4,
    283.546875 * _0x238be4,
    223.5 * _0x238be4,
    291.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    213.5 * _0x238be4,
    276.546875 * _0x238be4,
    205.5 * _0x238be4,
    278.546875 * _0x238be4,
    190.5 * _0x238be4,
    281.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    181.5 * _0x238be4,
    262.546875 * _0x238be4,
    173.5 * _0x238be4,
    259.546875 * _0x238be4,
    165.5 * _0x238be4,
    258.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    169.5 * _0x238be4,
    239.546875 * _0x238be4,
    167.5 * _0x238be4,
    233.546875 * _0x238be4,
    157.5 * _0x238be4,
    225.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    169.5 * _0x238be4,
    208.546875 * _0x238be4,
    170.5 * _0x238be4,
    203.546875 * _0x238be4,
    168.5 * _0x238be4,
    192.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    181.5 * _0x238be4,
    187.546875 * _0x238be4,
    188.5 * _0x238be4,
    179.546875 * _0x238be4,
    192.5 * _0x238be4,
    168.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    216.5 * _0x238be4,
    170.546875 * _0x238be4,
    218.5 * _0x238be4,
    163.546875 * _0x238be4,
    225.5 * _0x238be4,
    160.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(205.5 * _0x238be4, 194.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    216.5 * _0x238be4,
    192.546875 * _0x238be4,
    219.5 * _0x238be4,
    191.546875 * _0x238be4,
    225.5 * _0x238be4,
    185.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    232.5 * _0x238be4,
    193.546875 * _0x238be4,
    237.5 * _0x238be4,
    191.546875 * _0x238be4,
    246.5 * _0x238be4,
    192.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    249.5 * _0x238be4,
    202.546875 * _0x238be4,
    253.5 * _0x238be4,
    205.546875 * _0x238be4,
    258.5 * _0x238be4,
    207.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    259.5 * _0x238be4,
    222.546875 * _0x238be4,
    256.5 * _0x238be4,
    223.546875 * _0x238be4,
    265.5 * _0x238be4,
    226.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    256.5 * _0x238be4,
    231.546875 * _0x238be4,
    255.5 * _0x238be4,
    241.546875 * _0x238be4,
    259.5 * _0x238be4,
    248.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    250.5 * _0x238be4,
    245.546875 * _0x238be4,
    245.5 * _0x238be4,
    252.546875 * _0x238be4,
    243.5 * _0x238be4,
    260.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    234.5 * _0x238be4,
    256.546875 * _0x238be4,
    229.5 * _0x238be4,
    258.546875 * _0x238be4,
    223.5 * _0x238be4,
    265.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    218.5 * _0x238be4,
    255.546875 * _0x238be4,
    213.5 * _0x238be4,
    257.546875 * _0x238be4,
    204.5 * _0x238be4,
    261.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    203.5 * _0x238be4,
    251.546875 * _0x238be4,
    198.5 * _0x238be4,
    248.546875 * _0x238be4,
    189.5 * _0x238be4,
    244.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    194.5 * _0x238be4,
    237.546875 * _0x238be4,
    192.5 * _0x238be4,
    231.546875 * _0x238be4,
    184.5 * _0x238be4,
    225.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    191.5 * _0x238be4,
    211.546875 * _0x238be4,
    192.5 * _0x238be4,
    209.546875 * _0x238be4,
    190.5 * _0x238be4,
    204.546875 * _0x238be4
  );
  _0x17c6ee.bezierCurveTo(
    200.5 * _0x238be4,
    204.546875 * _0x238be4,
    204.5 * _0x238be4,
    198.546875 * _0x238be4,
    207.5 * _0x238be4,
    194.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(149.5 * _0x238be4, 93.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    287.5 * _0x238be4,
    332.546875 * _0x238be4,
    226 * _0x238be4,
    225.546875 * _0x238be4,
    302.5 * _0x238be4,
    357.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(224.5 * _0x238be4, 66.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    224.5 * _0x238be4,
    223.546875 * _0x238be4,
    224.5 * _0x238be4,
    223.546875 * _0x238be4,
    224.5 * _0x238be4,
    380.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(302.5 * _0x238be4, 88.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    222.5 * _0x238be4,
    227.546875 * _0x238be4,
    222.5 * _0x238be4,
    227.546875 * _0x238be4,
    142.5 * _0x238be4,
    366.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(361.5 * _0x238be4, 147.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    223 * _0x238be4,
    226.546875 * _0x238be4,
    223 * _0x238be4,
    226.546875 * _0x238be4,
    84.5 * _0x238be4,
    305.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(379.5 * _0x238be4, 225.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    221 * _0x238be4,
    225.546875 * _0x238be4,
    221 * _0x238be4,
    225.546875 * _0x238be4,
    62.5 * _0x238be4,
    225.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  _0x17c6ee.beginPath();
  _0x17c6ee.lineCap = "round";
  _0x17c6ee.lineJoin = "round";
  _0x17c6ee.moveTo(90.5 * _0x238be4, 147.546875 * _0x238be4);
  _0x17c6ee.bezierCurveTo(
    226.5 * _0x238be4,
    226.546875 * _0x238be4,
    226.5 * _0x238be4,
    226.546875 * _0x238be4,
    362.5 * _0x238be4,
    305.546875 * _0x238be4
  );
  _0x17c6ee.closePath();
  fill_path(_0x17c6ee, undefined, _0x9ea239[0], 4);
  return _0x31c7a3;
}
function create_dead_box(_0x181439, _0x4a8d17, _0x5ea6ec) {
  var _0x40dbf2 = document.createElement("canvas");
  var _0x2fcc90 = _0x40dbf2.getContext("2d");
  _0x40dbf2.width = 400 * _0x181439;
  _0x40dbf2.height = 400 * _0x181439;
  _0x2fcc90.save();
  _0x2fcc90.translate(202.5 * _0x181439, 147.5 * _0x181439);
  round_rect(
    _0x2fcc90,
    -96.5 * _0x181439,
    -21.5 * _0x181439,
    193 * _0x181439,
    193 * _0x181439,
    0 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[0], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(202.5 * _0x181439, 190.5 * _0x181439);
  round_rect(
    _0x2fcc90,
    96.5 * _0x181439,
    -21.5 * _0x181439,
    -193 * _0x181439,
    43 * _0x181439,
    0 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[2], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.save();
  _0x2fcc90.translate(202.5 * _0x181439, 233.5 * _0x181439);
  round_rect(
    _0x2fcc90,
    -96.5 * _0x181439,
    -20.5 * _0x181439,
    193 * _0x181439,
    41 * _0x181439,
    0 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(202.5 * _0x181439, 275 * _0x181439);
  round_rect(
    _0x2fcc90,
    96.5 * _0x181439,
    -21 * _0x181439,
    -193 * _0x181439,
    42 * _0x181439,
    0 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[0], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(201 * _0x181439, 212 * _0x181439);
  _0x2fcc90.rotate(8.64);
  round_rect(
    _0x2fcc90,
    -116 * _0x181439,
    -22 * _0x181439,
    232 * _0x181439,
    44 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(203.5 * _0x181439, 121.5 * _0x181439);
  round_rect(
    _0x2fcc90,
    -115.5 * _0x181439,
    -20.5 * _0x181439,
    231 * _0x181439,
    41 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(203.5 * _0x181439, 299 * _0x181439);
  round_rect(
    _0x2fcc90,
    -115.5 * _0x181439,
    -20 * _0x181439,
    231 * _0x181439,
    40 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(298.5 * _0x181439, 210 * _0x181439);
  round_rect(
    _0x2fcc90,
    -20.5 * _0x181439,
    -109 * _0x181439,
    41 * _0x181439,
    218 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(108.5 * _0x181439, 210 * _0x181439);
  round_rect(
    _0x2fcc90,
    -20.5 * _0x181439,
    -109 * _0x181439,
    41 * _0x181439,
    218 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(204 * _0x181439, 121.5 * _0x181439);
  round_rect(
    _0x2fcc90,
    -92 * _0x181439,
    -9.5 * _0x181439,
    184 * _0x181439,
    19 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[3], 10 * _0x181439);
  _0x2fcc90.save();
  _0x2fcc90.translate(197 * _0x181439, 299 * _0x181439);
  round_rect(
    _0x2fcc90,
    85 * _0x181439,
    -9 * _0x181439,
    -170 * _0x181439,
    18 * _0x181439,
    10 * _0x181439
  );
  _0x2fcc90.restore();
  fill_path(_0x2fcc90, _0x4a8d17[3], _0x4a8d17[3], 10 * _0x181439);
  _0x2fcc90.beginPath();
  _0x2fcc90.lineCap = "round";
  _0x2fcc90.lineJoin = "round";
  _0x2fcc90.moveTo(94 * _0x181439, 317 * _0x181439);
  _0x2fcc90.bezierCurveTo(
    110.5 * _0x181439,
    299.5 * _0x181439,
    110.5 * _0x181439,
    299.5 * _0x181439,
    127 * _0x181439,
    282 * _0x181439
  );
  _0x2fcc90.closePath();
  fill_path(_0x2fcc90, undefined, _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.beginPath();
  _0x2fcc90.lineCap = "round";
  _0x2fcc90.lineJoin = "round";
  _0x2fcc90.moveTo(279 * _0x181439, 142 * _0x181439);
  _0x2fcc90.bezierCurveTo(
    296.5 * _0x181439,
    125.5 * _0x181439,
    296.5 * _0x181439,
    125.5 * _0x181439,
    314 * _0x181439,
    109 * _0x181439
  );
  _0x2fcc90.closePath();
  fill_path(_0x2fcc90, undefined, _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.beginPath();
  _0x2fcc90.lineCap = "round";
  _0x2fcc90.lineJoin = "round";
  _0x2fcc90.moveTo(93 * _0x181439, 106 * _0x181439);
  _0x2fcc90.bezierCurveTo(
    110.5 * _0x181439,
    124 * _0x181439,
    110.5 * _0x181439,
    124 * _0x181439,
    128 * _0x181439,
    142 * _0x181439
  );
  _0x2fcc90.closePath();
  fill_path(_0x2fcc90, undefined, _0x4a8d17[1], 12 * _0x181439);
  _0x2fcc90.beginPath();
  _0x2fcc90.lineCap = "round";
  _0x2fcc90.lineJoin = "round";
  _0x2fcc90.moveTo(281 * _0x181439, 282 * _0x181439);
  _0x2fcc90.bezierCurveTo(
    296 * _0x181439,
    297.5 * _0x181439,
    296 * _0x181439,
    297.5 * _0x181439,
    311 * _0x181439,
    313 * _0x181439
  );
  _0x2fcc90.closePath();
  fill_path(_0x2fcc90, undefined, _0x4a8d17[1], 12 * _0x181439);
  if (_0x5ea6ec == 0) {
    _0x2fcc90.scale(2, 2);
    _0x2fcc90.translate(-7 * _0x181439, 55 * _0x181439);
    _0x2fcc90.rotate(-0.5);
    _0x2fcc90.beginPath();
    _0x2fcc90.lineCap = "round";
    _0x2fcc90.lineJoin = "round";
    _0x2fcc90.moveTo(60 * _0x181439, 47 * _0x181439);
    _0x2fcc90.bezierCurveTo(
      81 * _0x181439,
      46 * _0x181439,
      85 * _0x181439,
      47 * _0x181439,
      83 * _0x181439,
      63 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      83 * _0x181439,
      72 * _0x181439,
      83 * _0x181439,
      75 * _0x181439,
      72 * _0x181439,
      73 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      68 * _0x181439,
      80 * _0x181439,
      69 * _0x181439,
      82 * _0x181439,
      66 * _0x181439,
      73 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      62 * _0x181439,
      81 * _0x181439,
      61 * _0x181439,
      82 * _0x181439,
      59 * _0x181439,
      73 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      54 * _0x181439,
      81 * _0x181439,
      55 * _0x181439,
      81 * _0x181439,
      52 * _0x181439,
      74 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      38 * _0x181439,
      76 * _0x181439,
      41 * _0x181439,
      74 * _0x181439,
      40 * _0x181439,
      66 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      38 * _0x181439,
      45 * _0x181439,
      39 * _0x181439,
      49 * _0x181439,
      59 * _0x181439,
      47 * _0x181439
    );
    _0x2fcc90.closePath();
    fill_path(_0x2fcc90, _0x4a8d17[4], _0x4a8d17[4], 5 * _0x181439);
    _0x2fcc90.beginPath();
    _0x2fcc90.lineCap = "round";
    _0x2fcc90.lineJoin = "round";
    _0x2fcc90.moveTo(68 * _0x181439, 54 * _0x181439);
    _0x2fcc90.bezierCurveTo(
      75 * _0x181439,
      54 * _0x181439,
      77 * _0x181439,
      62 * _0x181439,
      71 * _0x181439,
      64 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      62 * _0x181439,
      65 * _0x181439,
      63 * _0x181439,
      54 * _0x181439,
      68 * _0x181439,
      54 * _0x181439
    );
    _0x2fcc90.closePath();
    fill_path(_0x2fcc90, _0x4a8d17[3]);
    _0x2fcc90.beginPath();
    _0x2fcc90.lineCap = "round";
    _0x2fcc90.lineJoin = "round";
    _0x2fcc90.moveTo(50 * _0x181439, 55 * _0x181439);
    _0x2fcc90.bezierCurveTo(
      57 * _0x181439,
      55 * _0x181439,
      58 * _0x181439,
      65 * _0x181439,
      52 * _0x181439,
      65 * _0x181439
    );
    _0x2fcc90.bezierCurveTo(
      44 * _0x181439,
      66 * _0x181439,
      44 * _0x181439,
      54 * _0x181439,
      50 * _0x181439,
      55 * _0x181439
    );
    _0x2fcc90.closePath();
    fill_path(_0x2fcc90, _0x4a8d17[3]);
  } else {
    if (_0x5ea6ec == 1) {
      _0x2fcc90.scale(0.6, 0.6);
      _0x2fcc90.translate(185 * _0x181439, 165 * _0x181439);
      _0x2fcc90.beginPath();
      _0x2fcc90.lineCap = "round";
      _0x2fcc90.lineJoin = "round";
      _0x2fcc90.moveTo(108 * _0x181439, 56 * _0x181439);
      _0x2fcc90.bezierCurveTo(
        136 * _0x181439,
        58 * _0x181439,
        203 * _0x181439,
        69 * _0x181439,
        234 * _0x181439,
        75 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        246 * _0x181439,
        77 * _0x181439,
        247 * _0x181439,
        78 * _0x181439,
        245 * _0x181439,
        90 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        238 * _0x181439,
        143 * _0x181439,
        228 * _0x181439,
        197 * _0x181439,
        214 * _0x181439,
        259 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        212 * _0x181439,
        267 * _0x181439,
        209 * _0x181439,
        270 * _0x181439,
        189 * _0x181439,
        268 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        142 * _0x181439,
        264 * _0x181439,
        106 * _0x181439,
        260 * _0x181439,
        75 * _0x181439,
        253 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        60 * _0x181439,
        250 * _0x181439,
        64 * _0x181439,
        250 * _0x181439,
        66 * _0x181439,
        221 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        71 * _0x181439,
        168 * _0x181439,
        87 * _0x181439,
        95 * _0x181439,
        98 * _0x181439,
        67 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        101 * _0x181439,
        57 * _0x181439,
        103 * _0x181439,
        56 * _0x181439,
        106 * _0x181439,
        56 * _0x181439
      );
      _0x2fcc90.closePath();
      fill_path(_0x2fcc90, _0x4a8d17[4], _0x4a8d17[4], 20 * _0x181439);
      _0x2fcc90.beginPath();
      _0x2fcc90.lineCap = "round";
      _0x2fcc90.lineJoin = "round";
      _0x2fcc90.moveTo(112 * _0x181439, 72 * _0x181439);
      _0x2fcc90.bezierCurveTo(
        132 * _0x181439,
        73 * _0x181439,
        227 * _0x181439,
        85 * _0x181439,
        226 * _0x181439,
        91 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        231 * _0x181439,
        89 * _0x181439,
        217 * _0x181439,
        196 * _0x181439,
        200 * _0x181439,
        250 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        196 * _0x181439,
        254 * _0x181439,
        175 * _0x181439,
        249 * _0x181439,
        166 * _0x181439,
        249 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        91 * _0x181439,
        241 * _0x181439,
        82 * _0x181439,
        236 * _0x181439,
        83 * _0x181439,
        232 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        90 * _0x181439,
        144 * _0x181439,
        108 * _0x181439,
        71 * _0x181439,
        111 * _0x181439,
        72 * _0x181439
      );
      _0x2fcc90.closePath();
      fill_path(_0x2fcc90, undefined, _0x4a8d17[0], 13 * _0x181439);
      _0x2fcc90.beginPath();
      _0x2fcc90.lineCap = "round";
      _0x2fcc90.lineJoin = "round";
      _0x2fcc90.moveTo(132 * _0x181439, 117 * _0x181439);
      _0x2fcc90.bezierCurveTo(
        171 * _0x181439,
        86 * _0x181439,
        191 * _0x181439,
        101 * _0x181439,
        188 * _0x181439,
        134 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        185 * _0x181439,
        154 * _0x181439,
        170 * _0x181439,
        158 * _0x181439,
        153 * _0x181439,
        158 * _0x181439
      );
      _0x2fcc90.bezierCurveTo(
        143 * _0x181439,
        172 * _0x181439,
        146 * _0x181439,
        180 * _0x181439,
        147 * _0x181439,
        193 * _0x181439
      );
      fill_path(_0x2fcc90, undefined, _0x4a8d17[0], 20 * _0x181439);
      circle(
        _0x2fcc90,
        142 * _0x181439,
        221 * _0x181439,
        16.1245154965971 * _0x181439
      );
      fill_path(_0x2fcc90, _0x4a8d17[0]);
    }
  }
  return _0x40dbf2;
}
function create_hurt_dead_box(_0x4eb8c7, _0x417c1b) {
  var _0x3b7d8e = document.createElement("canvas");
  var _0x23fef9 = _0x3b7d8e.getContext("2d");
  _0x3b7d8e.width = 400 * _0x4eb8c7;
  _0x3b7d8e.height = 400 * _0x4eb8c7;
  _0x23fef9.save();
  _0x23fef9.translate(202.5 * _0x4eb8c7, 147.5 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -96.5 * _0x4eb8c7,
    -21.5 * _0x4eb8c7,
    193 * _0x4eb8c7,
    43 * _0x4eb8c7,
    0 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(202.5 * _0x4eb8c7, 190.5 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    96.5 * _0x4eb8c7,
    -21.5 * _0x4eb8c7,
    -193 * _0x4eb8c7,
    43 * _0x4eb8c7,
    0 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(202.5 * _0x4eb8c7, 233.5 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -96.5 * _0x4eb8c7,
    -20.5 * _0x4eb8c7,
    193 * _0x4eb8c7,
    41 * _0x4eb8c7,
    0 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(202.5 * _0x4eb8c7, 275 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    96.5 * _0x4eb8c7,
    -21 * _0x4eb8c7,
    -193 * _0x4eb8c7,
    42 * _0x4eb8c7,
    0 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(203.5 * _0x4eb8c7, 121.5 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -115.5 * _0x4eb8c7,
    -20.5 * _0x4eb8c7,
    231 * _0x4eb8c7,
    41 * _0x4eb8c7,
    10 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(203.5 * _0x4eb8c7, 299 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -115.5 * _0x4eb8c7,
    -20 * _0x4eb8c7,
    231 * _0x4eb8c7,
    40 * _0x4eb8c7,
    10 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(298.5 * _0x4eb8c7, 210 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -20.5 * _0x4eb8c7,
    -109 * _0x4eb8c7,
    41 * _0x4eb8c7,
    218 * _0x4eb8c7,
    10 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  _0x23fef9.save();
  _0x23fef9.translate(108.5 * _0x4eb8c7, 210 * _0x4eb8c7);
  round_rect(
    _0x23fef9,
    -20.5 * _0x4eb8c7,
    -109 * _0x4eb8c7,
    41 * _0x4eb8c7,
    218 * _0x4eb8c7,
    10 * _0x4eb8c7
  );
  _0x23fef9.restore();
  fill_path(_0x23fef9, _0x417c1b[0], _0x417c1b[0], 12 * _0x4eb8c7);
  return _0x3b7d8e;
}
function create_dead_box_ui(_0x20d79e, _0x5ce0e8) {
  var _0x9bcee0 = document.createElement("canvas");
  var _0x30ff1c = _0x9bcee0.getContext("2d");
  _0x9bcee0.width = 650 * _0x20d79e;
  _0x9bcee0.height = 650 * _0x20d79e;
  _0x30ff1c.scale(1.9, 1.9);
  _0x30ff1c.save();
  _0x30ff1c.translate(202.5 * _0x20d79e, 147.5 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -96.5 * _0x20d79e,
    -21.5 * _0x20d79e,
    193 * _0x20d79e,
    193 * _0x20d79e,
    0 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[4], _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(203.5 * _0x20d79e, 121.5 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -115.5 * _0x20d79e,
    -20.5 * _0x20d79e,
    231 * _0x20d79e,
    41 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(203.5 * _0x20d79e, 299 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -115.5 * _0x20d79e,
    -20 * _0x20d79e,
    231 * _0x20d79e,
    40 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(298.5 * _0x20d79e, 210 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -20.5 * _0x20d79e,
    -109 * _0x20d79e,
    41 * _0x20d79e,
    218 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(108.5 * _0x20d79e, 210 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -20.5 * _0x20d79e,
    -109 * _0x20d79e,
    41 * _0x20d79e,
    218 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(204 * _0x20d79e, 121.5 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    -92 * _0x20d79e,
    -9.5 * _0x20d79e,
    184 * _0x20d79e,
    19 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[3], 10 * _0x20d79e);
  _0x30ff1c.save();
  _0x30ff1c.translate(197 * _0x20d79e, 299 * _0x20d79e);
  round_rect(
    _0x30ff1c,
    85 * _0x20d79e,
    -9 * _0x20d79e,
    -170 * _0x20d79e,
    18 * _0x20d79e,
    10 * _0x20d79e
  );
  _0x30ff1c.restore();
  fill_path(_0x30ff1c, _0x5ce0e8[3], _0x5ce0e8[3], 10 * _0x20d79e);
  _0x30ff1c.beginPath();
  _0x30ff1c.lineCap = "round";
  _0x30ff1c.lineJoin = "round";
  _0x30ff1c.moveTo(94 * _0x20d79e, 317 * _0x20d79e);
  _0x30ff1c.bezierCurveTo(
    110.5 * _0x20d79e,
    299.5 * _0x20d79e,
    110.5 * _0x20d79e,
    299.5 * _0x20d79e,
    127 * _0x20d79e,
    282 * _0x20d79e
  );
  _0x30ff1c.closePath();
  fill_path(_0x30ff1c, undefined, _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.beginPath();
  _0x30ff1c.lineCap = "round";
  _0x30ff1c.lineJoin = "round";
  _0x30ff1c.moveTo(279 * _0x20d79e, 142 * _0x20d79e);
  _0x30ff1c.bezierCurveTo(
    296.5 * _0x20d79e,
    125.5 * _0x20d79e,
    296.5 * _0x20d79e,
    125.5 * _0x20d79e,
    314 * _0x20d79e,
    109 * _0x20d79e
  );
  _0x30ff1c.closePath();
  fill_path(_0x30ff1c, undefined, _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.beginPath();
  _0x30ff1c.lineCap = "round";
  _0x30ff1c.lineJoin = "round";
  _0x30ff1c.moveTo(93 * _0x20d79e, 106 * _0x20d79e);
  _0x30ff1c.bezierCurveTo(
    110.5 * _0x20d79e,
    124 * _0x20d79e,
    110.5 * _0x20d79e,
    124 * _0x20d79e,
    128 * _0x20d79e,
    142 * _0x20d79e
  );
  _0x30ff1c.closePath();
  fill_path(_0x30ff1c, undefined, _0x5ce0e8[1], 12 * _0x20d79e);
  _0x30ff1c.beginPath();
  _0x30ff1c.lineCap = "round";
  _0x30ff1c.lineJoin = "round";
  _0x30ff1c.moveTo(281 * _0x20d79e, 282 * _0x20d79e);
  _0x30ff1c.bezierCurveTo(
    296 * _0x20d79e,
    297.5 * _0x20d79e,
    296 * _0x20d79e,
    297.5 * _0x20d79e,
    311 * _0x20d79e,
    313 * _0x20d79e
  );
  _0x30ff1c.closePath();
  fill_path(_0x30ff1c, undefined, _0x5ce0e8[1], 12 * _0x20d79e);
  return _0x9bcee0;
}
function create_SANDWICH(_0x58d9fd, _0x2abdbb, _0x3979f0) {
  var _0x14aab0 = document.createElement("canvas");
  var _0x249509 = _0x14aab0.getContext("2d");
  _0x14aab0.width = 400 * _0x58d9fd;
  _0x14aab0.height = 400 * _0x58d9fd;
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(101 * _0x58d9fd, 255 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    113 * _0x58d9fd,
    243 * _0x58d9fd,
    179 * _0x58d9fd,
    210 * _0x58d9fd,
    219 * _0x58d9fd,
    196 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    252 * _0x58d9fd,
    203 * _0x58d9fd,
    288 * _0x58d9fd,
    215 * _0x58d9fd,
    318 * _0x58d9fd,
    233 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    304 * _0x58d9fd,
    254 * _0x58d9fd,
    258 * _0x58d9fd,
    273 * _0x58d9fd,
    215 * _0x58d9fd,
    296 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    161 * _0x58d9fd,
    287 * _0x58d9fd,
    119 * _0x58d9fd,
    270 * _0x58d9fd,
    102 * _0x58d9fd,
    257 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, _0x3979f0[0], _0x3979f0[1], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(99 * _0x58d9fd, 258 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    99 * _0x58d9fd,
    272.5 * _0x58d9fd,
    99 * _0x58d9fd,
    272.5 * _0x58d9fd,
    99 * _0x58d9fd,
    287 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    166 * _0x58d9fd,
    319 * _0x58d9fd,
    193 * _0x58d9fd,
    320 * _0x58d9fd,
    212 * _0x58d9fd,
    324 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    292 * _0x58d9fd,
    286 * _0x58d9fd,
    312 * _0x58d9fd,
    271 * _0x58d9fd,
    319 * _0x58d9fd,
    263 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    320 * _0x58d9fd,
    249 * _0x58d9fd,
    320 * _0x58d9fd,
    241 * _0x58d9fd,
    318 * _0x58d9fd,
    234 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    300 * _0x58d9fd,
    254 * _0x58d9fd,
    254 * _0x58d9fd,
    277 * _0x58d9fd,
    216 * _0x58d9fd,
    294 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    190 * _0x58d9fd,
    296 * _0x58d9fd,
    135 * _0x58d9fd,
    276 * _0x58d9fd,
    102 * _0x58d9fd,
    258 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, _0x3979f0[2], _0x3979f0[1], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(212 * _0x58d9fd, 323 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    211.5 * _0x58d9fd,
    310.5 * _0x58d9fd,
    211.5 * _0x58d9fd,
    310.5 * _0x58d9fd,
    211 * _0x58d9fd,
    298 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, undefined, _0x3979f0[1], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(212 * _0x58d9fd, 210 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    286 * _0x58d9fd,
    210 * _0x58d9fd,
    331 * _0x58d9fd,
    254 * _0x58d9fd,
    212 * _0x58d9fd,
    276 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    108 * _0x58d9fd,
    276 * _0x58d9fd,
    112 * _0x58d9fd,
    222 * _0x58d9fd,
    213 * _0x58d9fd,
    208 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, _0x3979f0[3], _0x3979f0[4], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(98 * _0x58d9fd, 200 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    126 * _0x58d9fd,
    216 * _0x58d9fd,
    177 * _0x58d9fd,
    232 * _0x58d9fd,
    213 * _0x58d9fd,
    237 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    266 * _0x58d9fd,
    218 * _0x58d9fd,
    288 * _0x58d9fd,
    209 * _0x58d9fd,
    318 * _0x58d9fd,
    190 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    269 * _0x58d9fd,
    164 * _0x58d9fd,
    239 * _0x58d9fd,
    158 * _0x58d9fd,
    214 * _0x58d9fd,
    153 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    148 * _0x58d9fd,
    172 * _0x58d9fd,
    131 * _0x58d9fd,
    182 * _0x58d9fd,
    98 * _0x58d9fd,
    200 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, _0x3979f0[0], _0x3979f0[1], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(97 * _0x58d9fd, 204 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    97 * _0x58d9fd,
    215.5 * _0x58d9fd,
    97 * _0x58d9fd,
    215.5 * _0x58d9fd,
    97 * _0x58d9fd,
    227 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    148 * _0x58d9fd,
    250 * _0x58d9fd,
    179 * _0x58d9fd,
    256 * _0x58d9fd,
    212 * _0x58d9fd,
    262 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    268 * _0x58d9fd,
    244 * _0x58d9fd,
    281 * _0x58d9fd,
    233 * _0x58d9fd,
    318 * _0x58d9fd,
    214 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    318 * _0x58d9fd,
    203 * _0x58d9fd,
    318 * _0x58d9fd,
    203 * _0x58d9fd,
    318 * _0x58d9fd,
    192 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    250 * _0x58d9fd,
    225 * _0x58d9fd,
    236 * _0x58d9fd,
    231 * _0x58d9fd,
    214 * _0x58d9fd,
    239 * _0x58d9fd
  );
  _0x249509.bezierCurveTo(
    158 * _0x58d9fd,
    228 * _0x58d9fd,
    126 * _0x58d9fd,
    215 * _0x58d9fd,
    99 * _0x58d9fd,
    201 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, _0x3979f0[2], _0x3979f0[1], 14 * _0x58d9fd);
  _0x249509.beginPath();
  _0x249509.lineCap = "round";
  _0x249509.lineJoin = "round";
  _0x249509.moveTo(212 * _0x58d9fd, 260 * _0x58d9fd);
  _0x249509.bezierCurveTo(
    212 * _0x58d9fd,
    251.5 * _0x58d9fd,
    212 * _0x58d9fd,
    251.5 * _0x58d9fd,
    212 * _0x58d9fd,
    243 * _0x58d9fd
  );
  _0x249509.closePath();
  fill_path(_0x249509, undefined, _0x3979f0[1], 14 * _0x58d9fd);
  circle(_0x249509, 161 * _0x58d9fd, 201 * _0x58d9fd, 13 * _0x58d9fd);
  fill_path(_0x249509, _0x3979f0[5]);
  circle(
    _0x249509,
    216 * _0x58d9fd,
    205 * _0x58d9fd,
    8.06225774829855 * _0x58d9fd
  );
  fill_path(_0x249509, _0x3979f0[5]);
  circle(
    _0x249509,
    216 * _0x58d9fd,
    175 * _0x58d9fd,
    6.708203932499369 * _0x58d9fd
  );
  fill_path(_0x249509, _0x3979f0[5]);
  circle(
    _0x249509,
    271 * _0x58d9fd,
    191 * _0x58d9fd,
    5.0990195135927845 * _0x58d9fd
  );
  fill_path(_0x249509, _0x3979f0[5]);
  circle(
    _0x249509,
    206 * _0x58d9fd,
    180 * _0x58d9fd,
    11.180339887498949 * _0x58d9fd
  );
  fill_path(_0x249509, _0x3979f0[5]);
  return _0x14aab0;
}
function create_scales(_0x5d9148, _0x11b2d4, _0x36ec65) {
  var _0x1f7063 = document.createElement("canvas");
  var _0x1ca657 = _0x1f7063.getContext("2d");
  _0x1f7063.width = 400 * _0x5d9148;
  _0x1f7063.height = 400 * _0x5d9148;
  _0x1ca657.save();
  _0x1ca657.translate(85 * _0x5d9148, 237 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    54.585977194239184 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(178 * _0x5d9148, 238 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    52.53573932334064 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(270 * _0x5d9148, 239 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    53.58058329516393 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(222 * _0x5d9148, 312 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    52.53573932334064 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(317 * _0x5d9148, 159 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    57.63465889766331 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(223.5 * _0x5d9148, 139.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    51.66236541235796 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(132.5 * _0x5d9148, 137.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    52.009614495783374 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(178.5 * _0x5d9148, 58.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    53.16013544000805 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(177.5 * _0x5d9148, 216.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(_0x1ca657, 6, 50 * _0x5d9148, 1 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(84.5 * _0x5d9148, 215.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(_0x1ca657, 6, 54 * _0x5d9148, 1 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(319.5 * _0x5d9148, 138.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    55.08175741568164 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(269.5 * _0x5d9148, 216.0625 * _0x5d9148);
  _0x1ca657.rotate(1.5707963267948966);
  round_regular_polygon(
    _0x1ca657,
    6,
    54.589376255824725 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(221.5 * _0x5d9148, 293.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(
    _0x1ca657,
    6,
    49.49747468305833 * _0x5d9148,
    1 * _0x5d9148
  );
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[1], _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.beginPath();
  _0x1ca657.lineCap = "round";
  _0x1ca657.lineJoin = "round";
  _0x1ca657.moveTo(221.5 * _0x5d9148, 342.0625 * _0x5d9148);
  _0x1ca657.bezierCurveTo(
    221.5 * _0x5d9148,
    350.5625 * _0x5d9148,
    221.5 * _0x5d9148,
    350.5625 * _0x5d9148,
    221.5 * _0x5d9148,
    359.0625 * _0x5d9148
  );
  _0x1ca657.closePath();
  fill_path(_0x1ca657, undefined, _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.beginPath();
  _0x1ca657.lineCap = "round";
  _0x1ca657.lineJoin = "round";
  _0x1ca657.moveTo(84.5 * _0x5d9148, 270.0625 * _0x5d9148);
  _0x1ca657.bezierCurveTo(
    84.5 * _0x5d9148,
    277.0625 * _0x5d9148,
    84.5 * _0x5d9148,
    277.0625 * _0x5d9148,
    84.5 * _0x5d9148,
    284.0625 * _0x5d9148
  );
  _0x1ca657.closePath();
  fill_path(_0x1ca657, undefined, _0x36ec65[2], 12 * _0x5d9148);
  _0x1ca657.save();
  _0x1ca657.translate(84.5 * _0x5d9148, 215.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(177.5 * _0x5d9148, 215.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(222.5 * _0x5d9148, 294.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(270.5 * _0x5d9148, 216.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(320.5 * _0x5d9148, 134.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(224.5 * _0x5d9148, 138.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(133.5 * _0x5d9148, 137.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  _0x1ca657.save();
  _0x1ca657.translate(178.5 * _0x5d9148, 56.0625 * _0x5d9148);
  _0x1ca657.rotate(0.5235987755982988);
  round_regular_polygon(_0x1ca657, 6, 30 * _0x5d9148, 15 * _0x5d9148);
  _0x1ca657.restore();
  fill_path(_0x1ca657, _0x36ec65[3]);
  return _0x1f7063;
}
function create_wheat(_0x2cfa16, _0x10cfda, _0x243d2c) {
  var _0x5f04ce = document.createElement("canvas");
  var _0x5e4266 = _0x5f04ce.getContext("2d");
  _0x5f04ce.width = 52 * _0x2cfa16;
  _0x5f04ce.height = 65 * _0x2cfa16;
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(9.833328247070312 * _0x2cfa16, 12.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    15.333328247070312 * _0x2cfa16,
    28.078125 * _0x2cfa16,
    15.333328247070312 * _0x2cfa16,
    28.078125 * _0x2cfa16,
    20.833328247070312 * _0x2cfa16,
    44.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, undefined, _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(7.8333282470703125 * _0x2cfa16, 20.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    16.833328247070312 * _0x2cfa16,
    32.578125 * _0x2cfa16,
    16.833328247070312 * _0x2cfa16,
    32.578125 * _0x2cfa16,
    25.833328247070312 * _0x2cfa16,
    45.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, undefined, _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(23.833328247070312 * _0x2cfa16, 26.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    25.833328247070312 * _0x2cfa16,
    11.078125 * _0x2cfa16,
    16.833328247070312 * _0x2cfa16,
    8.078125 * _0x2cfa16,
    14.833328247070312 * _0x2cfa16,
    7.078125 * _0x2cfa16
  );
  _0x5e4266.bezierCurveTo(
    11.833328247070312 * _0x2cfa16,
    17.078125 * _0x2cfa16,
    13.833328247070312 * _0x2cfa16,
    22.078125 * _0x2cfa16,
    23.833328247070312 * _0x2cfa16,
    27.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, _0x243d2c[0], _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(35.83332824707031 * _0x2cfa16, 8.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    34.83332824707031 * _0x2cfa16,
    27.078125 * _0x2cfa16,
    28.833328247070312 * _0x2cfa16,
    27.078125 * _0x2cfa16,
    23.833328247070312 * _0x2cfa16,
    28.078125 * _0x2cfa16
  );
  _0x5e4266.bezierCurveTo(
    21.833328247070312 * _0x2cfa16,
    14.078125 * _0x2cfa16,
    26.833328247070312 * _0x2cfa16,
    11.078125 * _0x2cfa16,
    35.83332824707031 * _0x2cfa16,
    8.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, _0x243d2c[0], _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(25.833328247070312 * _0x2cfa16, 39.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    20.833328247070312 * _0x2cfa16,
    29.078125 * _0x2cfa16,
    14.833328247070312 * _0x2cfa16,
    27.078125 * _0x2cfa16,
    5.8333282470703125 * _0x2cfa16,
    29.078125 * _0x2cfa16
  );
  _0x5e4266.bezierCurveTo(
    9.833328247070312 * _0x2cfa16,
    39.078125 * _0x2cfa16,
    16.833328247070312 * _0x2cfa16,
    42.078125 * _0x2cfa16,
    25.833328247070312 * _0x2cfa16,
    40.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, _0x243d2c[0], _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(42.83332824707031 * _0x2cfa16, 23.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    35.83332824707031 * _0x2cfa16,
    35.078125 * _0x2cfa16,
    31.833328247070312 * _0x2cfa16,
    37.078125 * _0x2cfa16,
    25.833328247070312 * _0x2cfa16,
    36.078125 * _0x2cfa16
  );
  _0x5e4266.bezierCurveTo(
    25.833328247070312 * _0x2cfa16,
    24.078125 * _0x2cfa16,
    33.83332824707031 * _0x2cfa16,
    21.078125 * _0x2cfa16,
    42.83332824707031 * _0x2cfa16,
    23.078125 * _0x2cfa16
  );
  _0x5e4266.closePath();
  fill_path(_0x5e4266, _0x243d2c[0], _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(23.833328247070312 * _0x2cfa16, 24.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    20.833328247070312 * _0x2cfa16,
    34.078125 * _0x2cfa16,
    23.833328247070312 * _0x2cfa16,
    40.078125 * _0x2cfa16,
    27.833328247070312 * _0x2cfa16,
    43.078125 * _0x2cfa16
  );
  _0x5e4266.bezierCurveTo(
    37.33332824707031 * _0x2cfa16,
    28.078125 * _0x2cfa16,
    37.33332824707031 * _0x2cfa16,
    28.078125 * _0x2cfa16,
    46.83332824707031 * _0x2cfa16,
    13.078125 * _0x2cfa16
  );
  fill_path(_0x5e4266, undefined, _0x243d2c[1], 2 * _0x2cfa16);
  _0x5e4266.beginPath();
  _0x5e4266.lineCap = "round";
  _0x5e4266.lineJoin = "round";
  _0x5e4266.moveTo(38.83332824707031 * _0x2cfa16, 14.078125 * _0x2cfa16);
  _0x5e4266.bezierCurveTo(
    34.83332824707031 * _0x2cfa16,
    24.078125 * _0x2cfa16,
    34.83332824707031 * _0x2cfa16,
    24.078125 * _0x2cfa16,
    30.833328247070312 * _0x2cfa16,
    34.078125 * _0x2cfa16
  );
  fill_path(_0x5e4266, undefined, _0x243d2c[1], 2 * _0x2cfa16);
  return _0x5f04ce;
}
function create_windmill(_0x49e0ec, _0x19c27c, _0x1567f3) {
  var _0x22eee1 = document.createElement("canvas");
  var _0x25f5e9 = _0x22eee1.getContext("2d");
  _0x22eee1.width = 170 * _0x49e0ec;
  _0x22eee1.height = 173 * _0x49e0ec;
  _0x25f5e9.translate(5 * _0x49e0ec, 5 * _0x49e0ec);
  _0x25f5e9.globalAlpha = _0x19c27c ? 0.5 : 1;
  _0x25f5e9.save();
  _0x25f5e9.translate(86.25 * _0x49e0ec, 84.953125 * _0x49e0ec);
  _0x25f5e9.rotate(0.32);
  round_regular_polygon(
    _0x25f5e9,
    7,
    42.15447781671598 * _0x49e0ec,
    10 * _0x49e0ec
  );
  _0x25f5e9.restore();
  fill_path(_0x25f5e9, _0x1567f3[0]);
  _0x25f5e9.globalAlpha = 1;
  _0x25f5e9.translate(-5 * _0x49e0ec, -5 * _0x49e0ec);
  _0x25f5e9.save();
  _0x25f5e9.translate(86.25 * _0x49e0ec, 84.953125 * _0x49e0ec);
  _0x25f5e9.rotate(0.32);
  round_regular_polygon(
    _0x25f5e9,
    7,
    42.15447781671598 * _0x49e0ec,
    10 * _0x49e0ec
  );
  _0x25f5e9.restore();
  fill_path(_0x25f5e9, _0x1567f3[1], _0x1567f3[2], 4 * _0x49e0ec);
  _0x25f5e9.globalAlpha = _0x19c27c ? 0.5 : 1;
  _0x25f5e9.translate(5 * _0x49e0ec, 5 * _0x49e0ec);
  _0x25f5e9.save();
  _0x25f5e9.translate(86.25 * _0x49e0ec, 84.953125 * _0x49e0ec);
  _0x25f5e9.rotate(0.28);
  round_regular_polygon(
    _0x25f5e9,
    7,
    30.463092423455635 * _0x49e0ec,
    10 * _0x49e0ec
  );
  _0x25f5e9.restore();
  fill_path(_0x25f5e9, _0x1567f3[0]);
  _0x25f5e9.globalAlpha = 1;
  _0x25f5e9.translate(-5 * _0x49e0ec, -5 * _0x49e0ec);
  _0x25f5e9.save();
  _0x25f5e9.translate(86.25 * _0x49e0ec, 84.953125 * _0x49e0ec);
  _0x25f5e9.rotate(0.28);
  round_regular_polygon(
    _0x25f5e9,
    7,
    30.463092423455635 * _0x49e0ec,
    10 * _0x49e0ec
  );
  _0x25f5e9.restore();
  fill_path(_0x25f5e9, _0x1567f3[3], _0x1567f3[4], 4 * _0x49e0ec);
  _0x25f5e9.globalAlpha = _0x19c27c ? 0.5 : 1;
  _0x25f5e9.translate(5 * _0x49e0ec, 5 * _0x49e0ec);
  circle(
    _0x25f5e9,
    86.25 * _0x49e0ec,
    84.953125 * _0x49e0ec,
    18.867962264113206 * _0x49e0ec
  );
  fill_path(_0x25f5e9, _0x1567f3[0]);
  _0x25f5e9.globalAlpha = 1;
  _0x25f5e9.translate(-5 * _0x49e0ec, -5 * _0x49e0ec);
  circle(
    _0x25f5e9,
    86.25 * _0x49e0ec,
    84.953125 * _0x49e0ec,
    18.867962264113206 * _0x49e0ec
  );
  fill_path(_0x25f5e9, _0x1567f3[5], _0x1567f3[6], 4 * _0x49e0ec);
  return _0x22eee1;
}
function create_windmill_wing(_0xd9e62e, _0x4c6694, _0x49db78) {
  var _0x367f04 = document.createElement("canvas");
  var _0x18d3d8 = _0x367f04.getContext("2d");
  _0x367f04.width = 170 * _0xd9e62e;
  _0x367f04.height = 173 * _0xd9e62e;
  _0x18d3d8.globalAlpha = _0x4c6694 ? 0.5 : 1;
  _0x18d3d8.translate(5 * _0xd9e62e, 5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(85.25 * _0xd9e62e, 82.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    98.25 * _0xd9e62e,
    46.453125 * _0xd9e62e,
    98.25 * _0xd9e62e,
    46.453125 * _0xd9e62e,
    111.25 * _0xd9e62e,
    9.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[0], 4 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(111.25 * _0xd9e62e, 8.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    117.75 * _0xd9e62e,
    12.453125 * _0xd9e62e,
    117.75 * _0xd9e62e,
    12.453125 * _0xd9e62e,
    124.25 * _0xd9e62e,
    15.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    113.75 * _0xd9e62e,
    39.953125 * _0xd9e62e,
    113.75 * _0xd9e62e,
    39.953125 * _0xd9e62e,
    103.25 * _0xd9e62e,
    63.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    97.75 * _0xd9e62e,
    64.953125 * _0xd9e62e,
    97.75 * _0xd9e62e,
    64.953125 * _0xd9e62e,
    92.25 * _0xd9e62e,
    65.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[0]);
  _0x18d3d8.globalAlpha = 1;
  _0x18d3d8.translate(-5 * _0xd9e62e, -5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(111.25 * _0xd9e62e, 8.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    117.75 * _0xd9e62e,
    12.453125 * _0xd9e62e,
    117.75 * _0xd9e62e,
    12.453125 * _0xd9e62e,
    124.25 * _0xd9e62e,
    15.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    113.75 * _0xd9e62e,
    39.953125 * _0xd9e62e,
    113.75 * _0xd9e62e,
    39.953125 * _0xd9e62e,
    103.25 * _0xd9e62e,
    63.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    97.75 * _0xd9e62e,
    64.953125 * _0xd9e62e,
    97.75 * _0xd9e62e,
    64.953125 * _0xd9e62e,
    92.25 * _0xd9e62e,
    65.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[7]);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(85.25 * _0xd9e62e, 82.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    98.25 * _0xd9e62e,
    46.453125 * _0xd9e62e,
    98.25 * _0xd9e62e,
    46.453125 * _0xd9e62e,
    111.25 * _0xd9e62e,
    9.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[6], 4 * _0xd9e62e);
  _0x18d3d8.globalAlpha = _0x4c6694 ? 0.5 : 1;
  _0x18d3d8.translate(5 * _0xd9e62e, 5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(87.25 * _0xd9e62e, 84.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    123.75 * _0xd9e62e,
    100.453125 * _0xd9e62e,
    123.75 * _0xd9e62e,
    100.453125 * _0xd9e62e,
    160.25 * _0xd9e62e,
    115.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[0], 4 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(160.25 * _0xd9e62e, 114.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    156.25 * _0xd9e62e,
    122.453125 * _0xd9e62e,
    156.25 * _0xd9e62e,
    122.453125 * _0xd9e62e,
    152.25 * _0xd9e62e,
    129.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    130.25 * _0xd9e62e,
    117.953125 * _0xd9e62e,
    130.25 * _0xd9e62e,
    117.953125 * _0xd9e62e,
    108.25 * _0xd9e62e,
    105.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    107.25 * _0xd9e62e,
    98.953125 * _0xd9e62e,
    107.25 * _0xd9e62e,
    98.953125 * _0xd9e62e,
    106.25 * _0xd9e62e,
    91.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[0]);
  _0x18d3d8.globalAlpha = 1;
  _0x18d3d8.translate(-5 * _0xd9e62e, -5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(160.25 * _0xd9e62e, 114.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    156.25 * _0xd9e62e,
    122.453125 * _0xd9e62e,
    156.25 * _0xd9e62e,
    122.453125 * _0xd9e62e,
    152.25 * _0xd9e62e,
    129.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    130.25 * _0xd9e62e,
    117.953125 * _0xd9e62e,
    130.25 * _0xd9e62e,
    117.953125 * _0xd9e62e,
    108.25 * _0xd9e62e,
    105.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    107.25 * _0xd9e62e,
    98.953125 * _0xd9e62e,
    107.25 * _0xd9e62e,
    98.953125 * _0xd9e62e,
    106.25 * _0xd9e62e,
    91.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[7]);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(87.25 * _0xd9e62e, 84.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    123.75 * _0xd9e62e,
    100.453125 * _0xd9e62e,
    123.75 * _0xd9e62e,
    100.453125 * _0xd9e62e,
    160.25 * _0xd9e62e,
    115.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[6], 4 * _0xd9e62e);
  _0x18d3d8.globalAlpha = _0x4c6694 ? 0.5 : 1;
  _0x18d3d8.translate(5 * _0xd9e62e, 5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(83.25 * _0xd9e62e, 83.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    47.75 * _0xd9e62e,
    68.453125 * _0xd9e62e,
    47.75 * _0xd9e62e,
    68.453125 * _0xd9e62e,
    12.25 * _0xd9e62e,
    52.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[0], 4 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(13.25 * _0xd9e62e, 53.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    17.25 * _0xd9e62e,
    46.953125 * _0xd9e62e,
    17.25 * _0xd9e62e,
    46.953125 * _0xd9e62e,
    21.25 * _0xd9e62e,
    39.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    42.75 * _0xd9e62e,
    52.453125 * _0xd9e62e,
    42.75 * _0xd9e62e,
    52.453125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    64.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    64.25 * _0xd9e62e,
    70.953125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    70.953125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    76.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[0]);
  _0x18d3d8.globalAlpha = 1;
  _0x18d3d8.translate(-5 * _0xd9e62e, -5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(13.25 * _0xd9e62e, 53.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    17.25 * _0xd9e62e,
    46.953125 * _0xd9e62e,
    17.25 * _0xd9e62e,
    46.953125 * _0xd9e62e,
    21.25 * _0xd9e62e,
    39.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    42.75 * _0xd9e62e,
    52.453125 * _0xd9e62e,
    42.75 * _0xd9e62e,
    52.453125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    64.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    64.25 * _0xd9e62e,
    70.953125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    70.953125 * _0xd9e62e,
    64.25 * _0xd9e62e,
    76.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[7]);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(83.25 * _0xd9e62e, 83.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    47.75 * _0xd9e62e,
    68.453125 * _0xd9e62e,
    47.75 * _0xd9e62e,
    68.453125 * _0xd9e62e,
    12.25 * _0xd9e62e,
    52.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[6], 4 * _0xd9e62e);
  _0x18d3d8.globalAlpha = _0x4c6694 ? 0.5 : 1;
  _0x18d3d8.translate(5 * _0xd9e62e, 5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(84.25 * _0xd9e62e, 86.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    70.25 * _0xd9e62e,
    123.953125 * _0xd9e62e,
    70.25 * _0xd9e62e,
    123.953125 * _0xd9e62e,
    56.25 * _0xd9e62e,
    160.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[0], 4 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(56.25 * _0xd9e62e, 159.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    49.25 * _0xd9e62e,
    155.453125 * _0xd9e62e,
    49.25 * _0xd9e62e,
    155.453125 * _0xd9e62e,
    42.25 * _0xd9e62e,
    150.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    54.25 * _0xd9e62e,
    127.953125 * _0xd9e62e,
    54.25 * _0xd9e62e,
    127.953125 * _0xd9e62e,
    66.25 * _0xd9e62e,
    104.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    71.25 * _0xd9e62e,
    104.953125 * _0xd9e62e,
    71.25 * _0xd9e62e,
    104.953125 * _0xd9e62e,
    76.25 * _0xd9e62e,
    104.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[0]);
  _0x18d3d8.globalAlpha = 1;
  _0x18d3d8.translate(-5 * _0xd9e62e, -5 * _0xd9e62e);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(56.25 * _0xd9e62e, 159.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    49.25 * _0xd9e62e,
    155.453125 * _0xd9e62e,
    49.25 * _0xd9e62e,
    155.453125 * _0xd9e62e,
    42.25 * _0xd9e62e,
    150.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    54.25 * _0xd9e62e,
    127.953125 * _0xd9e62e,
    54.25 * _0xd9e62e,
    127.953125 * _0xd9e62e,
    66.25 * _0xd9e62e,
    104.953125 * _0xd9e62e
  );
  _0x18d3d8.bezierCurveTo(
    71.25 * _0xd9e62e,
    104.953125 * _0xd9e62e,
    71.25 * _0xd9e62e,
    104.953125 * _0xd9e62e,
    76.25 * _0xd9e62e,
    104.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, _0x49db78[7]);
  _0x18d3d8.beginPath();
  _0x18d3d8.lineCap = "round";
  _0x18d3d8.lineJoin = "round";
  _0x18d3d8.moveTo(84.25 * _0xd9e62e, 86.953125 * _0xd9e62e);
  _0x18d3d8.bezierCurveTo(
    70.25 * _0xd9e62e,
    123.953125 * _0xd9e62e,
    70.25 * _0xd9e62e,
    123.953125 * _0xd9e62e,
    56.25 * _0xd9e62e,
    160.953125 * _0xd9e62e
  );
  _0x18d3d8.closePath();
  fill_path(_0x18d3d8, undefined, _0x49db78[6], 4 * _0xd9e62e);
  return _0x367f04;
}
function create_windmill_head(_0x3a7bd4, _0x10be40, _0x1a0ed8) {
  var _0x40218c = document.createElement("canvas");
  var _0x315de4 = _0x40218c.getContext("2d");
  _0x40218c.width = 170 * _0x3a7bd4;
  _0x40218c.height = 173 * _0x3a7bd4;
  _0x315de4.globalAlpha = _0x10be40 ? 0.5 : 1;
  _0x315de4.translate(5 * _0x3a7bd4, 5 * _0x3a7bd4);
  _0x315de4.save();
  _0x315de4.translate(86.25 * _0x3a7bd4, 84.953125 * _0x3a7bd4);
  round_regular_polygon(
    _0x315de4,
    7,
    9.848857801796104 * _0x3a7bd4,
    5 * _0x3a7bd4
  );
  _0x315de4.restore();
  fill_path(_0x315de4, _0x1a0ed8[0]);
  _0x315de4.globalAlpha = 1;
  _0x315de4.translate(-5 * _0x3a7bd4, -5 * _0x3a7bd4);
  _0x315de4.save();
  _0x315de4.translate(86.25 * _0x3a7bd4, 84.953125 * _0x3a7bd4);
  round_regular_polygon(
    _0x315de4,
    7,
    9.848857801796104 * _0x3a7bd4,
    5 * _0x3a7bd4
  );
  _0x315de4.restore();
  fill_path(_0x315de4, _0x1a0ed8[8], _0x1a0ed8[9], 4 * _0x3a7bd4);
  return _0x40218c;
}
function create_cord(_0x4eeaf1, _0x37c6ca, _0x1fd330) {
  var _0x4487a1 = document.createElement("canvas");
  var _0x462e67 = _0x4487a1.getContext("2d");
  var _0x46d63e = _0x4eeaf1 * 75;
  var _0x37efb4 = _0x4eeaf1 * 55;
  var _0x49ce8a = _0x4eeaf1 * 4;
  _0x4487a1.width = _0x46d63e;
  _0x4487a1.height = _0x37efb4;
  _0x462e67.translate(-30 * _0x4eeaf1, -40 * _0x4eeaf1);
  _0x462e67.globalAlpha = 1;
  _0x462e67.beginPath();
  _0x462e67.bezierCurveTo(
    67 * _0x4eeaf1,
    56 * _0x4eeaf1,
    72 * _0x4eeaf1,
    71 * _0x4eeaf1,
    72 * _0x4eeaf1,
    71 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    72 * _0x4eeaf1,
    71 * _0x4eeaf1,
    84 * _0x4eeaf1,
    70 * _0x4eeaf1,
    75 * _0x4eeaf1,
    82 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    70 * _0x4eeaf1,
    88 * _0x4eeaf1,
    61 * _0x4eeaf1,
    89 * _0x4eeaf1,
    58 * _0x4eeaf1,
    89 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    55 * _0x4eeaf1,
    89 * _0x4eeaf1,
    40 * _0x4eeaf1,
    89 * _0x4eeaf1,
    46 * _0x4eeaf1,
    77 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    46 * _0x4eeaf1,
    77 * _0x4eeaf1,
    43 * _0x4eeaf1,
    63 * _0x4eeaf1,
    43 * _0x4eeaf1,
    63 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    35 * _0x4eeaf1,
    61 * _0x4eeaf1,
    35 * _0x4eeaf1,
    53 * _0x4eeaf1,
    42 * _0x4eeaf1,
    47 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    48 * _0x4eeaf1,
    42 * _0x4eeaf1,
    62 * _0x4eeaf1,
    41 * _0x4eeaf1,
    66 * _0x4eeaf1,
    43 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    70 * _0x4eeaf1,
    45 * _0x4eeaf1,
    72 * _0x4eeaf1,
    48 * _0x4eeaf1,
    67 * _0x4eeaf1,
    56 * _0x4eeaf1
  );
  _0x462e67.closePath();
  fill_path(_0x462e67, _0x1fd330[0]);
  _0x462e67.beginPath();
  _0x462e67.bezierCurveTo(
    68 * _0x4eeaf1,
    61 * _0x4eeaf1,
    72 * _0x4eeaf1,
    76 * _0x4eeaf1,
    72 * _0x4eeaf1,
    76 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    65 * _0x4eeaf1,
    85 * _0x4eeaf1,
    61 * _0x4eeaf1,
    85 * _0x4eeaf1,
    49 * _0x4eeaf1,
    83 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    49 * _0x4eeaf1,
    83 * _0x4eeaf1,
    44 * _0x4eeaf1,
    63 * _0x4eeaf1,
    44 * _0x4eeaf1,
    63 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    54 * _0x4eeaf1,
    63 * _0x4eeaf1,
    60 * _0x4eeaf1,
    63 * _0x4eeaf1,
    67 * _0x4eeaf1,
    55 * _0x4eeaf1
  );
  _0x462e67.closePath();
  fill_path(_0x462e67, _0x1fd330[1]);
  _0x462e67.beginPath();
  _0x462e67.moveTo(69 * _0x4eeaf1, 65 * _0x4eeaf1);
  _0x462e67.bezierCurveTo(
    70 * _0x4eeaf1,
    61 * _0x4eeaf1,
    81 * _0x4eeaf1,
    66 * _0x4eeaf1,
    86 * _0x4eeaf1,
    66 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    90 * _0x4eeaf1,
    66 * _0x4eeaf1,
    97 * _0x4eeaf1,
    63 * _0x4eeaf1,
    97 * _0x4eeaf1,
    56 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    97 * _0x4eeaf1,
    50 * _0x4eeaf1,
    93 * _0x4eeaf1,
    47 * _0x4eeaf1,
    88 * _0x4eeaf1,
    44 * _0x4eeaf1
  );
  fill_path(_0x462e67, false, _0x1fd330[1], 2);
  _0x462e67.beginPath();
  _0x462e67.moveTo(50 * _0x4eeaf1, 48 * _0x4eeaf1);
  _0x462e67.bezierCurveTo(
    43 * _0x4eeaf1,
    52 * _0x4eeaf1,
    50 * _0x4eeaf1,
    54 * _0x4eeaf1,
    51 * _0x4eeaf1,
    54 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    54 * _0x4eeaf1,
    54 * _0x4eeaf1,
    59 * _0x4eeaf1,
    52 * _0x4eeaf1,
    59 * _0x4eeaf1,
    49 * _0x4eeaf1
  );
  _0x462e67.bezierCurveTo(
    59 * _0x4eeaf1,
    48 * _0x4eeaf1,
    55 * _0x4eeaf1,
    46 * _0x4eeaf1,
    50 * _0x4eeaf1,
    48 * _0x4eeaf1
  );
  fill_path(_0x462e67, _0x1fd330[2]);
  return _0x4487a1;
}
function create_bandage(_0x25f2c3, _0x45ef23, _0x416b2b) {
  var _0x54cda2 = document.createElement("canvas");
  var _0x71f2ee = _0x54cda2.getContext("2d");
  var _0x1c7f7d = _0x25f2c3 * 195;
  var _0x47ea59 = _0x25f2c3 * 190;
  var _0x16e684 = _0x1c7f7d / 2;
  var _0x5b01bc = _0x47ea59 / 2;
  _0x54cda2.width = _0x1c7f7d;
  _0x54cda2.height = _0x47ea59;
  var _0x500ed6 = _0x25f2c3 * 10;
  var _0x289448 = _0x25f2c3 * 35;
  var _0x2ab7b6 = _0x25f2c3 * 150;
  var _0xddb78f = _0x289448 / 2;
  var _0x4cd761 = _0x2ab7b6 / 2;
  var _0x14c5a0 = _0x25f2c3 * 4;
  _0x71f2ee.translate(_0x16e684 - 5 * _0x25f2c3, _0x5b01bc - 5 * _0x25f2c3);
  _0x71f2ee.rotate(-Math.PI / 1.25);
  _0x71f2ee.globalAlpha = 1;
  round_rect(
    _0x71f2ee,
    -_0xddb78f,
    -_0x4cd761,
    _0x289448,
    _0x2ab7b6,
    _0x500ed6
  );
  fill_path(_0x71f2ee, _0x416b2b[0], _0x416b2b[1], _0x14c5a0);
  _0x71f2ee.translate(0, 0);
  _0x71f2ee.rotate(Math.PI / 3);
  _0x71f2ee.globalAlpha = 1;
  round_rect(
    _0x71f2ee,
    -_0xddb78f,
    -_0x4cd761,
    _0x289448,
    _0x2ab7b6,
    _0x500ed6
  );
  fill_path(_0x71f2ee, _0x416b2b[0], _0x416b2b[1], _0x14c5a0);
  _0x71f2ee.translate(0, 5);
  round_rect(
    _0x71f2ee,
    -_0xddb78f / 2,
    -_0x4cd761 / 2,
    _0x289448 / 2,
    _0x2ab7b6 / 3,
    _0x500ed6 - 2
  );
  fill_path(_0x71f2ee, _0x416b2b[1]);
  return _0x54cda2;
}
function create_craft_button(
  _0x535192,
  _0x560295,
  _0x4f5646,
  _0x36d452,
  _0x29c11f
) {
  var _0x3ea9c8 = document.createElement("canvas");
  var _0xfa097d = _0x3ea9c8.getContext("2d");
  var _0x3a5583 = _0x535192 * 70;
  var _0x2f6362 = _0x535192 * 70;
  var _0x118e16 = _0x535192 * 10;
  var _0x1efb43 = _0x535192 * 5;
  _0x3ea9c8.width = _0x3a5583;
  _0x3ea9c8.height = _0x2f6362 + _0x1efb43;
  for (var _0x119016 = 0; _0x119016 < _0x560295.length; _0x119016++) {
    var _0x9ec341 = _0x560295[_0x119016];
    _0xfa097d.globalAlpha = _0x9ec341.a;
    var _0x23da72 = _0x9ec341.f(_0x4f5646, false, _0x9ec341.c);
    _0xfa097d.save();
    _0xfa097d.translate(
      _0x3a5583 / 2 + _0x9ec341.x * _0x535192,
      _0x2f6362 / 2 + _0x9ec341.y * _0x535192
    );
    _0xfa097d.rotate(_0x9ec341.r);
    _0xfa097d.drawImage(_0x23da72, -_0x23da72.width / 2, -_0x23da72.height / 2);
    _0xfa097d.restore();
  }
  var _0xee3baa = [];
  for (var _0x119016 = 0; _0x119016 < _0x36d452.length; _0x119016++) {
    var _0x35bc86 = document.createElement("canvas");
    var _0x2ff4df = _0x35bc86.getContext("2d");
    _0x35bc86.width = _0x3a5583;
    _0x35bc86.height = _0x2f6362 + _0x1efb43;
    _0x2ff4df.globalAlpha = _0x29c11f / 2;
    if (_0x119016 == 2) {
      round_rect(_0x2ff4df, 0, _0x1efb43, _0x3a5583, _0x2f6362, _0x118e16);
    } else {
      round_rect(_0x2ff4df, 0, 0, _0x3a5583, _0x2f6362 + _0x1efb43, _0x118e16);
    }
    fill_path(_0x2ff4df, "#081a19");
    _0x2ff4df.globalAlpha = _0x29c11f;
    if (_0x119016 == 2) {
      round_rect(_0x2ff4df, 0, _0x1efb43, _0x3a5583, _0x2f6362, _0x118e16);
    } else {
      round_rect(_0x2ff4df, 0, 0, _0x3a5583, _0x2f6362, _0x118e16);
    }
    fill_path(_0x2ff4df, _0x36d452[_0x119016]);
    _0x2ff4df.globalAlpha = 1;
    if (_0x119016 == 2) {
      _0x2ff4df.drawImage(_0x3ea9c8, 0, _0x1efb43);
    } else {
      _0x2ff4df.drawImage(_0x3ea9c8, 0, 0);
    }
    _0xee3baa.push(CTI(_0x35bc86));
  }
  return _0xee3baa;
}
function create_bread_oven_ui(_0x5b5719, _0x217f34) {
  var _0x2bb9ae = document.createElement("canvas");
  var _0x219d72 = _0x2bb9ae.getContext("2d");
  _0x2bb9ae.width = 149 * _0x5b5719;
  _0x2bb9ae.height = 356 * _0x5b5719;
  _0x219d72.save();
  _0x219d72.translate(74.5 * _0x5b5719, 177.5 * _0x5b5719);
  round_rect(
    _0x219d72,
    -57.5 * _0x5b5719,
    -161.5 * _0x5b5719,
    100 * _0x5b5719,
    323 * _0x5b5719,
    10 * _0x5b5719
  );
  _0x219d72.restore();
  fill_path(_0x219d72, _0x217f34[0], _0x217f34[1], 4 * _0x5b5719);
  _0x219d72.save();
  _0x219d72.translate(74.5 * _0x5b5719, 177.5 * _0x5b5719);
  round_rect(
    _0x219d72,
    -57.5 * _0x5b5719,
    50.5 * _0x5b5719,
    100 * _0x5b5719,
    105 * _0x5b5719,
    10 * _0x5b5719
  );
  _0x219d72.restore();
  fill_path(_0x219d72, _0x217f34[6], _0x217f34[1], 4 * _0x5b5719);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 125 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    74.5 * _0x5b5719,
    125 * _0x5b5719,
    118 * _0x5b5719,
    125 * _0x5b5719,
    118 * _0x5b5719,
    125 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[2], _0x217f34[2], 10 * _0x5b5719);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 120 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    74.5 * _0x5b5719,
    120 * _0x5b5719,
    74.5 * _0x5b5719,
    120 * _0x5b5719,
    118 * _0x5b5719,
    120 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[3], _0x217f34[3], 10 * _0x5b5719);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 228 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    75 * _0x5b5719,
    228.5 * _0x5b5719,
    118 * _0x5b5719,
    228.5 * _0x5b5719,
    118 * _0x5b5719,
    229 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[2], _0x217f34[2], 10 * _0x5b5719);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 224 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    75 * _0x5b5719,
    224 * _0x5b5719,
    118 * _0x5b5719,
    224 * _0x5b5719,
    118 * _0x5b5719,
    224 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[3], _0x217f34[3], 10 * _0x5b5719);
  _0x219d72.save();
  _0x219d72.translate(72 * _0x5b5719, 68.5 * _0x5b5719);
  round_rect(
    _0x219d72,
    -41.5 * _0x5b5719,
    -36.5 * _0x5b5719,
    73 * _0x5b5719,
    73 * _0x5b5719,
    13 * _0x5b5719
  );
  _0x219d72.restore();
  fill_path(_0x219d72, _0x217f34[4]);
  _0x219d72.save();
  _0x219d72.translate(72 * _0x5b5719, 175.5 * _0x5b5719);
  round_rect(
    _0x219d72,
    -41.5 * _0x5b5719,
    -38.5 * _0x5b5719,
    73 * _0x5b5719,
    73 * _0x5b5719,
    13 * _0x5b5719
  );
  _0x219d72.restore();
  fill_path(_0x219d72, _0x217f34[4]);
  _0x219d72.save();
  _0x219d72.translate(72 * _0x5b5719, 279.5 * _0x5b5719);
  round_rect(
    _0x219d72,
    -41.5 * _0x5b5719,
    -40.5 * _0x5b5719,
    73 * _0x5b5719,
    73 * _0x5b5719,
    13 * _0x5b5719
  );
  _0x219d72.restore();
  fill_path(_0x219d72, _0x217f34[4]);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 338 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    75 * _0x5b5719,
    338 * _0x5b5719,
    118 * _0x5b5719,
    338 * _0x5b5719,
    118 * _0x5b5719,
    338 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[2], _0x217f34[2], 10 * _0x5b5719);
  _0x219d72.beginPath();
  _0x219d72.lineCap = "round";
  _0x219d72.lineJoin = "round";
  _0x219d72.moveTo(16 * _0x5b5719, 333 * _0x5b5719);
  _0x219d72.bezierCurveTo(
    75 * _0x5b5719,
    333 * _0x5b5719,
    118 * _0x5b5719,
    333 * _0x5b5719,
    118 * _0x5b5719,
    333 * _0x5b5719
  );
  _0x219d72.closePath();
  fill_path(_0x219d72, _0x217f34[3], _0x217f34[3], 10 * _0x5b5719);
  return _0x2bb9ae;
}
function create_big_fire_wood(_0x40f635, _0x1ce6bb, _0x2c26f7) {
  var _0x115fdb = document.createElement("canvas");
  var _0x884c15 = _0x115fdb.getContext("2d");
  var _0xe6f1ef = _0x40f635 * 193;
  var _0x2925e2 = _0x40f635 * 198;
  var _0x240e3d = 140 * _0x40f635;
  var _0xb745dd = 90 * _0x40f635;
  _0x115fdb.width = _0xe6f1ef;
  _0x115fdb.height = _0x2925e2;
  var _0x3387ff = _0x40f635 * 10;
  var _0x197cac = _0x40f635 * 25;
  var _0x275091 = _0x40f635 * 180;
  var _0x270899 = _0x197cac / 2;
  var _0x10d101 = _0x275091 / 2;
  var _0x5f4b9a = _0x40f635 * 4;
  _0x884c15.translate(-25 * _0x40f635, 1 * _0x40f635);
  _0x884c15.translate(_0x240e3d, _0xb745dd);
  _0x884c15.rotate(-Math.PI / 5);
  round_rect(
    _0x884c15,
    -_0x270899,
    -_0x10d101,
    _0x197cac,
    _0x275091,
    _0x3387ff
  );
  fill_path(_0x884c15, _0x2c26f7[0], _0x2c26f7[1], _0x5f4b9a);
  _0x884c15.translate(-30 * _0x40f635, -25 * _0x40f635);
  _0x884c15.rotate(Math.PI / 3);
  round_rect(
    _0x884c15,
    -_0x270899,
    -_0x10d101,
    _0x197cac,
    _0x275091,
    _0x3387ff
  );
  fill_path(_0x884c15, _0x2c26f7[0], _0x2c26f7[1], _0x5f4b9a);
  _0x884c15.translate(35 * _0x40f635, 30 * _0x40f635);
  _0x884c15.rotate(Math.PI / 3);
  round_rect(
    _0x884c15,
    -_0x270899,
    -_0x10d101,
    _0x197cac,
    _0x275091,
    _0x3387ff
  );
  fill_path(_0x884c15, _0x2c26f7[0], _0x2c26f7[1], _0x5f4b9a);
  return _0x115fdb;
}
function create_fire(_0xde8f46, _0x2d9d86, _0x313ac6) {
  var _0xc24d6f = document.createElement("canvas");
  var _0x3ac9f3 = _0xc24d6f.getContext("2d");
  var _0x57196c = _0xde8f46 * 145;
  var _0x4ca61f = _0xde8f46 * 145;
  var _0x7bd792 = _0x57196c / 2;
  var _0x2bc5bc = _0x4ca61f / 2;
  _0xc24d6f.width = _0x57196c;
  _0xc24d6f.height = _0x4ca61f;
  var _0xa5f940 = _0xde8f46 * 70;
  _0x3ac9f3.translate(_0x7bd792, _0x2bc5bc);
  _0x3ac9f3.globalAlpha = 0.4;
  circle(_0x3ac9f3, 0, 0, _0xa5f940);
  fill_path(_0x3ac9f3, _0x313ac6[0]);
  var _0xa5f940 = _0xde8f46 * 50;
  _0x3ac9f3.translate(0, 0);
  _0x3ac9f3.globalAlpha = 0.8;
  circle(_0x3ac9f3, 0, 0, _0xa5f940);
  fill_path(_0x3ac9f3, _0x313ac6[0]);
  var _0xa5f940 = _0xde8f46 * 35;
  _0x3ac9f3.translate(0, 0);
  _0x3ac9f3.globalAlpha = 0.8;
  circle(_0x3ac9f3, 0, 0, _0xa5f940);
  fill_path(_0x3ac9f3, _0x313ac6[1]);
  var _0xa5f940 = _0xde8f46 * 20;
  _0x3ac9f3.translate(0, 0);
  _0x3ac9f3.globalAlpha = 0.8;
  circle(_0x3ac9f3, 0, 0, _0xa5f940);
  fill_path(_0x3ac9f3, _0x313ac6[2]);
  return _0xc24d6f;
}
function create_wood_fire(_0x187263, _0x414cef, _0xb9ae19) {
  var _0x1dd5d5 = document.createElement("canvas");
  var _0x58384b = _0x1dd5d5.getContext("2d");
  var _0x7616fc = _0x187263 * 135;
  var _0xd937e8 = _0x187263 * 190;
  var _0x3b938a = _0x7616fc / 2;
  var _0x272606 = _0xd937e8 / 2;
  _0x1dd5d5.width = _0x7616fc;
  _0x1dd5d5.height = _0xd937e8;
  var _0xa7736f = _0x187263 * 10;
  var _0x4f7fe7 = _0x187263 * 25;
  var _0x58ef46 = _0x187263 * 180;
  var _0x1faf37 = _0x4f7fe7 / 2;
  var _0x266731 = _0x58ef46 / 2;
  var _0x41f6ae = _0x187263 * 4;
  _0x58384b.translate(_0x3b938a, _0x272606);
  _0x58384b.rotate(-Math.PI / 5);
  _0x58384b.globalAlpha = 1;
  round_rect(
    _0x58384b,
    -_0x1faf37,
    -_0x266731,
    _0x4f7fe7,
    _0x58ef46,
    _0xa7736f
  );
  fill_path(_0x58384b, _0xb9ae19[0], _0xb9ae19[1], _0x41f6ae);
  _0x58384b.translate(0, 0);
  _0x58384b.rotate(Math.PI / 5);
  _0x58384b.globalAlpha = 1;
  round_rect(
    _0x58384b,
    -_0x1faf37,
    -_0x266731,
    _0x4f7fe7,
    _0x58ef46,
    _0xa7736f
  );
  fill_path(_0x58384b, _0xb9ae19[0], _0xb9ae19[1], _0x41f6ae);
  return _0x1dd5d5;
}
function create_ground_fire(_0xb04f73, _0x152f28, _0xa1e051) {
  var _0x19bc22 = document.createElement("canvas");
  var _0x4bd55b = _0x19bc22.getContext("2d");
  var _0x257268 = _0xb04f73 * 205;
  var _0x4e51bf = _0xb04f73 * 205;
  var _0x5353e9 = _0x257268 / 2;
  var _0x4fc080 = _0x4e51bf / 2;
  _0x19bc22.width = _0x257268;
  _0x19bc22.height = _0x4e51bf;
  var _0x339d0c = _0xb04f73 * 100;
  _0x4bd55b.translate(_0x5353e9, _0x4fc080);
  _0x4bd55b.globalAlpha = 1;
  circle(_0x4bd55b, 0, 0, _0x339d0c);
  fill_path(_0x4bd55b, _0xa1e051[0]);
  return _0x19bc22;
}
function create_halo_fire(_0x25643c, _0x106957, _0x4dfc6a) {
  var _0x107011 = document.createElement("canvas");
  var _0x183560 = _0x107011.getContext("2d");
  var _0x952deb = _0x25643c * 370;
  var _0x3f0d4e = _0x25643c * 370;
  var _0x301754 = _0x952deb / 2;
  var _0x557d42 = _0x3f0d4e / 2;
  _0x107011.width = _0x952deb;
  _0x107011.height = _0x3f0d4e;
  var _0x2432e0 = _0x25643c * 180;
  _0x183560.globalAlpha = 0.2;
  circle(_0x183560, _0x301754, _0x557d42, _0x2432e0);
  fill_path(_0x183560, _0x4dfc6a[0]);
  return _0x107011;
}
function create_elf_hat(_0xf758de, _0x2752ce, _0x27f8e4) {
  var _0x566672 = document.createElement("canvas");
  var _0x2e1131 = _0x566672.getContext("2d");
  _0x566672.width = 155 * _0xf758de;
  _0x566672.height = 127 * _0xf758de;
  _0x2e1131.globalAlpha = 0.5;
  _0x2e1131.translate(0, 8 * _0xf758de);
  _0x2e1131.translate(-7 * _0xf758de, -20 * _0xf758de);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(55 * _0xf758de, 68 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    86 * _0xf758de,
    64 * _0xf758de,
    117 * _0xf758de,
    66 * _0xf758de,
    134 * _0xf758de,
    68 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    152 * _0xf758de,
    69 * _0xf758de,
    165 * _0xf758de,
    86 * _0xf758de,
    152 * _0xf758de,
    104 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    146 * _0xf758de,
    87 * _0xf758de,
    122 * _0xf758de,
    89 * _0xf758de,
    98 * _0xf758de,
    90 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    64 * _0xf758de,
    89 * _0xf758de,
    41 * _0xf758de,
    91 * _0xf758de,
    36 * _0xf758de,
    106 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    19 * _0xf758de,
    92 * _0xf758de,
    31 * _0xf758de,
    71 * _0xf758de,
    54 * _0xf758de,
    69 * _0xf758de
  );
  _0x2e1131.closePath();
  fill_path(_0x2e1131, _0x27f8e4[0]);
  _0x2e1131.globalAlpha = 1;
  _0x2e1131.translate(0, -8 * _0xf758de);
  _0x2e1131.translate(7 * _0xf758de, 20 * _0xf758de);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(24 * _0xf758de, 28 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    39 * _0xf758de,
    30 * _0xf758de,
    37 * _0xf758de,
    31 * _0xf758de,
    40 * _0xf758de,
    32 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    22 * _0xf758de,
    45 * _0xf758de,
    26 * _0xf758de,
    58 * _0xf758de,
    29 * _0xf758de,
    66 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    86.5 * _0xf758de,
    65 * _0xf758de,
    86.5 * _0xf758de,
    65 * _0xf758de,
    144 * _0xf758de,
    64 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    151 * _0xf758de,
    42 * _0xf758de,
    132 * _0xf758de,
    20 * _0xf758de,
    120 * _0xf758de,
    16 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    106 * _0xf758de,
    12 * _0xf758de,
    89 * _0xf758de,
    0 * _0xf758de,
    73 * _0xf758de,
    3 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    51 * _0xf758de,
    5 * _0xf758de,
    36 * _0xf758de,
    20 * _0xf758de,
    25 * _0xf758de,
    28 * _0xf758de
  );
  _0x2e1131.closePath();
  fill_path(_0x2e1131, _0x27f8e4[1], _0x27f8e4[2], 4 * _0xf758de);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(30 * _0xf758de, 41 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    49 * _0xf758de,
    31 * _0xf758de,
    53 * _0xf758de,
    29 * _0xf758de,
    62 * _0xf758de,
    27 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    59 * _0xf758de,
    24 * _0xf758de,
    56 * _0xf758de,
    25 * _0xf758de,
    53 * _0xf758de,
    24 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    67 * _0xf758de,
    15 * _0xf758de,
    84 * _0xf758de,
    12 * _0xf758de,
    120 * _0xf758de,
    16 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    107 * _0xf758de,
    11 * _0xf758de,
    96 * _0xf758de,
    6 * _0xf758de,
    85 * _0xf758de,
    2 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    59 * _0xf758de,
    3 * _0xf758de,
    54 * _0xf758de,
    7 * _0xf758de,
    40 * _0xf758de,
    17 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    32.5 * _0xf758de,
    22.5 * _0xf758de,
    32.5 * _0xf758de,
    22.5 * _0xf758de,
    25 * _0xf758de,
    28 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    32 * _0xf758de,
    30 * _0xf758de,
    32 * _0xf758de,
    30 * _0xf758de,
    39 * _0xf758de,
    32 * _0xf758de
  );
  _0x2e1131.closePath();
  fill_path(_0x2e1131, _0x27f8e4[3]);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(24 * _0xf758de, 28 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    39 * _0xf758de,
    30 * _0xf758de,
    37 * _0xf758de,
    31 * _0xf758de,
    40 * _0xf758de,
    32 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    22 * _0xf758de,
    45 * _0xf758de,
    26 * _0xf758de,
    58 * _0xf758de,
    29 * _0xf758de,
    66 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    86.5 * _0xf758de,
    65 * _0xf758de,
    86.5 * _0xf758de,
    65 * _0xf758de,
    144 * _0xf758de,
    64 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    151 * _0xf758de,
    42 * _0xf758de,
    132 * _0xf758de,
    20 * _0xf758de,
    120 * _0xf758de,
    16 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    106 * _0xf758de,
    12 * _0xf758de,
    89 * _0xf758de,
    0 * _0xf758de,
    73 * _0xf758de,
    3 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    51 * _0xf758de,
    5 * _0xf758de,
    36 * _0xf758de,
    20 * _0xf758de,
    25 * _0xf758de,
    28 * _0xf758de
  );
  _0x2e1131.closePath();
  fill_path(_0x2e1131, undefined, _0x27f8e4[2], 4 * _0xf758de);
  circle(
    _0x2e1131,
    18 * _0xf758de,
    38 * _0xf758de,
    14.866068747318506 * _0xf758de
  );
  fill_path(_0x2e1131, _0x27f8e4[4], _0x27f8e4[5], 4 * _0xf758de);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(39 * _0xf758de, 30 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    27 * _0xf758de,
    38 * _0xf758de,
    25 * _0xf758de,
    50 * _0xf758de,
    26 * _0xf758de,
    60 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    36.5 * _0xf758de,
    58.5 * _0xf758de,
    36.5 * _0xf758de,
    58.5 * _0xf758de,
    47 * _0xf758de,
    57 * _0xf758de
  );
  fill_path(_0x2e1131, _0x27f8e4[1], _0x27f8e4[2], 4 * _0xf758de);
  _0x2e1131.translate(-7 * _0xf758de, -20 * _0xf758de);
  _0x2e1131.beginPath();
  _0x2e1131.lineCap = "round";
  _0x2e1131.lineJoin = "round";
  _0x2e1131.moveTo(27 * _0xf758de, 74 * _0xf758de);
  _0x2e1131.bezierCurveTo(
    38 * _0xf758de,
    77.5 * _0xf758de,
    38 * _0xf758de,
    77.5 * _0xf758de,
    49 * _0xf758de,
    81 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    54.5 * _0xf758de,
    75.5 * _0xf758de,
    54.5 * _0xf758de,
    75.5 * _0xf758de,
    60 * _0xf758de,
    70 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    64 * _0xf758de,
    72 * _0xf758de,
    64 * _0xf758de,
    72 * _0xf758de,
    68 * _0xf758de,
    74 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    80.5 * _0xf758de,
    67.5 * _0xf758de,
    80.5 * _0xf758de,
    67.5 * _0xf758de,
    93 * _0xf758de,
    61 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    104.5 * _0xf758de,
    68 * _0xf758de,
    104.5 * _0xf758de,
    68 * _0xf758de,
    116 * _0xf758de,
    75 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    120.5 * _0xf758de,
    72.5 * _0xf758de,
    120.5 * _0xf758de,
    72.5 * _0xf758de,
    125 * _0xf758de,
    70 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    129 * _0xf758de,
    75 * _0xf758de,
    129 * _0xf758de,
    75 * _0xf758de,
    133 * _0xf758de,
    80 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    145.5 * _0xf758de,
    76.5 * _0xf758de,
    145.5 * _0xf758de,
    76.5 * _0xf758de,
    158 * _0xf758de,
    73 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    158 * _0xf758de,
    87 * _0xf758de,
    158 * _0xf758de,
    93 * _0xf758de,
    155 * _0xf758de,
    95 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    152.5 * _0xf758de,
    96 * _0xf758de,
    152.5 * _0xf758de,
    96 * _0xf758de,
    150 * _0xf758de,
    97 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    121 * _0xf758de,
    85 * _0xf758de,
    108 * _0xf758de,
    86 * _0xf758de,
    93 * _0xf758de,
    85 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    64 * _0xf758de,
    85 * _0xf758de,
    52 * _0xf758de,
    95 * _0xf758de,
    38 * _0xf758de,
    99 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    36 * _0xf758de,
    98.5 * _0xf758de,
    36 * _0xf758de,
    98.5 * _0xf758de,
    34 * _0xf758de,
    98 * _0xf758de
  );
  _0x2e1131.bezierCurveTo(
    25 * _0xf758de,
    98 * _0xf758de,
    27 * _0xf758de,
    91 * _0xf758de,
    27 * _0xf758de,
    76 * _0xf758de
  );
  _0x2e1131.closePath();
  fill_path(_0x2e1131, _0x27f8e4[6], _0x27f8e4[7], 6 * _0xf758de);
  return _0x566672;
}
function create_christmas_hat(_0x43f0dc, _0x990dff, _0x6a3866) {
  var _0xabde25 = document.createElement("canvas");
  var _0x4065a6 = _0xabde25.getContext("2d");
  _0xabde25.width = 155 * _0x43f0dc;
  _0xabde25.height = 127 * _0x43f0dc;
  _0x4065a6.globalAlpha = 0.5;
  _0x4065a6.translate(0, 8 * _0x43f0dc);
  _0x4065a6.translate(-7 * _0x43f0dc, -20 * _0x43f0dc);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(55 * _0x43f0dc, 68 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    86 * _0x43f0dc,
    64 * _0x43f0dc,
    117 * _0x43f0dc,
    66 * _0x43f0dc,
    134 * _0x43f0dc,
    68 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    152 * _0x43f0dc,
    69 * _0x43f0dc,
    165 * _0x43f0dc,
    86 * _0x43f0dc,
    152 * _0x43f0dc,
    104 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    146 * _0x43f0dc,
    87 * _0x43f0dc,
    122 * _0x43f0dc,
    89 * _0x43f0dc,
    98 * _0x43f0dc,
    90 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    64 * _0x43f0dc,
    89 * _0x43f0dc,
    41 * _0x43f0dc,
    91 * _0x43f0dc,
    36 * _0x43f0dc,
    106 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    19 * _0x43f0dc,
    92 * _0x43f0dc,
    31 * _0x43f0dc,
    71 * _0x43f0dc,
    54 * _0x43f0dc,
    69 * _0x43f0dc
  );
  _0x4065a6.closePath();
  fill_path(_0x4065a6, _0x6a3866[0]);
  _0x4065a6.globalAlpha = 1;
  _0x4065a6.translate(0, -8 * _0x43f0dc);
  _0x4065a6.translate(7 * _0x43f0dc, 20 * _0x43f0dc);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(24 * _0x43f0dc, 28 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    39 * _0x43f0dc,
    30 * _0x43f0dc,
    37 * _0x43f0dc,
    31 * _0x43f0dc,
    40 * _0x43f0dc,
    32 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    22 * _0x43f0dc,
    45 * _0x43f0dc,
    26 * _0x43f0dc,
    58 * _0x43f0dc,
    29 * _0x43f0dc,
    66 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    86.5 * _0x43f0dc,
    65 * _0x43f0dc,
    86.5 * _0x43f0dc,
    65 * _0x43f0dc,
    144 * _0x43f0dc,
    64 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    151 * _0x43f0dc,
    42 * _0x43f0dc,
    132 * _0x43f0dc,
    20 * _0x43f0dc,
    120 * _0x43f0dc,
    16 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    106 * _0x43f0dc,
    12 * _0x43f0dc,
    89 * _0x43f0dc,
    0 * _0x43f0dc,
    73 * _0x43f0dc,
    3 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    51 * _0x43f0dc,
    5 * _0x43f0dc,
    36 * _0x43f0dc,
    20 * _0x43f0dc,
    25 * _0x43f0dc,
    28 * _0x43f0dc
  );
  _0x4065a6.closePath();
  fill_path(_0x4065a6, _0x6a3866[1], _0x6a3866[2], 4 * _0x43f0dc);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(30 * _0x43f0dc, 41 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    49 * _0x43f0dc,
    31 * _0x43f0dc,
    53 * _0x43f0dc,
    29 * _0x43f0dc,
    62 * _0x43f0dc,
    27 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    59 * _0x43f0dc,
    24 * _0x43f0dc,
    56 * _0x43f0dc,
    25 * _0x43f0dc,
    53 * _0x43f0dc,
    24 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    67 * _0x43f0dc,
    15 * _0x43f0dc,
    84 * _0x43f0dc,
    12 * _0x43f0dc,
    120 * _0x43f0dc,
    16 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    107 * _0x43f0dc,
    11 * _0x43f0dc,
    96 * _0x43f0dc,
    6 * _0x43f0dc,
    85 * _0x43f0dc,
    2 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    59 * _0x43f0dc,
    3 * _0x43f0dc,
    54 * _0x43f0dc,
    7 * _0x43f0dc,
    40 * _0x43f0dc,
    17 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    32.5 * _0x43f0dc,
    22.5 * _0x43f0dc,
    32.5 * _0x43f0dc,
    22.5 * _0x43f0dc,
    25 * _0x43f0dc,
    28 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    32 * _0x43f0dc,
    30 * _0x43f0dc,
    32 * _0x43f0dc,
    30 * _0x43f0dc,
    39 * _0x43f0dc,
    32 * _0x43f0dc
  );
  _0x4065a6.closePath();
  fill_path(_0x4065a6, _0x6a3866[3]);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(24 * _0x43f0dc, 28 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    39 * _0x43f0dc,
    30 * _0x43f0dc,
    37 * _0x43f0dc,
    31 * _0x43f0dc,
    40 * _0x43f0dc,
    32 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    22 * _0x43f0dc,
    45 * _0x43f0dc,
    26 * _0x43f0dc,
    58 * _0x43f0dc,
    29 * _0x43f0dc,
    66 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    86.5 * _0x43f0dc,
    65 * _0x43f0dc,
    86.5 * _0x43f0dc,
    65 * _0x43f0dc,
    144 * _0x43f0dc,
    64 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    151 * _0x43f0dc,
    42 * _0x43f0dc,
    132 * _0x43f0dc,
    20 * _0x43f0dc,
    120 * _0x43f0dc,
    16 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    106 * _0x43f0dc,
    12 * _0x43f0dc,
    89 * _0x43f0dc,
    0 * _0x43f0dc,
    73 * _0x43f0dc,
    3 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    51 * _0x43f0dc,
    5 * _0x43f0dc,
    36 * _0x43f0dc,
    20 * _0x43f0dc,
    25 * _0x43f0dc,
    28 * _0x43f0dc
  );
  _0x4065a6.closePath();
  fill_path(_0x4065a6, undefined, _0x6a3866[2], 4 * _0x43f0dc);
  circle(
    _0x4065a6,
    18 * _0x43f0dc,
    38 * _0x43f0dc,
    14.866068747318506 * _0x43f0dc
  );
  fill_path(_0x4065a6, _0x6a3866[4], _0x6a3866[5], 4 * _0x43f0dc);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(39 * _0x43f0dc, 30 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    27 * _0x43f0dc,
    38 * _0x43f0dc,
    25 * _0x43f0dc,
    50 * _0x43f0dc,
    26 * _0x43f0dc,
    60 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    36.5 * _0x43f0dc,
    58.5 * _0x43f0dc,
    36.5 * _0x43f0dc,
    58.5 * _0x43f0dc,
    47 * _0x43f0dc,
    57 * _0x43f0dc
  );
  fill_path(_0x4065a6, _0x6a3866[1], _0x6a3866[2], 4 * _0x43f0dc);
  _0x4065a6.translate(-7 * _0x43f0dc, -20 * _0x43f0dc);
  _0x4065a6.beginPath();
  _0x4065a6.lineCap = "round";
  _0x4065a6.lineJoin = "round";
  _0x4065a6.moveTo(55 * _0x43f0dc, 68 * _0x43f0dc);
  _0x4065a6.bezierCurveTo(
    86 * _0x43f0dc,
    64 * _0x43f0dc,
    117 * _0x43f0dc,
    66 * _0x43f0dc,
    134 * _0x43f0dc,
    68 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    152 * _0x43f0dc,
    69 * _0x43f0dc,
    165 * _0x43f0dc,
    86 * _0x43f0dc,
    152 * _0x43f0dc,
    104 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    146 * _0x43f0dc,
    87 * _0x43f0dc,
    122 * _0x43f0dc,
    89 * _0x43f0dc,
    98 * _0x43f0dc,
    90 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    64 * _0x43f0dc,
    89 * _0x43f0dc,
    41 * _0x43f0dc,
    91 * _0x43f0dc,
    36 * _0x43f0dc,
    106 * _0x43f0dc
  );
  _0x4065a6.bezierCurveTo(
    19 * _0x43f0dc,
    92 * _0x43f0dc,
    31 * _0x43f0dc,
    71 * _0x43f0dc,
    54 * _0x43f0dc,
    69 * _0x43f0dc
  );
  _0x4065a6.closePath();
  fill_path(_0x4065a6, _0x6a3866[4], _0x6a3866[5], 4 * _0x43f0dc);
  return _0xabde25;
}
function create_zombie_hand(_0x2f4ce6, _0x2f2789) {
  var _0x2a93da = document.createElement("canvas");
  var _0xd8cb98 = _0x2a93da.getContext("2d");
  var _0x497438 = _0x2f4ce6 * 220;
  var _0x3bbb24 = _0x2f4ce6 * 220;
  var _0x1876ba = _0x2f4ce6 * 32;
  var _0x50b979 = _0x2f4ce6 * 4;
  _0x2a93da.width = _0x497438;
  _0x2a93da.height = _0x3bbb24;
  _0xd8cb98.translate(_0x497438 / 2, _0x3bbb24 / 2 + 10 * _0x2f4ce6);
  _0xd8cb98.globalAlpha = 0.5;
  circle(_0xd8cb98, 0, 0, _0x1876ba);
  fill_path(_0xd8cb98, _0x2f2789[0], _0x2f2789[0]);
  _0xd8cb98.translate(0, -8 * _0x2f4ce6);
  _0xd8cb98.globalAlpha = 1;
  circle(_0xd8cb98, 0, 0, _0x1876ba);
  fill_path(_0xd8cb98, _0x2f2789[1], _0x2f2789[2], _0x50b979);
  return _0x2a93da;
}
function create_hand(_0x1376dd, _0x25cb2a) {
  var _0x177460 = document.createElement("canvas");
  var _0x11393a = _0x177460.getContext("2d");
  var _0x23dffa = _0x1376dd * 40;
  var _0x701252 = _0x1376dd * 40;
  var _0x2b65a7 = _0x1376dd * 16;
  var _0x522584 = _0x1376dd * 4;
  _0x177460.width = _0x23dffa;
  _0x177460.height = _0x701252;
  _0x11393a.translate(_0x23dffa / 2, _0x701252 / 2);
  _0x11393a.globalAlpha = 1;
  circle(_0x11393a, 0, 0, _0x2b65a7);
  fill_path(_0x11393a, _0x25cb2a[0], _0x25cb2a[1], _0x522584);
  return _0x177460;
}
function create_hand_shadow(_0x4f9d6f, _0x2e99e4) {
  var _0x4f5379 = document.createElement("canvas");
  var _0xb4ff1d = _0x4f5379.getContext("2d");
  var _0x33fcf5 = _0x4f9d6f * 220;
  var _0xcdf78a = _0x4f9d6f * 220;
  var _0x1197d9 = _0x4f9d6f * 16;
  _0x4f5379.width = _0x33fcf5;
  _0x4f5379.height = _0xcdf78a;
  _0xb4ff1d.translate(_0x33fcf5 / 2, _0xcdf78a / 2);
  _0xb4ff1d.globalAlpha = 0.5;
  circle(_0xb4ff1d, 0, 0, _0x1197d9);
  fill_path(_0xb4ff1d, _0x2e99e4[0]);
  _0xb4ff1d.globalAlpha = 1;
  return _0x4f5379;
}
function create_apricot_tree(_0x61398d, _0x977686, _0x5d4a86, _0xb4ccea) {
  var _0x52fee1 = document.createElement("canvas");
  var _0x1d4988 = _0x52fee1.getContext("2d");
  var _0x2d1e3a = _0x61398d * 210;
  var _0x492e02 = _0x61398d * 205;
  var _0x4f4282 = _0x2d1e3a / 2;
  var _0x5d6178 = _0x492e02 / 2;
  var _0x284899 = _0x61398d * 30;
  var _0x57aeb2 = _0x61398d * 20;
  var _0x12637c = _0x61398d * 200;
  var _0x47f89a = _0x61398d * 180;
  var _0x28c552 = _0x61398d * 80;
  var _0x405fa9 = _0x12637c / 2;
  var _0x4b8070 = _0x47f89a / 2;
  _0x52fee1.width = _0x2d1e3a;
  _0x52fee1.height = _0x492e02;
  _0x52fee1.width = 419 * _0x61398d;
  _0x52fee1.height = 412 * _0x61398d;
  if (_0xb4ccea == 1) {
    _0x1d4988.save();
    _0x1d4988.translate(10 * _0x61398d, 0 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      117.99996948242188 * _0x61398d,
      216.40621948242188 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      86.99996948242188 * _0x61398d,
      221.40621948242188 * _0x61398d,
      74.99996948242188 * _0x61398d,
      217.40621948242188 * _0x61398d,
      60.999969482421875 * _0x61398d,
      205.40621948242188 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      114.99996948242188 * _0x61398d,
      227.40621948242188 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      90.99996948242188 * _0x61398d,
      233.40621948242188 * _0x61398d,
      66.99996948242188 * _0x61398d,
      228.40621948242188 * _0x61398d,
      43.999969482421875 * _0x61398d,
      225.40621948242188 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      110.99996948242188 * _0x61398d,
      236.40621948242188 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      94.99996948242188 * _0x61398d,
      244.40621948242188 * _0x61398d,
      79.99996948242188 * _0x61398d,
      249.40621948242188 * _0x61398d,
      60.999969482421875 * _0x61398d,
      249.40621948242188 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      111.99996948242188 * _0x61398d,
      206.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      91.99996948242188 * _0x61398d,
      206.29513549804688 * _0x61398d,
      87.99996948242188 * _0x61398d,
      201.29513549804688 * _0x61398d,
      79.99996948242188 * _0x61398d,
      192.29513549804688 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      109.99996948242188 * _0x61398d,
      249.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      97.99996948242188 * _0x61398d,
      263.18402099609375 * _0x61398d,
      85.99996948242188 * _0x61398d,
      271.18402099609375 * _0x61398d,
      65.99996948242188 * _0x61398d,
      277.18402099609375 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      105.99996948242188 * _0x61398d,
      192.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      99.49996948242188 * _0x61398d,
      197.68402099609375 * _0x61398d,
      99.49996948242188 * _0x61398d,
      197.68402099609375 * _0x61398d,
      92.99996948242188 * _0x61398d,
      203.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      95.99996948242188 * _0x61398d,
      213.18402099609375 * _0x61398d,
      95.99996948242188 * _0x61398d,
      215.18402099609375 * _0x61398d,
      89.99996948242188 * _0x61398d,
      219.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      91.99996948242188 * _0x61398d,
      223.18402099609375 * _0x61398d,
      91.99996948242188 * _0x61398d,
      226.18402099609375 * _0x61398d,
      87.99996948242188 * _0x61398d,
      230.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      89.99996948242188 * _0x61398d,
      234.18402099609375 * _0x61398d,
      91.99996948242188 * _0x61398d,
      237.18402099609375 * _0x61398d,
      90.99996948242188 * _0x61398d,
      244.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      96.99996948242188 * _0x61398d,
      252.18402099609375 * _0x61398d,
      96.99996948242188 * _0x61398d,
      256.18402099609375 * _0x61398d,
      95.99996948242188 * _0x61398d,
      262.18402099609375 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      106.49996948242188 * _0x61398d,
      264.18402099609375 * _0x61398d,
      106.49996948242188 * _0x61398d,
      264.18402099609375 * _0x61398d,
      116.99996948242188 * _0x61398d,
      266.18402099609375 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      104.99996948242188 * _0x61398d,
      183.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      99.99996948242188 * _0x61398d,
      193.29513549804688 * _0x61398d,
      93.99996948242188 * _0x61398d,
      195.29513549804688 * _0x61398d,
      89.99996948242188 * _0x61398d,
      201.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      86.99996948242188 * _0x61398d,
      212.29513549804688 * _0x61398d,
      85.99996948242188 * _0x61398d,
      214.29513549804688 * _0x61398d,
      81.99996948242188 * _0x61398d,
      215.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      83.99996948242188 * _0x61398d,
      223.29513549804688 * _0x61398d,
      83.99996948242188 * _0x61398d,
      227.29513549804688 * _0x61398d,
      79.99996948242188 * _0x61398d,
      230.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      83.99996948242188 * _0x61398d,
      235.29513549804688 * _0x61398d,
      84.99996948242188 * _0x61398d,
      240.29513549804688 * _0x61398d,
      79.99996948242188 * _0x61398d,
      246.29513549804688 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      86.99996948242188 * _0x61398d,
      251.29513549804688 * _0x61398d,
      91.99996948242188 * _0x61398d,
      256.2951354980469 * _0x61398d,
      89.99996948242188 * _0x61398d,
      266.2951354980469 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      102.99996948242188 * _0x61398d,
      269.2951354980469 * _0x61398d,
      102.99996948242188 * _0x61398d,
      269.2951354980469 * _0x61398d,
      115.99996948242188 * _0x61398d,
      272.2951354980469 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(
      107.99996948242188 * _0x61398d,
      177.85067749023438 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      95.99996948242188 * _0x61398d,
      187.35067749023438 * _0x61398d,
      95.99996948242188 * _0x61398d,
      187.35067749023438 * _0x61398d,
      83.99996948242188 * _0x61398d,
      196.85067749023438 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      82.99996948242188 * _0x61398d,
      203.85067749023438 * _0x61398d,
      80.99996948242188 * _0x61398d,
      209.85067749023438 * _0x61398d,
      72.99996948242188 * _0x61398d,
      210.85067749023438 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      73.99996948242188 * _0x61398d,
      220.85067749023438 * _0x61398d,
      73.99996948242188 * _0x61398d,
      221.85067749023438 * _0x61398d,
      66.99996948242188 * _0x61398d,
      227.85067749023438 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      71.99996948242188 * _0x61398d,
      235.85067749023438 * _0x61398d,
      73.99996948242188 * _0x61398d,
      239.85067749023438 * _0x61398d,
      71.99996948242188 * _0x61398d,
      247.85067749023438 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      80.99996948242188 * _0x61398d,
      257.8506774902344 * _0x61398d,
      81.99996948242188 * _0x61398d,
      263.8506774902344 * _0x61398d,
      77.99996948242188 * _0x61398d,
      271.8506774902344 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      95.49996948242188 * _0x61398d,
      272.8506774902344 * _0x61398d,
      95.49996948242188 * _0x61398d,
      272.8506774902344 * _0x61398d,
      112.99996948242188 * _0x61398d,
      273.8506774902344 * _0x61398d
    );
    fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
    _0x1d4988.restore();
  } else {
    if (_0xb4ccea == 2) {
      _0x1d4988.save();
      _0x1d4988.translate(130 * _0x61398d, 35 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        170.99996948242188 * _0x61398d,
        133.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        195.99996948242188 * _0x61398d,
        129.85067749023438 * _0x61398d,
        196.99996948242188 * _0x61398d,
        111.85067749023438 * _0x61398d,
        200.99996948242188 * _0x61398d,
        88.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        169.99996948242188 * _0x61398d,
        143.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        189.99996948242188 * _0x61398d,
        145.85067749023438 * _0x61398d,
        207.99996948242188 * _0x61398d,
        126.85067749023438 * _0x61398d,
        222.99996948242188 * _0x61398d,
        100.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        170.99996948242188 * _0x61398d,
        157.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        193.99996948242188 * _0x61398d,
        160.85067749023438 * _0x61398d,
        210.99996948242188 * _0x61398d,
        151.85067749023438 * _0x61398d,
        232.99996948242188 * _0x61398d,
        139.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        169.99996948242188 * _0x61398d,
        168.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        192.99996948242188 * _0x61398d,
        175.85067749023438 * _0x61398d,
        203.99996948242188 * _0x61398d,
        177.85067749023438 * _0x61398d,
        245.99996948242188 * _0x61398d,
        168.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        167.99996948242188 * _0x61398d,
        168.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        183.99996948242188 * _0x61398d,
        189.85067749023438 * _0x61398d,
        191.99996948242188 * _0x61398d,
        193.85067749023438 * _0x61398d,
        220.99996948242188 * _0x61398d,
        196.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        176.99996948242188 * _0x61398d,
        117.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        181.99996948242188 * _0x61398d,
        120.85067749023438 * _0x61398d,
        181.99996948242188 * _0x61398d,
        120.85067749023438 * _0x61398d,
        186.99996948242188 * _0x61398d,
        123.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        183.99996948242188 * _0x61398d,
        137.85067749023438 * _0x61398d,
        185.99996948242188 * _0x61398d,
        136.85067749023438 * _0x61398d,
        190.99996948242188 * _0x61398d,
        136.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        186.99996948242188 * _0x61398d,
        147.85067749023438 * _0x61398d,
        189.99996948242188 * _0x61398d,
        152.85067749023438 * _0x61398d,
        193.99996948242188 * _0x61398d,
        155.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        187.99996948242188 * _0x61398d,
        165.85067749023438 * _0x61398d,
        190.99996948242188 * _0x61398d,
        169.85067749023438 * _0x61398d,
        190.99996948242188 * _0x61398d,
        172.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        186.99996948242188 * _0x61398d,
        183.85067749023438 * _0x61398d,
        186.99996948242188 * _0x61398d,
        185.85067749023438 * _0x61398d,
        189.99996948242188 * _0x61398d,
        188.85067749023438 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        182.49996948242188 * _0x61398d,
        195.35067749023438 * _0x61398d,
        182.49996948242188 * _0x61398d,
        195.35067749023438 * _0x61398d,
        174.99996948242188 * _0x61398d,
        201.85067749023438 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        176.99996948242188 * _0x61398d,
        112.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        183.99996948242188 * _0x61398d,
        119.18402099609375 * _0x61398d,
        186.99996948242188 * _0x61398d,
        117.18402099609375 * _0x61398d,
        192.99996948242188 * _0x61398d,
        116.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        191.99996948242188 * _0x61398d,
        126.18402099609375 * _0x61398d,
        193.99996948242188 * _0x61398d,
        130.18402099609375 * _0x61398d,
        199.99996948242188 * _0x61398d,
        130.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        194.99996948242188 * _0x61398d,
        145.18402099609375 * _0x61398d,
        197.99996948242188 * _0x61398d,
        147.18402099609375 * _0x61398d,
        201.99996948242188 * _0x61398d,
        153.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        196.99996948242188 * _0x61398d,
        164.18402099609375 * _0x61398d,
        197.99996948242188 * _0x61398d,
        169.18402099609375 * _0x61398d,
        201.99996948242188 * _0x61398d,
        174.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        194.99996948242188 * _0x61398d,
        184.18402099609375 * _0x61398d,
        196.99996948242188 * _0x61398d,
        187.18402099609375 * _0x61398d,
        200.99996948242188 * _0x61398d,
        193.18402099609375 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        185.99996948242188 * _0x61398d,
        195.18402099609375 * _0x61398d,
        181.99996948242188 * _0x61398d,
        201.18402099609375 * _0x61398d,
        174.99996948242188 * _0x61398d,
        210.18402099609375 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(
        176.99996948242188 * _0x61398d,
        101.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        181.99996948242188 * _0x61398d,
        108.29513549804688 * _0x61398d,
        189.99996948242188 * _0x61398d,
        110.29513549804688 * _0x61398d,
        195.99996948242188 * _0x61398d,
        107.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        197.99996948242188 * _0x61398d,
        121.29513549804688 * _0x61398d,
        200.99996948242188 * _0x61398d,
        122.29513549804688 * _0x61398d,
        206.99996948242188 * _0x61398d,
        122.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        201.99996948242188 * _0x61398d,
        138.29513549804688 * _0x61398d,
        204.99996948242188 * _0x61398d,
        142.29513549804688 * _0x61398d,
        211.99996948242188 * _0x61398d,
        148.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        201.99996948242188 * _0x61398d,
        156.29513549804688 * _0x61398d,
        205.99996948242188 * _0x61398d,
        167.29513549804688 * _0x61398d,
        213.99996948242188 * _0x61398d,
        173.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        204.99996948242188 * _0x61398d,
        181.29513549804688 * _0x61398d,
        204.99996948242188 * _0x61398d,
        187.29513549804688 * _0x61398d,
        205.99996948242188 * _0x61398d,
        193.29513549804688 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        190.99996948242188 * _0x61398d,
        198.29513549804688 * _0x61398d,
        181.99996948242188 * _0x61398d,
        205.29513549804688 * _0x61398d,
        174.99996948242188 * _0x61398d,
        214.29513549804688 * _0x61398d
      );
      fill_path(_0x1d4988, undefined, _0x977686[4], 3 * _0x61398d);
      _0x1d4988.restore();
    }
  }
  _0x1d4988.translate(_0x52fee1.width / 2, _0x52fee1.height / 2);
  if (!_0xb4ccea) {
    _0x1d4988.globalAlpha = 0.5;
    round_rect(
      _0x1d4988,
      -_0x405fa9,
      -_0x4b8070,
      _0x12637c,
      _0x47f89a + _0x57aeb2,
      _0x284899
    );
    fill_path(_0x1d4988, _0x977686[0]);
    if (_0x5d4a86) {
      _0x1d4988.rotate(Math.PI);
    }
    _0x1d4988.globalAlpha = 1;
    round_rect(
      _0x1d4988,
      -_0x405fa9,
      -_0x4b8070,
      _0x12637c,
      _0x47f89a,
      _0x284899
    );
    fill_path(_0x1d4988, _0x977686[1], _0x977686[2], 4);
    _0x1d4988.globalAlpha = 1;
    round_rect(
      _0x1d4988,
      -_0x405fa9 + 35 * _0x61398d,
      -_0x4b8070 + 20 * _0x61398d,
      _0x12637c - 50 * _0x61398d,
      _0x47f89a - 50 * _0x61398d,
      _0x284899 - 10 * _0x61398d
    );
    fill_path(_0x1d4988, _0x977686[3]);
  }
  if (_0xb4ccea == 3) {
    _0x1d4988.translate(-_0x52fee1.width / 2, -_0x52fee1.height / 2);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(121 * _0x61398d, 190 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      129 * _0x61398d,
      186 * _0x61398d,
      137 * _0x61398d,
      183 * _0x61398d,
      135 * _0x61398d,
      163 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      131 * _0x61398d,
      135 * _0x61398d,
      153 * _0x61398d,
      127 * _0x61398d,
      177 * _0x61398d,
      124 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      198 * _0x61398d,
      120 * _0x61398d,
      208 * _0x61398d,
      122 * _0x61398d,
      226 * _0x61398d,
      128 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      261 * _0x61398d,
      112 * _0x61398d,
      271 * _0x61398d,
      126 * _0x61398d,
      287 * _0x61398d,
      147 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      310 * _0x61398d,
      163 * _0x61398d,
      304 * _0x61398d,
      183 * _0x61398d,
      283 * _0x61398d,
      196 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      296 * _0x61398d,
      249 * _0x61398d,
      278 * _0x61398d,
      262 * _0x61398d,
      253 * _0x61398d,
      263 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      210 * _0x61398d,
      264 * _0x61398d,
      188 * _0x61398d,
      252 * _0x61398d,
      177 * _0x61398d,
      234 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      133 * _0x61398d,
      242 * _0x61398d,
      123 * _0x61398d,
      241 * _0x61398d,
      115 * _0x61398d,
      225 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      109 * _0x61398d,
      206 * _0x61398d,
      115 * _0x61398d,
      193 * _0x61398d,
      121 * _0x61398d,
      190 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[4]);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(219 * _0x61398d, 144 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      251 * _0x61398d,
      121 * _0x61398d,
      277 * _0x61398d,
      136 * _0x61398d,
      276 * _0x61398d,
      159 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      276 * _0x61398d,
      176 * _0x61398d,
      273 * _0x61398d,
      191 * _0x61398d,
      242 * _0x61398d,
      193 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      226 * _0x61398d,
      228 * _0x61398d,
      155 * _0x61398d,
      219 * _0x61398d,
      150 * _0x61398d,
      183 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      142 * _0x61398d,
      144 * _0x61398d,
      174 * _0x61398d,
      127 * _0x61398d,
      219 * _0x61398d,
      144 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[5]);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(123 * _0x61398d, 214 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      119 * _0x61398d,
      198 * _0x61398d,
      129 * _0x61398d,
      189 * _0x61398d,
      146 * _0x61398d,
      194 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      158 * _0x61398d,
      201 * _0x61398d,
      165 * _0x61398d,
      218 * _0x61398d,
      147 * _0x61398d,
      226 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      135 * _0x61398d,
      230 * _0x61398d,
      125 * _0x61398d,
      222 * _0x61398d,
      123 * _0x61398d,
      214 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[5]);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(257 * _0x61398d, 199 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      264 * _0x61398d,
      199 * _0x61398d,
      275 * _0x61398d,
      213 * _0x61398d,
      261 * _0x61398d,
      220 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      246 * _0x61398d,
      225 * _0x61398d,
      235 * _0x61398d,
      200 * _0x61398d,
      257 * _0x61398d,
      199 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[5]);
    _0x1d4988.translate(-5 * _0x61398d, 55 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(186 * _0x61398d, 123 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      198 * _0x61398d,
      115 * _0x61398d,
      219 * _0x61398d,
      110 * _0x61398d,
      219 * _0x61398d,
      123 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      216 * _0x61398d,
      135 * _0x61398d,
      171 * _0x61398d,
      143 * _0x61398d,
      186 * _0x61398d,
      123 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[5]);
    _0x1d4988.translate(5 * _0x61398d, -55 * _0x61398d);
    _0x1d4988.translate(-5 * _0x61398d, 15 * _0x61398d);
    _0x1d4988.beginPath();
    _0x1d4988.lineCap = "round";
    _0x1d4988.lineJoin = "round";
    _0x1d4988.moveTo(171 * _0x61398d, 241 * _0x61398d);
    _0x1d4988.bezierCurveTo(
      189 * _0x61398d,
      234 * _0x61398d,
      200 * _0x61398d,
      248 * _0x61398d,
      189 * _0x61398d,
      254 * _0x61398d
    );
    _0x1d4988.bezierCurveTo(
      179 * _0x61398d,
      260 * _0x61398d,
      158 * _0x61398d,
      246 * _0x61398d,
      171 * _0x61398d,
      241 * _0x61398d
    );
    _0x1d4988.closePath();
    fill_path(_0x1d4988, _0x977686[5]);
  } else {
    if (_0xb4ccea == 4) {
      _0x1d4988.translate(-_0x52fee1.width / 2, -_0x52fee1.height / 2);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(30 * _0x61398d, 167 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        47 * _0x61398d,
        144 * _0x61398d,
        64 * _0x61398d,
        140 * _0x61398d,
        80 * _0x61398d,
        147 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        95 * _0x61398d,
        154 * _0x61398d,
        95 * _0x61398d,
        159 * _0x61398d,
        100 * _0x61398d,
        179 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        105 * _0x61398d,
        202 * _0x61398d,
        95 * _0x61398d,
        218 * _0x61398d,
        69 * _0x61398d,
        218 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        48 * _0x61398d,
        236 * _0x61398d,
        26 * _0x61398d,
        223 * _0x61398d,
        28 * _0x61398d,
        213 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        28 * _0x61398d,
        205 * _0x61398d,
        29 * _0x61398d,
        199 * _0x61398d,
        32 * _0x61398d,
        195 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        21 * _0x61398d,
        183 * _0x61398d,
        27 * _0x61398d,
        173 * _0x61398d,
        30 * _0x61398d,
        167 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(26 * _0x61398d, 145 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        32 * _0x61398d,
        138 * _0x61398d,
        37 * _0x61398d,
        137 * _0x61398d,
        40 * _0x61398d,
        139 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        43 * _0x61398d,
        140 * _0x61398d,
        41 * _0x61398d,
        150 * _0x61398d,
        31 * _0x61398d,
        159 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        23 * _0x61398d,
        166 * _0x61398d,
        17 * _0x61398d,
        158 * _0x61398d,
        26 * _0x61398d,
        145 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(13 * _0x61398d, 193 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        21 * _0x61398d,
        187 * _0x61398d,
        30 * _0x61398d,
        190 * _0x61398d,
        20 * _0x61398d,
        202 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        13 * _0x61398d,
        208 * _0x61398d,
        7 * _0x61398d,
        202 * _0x61398d,
        13 * _0x61398d,
        193 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(121 * _0x61398d, 190 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        129 * _0x61398d,
        186 * _0x61398d,
        137 * _0x61398d,
        183 * _0x61398d,
        135 * _0x61398d,
        163 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        131 * _0x61398d,
        135 * _0x61398d,
        153 * _0x61398d,
        127 * _0x61398d,
        177 * _0x61398d,
        124 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        198 * _0x61398d,
        120 * _0x61398d,
        208 * _0x61398d,
        122 * _0x61398d,
        226 * _0x61398d,
        128 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        261 * _0x61398d,
        112 * _0x61398d,
        271 * _0x61398d,
        126 * _0x61398d,
        287 * _0x61398d,
        147 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        310 * _0x61398d,
        163 * _0x61398d,
        304 * _0x61398d,
        183 * _0x61398d,
        283 * _0x61398d,
        196 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        296 * _0x61398d,
        249 * _0x61398d,
        278 * _0x61398d,
        262 * _0x61398d,
        253 * _0x61398d,
        263 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        210 * _0x61398d,
        264 * _0x61398d,
        188 * _0x61398d,
        252 * _0x61398d,
        177 * _0x61398d,
        234 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        133 * _0x61398d,
        242 * _0x61398d,
        123 * _0x61398d,
        241 * _0x61398d,
        115 * _0x61398d,
        225 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        109 * _0x61398d,
        206 * _0x61398d,
        115 * _0x61398d,
        193 * _0x61398d,
        121 * _0x61398d,
        190 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(335 * _0x61398d, 196 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        312 * _0x61398d,
        208 * _0x61398d,
        300 * _0x61398d,
        185 * _0x61398d,
        309 * _0x61398d,
        167 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        314 * _0x61398d,
        141 * _0x61398d,
        339 * _0x61398d,
        127 * _0x61398d,
        359 * _0x61398d,
        144 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        363 * _0x61398d,
        148 * _0x61398d,
        364 * _0x61398d,
        150 * _0x61398d,
        364 * _0x61398d,
        150 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        392 * _0x61398d,
        143 * _0x61398d,
        396 * _0x61398d,
        183 * _0x61398d,
        378 * _0x61398d,
        204 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        367 * _0x61398d,
        215 * _0x61398d,
        339 * _0x61398d,
        208 * _0x61398d,
        335 * _0x61398d,
        196 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(349 * _0x61398d, 212 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        339 * _0x61398d,
        216 * _0x61398d,
        334 * _0x61398d,
        208 * _0x61398d,
        341 * _0x61398d,
        203 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        353 * _0x61398d,
        198 * _0x61398d,
        361 * _0x61398d,
        205 * _0x61398d,
        349 * _0x61398d,
        212 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(46 * _0x61398d, 165 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        55 * _0x61398d,
        148 * _0x61398d,
        85 * _0x61398d,
        157 * _0x61398d,
        83 * _0x61398d,
        175 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        99 * _0x61398d,
        185 * _0x61398d,
        89 * _0x61398d,
        212 * _0x61398d,
        66 * _0x61398d,
        204 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        55 * _0x61398d,
        212 * _0x61398d,
        43 * _0x61398d,
        212 * _0x61398d,
        41 * _0x61398d,
        202 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        39 * _0x61398d,
        194 * _0x61398d,
        42 * _0x61398d,
        187 * _0x61398d,
        49 * _0x61398d,
        185 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        44 * _0x61398d,
        175 * _0x61398d,
        45 * _0x61398d,
        172 * _0x61398d,
        46 * _0x61398d,
        165 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(219 * _0x61398d, 144 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        251 * _0x61398d,
        121 * _0x61398d,
        277 * _0x61398d,
        136 * _0x61398d,
        276 * _0x61398d,
        159 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        276 * _0x61398d,
        176 * _0x61398d,
        273 * _0x61398d,
        191 * _0x61398d,
        242 * _0x61398d,
        193 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        226 * _0x61398d,
        228 * _0x61398d,
        155 * _0x61398d,
        219 * _0x61398d,
        150 * _0x61398d,
        183 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        142 * _0x61398d,
        144 * _0x61398d,
        174 * _0x61398d,
        127 * _0x61398d,
        219 * _0x61398d,
        144 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[5]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(123 * _0x61398d, 214 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        119 * _0x61398d,
        198 * _0x61398d,
        129 * _0x61398d,
        189 * _0x61398d,
        146 * _0x61398d,
        194 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        158 * _0x61398d,
        201 * _0x61398d,
        165 * _0x61398d,
        218 * _0x61398d,
        147 * _0x61398d,
        226 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        135 * _0x61398d,
        230 * _0x61398d,
        125 * _0x61398d,
        222 * _0x61398d,
        123 * _0x61398d,
        214 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[5]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(257 * _0x61398d, 199 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        264 * _0x61398d,
        199 * _0x61398d,
        275 * _0x61398d,
        213 * _0x61398d,
        261 * _0x61398d,
        220 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        246 * _0x61398d,
        225 * _0x61398d,
        235 * _0x61398d,
        200 * _0x61398d,
        257 * _0x61398d,
        199 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[5]);
      _0x1d4988.translate(-5 * _0x61398d, 55 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(186 * _0x61398d, 123 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        198 * _0x61398d,
        115 * _0x61398d,
        219 * _0x61398d,
        110 * _0x61398d,
        219 * _0x61398d,
        123 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        216 * _0x61398d,
        135 * _0x61398d,
        171 * _0x61398d,
        143 * _0x61398d,
        186 * _0x61398d,
        123 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[5]);
      _0x1d4988.translate(5 * _0x61398d, -55 * _0x61398d);
      _0x1d4988.translate(-5 * _0x61398d, 15 * _0x61398d);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(171 * _0x61398d, 241 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        189 * _0x61398d,
        234 * _0x61398d,
        200 * _0x61398d,
        248 * _0x61398d,
        189 * _0x61398d,
        254 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        179 * _0x61398d,
        260 * _0x61398d,
        158 * _0x61398d,
        246 * _0x61398d,
        171 * _0x61398d,
        241 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[5]);
      _0x1d4988.beginPath();
      _0x1d4988.lineCap = "round";
      _0x1d4988.lineJoin = "round";
      _0x1d4988.moveTo(367 * _0x61398d, 164 * _0x61398d);
      _0x1d4988.bezierCurveTo(
        380 * _0x61398d,
        160 * _0x61398d,
        391 * _0x61398d,
        185 * _0x61398d,
        371 * _0x61398d,
        189 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        362 * _0x61398d,
        192 * _0x61398d,
        354 * _0x61398d,
        191 * _0x61398d,
        350 * _0x61398d,
        185 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        326 * _0x61398d,
        205 * _0x61398d,
        314 * _0x61398d,
        182 * _0x61398d,
        316 * _0x61398d,
        171 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        317 * _0x61398d,
        150 * _0x61398d,
        332 * _0x61398d,
        143 * _0x61398d,
        347 * _0x61398d,
        147 * _0x61398d
      );
      _0x1d4988.bezierCurveTo(
        361 * _0x61398d,
        151 * _0x61398d,
        366 * _0x61398d,
        158 * _0x61398d,
        367 * _0x61398d,
        164 * _0x61398d
      );
      _0x1d4988.closePath();
      fill_path(_0x1d4988, _0x977686[4]);
    }
  }
  return _0x52fee1;
}
function create_music_button(_0x384518, _0xef7ddb, _0x5ab6c6, _0x1cb8ac) {
  var _0x17631c = document.createElement("canvas");
  var _0x37f5f1 = _0x17631c.getContext("2d");
  _0x17631c.width = 121 * _0x384518;
  _0x17631c.height = 130 * _0x384518;
  _0x37f5f1.translate(0, 20 * _0x384518);
  if (_0x5ab6c6 == 1) {
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(6 * _0x384518, 23 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      6 * _0x384518,
      46 * _0x384518,
      6 * _0x384518,
      46 * _0x384518,
      6 * _0x384518,
      69 * _0x384518
    );
    _0x37f5f1.bezierCurveTo(
      21 * _0x384518,
      69 * _0x384518,
      21 * _0x384518,
      69 * _0x384518,
      36 * _0x384518,
      69 * _0x384518
    );
    _0x37f5f1.bezierCurveTo(
      45.5 * _0x384518,
      78.5 * _0x384518,
      45.5 * _0x384518,
      78.5 * _0x384518,
      55 * _0x384518,
      88 * _0x384518
    );
    _0x37f5f1.bezierCurveTo(
      55.5 * _0x384518,
      45.5 * _0x384518,
      55.5 * _0x384518,
      45.5 * _0x384518,
      56 * _0x384518,
      3 * _0x384518
    );
    _0x37f5f1.bezierCurveTo(
      47 * _0x384518,
      14 * _0x384518,
      47 * _0x384518,
      14 * _0x384518,
      38 * _0x384518,
      25 * _0x384518
    );
    _0x37f5f1.bezierCurveTo(
      23 * _0x384518,
      25 * _0x384518,
      23 * _0x384518,
      25 * _0x384518,
      6 * _0x384518,
      23 * _0x384518
    );
    _0x37f5f1.closePath();
    fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 13 * _0x384518);
  }
  _0x37f5f1.beginPath();
  _0x37f5f1.lineCap = "round";
  _0x37f5f1.lineJoin = "round";
  _0x37f5f1.moveTo(6 * _0x384518, 23 * _0x384518);
  _0x37f5f1.bezierCurveTo(
    6 * _0x384518,
    46 * _0x384518,
    6 * _0x384518,
    46 * _0x384518,
    6 * _0x384518,
    69 * _0x384518
  );
  _0x37f5f1.bezierCurveTo(
    21 * _0x384518,
    69 * _0x384518,
    21 * _0x384518,
    69 * _0x384518,
    36 * _0x384518,
    69 * _0x384518
  );
  _0x37f5f1.bezierCurveTo(
    45.5 * _0x384518,
    78.5 * _0x384518,
    45.5 * _0x384518,
    78.5 * _0x384518,
    55 * _0x384518,
    88 * _0x384518
  );
  _0x37f5f1.bezierCurveTo(
    55.5 * _0x384518,
    45.5 * _0x384518,
    55.5 * _0x384518,
    45.5 * _0x384518,
    56 * _0x384518,
    3 * _0x384518
  );
  _0x37f5f1.bezierCurveTo(
    47 * _0x384518,
    14 * _0x384518,
    47 * _0x384518,
    14 * _0x384518,
    38 * _0x384518,
    25 * _0x384518
  );
  _0x37f5f1.bezierCurveTo(
    23 * _0x384518,
    25 * _0x384518,
    23 * _0x384518,
    25 * _0x384518,
    6 * _0x384518,
    23 * _0x384518
  );
  _0x37f5f1.closePath();
  fill_path(_0x37f5f1, _0xef7ddb[1], _0xef7ddb[2], 4 * _0x384518);
  if (_0x1cb8ac == 1) {
    _0x37f5f1.translate(0, 5 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(67 * _0x384518, 30 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      73 * _0x384518,
      47 * _0x384518,
      69 * _0x384518,
      45 * _0x384518,
      67 * _0x384518,
      58 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[0], 10 * _0x384518);
    _0x37f5f1.translate(3, 0 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(70 * _0x384518, 17 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      83 * _0x384518,
      45 * _0x384518,
      76 * _0x384518,
      55 * _0x384518,
      70 * _0x384518,
      69 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[0], 10 * _0x384518);
    _0x37f5f1.translate(3, 0 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(76 * _0x384518, 8 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      88 * _0x384518,
      31 * _0x384518,
      89 * _0x384518,
      55 * _0x384518,
      76 * _0x384518,
      79 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[0], 10 * _0x384518);
    if (_0x5ab6c6 == 1) {
      _0x37f5f1.translate(-6 * _0x384518, -5 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(67 * _0x384518, 30 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        73 * _0x384518,
        47 * _0x384518,
        69 * _0x384518,
        45 * _0x384518,
        67 * _0x384518,
        58 * _0x384518
      );
      fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 18 * _0x384518);
      _0x37f5f1.translate(3, 0 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(70 * _0x384518, 17 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        83 * _0x384518,
        45 * _0x384518,
        76 * _0x384518,
        55 * _0x384518,
        70 * _0x384518,
        69 * _0x384518
      );
      fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 18 * _0x384518);
      _0x37f5f1.translate(3, 0 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(76 * _0x384518, 8 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        88 * _0x384518,
        31 * _0x384518,
        89 * _0x384518,
        55 * _0x384518,
        76 * _0x384518,
        79 * _0x384518
      );
      fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 18 * _0x384518);
      _0x37f5f1.translate(-6, 0 * _0x384518);
    } else {
      _0x37f5f1.translate(-6 * _0x384518, -5 * _0x384518);
    }
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(67 * _0x384518, 30 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      73 * _0x384518,
      47 * _0x384518,
      69 * _0x384518,
      45 * _0x384518,
      67 * _0x384518,
      58 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[2], 10 * _0x384518);
    _0x37f5f1.translate(3, 0 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(70 * _0x384518, 17 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      83 * _0x384518,
      45 * _0x384518,
      76 * _0x384518,
      55 * _0x384518,
      70 * _0x384518,
      69 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[2], 10 * _0x384518);
    _0x37f5f1.translate(3, 0 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(76 * _0x384518, 8 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      88 * _0x384518,
      31 * _0x384518,
      89 * _0x384518,
      55 * _0x384518,
      76 * _0x384518,
      79 * _0x384518
    );
    fill_path(_0x37f5f1, undefined, _0xef7ddb[2], 10 * _0x384518);
  } else {
    if (_0x5ab6c6 == 1) {
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(108 * _0x384518, 27 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        94 * _0x384518,
        45.5 * _0x384518,
        94 * _0x384518,
        45.5 * _0x384518,
        80 * _0x384518,
        64 * _0x384518
      );
      _0x37f5f1.closePath();
      fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 18 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(79 * _0x384518, 30 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        93 * _0x384518,
        47 * _0x384518,
        93 * _0x384518,
        47 * _0x384518,
        107 * _0x384518,
        64 * _0x384518
      );
      _0x37f5f1.closePath();
      fill_path(_0x37f5f1, undefined, _0xef7ddb[3], 18 * _0x384518);
    } else {
      _0x37f5f1.translate(0, -5 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(108 * _0x384518, 27 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        94 * _0x384518,
        45.5 * _0x384518,
        94 * _0x384518,
        45.5 * _0x384518,
        80 * _0x384518,
        64 * _0x384518
      );
      _0x37f5f1.closePath();
      fill_path(_0x37f5f1, undefined, _0xef7ddb[0], 7 * _0x384518);
      _0x37f5f1.beginPath();
      _0x37f5f1.lineCap = "round";
      _0x37f5f1.lineJoin = "round";
      _0x37f5f1.moveTo(79 * _0x384518, 30 * _0x384518);
      _0x37f5f1.bezierCurveTo(
        93 * _0x384518,
        47 * _0x384518,
        93 * _0x384518,
        47 * _0x384518,
        107 * _0x384518,
        64 * _0x384518
      );
      _0x37f5f1.closePath();
      fill_path(_0x37f5f1, undefined, _0xef7ddb[0], 7 * _0x384518);
      _0x37f5f1.translate(0, 5 * _0x384518);
    }
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(108 * _0x384518, 27 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      94 * _0x384518,
      45.5 * _0x384518,
      94 * _0x384518,
      45.5 * _0x384518,
      80 * _0x384518,
      64 * _0x384518
    );
    _0x37f5f1.closePath();
    fill_path(_0x37f5f1, undefined, _0xef7ddb[2], 7 * _0x384518);
    _0x37f5f1.beginPath();
    _0x37f5f1.lineCap = "round";
    _0x37f5f1.lineJoin = "round";
    _0x37f5f1.moveTo(79 * _0x384518, 30 * _0x384518);
    _0x37f5f1.bezierCurveTo(
      93 * _0x384518,
      47 * _0x384518,
      93 * _0x384518,
      47 * _0x384518,
      107 * _0x384518,
      64 * _0x384518
    );
    _0x37f5f1.closePath();
    fill_path(_0x37f5f1, undefined, _0xef7ddb[2], 7 * _0x384518);
  }
  return _0x17631c;
}
function create_tree_snow(_0xb2a9ac, _0x5667d7, _0x469b37) {
  var _0x45c709 = document.createElement("canvas"),
    _0x2dc4cc = _0x45c709.getContext("2d");
  _0x2dc4cc.rotate(Math.PI / 2);
}
function create_tree_branch(_0x31425e, _0xfc4948, _0x1c5165) {
  var _0x1e8bfe = document.createElement("canvas");
  var _0x3cdc02 = _0x1e8bfe.getContext("2d");
  var _0x370379 = _0x31425e * 450;
  var _0x492a15 = _0x31425e * 145;
  var _0x28b74d = _0x370379 / 2;
  var _0x1f6a24 = _0x492a15 / 2;
  var _0x4af555 = _0x31425e * 10;
  var _0x191644 = _0x31425e * 20;
  var _0xcc1ecc = _0x31425e * 300;
  var _0x58d041 = _0x31425e * 30;
  var _0x3b5db9 = _0x31425e * 80;
  var _0x112357 = _0xcc1ecc / 2;
  var _0xde8d47 = _0x58d041 / 2;
  if (_0x1c5165) {
    var _0x370379 = _0x31425e * 145;
    var _0x492a15 = _0x31425e * 450;
    _0x1e8bfe.width = _0x370379;
    _0x1e8bfe.height = _0x492a15;
    _0x3cdc02.rotate(Math.PI / 2);
    _0x3cdc02.save();
    _0x3cdc02.globalAlpha = 0.5;
    round_rect(
      _0x3cdc02,
      100 * _0x31425e,
      -110 * _0x31425e,
      _0xcc1ecc,
      _0x58d041,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.translate(178 * _0x31425e, -98 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357,
      -_0xde8d47 - 6 * _0x31425e,
      100 * _0x31425e,
      100 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.translate(-50 * _0x31425e, 5 * _0x31425e);
    round_rect(
      _0x3cdc02,
      220 * _0x31425e,
      -15 * _0x31425e,
      90 * _0x31425e,
      90 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.restore();
    _0x3cdc02.save();
    _0x3cdc02.globalAlpha = 1;
    _0x3cdc02.translate(250 * _0x31425e, -63 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357 - 20 * _0x31425e,
      -_0xde8d47,
      _0xcc1ecc,
      _0x58d041,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[1], _0xfc4948[2], 4);
    _0x3cdc02.translate(-70 * _0x31425e, -40 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357 - 20 * _0x31425e,
      -_0xde8d47,
      100 * _0x31425e,
      100 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[3], _0xfc4948[4], 4);
    _0x3cdc02.translate(-70 * _0x31425e, 15 * _0x31425e);
    round_rect(
      _0x3cdc02,
      220 * _0x31425e,
      -22 * _0x31425e,
      90 * _0x31425e,
      90 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[3], _0xfc4948[4], 4);
    round_rect(
      _0x3cdc02,
      230 * _0x31425e,
      -12 * _0x31425e,
      55 * _0x31425e,
      55 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[5]);
    _0x3cdc02.translate(-70 * _0x31425e, 0);
    round_rect(
      _0x3cdc02,
      -15 * _0x31425e,
      -2 * _0x31425e,
      60 * _0x31425e,
      60 * _0x31425e,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[5]);
    _0x3cdc02.restore();
  } else {
    _0x1e8bfe.width = _0x370379;
    _0x1e8bfe.height = _0x492a15;
    _0x3cdc02.save();
    _0x3cdc02.globalAlpha = 0.5;
    _0x3cdc02.translate(_0x28b74d, _0x1f6a24 + 10 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357,
      -_0xde8d47,
      _0xcc1ecc,
      _0x58d041,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.translate(-65 * _0x31425e, -25 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357,
      -_0xde8d47 - 6 * _0x31425e,
      100 * _0x31425e,
      100 * _0x31425e,
      15 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.translate(-35 * _0x31425e, -5 * _0x31425e);
    round_rect(
      _0x3cdc02,
      220 * _0x31425e,
      -15 * _0x31425e,
      90 * _0x31425e,
      90 * _0x31425e,
      15 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[0]);
    _0x3cdc02.restore();
    _0x3cdc02.save();
    _0x3cdc02.globalAlpha = 1;
    _0x3cdc02.translate(240 * _0x31425e, 70 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357,
      -_0xde8d47,
      _0xcc1ecc,
      _0x58d041,
      _0x4af555
    );
    fill_path(_0x3cdc02, _0xfc4948[1], _0xfc4948[2], 4);
    _0x3cdc02.translate(-60 * _0x31425e, -40 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -_0x112357 - 20 * _0x31425e,
      -_0xde8d47,
      100 * _0x31425e,
      100 * _0x31425e,
      15 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[3], _0xfc4948[4], 4);
    _0x3cdc02.translate(-55 * _0x31425e, 10 * _0x31425e);
    round_rect(
      _0x3cdc02,
      220 * _0x31425e,
      -22 * _0x31425e,
      90 * _0x31425e,
      90 * _0x31425e,
      15 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[3], _0xfc4948[4], 4);
    round_rect(
      _0x3cdc02,
      240 * _0x31425e,
      -12 * _0x31425e,
      55 * _0x31425e,
      55 * _0x31425e,
      12 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[5]);
    _0x3cdc02.translate(45 * _0x31425e, 0 * _0x31425e);
    round_rect(
      _0x3cdc02,
      -145 * _0x31425e,
      -2 * _0x31425e,
      60 * _0x31425e,
      60 * _0x31425e,
      12 * _0x31425e
    );
    fill_path(_0x3cdc02, _0xfc4948[5]);
    _0x3cdc02.restore();
  }
  return _0x1e8bfe;
}
function create_apricot_forest(_0x5a924c, _0x52bebc) {
  var _0x1e16d2 = document.createElement("canvas");
  var _0x4cd130 = _0x1e16d2.getContext("2d");
  var _0x38361d = Math.max(_0x52bebc.width, _0x5a924c.width);
  var _0x37a764 = Math.max(_0x52bebc.height, _0x5a924c.height);
  _0x1e16d2.width = _0x38361d;
  _0x1e16d2.height = _0x37a764;
  _0x4cd130.drawImage(
    _0x5a924c,
    (_0x38361d - _0x5a924c.width) / 2,
    (_0x37a764 - _0x5a924c.height) / 2
  );
  _0x4cd130.drawImage(
    _0x52bebc,
    (_0x38361d - _0x52bebc.width) / 2,
    (_0x37a764 - _0x52bebc.height) / 2
  );
  return _0x1e16d2;
}
function create_pickaxe(_0x562503, _0x8c69d7, _0x4e4fe6) {
  var _0x3c7dc5 = document.createElement("canvas");
  var _0x5890c8 = _0x3c7dc5.getContext("2d");
  var _0xf77a40 = _0x562503 * 105;
  var _0x3f4f4f = _0x562503 * 125;
  var _0x339c2f = _0x562503 * 4;
  var _0x51f4ae = _0xf77a40 / 2;
  var _0x5721f6 = _0x3f4f4f / 2;
  var _0x49136f = _0x562503 * 10;
  var _0x1dabf3 = _0x562503 * 5;
  var _0xd5f96 = _0x562503 * 10;
  var _0x2a943e = _0x562503 * 110;
  var _0x38c3a6 = _0xd5f96 / 2;
  var _0x26ce7a = _0x2a943e / 2;
  _0x3c7dc5.width = _0xf77a40;
  _0x3c7dc5.height = _0x3f4f4f;
  _0x5890c8.save();
  _0x5890c8.globalAlpha = _0x8c69d7 ? 0.5 : 1;
  _0x5890c8.translate(_0xf77a40 / 2 + 8 * _0x562503, _0x3f4f4f / 2 + _0x1dabf3);
  round_rect(_0x5890c8, -_0x38c3a6, -_0x26ce7a, _0xd5f96, _0x2a943e, _0x49136f);
  _0x8c69d7
    ? fill_path(_0x5890c8, _0x4e4fe6[0])
    : fill_path(_0x5890c8, _0x4e4fe6[1]);
  _0x5890c8.translate(
    -130 * _0x562503 + _0x1dabf3,
    -128 * _0x562503 + _0x1dabf3
  );
  _0x5890c8.beginPath();
  _0x5890c8.bezierCurveTo(
    159 * _0x562503,
    93 * _0x562503,
    156 * _0x562503,
    99 * _0x562503,
    154 * _0x562503,
    102 * _0x562503
  );
  _0x5890c8.bezierCurveTo(
    128 * _0x562503,
    92 * _0x562503,
    90 * _0x562503,
    93 * _0x562503,
    72 * _0x562503,
    96 * _0x562503
  );
  _0x5890c8.bezierCurveTo(
    68 * _0x562503,
    84 * _0x562503,
    143 * _0x562503,
    73 * _0x562503,
    162 * _0x562503,
    86 * _0x562503
  );
  _0x5890c8.closePath();
  fill_path(_0x5890c8, _0x4e4fe6[2]);
  _0x5890c8.restore();
  _0x5890c8.translate(_0xf77a40 / 2 + 8, _0x3f4f4f / 2);
  _0x5890c8.globalAlpha = 1;
  round_rect(_0x5890c8, -_0x38c3a6, -_0x26ce7a, _0xd5f96, _0x2a943e, _0x49136f);
  fill_path(_0x5890c8, _0x4e4fe6[3], _0x4e4fe6[4], _0x339c2f);
  _0x5890c8.translate(-130 * _0x562503, -125 * _0x562503);
  _0x5890c8.beginPath();
  _0x5890c8.bezierCurveTo(
    159 * _0x562503,
    93 * _0x562503,
    156 * _0x562503,
    99 * _0x562503,
    154 * _0x562503,
    102 * _0x562503
  );
  _0x5890c8.bezierCurveTo(
    128 * _0x562503,
    92 * _0x562503,
    90 * _0x562503,
    93 * _0x562503,
    72 * _0x562503,
    96 * _0x562503
  );
  _0x5890c8.bezierCurveTo(
    68 * _0x562503,
    84 * _0x562503,
    143 * _0x562503,
    73 * _0x562503,
    162 * _0x562503,
    86 * _0x562503
  );
  _0x5890c8.closePath();
  fill_path(_0x5890c8, _0x4e4fe6[5], _0x4e4fe6[6], _0x339c2f);
  return _0x3c7dc5;
}
function create_sword_wood(_0x3cbf0a, _0x285b0b, _0x406b90) {
  var _0x5f3233 = document.createElement("canvas");
  var _0xc0ef4b = _0x5f3233.getContext("2d");
  _0x5f3233.width = 170 * _0x3cbf0a;
  _0x5f3233.height = 469 * _0x3cbf0a;
  _0xc0ef4b.globalAlpha = _0x285b0b ? 0.5 : 1;
  _0xc0ef4b.translate(20 * _0x3cbf0a, 20 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(88 * _0x3cbf0a, 30 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    104 * _0x3cbf0a,
    69 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    107 * _0x3cbf0a,
    14 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    121 * _0x3cbf0a,
    5 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    150 * _0x3cbf0a,
    50 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    103 * _0x3cbf0a,
    331 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    36 * _0x3cbf0a,
    319 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    77 * _0x3cbf0a,
    41 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(118 * _0x3cbf0a, 31 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    125 * _0x3cbf0a,
    43 * _0x3cbf0a,
    125 * _0x3cbf0a,
    43 * _0x3cbf0a,
    132 * _0x3cbf0a,
    55 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    109.5 * _0x3cbf0a,
    185.5 * _0x3cbf0a,
    109.5 * _0x3cbf0a,
    185.5 * _0x3cbf0a,
    87 * _0x3cbf0a,
    316 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    72 * _0x3cbf0a,
    313.5 * _0x3cbf0a,
    72 * _0x3cbf0a,
    313.5 * _0x3cbf0a,
    57 * _0x3cbf0a,
    311 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    76.5 * _0x3cbf0a,
    181 * _0x3cbf0a,
    76.5 * _0x3cbf0a,
    181 * _0x3cbf0a,
    96 * _0x3cbf0a,
    51 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(56 * _0x3cbf0a, 328 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    47 * _0x3cbf0a,
    385.5 * _0x3cbf0a,
    47 * _0x3cbf0a,
    385.5 * _0x3cbf0a,
    38 * _0x3cbf0a,
    443 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    52 * _0x3cbf0a,
    446 * _0x3cbf0a,
    52 * _0x3cbf0a,
    446 * _0x3cbf0a,
    66 * _0x3cbf0a,
    449 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    76.5 * _0x3cbf0a,
    388.5 * _0x3cbf0a,
    76.5 * _0x3cbf0a,
    388.5 * _0x3cbf0a,
    87 * _0x3cbf0a,
    328 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(74 * _0x3cbf0a, 302 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    104 * _0x3cbf0a,
    316.5 * _0x3cbf0a,
    104 * _0x3cbf0a,
    316.5 * _0x3cbf0a,
    134 * _0x3cbf0a,
    331 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    133 * _0x3cbf0a,
    341 * _0x3cbf0a,
    133 * _0x3cbf0a,
    341 * _0x3cbf0a,
    132 * _0x3cbf0a,
    351 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    69.5 * _0x3cbf0a,
    342 * _0x3cbf0a,
    69.5 * _0x3cbf0a,
    342 * _0x3cbf0a,
    7 * _0x3cbf0a,
    333 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    8 * _0x3cbf0a,
    323 * _0x3cbf0a,
    8 * _0x3cbf0a,
    323 * _0x3cbf0a,
    9 * _0x3cbf0a,
    313 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.save();
  _0xc0ef4b.translate(51.5 * _0x3cbf0a, 440.5 * _0x3cbf0a);
  _0xc0ef4b.rotate(0.2);
  round_rect(
    _0xc0ef4b,
    -20.5 * _0x3cbf0a,
    -18.5 * _0x3cbf0a,
    41 * _0x3cbf0a,
    37 * _0x3cbf0a,
    10 * _0x3cbf0a
  );
  _0xc0ef4b.restore();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(73 * _0x3cbf0a, 316 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    90 * _0x3cbf0a,
    324.5 * _0x3cbf0a,
    90 * _0x3cbf0a,
    324.5 * _0x3cbf0a,
    107 * _0x3cbf0a,
    333 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    70 * _0x3cbf0a,
    327.5 * _0x3cbf0a,
    70 * _0x3cbf0a,
    327.5 * _0x3cbf0a,
    33 * _0x3cbf0a,
    322 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[0]);
  _0xc0ef4b.globalAlpha = 1;
  _0xc0ef4b.translate(-20 * _0x3cbf0a, -20 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(88 * _0x3cbf0a, 30 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    104 * _0x3cbf0a,
    69 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    107 * _0x3cbf0a,
    14 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    121 * _0x3cbf0a,
    5 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    150 * _0x3cbf0a,
    50 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    103 * _0x3cbf0a,
    331 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    36 * _0x3cbf0a,
    319 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    77 * _0x3cbf0a,
    41 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[1], _0x406b90[2], 7 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(118 * _0x3cbf0a, 31 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    125 * _0x3cbf0a,
    43 * _0x3cbf0a,
    125 * _0x3cbf0a,
    43 * _0x3cbf0a,
    132 * _0x3cbf0a,
    55 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    109.5 * _0x3cbf0a,
    185.5 * _0x3cbf0a,
    109.5 * _0x3cbf0a,
    185.5 * _0x3cbf0a,
    87 * _0x3cbf0a,
    316 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    72 * _0x3cbf0a,
    313.5 * _0x3cbf0a,
    72 * _0x3cbf0a,
    313.5 * _0x3cbf0a,
    57 * _0x3cbf0a,
    311 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    76.5 * _0x3cbf0a,
    181 * _0x3cbf0a,
    76.5 * _0x3cbf0a,
    181 * _0x3cbf0a,
    96 * _0x3cbf0a,
    51 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[3]);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(88 * _0x3cbf0a, 30 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    96 * _0x3cbf0a,
    49.5 * _0x3cbf0a,
    104 * _0x3cbf0a,
    69 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    105.5 * _0x3cbf0a,
    41.5 * _0x3cbf0a,
    107 * _0x3cbf0a,
    14 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    114 * _0x3cbf0a,
    9.5 * _0x3cbf0a,
    121 * _0x3cbf0a,
    5 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    135.5 * _0x3cbf0a,
    27.5 * _0x3cbf0a,
    150 * _0x3cbf0a,
    50 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    110.5 * _0x3cbf0a,
    286 * _0x3cbf0a,
    103 * _0x3cbf0a,
    331 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    69.5 * _0x3cbf0a,
    325 * _0x3cbf0a,
    36 * _0x3cbf0a,
    319 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    56.5 * _0x3cbf0a,
    180 * _0x3cbf0a,
    77 * _0x3cbf0a,
    41 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, undefined, _0x406b90[2], 7 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(56 * _0x3cbf0a, 328 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    47 * _0x3cbf0a,
    385.5 * _0x3cbf0a,
    47 * _0x3cbf0a,
    385.5 * _0x3cbf0a,
    38 * _0x3cbf0a,
    443 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    52 * _0x3cbf0a,
    446 * _0x3cbf0a,
    52 * _0x3cbf0a,
    446 * _0x3cbf0a,
    66 * _0x3cbf0a,
    449 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    76.5 * _0x3cbf0a,
    388.5 * _0x3cbf0a,
    76.5 * _0x3cbf0a,
    388.5 * _0x3cbf0a,
    87 * _0x3cbf0a,
    328 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[4], _0x406b90[5], 7 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(74 * _0x3cbf0a, 302 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    104 * _0x3cbf0a,
    316.5 * _0x3cbf0a,
    104 * _0x3cbf0a,
    316.5 * _0x3cbf0a,
    134 * _0x3cbf0a,
    331 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    133 * _0x3cbf0a,
    341 * _0x3cbf0a,
    133 * _0x3cbf0a,
    341 * _0x3cbf0a,
    132 * _0x3cbf0a,
    351 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    69.5 * _0x3cbf0a,
    342 * _0x3cbf0a,
    69.5 * _0x3cbf0a,
    342 * _0x3cbf0a,
    7 * _0x3cbf0a,
    333 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    8 * _0x3cbf0a,
    323 * _0x3cbf0a,
    8 * _0x3cbf0a,
    323 * _0x3cbf0a,
    9 * _0x3cbf0a,
    313 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[4], _0x406b90[5], 7 * _0x3cbf0a);
  _0xc0ef4b.save();
  _0xc0ef4b.translate(51.5 * _0x3cbf0a, 440.5 * _0x3cbf0a);
  _0xc0ef4b.rotate(0.2);
  round_rect(
    _0xc0ef4b,
    -20.5 * _0x3cbf0a,
    -18.5 * _0x3cbf0a,
    41 * _0x3cbf0a,
    37 * _0x3cbf0a,
    10 * _0x3cbf0a
  );
  _0xc0ef4b.restore();
  fill_path(_0xc0ef4b, _0x406b90[4], _0x406b90[5], 7 * _0x3cbf0a);
  _0xc0ef4b.beginPath();
  _0xc0ef4b.lineCap = "round";
  _0xc0ef4b.lineJoin = "round";
  _0xc0ef4b.moveTo(73 * _0x3cbf0a, 316 * _0x3cbf0a);
  _0xc0ef4b.bezierCurveTo(
    90 * _0x3cbf0a,
    324.5 * _0x3cbf0a,
    90 * _0x3cbf0a,
    324.5 * _0x3cbf0a,
    107 * _0x3cbf0a,
    333 * _0x3cbf0a
  );
  _0xc0ef4b.bezierCurveTo(
    70 * _0x3cbf0a,
    327.5 * _0x3cbf0a,
    70 * _0x3cbf0a,
    327.5 * _0x3cbf0a,
    33 * _0x3cbf0a,
    322 * _0x3cbf0a
  );
  _0xc0ef4b.closePath();
  fill_path(_0xc0ef4b, _0x406b90[6]);
  return _0x5f3233;
}
function create_pirate_sword(_0x317ab1, _0x5c907c, _0x5260db) {
  var _0x332bbb = document.createElement("canvas");
  var _0xb15a28 = _0x332bbb.getContext("2d");
  _0x332bbb.width = 424 * _0x317ab1;
  _0x332bbb.height = 788 * _0x317ab1;
  _0xb15a28.translate(25 * _0x317ab1, 25 * _0x317ab1);
  _0xb15a28.globalAlpha = _0x5c907c ? 0.5 : 1;
  _0xb15a28.save();
  _0xb15a28.translate(193.5 * _0x317ab1, 602.5 * _0x317ab1);
  _0xb15a28.rotate(-0.12);
  round_rect(
    _0xb15a28,
    -26.5 * _0x317ab1,
    -97.5 * _0x317ab1,
    53 * _0x317ab1,
    195 * _0x317ab1,
    25 * _0x317ab1
  );
  _0xb15a28.restore();
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(137 * _0x317ab1, 519 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    182 * _0x317ab1,
    513 * _0x317ab1,
    182 * _0x317ab1,
    513 * _0x317ab1,
    227 * _0x317ab1,
    507 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    214 * _0x317ab1,
    417 * _0x317ab1,
    189 * _0x317ab1,
    304 * _0x317ab1,
    221 * _0x317ab1,
    180 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    191 * _0x317ab1,
    126 * _0x317ab1,
    192 * _0x317ab1,
    105 * _0x317ab1,
    198 * _0x317ab1,
    64 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    123 * _0x317ab1,
    102 * _0x317ab1,
    99 * _0x317ab1,
    285 * _0x317ab1,
    137 * _0x317ab1,
    517 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(175 * _0x317ab1, 119 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    176 * _0x317ab1,
    142 * _0x317ab1,
    184 * _0x317ab1,
    165 * _0x317ab1,
    197 * _0x317ab1,
    183 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    167 * _0x317ab1,
    325 * _0x317ab1,
    191 * _0x317ab1,
    405 * _0x317ab1,
    202 * _0x317ab1,
    502 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    180 * _0x317ab1,
    503 * _0x317ab1,
    180 * _0x317ab1,
    503 * _0x317ab1,
    158 * _0x317ab1,
    504 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    135 * _0x317ab1,
    396 * _0x317ab1,
    134 * _0x317ab1,
    185 * _0x317ab1,
    175 * _0x317ab1,
    119 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(110 * _0x317ab1, 518 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    111.5 * _0x317ab1,
    533 * _0x317ab1,
    111.5 * _0x317ab1,
    533 * _0x317ab1,
    113 * _0x317ab1,
    548 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    162.5 * _0x317ab1,
    544 * _0x317ab1,
    162.5 * _0x317ab1,
    544 * _0x317ab1,
    212 * _0x317ab1,
    540 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    312 * _0x317ab1,
    535 * _0x317ab1,
    281 * _0x317ab1,
    665 * _0x317ab1,
    225 * _0x317ab1,
    665 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    227 * _0x317ab1,
    686.5 * _0x317ab1,
    227 * _0x317ab1,
    686.5 * _0x317ab1,
    229 * _0x317ab1,
    708 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    343 * _0x317ab1,
    684 * _0x317ab1,
    354 * _0x317ab1,
    496 * _0x317ab1,
    222 * _0x317ab1,
    498 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    165.5 * _0x317ab1,
    503 * _0x317ab1,
    165.5 * _0x317ab1,
    503 * _0x317ab1,
    109 * _0x317ab1,
    508 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[0]);
  circle(
    _0xb15a28,
    204 * _0x317ab1,
    693 * _0x317ab1,
    36.013886210738214 * _0x317ab1
  );
  fill_path(_0xb15a28, _0x5260db[0]);
  circle(_0xb15a28, 105 * _0x317ab1, 518 * _0x317ab1, 30 * _0x317ab1);
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(171 * _0x317ab1, 535 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    139.5 * _0x317ab1,
    537.5 * _0x317ab1,
    139.5 * _0x317ab1,
    537.5 * _0x317ab1,
    108 * _0x317ab1,
    540 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    110 * _0x317ab1,
    527.5 * _0x317ab1,
    110 * _0x317ab1,
    527.5 * _0x317ab1,
    112 * _0x317ab1,
    515 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    148 * _0x317ab1,
    513 * _0x317ab1,
    148 * _0x317ab1,
    513 * _0x317ab1,
    184 * _0x317ab1,
    511 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(244 * _0x317ab1, 669 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    248.5 * _0x317ab1,
    680 * _0x317ab1,
    248.5 * _0x317ab1,
    680 * _0x317ab1,
    253 * _0x317ab1,
    691 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    239.5 * _0x317ab1,
    697 * _0x317ab1,
    239.5 * _0x317ab1,
    697 * _0x317ab1,
    226 * _0x317ab1,
    703 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    223 * _0x317ab1,
    691.5 * _0x317ab1,
    223 * _0x317ab1,
    691.5 * _0x317ab1,
    220 * _0x317ab1,
    680 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[0]);
  _0xb15a28.translate(-25 * _0x317ab1, -25 * _0x317ab1);
  _0xb15a28.globalAlpha = 1;
  _0xb15a28.save();
  _0xb15a28.translate(193.5 * _0x317ab1, 602.5 * _0x317ab1);
  _0xb15a28.rotate(-0.12);
  round_rect(
    _0xb15a28,
    -26.5 * _0x317ab1,
    -97.5 * _0x317ab1,
    53 * _0x317ab1,
    195 * _0x317ab1,
    25 * _0x317ab1
  );
  _0xb15a28.restore();
  fill_path(_0xb15a28, _0x5260db[1], _0x5260db[2], 16 * _0x317ab1);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(137 * _0x317ab1, 519 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    182 * _0x317ab1,
    513 * _0x317ab1,
    182 * _0x317ab1,
    513 * _0x317ab1,
    227 * _0x317ab1,
    507 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    214 * _0x317ab1,
    417 * _0x317ab1,
    189 * _0x317ab1,
    304 * _0x317ab1,
    221 * _0x317ab1,
    180 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    191 * _0x317ab1,
    126 * _0x317ab1,
    192 * _0x317ab1,
    105 * _0x317ab1,
    198 * _0x317ab1,
    64 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    123 * _0x317ab1,
    102 * _0x317ab1,
    99 * _0x317ab1,
    285 * _0x317ab1,
    137 * _0x317ab1,
    517 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[3], _0x5260db[4], 16 * _0x317ab1);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(175 * _0x317ab1, 119 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    176 * _0x317ab1,
    142 * _0x317ab1,
    184 * _0x317ab1,
    165 * _0x317ab1,
    197 * _0x317ab1,
    183 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    167 * _0x317ab1,
    325 * _0x317ab1,
    191 * _0x317ab1,
    405 * _0x317ab1,
    202 * _0x317ab1,
    502 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    180 * _0x317ab1,
    503 * _0x317ab1,
    180 * _0x317ab1,
    503 * _0x317ab1,
    158 * _0x317ab1,
    504 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    135 * _0x317ab1,
    396 * _0x317ab1,
    134 * _0x317ab1,
    185 * _0x317ab1,
    175 * _0x317ab1,
    119 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[5]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(110 * _0x317ab1, 518 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    111.5 * _0x317ab1,
    533 * _0x317ab1,
    111.5 * _0x317ab1,
    533 * _0x317ab1,
    113 * _0x317ab1,
    548 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    162.5 * _0x317ab1,
    544 * _0x317ab1,
    162.5 * _0x317ab1,
    544 * _0x317ab1,
    212 * _0x317ab1,
    540 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    312 * _0x317ab1,
    535 * _0x317ab1,
    281 * _0x317ab1,
    665 * _0x317ab1,
    225 * _0x317ab1,
    665 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    227 * _0x317ab1,
    686.5 * _0x317ab1,
    227 * _0x317ab1,
    686.5 * _0x317ab1,
    229 * _0x317ab1,
    708 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    343 * _0x317ab1,
    684 * _0x317ab1,
    354 * _0x317ab1,
    496 * _0x317ab1,
    222 * _0x317ab1,
    498 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    165.5 * _0x317ab1,
    503 * _0x317ab1,
    165.5 * _0x317ab1,
    503 * _0x317ab1,
    109 * _0x317ab1,
    508 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[6], _0x5260db[4], 16 * _0x317ab1);
  circle(
    _0xb15a28,
    204 * _0x317ab1,
    693 * _0x317ab1,
    36.013886210738214 * _0x317ab1
  );
  fill_path(_0xb15a28, _0x5260db[6], _0x5260db[4], 16 * _0x317ab1);
  circle(_0xb15a28, 105 * _0x317ab1, 518 * _0x317ab1, 30 * _0x317ab1);
  fill_path(_0xb15a28, _0x5260db[6], _0x5260db[4], 16 * _0x317ab1);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(171 * _0x317ab1, 535 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    139.5 * _0x317ab1,
    537.5 * _0x317ab1,
    139.5 * _0x317ab1,
    537.5 * _0x317ab1,
    108 * _0x317ab1,
    540 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    110 * _0x317ab1,
    527.5 * _0x317ab1,
    110 * _0x317ab1,
    527.5 * _0x317ab1,
    112 * _0x317ab1,
    515 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    148 * _0x317ab1,
    513 * _0x317ab1,
    148 * _0x317ab1,
    513 * _0x317ab1,
    184 * _0x317ab1,
    511 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[6]);
  _0xb15a28.beginPath();
  _0xb15a28.lineCap = "round";
  _0xb15a28.lineJoin = "round";
  _0xb15a28.moveTo(244 * _0x317ab1, 669 * _0x317ab1);
  _0xb15a28.bezierCurveTo(
    248.5 * _0x317ab1,
    680 * _0x317ab1,
    248.5 * _0x317ab1,
    680 * _0x317ab1,
    253 * _0x317ab1,
    691 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    239.5 * _0x317ab1,
    697 * _0x317ab1,
    239.5 * _0x317ab1,
    697 * _0x317ab1,
    226 * _0x317ab1,
    703 * _0x317ab1
  );
  _0xb15a28.bezierCurveTo(
    223 * _0x317ab1,
    691.5 * _0x317ab1,
    223 * _0x317ab1,
    691.5 * _0x317ab1,
    220 * _0x317ab1,
    680 * _0x317ab1
  );
  _0xb15a28.closePath();
  fill_path(_0xb15a28, _0x5260db[6]);
  circle(
    _0xb15a28,
    204 * _0x317ab1,
    693 * _0x317ab1,
    17.029386365926403 * _0x317ab1
  );
  fill_path(_0xb15a28, _0x5260db[7]);
  circle(_0xb15a28, 106 * _0x317ab1, 518 * _0x317ab1, 12 * _0x317ab1);
  fill_path(_0xb15a28, _0x5260db[7]);
  return _0x332bbb;
}
function create_sword(_0xdde3fd, _0x4dce38, _0x1d34b5) {
  var _0x1019ce = document.createElement("canvas");
  var _0x1d7963 = _0x1019ce.getContext("2d");
  _0x1019ce.width = 100 * _0xdde3fd;
  _0x1019ce.height = 250 * _0xdde3fd;
  _0x1d7963.translate(-135 * _0xdde3fd, -75 * _0xdde3fd);
  _0x1d7963.globalAlpha = _0x4dce38 ? 0.8 : 1;
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(178.5 * _0xdde3fd, 238.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    177 * _0xdde3fd,
    175.03125 * _0xdde3fd,
    177 * _0xdde3fd,
    175.03125 * _0xdde3fd,
    175.5 * _0xdde3fd,
    112.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    184.5 * _0xdde3fd,
    100.53125 * _0xdde3fd,
    184.5 * _0xdde3fd,
    100.53125 * _0xdde3fd,
    193.5 * _0xdde3fd,
    89.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    202 * _0xdde3fd,
    100.03125 * _0xdde3fd,
    202 * _0xdde3fd,
    100.03125 * _0xdde3fd,
    210.5 * _0xdde3fd,
    111.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    209.5 * _0xdde3fd,
    174.03125 * _0xdde3fd,
    209.5 * _0xdde3fd,
    174.03125 * _0xdde3fd,
    208.5 * _0xdde3fd,
    237.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[0]);
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(155.5 * _0xdde3fd, 239.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    194 * _0xdde3fd,
    238.53125 * _0xdde3fd,
    194 * _0xdde3fd,
    238.53125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    238.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    232.5 * _0xdde3fd,
    243.03125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    243.03125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    248.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    194 * _0xdde3fd,
    248.53125 * _0xdde3fd,
    194 * _0xdde3fd,
    248.53125 * _0xdde3fd,
    155.5 * _0xdde3fd,
    249.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[0]);
  circle(_0x1d7963, 160.5 * _0xdde3fd, 243.03125 * _0xdde3fd, 7 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[0]);
  circle(_0x1d7963, 227.5 * _0xdde3fd, 242.03125 * _0xdde3fd, 7 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[0]);
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(185.5 * _0xdde3fd, 253.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    193.5 * _0xdde3fd,
    253.03125 * _0xdde3fd,
    193.5 * _0xdde3fd,
    253.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    253.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    201.5 * _0xdde3fd,
    276.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    276.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    299.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    194.5 * _0xdde3fd,
    299.03125 * _0xdde3fd,
    194.5 * _0xdde3fd,
    299.03125 * _0xdde3fd,
    187.5 * _0xdde3fd,
    299.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[0], _0x1d34b5[0], 5 * _0xdde3fd);
  circle(_0x1d7963, 194 * _0xdde3fd, 298 * _0xdde3fd, 9 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[0], _0x1d34b5[0], 5 * _0xdde3fd);
  _0x1d7963.globalAlpha = 1;
  _0x1d7963.translate(-10 * _0xdde3fd, 10 * _0xdde3fd);
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(178.5 * _0xdde3fd, 238.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    177 * _0xdde3fd,
    175.03125 * _0xdde3fd,
    177 * _0xdde3fd,
    175.03125 * _0xdde3fd,
    175.5 * _0xdde3fd,
    112.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    184.5 * _0xdde3fd,
    100.53125 * _0xdde3fd,
    184.5 * _0xdde3fd,
    100.53125 * _0xdde3fd,
    193.5 * _0xdde3fd,
    89.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    202 * _0xdde3fd,
    100.03125 * _0xdde3fd,
    202 * _0xdde3fd,
    100.03125 * _0xdde3fd,
    210.5 * _0xdde3fd,
    111.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    209.5 * _0xdde3fd,
    174.03125 * _0xdde3fd,
    209.5 * _0xdde3fd,
    174.03125 * _0xdde3fd,
    208.5 * _0xdde3fd,
    237.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[3], _0x1d34b5[4], 5 * _0xdde3fd);
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(155.5 * _0xdde3fd, 239.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    194 * _0xdde3fd,
    238.53125 * _0xdde3fd,
    194 * _0xdde3fd,
    238.53125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    238.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    232.5 * _0xdde3fd,
    243.03125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    243.03125 * _0xdde3fd,
    232.5 * _0xdde3fd,
    248.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    194 * _0xdde3fd,
    248.53125 * _0xdde3fd,
    194 * _0xdde3fd,
    248.53125 * _0xdde3fd,
    155.5 * _0xdde3fd,
    249.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[1], _0x1d34b5[2], 5 * _0xdde3fd);
  circle(_0x1d7963, 160.5 * _0xdde3fd, 243.03125 * _0xdde3fd, 7 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[1], _0x1d34b5[2], 5 * _0xdde3fd);
  circle(_0x1d7963, 227.5 * _0xdde3fd, 242.03125 * _0xdde3fd, 7 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[1], _0x1d34b5[2], 5 * _0xdde3fd);
  _0x1d7963.beginPath();
  _0x1d7963.lineCap = "round";
  _0x1d7963.lineJoin = "round";
  _0x1d7963.moveTo(185.5 * _0xdde3fd, 253.03125 * _0xdde3fd);
  _0x1d7963.bezierCurveTo(
    193.5 * _0xdde3fd,
    253.03125 * _0xdde3fd,
    193.5 * _0xdde3fd,
    253.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    253.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    201.5 * _0xdde3fd,
    276.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    276.03125 * _0xdde3fd,
    201.5 * _0xdde3fd,
    299.03125 * _0xdde3fd
  );
  _0x1d7963.bezierCurveTo(
    194.5 * _0xdde3fd,
    299.03125 * _0xdde3fd,
    194.5 * _0xdde3fd,
    299.03125 * _0xdde3fd,
    187.5 * _0xdde3fd,
    299.03125 * _0xdde3fd
  );
  _0x1d7963.closePath();
  fill_path(_0x1d7963, _0x1d34b5[1], _0x1d34b5[2], 7 * _0xdde3fd);
  circle(_0x1d7963, 194 * _0xdde3fd, 298 * _0xdde3fd, 9 * _0xdde3fd);
  fill_path(_0x1d7963, _0x1d34b5[1], _0x1d34b5[2], 7 * _0xdde3fd);
  return _0x1019ce;
}
function create_stonesword(_0xc061b6, _0x15e6e7, _0x1f6751) {
  var _0xcdc03f = document.createElement("canvas");
  var _0x1a8f05 = _0xcdc03f.getContext("2d");
  _0xcdc03f.width = 290 * _0xc061b6;
  _0xcdc03f.height = 525 * _0xc061b6;
  _0x1a8f05.globalAlpha = _0x15e6e7 ? 0.5 : 1;
  _0x1a8f05.translate(20 * _0xc061b6, 20 * _0xc061b6);
  _0x1a8f05.beginPath();
  _0x1a8f05.lineCap = "round";
  _0x1a8f05.lineJoin = "round";
  _0x1a8f05.moveTo(111 * _0xc061b6, 351 * _0xc061b6);
  _0x1a8f05.bezierCurveTo(
    129 * _0xc061b6,
    218 * _0xc061b6,
    129 * _0xc061b6,
    218 * _0xc061b6,
    147 * _0xc061b6,
    85 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    167 * _0xc061b6,
    65.5 * _0xc061b6,
    167 * _0xc061b6,
    65.5 * _0xc061b6,
    187 * _0xc061b6,
    46 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    201.5 * _0xc061b6,
    70.5 * _0xc061b6,
    201.5 * _0xc061b6,
    70.5 * _0xc061b6,
    216 * _0xc061b6,
    95 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    194.5 * _0xc061b6,
    227.5 * _0xc061b6,
    194.5 * _0xc061b6,
    227.5 * _0xc061b6,
    173 * _0xc061b6,
    360 * _0xc061b6
  );
  _0x1a8f05.closePath();
  fill_path(_0x1a8f05, _0x1f6751[0]);
  _0x1a8f05.save();
  _0x1a8f05.translate(131 * _0xc061b6, 425.5 * _0xc061b6);
  _0x1a8f05.rotate(0.16);
  round_rect(
    _0x1a8f05,
    -14 * _0xc061b6,
    -56.5 * _0xc061b6,
    28 * _0xc061b6,
    113 * _0xc061b6,
    8 * _0xc061b6
  );
  _0x1a8f05.restore();
  fill_path(_0x1a8f05, _0x1f6751[0]);
  circle(
    _0x1a8f05,
    122 * _0xc061b6,
    480 * _0xc061b6,
    18.439088914585774 * _0xc061b6
  );
  fill_path(_0x1a8f05, _0x1f6751[0]);
  _0x1a8f05.beginPath();
  _0x1a8f05.lineCap = "round";
  _0x1a8f05.lineJoin = "round";
  _0x1a8f05.moveTo(79 * _0xc061b6, 371 * _0xc061b6);
  _0x1a8f05.bezierCurveTo(
    131 * _0xc061b6,
    373 * _0xc061b6,
    145 * _0xc061b6,
    378 * _0xc061b6,
    197 * _0xc061b6,
    388 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    205 * _0xc061b6,
    382.5 * _0xc061b6,
    205 * _0xc061b6,
    382.5 * _0xc061b6,
    213 * _0xc061b6,
    377 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    167 * _0xc061b6,
    352 * _0xc061b6,
    117 * _0xc061b6,
    345 * _0xc061b6,
    69 * _0xc061b6,
    355 * _0xc061b6
  );
  _0x1a8f05.closePath();
  fill_path(_0x1a8f05, _0x1f6751[0]);
  _0x1a8f05.globalAlpha = 1;
  _0x1a8f05.translate(-20 * _0xc061b6, -20 * _0xc061b6);
  _0x1a8f05.beginPath();
  _0x1a8f05.lineCap = "round";
  _0x1a8f05.lineJoin = "round";
  _0x1a8f05.moveTo(111 * _0xc061b6, 351 * _0xc061b6);
  _0x1a8f05.bezierCurveTo(
    129 * _0xc061b6,
    218 * _0xc061b6,
    129 * _0xc061b6,
    218 * _0xc061b6,
    147 * _0xc061b6,
    85 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    167 * _0xc061b6,
    65.5 * _0xc061b6,
    167 * _0xc061b6,
    65.5 * _0xc061b6,
    187 * _0xc061b6,
    46 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    201.5 * _0xc061b6,
    70.5 * _0xc061b6,
    201.5 * _0xc061b6,
    70.5 * _0xc061b6,
    216 * _0xc061b6,
    95 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    194.5 * _0xc061b6,
    227.5 * _0xc061b6,
    194.5 * _0xc061b6,
    227.5 * _0xc061b6,
    173 * _0xc061b6,
    360 * _0xc061b6
  );
  _0x1a8f05.closePath();
  fill_path(_0x1a8f05, _0x1f6751[1], _0x1f6751[2], 12.5 * _0xc061b6);
  _0x1a8f05.save();
  _0x1a8f05.translate(131 * _0xc061b6, 425.5 * _0xc061b6);
  _0x1a8f05.rotate(0.16);
  round_rect(
    _0x1a8f05,
    -14 * _0xc061b6,
    -56.5 * _0xc061b6,
    28 * _0xc061b6,
    113 * _0xc061b6,
    8 * _0xc061b6
  );
  _0x1a8f05.restore();
  fill_path(_0x1a8f05, _0x1f6751[4], _0x1f6751[5], 12.5 * _0xc061b6);
  circle(
    _0x1a8f05,
    122 * _0xc061b6,
    480 * _0xc061b6,
    18.439088914585774 * _0xc061b6
  );
  fill_path(_0x1a8f05, _0x1f6751[4], _0x1f6751[5], 12.5 * _0xc061b6);
  _0x1a8f05.beginPath();
  _0x1a8f05.lineCap = "round";
  _0x1a8f05.lineJoin = "round";
  _0x1a8f05.moveTo(79 * _0xc061b6, 371 * _0xc061b6);
  _0x1a8f05.bezierCurveTo(
    131 * _0xc061b6,
    373 * _0xc061b6,
    145 * _0xc061b6,
    378 * _0xc061b6,
    197 * _0xc061b6,
    388 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    205 * _0xc061b6,
    382.5 * _0xc061b6,
    205 * _0xc061b6,
    382.5 * _0xc061b6,
    213 * _0xc061b6,
    377 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    167 * _0xc061b6,
    352 * _0xc061b6,
    117 * _0xc061b6,
    345 * _0xc061b6,
    69 * _0xc061b6,
    355 * _0xc061b6
  );
  _0x1a8f05.closePath();
  fill_path(_0x1a8f05, _0x1f6751[4], _0x1f6751[5], 12.5 * _0xc061b6);
  _0x1a8f05.beginPath();
  _0x1a8f05.lineCap = "round";
  _0x1a8f05.lineJoin = "round";
  _0x1a8f05.moveTo(128 * _0xc061b6, 345 * _0xc061b6);
  _0x1a8f05.bezierCurveTo(
    142 * _0xc061b6,
    345 * _0xc061b6,
    147 * _0xc061b6,
    346 * _0xc061b6,
    158 * _0xc061b6,
    349 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    177.5 * _0xc061b6,
    224.5 * _0xc061b6,
    177.5 * _0xc061b6,
    224.5 * _0xc061b6,
    197 * _0xc061b6,
    100 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    190.5 * _0xc061b6,
    84.5 * _0xc061b6,
    190.5 * _0xc061b6,
    84.5 * _0xc061b6,
    184 * _0xc061b6,
    69 * _0xc061b6
  );
  _0x1a8f05.bezierCurveTo(
    173.5 * _0xc061b6,
    82 * _0xc061b6,
    173.5 * _0xc061b6,
    82 * _0xc061b6,
    163 * _0xc061b6,
    95 * _0xc061b6
  );
  _0x1a8f05.closePath();
  fill_path(_0x1a8f05, _0x1f6751[3]);
  return _0xcdc03f;
}
function create_crab(_0xe68c7c, _0x5c7731, _0x380234, _0x2d83b1) {
  var _0x1e8f57 = document.createElement("canvas");
  var _0x220968 = _0x1e8f57.getContext("2d");
  _0x1e8f57.width = 283 * _0xe68c7c;
  _0x1e8f57.height = 224 * _0xe68c7c;
  _0x220968.translate(0, 15 * _0xe68c7c);
  _0x220968.globalAlpha = 0.5;
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(93 * _0xe68c7c, 55 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    127 * _0xe68c7c,
    27 * _0xe68c7c,
    195 * _0xe68c7c,
    42 * _0xe68c7c,
    213 * _0xe68c7c,
    78 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    254 * _0xe68c7c,
    134 * _0xe68c7c,
    226 * _0xe68c7c,
    198 * _0xe68c7c,
    153 * _0xe68c7c,
    197 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    59 * _0xe68c7c,
    204 * _0xe68c7c,
    56 * _0xe68c7c,
    158 * _0xe68c7c,
    51 * _0xe68c7c,
    115 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    50 * _0xe68c7c,
    93 * _0xe68c7c,
    81 * _0xe68c7c,
    62 * _0xe68c7c,
    90 * _0xe68c7c,
    57 * _0xe68c7c
  );
  _0x220968.closePath();
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(100 * _0xe68c7c, 33 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    85 * _0xe68c7c,
    62 * _0xe68c7c,
    102 * _0xe68c7c,
    66 * _0xe68c7c,
    110 * _0xe68c7c,
    83 * _0xe68c7c
  );
  _0x220968.closePath();
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(181 * _0xe68c7c, 32 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    196 * _0xe68c7c,
    62 * _0xe68c7c,
    181 * _0xe68c7c,
    68 * _0xe68c7c,
    178 * _0xe68c7c,
    69 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(225 * _0xe68c7c, 52 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    228 * _0xe68c7c,
    78 * _0xe68c7c,
    207 * _0xe68c7c,
    77 * _0xe68c7c,
    192 * _0xe68c7c,
    88 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(34 * _0xe68c7c, 134 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    46 * _0xe68c7c,
    111 * _0xe68c7c,
    57 * _0xe68c7c,
    111 * _0xe68c7c,
    79 * _0xe68c7c,
    109 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(249 * _0xe68c7c, 135 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    233 * _0xe68c7c,
    107 * _0xe68c7c,
    212 * _0xe68c7c,
    112 * _0xe68c7c,
    202 * _0xe68c7c,
    115 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(56 * _0xe68c7c, 50 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    56 * _0xe68c7c,
    82 * _0xe68c7c,
    73 * _0xe68c7c,
    82 * _0xe68c7c,
    93 * _0xe68c7c,
    89 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[0]);
  _0x220968.translate(0, -15 * _0xe68c7c);
  _0x220968.globalAlpha = 1;
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(100 * _0xe68c7c, 33 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    85 * _0xe68c7c,
    62 * _0xe68c7c,
    102 * _0xe68c7c,
    66 * _0xe68c7c,
    110 * _0xe68c7c,
    83 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(181 * _0xe68c7c, 32 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    196 * _0xe68c7c,
    62 * _0xe68c7c,
    181 * _0xe68c7c,
    68 * _0xe68c7c,
    178 * _0xe68c7c,
    69 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(225 * _0xe68c7c, 52 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    228 * _0xe68c7c,
    78 * _0xe68c7c,
    207 * _0xe68c7c,
    77 * _0xe68c7c,
    192 * _0xe68c7c,
    88 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(34 * _0xe68c7c, 134 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    46 * _0xe68c7c,
    111 * _0xe68c7c,
    57 * _0xe68c7c,
    111 * _0xe68c7c,
    79 * _0xe68c7c,
    109 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(249 * _0xe68c7c, 135 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    233 * _0xe68c7c,
    107 * _0xe68c7c,
    212 * _0xe68c7c,
    112 * _0xe68c7c,
    202 * _0xe68c7c,
    115 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(56 * _0xe68c7c, 50 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    56 * _0xe68c7c,
    82 * _0xe68c7c,
    73 * _0xe68c7c,
    82 * _0xe68c7c,
    93 * _0xe68c7c,
    89 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[2], 40 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(93 * _0xe68c7c, 55 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    127 * _0xe68c7c,
    27 * _0xe68c7c,
    195 * _0xe68c7c,
    42 * _0xe68c7c,
    213 * _0xe68c7c,
    78 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    254 * _0xe68c7c,
    134 * _0xe68c7c,
    226 * _0xe68c7c,
    198 * _0xe68c7c,
    153 * _0xe68c7c,
    197 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    59 * _0xe68c7c,
    204 * _0xe68c7c,
    56 * _0xe68c7c,
    158 * _0xe68c7c,
    51 * _0xe68c7c,
    115 * _0xe68c7c
  );
  _0x220968.bezierCurveTo(
    50 * _0xe68c7c,
    93 * _0xe68c7c,
    81 * _0xe68c7c,
    62 * _0xe68c7c,
    90 * _0xe68c7c,
    57 * _0xe68c7c
  );
  _0x220968.closePath();
  fill_path(_0x220968, _0x380234[1], _0x380234[2], 10 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(100 * _0xe68c7c, 33 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    85 * _0xe68c7c,
    62 * _0xe68c7c,
    102 * _0xe68c7c,
    66 * _0xe68c7c,
    110 * _0xe68c7c,
    83 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(181 * _0xe68c7c, 32 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    196 * _0xe68c7c,
    62 * _0xe68c7c,
    181 * _0xe68c7c,
    68 * _0xe68c7c,
    178 * _0xe68c7c,
    69 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(225 * _0xe68c7c, 52 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    228 * _0xe68c7c,
    78 * _0xe68c7c,
    207 * _0xe68c7c,
    77 * _0xe68c7c,
    192 * _0xe68c7c,
    88 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(34 * _0xe68c7c, 134 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    46 * _0xe68c7c,
    111 * _0xe68c7c,
    57 * _0xe68c7c,
    111 * _0xe68c7c,
    79 * _0xe68c7c,
    109 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(249 * _0xe68c7c, 135 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    233 * _0xe68c7c,
    107 * _0xe68c7c,
    212 * _0xe68c7c,
    112 * _0xe68c7c,
    202 * _0xe68c7c,
    115 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  _0x220968.beginPath();
  _0x220968.lineCap = "round";
  _0x220968.lineJoin = "round";
  _0x220968.moveTo(56 * _0xe68c7c, 50 * _0xe68c7c);
  _0x220968.bezierCurveTo(
    56 * _0xe68c7c,
    82 * _0xe68c7c,
    73 * _0xe68c7c,
    82 * _0xe68c7c,
    93 * _0xe68c7c,
    89 * _0xe68c7c
  );
  fill_path(_0x220968, undefined, _0x380234[1], 20 * _0xe68c7c);
  circle(
    _0x220968,
    101 * _0xe68c7c,
    155 * _0xe68c7c,
    20.591260281974 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[3]);
  circle(
    _0x220968,
    180 * _0xe68c7c,
    155 * _0xe68c7c,
    20.591260281974 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[3]);
  circle(
    _0x220968,
    95 * _0xe68c7c,
    148 * _0xe68c7c,
    7.211102550927978 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[4]);
  circle(
    _0x220968,
    173 * _0xe68c7c,
    148 * _0xe68c7c,
    7.211102550927978 * _0xe68c7c
  );
  fill_path(_0x220968, _0x380234[4]);
  if (_0x2d83b1 === 1) {
    _0x220968.beginPath();
    _0x220968.lineCap = "round";
    _0x220968.lineJoin = "round";
    _0x220968.moveTo(191 * _0xe68c7c, 107 * _0xe68c7c);
    _0x220968.bezierCurveTo(
      180 * _0xe68c7c,
      104 * _0xe68c7c,
      175 * _0xe68c7c,
      101 * _0xe68c7c,
      180 * _0xe68c7c,
      95 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      180 * _0xe68c7c,
      95 * _0xe68c7c,
      181 * _0xe68c7c,
      99 * _0xe68c7c,
      188 * _0xe68c7c,
      103 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      191 * _0xe68c7c,
      101 * _0xe68c7c,
      191 * _0xe68c7c,
      95 * _0xe68c7c,
      190 * _0xe68c7c,
      91 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      190 * _0xe68c7c,
      91 * _0xe68c7c,
      196 * _0xe68c7c,
      89 * _0xe68c7c,
      195 * _0xe68c7c,
      99 * _0xe68c7c
    );
    _0x220968.closePath();
    fill_path(_0x220968, _0x380234[2]);
    _0x220968.beginPath();
    _0x220968.lineCap = "round";
    _0x220968.lineJoin = "round";
    _0x220968.moveTo(206 * _0xe68c7c, 98 * _0xe68c7c);
    _0x220968.bezierCurveTo(
      203 * _0xe68c7c,
      95 * _0xe68c7c,
      200 * _0xe68c7c,
      93 * _0xe68c7c,
      198 * _0xe68c7c,
      101 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      194 * _0xe68c7c,
      109 * _0xe68c7c,
      193 * _0xe68c7c,
      109 * _0xe68c7c,
      196 * _0xe68c7c,
      110 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      206 * _0xe68c7c,
      115 * _0xe68c7c,
      209 * _0xe68c7c,
      114 * _0xe68c7c,
      211 * _0xe68c7c,
      111 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      211 * _0xe68c7c,
      106 * _0xe68c7c,
      208 * _0xe68c7c,
      108 * _0xe68c7c,
      203 * _0xe68c7c,
      108 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      193 * _0xe68c7c,
      107 * _0xe68c7c,
      204 * _0xe68c7c,
      101 * _0xe68c7c,
      206 * _0xe68c7c,
      99 * _0xe68c7c
    );
    _0x220968.closePath();
    fill_path(_0x220968, _0x380234[2]);
    _0x220968.beginPath();
    _0x220968.lineCap = "round";
    _0x220968.lineJoin = "round";
    _0x220968.moveTo(172 * _0xe68c7c, 111 * _0xe68c7c);
    _0x220968.bezierCurveTo(
      172 * _0xe68c7c,
      106 * _0xe68c7c,
      174 * _0xe68c7c,
      105 * _0xe68c7c,
      185 * _0xe68c7c,
      109 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      190 * _0xe68c7c,
      109 * _0xe68c7c,
      189 * _0xe68c7c,
      114 * _0xe68c7c,
      185 * _0xe68c7c,
      120 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      181 * _0xe68c7c,
      125 * _0xe68c7c,
      180 * _0xe68c7c,
      126 * _0xe68c7c,
      176 * _0xe68c7c,
      122 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      182 * _0xe68c7c,
      119 * _0xe68c7c,
      187 * _0xe68c7c,
      110 * _0xe68c7c,
      182 * _0xe68c7c,
      112 * _0xe68c7c
    );
    _0x220968.closePath();
    fill_path(_0x220968, _0x380234[2]);
    _0x220968.beginPath();
    _0x220968.lineCap = "round";
    _0x220968.lineJoin = "round";
    _0x220968.moveTo(202 * _0xe68c7c, 125 * _0xe68c7c);
    _0x220968.bezierCurveTo(
      197 * _0xe68c7c,
      117 * _0xe68c7c,
      193 * _0xe68c7c,
      116 * _0xe68c7c,
      193 * _0xe68c7c,
      120 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      192.5 * _0xe68c7c,
      124.5 * _0xe68c7c,
      192.5 * _0xe68c7c,
      124.5 * _0xe68c7c,
      192 * _0xe68c7c,
      129 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      188 * _0xe68c7c,
      129 * _0xe68c7c,
      187 * _0xe68c7c,
      124 * _0xe68c7c,
      189 * _0xe68c7c,
      120 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      191 * _0xe68c7c,
      110 * _0xe68c7c,
      192 * _0xe68c7c,
      110 * _0xe68c7c,
      200 * _0xe68c7c,
      116 * _0xe68c7c
    );
    _0x220968.bezierCurveTo(
      208 * _0xe68c7c,
      120 * _0xe68c7c,
      207 * _0xe68c7c,
      123 * _0xe68c7c,
      202 * _0xe68c7c,
      125 * _0xe68c7c
    );
    _0x220968.closePath();
    fill_path(_0x220968, _0x380234[2]);
  }
  return _0x1e8f57;
}
function create_hurt_crab(_0x256161, _0x4b855c) {
  var _0x32034a = document.createElement("canvas");
  var _0x3efcf3 = _0x32034a.getContext("2d");
  _0x32034a.width = 283 * _0x256161;
  _0x32034a.height = 224 * _0x256161;
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(100 * _0x256161, 33 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    85 * _0x256161,
    62 * _0x256161,
    102 * _0x256161,
    66 * _0x256161,
    110 * _0x256161,
    83 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(181 * _0x256161, 32 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    196 * _0x256161,
    62 * _0x256161,
    181 * _0x256161,
    68 * _0x256161,
    178 * _0x256161,
    69 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(225 * _0x256161, 52 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    228 * _0x256161,
    78 * _0x256161,
    207 * _0x256161,
    77 * _0x256161,
    192 * _0x256161,
    88 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(34 * _0x256161, 134 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    46 * _0x256161,
    111 * _0x256161,
    57 * _0x256161,
    111 * _0x256161,
    79 * _0x256161,
    109 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(249 * _0x256161, 135 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    233 * _0x256161,
    107 * _0x256161,
    212 * _0x256161,
    112 * _0x256161,
    202 * _0x256161,
    115 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(56 * _0x256161, 50 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    56 * _0x256161,
    82 * _0x256161,
    73 * _0x256161,
    82 * _0x256161,
    93 * _0x256161,
    89 * _0x256161
  );
  fill_path(_0x3efcf3, undefined, _0x4b855c[0], 40 * _0x256161);
  _0x3efcf3.beginPath();
  _0x3efcf3.lineCap = "round";
  _0x3efcf3.lineJoin = "round";
  _0x3efcf3.moveTo(93 * _0x256161, 55 * _0x256161);
  _0x3efcf3.bezierCurveTo(
    124 * _0x256161,
    29 * _0x256161,
    179 * _0x256161,
    44 * _0x256161,
    188 * _0x256161,
    52 * _0x256161
  );
  _0x3efcf3.bezierCurveTo(
    207 * _0x256161,
    64 * _0x256161,
    226 * _0x256161,
    94 * _0x256161,
    231 * _0x256161,
    118 * _0x256161
  );
  _0x3efcf3.bezierCurveTo(
    236 * _0x256161,
    145 * _0x256161,
    222 * _0x256161,
    184 * _0x256161,
    193 * _0x256161,
    192 * _0x256161
  );
  _0x3efcf3.bezierCurveTo(
    147 * _0x256161,
    201 * _0x256161,
    116 * _0x256161,
    200 * _0x256161,
    93 * _0x256161,
    193 * _0x256161
  );
  _0x3efcf3.bezierCurveTo(
    61 * _0x256161,
    180 * _0x256161,
    48 * _0x256161,
    147 * _0x256161,
    50 * _0x256161,
    123 * _0x256161
  );
  _0x3efcf3.bezierCurveTo(
    50 * _0x256161,
    93 * _0x256161,
    76 * _0x256161,
    66 * _0x256161,
    92 * _0x256161,
    56 * _0x256161
  );
  _0x3efcf3.closePath();
  fill_path(_0x3efcf3, _0x4b855c[0]);
  return _0x32034a;
}
function create_crab_claw_left(_0xb7aa29, _0x4a8327, _0x3b3da4) {
  var _0x298855 = document.createElement("canvas");
  var _0x3f5528 = _0x298855.getContext("2d");
  _0x298855.width = 131 * _0xb7aa29;
  _0x298855.height = 121 * _0xb7aa29;
  _0x3f5528.translate(0, 20 * _0xb7aa29);
  _0x3f5528.beginPath();
  _0x3f5528.lineCap = "round";
  _0x3f5528.lineJoin = "round";
  _0x3f5528.moveTo(110 * _0xb7aa29, 59 * _0xb7aa29);
  _0x3f5528.bezierCurveTo(
    93 * _0xb7aa29,
    61.5 * _0xb7aa29,
    93 * _0xb7aa29,
    61.5 * _0xb7aa29,
    76 * _0xb7aa29,
    64 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    84.5 * _0xb7aa29,
    78.5 * _0xb7aa29,
    84.5 * _0xb7aa29,
    78.5 * _0xb7aa29,
    93 * _0xb7aa29,
    93 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    70 * _0xb7aa29,
    111 * _0xb7aa29,
    43 * _0xb7aa29,
    103 * _0xb7aa29,
    30 * _0xb7aa29,
    82 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    17 * _0xb7aa29,
    61 * _0xb7aa29,
    25 * _0xb7aa29,
    30 * _0xb7aa29,
    51 * _0xb7aa29,
    21 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    66 * _0xb7aa29,
    15 * _0xb7aa29,
    83 * _0xb7aa29,
    18 * _0xb7aa29,
    96 * _0xb7aa29,
    29 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    104 * _0xb7aa29,
    35 * _0xb7aa29,
    109 * _0xb7aa29,
    47 * _0xb7aa29,
    110 * _0xb7aa29,
    58 * _0xb7aa29
  );
  _0x3f5528.closePath();
  fill_path(_0x3f5528, _0x3b3da4[0]);
  _0x3f5528.globalAlpha = 1;
  _0x3f5528.translate(0, -20 * _0xb7aa29);
  _0x3f5528.beginPath();
  _0x3f5528.lineCap = "round";
  _0x3f5528.lineJoin = "round";
  _0x3f5528.moveTo(110 * _0xb7aa29, 59 * _0xb7aa29);
  _0x3f5528.bezierCurveTo(
    93 * _0xb7aa29,
    61.5 * _0xb7aa29,
    93 * _0xb7aa29,
    61.5 * _0xb7aa29,
    76 * _0xb7aa29,
    64 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    84.5 * _0xb7aa29,
    78.5 * _0xb7aa29,
    84.5 * _0xb7aa29,
    78.5 * _0xb7aa29,
    93 * _0xb7aa29,
    93 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    70 * _0xb7aa29,
    111 * _0xb7aa29,
    43 * _0xb7aa29,
    103 * _0xb7aa29,
    30 * _0xb7aa29,
    82 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    17 * _0xb7aa29,
    61 * _0xb7aa29,
    25 * _0xb7aa29,
    30 * _0xb7aa29,
    51 * _0xb7aa29,
    21 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    66 * _0xb7aa29,
    15 * _0xb7aa29,
    83 * _0xb7aa29,
    18 * _0xb7aa29,
    96 * _0xb7aa29,
    29 * _0xb7aa29
  );
  _0x3f5528.bezierCurveTo(
    104 * _0xb7aa29,
    35 * _0xb7aa29,
    109 * _0xb7aa29,
    47 * _0xb7aa29,
    110 * _0xb7aa29,
    58 * _0xb7aa29
  );
  _0x3f5528.closePath();
  fill_path(_0x3f5528, _0x3b3da4[1], _0x3b3da4[2], 10 * _0xb7aa29);
  return _0x298855;
}
function create_crab_claw_right(_0x3e09c1, _0x93c1dc, _0x419def) {
  var _0x4b9c8e = document.createElement("canvas");
  var _0xe31343 = _0x4b9c8e.getContext("2d");
  _0x4b9c8e.width = 104 * _0x3e09c1;
  _0x4b9c8e.height = 112 * _0x3e09c1;
  _0xe31343.translate(0, 15 * _0x3e09c1);
  _0xe31343.beginPath();
  _0xe31343.lineCap = "round";
  _0xe31343.lineJoin = "round";
  _0xe31343.moveTo(16 * _0x3e09c1, 44 * _0x3e09c1);
  _0xe31343.bezierCurveTo(
    30.5 * _0x3e09c1,
    48 * _0x3e09c1,
    30.5 * _0x3e09c1,
    48 * _0x3e09c1,
    45 * _0x3e09c1,
    52 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    36.5 * _0x3e09c1,
    63 * _0x3e09c1,
    36.5 * _0x3e09c1,
    63 * _0x3e09c1,
    28 * _0x3e09c1,
    74 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    32 * _0x3e09c1,
    86 * _0x3e09c1,
    61 * _0x3e09c1,
    92 * _0x3e09c1,
    78 * _0x3e09c1,
    76 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    93 * _0x3e09c1,
    62 * _0x3e09c1,
    92 * _0x3e09c1,
    40 * _0x3e09c1,
    80 * _0x3e09c1,
    26 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    65 * _0x3e09c1,
    11 * _0x3e09c1,
    42 * _0x3e09c1,
    16 * _0x3e09c1,
    34 * _0x3e09c1,
    21 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    22 * _0x3e09c1,
    27 * _0x3e09c1,
    16 * _0x3e09c1,
    39 * _0x3e09c1,
    16 * _0x3e09c1,
    44 * _0x3e09c1
  );
  _0xe31343.closePath();
  fill_path(_0xe31343, _0x419def[0]);
  _0xe31343.globalAlpha = 1;
  _0xe31343.translate(0, -15 * _0x3e09c1);
  _0xe31343.beginPath();
  _0xe31343.lineCap = "round";
  _0xe31343.lineJoin = "round";
  _0xe31343.moveTo(16 * _0x3e09c1, 44 * _0x3e09c1);
  _0xe31343.bezierCurveTo(
    30.5 * _0x3e09c1,
    48 * _0x3e09c1,
    30.5 * _0x3e09c1,
    48 * _0x3e09c1,
    45 * _0x3e09c1,
    52 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    36.5 * _0x3e09c1,
    63 * _0x3e09c1,
    36.5 * _0x3e09c1,
    63 * _0x3e09c1,
    28 * _0x3e09c1,
    74 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    32 * _0x3e09c1,
    86 * _0x3e09c1,
    61 * _0x3e09c1,
    92 * _0x3e09c1,
    78 * _0x3e09c1,
    76 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    93 * _0x3e09c1,
    62 * _0x3e09c1,
    92 * _0x3e09c1,
    40 * _0x3e09c1,
    80 * _0x3e09c1,
    26 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    65 * _0x3e09c1,
    11 * _0x3e09c1,
    42 * _0x3e09c1,
    16 * _0x3e09c1,
    34 * _0x3e09c1,
    21 * _0x3e09c1
  );
  _0xe31343.bezierCurveTo(
    22 * _0x3e09c1,
    27 * _0x3e09c1,
    16 * _0x3e09c1,
    39 * _0x3e09c1,
    16 * _0x3e09c1,
    44 * _0x3e09c1
  );
  _0xe31343.closePath();
  fill_path(_0xe31343, _0x419def[1], _0x419def[2], 8 * _0x3e09c1);
  return _0x4b9c8e;
}
function create_crab_stick(_0x4b1469, _0x22ad66, _0x38a608) {
  var _0x2be50d = document.createElement("canvas");
  var _0x8b910b = _0x2be50d.getContext("2d");
  _0x2be50d.width = 321 * _0x4b1469;
  _0x2be50d.height = 284 * _0x4b1469;
  _0x8b910b.translate(100 * _0x4b1469, 30 * _0x4b1469);
  _0x8b910b.translate(5 * _0x4b1469, 10 * _0x4b1469);
  _0x8b910b.globalAlpha = _0x22ad66 ? 0.5 : 1;
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[0]);
  _0x8b910b.globalAlpha = 1;
  _0x8b910b.translate(-5 * _0x4b1469, -10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[1], _0x38a608[2], 10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(167 * _0x4b1469, 120 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    196 * _0x4b1469,
    106 * _0x4b1469,
    207 * _0x4b1469,
    111 * _0x4b1469,
    199 * _0x4b1469,
    135 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    185 * _0x4b1469,
    172 * _0x4b1469,
    166 * _0x4b1469,
    187 * _0x4b1469,
    145 * _0x4b1469,
    179 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    118 * _0x4b1469,
    166 * _0x4b1469,
    127 * _0x4b1469,
    139 * _0x4b1469,
    166 * _0x4b1469,
    121 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[3]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(25 * _0x4b1469, 64 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    59 * _0x4b1469,
    96 * _0x4b1469,
    97 * _0x4b1469,
    128 * _0x4b1469,
    129 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    126 * _0x4b1469,
    163 * _0x4b1469,
    134 * _0x4b1469,
    174 * _0x4b1469,
    142 * _0x4b1469,
    180 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    114 * _0x4b1469,
    170 * _0x4b1469,
    68 * _0x4b1469,
    134 * _0x4b1469,
    31 * _0x4b1469,
    85 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    24 * _0x4b1469,
    71 * _0x4b1469,
    24 * _0x4b1469,
    70 * _0x4b1469,
    25 * _0x4b1469,
    65 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[2]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(161 * _0x4b1469, 141 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    131 * _0x4b1469,
    186 * _0x4b1469,
    135 * _0x4b1469,
    173 * _0x4b1469,
    152 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    163 * _0x4b1469,
    163 * _0x4b1469,
    155 * _0x4b1469,
    161 * _0x4b1469,
    151 * _0x4b1469,
    150 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    147 * _0x4b1469,
    140 * _0x4b1469,
    155 * _0x4b1469,
    131 * _0x4b1469,
    175 * _0x4b1469,
    125 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    190 * _0x4b1469,
    120 * _0x4b1469,
    196 * _0x4b1469,
    121 * _0x4b1469,
    189 * _0x4b1469,
    143 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    182 * _0x4b1469,
    167 * _0x4b1469,
    169 * _0x4b1469,
    174 * _0x4b1469,
    157 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    138 * _0x4b1469,
    172 * _0x4b1469,
    139 * _0x4b1469,
    162 * _0x4b1469,
    140 * _0x4b1469,
    156 * _0x4b1469
  );
  fill_path(_0x8b910b, undefined, _0x38a608[4], 4 * _0x4b1469);
  _0x8b910b.translate(-100 * _0x4b1469, -30 * _0x4b1469);
  _0x8b910b.translate(10 * _0x4b1469, 70 * _0x4b1469);
  _0x8b910b.translate(5 * _0x4b1469, 10 * _0x4b1469);
  _0x8b910b.globalAlpha = _0x22ad66 ? 0.5 : 1;
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[0]);
  _0x8b910b.globalAlpha = 1;
  _0x8b910b.translate(-5 * _0x4b1469, -10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[1], _0x38a608[2], 10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(167 * _0x4b1469, 120 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    196 * _0x4b1469,
    106 * _0x4b1469,
    207 * _0x4b1469,
    111 * _0x4b1469,
    199 * _0x4b1469,
    135 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    185 * _0x4b1469,
    172 * _0x4b1469,
    166 * _0x4b1469,
    187 * _0x4b1469,
    145 * _0x4b1469,
    179 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    118 * _0x4b1469,
    166 * _0x4b1469,
    127 * _0x4b1469,
    139 * _0x4b1469,
    166 * _0x4b1469,
    121 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[3]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(25 * _0x4b1469, 64 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    59 * _0x4b1469,
    96 * _0x4b1469,
    97 * _0x4b1469,
    128 * _0x4b1469,
    129 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    126 * _0x4b1469,
    163 * _0x4b1469,
    134 * _0x4b1469,
    174 * _0x4b1469,
    142 * _0x4b1469,
    180 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    114 * _0x4b1469,
    170 * _0x4b1469,
    68 * _0x4b1469,
    134 * _0x4b1469,
    31 * _0x4b1469,
    85 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    24 * _0x4b1469,
    71 * _0x4b1469,
    24 * _0x4b1469,
    70 * _0x4b1469,
    25 * _0x4b1469,
    65 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[2]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(161 * _0x4b1469, 141 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    131 * _0x4b1469,
    186 * _0x4b1469,
    135 * _0x4b1469,
    173 * _0x4b1469,
    152 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    163 * _0x4b1469,
    163 * _0x4b1469,
    155 * _0x4b1469,
    161 * _0x4b1469,
    151 * _0x4b1469,
    150 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    147 * _0x4b1469,
    140 * _0x4b1469,
    155 * _0x4b1469,
    131 * _0x4b1469,
    175 * _0x4b1469,
    125 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    190 * _0x4b1469,
    120 * _0x4b1469,
    196 * _0x4b1469,
    121 * _0x4b1469,
    189 * _0x4b1469,
    143 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    182 * _0x4b1469,
    167 * _0x4b1469,
    169 * _0x4b1469,
    174 * _0x4b1469,
    157 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    138 * _0x4b1469,
    172 * _0x4b1469,
    139 * _0x4b1469,
    162 * _0x4b1469,
    140 * _0x4b1469,
    156 * _0x4b1469
  );
  fill_path(_0x8b910b, undefined, _0x38a608[4], 4 * _0x4b1469);
  _0x8b910b.translate(20 * _0x4b1469, -80 * _0x4b1469);
  _0x8b910b.translate(5 * _0x4b1469, 10 * _0x4b1469);
  _0x8b910b.globalAlpha = _0x22ad66 ? 0.5 : 1;
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[0]);
  _0x8b910b.globalAlpha = 1;
  _0x8b910b.translate(-5 * _0x4b1469, -10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(58 * _0x4b1469, 33 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    81 * _0x4b1469,
    22 * _0x4b1469,
    93 * _0x4b1469,
    26 * _0x4b1469,
    123 * _0x4b1469,
    47 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    160 * _0x4b1469,
    73 * _0x4b1469,
    169 * _0x4b1469,
    80 * _0x4b1469,
    191 * _0x4b1469,
    99 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    202 * _0x4b1469,
    107 * _0x4b1469,
    211 * _0x4b1469,
    118 * _0x4b1469,
    195 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    183 * _0x4b1469,
    157 * _0x4b1469,
    192 * _0x4b1469,
    129 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    78 * _0x4b1469,
    140 * _0x4b1469,
    68 * _0x4b1469,
    129 * _0x4b1469,
    37 * _0x4b1469,
    94 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    15 * _0x4b1469,
    68 * _0x4b1469,
    25 * _0x4b1469,
    52 * _0x4b1469,
    56 * _0x4b1469,
    34 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[1], _0x38a608[2], 10 * _0x4b1469);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(167 * _0x4b1469, 120 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    196 * _0x4b1469,
    106 * _0x4b1469,
    207 * _0x4b1469,
    111 * _0x4b1469,
    199 * _0x4b1469,
    135 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    185 * _0x4b1469,
    172 * _0x4b1469,
    166 * _0x4b1469,
    187 * _0x4b1469,
    145 * _0x4b1469,
    179 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    118 * _0x4b1469,
    166 * _0x4b1469,
    127 * _0x4b1469,
    139 * _0x4b1469,
    166 * _0x4b1469,
    121 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[3]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(25 * _0x4b1469, 64 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    59 * _0x4b1469,
    96 * _0x4b1469,
    97 * _0x4b1469,
    128 * _0x4b1469,
    129 * _0x4b1469,
    151 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    126 * _0x4b1469,
    163 * _0x4b1469,
    134 * _0x4b1469,
    174 * _0x4b1469,
    142 * _0x4b1469,
    180 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    114 * _0x4b1469,
    170 * _0x4b1469,
    68 * _0x4b1469,
    134 * _0x4b1469,
    31 * _0x4b1469,
    85 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    24 * _0x4b1469,
    71 * _0x4b1469,
    24 * _0x4b1469,
    70 * _0x4b1469,
    25 * _0x4b1469,
    65 * _0x4b1469
  );
  _0x8b910b.closePath();
  fill_path(_0x8b910b, _0x38a608[2]);
  _0x8b910b.beginPath();
  _0x8b910b.lineCap = "round";
  _0x8b910b.lineJoin = "round";
  _0x8b910b.moveTo(161 * _0x4b1469, 141 * _0x4b1469);
  _0x8b910b.bezierCurveTo(
    181 * _0x4b1469,
    131 * _0x4b1469,
    186 * _0x4b1469,
    135 * _0x4b1469,
    173 * _0x4b1469,
    152 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    163 * _0x4b1469,
    163 * _0x4b1469,
    155 * _0x4b1469,
    161 * _0x4b1469,
    151 * _0x4b1469,
    150 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    147 * _0x4b1469,
    140 * _0x4b1469,
    155 * _0x4b1469,
    131 * _0x4b1469,
    175 * _0x4b1469,
    125 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    190 * _0x4b1469,
    120 * _0x4b1469,
    196 * _0x4b1469,
    121 * _0x4b1469,
    189 * _0x4b1469,
    143 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    182 * _0x4b1469,
    167 * _0x4b1469,
    169 * _0x4b1469,
    174 * _0x4b1469,
    157 * _0x4b1469,
    174 * _0x4b1469
  );
  _0x8b910b.bezierCurveTo(
    138 * _0x4b1469,
    172 * _0x4b1469,
    139 * _0x4b1469,
    162 * _0x4b1469,
    140 * _0x4b1469,
    156 * _0x4b1469
  );
  fill_path(_0x8b910b, undefined, _0x38a608[4], 4 * _0x4b1469);
  return _0x2be50d;
}
function create_goldsword(_0x374d08, _0x27f3d0, _0x33fdfe) {
  var _0x318d41 = document.createElement("canvas");
  var _0x4d6501 = _0x318d41.getContext("2d");
  _0x318d41.width = 290 * _0x374d08;
  _0x318d41.height = 525 * _0x374d08;
  _0x4d6501.globalAlpha = _0x27f3d0 ? 0.5 : 1;
  _0x4d6501.translate(20 * _0x374d08, 20 * _0x374d08);
  _0x4d6501.beginPath();
  _0x4d6501.lineCap = "round";
  _0x4d6501.lineJoin = "round";
  _0x4d6501.moveTo(111 * _0x374d08, 351 * _0x374d08);
  _0x4d6501.bezierCurveTo(
    128.5 * _0x374d08,
    218.5 * _0x374d08,
    128.5 * _0x374d08,
    218.5 * _0x374d08,
    146 * _0x374d08,
    86 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    166.5 * _0x374d08,
    66.5 * _0x374d08,
    166.5 * _0x374d08,
    66.5 * _0x374d08,
    187 * _0x374d08,
    47 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    201 * _0x374d08,
    71.5 * _0x374d08,
    201 * _0x374d08,
    71.5 * _0x374d08,
    215 * _0x374d08,
    96 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    193 * _0x374d08,
    228.5 * _0x374d08,
    193 * _0x374d08,
    228.5 * _0x374d08,
    171 * _0x374d08,
    361 * _0x374d08
  );
  _0x4d6501.closePath();
  fill_path(_0x4d6501, _0x33fdfe[0]);
  _0x4d6501.save();
  _0x4d6501.translate(129.5 * _0x374d08, 424 * _0x374d08);
  _0x4d6501.rotate(0.16);
  round_rect(
    _0x4d6501,
    -15.5 * _0x374d08,
    -63 * _0x374d08,
    31 * _0x374d08,
    126 * _0x374d08,
    10 * _0x374d08
  );
  _0x4d6501.restore();
  fill_path(_0x4d6501, _0x33fdfe[0]);
  circle(
    _0x4d6501,
    121 * _0x374d08,
    480 * _0x374d08,
    20.396078054371138 * _0x374d08
  );
  fill_path(_0x4d6501, _0x33fdfe[0]);
  _0x4d6501.beginPath();
  _0x4d6501.lineCap = "round";
  _0x4d6501.lineJoin = "round";
  _0x4d6501.moveTo(90 * _0x374d08, 311 * _0x374d08);
  _0x4d6501.bezierCurveTo(
    95 * _0x374d08,
    324 * _0x374d08,
    95 * _0x374d08,
    324 * _0x374d08,
    100 * _0x374d08,
    337 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    141.5 * _0x374d08,
    345.5 * _0x374d08,
    141.5 * _0x374d08,
    345.5 * _0x374d08,
    183 * _0x374d08,
    354 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    193.5 * _0x374d08,
    342.5 * _0x374d08,
    193.5 * _0x374d08,
    342.5 * _0x374d08,
    204 * _0x374d08,
    331 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    202 * _0x374d08,
    354 * _0x374d08,
    202 * _0x374d08,
    354 * _0x374d08,
    200 * _0x374d08,
    377 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    147 * _0x374d08,
    388 * _0x374d08,
    106 * _0x374d08,
    371 * _0x374d08,
    79 * _0x374d08,
    356 * _0x374d08
  );
  _0x4d6501.closePath();
  fill_path(_0x4d6501, _0x33fdfe[0]);
  _0x4d6501.globalAlpha = 1;
  _0x4d6501.translate(-20 * _0x374d08, -20 * _0x374d08);
  _0x4d6501.beginPath();
  _0x4d6501.lineCap = "round";
  _0x4d6501.lineJoin = "round";
  _0x4d6501.moveTo(111 * _0x374d08, 351 * _0x374d08);
  _0x4d6501.bezierCurveTo(
    128.5 * _0x374d08,
    218.5 * _0x374d08,
    128.5 * _0x374d08,
    218.5 * _0x374d08,
    146 * _0x374d08,
    86 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    166.5 * _0x374d08,
    66.5 * _0x374d08,
    166.5 * _0x374d08,
    66.5 * _0x374d08,
    187 * _0x374d08,
    47 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    201 * _0x374d08,
    71.5 * _0x374d08,
    201 * _0x374d08,
    71.5 * _0x374d08,
    215 * _0x374d08,
    96 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    193 * _0x374d08,
    228.5 * _0x374d08,
    193 * _0x374d08,
    228.5 * _0x374d08,
    171 * _0x374d08,
    361 * _0x374d08
  );
  _0x4d6501.closePath();
  fill_path(_0x4d6501, _0x33fdfe[1], _0x33fdfe[2], 12.5 * _0x374d08);
  _0x4d6501.save();
  _0x4d6501.translate(129.5 * _0x374d08, 424 * _0x374d08);
  _0x4d6501.rotate(0.16);
  round_rect(
    _0x4d6501,
    -15.5 * _0x374d08,
    -63 * _0x374d08,
    31 * _0x374d08,
    126 * _0x374d08,
    10 * _0x374d08
  );
  _0x4d6501.restore();
  fill_path(_0x4d6501, _0x33fdfe[4], _0x33fdfe[5], 12.5 * _0x374d08);
  circle(
    _0x4d6501,
    121 * _0x374d08,
    480 * _0x374d08,
    20.396078054371138 * _0x374d08
  );
  fill_path(_0x4d6501, _0x33fdfe[4], _0x33fdfe[5], 12.5 * _0x374d08);
  _0x4d6501.beginPath();
  _0x4d6501.lineCap = "round";
  _0x4d6501.lineJoin = "round";
  _0x4d6501.moveTo(90 * _0x374d08, 311 * _0x374d08);
  _0x4d6501.bezierCurveTo(
    95 * _0x374d08,
    324 * _0x374d08,
    95 * _0x374d08,
    324 * _0x374d08,
    100 * _0x374d08,
    337 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    141.5 * _0x374d08,
    345.5 * _0x374d08,
    141.5 * _0x374d08,
    345.5 * _0x374d08,
    183 * _0x374d08,
    354 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    193.5 * _0x374d08,
    342.5 * _0x374d08,
    193.5 * _0x374d08,
    342.5 * _0x374d08,
    204 * _0x374d08,
    331 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    202 * _0x374d08,
    354 * _0x374d08,
    202 * _0x374d08,
    354 * _0x374d08,
    200 * _0x374d08,
    377 * _0x374d08
  );
  _0x4d6501.bezierCurveTo(
    147 * _0x374d08,
    388 * _0x374d08,
    106 * _0x374d08,
    371 * _0x374d08,
    79 * _0x374d08,
    356 * _0x374d08
  );
  _0x4d6501.closePath();
  fill_path(_0x4d6501, _0x33fdfe[1], _0x33fdfe[2], 12.5 * _0x374d08);
  return _0x318d41;
}
function create_diamondsword(_0x1de9bb, _0x866fa6, _0x3bc111) {
  var _0x2c1538 = document.createElement("canvas");
  var _0x2ae2d7 = _0x2c1538.getContext("2d");
  _0x2c1538.width = 290 * _0x1de9bb;
  _0x2c1538.height = 525 * _0x1de9bb;
  _0x2ae2d7.globalAlpha = _0x866fa6 ? 0.5 : 1;
  _0x2ae2d7.translate(20 * _0x1de9bb, 20 * _0x1de9bb);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(112 * _0x1de9bb, 356 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    124 * _0x1de9bb,
    220.5 * _0x1de9bb,
    124 * _0x1de9bb,
    220.5 * _0x1de9bb,
    136 * _0x1de9bb,
    85 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    162.5 * _0x1de9bb,
    65.5 * _0x1de9bb,
    162.5 * _0x1de9bb,
    65.5 * _0x1de9bb,
    189 * _0x1de9bb,
    46 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    208.5 * _0x1de9bb,
    72.5 * _0x1de9bb,
    208.5 * _0x1de9bb,
    72.5 * _0x1de9bb,
    228 * _0x1de9bb,
    99 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    200 * _0x1de9bb,
    232 * _0x1de9bb,
    200 * _0x1de9bb,
    232 * _0x1de9bb,
    172 * _0x1de9bb,
    365 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[0]);
  _0x2ae2d7.save();
  _0x2ae2d7.translate(131 * _0x1de9bb, 423 * _0x1de9bb);
  _0x2ae2d7.rotate(0.16);
  round_rect(
    _0x2ae2d7,
    -14 * _0x1de9bb,
    -53 * _0x1de9bb,
    28 * _0x1de9bb,
    106 * _0x1de9bb,
    10 * _0x1de9bb
  );
  _0x2ae2d7.restore();
  fill_path(_0x2ae2d7, _0x3bc111[0]);
  _0x2ae2d7.save();
  _0x2ae2d7.translate(122 * _0x1de9bb, 480 * _0x1de9bb);
  _0x2ae2d7.rotate(1.72);
  round_regular_polygon(
    _0x2ae2d7,
    4,
    26.476404589747453 * _0x1de9bb,
    10 * _0x1de9bb
  );
  _0x2ae2d7.restore();
  fill_path(_0x2ae2d7, _0x3bc111[0]);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(210 * _0x1de9bb, 387 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    138 * _0x1de9bb,
    376 * _0x1de9bb,
    138 * _0x1de9bb,
    376 * _0x1de9bb,
    66 * _0x1de9bb,
    365 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    76 * _0x1de9bb,
    355 * _0x1de9bb,
    76 * _0x1de9bb,
    355 * _0x1de9bb,
    86 * _0x1de9bb,
    345 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    99 * _0x1de9bb,
    346.5 * _0x1de9bb,
    99 * _0x1de9bb,
    346.5 * _0x1de9bb,
    112 * _0x1de9bb,
    348 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    128.5 * _0x1de9bb,
    344 * _0x1de9bb,
    128.5 * _0x1de9bb,
    344 * _0x1de9bb,
    145 * _0x1de9bb,
    340 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    158 * _0x1de9bb,
    348 * _0x1de9bb,
    158 * _0x1de9bb,
    348 * _0x1de9bb,
    171 * _0x1de9bb,
    356 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    184 * _0x1de9bb,
    358 * _0x1de9bb,
    184 * _0x1de9bb,
    358 * _0x1de9bb,
    197 * _0x1de9bb,
    360 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[0]);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(129 * _0x1de9bb, 338 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    137 * _0x1de9bb,
    336 * _0x1de9bb,
    137 * _0x1de9bb,
    336 * _0x1de9bb,
    145 * _0x1de9bb,
    334 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    152.5 * _0x1de9bb,
    338 * _0x1de9bb,
    152.5 * _0x1de9bb,
    338 * _0x1de9bb,
    160 * _0x1de9bb,
    342 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    184 * _0x1de9bb,
    224 * _0x1de9bb,
    184 * _0x1de9bb,
    224 * _0x1de9bb,
    208 * _0x1de9bb,
    106 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    197 * _0x1de9bb,
    88 * _0x1de9bb,
    187 * _0x1de9bb,
    70 * _0x1de9bb,
    186 * _0x1de9bb,
    70 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    169.5 * _0x1de9bb,
    83 * _0x1de9bb,
    169.5 * _0x1de9bb,
    83 * _0x1de9bb,
    153 * _0x1de9bb,
    96 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[0]);
  _0x2ae2d7.globalAlpha = 1;
  _0x2ae2d7.translate(-20 * _0x1de9bb, -20 * _0x1de9bb);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(112 * _0x1de9bb, 356 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    124 * _0x1de9bb,
    220.5 * _0x1de9bb,
    124 * _0x1de9bb,
    220.5 * _0x1de9bb,
    136 * _0x1de9bb,
    85 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    162.5 * _0x1de9bb,
    65.5 * _0x1de9bb,
    162.5 * _0x1de9bb,
    65.5 * _0x1de9bb,
    189 * _0x1de9bb,
    46 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    208.5 * _0x1de9bb,
    72.5 * _0x1de9bb,
    208.5 * _0x1de9bb,
    72.5 * _0x1de9bb,
    228 * _0x1de9bb,
    99 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    200 * _0x1de9bb,
    232 * _0x1de9bb,
    200 * _0x1de9bb,
    232 * _0x1de9bb,
    172 * _0x1de9bb,
    365 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[1], _0x3bc111[2], 12.5 * _0x1de9bb);
  _0x2ae2d7.save();
  _0x2ae2d7.translate(131 * _0x1de9bb, 423 * _0x1de9bb);
  _0x2ae2d7.rotate(0.16);
  round_rect(
    _0x2ae2d7,
    -14 * _0x1de9bb,
    -53 * _0x1de9bb,
    28 * _0x1de9bb,
    106 * _0x1de9bb,
    10 * _0x1de9bb
  );
  _0x2ae2d7.restore();
  fill_path(_0x2ae2d7, _0x3bc111[4], _0x3bc111[5], 12.5 * _0x1de9bb);
  _0x2ae2d7.save();
  _0x2ae2d7.translate(122 * _0x1de9bb, 480 * _0x1de9bb);
  _0x2ae2d7.rotate(1.72);
  round_regular_polygon(
    _0x2ae2d7,
    4,
    26.476404589747453 * _0x1de9bb,
    10 * _0x1de9bb
  );
  _0x2ae2d7.restore();
  fill_path(_0x2ae2d7, _0x3bc111[1], _0x3bc111[2], 12.5 * _0x1de9bb);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(210 * _0x1de9bb, 387 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    138 * _0x1de9bb,
    376 * _0x1de9bb,
    138 * _0x1de9bb,
    376 * _0x1de9bb,
    66 * _0x1de9bb,
    365 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    76 * _0x1de9bb,
    355 * _0x1de9bb,
    76 * _0x1de9bb,
    355 * _0x1de9bb,
    86 * _0x1de9bb,
    345 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    99 * _0x1de9bb,
    346.5 * _0x1de9bb,
    99 * _0x1de9bb,
    346.5 * _0x1de9bb,
    112 * _0x1de9bb,
    348 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    128.5 * _0x1de9bb,
    344 * _0x1de9bb,
    128.5 * _0x1de9bb,
    344 * _0x1de9bb,
    145 * _0x1de9bb,
    340 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    158 * _0x1de9bb,
    348 * _0x1de9bb,
    158 * _0x1de9bb,
    348 * _0x1de9bb,
    171 * _0x1de9bb,
    356 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    184 * _0x1de9bb,
    358 * _0x1de9bb,
    184 * _0x1de9bb,
    358 * _0x1de9bb,
    197 * _0x1de9bb,
    360 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[1], _0x3bc111[2], 12.5 * _0x1de9bb);
  _0x2ae2d7.beginPath();
  _0x2ae2d7.lineCap = "round";
  _0x2ae2d7.lineJoin = "round";
  _0x2ae2d7.moveTo(129 * _0x1de9bb, 338 * _0x1de9bb);
  _0x2ae2d7.bezierCurveTo(
    137 * _0x1de9bb,
    336 * _0x1de9bb,
    137 * _0x1de9bb,
    336 * _0x1de9bb,
    145 * _0x1de9bb,
    334 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    152.5 * _0x1de9bb,
    338 * _0x1de9bb,
    152.5 * _0x1de9bb,
    338 * _0x1de9bb,
    160 * _0x1de9bb,
    342 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    184 * _0x1de9bb,
    224 * _0x1de9bb,
    184 * _0x1de9bb,
    224 * _0x1de9bb,
    208 * _0x1de9bb,
    106 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    197 * _0x1de9bb,
    88 * _0x1de9bb,
    187 * _0x1de9bb,
    70 * _0x1de9bb,
    186 * _0x1de9bb,
    70 * _0x1de9bb
  );
  _0x2ae2d7.bezierCurveTo(
    169.5 * _0x1de9bb,
    83 * _0x1de9bb,
    169.5 * _0x1de9bb,
    83 * _0x1de9bb,
    153 * _0x1de9bb,
    96 * _0x1de9bb
  );
  _0x2ae2d7.closePath();
  fill_path(_0x2ae2d7, _0x3bc111[3]);
  return _0x2c1538;
}
function create_amesword(_0x2a56a7, _0x2739e3, _0x35fbc7) {
  var _0x365ce9 = document.createElement("canvas");
  var _0x2dde91 = _0x365ce9.getContext("2d");
  _0x365ce9.width = 290 * _0x2a56a7;
  _0x365ce9.height = 525 * _0x2a56a7;
  _0x2dde91.globalAlpha = _0x2739e3 ? 0.5 : 1;
  _0x2dde91.translate(20 * _0x2a56a7, 20 * _0x2a56a7);
  _0x2dde91.translate(-20 * _0x2a56a7, -20 * _0x2a56a7);
  _0x2dde91.save();
  _0x2dde91.translate(132 * _0x2a56a7, 423 * _0x2a56a7);
  _0x2dde91.rotate(0.16);
  round_rect(
    _0x2dde91,
    -14 * _0x2a56a7,
    -61 * _0x2a56a7,
    28 * _0x2a56a7,
    122 * _0x2a56a7,
    10 * _0x2a56a7
  );
  _0x2dde91.restore();
  fill_path(_0x2dde91, _0x35fbc7[0]);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(100 * _0x2a56a7, 344 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    123 * _0x2a56a7,
    214 * _0x2a56a7,
    123 * _0x2a56a7,
    214 * _0x2a56a7,
    146 * _0x2a56a7,
    84 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    166.5 * _0x2a56a7,
    65 * _0x2a56a7,
    166.5 * _0x2a56a7,
    65 * _0x2a56a7,
    187 * _0x2a56a7,
    46 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    201 * _0x2a56a7,
    71 * _0x2a56a7,
    201 * _0x2a56a7,
    71 * _0x2a56a7,
    215 * _0x2a56a7,
    96 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    199.5 * _0x2a56a7,
    226.5 * _0x2a56a7,
    199.5 * _0x2a56a7,
    226.5 * _0x2a56a7,
    184 * _0x2a56a7,
    357 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    162.5 * _0x2a56a7,
    362.5 * _0x2a56a7,
    162.5 * _0x2a56a7,
    362.5 * _0x2a56a7,
    141 * _0x2a56a7,
    368 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[0]);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(75 * _0x2a56a7, 328 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    88 * _0x2a56a7,
    336.5 * _0x2a56a7,
    88 * _0x2a56a7,
    336.5 * _0x2a56a7,
    101 * _0x2a56a7,
    345 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    123.5 * _0x2a56a7,
    337.5 * _0x2a56a7,
    123.5 * _0x2a56a7,
    337.5 * _0x2a56a7,
    146 * _0x2a56a7,
    330 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    165 * _0x2a56a7,
    343.5 * _0x2a56a7,
    165 * _0x2a56a7,
    343.5 * _0x2a56a7,
    184 * _0x2a56a7,
    357 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    198.5 * _0x2a56a7,
    353 * _0x2a56a7,
    198.5 * _0x2a56a7,
    353 * _0x2a56a7,
    213 * _0x2a56a7,
    349 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    200.5 * _0x2a56a7,
    364.5 * _0x2a56a7,
    200.5 * _0x2a56a7,
    364.5 * _0x2a56a7,
    188 * _0x2a56a7,
    380 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    163 * _0x2a56a7,
    380.5 * _0x2a56a7,
    163 * _0x2a56a7,
    380.5 * _0x2a56a7,
    138 * _0x2a56a7,
    381 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    112 * _0x2a56a7,
    373.5 * _0x2a56a7,
    112 * _0x2a56a7,
    373.5 * _0x2a56a7,
    86 * _0x2a56a7,
    366 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[0]);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(121 * _0x2a56a7, 332 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    133.5 * _0x2a56a7,
    327.5 * _0x2a56a7,
    133.5 * _0x2a56a7,
    327.5 * _0x2a56a7,
    146 * _0x2a56a7,
    323 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    157 * _0x2a56a7,
    330.5 * _0x2a56a7,
    157 * _0x2a56a7,
    330.5 * _0x2a56a7,
    168 * _0x2a56a7,
    338 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    182.5 * _0x2a56a7,
    219.5 * _0x2a56a7,
    182.5 * _0x2a56a7,
    219.5 * _0x2a56a7,
    197 * _0x2a56a7,
    101 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    190 * _0x2a56a7,
    84.5 * _0x2a56a7,
    190 * _0x2a56a7,
    84.5 * _0x2a56a7,
    183 * _0x2a56a7,
    68 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    172.5 * _0x2a56a7,
    81 * _0x2a56a7,
    172.5 * _0x2a56a7,
    81 * _0x2a56a7,
    162 * _0x2a56a7,
    94 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[0]);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(105 * _0x2a56a7, 463 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    124.5 * _0x2a56a7,
    466 * _0x2a56a7,
    124.5 * _0x2a56a7,
    466 * _0x2a56a7,
    144 * _0x2a56a7,
    469 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    145.5 * _0x2a56a7,
    478.5 * _0x2a56a7,
    145.5 * _0x2a56a7,
    478.5 * _0x2a56a7,
    147 * _0x2a56a7,
    488 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    133.5 * _0x2a56a7,
    495.5 * _0x2a56a7,
    133.5 * _0x2a56a7,
    495.5 * _0x2a56a7,
    120 * _0x2a56a7,
    503 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    108.5 * _0x2a56a7,
    492 * _0x2a56a7,
    108.5 * _0x2a56a7,
    492 * _0x2a56a7,
    97 * _0x2a56a7,
    481 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[0]);
  _0x2dde91.globalAlpha = 1;
  _0x2dde91.translate(-20 * _0x2a56a7, -20 * _0x2a56a7);
  _0x2dde91.save();
  _0x2dde91.translate(132 * _0x2a56a7, 423 * _0x2a56a7);
  _0x2dde91.rotate(0.16);
  round_rect(
    _0x2dde91,
    -14 * _0x2a56a7,
    -61 * _0x2a56a7,
    28 * _0x2a56a7,
    122 * _0x2a56a7,
    10 * _0x2a56a7
  );
  _0x2dde91.restore();
  fill_path(_0x2dde91, _0x35fbc7[4], _0x35fbc7[5], 12.5 * _0x2a56a7);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(100 * _0x2a56a7, 344 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    123 * _0x2a56a7,
    214 * _0x2a56a7,
    123 * _0x2a56a7,
    214 * _0x2a56a7,
    146 * _0x2a56a7,
    84 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    166.5 * _0x2a56a7,
    65 * _0x2a56a7,
    166.5 * _0x2a56a7,
    65 * _0x2a56a7,
    187 * _0x2a56a7,
    46 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    201 * _0x2a56a7,
    71 * _0x2a56a7,
    201 * _0x2a56a7,
    71 * _0x2a56a7,
    215 * _0x2a56a7,
    96 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    199.5 * _0x2a56a7,
    226.5 * _0x2a56a7,
    199.5 * _0x2a56a7,
    226.5 * _0x2a56a7,
    184 * _0x2a56a7,
    357 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    162.5 * _0x2a56a7,
    362.5 * _0x2a56a7,
    162.5 * _0x2a56a7,
    362.5 * _0x2a56a7,
    141 * _0x2a56a7,
    368 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[1], _0x35fbc7[2], 12.5 * _0x2a56a7);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(75 * _0x2a56a7, 328 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    88 * _0x2a56a7,
    336.5 * _0x2a56a7,
    88 * _0x2a56a7,
    336.5 * _0x2a56a7,
    101 * _0x2a56a7,
    345 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    123.5 * _0x2a56a7,
    337.5 * _0x2a56a7,
    123.5 * _0x2a56a7,
    337.5 * _0x2a56a7,
    146 * _0x2a56a7,
    330 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    165 * _0x2a56a7,
    343.5 * _0x2a56a7,
    165 * _0x2a56a7,
    343.5 * _0x2a56a7,
    184 * _0x2a56a7,
    357 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    198.5 * _0x2a56a7,
    353 * _0x2a56a7,
    198.5 * _0x2a56a7,
    353 * _0x2a56a7,
    213 * _0x2a56a7,
    349 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    200.5 * _0x2a56a7,
    364.5 * _0x2a56a7,
    200.5 * _0x2a56a7,
    364.5 * _0x2a56a7,
    188 * _0x2a56a7,
    380 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    163 * _0x2a56a7,
    380.5 * _0x2a56a7,
    163 * _0x2a56a7,
    380.5 * _0x2a56a7,
    138 * _0x2a56a7,
    381 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    112 * _0x2a56a7,
    373.5 * _0x2a56a7,
    112 * _0x2a56a7,
    373.5 * _0x2a56a7,
    86 * _0x2a56a7,
    366 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[1], _0x35fbc7[2], 12.5 * _0x2a56a7);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(121 * _0x2a56a7, 332 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    133.5 * _0x2a56a7,
    327.5 * _0x2a56a7,
    133.5 * _0x2a56a7,
    327.5 * _0x2a56a7,
    146 * _0x2a56a7,
    323 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    157 * _0x2a56a7,
    330.5 * _0x2a56a7,
    157 * _0x2a56a7,
    330.5 * _0x2a56a7,
    168 * _0x2a56a7,
    338 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    182.5 * _0x2a56a7,
    219.5 * _0x2a56a7,
    182.5 * _0x2a56a7,
    219.5 * _0x2a56a7,
    197 * _0x2a56a7,
    101 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    190 * _0x2a56a7,
    84.5 * _0x2a56a7,
    190 * _0x2a56a7,
    84.5 * _0x2a56a7,
    183 * _0x2a56a7,
    68 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    172.5 * _0x2a56a7,
    81 * _0x2a56a7,
    172.5 * _0x2a56a7,
    81 * _0x2a56a7,
    162 * _0x2a56a7,
    94 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[3]);
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(105 * _0x2a56a7, 463 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    124.5 * _0x2a56a7,
    466 * _0x2a56a7,
    124.5 * _0x2a56a7,
    466 * _0x2a56a7,
    144 * _0x2a56a7,
    469 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    145.5 * _0x2a56a7,
    478.5 * _0x2a56a7,
    145.5 * _0x2a56a7,
    478.5 * _0x2a56a7,
    147 * _0x2a56a7,
    488 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    133.5 * _0x2a56a7,
    495.5 * _0x2a56a7,
    133.5 * _0x2a56a7,
    495.5 * _0x2a56a7,
    120 * _0x2a56a7,
    503 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    108.5 * _0x2a56a7,
    492 * _0x2a56a7,
    108.5 * _0x2a56a7,
    492 * _0x2a56a7,
    97 * _0x2a56a7,
    481 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[1], _0x35fbc7[2], 12.5 * _0x2a56a7);
  _0x2dde91.globalAlpha = 1;
  _0x2dde91.beginPath();
  _0x2dde91.lineCap = "round";
  _0x2dde91.lineJoin = "round";
  _0x2dde91.moveTo(143 * _0x2a56a7, 346 * _0x2a56a7);
  _0x2dde91.bezierCurveTo(
    125 * _0x2a56a7,
    352 * _0x2a56a7,
    125 * _0x2a56a7,
    352 * _0x2a56a7,
    107 * _0x2a56a7,
    358 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    124 * _0x2a56a7,
    363 * _0x2a56a7,
    140 * _0x2a56a7,
    368 * _0x2a56a7,
    141 * _0x2a56a7,
    368 * _0x2a56a7
  );
  _0x2dde91.bezierCurveTo(
    156.5 * _0x2a56a7,
    367 * _0x2a56a7,
    156.5 * _0x2a56a7,
    367 * _0x2a56a7,
    172 * _0x2a56a7,
    366 * _0x2a56a7
  );
  _0x2dde91.closePath();
  fill_path(_0x2dde91, _0x35fbc7[3]);
  return _0x365ce9;
}
function create_sugar_can(_0x2bdf2f, _0x2e3ce7, _0x57a6e3) {
  var _0x598e4d = document.createElement("canvas");
  var _0x27c832 = _0x598e4d.getContext("2d");
  _0x598e4d.width = 154 * _0x2bdf2f;
  _0x598e4d.height = 261 * _0x2bdf2f;
  _0x27c832.globalAlpha = _0x2e3ce7 ? 0.5 : 1;
  _0x27c832.translate(0, 10 * _0x2bdf2f);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(125 * _0x2bdf2f, 69 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    123.5 * _0x2bdf2f,
    141.5 * _0x2bdf2f,
    123.5 * _0x2bdf2f,
    141.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    214 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    123 * _0x2bdf2f,
    228 * _0x2bdf2f,
    119 * _0x2bdf2f,
    239 * _0x2bdf2f,
    102 * _0x2bdf2f,
    239 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    90 * _0x2bdf2f,
    238 * _0x2bdf2f,
    86 * _0x2bdf2f,
    225 * _0x2bdf2f,
    89 * _0x2bdf2f,
    197 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    92 * _0x2bdf2f,
    159 * _0x2bdf2f,
    92 * _0x2bdf2f,
    141 * _0x2bdf2f,
    94 * _0x2bdf2f,
    84 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    94 * _0x2bdf2f,
    58 * _0x2bdf2f,
    87 * _0x2bdf2f,
    50 * _0x2bdf2f,
    73 * _0x2bdf2f,
    52 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    53 * _0x2bdf2f,
    54 * _0x2bdf2f,
    54 * _0x2bdf2f,
    92 * _0x2bdf2f,
    34 * _0x2bdf2f,
    87 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    13 * _0x2bdf2f,
    85 * _0x2bdf2f,
    22 * _0x2bdf2f,
    58 * _0x2bdf2f,
    34 * _0x2bdf2f,
    40 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    44 * _0x2bdf2f,
    24 * _0x2bdf2f,
    68 * _0x2bdf2f,
    17 * _0x2bdf2f,
    86 * _0x2bdf2f,
    21 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    111 * _0x2bdf2f,
    23 * _0x2bdf2f,
    123 * _0x2bdf2f,
    39 * _0x2bdf2f,
    125 * _0x2bdf2f,
    67 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[0]);
  _0x27c832.globalAlpha = 1;
  _0x27c832.translate(0, -10 * _0x2bdf2f);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(125 * _0x2bdf2f, 69 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    123.5 * _0x2bdf2f,
    141.5 * _0x2bdf2f,
    123.5 * _0x2bdf2f,
    141.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    214 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    123 * _0x2bdf2f,
    228 * _0x2bdf2f,
    119 * _0x2bdf2f,
    239 * _0x2bdf2f,
    102 * _0x2bdf2f,
    239 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    90 * _0x2bdf2f,
    238 * _0x2bdf2f,
    86 * _0x2bdf2f,
    225 * _0x2bdf2f,
    89 * _0x2bdf2f,
    197 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    92 * _0x2bdf2f,
    159 * _0x2bdf2f,
    92 * _0x2bdf2f,
    141 * _0x2bdf2f,
    94 * _0x2bdf2f,
    84 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    94 * _0x2bdf2f,
    58 * _0x2bdf2f,
    87 * _0x2bdf2f,
    50 * _0x2bdf2f,
    73 * _0x2bdf2f,
    52 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    53 * _0x2bdf2f,
    54 * _0x2bdf2f,
    54 * _0x2bdf2f,
    92 * _0x2bdf2f,
    34 * _0x2bdf2f,
    87 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    13 * _0x2bdf2f,
    85 * _0x2bdf2f,
    22 * _0x2bdf2f,
    58 * _0x2bdf2f,
    34 * _0x2bdf2f,
    40 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    44 * _0x2bdf2f,
    24 * _0x2bdf2f,
    68 * _0x2bdf2f,
    17 * _0x2bdf2f,
    86 * _0x2bdf2f,
    21 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    111 * _0x2bdf2f,
    23 * _0x2bdf2f,
    123 * _0x2bdf2f,
    39 * _0x2bdf2f,
    125 * _0x2bdf2f,
    67 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[1], _0x57a6e3[2], 4 * _0x2bdf2f);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(31 * _0x2bdf2f, 43 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    31 * _0x2bdf2f,
    61 * _0x2bdf2f,
    43 * _0x2bdf2f,
    70 * _0x2bdf2f,
    51 * _0x2bdf2f,
    75 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    48 * _0x2bdf2f,
    84 * _0x2bdf2f,
    41 * _0x2bdf2f,
    89 * _0x2bdf2f,
    33 * _0x2bdf2f,
    86 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    23 * _0x2bdf2f,
    88 * _0x2bdf2f,
    20 * _0x2bdf2f,
    76 * _0x2bdf2f,
    23 * _0x2bdf2f,
    62 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(45 * _0x2bdf2f, 29 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    49 * _0x2bdf2f,
    45 * _0x2bdf2f,
    61 * _0x2bdf2f,
    54 * _0x2bdf2f,
    64 * _0x2bdf2f,
    55 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    67.5 * _0x2bdf2f,
    53 * _0x2bdf2f,
    67.5 * _0x2bdf2f,
    53 * _0x2bdf2f,
    71 * _0x2bdf2f,
    51 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    80 * _0x2bdf2f,
    44 * _0x2bdf2f,
    83 * _0x2bdf2f,
    33 * _0x2bdf2f,
    82 * _0x2bdf2f,
    20 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    59 * _0x2bdf2f,
    17 * _0x2bdf2f,
    51 * _0x2bdf2f,
    23 * _0x2bdf2f,
    45 * _0x2bdf2f,
    30 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(86 * _0x2bdf2f, 56 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    90 * _0x2bdf2f,
    33 * _0x2bdf2f,
    103 * _0x2bdf2f,
    25 * _0x2bdf2f,
    105 * _0x2bdf2f,
    27 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    116 * _0x2bdf2f,
    31 * _0x2bdf2f,
    121 * _0x2bdf2f,
    45 * _0x2bdf2f,
    122 * _0x2bdf2f,
    50 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    112 * _0x2bdf2f,
    62 * _0x2bdf2f,
    103 * _0x2bdf2f,
    63 * _0x2bdf2f,
    91 * _0x2bdf2f,
    62 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    89 * _0x2bdf2f,
    59.5 * _0x2bdf2f,
    89 * _0x2bdf2f,
    59.5 * _0x2bdf2f,
    87 * _0x2bdf2f,
    57 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(93 * _0x2bdf2f, 81 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    109 * _0x2bdf2f,
    82 * _0x2bdf2f,
    123 * _0x2bdf2f,
    70 * _0x2bdf2f,
    124 * _0x2bdf2f,
    63 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    124 * _0x2bdf2f,
    75.5 * _0x2bdf2f,
    124 * _0x2bdf2f,
    75.5 * _0x2bdf2f,
    124 * _0x2bdf2f,
    88 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    119 * _0x2bdf2f,
    99 * _0x2bdf2f,
    103 * _0x2bdf2f,
    103 * _0x2bdf2f,
    94 * _0x2bdf2f,
    103 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(93 * _0x2bdf2f, 124 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    108 * _0x2bdf2f,
    125 * _0x2bdf2f,
    122 * _0x2bdf2f,
    113 * _0x2bdf2f,
    124 * _0x2bdf2f,
    106 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    124 * _0x2bdf2f,
    119 * _0x2bdf2f,
    124 * _0x2bdf2f,
    129 * _0x2bdf2f,
    124 * _0x2bdf2f,
    132 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    110 * _0x2bdf2f,
    147 * _0x2bdf2f,
    94 * _0x2bdf2f,
    148 * _0x2bdf2f,
    90 * _0x2bdf2f,
    147 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(90 * _0x2bdf2f, 170 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    104 * _0x2bdf2f,
    166 * _0x2bdf2f,
    122 * _0x2bdf2f,
    158 * _0x2bdf2f,
    122 * _0x2bdf2f,
    151 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    122 * _0x2bdf2f,
    162.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    162.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    174 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    111 * _0x2bdf2f,
    191 * _0x2bdf2f,
    97 * _0x2bdf2f,
    191 * _0x2bdf2f,
    89 * _0x2bdf2f,
    191 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(88 * _0x2bdf2f, 208 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    100 * _0x2bdf2f,
    209 * _0x2bdf2f,
    115 * _0x2bdf2f,
    205 * _0x2bdf2f,
    122 * _0x2bdf2f,
    193 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    122 * _0x2bdf2f,
    205.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    205.5 * _0x2bdf2f,
    122 * _0x2bdf2f,
    218 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    115 * _0x2bdf2f,
    229 * _0x2bdf2f,
    103 * _0x2bdf2f,
    235 * _0x2bdf2f,
    90 * _0x2bdf2f,
    228 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    88 * _0x2bdf2f,
    224 * _0x2bdf2f,
    88 * _0x2bdf2f,
    217 * _0x2bdf2f,
    88 * _0x2bdf2f,
    211 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[3]);
  _0x27c832.globalAlpha = 0.4;
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(22 * _0x2bdf2f, 81 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    32 * _0x2bdf2f,
    84 * _0x2bdf2f,
    41 * _0x2bdf2f,
    81 * _0x2bdf2f,
    45 * _0x2bdf2f,
    68 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    50 * _0x2bdf2f,
    50 * _0x2bdf2f,
    62 * _0x2bdf2f,
    40 * _0x2bdf2f,
    79 * _0x2bdf2f,
    43 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    95 * _0x2bdf2f,
    45 * _0x2bdf2f,
    102 * _0x2bdf2f,
    58 * _0x2bdf2f,
    101 * _0x2bdf2f,
    81 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    99.5 * _0x2bdf2f,
    120.5 * _0x2bdf2f,
    99.5 * _0x2bdf2f,
    120.5 * _0x2bdf2f,
    98 * _0x2bdf2f,
    160 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    96.5 * _0x2bdf2f,
    191.5 * _0x2bdf2f,
    96.5 * _0x2bdf2f,
    191.5 * _0x2bdf2f,
    95 * _0x2bdf2f,
    223 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    93 * _0x2bdf2f,
    232 * _0x2bdf2f,
    101 * _0x2bdf2f,
    235 * _0x2bdf2f,
    108 * _0x2bdf2f,
    238 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    100 * _0x2bdf2f,
    240 * _0x2bdf2f,
    90 * _0x2bdf2f,
    233 * _0x2bdf2f,
    90 * _0x2bdf2f,
    224 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    92 * _0x2bdf2f,
    157 * _0x2bdf2f,
    92 * _0x2bdf2f,
    157 * _0x2bdf2f,
    94 * _0x2bdf2f,
    90 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    94 * _0x2bdf2f,
    56 * _0x2bdf2f,
    89 * _0x2bdf2f,
    53 * _0x2bdf2f,
    77 * _0x2bdf2f,
    51 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    58 * _0x2bdf2f,
    50 * _0x2bdf2f,
    54 * _0x2bdf2f,
    59 * _0x2bdf2f,
    49 * _0x2bdf2f,
    75 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    44 * _0x2bdf2f,
    91 * _0x2bdf2f,
    28 * _0x2bdf2f,
    90 * _0x2bdf2f,
    23 * _0x2bdf2f,
    81 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[0]);
  _0x27c832.globalAlpha = 1;
  _0x27c832.beginPath();
  _0x27c832.lineCap = "round";
  _0x27c832.lineJoin = "round";
  _0x27c832.moveTo(82 * _0x2bdf2f, 123 * _0x2bdf2f);
  _0x27c832.bezierCurveTo(
    88 * _0x2bdf2f,
    130 * _0x2bdf2f,
    88 * _0x2bdf2f,
    127 * _0x2bdf2f,
    94 * _0x2bdf2f,
    128 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    91 * _0x2bdf2f,
    136 * _0x2bdf2f,
    94 * _0x2bdf2f,
    137 * _0x2bdf2f,
    99 * _0x2bdf2f,
    142 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    97 * _0x2bdf2f,
    149 * _0x2bdf2f,
    99 * _0x2bdf2f,
    152 * _0x2bdf2f,
    105 * _0x2bdf2f,
    155 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    107 * _0x2bdf2f,
    159 * _0x2bdf2f,
    113 * _0x2bdf2f,
    159 * _0x2bdf2f,
    120 * _0x2bdf2f,
    158 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    121 * _0x2bdf2f,
    160 * _0x2bdf2f,
    125 * _0x2bdf2f,
    163 * _0x2bdf2f,
    132 * _0x2bdf2f,
    163 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    133 * _0x2bdf2f,
    166 * _0x2bdf2f,
    136 * _0x2bdf2f,
    169 * _0x2bdf2f,
    138 * _0x2bdf2f,
    170 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    133 * _0x2bdf2f,
    171 * _0x2bdf2f,
    132 * _0x2bdf2f,
    172 * _0x2bdf2f,
    129 * _0x2bdf2f,
    174 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    122 * _0x2bdf2f,
    170 * _0x2bdf2f,
    120 * _0x2bdf2f,
    170 * _0x2bdf2f,
    116 * _0x2bdf2f,
    174 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    108 * _0x2bdf2f,
    170.5 * _0x2bdf2f,
    108 * _0x2bdf2f,
    170.5 * _0x2bdf2f,
    100 * _0x2bdf2f,
    167 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    95 * _0x2bdf2f,
    172 * _0x2bdf2f,
    94 * _0x2bdf2f,
    179 * _0x2bdf2f,
    95 * _0x2bdf2f,
    184 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    87 * _0x2bdf2f,
    185 * _0x2bdf2f,
    87 * _0x2bdf2f,
    189 * _0x2bdf2f,
    88 * _0x2bdf2f,
    194 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    82 * _0x2bdf2f,
    194 * _0x2bdf2f,
    81 * _0x2bdf2f,
    195 * _0x2bdf2f,
    79 * _0x2bdf2f,
    197 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    78 * _0x2bdf2f,
    192 * _0x2bdf2f,
    78 * _0x2bdf2f,
    191 * _0x2bdf2f,
    77 * _0x2bdf2f,
    189 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    81 * _0x2bdf2f,
    185 * _0x2bdf2f,
    82 * _0x2bdf2f,
    183 * _0x2bdf2f,
    80 * _0x2bdf2f,
    176 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    89 * _0x2bdf2f,
    170 * _0x2bdf2f,
    92 * _0x2bdf2f,
    168 * _0x2bdf2f,
    95 * _0x2bdf2f,
    163 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    91 * _0x2bdf2f,
    151 * _0x2bdf2f,
    88 * _0x2bdf2f,
    151 * _0x2bdf2f,
    82 * _0x2bdf2f,
    147 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    85 * _0x2bdf2f,
    142 * _0x2bdf2f,
    85 * _0x2bdf2f,
    137 * _0x2bdf2f,
    81 * _0x2bdf2f,
    133 * _0x2bdf2f
  );
  _0x27c832.bezierCurveTo(
    84 * _0x2bdf2f,
    127 * _0x2bdf2f,
    84 * _0x2bdf2f,
    125 * _0x2bdf2f,
    82 * _0x2bdf2f,
    124 * _0x2bdf2f
  );
  _0x27c832.closePath();
  fill_path(_0x27c832, _0x57a6e3[4], _0x57a6e3[5], 4 * _0x2bdf2f);
  circle(_0x27c832, 107 * _0x2bdf2f, 152 * _0x2bdf2f, 9 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[6]);
  circle(_0x27c832, 105 * _0x2bdf2f, 173 * _0x2bdf2f, 9 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[6]);
  circle(_0x27c832, 87 * _0x2bdf2f, 161 * _0x2bdf2f, 9 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[6]);
  circle(_0x27c832, 106 * _0x2bdf2f, 147 * _0x2bdf2f, 4 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[7]);
  circle(_0x27c832, 104 * _0x2bdf2f, 167 * _0x2bdf2f, 4 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[7]);
  circle(_0x27c832, 86 * _0x2bdf2f, 154 * _0x2bdf2f, 4 * _0x2bdf2f);
  fill_path(_0x27c832, _0x57a6e3[7]);
  return _0x598e4d;
}
function create_cookie(_0x207775, _0x1d8895, _0x492134) {
  var _0x213632 = document.createElement("canvas");
  var _0x58eb27 = _0x213632.getContext("2d");
  _0x213632.width = 350 * _0x207775;
  _0x213632.height = 140 * _0x207775;
  _0x58eb27.translate(-50 * _0x207775, -150 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(184.5 * _0x207775, 222.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    185.5 * _0x207775,
    184.0625 * _0x207775,
    302.5 * _0x207775,
    171.0625 * _0x207775,
    313.5 * _0x207775,
    222.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    330.5 * _0x207775,
    263.0625 * _0x207775,
    181.5 * _0x207775,
    274.0625 * _0x207775,
    184.5 * _0x207775,
    223.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[0], _0x492134[1], 8 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(131.5 * _0x207775, 241.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    144.5 * _0x207775,
    278.0625 * _0x207775,
    270.5 * _0x207775,
    209.0625 * _0x207775,
    228.5 * _0x207775,
    174.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    196.5 * _0x207775,
    147.0625 * _0x207775,
    117.5 * _0x207775,
    196.0625 * _0x207775,
    131.5 * _0x207775,
    240.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[0], _0x492134[1], 8 * _0x207775);
  circle(
    _0x58eb27,
    270.5 * _0x207775,
    225.0625 * _0x207775,
    15.811388300841896 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  circle(
    _0x58eb27,
    243.5 * _0x207775,
    225.0625 * _0x207775,
    6.082762530298219 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  circle(
    _0x58eb27,
    255.5 * _0x207775,
    210.0625 * _0x207775,
    10.816653826391969 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  circle(
    _0x58eb27,
    167.5 * _0x207775,
    215.0625 * _0x207775,
    15.297058540778355 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  circle(
    _0x58eb27,
    176.5 * _0x207775,
    204.0625 * _0x207775,
    7.280109889280518 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  circle(
    _0x58eb27,
    206.5 * _0x207775,
    189.0625 * _0x207775,
    7.280109889280518 * _0x207775
  );
  fill_path(_0x58eb27, _0x492134[2]);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(151.5 * _0x207775, 212.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    161.5 * _0x207775,
    204.0625 * _0x207775,
    173.5 * _0x207775,
    214.0625 * _0x207775,
    158.5 * _0x207775,
    221.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    145.5 * _0x207775,
    228.0625 * _0x207775,
    144.5 * _0x207775,
    216.0625 * _0x207775,
    151.5 * _0x207775,
    212.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[3], _0x492134[4], 4 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(194.5 * _0x207775, 209.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    205.5 * _0x207775,
    202.0625 * _0x207775,
    215.5 * _0x207775,
    207.0625 * _0x207775,
    199.5 * _0x207775,
    217.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    187.5 * _0x207775,
    224.0625 * _0x207775,
    182.5 * _0x207775,
    217.0625 * _0x207775,
    194.5 * _0x207775,
    209.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[3], _0x492134[4], 4 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(188.5 * _0x207775, 183.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    201.5 * _0x207775,
    176.0625 * _0x207775,
    213.5 * _0x207775,
    187.0625 * _0x207775,
    193.5 * _0x207775,
    193.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    185.5 * _0x207775,
    194.0625 * _0x207775,
    175.5 * _0x207775,
    189.0625 * _0x207775,
    188.5 * _0x207775,
    183.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[3], _0x492134[4], 4 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(261.5 * _0x207775, 202.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    274.5 * _0x207775,
    201.0625 * _0x207775,
    282.5 * _0x207775,
    214.0625 * _0x207775,
    261.5 * _0x207775,
    215.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    246.5 * _0x207775,
    214.0625 * _0x207775,
    248.5 * _0x207775,
    203.0625 * _0x207775,
    261.5 * _0x207775,
    202.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[3], _0x492134[4], 4 * _0x207775);
  _0x58eb27.beginPath();
  _0x58eb27.lineCap = "round";
  _0x58eb27.lineJoin = "round";
  _0x58eb27.moveTo(240.5 * _0x207775, 231.0625 * _0x207775);
  _0x58eb27.bezierCurveTo(
    255.5 * _0x207775,
    231.0625 * _0x207775,
    254.5 * _0x207775,
    243.0625 * _0x207775,
    240.5 * _0x207775,
    242.0625 * _0x207775
  );
  _0x58eb27.bezierCurveTo(
    225.5 * _0x207775,
    239.0625 * _0x207775,
    225.5 * _0x207775,
    232.0625 * _0x207775,
    240.5 * _0x207775,
    231.0625 * _0x207775
  );
  _0x58eb27.closePath();
  fill_path(_0x58eb27, _0x492134[3], _0x492134[4], 4 * _0x207775);
  return _0x213632;
}
function create_candy(_0x4fb313, _0x43b55f, _0x53bc1f) {
  var _0x29e20c = document.createElement("canvas");
  var _0x44981f = _0x29e20c.getContext("2d");
  _0x29e20c.width = 217 * _0x4fb313;
  _0x29e20c.height = 215 * _0x4fb313;
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(79 * _0x4fb313, 113 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    135 * _0x4fb313,
    98 * _0x4fb313,
    136 * _0x4fb313,
    96 * _0x4fb313,
    142 * _0x4fb313,
    97 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    167 * _0x4fb313,
    106 * _0x4fb313,
    167 * _0x4fb313,
    106 * _0x4fb313,
    171 * _0x4fb313,
    109 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    173 * _0x4fb313,
    120 * _0x4fb313,
    173 * _0x4fb313,
    134 * _0x4fb313,
    169 * _0x4fb313,
    141 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    140 * _0x4fb313,
    149.5 * _0x4fb313,
    140 * _0x4fb313,
    149.5 * _0x4fb313,
    111 * _0x4fb313,
    158 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[1], _0x53bc1f[2], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(154 * _0x4fb313, 103 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    167 * _0x4fb313,
    91 * _0x4fb313,
    175 * _0x4fb313,
    87 * _0x4fb313,
    176 * _0x4fb313,
    94 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    175 * _0x4fb313,
    102 * _0x4fb313,
    176 * _0x4fb313,
    102 * _0x4fb313,
    186 * _0x4fb313,
    103 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    191 * _0x4fb313,
    104 * _0x4fb313,
    192 * _0x4fb313,
    105 * _0x4fb313,
    185 * _0x4fb313,
    116 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    183 * _0x4fb313,
    120 * _0x4fb313,
    191 * _0x4fb313,
    124 * _0x4fb313,
    189 * _0x4fb313,
    129 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    185 * _0x4fb313,
    139 * _0x4fb313,
    178 * _0x4fb313,
    134 * _0x4fb313,
    166 * _0x4fb313,
    131 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[1], _0x53bc1f[2], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(60 * _0x4fb313, 46 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    60 * _0x4fb313,
    34 * _0x4fb313,
    60 * _0x4fb313,
    29 * _0x4fb313,
    56 * _0x4fb313,
    19 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    52 * _0x4fb313,
    12 * _0x4fb313,
    52 * _0x4fb313,
    16 * _0x4fb313,
    49 * _0x4fb313,
    24 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    48 * _0x4fb313,
    27 * _0x4fb313,
    46 * _0x4fb313,
    28 * _0x4fb313,
    39 * _0x4fb313,
    27 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    33 * _0x4fb313,
    26 * _0x4fb313,
    34 * _0x4fb313,
    31 * _0x4fb313,
    35 * _0x4fb313,
    37 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    36 * _0x4fb313,
    41 * _0x4fb313,
    27 * _0x4fb313,
    46 * _0x4fb313,
    29 * _0x4fb313,
    52 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    36 * _0x4fb313,
    55 * _0x4fb313,
    35 * _0x4fb313,
    56 * _0x4fb313,
    31 * _0x4fb313,
    59 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    27 * _0x4fb313,
    65 * _0x4fb313,
    32 * _0x4fb313,
    64 * _0x4fb313,
    35 * _0x4fb313,
    62 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[4], _0x53bc1f[5], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(46 * _0x4fb313, 50 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    51 * _0x4fb313,
    35 * _0x4fb313,
    70 * _0x4fb313,
    32 * _0x4fb313,
    78 * _0x4fb313,
    29 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    84 * _0x4fb313,
    27 * _0x4fb313,
    113 * _0x4fb313,
    36 * _0x4fb313,
    127 * _0x4fb313,
    41 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    140 * _0x4fb313,
    47 * _0x4fb313,
    147 * _0x4fb313,
    69 * _0x4fb313,
    137 * _0x4fb313,
    73 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    124 * _0x4fb313,
    92 * _0x4fb313,
    117 * _0x4fb313,
    92 * _0x4fb313,
    109 * _0x4fb313,
    94 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    101 * _0x4fb313,
    96 * _0x4fb313,
    89 * _0x4fb313,
    92 * _0x4fb313,
    65 * _0x4fb313,
    83 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    54 * _0x4fb313,
    80 * _0x4fb313,
    46 * _0x4fb313,
    58 * _0x4fb313,
    46 * _0x4fb313,
    51 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[4], _0x53bc1f[5], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(51 * _0x4fb313, 40 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    49 * _0x4fb313,
    34 * _0x4fb313,
    49 * _0x4fb313,
    34 * _0x4fb313,
    47 * _0x4fb313,
    28 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    38 * _0x4fb313,
    28 * _0x4fb313,
    34 * _0x4fb313,
    27 * _0x4fb313,
    37 * _0x4fb313,
    37 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    43 * _0x4fb313,
    40.5 * _0x4fb313,
    43 * _0x4fb313,
    40.5 * _0x4fb313,
    49 * _0x4fb313,
    44 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[7]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(29 * _0x4fb313, 48 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    38 * _0x4fb313,
    49 * _0x4fb313,
    38 * _0x4fb313,
    49 * _0x4fb313,
    47 * _0x4fb313,
    50 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    46.5 * _0x4fb313,
    51.5 * _0x4fb313,
    46.5 * _0x4fb313,
    51.5 * _0x4fb313,
    46 * _0x4fb313,
    53 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    40 * _0x4fb313,
    53.5 * _0x4fb313,
    40 * _0x4fb313,
    53.5 * _0x4fb313,
    34 * _0x4fb313,
    54 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    29 * _0x4fb313,
    51 * _0x4fb313,
    32 * _0x4fb313,
    51.5 * _0x4fb313,
    30 * _0x4fb313,
    49 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[7]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(89 * _0x4fb313, 61 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    101 * _0x4fb313,
    70 * _0x4fb313,
    109 * _0x4fb313,
    90 * _0x4fb313,
    102 * _0x4fb313,
    90 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    97 * _0x4fb313,
    91 * _0x4fb313,
    87 * _0x4fb313,
    91 * _0x4fb313,
    60 * _0x4fb313,
    80 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    48 * _0x4fb313,
    65 * _0x4fb313,
    46 * _0x4fb313,
    56 * _0x4fb313,
    48 * _0x4fb313,
    53 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    50 * _0x4fb313,
    52 * _0x4fb313,
    66 * _0x4fb313,
    56 * _0x4fb313,
    89 * _0x4fb313,
    61 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[7]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(99 * _0x4fb313, 59 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    115 * _0x4fb313,
    45 * _0x4fb313,
    125 * _0x4fb313,
    42 * _0x4fb313,
    129 * _0x4fb313,
    47 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    138 * _0x4fb313,
    56 * _0x4fb313,
    140 * _0x4fb313,
    63 * _0x4fb313,
    138 * _0x4fb313,
    67 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    131 * _0x4fb313,
    80 * _0x4fb313,
    122 * _0x4fb313,
    87 * _0x4fb313,
    114 * _0x4fb313,
    90 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    105 * _0x4fb313,
    80 * _0x4fb313,
    95 * _0x4fb313,
    62 * _0x4fb313,
    98 * _0x4fb313,
    61 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[7]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(118 * _0x4fb313, 62 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    139 * _0x4fb313,
    45 * _0x4fb313,
    153 * _0x4fb313,
    40 * _0x4fb313,
    150 * _0x4fb313,
    48 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    145 * _0x4fb313,
    57 * _0x4fb313,
    157 * _0x4fb313,
    63 * _0x4fb313,
    157 * _0x4fb313,
    70 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    157 * _0x4fb313,
    74 * _0x4fb313,
    142 * _0x4fb313,
    77 * _0x4fb313,
    142 * _0x4fb313,
    85 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    143 * _0x4fb313,
    91 * _0x4fb313,
    141 * _0x4fb313,
    92 * _0x4fb313,
    135 * _0x4fb313,
    90 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    132 * _0x4fb313,
    90 * _0x4fb313,
    132 * _0x4fb313,
    96 * _0x4fb313,
    124 * _0x4fb313,
    99 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    118 * _0x4fb313,
    93 * _0x4fb313,
    116 * _0x4fb313,
    77 * _0x4fb313,
    116 * _0x4fb313,
    64 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[4], _0x53bc1f[5], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(90 * _0x4fb313, 130 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    157 * _0x4fb313,
    115 * _0x4fb313,
    165 * _0x4fb313,
    111 * _0x4fb313,
    167 * _0x4fb313,
    115 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    170 * _0x4fb313,
    117 * _0x4fb313,
    171 * _0x4fb313,
    135 * _0x4fb313,
    167 * _0x4fb313,
    141 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    135.5 * _0x4fb313,
    149.5 * _0x4fb313,
    135.5 * _0x4fb313,
    149.5 * _0x4fb313,
    104 * _0x4fb313,
    158 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[8]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(53 * _0x4fb313, 119 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    46 * _0x4fb313,
    120 * _0x4fb313,
    40 * _0x4fb313,
    118 * _0x4fb313,
    34 * _0x4fb313,
    116 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    28 * _0x4fb313,
    111 * _0x4fb313,
    41 * _0x4fb313,
    112 * _0x4fb313,
    39 * _0x4fb313,
    108 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    36 * _0x4fb313,
    100 * _0x4fb313,
    49 * _0x4fb313,
    102 * _0x4fb313,
    53 * _0x4fb313,
    95 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    57 * _0x4fb313,
    84 * _0x4fb313,
    58 * _0x4fb313,
    85 * _0x4fb313,
    63 * _0x4fb313,
    93 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    68 * _0x4fb313,
    96 * _0x4fb313,
    72 * _0x4fb313,
    94 * _0x4fb313,
    80 * _0x4fb313,
    88 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    80 * _0x4fb313,
    96 * _0x4fb313,
    78 * _0x4fb313,
    107 * _0x4fb313,
    66 * _0x4fb313,
    115 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[9], _0x53bc1f[10], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(118 * _0x4fb313, 64 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    133.5 * _0x4fb313,
    57 * _0x4fb313,
    133.5 * _0x4fb313,
    57 * _0x4fb313,
    149 * _0x4fb313,
    50 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    145 * _0x4fb313,
    54 * _0x4fb313,
    154 * _0x4fb313,
    65 * _0x4fb313,
    157 * _0x4fb313,
    68 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    138.5 * _0x4fb313,
    66.5 * _0x4fb313,
    138.5 * _0x4fb313,
    66.5 * _0x4fb313,
    120 * _0x4fb313,
    65 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[8]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(118 * _0x4fb313, 65 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    129 * _0x4fb313,
    77 * _0x4fb313,
    129 * _0x4fb313,
    77 * _0x4fb313,
    140 * _0x4fb313,
    89 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    131 * _0x4fb313,
    89 * _0x4fb313,
    130 * _0x4fb313,
    92 * _0x4fb313,
    128 * _0x4fb313,
    96 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    123.5 * _0x4fb313,
    82 * _0x4fb313,
    123.5 * _0x4fb313,
    82 * _0x4fb313,
    119 * _0x4fb313,
    68 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[8]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(51 * _0x4fb313, 112 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    63 * _0x4fb313,
    108 * _0x4fb313,
    78 * _0x4fb313,
    111 * _0x4fb313,
    88 * _0x4fb313,
    112 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    98 * _0x4fb313,
    122 * _0x4fb313,
    117 * _0x4fb313,
    136 * _0x4fb313,
    125 * _0x4fb313,
    157 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    123 * _0x4fb313,
    180 * _0x4fb313,
    123 * _0x4fb313,
    185 * _0x4fb313,
    118 * _0x4fb313,
    186 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    101 * _0x4fb313,
    190 * _0x4fb313,
    89 * _0x4fb313,
    191 * _0x4fb313,
    79 * _0x4fb313,
    187 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    53 * _0x4fb313,
    165 * _0x4fb313,
    50 * _0x4fb313,
    153 * _0x4fb313,
    47 * _0x4fb313,
    144 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    46 * _0x4fb313,
    128 * _0x4fb313,
    46 * _0x4fb313,
    124 * _0x4fb313,
    50 * _0x4fb313,
    112 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[9], _0x53bc1f[10], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(50 * _0x4fb313, 114 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    81 * _0x4fb313,
    149 * _0x4fb313,
    80 * _0x4fb313,
    147 * _0x4fb313,
    80 * _0x4fb313,
    149 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    82 * _0x4fb313,
    155 * _0x4fb313,
    80 * _0x4fb313,
    182 * _0x4fb313,
    74 * _0x4fb313,
    182 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    60 * _0x4fb313,
    172 * _0x4fb313,
    52 * _0x4fb313,
    157 * _0x4fb313,
    47 * _0x4fb313,
    144 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[11], _0x53bc1f[11], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(85 * _0x4fb313, 152 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    99 * _0x4fb313,
    150 * _0x4fb313,
    109 * _0x4fb313,
    152 * _0x4fb313,
    119 * _0x4fb313,
    156 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    122 * _0x4fb313,
    163 * _0x4fb313,
    122 * _0x4fb313,
    174 * _0x4fb313,
    117 * _0x4fb313,
    182 * _0x4fb313
  );
  _0x44981f.closePath();
  _0x44981f.bezierCurveTo(
    93 * _0x4fb313,
    188 * _0x4fb313,
    82 * _0x4fb313,
    187 * _0x4fb313,
    83 * _0x4fb313,
    179 * _0x4fb313
  );
  fill_path(_0x44981f, _0x53bc1f[11], _0x53bc1f[11], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(104 * _0x4fb313, 166 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    133 * _0x4fb313,
    165 * _0x4fb313,
    142 * _0x4fb313,
    168 * _0x4fb313,
    137 * _0x4fb313,
    173 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    127 * _0x4fb313,
    177 * _0x4fb313,
    137 * _0x4fb313,
    195 * _0x4fb313,
    126 * _0x4fb313,
    196 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    112 * _0x4fb313,
    195 * _0x4fb313,
    112 * _0x4fb313,
    194 * _0x4fb313,
    109 * _0x4fb313,
    199 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    105 * _0x4fb313,
    205 * _0x4fb313,
    102 * _0x4fb313,
    195 * _0x4fb313,
    96 * _0x4fb313,
    197 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    84 * _0x4fb313,
    201 * _0x4fb313,
    88 * _0x4fb313,
    198 * _0x4fb313,
    90 * _0x4fb313,
    187 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    96 * _0x4fb313,
    171 * _0x4fb313,
    97 * _0x4fb313,
    170 * _0x4fb313,
    103 * _0x4fb313,
    167 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[9], _0x53bc1f[10], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(105 * _0x4fb313, 168 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    118 * _0x4fb313,
    172.5 * _0x4fb313,
    118 * _0x4fb313,
    172.5 * _0x4fb313,
    131 * _0x4fb313,
    177 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    133 * _0x4fb313,
    190 * _0x4fb313,
    132 * _0x4fb313,
    199 * _0x4fb313,
    116 * _0x4fb313,
    194 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    110 * _0x4fb313,
    182 * _0x4fb313,
    110 * _0x4fb313,
    182 * _0x4fb313,
    104 * _0x4fb313,
    170 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[10]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(102 * _0x4fb313, 169 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    100.5 * _0x4fb313,
    182 * _0x4fb313,
    100.5 * _0x4fb313,
    182 * _0x4fb313,
    99 * _0x4fb313,
    195 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    93.5 * _0x4fb313,
    196.5 * _0x4fb313,
    93.5 * _0x4fb313,
    196.5 * _0x4fb313,
    88 * _0x4fb313,
    198 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    94 * _0x4fb313,
    176 * _0x4fb313,
    96 * _0x4fb313,
    174 * _0x4fb313,
    101 * _0x4fb313,
    168 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[9], _0x53bc1f[9], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(64 * _0x4fb313, 107 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    64 * _0x4fb313,
    101 * _0x4fb313,
    64 * _0x4fb313,
    101 * _0x4fb313,
    64 * _0x4fb313,
    95 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    57 * _0x4fb313,
    86 * _0x4fb313,
    57 * _0x4fb313,
    84 * _0x4fb313,
    53 * _0x4fb313,
    97 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    55 * _0x4fb313,
    103.5 * _0x4fb313,
    55 * _0x4fb313,
    103.5 * _0x4fb313,
    57 * _0x4fb313,
    110 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[11], _0x53bc1f[11], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(40 * _0x4fb313, 108 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    46.5 * _0x4fb313,
    111 * _0x4fb313,
    46.5 * _0x4fb313,
    111 * _0x4fb313,
    53 * _0x4fb313,
    114 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    50.5 * _0x4fb313,
    117 * _0x4fb313,
    50.5 * _0x4fb313,
    117 * _0x4fb313,
    48 * _0x4fb313,
    120 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    40.5 * _0x4fb313,
    117.5 * _0x4fb313,
    40.5 * _0x4fb313,
    117.5 * _0x4fb313,
    33 * _0x4fb313,
    115 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    36 * _0x4fb313,
    112 * _0x4fb313,
    36 * _0x4fb313,
    112 * _0x4fb313,
    39 * _0x4fb313,
    109 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[11], _0x53bc1f[11], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(189 * _0x4fb313, 106 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    178.5 * _0x4fb313,
    110.5 * _0x4fb313,
    178.5 * _0x4fb313,
    110.5 * _0x4fb313,
    168 * _0x4fb313,
    115 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    168.5 * _0x4fb313,
    119 * _0x4fb313,
    168.5 * _0x4fb313,
    119 * _0x4fb313,
    169 * _0x4fb313,
    123 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    179 * _0x4fb313,
    124.5 * _0x4fb313,
    179 * _0x4fb313,
    124.5 * _0x4fb313,
    189 * _0x4fb313,
    126 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    182 * _0x4fb313,
    118 * _0x4fb313,
    183 * _0x4fb313,
    115 * _0x4fb313,
    188 * _0x4fb313,
    106 * _0x4fb313
  );
  _0x44981f.closePath();
  fill_path(_0x44981f, _0x53bc1f[8]);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(69 * _0x4fb313, 178 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    69 * _0x4fb313,
    141 * _0x4fb313,
    70 * _0x4fb313,
    136 * _0x4fb313,
    77 * _0x4fb313,
    137 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    88 * _0x4fb313,
    133 * _0x4fb313,
    101 * _0x4fb313,
    134 * _0x4fb313,
    108 * _0x4fb313,
    137 * _0x4fb313
  );
  fill_path(_0x44981f, undefined, _0x53bc1f[3], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(55 * _0x4fb313, 161 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    54 * _0x4fb313,
    124 * _0x4fb313,
    55 * _0x4fb313,
    119 * _0x4fb313,
    62 * _0x4fb313,
    119 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    74 * _0x4fb313,
    117 * _0x4fb313,
    85 * _0x4fb313,
    117 * _0x4fb313,
    93 * _0x4fb313,
    119 * _0x4fb313
  );
  fill_path(_0x44981f, undefined, _0x53bc1f[3], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(91 * _0x4fb313, 29 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    74 * _0x4fb313,
    33 * _0x4fb313,
    62 * _0x4fb313,
    46 * _0x4fb313,
    57 * _0x4fb313,
    54 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    57 * _0x4fb313,
    63 * _0x4fb313,
    68 * _0x4fb313,
    76 * _0x4fb313,
    77 * _0x4fb313,
    87 * _0x4fb313
  );
  fill_path(_0x44981f, undefined, _0x53bc1f[6], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(107 * _0x4fb313, 33 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    82 * _0x4fb313,
    51 * _0x4fb313,
    80 * _0x4fb313,
    52 * _0x4fb313,
    79 * _0x4fb313,
    59 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    78 * _0x4fb313,
    65 * _0x4fb313,
    93 * _0x4fb313,
    86 * _0x4fb313,
    101 * _0x4fb313,
    93 * _0x4fb313
  );
  fill_path(_0x44981f, undefined, _0x53bc1f[6], 4 * _0x4fb313);
  _0x44981f.beginPath();
  _0x44981f.lineCap = "round";
  _0x44981f.lineJoin = "round";
  _0x44981f.moveTo(130 * _0x4fb313, 98 * _0x4fb313);
  _0x44981f.bezierCurveTo(
    126.5 * _0x4fb313,
    103 * _0x4fb313,
    126.5 * _0x4fb313,
    103 * _0x4fb313,
    123 * _0x4fb313,
    108 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    133.5 * _0x4fb313,
    107 * _0x4fb313,
    133.5 * _0x4fb313,
    107 * _0x4fb313,
    144 * _0x4fb313,
    106 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    138.5 * _0x4fb313,
    110 * _0x4fb313,
    138.5 * _0x4fb313,
    110 * _0x4fb313,
    133 * _0x4fb313,
    114 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    142 * _0x4fb313,
    114 * _0x4fb313,
    142 * _0x4fb313,
    114 * _0x4fb313,
    151 * _0x4fb313,
    114 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    146.5 * _0x4fb313,
    119.5 * _0x4fb313,
    146.5 * _0x4fb313,
    119.5 * _0x4fb313,
    142 * _0x4fb313,
    125 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    146.5 * _0x4fb313,
    127 * _0x4fb313,
    146.5 * _0x4fb313,
    127 * _0x4fb313,
    151 * _0x4fb313,
    129 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    147.5 * _0x4fb313,
    132 * _0x4fb313,
    147.5 * _0x4fb313,
    132 * _0x4fb313,
    144 * _0x4fb313,
    135 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    148 * _0x4fb313,
    137 * _0x4fb313,
    148 * _0x4fb313,
    137 * _0x4fb313,
    152 * _0x4fb313,
    139 * _0x4fb313
  );
  _0x44981f.bezierCurveTo(
    149 * _0x4fb313,
    142.5 * _0x4fb313,
    149 * _0x4fb313,
    142.5 * _0x4fb313,
    146 * _0x4fb313,
    146 * _0x4fb313
  );
  fill_path(_0x44981f, undefined, _0x53bc1f[3], 4 * _0x4fb313);
  return _0x29e20c;
}
function create_ferrero_rocher(_0x29f510, _0x12a332, _0x3369a7) {
  var _0x5dc807 = document.createElement("canvas");
  var _0x4b6a16 = _0x5dc807.getContext("2d");
  _0x5dc807.width = 118 * _0x29f510;
  _0x5dc807.height = 114 * _0x29f510;
  _0x4b6a16.translate(0, 10 * _0x29f510);
  circle(
    _0x4b6a16,
    42 * _0x29f510,
    43 * _0x29f510,
    24.758836806279895 * _0x29f510
  );
  fill_path(_0x4b6a16, _0x3369a7[0]);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(65 * _0x29f510, 90 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    72 * _0x29f510,
    91 * _0x29f510,
    75 * _0x29f510,
    92 * _0x29f510,
    71 * _0x29f510,
    96 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    65 * _0x29f510,
    98 * _0x29f510,
    65 * _0x29f510,
    94 * _0x29f510,
    65 * _0x29f510,
    91 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[0]);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(87 * _0x29f510, 45 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    108 * _0x29f510,
    59 * _0x29f510,
    100 * _0x29f510,
    86 * _0x29f510,
    85 * _0x29f510,
    91 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    80 * _0x29f510,
    96 * _0x29f510,
    68 * _0x29f510,
    95 * _0x29f510,
    58 * _0x29f510,
    87 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    53 * _0x29f510,
    80 * _0x29f510,
    61 * _0x29f510,
    64 * _0x29f510,
    66 * _0x29f510,
    58 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    73 * _0x29f510,
    48 * _0x29f510,
    78 * _0x29f510,
    44 * _0x29f510,
    87 * _0x29f510,
    45 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[0]);
  _0x4b6a16.translate(0, -10 * _0x29f510);
  circle(
    _0x4b6a16,
    42 * _0x29f510,
    43 * _0x29f510,
    24.758836806279895 * _0x29f510
  );
  fill_path(_0x4b6a16, _0x3369a7[1], _0x3369a7[2], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(65 * _0x29f510, 90 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    72 * _0x29f510,
    91 * _0x29f510,
    75 * _0x29f510,
    92 * _0x29f510,
    71 * _0x29f510,
    96 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    65 * _0x29f510,
    98 * _0x29f510,
    65 * _0x29f510,
    94 * _0x29f510,
    65 * _0x29f510,
    91 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[1], _0x3369a7[2], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(87 * _0x29f510, 45 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    108 * _0x29f510,
    59 * _0x29f510,
    100 * _0x29f510,
    86 * _0x29f510,
    85 * _0x29f510,
    91 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    80 * _0x29f510,
    96 * _0x29f510,
    68 * _0x29f510,
    95 * _0x29f510,
    58 * _0x29f510,
    87 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    53 * _0x29f510,
    80 * _0x29f510,
    61 * _0x29f510,
    64 * _0x29f510,
    66 * _0x29f510,
    58 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    73 * _0x29f510,
    48 * _0x29f510,
    78 * _0x29f510,
    44 * _0x29f510,
    87 * _0x29f510,
    45 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[1], _0x3369a7[2], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(52 * _0x29f510, 16 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    55 * _0x29f510,
    19 * _0x29f510,
    54 * _0x29f510,
    20 * _0x29f510,
    55 * _0x29f510,
    22 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    52 * _0x29f510,
    24.5 * _0x29f510,
    52 * _0x29f510,
    24.5 * _0x29f510,
    49 * _0x29f510,
    27 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    45 * _0x29f510,
    25 * _0x29f510,
    45 * _0x29f510,
    25 * _0x29f510,
    41 * _0x29f510,
    23 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    45 * _0x29f510,
    19 * _0x29f510,
    48 * _0x29f510,
    16 * _0x29f510,
    52 * _0x29f510,
    16 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(62 * _0x29f510, 30 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    66 * _0x29f510,
    29 * _0x29f510,
    64 * _0x29f510,
    30 * _0x29f510,
    66 * _0x29f510,
    30 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    67 * _0x29f510,
    31 * _0x29f510,
    67 * _0x29f510,
    31 * _0x29f510,
    68 * _0x29f510,
    32 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    66.5 * _0x29f510,
    33.5 * _0x29f510,
    66.5 * _0x29f510,
    33.5 * _0x29f510,
    65 * _0x29f510,
    35 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    63.5 * _0x29f510,
    32.5 * _0x29f510,
    63.5 * _0x29f510,
    32.5 * _0x29f510,
    62 * _0x29f510,
    30 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(29 * _0x29f510, 21 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    31 * _0x29f510,
    22 * _0x29f510,
    31 * _0x29f510,
    26 * _0x29f510,
    29 * _0x29f510,
    29 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    26 * _0x29f510,
    28.5 * _0x29f510,
    26 * _0x29f510,
    28.5 * _0x29f510,
    23 * _0x29f510,
    28 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    23 * _0x29f510,
    26.5 * _0x29f510,
    23 * _0x29f510,
    26.5 * _0x29f510,
    23 * _0x29f510,
    25 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    25 * _0x29f510,
    23 * _0x29f510,
    25 * _0x29f510,
    23 * _0x29f510,
    27 * _0x29f510,
    21 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(18 * _0x29f510, 36 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    23 * _0x29f510,
    36 * _0x29f510,
    24 * _0x29f510,
    42 * _0x29f510,
    19 * _0x29f510,
    46 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    12 * _0x29f510,
    39 * _0x29f510,
    15 * _0x29f510,
    38 * _0x29f510,
    18 * _0x29f510,
    37 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(30 * _0x29f510, 34 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    35 * _0x29f510,
    36 * _0x29f510,
    36 * _0x29f510,
    39 * _0x29f510,
    32 * _0x29f510,
    45 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    25 * _0x29f510,
    46 * _0x29f510,
    25 * _0x29f510,
    44 * _0x29f510,
    30 * _0x29f510,
    34 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(59 * _0x29f510, 35 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    58 * _0x29f510,
    27 * _0x29f510,
    57 * _0x29f510,
    27 * _0x29f510,
    52 * _0x29f510,
    31 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    50 * _0x29f510,
    36 * _0x29f510,
    53 * _0x29f510,
    38 * _0x29f510,
    58 * _0x29f510,
    36 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(63 * _0x29f510, 46 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    64.5 * _0x29f510,
    46.5 * _0x29f510,
    64.5 * _0x29f510,
    46.5 * _0x29f510,
    66 * _0x29f510,
    47 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    70 * _0x29f510,
    50 * _0x29f510,
    70 * _0x29f510,
    53 * _0x29f510,
    61 * _0x29f510,
    55 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    62 * _0x29f510,
    50.5 * _0x29f510,
    62 * _0x29f510,
    50.5 * _0x29f510,
    63 * _0x29f510,
    46 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(41 * _0x29f510, 42 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    47 * _0x29f510,
    41 * _0x29f510,
    53 * _0x29f510,
    47 * _0x29f510,
    46 * _0x29f510,
    51 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    38 * _0x29f510,
    49 * _0x29f510,
    39 * _0x29f510,
    46 * _0x29f510,
    41 * _0x29f510,
    43 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(44 * _0x29f510, 57 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    54 * _0x29f510,
    57 * _0x29f510,
    54 * _0x29f510,
    58 * _0x29f510,
    55 * _0x29f510,
    61 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    54 * _0x29f510,
    63 * _0x29f510,
    52 * _0x29f510,
    64 * _0x29f510,
    48 * _0x29f510,
    65 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(20 * _0x29f510, 52 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    25 * _0x29f510,
    51 * _0x29f510,
    27 * _0x29f510,
    50 * _0x29f510,
    28 * _0x29f510,
    54 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    27 * _0x29f510,
    58 * _0x29f510,
    24 * _0x29f510,
    58 * _0x29f510,
    22 * _0x29f510,
    58 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    21 * _0x29f510,
    55.5 * _0x29f510,
    21 * _0x29f510,
    55.5 * _0x29f510,
    20 * _0x29f510,
    53 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(30 * _0x29f510, 61 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    37 * _0x29f510,
    61 * _0x29f510,
    39 * _0x29f510,
    63 * _0x29f510,
    39 * _0x29f510,
    68 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    36 * _0x29f510,
    68.5 * _0x29f510,
    36 * _0x29f510,
    68.5 * _0x29f510,
    33 * _0x29f510,
    69 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    30.5 * _0x29f510,
    67.5 * _0x29f510,
    30.5 * _0x29f510,
    67.5 * _0x29f510,
    28 * _0x29f510,
    66 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(88 * _0x29f510, 45 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    90 * _0x29f510,
    46.5 * _0x29f510,
    90 * _0x29f510,
    46.5 * _0x29f510,
    92 * _0x29f510,
    48 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    92 * _0x29f510,
    50 * _0x29f510,
    92 * _0x29f510,
    50 * _0x29f510,
    92 * _0x29f510,
    52 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(96 * _0x29f510, 53 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    97.5 * _0x29f510,
    55 * _0x29f510,
    97.5 * _0x29f510,
    55 * _0x29f510,
    99 * _0x29f510,
    57 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    97.5 * _0x29f510,
    59.5 * _0x29f510,
    97.5 * _0x29f510,
    59.5 * _0x29f510,
    96 * _0x29f510,
    62 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    93.5 * _0x29f510,
    60.5 * _0x29f510,
    93.5 * _0x29f510,
    60.5 * _0x29f510,
    91 * _0x29f510,
    59 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    91.5 * _0x29f510,
    57 * _0x29f510,
    91.5 * _0x29f510,
    57 * _0x29f510,
    92 * _0x29f510,
    55 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(92 * _0x29f510, 71 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    94.5 * _0x29f510,
    70.5 * _0x29f510,
    94.5 * _0x29f510,
    70.5 * _0x29f510,
    97 * _0x29f510,
    70 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    98.5 * _0x29f510,
    72.5 * _0x29f510,
    98.5 * _0x29f510,
    72.5 * _0x29f510,
    100 * _0x29f510,
    75 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    97 * _0x29f510,
    76.5 * _0x29f510,
    97 * _0x29f510,
    76.5 * _0x29f510,
    94 * _0x29f510,
    78 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(95 * _0x29f510, 82 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    96 * _0x29f510,
    83 * _0x29f510,
    96 * _0x29f510,
    83 * _0x29f510,
    97 * _0x29f510,
    84 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    97 * _0x29f510,
    85.5 * _0x29f510,
    97 * _0x29f510,
    85.5 * _0x29f510,
    97 * _0x29f510,
    87 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    93.5 * _0x29f510,
    87.5 * _0x29f510,
    93.5 * _0x29f510,
    87.5 * _0x29f510,
    90 * _0x29f510,
    88 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(86 * _0x29f510, 72 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    89 * _0x29f510,
    76 * _0x29f510,
    88 * _0x29f510,
    81 * _0x29f510,
    85 * _0x29f510,
    82 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    80 * _0x29f510,
    80 * _0x29f510,
    82 * _0x29f510,
    78 * _0x29f510,
    85 * _0x29f510,
    72 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(80 * _0x29f510, 86 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    84 * _0x29f510,
    88 * _0x29f510,
    86 * _0x29f510,
    88 * _0x29f510,
    85 * _0x29f510,
    93 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    80 * _0x29f510,
    96 * _0x29f510,
    79 * _0x29f510,
    96 * _0x29f510,
    76 * _0x29f510,
    91 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[3], _0x3369a7[4], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(84 * _0x29f510, 46 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    93 * _0x29f510,
    51 * _0x29f510,
    91 * _0x29f510,
    62 * _0x29f510,
    80 * _0x29f510,
    78 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    74 * _0x29f510,
    86 * _0x29f510,
    66 * _0x29f510,
    90 * _0x29f510,
    60 * _0x29f510,
    86 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    55 * _0x29f510,
    79 * _0x29f510,
    57 * _0x29f510,
    73 * _0x29f510,
    67 * _0x29f510,
    57 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    71 * _0x29f510,
    51 * _0x29f510,
    79 * _0x29f510,
    44 * _0x29f510,
    84 * _0x29f510,
    46 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[5], _0x3369a7[6], 5 * _0x29f510);
  _0x4b6a16.beginPath();
  _0x4b6a16.lineCap = "round";
  _0x4b6a16.lineJoin = "round";
  _0x4b6a16.moveTo(76 * _0x29f510, 60 * _0x29f510);
  _0x4b6a16.bezierCurveTo(
    80 * _0x29f510,
    66 * _0x29f510,
    75 * _0x29f510,
    74 * _0x29f510,
    68 * _0x29f510,
    74 * _0x29f510
  );
  _0x4b6a16.bezierCurveTo(
    60 * _0x29f510,
    64 * _0x29f510,
    68 * _0x29f510,
    59 * _0x29f510,
    76 * _0x29f510,
    59 * _0x29f510
  );
  _0x4b6a16.closePath();
  fill_path(_0x4b6a16, _0x3369a7[7], _0x3369a7[8], 5 * _0x29f510);
  return _0x5dc807;
}
function create_seed(_0x3058ed, _0xe6bd94, _0x3d0aab) {
  var _0xeebeb5 = document.createElement("canvas");
  var _0x4890c1 = _0xeebeb5.getContext("2d");
  var _0x58ad9f = _0x3058ed * 70;
  var _0x47c2a8 = _0x3058ed * 90;
  var _0x3c306a = _0x3058ed * 4;
  var _0x21f4d5 = _0x3058ed * 5;
  var _0x1577d7 = _0x58ad9f / 2;
  var _0x19df7c = _0x47c2a8 / 2;
  var _0x4e5a1b = _0x3058ed * 10;
  var _0x3df8a7 = _0x3058ed * 100;
  var _0x3fef61 = _0x3058ed * 100;
  var _0x172c27 = _0x3df8a7 / 2;
  var _0x5d3bbd = _0x3fef61 / 2;
  _0xeebeb5.width = _0x58ad9f;
  _0xeebeb5.height = _0x47c2a8;
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed + _0x21f4d5);
  _0x4890c1.globalAlpha = 0.5;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    130 * _0x3058ed,
    79 * _0x3058ed,
    132 * _0x3058ed,
    86 * _0x3058ed,
    130 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    128 * _0x3058ed,
    100 * _0x3058ed,
    121 * _0x3058ed,
    107 * _0x3058ed,
    120 * _0x3058ed,
    107 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    120 * _0x3058ed,
    107 * _0x3058ed,
    115 * _0x3058ed,
    98 * _0x3058ed,
    115 * _0x3058ed,
    92 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    115 * _0x3058ed,
    86 * _0x3058ed,
    119 * _0x3058ed,
    76 * _0x3058ed,
    127 * _0x3058ed,
    73 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, "#0d1b1c");
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed + _0x21f4d5);
  _0x4890c1.globalAlpha = 0.5;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    112 * _0x3058ed,
    109 * _0x3058ed,
    111 * _0x3058ed,
    100 * _0x3058ed,
    106 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    104 * _0x3058ed,
    90 * _0x3058ed,
    91 * _0x3058ed,
    87 * _0x3058ed,
    91 * _0x3058ed,
    87 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    91 * _0x3058ed,
    88 * _0x3058ed,
    91 * _0x3058ed,
    96 * _0x3058ed,
    94 * _0x3058ed,
    102 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    97 * _0x3058ed,
    108 * _0x3058ed,
    106 * _0x3058ed,
    112 * _0x3058ed,
    113 * _0x3058ed,
    112 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, "#0d1b1c");
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed + _0x21f4d5);
  _0x4890c1.globalAlpha = 0.5;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    108 * _0x3058ed,
    120 * _0x3058ed,
    100 * _0x3058ed,
    119 * _0x3058ed,
    91 * _0x3058ed,
    127 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    83 * _0x3058ed,
    134 * _0x3058ed,
    82 * _0x3058ed,
    146 * _0x3058ed,
    83 * _0x3058ed,
    146 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    84 * _0x3058ed,
    146 * _0x3058ed,
    98 * _0x3058ed,
    142 * _0x3058ed,
    103 * _0x3058ed,
    138 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    107 * _0x3058ed,
    135 * _0x3058ed,
    110 * _0x3058ed,
    130 * _0x3058ed,
    112 * _0x3058ed,
    121 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, "#0d1b1c");
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(3 * _0x3058ed, -93 * _0x3058ed + _0x21f4d5);
  _0x4890c1.rotate(Math.PI / 5);
  _0x4890c1.globalAlpha = 0.5;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    130 * _0x3058ed,
    79 * _0x3058ed,
    132 * _0x3058ed,
    86 * _0x3058ed,
    130 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    128 * _0x3058ed,
    100 * _0x3058ed,
    121 * _0x3058ed,
    107 * _0x3058ed,
    120 * _0x3058ed,
    107 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    120 * _0x3058ed,
    107 * _0x3058ed,
    115 * _0x3058ed,
    98 * _0x3058ed,
    115 * _0x3058ed,
    92 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    115 * _0x3058ed,
    86 * _0x3058ed,
    119 * _0x3058ed,
    76 * _0x3058ed,
    127 * _0x3058ed,
    73 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, "#0d1b1c");
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed);
  _0x4890c1.globalAlpha = 1;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    130 * _0x3058ed,
    79 * _0x3058ed,
    132 * _0x3058ed,
    86 * _0x3058ed,
    130 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    128 * _0x3058ed,
    100 * _0x3058ed,
    121 * _0x3058ed,
    107 * _0x3058ed,
    120 * _0x3058ed,
    107 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    120 * _0x3058ed,
    107 * _0x3058ed,
    115 * _0x3058ed,
    98 * _0x3058ed,
    115 * _0x3058ed,
    92 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    115 * _0x3058ed,
    86 * _0x3058ed,
    119 * _0x3058ed,
    76 * _0x3058ed,
    127 * _0x3058ed,
    73 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, _0x3d0aab[0], _0x3d0aab[1], _0x3c306a);
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed);
  _0x4890c1.globalAlpha = 1;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    112 * _0x3058ed,
    109 * _0x3058ed,
    111 * _0x3058ed,
    100 * _0x3058ed,
    106 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    104 * _0x3058ed,
    90 * _0x3058ed,
    91 * _0x3058ed,
    87 * _0x3058ed,
    91 * _0x3058ed,
    87 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    91 * _0x3058ed,
    88 * _0x3058ed,
    91 * _0x3058ed,
    96 * _0x3058ed,
    94 * _0x3058ed,
    102 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    97 * _0x3058ed,
    108 * _0x3058ed,
    106 * _0x3058ed,
    112 * _0x3058ed,
    113 * _0x3058ed,
    112 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, _0x3d0aab[0], _0x3d0aab[1], _0x3c306a);
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(-80 * _0x3058ed, -70 * _0x3058ed);
  _0x4890c1.globalAlpha = 1;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    108 * _0x3058ed,
    120 * _0x3058ed,
    100 * _0x3058ed,
    119 * _0x3058ed,
    91 * _0x3058ed,
    127 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    83 * _0x3058ed,
    134 * _0x3058ed,
    82 * _0x3058ed,
    146 * _0x3058ed,
    83 * _0x3058ed,
    146 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    84 * _0x3058ed,
    146 * _0x3058ed,
    98 * _0x3058ed,
    142 * _0x3058ed,
    103 * _0x3058ed,
    138 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    107 * _0x3058ed,
    135 * _0x3058ed,
    110 * _0x3058ed,
    130 * _0x3058ed,
    112 * _0x3058ed,
    121 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, _0x3d0aab[0], _0x3d0aab[1], _0x3c306a);
  _0x4890c1.restore();
  _0x4890c1.save();
  _0x4890c1.translate(3 * _0x3058ed, -93 * _0x3058ed);
  _0x4890c1.rotate(Math.PI / 5);
  _0x4890c1.globalAlpha = 1;
  _0x4890c1.beginPath();
  _0x4890c1.bezierCurveTo(
    130 * _0x3058ed,
    79 * _0x3058ed,
    132 * _0x3058ed,
    86 * _0x3058ed,
    130 * _0x3058ed,
    93 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    128 * _0x3058ed,
    100 * _0x3058ed,
    121 * _0x3058ed,
    107 * _0x3058ed,
    120 * _0x3058ed,
    107 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    120 * _0x3058ed,
    107 * _0x3058ed,
    115 * _0x3058ed,
    98 * _0x3058ed,
    115 * _0x3058ed,
    92 * _0x3058ed
  );
  _0x4890c1.bezierCurveTo(
    115 * _0x3058ed,
    86 * _0x3058ed,
    119 * _0x3058ed,
    76 * _0x3058ed,
    127 * _0x3058ed,
    73 * _0x3058ed
  );
  _0x4890c1.closePath();
  fill_path(_0x4890c1, _0x3d0aab[0], _0x3d0aab[1], _0x3c306a);
  _0x4890c1.restore();
  return _0xeebeb5;
}
function create_info_box(_0x2dad04) {
  var _0xfa3ab1 = document.createElement("canvas");
  var _0x2c14f9 = _0xfa3ab1.getContext("2d");
  var _0x54c774 = LANG[_0x2dad04];
  _0x2c14f9.font = "20px Baloo Paaji";
  var _0x49e6ee = 0;
  if (_0x54c774.length >= 1) {
    _0x49e6ee = Math.max(0, _0x2c14f9.measureText(_0x54c774[0]).width);
  }
  _0x2c14f9.font = "17px Baloo Paaji";
  if (_0x54c774.length >= 2) {
    _0x49e6ee = Math.max(_0x49e6ee, _0x2c14f9.measureText(_0x54c774[1]).width);
  }
  _0x2c14f9.font = "14px Baloo Paaji";
  for (i = 2; i < _0x54c774.length; i++) {
    _0x49e6ee = Math.max(_0x49e6ee, _0x2c14f9.measureText(_0x54c774[i]).width);
  }
  var _0x32944b = _0x49e6ee + 35;
  var _0x502867 = 0;
  if (_0x54c774.length === 1) {
    _0x502867 = 55;
  } else {
    if (_0x54c774.length === 2) {
      _0x502867 = 85;
    } else {
      _0x502867 = (_0x54c774.length - 2) * 26 + 85;
    }
  }
  _0xfa3ab1.width = _0x32944b;
  _0xfa3ab1.height = _0x502867;
  round_rect(_0x2c14f9, 0, 0, _0x32944b, _0x502867, 10);
  _0x2c14f9.fillStyle = "#000000";
  _0x2c14f9.globalAlpha = 0.5;
  _0x2c14f9.fill();
  _0x54c774.length >= 1 &&
    ((_0x2c14f9.textBaseline = "middle"),
    (_0x2c14f9.font = "20px Baloo Paaji"),
    (_0x2c14f9.globalAlpha = 1),
    (_0x2c14f9.fillStyle = "#e2c340"),
    _0x2c14f9.fillText(_0x54c774[0], 15, 28));
  _0x54c774.length >= 2 &&
    ((_0x2c14f9.font = "17px Baloo Paaji"),
    (_0x2c14f9.fillStyle = "#ffffff"),
    _0x2c14f9.fillText(_0x54c774[1], 15, 55),
    (_0x502867 = 55));
  if (_0x54c774.length >= 3) {
    _0x2c14f9.font = "14px Baloo Paaji";
    _0x2c14f9.globalAlpha = 0.7;
    for (i = 2; i < _0x54c774.length; i++) {
      _0x2c14f9.fillText(_0x54c774[i], 15, _0x502867 + 28);
      _0x502867 += 26;
    }
  }
  return _0xfa3ab1;
}
function create_welcome_text(_0x264f7c) {
  var _0x175021 = document.createElement("canvas");
  var _0x547edd = _0x175021.getContext("2d");
  _0x547edd.lineJoin = "round";
  while (_0x264f7c.indexOf("\\n") !== -1) {
    _0x264f7c = _0x264f7c.replace("\\n", "\n");
  }
  _0x264f7c = _0x264f7c.split("\n");
  color = [];
  var _0x115660 = _0x264f7c.length * 18 + 10;
  var _0x3b818a = 0;
  _0x547edd.font = 14 + "px Baloo Paaji";
  for (var _0x224db9 = 0; _0x224db9 < _0x264f7c.length; _0x224db9++) {
    if (_0x264f7c[_0x224db9].charAt(0) === "#") {
      color[_0x224db9] = _0x264f7c[_0x224db9].substring(0, 7);
      _0x264f7c[_0x224db9] = _0x264f7c[_0x224db9].substring(8);
    } else {
      color[_0x224db9] = "#FFFFFF";
    }
    _0x3b818a = Math.max(
      _0x547edd.measureText(_0x264f7c[_0x224db9]).width + 16,
      _0x3b818a
    );
  }
  _0x175021.height = _0x115660;
  _0x175021.width = _0x3b818a;
  for (var _0x224db9 = 0; _0x224db9 < _0x264f7c.length; _0x224db9++) {
    var _0x5205be = create_text(
      1,
      _0x264f7c[_0x224db9],
      14,
      color[_0x224db9],
      null,
      null,
      null,
      null,
      null,
      "#000",
      6
    );
    _0x547edd.drawImage(_0x5205be, 8, _0x224db9 * 18 + 5);
  }
  return _0x175021;
}
function create_text(
  _0x21127a,
  _0x2b7ad3,
  _0x1e37d7,
  _0x54737b,
  _0x47aec9,
  _0x1de0ea,
  _0x38245c,
  _0x10b151,
  _0x7a55ff,
  _0x3a4c73,
  _0xd4dd3f
) {
  if (_0xd4dd3f === undefined) {
    _0xd4dd3f = 0;
  }
  var _0x13a78a = document.createElement("canvas");
  var _0x401489 = _0x13a78a.getContext("2d");
  _0x1de0ea = !_0x1de0ea ? 0 : _0x1de0ea * _0x21127a;
  var _0x518b14 = Math.floor(_0x21127a * _0x1e37d7);
  _0x401489.font = _0x518b14 + "px Baloo Paaji";
  _0x401489.lineJoin = "round";
  _0x10b151 = _0x10b151 * _0x21127a;
  var _0x12f763 = _0x38245c ? _0x10b151 * 2 : 0;
  if (_0x7a55ff) {
    var _0x515fee = Math.min(
      _0x401489.measureText(_0x2b7ad3).width + 2 * _0x21127a + _0x12f763,
      _0x7a55ff
    );
  } else {
    var _0x515fee =
      _0x401489.measureText(_0x2b7ad3).width +
      2 * _0x21127a +
      _0x12f763 +
      _0xd4dd3f * _0x21127a * 2;
  }
  var _0x518b14 = (_0x518b14 + _0x1de0ea + _0xd4dd3f) * _0x21127a + _0x12f763;
  _0x13a78a.width = _0x515fee;
  _0x13a78a.height = _0x518b14;
  _0x38245c &&
    ((_0x401489.fillStyle = _0x38245c),
    round_rect(_0x401489, 0, 0, _0x515fee, _0x518b14, _0x10b151 * 2),
    _0x401489.fill(),
    _0x401489.translate(_0x10b151, _0x10b151));
  _0x401489.textBaseline = "middle";
  _0x401489.font = _0x1e37d7 + "px Baloo Paaji";
  _0x401489.lineJoin = "round";
  _0x47aec9 &&
    (_0x401489.beginPath(),
    (_0x401489.fillStyle = _0x47aec9),
    _0x401489.fillText(
      _0x2b7ad3,
      0,
      _0x518b14 / 2 + _0x1de0ea - _0x12f763 / 2,
      _0x515fee
    ));
  _0x401489.beginPath();
  _0x3a4c73 &&
    ((_0x401489.strokeStyle = _0x3a4c73),
    (_0x401489.lineWidth = _0xd4dd3f),
    _0x401489.strokeText(
      _0x2b7ad3,
      _0xd4dd3f,
      (_0x518b14 - _0x12f763) / 2,
      _0x515fee
    ));
  _0x401489.fillStyle = _0x54737b;
  _0x401489.fillText(
    _0x2b7ad3,
    _0xd4dd3f,
    (_0x518b14 - _0x12f763) / 2,
    _0x515fee
  );
  return _0x13a78a;
}
function create_stone(_0x47db02, _0x182603, _0x3eb672) {
  var _0x2f454d = document.createElement("canvas");
  var _0x3eb185 = _0x2f454d.getContext("2d");
  var _0x1c02ae = _0x47db02 * 220;
  var _0x5f3623 = _0x47db02 * 230;
  var _0x55bf98 = _0x47db02 * 100;
  var _0x80d3a4 = _0x55bf98 / 4;
  var _0x393f96 = _0x47db02 * 20;
  _0x2f454d.width = _0x1c02ae;
  _0x2f454d.height = _0x5f3623;
  _0x3eb185.translate(_0x1c02ae / 2, _0x5f3623 / 2 + _0x393f96);
  _0x3eb185.globalAlpha = 0.5;
  round_regular_polygon(_0x3eb185, 7, _0x55bf98, _0x80d3a4);
  fill_path(_0x3eb185, _0x3eb672[0]);
  _0x3eb185.globalAlpha = 1;
  _0x3eb185.translate(0, -_0x393f96);
  round_regular_polygon(_0x3eb185, 7, _0x55bf98, _0x80d3a4);
  fill_path(_0x3eb185, _0x3eb672[1]);
  round_regular_polygon(_0x3eb185, 6, _0x55bf98 * 0.65, _0x80d3a4 * 0.65);
  fill_path(_0x3eb185, _0x3eb672[2]);
  return _0x2f454d;
}
function create_cave_stone(_0x1853ae, _0x5cb90e, _0x2cf15a, _0x36e6f2) {
  var _0x2bb873 = document.createElement("canvas");
  var _0x1511da = _0x2bb873.getContext("2d");
  var _0x4b82e2 = _0x1853ae * 220;
  var _0x4959c9 = _0x1853ae * 220;
  var _0x495995 = _0x1853ae * 100;
  var _0x227708 = _0x495995 / 4;
  var _0xb265f9 = _0x1853ae * 20;
  _0x2bb873.width = _0x4b82e2;
  _0x2bb873.height = _0x4959c9;
  _0x1511da.translate(_0x4b82e2 / 2, _0x4959c9 / 2);
  _0x1511da.globalAlpha = _0x5cb90e ? 0.5 : 1;
  if (!_0x5cb90e) {
    _0x1511da.translate(0 * _0x1853ae, -8 * _0x1853ae);
  }
  round_regular_polygon(_0x1511da, 7, _0x495995, _0x227708);
  _0x5cb90e
    ? fill_path(_0x1511da, _0x2cf15a[0])
    : fill_path(_0x1511da, _0x2cf15a[1]);
  _0x1511da.globalAlpha = 1;
  if (_0x36e6f2 == 0) {
    round_regular_polygon(_0x1511da, 6, _0x495995 * 0.65, _0x227708 * 0.65);
    fill_path(_0x1511da, _0x2cf15a[2]);
  } else {
    _0x36e6f2 == 1 &&
      (_0x1511da.translate(20 * _0x1853ae, 20 * _0x1853ae),
      round_regular_polygon(_0x1511da, 6, _0x495995 * 0.45, _0x227708 * 0.4),
      fill_path(_0x1511da, _0x2cf15a[2]));
  }
  return _0x2bb873;
}
function create_gold(_0x37d128, _0x598719, _0x5c5f7e) {
  var _0x10deb9 = document.createElement("canvas");
  var _0x5e876b = _0x10deb9.getContext("2d");
  var _0xb02d00 = _0x37d128 * 120;
  var _0x3c1647 = _0x37d128 * 150;
  var _0x199eb4 = _0x37d128 * 60;
  var _0xf7e715 = _0x199eb4 / 4;
  var _0x2aa903 = _0x37d128 * 15;
  _0x10deb9.width = _0xb02d00;
  _0x10deb9.height = _0x3c1647;
  _0x5e876b.save();
  _0x5e876b.translate(
    _0xb02d00 / 2 + 0 * _0x37d128,
    _0x3c1647 / 2 + 0 * _0x37d128 + _0x2aa903
  );
  _0x5e876b.rotate(Math.PI / 3);
  _0x5e876b.globalAlpha = 0.5;
  round_regular_polygon(_0x5e876b, 8, _0x199eb4, _0xf7e715);
  fill_path(_0x5e876b, _0x5c5f7e[0]);
  _0x5e876b.restore();
  _0x5e876b.save();
  _0x5e876b.translate(
    _0xb02d00 / 2 - 11 * _0x37d128,
    _0x3c1647 / 2 + 12 * _0x37d128
  );
  _0x5e876b.globalAlpha = 1;
  _0x5e876b.rotate(Math.PI / 3);
  _0x5e876b.translate(0, -_0x2aa903);
  round_regular_polygon(_0x5e876b, 8, _0x199eb4, _0xf7e715);
  fill_path(_0x5e876b, _0x5c5f7e[1]);
  _0x5e876b.restore();
  _0x5e876b.save();
  _0x5e876b.translate(
    _0xb02d00 / 2 - 9 * _0x37d128,
    _0x3c1647 / 2 - 12 * _0x37d128
  );
  _0x5e876b.rotate(Math.PI / 2.8);
  round_regular_polygon(_0x5e876b, 5, _0x199eb4 * 0.5, _0xf7e715 * 0.4);
  fill_path(_0x5e876b, _0x5c5f7e[2]);
  _0x5e876b.restore();
  _0x5e876b.save();
  _0x5e876b.translate(
    _0xb02d00 / 2 + 19 * _0x37d128,
    _0x3c1647 / 2 + 5 * _0x37d128
  );
  _0x5e876b.rotate(Math.PI / 1);
  round_regular_polygon(_0x5e876b, 5, _0x199eb4 * 0.5, _0xf7e715 * 0.4);
  fill_path(_0x5e876b, _0x5c5f7e[2]);
  _0x5e876b.restore();
  _0x5e876b.save();
  _0x5e876b.translate(
    _0xb02d00 / 2 - 8 * _0x37d128,
    _0x3c1647 / 2 + 20 * _0x37d128
  );
  _0x5e876b.rotate(Math.PI / 2.25);
  round_regular_polygon(_0x5e876b, 5, _0x199eb4 * 0.5, _0xf7e715 * 0.4);
  fill_path(_0x5e876b, _0x5c5f7e[2]);
  _0x5e876b.restore();
  return _0x10deb9;
}
function create_diamond(_0x4a7c7f, _0x40de63, _0x2d3074) {
  var _0xe2e738 = document.createElement("canvas");
  var _0x233190 = _0xe2e738.getContext("2d");
  var _0x572c57 = _0x4a7c7f * 180;
  var _0x49463c = _0x4a7c7f * 210;
  var _0x1158b = _0x4a7c7f * 60;
  var _0x4d226f = _0x1158b / 4;
  var _0xa6d488 = _0x4a7c7f * 20;
  _0xe2e738.width = _0x572c57;
  _0xe2e738.height = _0x49463c;
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 - 0 * _0x4a7c7f,
    _0x49463c / 2 - 35 * _0x4a7c7f + _0xa6d488
  );
  _0x233190.rotate(Math.PI / -1.8);
  _0x233190.globalAlpha = 0.5;
  _0x233190.translate(0 * _0x4a7c7f, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[0]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 + 10 * _0x4a7c7f,
    _0x49463c / 2 + 15 * _0x4a7c7f + _0xa6d488
  );
  _0x233190.rotate(Math.PI / 2);
  _0x233190.globalAlpha = 0.5;
  _0x233190.translate(0 * _0x4a7c7f, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[0]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 - 50 * _0x4a7c7f,
    _0x49463c / 2 + 40 * _0x4a7c7f + _0xa6d488
  );
  _0x233190.rotate(Math.PI / 3);
  _0x233190.globalAlpha = 0.5;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[0]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 - 0 * _0x4a7c7f,
    _0x49463c / 2 - 35 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / -1.8);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0 * _0x4a7c7f, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[1]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 + 10 * _0x4a7c7f,
    _0x49463c / 2 + 15 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / 2);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[1]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 - 50 * _0x4a7c7f,
    _0x49463c / 2 + 40 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / 3);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[1]);
  _0x233190.restore();
  var _0x1158b = _0x4a7c7f * 30;
  var _0x4d226f = _0x1158b / 4;
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 + 5 * _0x4a7c7f,
    _0x49463c / 2 - 20 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / -1.8);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[2]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 + 0 * _0x4a7c7f,
    _0x49463c / 2 + 10 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / 2);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[2]);
  _0x233190.restore();
  _0x233190.save();
  _0x233190.translate(
    _0x572c57 / 2 - 45 * _0x4a7c7f,
    _0x49463c / 2 + 35 * _0x4a7c7f
  );
  _0x233190.rotate(Math.PI / 3);
  _0x233190.globalAlpha = 1;
  _0x233190.translate(0, -20 * _0x4a7c7f);
  round_regular_polygon(_0x233190, 5, _0x1158b, _0x4d226f);
  fill_path(_0x233190, _0x2d3074[2]);
  _0x233190.restore();
  circle(
    _0x233190,
    _0x572c57 / 2 - 7 * _0x4a7c7f,
    _0x49463c / 2 + 7 * _0x4a7c7f,
    5
  );
  fill_path(_0x233190, _0x2d3074[2]);
  return _0xe2e738;
}
function create_plant(_0x34ab22, _0x490305, _0x27b23d) {
  var _0x265a91 = document.createElement("canvas");
  var _0xc1a2e9 = _0x265a91.getContext("2d");
  var _0x3249e4 = _0x34ab22 * 140;
  var _0x5cc835 = _0x34ab22 * 150;
  var _0x147544 = _0x34ab22 * 10;
  var _0x26a585 = _0x34ab22 * 4;
  _0x265a91.width = _0x3249e4;
  _0x265a91.height = _0x5cc835;
  _0xc1a2e9.translate(-50 * _0x34ab22, -38 * _0x34ab22 + _0x147544);
  _0xc1a2e9.globalAlpha = _0x490305 ? 0.5 : 1;
  _0xc1a2e9.beginPath();
  _0xc1a2e9.bezierCurveTo(
    160 * _0x34ab22,
    65 * _0x34ab22,
    160 * _0x34ab22,
    85 * _0x34ab22,
    152 * _0x34ab22,
    95 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    152 * _0x34ab22,
    95 * _0x34ab22,
    173 * _0x34ab22,
    94 * _0x34ab22,
    187 * _0x34ab22,
    102 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    187 * _0x34ab22,
    102 * _0x34ab22,
    180 * _0x34ab22,
    120 * _0x34ab22,
    155 * _0x34ab22,
    126 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    154 * _0x34ab22,
    126 * _0x34ab22,
    166 * _0x34ab22,
    138 * _0x34ab22,
    169 * _0x34ab22,
    148 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    169 * _0x34ab22,
    148 * _0x34ab22,
    148 * _0x34ab22,
    152 * _0x34ab22,
    133 * _0x34ab22,
    140 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    133 * _0x34ab22,
    140 * _0x34ab22,
    134 * _0x34ab22,
    160 * _0x34ab22,
    122 * _0x34ab22,
    175 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    122 * _0x34ab22,
    175 * _0x34ab22,
    107 * _0x34ab22,
    162 * _0x34ab22,
    107 * _0x34ab22,
    144 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    107 * _0x34ab22,
    144 * _0x34ab22,
    98 * _0x34ab22,
    164 * _0x34ab22,
    73 * _0x34ab22,
    167 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    73 * _0x34ab22,
    167 * _0x34ab22,
    72 * _0x34ab22,
    134 * _0x34ab22,
    90 * _0x34ab22,
    127 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    90 * _0x34ab22,
    127 * _0x34ab22,
    70 * _0x34ab22,
    134 * _0x34ab22,
    55 * _0x34ab22,
    123 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    55 * _0x34ab22,
    123 * _0x34ab22,
    58 * _0x34ab22,
    115 * _0x34ab22,
    75 * _0x34ab22,
    104 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    75 * _0x34ab22,
    104 * _0x34ab22,
    66 * _0x34ab22,
    96 * _0x34ab22,
    61 * _0x34ab22,
    77 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    61 * _0x34ab22,
    77 * _0x34ab22,
    83 * _0x34ab22,
    74 * _0x34ab22,
    102 * _0x34ab22,
    89 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    102 * _0x34ab22,
    89 * _0x34ab22,
    92 * _0x34ab22,
    66 * _0x34ab22,
    110 * _0x34ab22,
    41 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    111 * _0x34ab22,
    40 * _0x34ab22,
    130 * _0x34ab22,
    54 * _0x34ab22,
    130 * _0x34ab22,
    82 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    130 * _0x34ab22,
    82 * _0x34ab22,
    143 * _0x34ab22,
    67 * _0x34ab22,
    159 * _0x34ab22,
    65 * _0x34ab22
  );
  _0xc1a2e9.closePath();
  fill_path(_0xc1a2e9, _0x27b23d[0]);
  _0xc1a2e9.translate(0, 0 - _0x147544);
  _0xc1a2e9.globalAlpha = 1;
  _0xc1a2e9.beginPath();
  _0xc1a2e9.bezierCurveTo(
    160 * _0x34ab22,
    65 * _0x34ab22,
    160 * _0x34ab22,
    85 * _0x34ab22,
    152 * _0x34ab22,
    95 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    152 * _0x34ab22,
    95 * _0x34ab22,
    173 * _0x34ab22,
    94 * _0x34ab22,
    187 * _0x34ab22,
    102 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    187 * _0x34ab22,
    102 * _0x34ab22,
    180 * _0x34ab22,
    120 * _0x34ab22,
    155 * _0x34ab22,
    126 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    154 * _0x34ab22,
    126 * _0x34ab22,
    166 * _0x34ab22,
    138 * _0x34ab22,
    169 * _0x34ab22,
    148 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    169 * _0x34ab22,
    148 * _0x34ab22,
    148 * _0x34ab22,
    152 * _0x34ab22,
    133 * _0x34ab22,
    140 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    133 * _0x34ab22,
    140 * _0x34ab22,
    134 * _0x34ab22,
    160 * _0x34ab22,
    122 * _0x34ab22,
    175 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    122 * _0x34ab22,
    175 * _0x34ab22,
    107 * _0x34ab22,
    162 * _0x34ab22,
    107 * _0x34ab22,
    144 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    107 * _0x34ab22,
    144 * _0x34ab22,
    98 * _0x34ab22,
    164 * _0x34ab22,
    73 * _0x34ab22,
    167 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    73 * _0x34ab22,
    167 * _0x34ab22,
    72 * _0x34ab22,
    134 * _0x34ab22,
    90 * _0x34ab22,
    127 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    90 * _0x34ab22,
    127 * _0x34ab22,
    70 * _0x34ab22,
    134 * _0x34ab22,
    55 * _0x34ab22,
    123 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    55 * _0x34ab22,
    123 * _0x34ab22,
    58 * _0x34ab22,
    115 * _0x34ab22,
    75 * _0x34ab22,
    104 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    75 * _0x34ab22,
    104 * _0x34ab22,
    66 * _0x34ab22,
    96 * _0x34ab22,
    61 * _0x34ab22,
    77 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    61 * _0x34ab22,
    77 * _0x34ab22,
    83 * _0x34ab22,
    74 * _0x34ab22,
    102 * _0x34ab22,
    89 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    102 * _0x34ab22,
    89 * _0x34ab22,
    92 * _0x34ab22,
    66 * _0x34ab22,
    110 * _0x34ab22,
    41 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    111 * _0x34ab22,
    40 * _0x34ab22,
    130 * _0x34ab22,
    54 * _0x34ab22,
    130 * _0x34ab22,
    82 * _0x34ab22
  );
  _0xc1a2e9.bezierCurveTo(
    130 * _0x34ab22,
    82 * _0x34ab22,
    143 * _0x34ab22,
    67 * _0x34ab22,
    159 * _0x34ab22,
    65 * _0x34ab22
  );
  _0xc1a2e9.closePath();
  fill_path(_0xc1a2e9, _0x27b23d[1], _0x27b23d[2], _0x26a585);
  return _0x265a91;
}
function create_fruit(_0x548486, _0xd865f0, _0x3794cf) {
  var _0x348938 = document.createElement("canvas");
  var _0x2e006c = _0x348938.getContext("2d");
  var _0x120904 = _0x548486 * 18;
  var _0x26e7e1 = _0x548486 * 18;
  _0x348938.width = _0x120904;
  _0x348938.height = _0x26e7e1;
  var _0x3e91b4 = _0x548486 * 9;
  var _0xb8d333 = _0x548486 * 9;
  var _0x3905ff = _0x548486 * 8;
  _0x2e006c.save();
  _0x2e006c.translate(_0x3e91b4, _0xb8d333);
  _0x2e006c.globalAlpha = 1;
  circle(_0x2e006c, 0, 0, _0x3905ff);
  fill_path(_0x2e006c, _0x3794cf[0]);
  var _0x3905ff = 3 * _0x548486;
  var _0x3e91b4 = 0;
  var _0xb8d333 = -3 * _0x548486;
  _0x2e006c.translate(_0x3e91b4, _0xb8d333);
  _0x2e006c.globalAlpha = 1;
  circle(_0x2e006c, 0, 0, _0x3905ff);
  fill_path(_0x2e006c, _0x3794cf[1]);
  _0x2e006c.restore();
  return _0x348938;
}
function create_leaf(_0x4d22ed, _0x3a8cac) {
  var _0x3e9fd8 = document.createElement("canvas");
  var _0x426c22 = _0x3e9fd8.getContext("2d");
  _0x3e9fd8.width = 80 * _0x4d22ed;
  _0x3e9fd8.height = 100 * _0x4d22ed;
  _0x426c22.scale(0.5, 0.5);
  _0x426c22.translate(10, 15);
  _0x426c22.globalAlpha = 0.5;
  _0x426c22.beginPath();
  _0x426c22.lineCap = "round";
  _0x426c22.lineJoin = "round";
  _0x426c22.moveTo(47 * _0x4d22ed, 5 * _0x4d22ed);
  _0x426c22.bezierCurveTo(
    19 * _0x4d22ed,
    30 * _0x4d22ed,
    12 * _0x4d22ed,
    42 * _0x4d22ed,
    10 * _0x4d22ed,
    55 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    11 * _0x4d22ed,
    75 * _0x4d22ed,
    27 * _0x4d22ed,
    76 * _0x4d22ed,
    36 * _0x4d22ed,
    72 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    52 * _0x4d22ed,
    60 * _0x4d22ed,
    53 * _0x4d22ed,
    46 * _0x4d22ed,
    54 * _0x4d22ed,
    31 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    53 * _0x4d22ed,
    14 * _0x4d22ed,
    50 * _0x4d22ed,
    9 * _0x4d22ed,
    48 * _0x4d22ed,
    6 * _0x4d22ed
  );
  _0x426c22.closePath();
  fill_path(_0x426c22, _0x3a8cac[0]);
  _0x426c22.beginPath();
  _0x426c22.lineCap = "round";
  _0x426c22.lineJoin = "round";
  _0x426c22.moveTo(17 * _0x4d22ed, 70 * _0x4d22ed);
  _0x426c22.bezierCurveTo(
    18 * _0x4d22ed,
    77 * _0x4d22ed,
    10 * _0x4d22ed,
    83 * _0x4d22ed,
    4 * _0x4d22ed,
    87 * _0x4d22ed
  );
  fill_path(_0x426c22, undefined, _0x3a8cac[0], _0x4d22ed * 10);
  _0x426c22.translate(0, -10);
  _0x426c22.globalAlpha = 1;
  _0x426c22.beginPath();
  _0x426c22.lineCap = "round";
  _0x426c22.lineJoin = "round";
  _0x426c22.moveTo(47 * _0x4d22ed, 5 * _0x4d22ed);
  _0x426c22.bezierCurveTo(
    19 * _0x4d22ed,
    30 * _0x4d22ed,
    12 * _0x4d22ed,
    42 * _0x4d22ed,
    10 * _0x4d22ed,
    55 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    11 * _0x4d22ed,
    75 * _0x4d22ed,
    27 * _0x4d22ed,
    76 * _0x4d22ed,
    36 * _0x4d22ed,
    72 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    52 * _0x4d22ed,
    60 * _0x4d22ed,
    53 * _0x4d22ed,
    46 * _0x4d22ed,
    54 * _0x4d22ed,
    31 * _0x4d22ed
  );
  _0x426c22.bezierCurveTo(
    53 * _0x4d22ed,
    14 * _0x4d22ed,
    50 * _0x4d22ed,
    9 * _0x4d22ed,
    48 * _0x4d22ed,
    6 * _0x4d22ed
  );
  _0x426c22.closePath();
  fill_path(_0x426c22, _0x3a8cac[1], _0x3a8cac[2], 8 * _0x4d22ed);
  _0x426c22.beginPath();
  _0x426c22.lineCap = "round";
  _0x426c22.lineJoin = "round";
  _0x426c22.moveTo(17 * _0x4d22ed, 70 * _0x4d22ed);
  _0x426c22.bezierCurveTo(
    18 * _0x4d22ed,
    77 * _0x4d22ed,
    10 * _0x4d22ed,
    83 * _0x4d22ed,
    4 * _0x4d22ed,
    87 * _0x4d22ed
  );
  fill_path(_0x426c22, undefined, _0x3a8cac[2], 8 * _0x4d22ed);
  _0x426c22.globalAlpha = 0.5;
  _0x426c22.beginPath();
  _0x426c22.lineCap = "round";
  _0x426c22.lineJoin = "round";
  _0x426c22.moveTo(17 * _0x4d22ed, 70 * _0x4d22ed);
  _0x426c22.bezierCurveTo(
    33 * _0x4d22ed,
    52 * _0x4d22ed,
    39 * _0x4d22ed,
    33 * _0x4d22ed,
    48 * _0x4d22ed,
    7 * _0x4d22ed
  );
  fill_path(_0x426c22, undefined, _0x3a8cac[2], 8 * _0x4d22ed);
  return _0x3e9fd8;
}
function create_leaf(_0x4bc90e, _0x2a9b55) {
  var _0x54c4af = document.createElement("canvas");
  var _0x1a0bf6 = _0x54c4af.getContext("2d");
  _0x54c4af.width = 234 * _0x4bc90e;
  _0x54c4af.height = 183 * _0x4bc90e;
  _0x1a0bf6.beginPath();
  _0x1a0bf6.lineCap = "round";
  _0x1a0bf6.lineJoin = "round";
  _0x1a0bf6.moveTo(76 * _0x4bc90e, 25 * _0x4bc90e);
  _0x1a0bf6.bezierCurveTo(
    150 * _0x4bc90e,
    3 * _0x4bc90e,
    181 * _0x4bc90e,
    22 * _0x4bc90e,
    203 * _0x4bc90e,
    41 * _0x4bc90e
  );
  _0x1a0bf6.bezierCurveTo(
    225 * _0x4bc90e,
    63 * _0x4bc90e,
    225 * _0x4bc90e,
    105 * _0x4bc90e,
    198 * _0x4bc90e,
    133 * _0x4bc90e
  );
  _0x1a0bf6.bezierCurveTo(
    179 * _0x4bc90e,
    157 * _0x4bc90e,
    134 * _0x4bc90e,
    178 * _0x4bc90e,
    81 * _0x4bc90e,
    164 * _0x4bc90e
  );
  _0x1a0bf6.bezierCurveTo(
    19 * _0x4bc90e,
    148 * _0x4bc90e,
    6 * _0x4bc90e,
    95 * _0x4bc90e,
    21 * _0x4bc90e,
    66 * _0x4bc90e
  );
  _0x1a0bf6.bezierCurveTo(
    34 * _0x4bc90e,
    39 * _0x4bc90e,
    52 * _0x4bc90e,
    33 * _0x4bc90e,
    75 * _0x4bc90e,
    25 * _0x4bc90e
  );
  _0x1a0bf6.closePath();
  fill_path(_0x1a0bf6, _0x2a9b55[0], _0x2a9b55[0], 4 * _0x4bc90e);
  return _0x54c4af;
}
function create_herb(_0x31aca1, _0xd13e79, _0x542a4a, _0x18ea46, _0x2c899a) {
  var _0x16eb7e = document.createElement("canvas"),
    _0x1beff0 = _0x16eb7e.getContext("2d");
  if (_0x18ea46 == 0) {
    var _0xcd0cb7 = _0x31aca1 * 270;
    var _0x50887c = _0x31aca1 * 250;
    _0x16eb7e.width = _0xcd0cb7;
    _0x16eb7e.height = _0x50887c;
    _0x1beff0.beginPath();
    _0x1beff0.moveTo(140 * _0x31aca1, 3 * _0x31aca1);
    _0x1beff0.translate(-25 * _0x31aca1, -20 * _0x31aca1);
    _0x1beff0.bezierCurveTo(
      218 * _0x31aca1,
      31 * _0x31aca1,
      251 * _0x31aca1,
      61 * _0x31aca1,
      265 * _0x31aca1,
      85 * _0x31aca1
    );
    _0x1beff0.bezierCurveTo(
      278 * _0x31aca1,
      108 * _0x31aca1,
      295 * _0x31aca1,
      160 * _0x31aca1,
      285 * _0x31aca1,
      195 * _0x31aca1
    );
    _0x1beff0.bezierCurveTo(
      271 * _0x31aca1,
      242 * _0x31aca1,
      213 * _0x31aca1,
      268 * _0x31aca1,
      188 * _0x31aca1,
      266 * _0x31aca1
    );
    _0x1beff0.bezierCurveTo(
      139 * _0x31aca1,
      262 * _0x31aca1,
      70 * _0x31aca1,
      244 * _0x31aca1,
      47 * _0x31aca1,
      204 * _0x31aca1
    );
    _0x1beff0.bezierCurveTo(
      20 * _0x31aca1,
      158 * _0x31aca1,
      35 * _0x31aca1,
      78 * _0x31aca1,
      59 * _0x31aca1,
      56 * _0x31aca1
    );
    _0x1beff0.bezierCurveTo(
      90 * _0x31aca1,
      28 * _0x31aca1,
      124 * _0x31aca1,
      23 * _0x31aca1,
      140 * _0x31aca1,
      23 * _0x31aca1
    );
    _0x1beff0.closePath();
    fill_path(_0x1beff0, _0x542a4a[0]);
  } else {
    if (_0x18ea46 == 1) {
      var _0xcd0cb7 = _0x31aca1 * 430;
      var _0x50887c = _0x31aca1 * 350;
      _0x16eb7e.width = _0xcd0cb7;
      _0x16eb7e.height = _0x50887c;
      _0x1beff0.beginPath();
      _0x1beff0.moveTo(180 * _0x31aca1, 5 * _0x31aca1);
      _0x1beff0.translate(-30 * _0x31aca1, -60 * _0x31aca1);
      _0x1beff0.bezierCurveTo(
        283 * _0x31aca1,
        60 * _0x31aca1,
        265 * _0x31aca1,
        163 * _0x31aca1,
        335 * _0x31aca1,
        206 * _0x31aca1
      );
      _0x1beff0.bezierCurveTo(
        376 * _0x31aca1,
        231 * _0x31aca1,
        492 * _0x31aca1,
        299 * _0x31aca1,
        434 * _0x31aca1,
        357 * _0x31aca1
      );
      _0x1beff0.bezierCurveTo(
        371 * _0x31aca1,
        421 * _0x31aca1,
        289 * _0x31aca1,
        394 * _0x31aca1,
        255 * _0x31aca1,
        386 * _0x31aca1
      );
      _0x1beff0.bezierCurveTo(
        218 * _0x31aca1,
        377 * _0x31aca1,
        91 * _0x31aca1,
        359 * _0x31aca1,
        50 * _0x31aca1,
        272 * _0x31aca1
      );
      _0x1beff0.bezierCurveTo(
        12 * _0x31aca1,
        192 * _0x31aca1,
        107 * _0x31aca1,
        75 * _0x31aca1,
        178 * _0x31aca1,
        69 * _0x31aca1
      );
      _0x1beff0.closePath();
      fill_path(_0x1beff0, _0x542a4a[0]);
    } else {
      if (_0x18ea46 == 2) {
        var _0xcd0cb7 = _0x31aca1 * 400;
        var _0x50887c = _0x31aca1 * 300;
        _0x16eb7e.width = _0xcd0cb7;
        _0x16eb7e.height = _0x50887c;
        _0x1beff0.beginPath();
        _0x1beff0.moveTo(80 * _0x31aca1, 52 * _0x31aca1);
        _0x1beff0.translate(-40 * _0x31aca1, -30 * _0x31aca1);
        _0x1beff0.bezierCurveTo(
          124 * _0x31aca1,
          77 * _0x31aca1,
          241 * _0x31aca1,
          22 * _0x31aca1,
          311 * _0x31aca1,
          65 * _0x31aca1
        );
        _0x1beff0.bezierCurveTo(
          352 * _0x31aca1,
          90 * _0x31aca1,
          404 * _0x31aca1,
          176 * _0x31aca1,
          346 * _0x31aca1,
          234 * _0x31aca1
        );
        _0x1beff0.bezierCurveTo(
          283 * _0x31aca1,
          298 * _0x31aca1,
          179 * _0x31aca1,
          299 * _0x31aca1,
          145 * _0x31aca1,
          291 * _0x31aca1
        );
        _0x1beff0.bezierCurveTo(
          108 * _0x31aca1,
          282 * _0x31aca1,
          100 * _0x31aca1,
          239 * _0x31aca1,
          63 * _0x31aca1,
          205 * _0x31aca1
        );
        _0x1beff0.bezierCurveTo(
          37 * _0x31aca1,
          181 * _0x31aca1,
          45 * _0x31aca1,
          131 * _0x31aca1,
          80 * _0x31aca1,
          107 * _0x31aca1
        );
        _0x1beff0.closePath();
        fill_path(_0x1beff0, _0x542a4a[0]);
      }
    }
  }
  return _0x16eb7e;
}
function create_flake(_0x51ccf8, _0x539b41, _0x591b43) {
  var _0x571c4b = document.createElement("canvas");
  var _0x9f9747 = _0x571c4b.getContext("2d");
  var _0x776c3f = _0x51ccf8 * _0x539b41 * 2;
  var _0x1cab67 = _0x51ccf8 * _0x539b41 * 2;
  var _0x3aead0 = _0x776c3f / 2;
  var _0x42cc60 = _0x1cab67 / 2;
  _0x571c4b.width = _0x776c3f;
  _0x571c4b.height = _0x1cab67;
  _0x9f9747.translate(_0x3aead0, _0x42cc60);
  circle(_0x9f9747, 0, 0, _0x539b41 * _0x51ccf8, 0);
  fill_path(_0x9f9747, _0x591b43);
  return _0x571c4b;
}
function create_divingmask(_0x185215, _0xbed0a0, _0x251444) {
  var _0x2586ee = document.createElement("canvas");
  var _0x4842c1 = _0x2586ee.getContext("2d");
  _0x2586ee.width = 373 * _0x185215;
  _0x2586ee.height = 314 * _0x185215;
  _0x4842c1.globalAlpha = _0xbed0a0 ? 0.5 : 1;
  _0x4842c1.translate(5 * _0x185215, 5 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    184.048583984375 * _0x185215,
    69.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -40 * _0x185215,
    -28.5 * _0x185215,
    80 * _0x185215,
    57 * _0x185215,
    10 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[1], _0x251444[2], 4 * _0x185215);
  _0x4842c1.beginPath();
  _0x4842c1.lineCap = "round";
  _0x4842c1.lineJoin = "round";
  _0x4842c1.moveTo(185.048583984375 * _0x185215, 61.6805419921875 * _0x185215);
  _0x4842c1.bezierCurveTo(
    145.048583984375 * _0x185215,
    59.6805419921875 * _0x185215,
    138.048583984375 * _0x185215,
    41.6805419921875 * _0x185215,
    148.048583984375 * _0x185215,
    33.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    169.048583984375 * _0x185215,
    17.6805419921875 * _0x185215,
    194.048583984375 * _0x185215,
    20.6805419921875 * _0x185215,
    210.048583984375 * _0x185215,
    27.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    234.048583984375 * _0x185215,
    40.6805419921875 * _0x185215,
    225.048583984375 * _0x185215,
    57.6805419921875 * _0x185215,
    186.048583984375 * _0x185215,
    61.6805419921875 * _0x185215
  );
  _0x4842c1.closePath();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.beginPath();
  _0x4842c1.lineCap = "round";
  _0x4842c1.lineJoin = "round";
  _0x4842c1.moveTo(224.048583984375 * _0x185215, 56.6805419921875 * _0x185215);
  _0x4842c1.bezierCurveTo(
    326.048583984375 * _0x185215,
    69.6805419921875 * _0x185215,
    363.048583984375 * _0x185215,
    148.6805419921875 * _0x185215,
    349.048583984375 * _0x185215,
    206.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    329.048583984375 * _0x185215,
    278.6805419921875 * _0x185215,
    252.048583984375 * _0x185215,
    283.6805419921875 * _0x185215,
    206.048583984375 * _0x185215,
    275.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    206.548583984375 * _0x185215,
    266.6805419921875 * _0x185215,
    206.548583984375 * _0x185215,
    266.6805419921875 * _0x185215,
    207.048583984375 * _0x185215,
    257.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    276.048583984375 * _0x185215,
    268.6805419921875 * _0x185215,
    308.048583984375 * _0x185215,
    239.6805419921875 * _0x185215,
    323.048583984375 * _0x185215,
    208.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    352.048583984375 * _0x185215,
    145.6805419921875 * _0x185215,
    292.048583984375 * _0x185215,
    86.6805419921875 * _0x185215,
    223.048583984375 * _0x185215,
    74.6805419921875 * _0x185215
  );
  _0x4842c1.closePath();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.548583984375 * _0x185215,
    119.6805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121.5 * _0x185215,
    -45 * _0x185215,
    243 * _0x185215,
    90 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.048583984375 * _0x185215,
    155.6805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121 * _0x185215,
    -52 * _0x185215,
    242 * _0x185215,
    104 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.048583984375 * _0x185215,
    205.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121 * _0x185215,
    -50.5 * _0x185215,
    242 * _0x185215,
    101 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    185.048583984375 * _0x185215,
    204.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -100 * _0x185215,
    -34.5 * _0x185215,
    200 * _0x185215,
    69 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  circle(
    _0x4842c1,
    185.048583984375 * _0x185215,
    257.6805419921875 * _0x185215,
    27.018512172212592 * _0x185215
  );
  fill_path(_0x4842c1, _0x251444[0], _0x251444[0], 6 * _0x185215);
  _0x4842c1.globalAlpha = 1;
  _0x4842c1.translate(-5 * _0x185215, -5 * _0x185215);
  _0x4842c1.beginPath();
  _0x4842c1.lineCap = "round";
  _0x4842c1.lineJoin = "round";
  _0x4842c1.moveTo(224.048583984375 * _0x185215, 56.6805419921875 * _0x185215);
  _0x4842c1.bezierCurveTo(
    326.048583984375 * _0x185215,
    69.6805419921875 * _0x185215,
    363.048583984375 * _0x185215,
    148.6805419921875 * _0x185215,
    349.048583984375 * _0x185215,
    206.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    329.048583984375 * _0x185215,
    278.6805419921875 * _0x185215,
    252.048583984375 * _0x185215,
    283.6805419921875 * _0x185215,
    206.048583984375 * _0x185215,
    275.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    206.548583984375 * _0x185215,
    266.6805419921875 * _0x185215,
    206.548583984375 * _0x185215,
    266.6805419921875 * _0x185215,
    207.048583984375 * _0x185215,
    257.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    276.048583984375 * _0x185215,
    268.6805419921875 * _0x185215,
    308.048583984375 * _0x185215,
    239.6805419921875 * _0x185215,
    323.048583984375 * _0x185215,
    208.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    352.048583984375 * _0x185215,
    145.6805419921875 * _0x185215,
    292.048583984375 * _0x185215,
    86.6805419921875 * _0x185215,
    223.048583984375 * _0x185215,
    74.6805419921875 * _0x185215
  );
  _0x4842c1.closePath();
  fill_path(_0x4842c1, _0x251444[3], _0x251444[4], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    184.048583984375 * _0x185215,
    69.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -40 * _0x185215,
    -28.5 * _0x185215,
    80 * _0x185215,
    57 * _0x185215,
    10 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[1], _0x251444[2], 4 * _0x185215);
  _0x4842c1.beginPath();
  _0x4842c1.lineCap = "round";
  _0x4842c1.lineJoin = "round";
  _0x4842c1.moveTo(185.048583984375 * _0x185215, 61.6805419921875 * _0x185215);
  _0x4842c1.bezierCurveTo(
    145.048583984375 * _0x185215,
    59.6805419921875 * _0x185215,
    138.048583984375 * _0x185215,
    41.6805419921875 * _0x185215,
    148.048583984375 * _0x185215,
    33.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    169.048583984375 * _0x185215,
    17.6805419921875 * _0x185215,
    194.048583984375 * _0x185215,
    20.6805419921875 * _0x185215,
    210.048583984375 * _0x185215,
    27.6805419921875 * _0x185215
  );
  _0x4842c1.bezierCurveTo(
    234.048583984375 * _0x185215,
    40.6805419921875 * _0x185215,
    225.048583984375 * _0x185215,
    57.6805419921875 * _0x185215,
    186.048583984375 * _0x185215,
    61.6805419921875 * _0x185215
  );
  _0x4842c1.closePath();
  fill_path(_0x4842c1, _0x251444[1], _0x251444[2], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.548583984375 * _0x185215,
    119.6805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121.5 * _0x185215,
    -45 * _0x185215,
    243 * _0x185215,
    90 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[5], _0x251444[4], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.048583984375 * _0x185215,
    155.6805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121 * _0x185215,
    -52 * _0x185215,
    242 * _0x185215,
    104 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[3], _0x251444[4], 6 * _0x185215);
  _0x4842c1.save();
  _0x4842c1.translate(
    183.048583984375 * _0x185215,
    205.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -121 * _0x185215,
    -50.5 * _0x185215,
    242 * _0x185215,
    101 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[6], _0x251444[4], 6 * _0x185215);
  _0x4842c1.globalCompositeOperation = "destination-out";
  _0x4842c1.save();
  _0x4842c1.translate(
    185.048583984375 * _0x185215,
    204.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -100 * _0x185215,
    -34.5 * _0x185215,
    200 * _0x185215,
    69 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[7], _0x251444[8], 6 * _0x185215);
  _0x4842c1.globalCompositeOperation = "source-over";
  _0x4842c1.globalAlpha = 0.5;
  _0x4842c1.save();
  _0x4842c1.translate(
    185.048583984375 * _0x185215,
    204.1805419921875 * _0x185215
  );
  round_rect(
    _0x4842c1,
    -100 * _0x185215,
    -34.5 * _0x185215,
    200 * _0x185215,
    69 * _0x185215,
    40 * _0x185215
  );
  _0x4842c1.restore();
  fill_path(_0x4842c1, _0x251444[7], _0x251444[8], 6 * _0x185215);
  _0x4842c1.globalAlpha = 1;
  _0x4842c1.save();
  circle(
    _0x4842c1,
    185.048583984375 * _0x185215,
    257.6805419921875 * _0x185215,
    27.018512172212592 * _0x185215
  );
  fill_path(_0x4842c1, _0x251444[3], _0x251444[4], 6 * _0x185215);
  _0x4842c1.restore();
  return _0x2586ee;
}
function create_superdivingsuit(_0x13d398, _0x27eaa2, _0x4788c4) {
  var _0x490639 = document.createElement("canvas");
  var _0x3a4547 = _0x490639.getContext("2d");
  _0x490639.width = 220 * _0x13d398;
  _0x490639.height = 180 * _0x13d398;
  _0x3a4547.globalAlpha = _0x27eaa2 ? 0.5 : 1;
  _0x3a4547.translate(-90 * _0x13d398, -150 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(104 * _0x13d398, 237.8000030517578 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    110 * _0x13d398,
    237.8000030517578 * _0x13d398,
    110 * _0x13d398,
    237.8000030517578 * _0x13d398,
    116 * _0x13d398,
    237.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    241.8000030517578 * _0x13d398,
    116 * _0x13d398,
    241.8000030517578 * _0x13d398,
    116 * _0x13d398,
    245.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    245.3000030517578 * _0x13d398,
    115 * _0x13d398,
    245.3000030517578 * _0x13d398,
    114 * _0x13d398,
    244.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    109.5 * _0x13d398,
    244.8000030517578 * _0x13d398,
    109.5 * _0x13d398,
    244.8000030517578 * _0x13d398,
    105 * _0x13d398,
    244.8000030517578 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[5], _0x4788c4[5], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(115 * _0x13d398, 211.20000457763672 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    106 * _0x13d398,
    216.20000457763672 * _0x13d398,
    101 * _0x13d398,
    234.20000457763672 * _0x13d398,
    102 * _0x13d398,
    241.20000457763672 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    102 * _0x13d398,
    260.2000045776367 * _0x13d398,
    115 * _0x13d398,
    269.2000045776367 * _0x13d398,
    115 * _0x13d398,
    269.2000045776367 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    265.2000045776367 * _0x13d398,
    115.5 * _0x13d398,
    265.2000045776367 * _0x13d398,
    116 * _0x13d398,
    261.2000045776367 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    112 * _0x13d398,
    264 * _0x13d398,
    108 * _0x13d398,
    254 * _0x13d398,
    106 * _0x13d398,
    242 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    105 * _0x13d398,
    232 * _0x13d398,
    110 * _0x13d398,
    222 * _0x13d398,
    115 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    216.75 * _0x13d398,
    115.5 * _0x13d398,
    217.375 * _0x13d398,
    116 * _0x13d398,
    216.75 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[5], _0x4788c4[5], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(120 * _0x13d398, 207 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    206 * _0x13d398,
    114 * _0x13d398,
    209 * _0x13d398,
    114 * _0x13d398,
    211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    114 * _0x13d398,
    268 * _0x13d398,
    114 * _0x13d398,
    241 * _0x13d398,
    114 * _0x13d398,
    271 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    276 * _0x13d398,
    118 * _0x13d398,
    276 * _0x13d398,
    120 * _0x13d398,
    276 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    122 * _0x13d398,
    273 * _0x13d398,
    120.5 * _0x13d398,
    274.5 * _0x13d398,
    121 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    241 * _0x13d398,
    121 * _0x13d398,
    241 * _0x13d398,
    121 * _0x13d398,
    209 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(284 * _0x13d398, 238 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    289.5 * _0x13d398,
    238 * _0x13d398,
    289.5 * _0x13d398,
    238 * _0x13d398,
    295 * _0x13d398,
    238 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    295 * _0x13d398,
    241.5 * _0x13d398,
    295 * _0x13d398,
    241.5 * _0x13d398,
    295 * _0x13d398,
    245 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    289.5 * _0x13d398,
    245 * _0x13d398,
    289.5 * _0x13d398,
    245 * _0x13d398,
    284 * _0x13d398,
    245 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(283 * _0x13d398, 211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    293 * _0x13d398,
    216 * _0x13d398,
    297 * _0x13d398,
    231 * _0x13d398,
    297 * _0x13d398,
    241 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    298 * _0x13d398,
    254 * _0x13d398,
    290 * _0x13d398,
    265 * _0x13d398,
    284 * _0x13d398,
    269 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    283 * _0x13d398,
    266 * _0x13d398,
    283.5 * _0x13d398,
    266 * _0x13d398,
    283 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    290 * _0x13d398,
    260 * _0x13d398,
    292 * _0x13d398,
    251 * _0x13d398,
    293 * _0x13d398,
    242 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    292 * _0x13d398,
    223 * _0x13d398,
    289 * _0x13d398,
    224 * _0x13d398,
    284 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(280 * _0x13d398, 206 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    284 * _0x13d398,
    206 * _0x13d398,
    285 * _0x13d398,
    208 * _0x13d398,
    285 * _0x13d398,
    211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    285 * _0x13d398,
    241.5 * _0x13d398,
    285 * _0x13d398,
    241.5 * _0x13d398,
    285 * _0x13d398,
    272 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    284 * _0x13d398,
    275 * _0x13d398,
    284 * _0x13d398,
    275 * _0x13d398,
    280 * _0x13d398,
    275 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    279 * _0x13d398,
    273.5 * _0x13d398,
    279 * _0x13d398,
    273.5 * _0x13d398,
    278 * _0x13d398,
    272 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    278 * _0x13d398,
    240.5 * _0x13d398,
    278 * _0x13d398,
    240.5 * _0x13d398,
    278 * _0x13d398,
    209 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(138 * _0x13d398, 298.40000915527344 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    141 * _0x13d398,
    311.40000915527344 * _0x13d398,
    151 * _0x13d398,
    314.40000915527344 * _0x13d398,
    162 * _0x13d398,
    316.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    224 * _0x13d398,
    316.40000915527344 * _0x13d398,
    200 * _0x13d398,
    315.90000915527344 * _0x13d398,
    238 * _0x13d398,
    315.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    254 * _0x13d398,
    316.40000915527344 * _0x13d398,
    261 * _0x13d398,
    306.40000915527344 * _0x13d398,
    264 * _0x13d398,
    298.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    255 * _0x13d398,
    304.40000915527344 * _0x13d398,
    250 * _0x13d398,
    306.40000915527344 * _0x13d398,
    244 * _0x13d398,
    306.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    201 * _0x13d398,
    306.90000915527344 * _0x13d398,
    201 * _0x13d398,
    306.90000915527344 * _0x13d398,
    158 * _0x13d398,
    307.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    150 * _0x13d398,
    306.40000915527344 * _0x13d398,
    148 * _0x13d398,
    306.40000915527344 * _0x13d398,
    139 * _0x13d398,
    300.40000915527344 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(161 * _0x13d398, 177.5999984741211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    130 * _0x13d398,
    175.5999984741211 * _0x13d398,
    123 * _0x13d398,
    190.5999984741211 * _0x13d398,
    122 * _0x13d398,
    205.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    277.5999984741211 * _0x13d398,
    122 * _0x13d398,
    242.5999984741211 * _0x13d398,
    122 * _0x13d398,
    279.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    128 * _0x13d398,
    297.5999984741211 * _0x13d398,
    137 * _0x13d398,
    299.5999984741211 * _0x13d398,
    143 * _0x13d398,
    300.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    163 * _0x13d398,
    301.0999984741211 * _0x13d398,
    163 * _0x13d398,
    301.0999984741211 * _0x13d398,
    183 * _0x13d398,
    301.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    150 * _0x13d398,
    300.5999984741211 * _0x13d398,
    135 * _0x13d398,
    290.5999984741211 * _0x13d398,
    134 * _0x13d398,
    267.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    133 * _0x13d398,
    245.5999984741211 * _0x13d398,
    146 * _0x13d398,
    235.5999984741211 * _0x13d398,
    164 * _0x13d398,
    235.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    206 * _0x13d398,
    236.0999984741211 * _0x13d398,
    206 * _0x13d398,
    236.0999984741211 * _0x13d398,
    248 * _0x13d398,
    236.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    266 * _0x13d398,
    243.5999984741211 * _0x13d398,
    268 * _0x13d398,
    259.5999984741211 * _0x13d398,
    267 * _0x13d398,
    266.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    266 * _0x13d398,
    288.5999984741211 * _0x13d398,
    251 * _0x13d398,
    294.5999984741211 * _0x13d398,
    244 * _0x13d398,
    297.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    228.5 * _0x13d398,
    299.5999984741211 * _0x13d398,
    228.5 * _0x13d398,
    299.5999984741211 * _0x13d398,
    213 * _0x13d398,
    301.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    236 * _0x13d398,
    301.0999984741211 * _0x13d398,
    236 * _0x13d398,
    301.0999984741211 * _0x13d398,
    259 * _0x13d398,
    300.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    272 * _0x13d398,
    295.5999984741211 * _0x13d398,
    277 * _0x13d398,
    288.5999984741211 * _0x13d398,
    278 * _0x13d398,
    271.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    277.5 * _0x13d398,
    236.5999984741211 * _0x13d398,
    277.5 * _0x13d398,
    236.5999984741211 * _0x13d398,
    277 * _0x13d398,
    201.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    276 * _0x13d398,
    186.5999984741211 * _0x13d398,
    265 * _0x13d398,
    178.5999984741211 * _0x13d398,
    254 * _0x13d398,
    177.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    247.5 * _0x13d398,
    177.5999984741211 * _0x13d398,
    247.5 * _0x13d398,
    177.5999984741211 * _0x13d398,
    241 * _0x13d398,
    177.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    255 * _0x13d398,
    202.5999984741211 * _0x13d398,
    214 * _0x13d398,
    217.5999984741211 * _0x13d398,
    201 * _0x13d398,
    215.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    170 * _0x13d398,
    215.5999984741211 * _0x13d398,
    152 * _0x13d398,
    197.5999984741211 * _0x13d398,
    161 * _0x13d398,
    178.5999984741211 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(162 * _0x13d398, 175.5999984741211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    153 * _0x13d398,
    176.0999984741211 * _0x13d398,
    153 * _0x13d398,
    176.0999984741211 * _0x13d398,
    144 * _0x13d398,
    176.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    125 * _0x13d398,
    178.5999984741211 * _0x13d398,
    121 * _0x13d398,
    196.5999984741211 * _0x13d398,
    121 * _0x13d398,
    207.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    243.20000076293945 * _0x13d398,
    121 * _0x13d398,
    243.20000076293945 * _0x13d398,
    121 * _0x13d398,
    278.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    126 * _0x13d398,
    298.8000030517578 * _0x13d398,
    137 * _0x13d398,
    300.8000030517578 * _0x13d398,
    146 * _0x13d398,
    302.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    302.8000030517578 * _0x13d398,
    200.5 * _0x13d398,
    302.8000030517578 * _0x13d398,
    255 * _0x13d398,
    302.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    271 * _0x13d398,
    301.8000030517578 * _0x13d398,
    279 * _0x13d398,
    288.8000030517578 * _0x13d398,
    279 * _0x13d398,
    273.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    279 * _0x13d398,
    236.8000030517578 * _0x13d398,
    279 * _0x13d398,
    236.8000030517578 * _0x13d398,
    279 * _0x13d398,
    199.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    274 * _0x13d398,
    178.8000030517578 * _0x13d398,
    263 * _0x13d398,
    177.8000030517578 * _0x13d398,
    255 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    248 * _0x13d398,
    175.8000030517578 * _0x13d398,
    248 * _0x13d398,
    175.8000030517578 * _0x13d398,
    241 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    240 * _0x13d398,
    175.8000030517578 * _0x13d398,
    240 * _0x13d398,
    175.8000030517578 * _0x13d398,
    239 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    254 * _0x13d398,
    200.8000030517578 * _0x13d398,
    222 * _0x13d398,
    211.8000030517578 * _0x13d398,
    202 * _0x13d398,
    212.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    168 * _0x13d398,
    213.8000030517578 * _0x13d398,
    151 * _0x13d398,
    190.8000030517578 * _0x13d398,
    163 * _0x13d398,
    176.8000030517578 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[4], 6 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(198 * _0x13d398, 161.4000015258789 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    198 * _0x13d398,
    186.9000015258789 * _0x13d398,
    198 * _0x13d398,
    186.9000015258789 * _0x13d398,
    198 * _0x13d398,
    212.4000015258789 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    201 * _0x13d398,
    212.4000015258789 * _0x13d398,
    201 * _0x13d398,
    212.4000015258789 * _0x13d398,
    204 * _0x13d398,
    212.4000015258789 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    204 * _0x13d398,
    186.9000015258789 * _0x13d398,
    204 * _0x13d398,
    186.9000015258789 * _0x13d398,
    204 * _0x13d398,
    161.4000015258789 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(161 * _0x13d398, 194 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    188 * _0x13d398,
    169 * _0x13d398,
    231 * _0x13d398,
    179 * _0x13d398,
    241 * _0x13d398,
    194 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    239.5 * _0x13d398,
    196 * _0x13d398,
    239.5 * _0x13d398,
    196 * _0x13d398,
    238 * _0x13d398,
    198 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    221 * _0x13d398,
    179 * _0x13d398,
    182 * _0x13d398,
    182 * _0x13d398,
    165 * _0x13d398,
    198 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(157 * _0x13d398, 188.80000019073486 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    162 * _0x13d398,
    150.80000019073486 * _0x13d398,
    241 * _0x13d398,
    150.80000019073486 * _0x13d398,
    245 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    242 * _0x13d398,
    224.80000019073486 * _0x13d398,
    162 * _0x13d398,
    228.80000019073486 * _0x13d398,
    157 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    159 * _0x13d398,
    188.80000019073486 * _0x13d398,
    159 * _0x13d398,
    188.80000019073486 * _0x13d398,
    161 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    168 * _0x13d398,
    216.80000019073486 * _0x13d398,
    231 * _0x13d398,
    218.80000019073486 * _0x13d398,
    241 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    236 * _0x13d398,
    156.80000019073486 * _0x13d398,
    169 * _0x13d398,
    152.80000019073486 * _0x13d398,
    161 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(156 * _0x13d398, 188 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    160 * _0x13d398,
    164 * _0x13d398,
    183 * _0x13d398,
    159 * _0x13d398,
    201 * _0x13d398,
    158 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    232 * _0x13d398,
    159 * _0x13d398,
    244 * _0x13d398,
    174 * _0x13d398,
    246 * _0x13d398,
    188 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    245 * _0x13d398,
    212 * _0x13d398,
    213 * _0x13d398,
    219 * _0x13d398,
    201 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    181 * _0x13d398,
    221 * _0x13d398,
    158 * _0x13d398,
    207 * _0x13d398,
    156 * _0x13d398,
    190 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[4], 6 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(162 * _0x13d398, 189 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    166 * _0x13d398,
    170 * _0x13d398,
    185 * _0x13d398,
    165 * _0x13d398,
    201 * _0x13d398,
    164 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    227 * _0x13d398,
    165 * _0x13d398,
    240 * _0x13d398,
    178 * _0x13d398,
    239 * _0x13d398,
    188 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    239 * _0x13d398,
    204 * _0x13d398,
    210 * _0x13d398,
    210 * _0x13d398,
    201 * _0x13d398,
    210 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    182 * _0x13d398,
    211 * _0x13d398,
    166 * _0x13d398,
    200 * _0x13d398,
    162 * _0x13d398,
    190 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[4], 6 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(131 * _0x13d398, 262 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    136 * _0x13d398,
    241 * _0x13d398,
    144 * _0x13d398,
    236 * _0x13d398,
    158 * _0x13d398,
    233 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    233 * _0x13d398,
    229 * _0x13d398,
    232 * _0x13d398,
    243 * _0x13d398,
    233 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    259 * _0x13d398,
    235 * _0x13d398,
    267 * _0x13d398,
    248 * _0x13d398,
    269 * _0x13d398,
    260 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    269 * _0x13d398,
    266.5 * _0x13d398,
    269 * _0x13d398,
    266.5 * _0x13d398,
    269 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    265 * _0x13d398,
    290 * _0x13d398,
    251 * _0x13d398,
    297 * _0x13d398,
    242 * _0x13d398,
    298 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    202 * _0x13d398,
    298 * _0x13d398,
    202 * _0x13d398,
    298 * _0x13d398,
    162 * _0x13d398,
    298 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    148 * _0x13d398,
    298 * _0x13d398,
    136 * _0x13d398,
    289 * _0x13d398,
    132 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    131.5 * _0x13d398,
    268 * _0x13d398,
    131.5 * _0x13d398,
    268 * _0x13d398,
    131 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    135 * _0x13d398,
    263 * _0x13d398,
    135 * _0x13d398,
    263 * _0x13d398,
    139 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    139 * _0x13d398,
    281 * _0x13d398,
    151 * _0x13d398,
    287 * _0x13d398,
    160 * _0x13d398,
    290 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    290 * _0x13d398,
    200.5 * _0x13d398,
    290 * _0x13d398,
    241 * _0x13d398,
    290 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    252 * _0x13d398,
    290 * _0x13d398,
    257 * _0x13d398,
    281 * _0x13d398,
    262 * _0x13d398,
    271 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    261.5 * _0x13d398,
    267 * _0x13d398,
    261.5 * _0x13d398,
    267 * _0x13d398,
    261 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    260 * _0x13d398,
    249 * _0x13d398,
    251 * _0x13d398,
    242 * _0x13d398,
    241 * _0x13d398,
    241 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240 * _0x13d398,
    240 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200 * _0x13d398,
    240 * _0x13d398,
    200 * _0x13d398,
    240 * _0x13d398,
    160 * _0x13d398,
    240 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    145 * _0x13d398,
    244 * _0x13d398,
    142 * _0x13d398,
    250 * _0x13d398,
    139 * _0x13d398,
    264 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[4], _0x4788c4[4], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(130 * _0x13d398, 264 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    132 * _0x13d398,
    244 * _0x13d398,
    144 * _0x13d398,
    235 * _0x13d398,
    157 * _0x13d398,
    232 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    245 * _0x13d398,
    232 * _0x13d398,
    201 * _0x13d398,
    232 * _0x13d398,
    245 * _0x13d398,
    232 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    264 * _0x13d398,
    235 * _0x13d398,
    269 * _0x13d398,
    251 * _0x13d398,
    270 * _0x13d398,
    264 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    272 * _0x13d398,
    291 * _0x13d398,
    248 * _0x13d398,
    299 * _0x13d398,
    242 * _0x13d398,
    299 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200 * _0x13d398,
    299 * _0x13d398,
    200 * _0x13d398,
    299 * _0x13d398,
    158 * _0x13d398,
    299 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    139 * _0x13d398,
    298 * _0x13d398,
    130 * _0x13d398,
    276 * _0x13d398,
    130 * _0x13d398,
    265 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[4], 6 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(140 * _0x13d398, 265.33333587646484 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    141 * _0x13d398,
    250.33333587646484 * _0x13d398,
    148 * _0x13d398,
    244.33333587646484 * _0x13d398,
    160 * _0x13d398,
    241.33333587646484 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200 * _0x13d398,
    241.33333587646484 * _0x13d398,
    200 * _0x13d398,
    241.33333587646484 * _0x13d398,
    240 * _0x13d398,
    241.33333587646484 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    256 * _0x13d398,
    243.33333587646484 * _0x13d398,
    260 * _0x13d398,
    255.33333587646484 * _0x13d398,
    260 * _0x13d398,
    265.33333587646484 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    261 * _0x13d398,
    281.33333587646484 * _0x13d398,
    247 * _0x13d398,
    289.33333587646484 * _0x13d398,
    240 * _0x13d398,
    289.33333587646484 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    161 * _0x13d398,
    289.33333587646484 * _0x13d398,
    200.5 * _0x13d398,
    289.33333587646484 * _0x13d398,
    161 * _0x13d398,
    289.33333587646484 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    149 * _0x13d398,
    288.33333587646484 * _0x13d398,
    142 * _0x13d398,
    278.33333587646484 * _0x13d398,
    140 * _0x13d398,
    266.33333587646484 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[4], 6 * _0x13d398);
  _0x3a4547.globalAlpha = 0.5;
  _0x3a4547.scale(1, 1);
  _0x3a4547.translate(105 * _0x13d398, 155 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(
    59.27557373046875 * _0x13d398,
    20.406280517578125 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    74.27557373046875 * _0x13d398,
    5.406280517578125 * _0x13d398,
    90.27557373046875 * _0x13d398,
    6.406280517578125 * _0x13d398,
    99.27557373046875 * _0x13d398,
    5.406280517578125 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    120.27557373046875 * _0x13d398,
    5.406280517578125 * _0x13d398,
    126.27557373046875 * _0x13d398,
    10.406280517578125 * _0x13d398,
    136.27557373046875 * _0x13d398,
    20.406280517578125 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    157.77557373046875 * _0x13d398,
    37.906280517578125 * _0x13d398,
    157.77557373046875 * _0x13d398,
    37.906280517578125 * _0x13d398,
    179.27557373046875 * _0x13d398,
    55.406280517578125 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    190.27557373046875 * _0x13d398,
    63.406280517578125 * _0x13d398,
    192.27557373046875 * _0x13d398,
    77.40628051757812 * _0x13d398,
    189.27557373046875 * _0x13d398,
    91.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    183.27557373046875 * _0x13d398,
    108.40628051757812 * _0x13d398,
    176.27557373046875 * _0x13d398,
    110.40628051757812 * _0x13d398,
    169.27557373046875 * _0x13d398,
    118.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    152.27557373046875 * _0x13d398,
    133.40628051757812 * _0x13d398,
    152.27557373046875 * _0x13d398,
    133.40628051757812 * _0x13d398,
    135.27557373046875 * _0x13d398,
    148.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    87.27557373046875 * _0x13d398,
    143.40628051757812 * _0x13d398,
    87.27557373046875 * _0x13d398,
    143.40628051757812 * _0x13d398,
    39.27557373046875 * _0x13d398,
    138.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    26.77557373046875 * _0x13d398,
    123.40628051757812 * _0x13d398,
    26.77557373046875 * _0x13d398,
    123.40628051757812 * _0x13d398,
    14.27557373046875 * _0x13d398,
    108.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    2.27557373046875 * _0x13d398,
    95.40628051757812 * _0x13d398,
    2.27557373046875 * _0x13d398,
    92.40628051757812 * _0x13d398,
    3.27557373046875 * _0x13d398,
    83.40628051757812 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    4.27557373046875 * _0x13d398,
    63.406280517578125 * _0x13d398,
    12.27557373046875 * _0x13d398,
    60.406280517578125 * _0x13d398,
    24.27557373046875 * _0x13d398,
    40.406280517578125 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[5], _0x4788c4[5], 4 * _0x13d398);
  _0x3a4547.globalAlpha = 1;
  _0x3a4547.translate(-110 * _0x13d398, -155 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(104 * _0x13d398, 237.8000030517578 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    110 * _0x13d398,
    237.8000030517578 * _0x13d398,
    110 * _0x13d398,
    237.8000030517578 * _0x13d398,
    116 * _0x13d398,
    237.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    241.8000030517578 * _0x13d398,
    116 * _0x13d398,
    241.8000030517578 * _0x13d398,
    116 * _0x13d398,
    245.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    245.3000030517578 * _0x13d398,
    115 * _0x13d398,
    245.3000030517578 * _0x13d398,
    114 * _0x13d398,
    244.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    109.5 * _0x13d398,
    244.8000030517578 * _0x13d398,
    109.5 * _0x13d398,
    244.8000030517578 * _0x13d398,
    105 * _0x13d398,
    244.8000030517578 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(115 * _0x13d398, 211.20000457763672 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    106 * _0x13d398,
    216.20000457763672 * _0x13d398,
    101 * _0x13d398,
    234.20000457763672 * _0x13d398,
    102 * _0x13d398,
    241.20000457763672 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    102 * _0x13d398,
    260.2000045776367 * _0x13d398,
    115 * _0x13d398,
    269.2000045776367 * _0x13d398,
    115 * _0x13d398,
    269.2000045776367 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    265.2000045776367 * _0x13d398,
    115.5 * _0x13d398,
    265.2000045776367 * _0x13d398,
    116 * _0x13d398,
    261.2000045776367 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    112 * _0x13d398,
    264 * _0x13d398,
    108 * _0x13d398,
    254 * _0x13d398,
    106 * _0x13d398,
    242 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    105 * _0x13d398,
    232 * _0x13d398,
    110 * _0x13d398,
    222 * _0x13d398,
    115 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    116 * _0x13d398,
    216.75 * _0x13d398,
    115.5 * _0x13d398,
    217.375 * _0x13d398,
    116 * _0x13d398,
    216.75 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(120 * _0x13d398, 207 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    206 * _0x13d398,
    114 * _0x13d398,
    209 * _0x13d398,
    114 * _0x13d398,
    211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    114 * _0x13d398,
    268 * _0x13d398,
    114 * _0x13d398,
    241 * _0x13d398,
    114 * _0x13d398,
    271 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    115 * _0x13d398,
    276 * _0x13d398,
    118 * _0x13d398,
    276 * _0x13d398,
    120 * _0x13d398,
    276 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    122 * _0x13d398,
    273 * _0x13d398,
    120.5 * _0x13d398,
    274.5 * _0x13d398,
    121 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    241 * _0x13d398,
    121 * _0x13d398,
    241 * _0x13d398,
    121 * _0x13d398,
    209 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(284 * _0x13d398, 238 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    289.5 * _0x13d398,
    238 * _0x13d398,
    289.5 * _0x13d398,
    238 * _0x13d398,
    295 * _0x13d398,
    238 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    295 * _0x13d398,
    241.5 * _0x13d398,
    295 * _0x13d398,
    241.5 * _0x13d398,
    295 * _0x13d398,
    245 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    289.5 * _0x13d398,
    245 * _0x13d398,
    289.5 * _0x13d398,
    245 * _0x13d398,
    284 * _0x13d398,
    245 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(283 * _0x13d398, 211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    293 * _0x13d398,
    216 * _0x13d398,
    297 * _0x13d398,
    231 * _0x13d398,
    297 * _0x13d398,
    241 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    298 * _0x13d398,
    254 * _0x13d398,
    290 * _0x13d398,
    265 * _0x13d398,
    284 * _0x13d398,
    269 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    283 * _0x13d398,
    266 * _0x13d398,
    283.5 * _0x13d398,
    266 * _0x13d398,
    283 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    290 * _0x13d398,
    260 * _0x13d398,
    292 * _0x13d398,
    251 * _0x13d398,
    293 * _0x13d398,
    242 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    292 * _0x13d398,
    223 * _0x13d398,
    289 * _0x13d398,
    224 * _0x13d398,
    284 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(280 * _0x13d398, 206 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    284 * _0x13d398,
    206 * _0x13d398,
    285 * _0x13d398,
    208 * _0x13d398,
    285 * _0x13d398,
    211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    285 * _0x13d398,
    241.5 * _0x13d398,
    285 * _0x13d398,
    241.5 * _0x13d398,
    285 * _0x13d398,
    272 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    284 * _0x13d398,
    275 * _0x13d398,
    284 * _0x13d398,
    275 * _0x13d398,
    280 * _0x13d398,
    275 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    279 * _0x13d398,
    273.5 * _0x13d398,
    279 * _0x13d398,
    273.5 * _0x13d398,
    278 * _0x13d398,
    272 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    278 * _0x13d398,
    240.5 * _0x13d398,
    278 * _0x13d398,
    240.5 * _0x13d398,
    278 * _0x13d398,
    209 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(138 * _0x13d398, 298.40000915527344 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    141 * _0x13d398,
    311.40000915527344 * _0x13d398,
    151 * _0x13d398,
    314.40000915527344 * _0x13d398,
    162 * _0x13d398,
    316.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    224 * _0x13d398,
    316.40000915527344 * _0x13d398,
    200 * _0x13d398,
    315.90000915527344 * _0x13d398,
    238 * _0x13d398,
    315.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    254 * _0x13d398,
    316.40000915527344 * _0x13d398,
    261 * _0x13d398,
    306.40000915527344 * _0x13d398,
    264 * _0x13d398,
    298.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    255 * _0x13d398,
    304.40000915527344 * _0x13d398,
    250 * _0x13d398,
    306.40000915527344 * _0x13d398,
    244 * _0x13d398,
    306.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    201 * _0x13d398,
    306.90000915527344 * _0x13d398,
    201 * _0x13d398,
    306.90000915527344 * _0x13d398,
    158 * _0x13d398,
    307.40000915527344 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    150 * _0x13d398,
    306.40000915527344 * _0x13d398,
    148 * _0x13d398,
    306.40000915527344 * _0x13d398,
    139 * _0x13d398,
    300.40000915527344 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(161 * _0x13d398, 177.5999984741211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    130 * _0x13d398,
    175.5999984741211 * _0x13d398,
    123 * _0x13d398,
    190.5999984741211 * _0x13d398,
    122 * _0x13d398,
    205.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    277.5999984741211 * _0x13d398,
    122 * _0x13d398,
    242.5999984741211 * _0x13d398,
    122 * _0x13d398,
    279.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    128 * _0x13d398,
    297.5999984741211 * _0x13d398,
    137 * _0x13d398,
    299.5999984741211 * _0x13d398,
    143 * _0x13d398,
    300.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    163 * _0x13d398,
    301.0999984741211 * _0x13d398,
    163 * _0x13d398,
    301.0999984741211 * _0x13d398,
    183 * _0x13d398,
    301.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    150 * _0x13d398,
    300.5999984741211 * _0x13d398,
    135 * _0x13d398,
    290.5999984741211 * _0x13d398,
    134 * _0x13d398,
    267.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    133 * _0x13d398,
    245.5999984741211 * _0x13d398,
    146 * _0x13d398,
    235.5999984741211 * _0x13d398,
    164 * _0x13d398,
    235.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    206 * _0x13d398,
    236.0999984741211 * _0x13d398,
    206 * _0x13d398,
    236.0999984741211 * _0x13d398,
    248 * _0x13d398,
    236.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    266 * _0x13d398,
    243.5999984741211 * _0x13d398,
    268 * _0x13d398,
    259.5999984741211 * _0x13d398,
    267 * _0x13d398,
    266.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    266 * _0x13d398,
    288.5999984741211 * _0x13d398,
    251 * _0x13d398,
    294.5999984741211 * _0x13d398,
    244 * _0x13d398,
    297.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    228.5 * _0x13d398,
    299.5999984741211 * _0x13d398,
    228.5 * _0x13d398,
    299.5999984741211 * _0x13d398,
    213 * _0x13d398,
    301.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    236 * _0x13d398,
    301.0999984741211 * _0x13d398,
    236 * _0x13d398,
    301.0999984741211 * _0x13d398,
    259 * _0x13d398,
    300.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    272 * _0x13d398,
    295.5999984741211 * _0x13d398,
    277 * _0x13d398,
    288.5999984741211 * _0x13d398,
    278 * _0x13d398,
    271.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    277.5 * _0x13d398,
    236.5999984741211 * _0x13d398,
    277.5 * _0x13d398,
    236.5999984741211 * _0x13d398,
    277 * _0x13d398,
    201.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    276 * _0x13d398,
    186.5999984741211 * _0x13d398,
    265 * _0x13d398,
    178.5999984741211 * _0x13d398,
    254 * _0x13d398,
    177.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    247.5 * _0x13d398,
    177.5999984741211 * _0x13d398,
    247.5 * _0x13d398,
    177.5999984741211 * _0x13d398,
    241 * _0x13d398,
    177.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    255 * _0x13d398,
    202.5999984741211 * _0x13d398,
    214 * _0x13d398,
    217.5999984741211 * _0x13d398,
    201 * _0x13d398,
    215.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    170 * _0x13d398,
    215.5999984741211 * _0x13d398,
    152 * _0x13d398,
    197.5999984741211 * _0x13d398,
    161 * _0x13d398,
    178.5999984741211 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[2], _0x4788c4[2], 4 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(162 * _0x13d398, 175.5999984741211 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    153 * _0x13d398,
    176.0999984741211 * _0x13d398,
    153 * _0x13d398,
    176.0999984741211 * _0x13d398,
    144 * _0x13d398,
    176.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    125 * _0x13d398,
    178.5999984741211 * _0x13d398,
    121 * _0x13d398,
    196.5999984741211 * _0x13d398,
    121 * _0x13d398,
    207.5999984741211 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    121 * _0x13d398,
    243.20000076293945 * _0x13d398,
    121 * _0x13d398,
    243.20000076293945 * _0x13d398,
    121 * _0x13d398,
    278.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    126 * _0x13d398,
    298.8000030517578 * _0x13d398,
    137 * _0x13d398,
    300.8000030517578 * _0x13d398,
    146 * _0x13d398,
    302.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    302.8000030517578 * _0x13d398,
    200.5 * _0x13d398,
    302.8000030517578 * _0x13d398,
    255 * _0x13d398,
    302.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    271 * _0x13d398,
    301.8000030517578 * _0x13d398,
    279 * _0x13d398,
    288.8000030517578 * _0x13d398,
    279 * _0x13d398,
    273.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    279 * _0x13d398,
    236.8000030517578 * _0x13d398,
    279 * _0x13d398,
    236.8000030517578 * _0x13d398,
    279 * _0x13d398,
    199.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    274 * _0x13d398,
    178.8000030517578 * _0x13d398,
    263 * _0x13d398,
    177.8000030517578 * _0x13d398,
    255 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    248 * _0x13d398,
    175.8000030517578 * _0x13d398,
    248 * _0x13d398,
    175.8000030517578 * _0x13d398,
    241 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    240 * _0x13d398,
    175.8000030517578 * _0x13d398,
    240 * _0x13d398,
    175.8000030517578 * _0x13d398,
    239 * _0x13d398,
    175.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    254 * _0x13d398,
    200.8000030517578 * _0x13d398,
    222 * _0x13d398,
    211.8000030517578 * _0x13d398,
    202 * _0x13d398,
    212.8000030517578 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    168 * _0x13d398,
    213.8000030517578 * _0x13d398,
    151 * _0x13d398,
    190.8000030517578 * _0x13d398,
    163 * _0x13d398,
    176.8000030517578 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[3], 6 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(198 * _0x13d398, 161.4000015258789 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    198 * _0x13d398,
    186.9000015258789 * _0x13d398,
    198 * _0x13d398,
    186.9000015258789 * _0x13d398,
    198 * _0x13d398,
    212.4000015258789 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    201 * _0x13d398,
    212.4000015258789 * _0x13d398,
    201 * _0x13d398,
    212.4000015258789 * _0x13d398,
    204 * _0x13d398,
    212.4000015258789 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    204 * _0x13d398,
    186.9000015258789 * _0x13d398,
    204 * _0x13d398,
    186.9000015258789 * _0x13d398,
    204 * _0x13d398,
    161.4000015258789 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(161 * _0x13d398, 194 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    188 * _0x13d398,
    169 * _0x13d398,
    231 * _0x13d398,
    179 * _0x13d398,
    241 * _0x13d398,
    194 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    239.5 * _0x13d398,
    196 * _0x13d398,
    239.5 * _0x13d398,
    196 * _0x13d398,
    238 * _0x13d398,
    198 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    221 * _0x13d398,
    179 * _0x13d398,
    182 * _0x13d398,
    182 * _0x13d398,
    165 * _0x13d398,
    198 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(157 * _0x13d398, 188.80000019073486 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    162 * _0x13d398,
    150.80000019073486 * _0x13d398,
    241 * _0x13d398,
    150.80000019073486 * _0x13d398,
    245 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    242 * _0x13d398,
    224.80000019073486 * _0x13d398,
    162 * _0x13d398,
    228.80000019073486 * _0x13d398,
    157 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    159 * _0x13d398,
    188.80000019073486 * _0x13d398,
    159 * _0x13d398,
    188.80000019073486 * _0x13d398,
    161 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    168 * _0x13d398,
    216.80000019073486 * _0x13d398,
    231 * _0x13d398,
    218.80000019073486 * _0x13d398,
    241 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    236 * _0x13d398,
    156.80000019073486 * _0x13d398,
    169 * _0x13d398,
    152.80000019073486 * _0x13d398,
    161 * _0x13d398,
    188.80000019073486 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(156 * _0x13d398, 188 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    160 * _0x13d398,
    164 * _0x13d398,
    183 * _0x13d398,
    159 * _0x13d398,
    201 * _0x13d398,
    158 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    232 * _0x13d398,
    159 * _0x13d398,
    244 * _0x13d398,
    174 * _0x13d398,
    246 * _0x13d398,
    188 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    245 * _0x13d398,
    212 * _0x13d398,
    213 * _0x13d398,
    219 * _0x13d398,
    201 * _0x13d398,
    218 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    181 * _0x13d398,
    221 * _0x13d398,
    158 * _0x13d398,
    207 * _0x13d398,
    156 * _0x13d398,
    190 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(162 * _0x13d398, 189 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    166 * _0x13d398,
    170 * _0x13d398,
    185 * _0x13d398,
    165 * _0x13d398,
    201 * _0x13d398,
    164 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    227 * _0x13d398,
    165 * _0x13d398,
    240 * _0x13d398,
    178 * _0x13d398,
    239 * _0x13d398,
    188 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    239 * _0x13d398,
    204 * _0x13d398,
    210 * _0x13d398,
    210 * _0x13d398,
    201 * _0x13d398,
    210 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    182 * _0x13d398,
    211 * _0x13d398,
    166 * _0x13d398,
    200 * _0x13d398,
    162 * _0x13d398,
    190 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[1], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(131 * _0x13d398, 262 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    136 * _0x13d398,
    241 * _0x13d398,
    144 * _0x13d398,
    236 * _0x13d398,
    158 * _0x13d398,
    233 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    233 * _0x13d398,
    229 * _0x13d398,
    232 * _0x13d398,
    243 * _0x13d398,
    233 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    259 * _0x13d398,
    235 * _0x13d398,
    267 * _0x13d398,
    248 * _0x13d398,
    269 * _0x13d398,
    260 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    269 * _0x13d398,
    266.5 * _0x13d398,
    269 * _0x13d398,
    266.5 * _0x13d398,
    269 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    265 * _0x13d398,
    290 * _0x13d398,
    251 * _0x13d398,
    297 * _0x13d398,
    242 * _0x13d398,
    298 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    202 * _0x13d398,
    298 * _0x13d398,
    202 * _0x13d398,
    298 * _0x13d398,
    162 * _0x13d398,
    298 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    148 * _0x13d398,
    298 * _0x13d398,
    136 * _0x13d398,
    289 * _0x13d398,
    132 * _0x13d398,
    273 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    131.5 * _0x13d398,
    268 * _0x13d398,
    131.5 * _0x13d398,
    268 * _0x13d398,
    131 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    135 * _0x13d398,
    263 * _0x13d398,
    135 * _0x13d398,
    263 * _0x13d398,
    139 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    139 * _0x13d398,
    281 * _0x13d398,
    151 * _0x13d398,
    287 * _0x13d398,
    160 * _0x13d398,
    290 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200.5 * _0x13d398,
    290 * _0x13d398,
    200.5 * _0x13d398,
    290 * _0x13d398,
    241 * _0x13d398,
    290 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    252 * _0x13d398,
    290 * _0x13d398,
    257 * _0x13d398,
    281 * _0x13d398,
    262 * _0x13d398,
    271 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    261.5 * _0x13d398,
    267 * _0x13d398,
    261.5 * _0x13d398,
    267 * _0x13d398,
    261 * _0x13d398,
    263 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    260 * _0x13d398,
    249 * _0x13d398,
    251 * _0x13d398,
    242 * _0x13d398,
    241 * _0x13d398,
    241 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240.5 * _0x13d398,
    240 * _0x13d398,
    240 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200 * _0x13d398,
    240 * _0x13d398,
    200 * _0x13d398,
    240 * _0x13d398,
    160 * _0x13d398,
    240 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    145 * _0x13d398,
    244 * _0x13d398,
    142 * _0x13d398,
    250 * _0x13d398,
    139 * _0x13d398,
    264 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, _0x4788c4[0], _0x4788c4[0], 2 * _0x13d398);
  _0x3a4547.beginPath();
  _0x3a4547.lineCap = "round";
  _0x3a4547.lineJoin = "round";
  _0x3a4547.moveTo(130 * _0x13d398, 264 * _0x13d398);
  _0x3a4547.bezierCurveTo(
    132 * _0x13d398,
    244 * _0x13d398,
    144 * _0x13d398,
    235 * _0x13d398,
    157 * _0x13d398,
    232 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    245 * _0x13d398,
    232 * _0x13d398,
    201 * _0x13d398,
    232 * _0x13d398,
    245 * _0x13d398,
    232 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    264 * _0x13d398,
    235 * _0x13d398,
    269 * _0x13d398,
    251 * _0x13d398,
    270 * _0x13d398,
    264 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    272 * _0x13d398,
    291 * _0x13d398,
    248 * _0x13d398,
    299 * _0x13d398,
    242 * _0x13d398,
    299 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    200 * _0x13d398,
    299 * _0x13d398,
    200 * _0x13d398,
    299 * _0x13d398,
    158 * _0x13d398,
    299 * _0x13d398
  );
  _0x3a4547.bezierCurveTo(
    139 * _0x13d398,
    298 * _0x13d398,
    130 * _0x13d398,
    276 * _0x13d398,
    130 * _0x13d398,
    265 * _0x13d398
  );
  _0x3a4547.closePath();
  fill_path(_0x3a4547, undefined, _0x4788c4[1], 2 * _0x13d398);
  return _0x490639;
}
function create_windmill_chest(_0x273444, _0x5a7e8f) {
  var _0x65f116 = document.createElement("canvas");
  var _0x3f17df = _0x65f116.getContext("2d");
  _0x65f116.width = 243 * _0x273444;
  _0x65f116.height = 172 * _0x273444;
  circle(_0x3f17df, 119.5 * _0x273444, 140.125 * _0x273444, 19 * _0x273444);
  fill_path(_0x3f17df, undefined, _0x5a7e8f[1], 5 * _0x273444);
  _0x3f17df.beginPath();
  _0x3f17df.lineCap = "round";
  _0x3f17df.lineJoin = "round";
  _0x3f17df.moveTo(36.5 * _0x273444, 20.125 * _0x273444);
  _0x3f17df.bezierCurveTo(
    119.5 * _0x273444,
    20.625 * _0x273444,
    119.5 * _0x273444,
    20.625 * _0x273444,
    202.5 * _0x273444,
    21.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    214.5 * _0x273444,
    22.125 * _0x273444,
    216.5 * _0x273444,
    26.125 * _0x273444,
    217.5 * _0x273444,
    35.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    221 * _0x273444,
    76.125 * _0x273444,
    221 * _0x273444,
    76.125 * _0x273444,
    224.5 * _0x273444,
    117.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    225.5 * _0x273444,
    127.125 * _0x273444,
    221.5 * _0x273444,
    131.125 * _0x273444,
    210.5 * _0x273444,
    132.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    117.5 * _0x273444,
    132.125 * _0x273444,
    117.5 * _0x273444,
    132.125 * _0x273444,
    24.5 * _0x273444,
    132.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    14.5 * _0x273444,
    131.125 * _0x273444,
    13.5 * _0x273444,
    126.125 * _0x273444,
    16.5 * _0x273444,
    111.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    19.5 * _0x273444,
    73.125 * _0x273444,
    19.5 * _0x273444,
    73.125 * _0x273444,
    22.5 * _0x273444,
    35.125 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    23.5 * _0x273444,
    23.125 * _0x273444,
    29.5 * _0x273444,
    21.125 * _0x273444,
    36.5 * _0x273444,
    20.125 * _0x273444
  );
  _0x3f17df.closePath();
  fill_path(_0x3f17df, _0x5a7e8f[0], _0x5a7e8f[1], 4 * _0x273444);
  _0x3f17df.beginPath();
  _0x3f17df.lineCap = "round";
  _0x3f17df.lineJoin = "round";
  _0x3f17df.moveTo(15.5 * _0x273444, 138.625 * _0x273444);
  _0x3f17df.bezierCurveTo(
    120 * _0x273444,
    138.625 * _0x273444,
    120 * _0x273444,
    138.625 * _0x273444,
    224.5 * _0x273444,
    138.625 * _0x273444
  );
  _0x3f17df.closePath();
  fill_path(_0x3f17df, undefined, _0x5a7e8f[2], 10 * _0x273444);
  _0x3f17df.beginPath();
  _0x3f17df.lineCap = "round";
  _0x3f17df.lineJoin = "round";
  _0x3f17df.moveTo(13.5 * _0x273444, 131.625 * _0x273444);
  _0x3f17df.bezierCurveTo(
    119.5 * _0x273444,
    131.625 * _0x273444,
    119.5 * _0x273444,
    131.625 * _0x273444,
    225.5 * _0x273444,
    131.625 * _0x273444
  );
  _0x3f17df.closePath();
  fill_path(_0x3f17df, undefined, _0x5a7e8f[3], 10 * _0x273444);
  circle(
    _0x3f17df,
    119.5 * _0x273444,
    140.125 * _0x273444,
    14.866068747318506 * _0x273444
  );
  fill_path(_0x3f17df, _0x5a7e8f[4], _0x5a7e8f[5], 4 * _0x273444);
  _0x3f17df.beginPath();
  _0x3f17df.lineCap = "round";
  _0x3f17df.lineJoin = "round";
  _0x3f17df.moveTo(106.5 * _0x273444, 146.625 * _0x273444);
  _0x3f17df.bezierCurveTo(
    116.5 * _0x273444,
    137.625 * _0x273444,
    118.5 * _0x273444,
    136.625 * _0x273444,
    123.5 * _0x273444,
    138.625 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    131.5 * _0x273444,
    145.625 * _0x273444,
    133.5 * _0x273444,
    148.625 * _0x273444,
    127.5 * _0x273444,
    152.625 * _0x273444
  );
  _0x3f17df.bezierCurveTo(
    115.5 * _0x273444,
    158.625 * _0x273444,
    111.5 * _0x273444,
    153.625 * _0x273444,
    106.5 * _0x273444,
    147.625 * _0x273444
  );
  _0x3f17df.closePath();
  fill_path(_0x3f17df, _0x5a7e8f[6], _0x5a7e8f[7], 2 * _0x273444);
  _0x3f17df.beginPath();
  _0x3f17df.lineCap = "round";
  _0x3f17df.lineJoin = "round";
  _0x3f17df.moveTo(105.5 * _0x273444, 146.625 * _0x273444);
  _0x3f17df.bezierCurveTo(
    116.5 * _0x273444,
    159.625 * _0x273444,
    124.5 * _0x273444,
    156.625 * _0x273444,
    132.5 * _0x273444,
    146.625 * _0x273444
  );
  fill_path(_0x3f17df, undefined, _0x5a7e8f[8], 5 * _0x273444);
  _0x3f17df.save();
  _0x3f17df.translate(75.5 * _0x273444, 80.125 * _0x273444);
  round_rect(
    _0x3f17df,
    -39 * _0x273444,
    -40 * _0x273444,
    78 * _0x273444,
    78 * _0x273444,
    10 * _0x273444
  );
  _0x3f17df.restore();
  fill_path(_0x3f17df, _0x5a7e8f[9]);
  _0x3f17df.save();
  _0x3f17df.translate(167 * _0x273444, 80.125 * _0x273444);
  round_rect(
    _0x3f17df,
    -38.5 * _0x273444,
    -39 * _0x273444,
    78 * _0x273444,
    78 * _0x273444,
    10 * _0x273444
  );
  _0x3f17df.restore();
  fill_path(_0x3f17df, _0x5a7e8f[9]);
  return _0x65f116;
}
function create_cake(_0x178852, _0xd677b4, _0x63cc2d) {
  var _0x16d5ce = document.createElement("canvas");
  var _0x33442a = _0x16d5ce.getContext("2d");
  _0x16d5ce.width = 400 * _0x178852;
  _0x16d5ce.height = 400 * _0x178852;
  _0x33442a.beginPath();
  _0x33442a.lineCap = "round";
  _0x33442a.lineJoin = "round";
  _0x33442a.moveTo(96.5 * _0x178852, 277.34375 * _0x178852);
  _0x33442a.bezierCurveTo(
    197.5 * _0x178852,
    259.84375 * _0x178852,
    197.5 * _0x178852,
    259.84375 * _0x178852,
    298.5 * _0x178852,
    242.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    311.5 * _0x178852,
    231.34375 * _0x178852,
    307.5 * _0x178852,
    168.34375 * _0x178852,
    298.5 * _0x178852,
    150.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    198 * _0x178852,
    170.34375 * _0x178852,
    198 * _0x178852,
    170.34375 * _0x178852,
    97.5 * _0x178852,
    190.34375 * _0x178852
  );
  _0x33442a.closePath();
  fill_path(_0x33442a, _0x63cc2d[1], _0x63cc2d[2], 12 * _0x178852);
  _0x33442a.beginPath();
  _0x33442a.lineCap = "round";
  _0x33442a.lineJoin = "round";
  _0x33442a.moveTo(98.5 * _0x178852, 214.34375 * _0x178852);
  _0x33442a.bezierCurveTo(
    199 * _0x178852,
    196.34375 * _0x178852,
    199 * _0x178852,
    196.34375 * _0x178852,
    299.5 * _0x178852,
    178.34375 * _0x178852
  );
  _0x33442a.closePath();
  fill_path(_0x33442a, undefined, _0x63cc2d[2], 12 * _0x178852);
  _0x33442a.beginPath();
  _0x33442a.lineCap = "round";
  _0x33442a.lineJoin = "round";
  _0x33442a.moveTo(98.5 * _0x178852, 247.34375 * _0x178852);
  _0x33442a.bezierCurveTo(
    201.5 * _0x178852,
    229.34375 * _0x178852,
    201.5 * _0x178852,
    229.34375 * _0x178852,
    304.5 * _0x178852,
    211.34375 * _0x178852
  );
  _0x33442a.closePath();
  fill_path(_0x33442a, undefined, _0x63cc2d[2], 12 * _0x178852);
  _0x33442a.beginPath();
  _0x33442a.lineCap = "round";
  _0x33442a.lineJoin = "round";
  _0x33442a.moveTo(97.5 * _0x178852, 189.34375 * _0x178852);
  _0x33442a.bezierCurveTo(
    97 * _0x178852,
    199.84375 * _0x178852,
    97 * _0x178852,
    199.84375 * _0x178852,
    96.5 * _0x178852,
    210.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    110.5 * _0x178852,
    204.34375 * _0x178852,
    110.5 * _0x178852,
    204.34375 * _0x178852,
    124.5 * _0x178852,
    198.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    137.5 * _0x178852,
    203.84375 * _0x178852,
    137.5 * _0x178852,
    203.84375 * _0x178852,
    150.5 * _0x178852,
    209.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    172 * _0x178852,
    197.84375 * _0x178852,
    172 * _0x178852,
    197.84375 * _0x178852,
    193.5 * _0x178852,
    186.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    211.5 * _0x178852,
    189.84375 * _0x178852,
    211.5 * _0x178852,
    189.84375 * _0x178852,
    229.5 * _0x178852,
    193.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    240.5 * _0x178852,
    193.34375 * _0x178852,
    240.5 * _0x178852,
    193.34375 * _0x178852,
    251.5 * _0x178852,
    193.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    261 * _0x178852,
    182.84375 * _0x178852,
    261 * _0x178852,
    182.84375 * _0x178852,
    270.5 * _0x178852,
    172.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    287.5 * _0x178852,
    169.34375 * _0x178852,
    287.5 * _0x178852,
    169.34375 * _0x178852,
    304.5 * _0x178852,
    166.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    304.5 * _0x178852,
    156.34375 * _0x178852,
    300.5 * _0x178852,
    145.34375 * _0x178852,
    298.5 * _0x178852,
    147.34375 * _0x178852
  );
  _0x33442a.closePath();
  fill_path(_0x33442a, _0x63cc2d[3], _0x63cc2d[4], 12 * _0x178852);
  _0x33442a.beginPath();
  _0x33442a.lineCap = "round";
  _0x33442a.lineJoin = "round";
  _0x33442a.moveTo(300.5 * _0x178852, 147.34375 * _0x178852);
  _0x33442a.bezierCurveTo(
    293.5 * _0x178852,
    121.34375 * _0x178852,
    278.5 * _0x178852,
    106.34375 * _0x178852,
    256.5 * _0x178852,
    101.34375 * _0x178852
  );
  _0x33442a.bezierCurveTo(
    176.5 * _0x178852,
    145.34375 * _0x178852,
    176.5 * _0x178852,
    145.34375 * _0x178852,
    96.5 * _0x178852,
    189.34375 * _0x178852
  );
  _0x33442a.closePath();
  fill_path(_0x33442a, _0x63cc2d[5], _0x63cc2d[6], 12 * _0x178852);
  circle(
    _0x33442a,
    252.5 * _0x178852,
    129.34375 * _0x178852,
    18.027756377319946 * _0x178852
  );
  fill_path(_0x33442a, _0x63cc2d[7]);
  circle(
    _0x33442a,
    248.5 * _0x178852,
    121.34375 * _0x178852,
    8.246211251235321 * _0x178852
  );
  fill_path(_0x33442a, _0x63cc2d[8]);
  return _0x16d5ce;
}
function create_fishfood(_0x5af9bd, _0x165402, _0x15c4a2) {
  var _0x3e1274 = document.createElement("canvas");
  var _0x254219 = _0x3e1274.getContext("2d");
  _0x3e1274.width = 400 * _0x5af9bd;
  _0x3e1274.height = 400 * _0x5af9bd;
  _0x254219.globalAlpha = _0x165402 ? 0.5 : 1;
  _0x254219.translate(10 * _0x5af9bd, 5 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(100.5 * _0x5af9bd, 126.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    151.5 * _0x5af9bd,
    104.34375 * _0x5af9bd,
    279.5 * _0x5af9bd,
    188.34375 * _0x5af9bd,
    297.5 * _0x5af9bd,
    292.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    222.5 * _0x5af9bd,
    307.34375 * _0x5af9bd,
    106.5 * _0x5af9bd,
    196.34375 * _0x5af9bd,
    100.5 * _0x5af9bd,
    127.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0], _0x15c4a2[0], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(106.5 * _0x5af9bd, 131.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    140.5 * _0x5af9bd,
    142.34375 * _0x5af9bd,
    225.5 * _0x5af9bd,
    184.34375 * _0x5af9bd,
    290.5 * _0x5af9bd,
    287.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    270.5 * _0x5af9bd,
    188.34375 * _0x5af9bd,
    152.5 * _0x5af9bd,
    118.34375 * _0x5af9bd,
    107.5 * _0x5af9bd,
    131.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0]);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(157.5 * _0x5af9bd, 137.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    161.5 * _0x5af9bd,
    138.34375 * _0x5af9bd,
    164.5 * _0x5af9bd,
    140.34375 * _0x5af9bd,
    168.5 * _0x5af9bd,
    142.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    165.5 * _0x5af9bd,
    156.34375 * _0x5af9bd,
    141.5 * _0x5af9bd,
    176.34375 * _0x5af9bd,
    126.5 * _0x5af9bd,
    179.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    123.5 * _0x5af9bd,
    173.34375 * _0x5af9bd,
    120.5 * _0x5af9bd,
    169.34375 * _0x5af9bd,
    120.5 * _0x5af9bd,
    169.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    141.5 * _0x5af9bd,
    161.34375 * _0x5af9bd,
    156.5 * _0x5af9bd,
    145.34375 * _0x5af9bd,
    155.5 * _0x5af9bd,
    136.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0]);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(196.5 * _0x5af9bd, 151.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    211.5 * _0x5af9bd,
    158.34375 * _0x5af9bd,
    224.5 * _0x5af9bd,
    171.34375 * _0x5af9bd,
    229.5 * _0x5af9bd,
    176.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    246.5 * _0x5af9bd,
    163.34375 * _0x5af9bd,
    259.5 * _0x5af9bd,
    166.34375 * _0x5af9bd,
    272.5 * _0x5af9bd,
    168.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    254.5 * _0x5af9bd,
    146.34375 * _0x5af9bd,
    214.5 * _0x5af9bd,
    145.34375 * _0x5af9bd,
    198.5 * _0x5af9bd,
    151.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0], _0x15c4a2[0], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(154.5 * _0x5af9bd, 222.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    164.5 * _0x5af9bd,
    234.34375 * _0x5af9bd,
    173.5 * _0x5af9bd,
    242.34375 * _0x5af9bd,
    178.5 * _0x5af9bd,
    245.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    174.5 * _0x5af9bd,
    265.34375 * _0x5af9bd,
    180.5 * _0x5af9bd,
    274.34375 * _0x5af9bd,
    186.5 * _0x5af9bd,
    283.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    165.5 * _0x5af9bd,
    277.34375 * _0x5af9bd,
    151.5 * _0x5af9bd,
    245.34375 * _0x5af9bd,
    155.5 * _0x5af9bd,
    224.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0], _0x15c4a2[0], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(279.5 * _0x5af9bd, 294.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    286.5 * _0x5af9bd,
    285.84375 * _0x5af9bd,
    286.5 * _0x5af9bd,
    285.84375 * _0x5af9bd,
    293.5 * _0x5af9bd,
    277.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    315.5 * _0x5af9bd,
    280.34375 * _0x5af9bd,
    315.5 * _0x5af9bd,
    280.34375 * _0x5af9bd,
    337.5 * _0x5af9bd,
    283.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    340.5 * _0x5af9bd,
    311.34375 * _0x5af9bd,
    317.5 * _0x5af9bd,
    326.34375 * _0x5af9bd,
    307.5 * _0x5af9bd,
    331.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[0], _0x15c4a2[0], 12 * _0x5af9bd);
  _0x254219.globalAlpha = 1;
  _0x254219.translate(-10 * _0x5af9bd, -5 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(100.5 * _0x5af9bd, 126.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    151.5 * _0x5af9bd,
    104.34375 * _0x5af9bd,
    279.5 * _0x5af9bd,
    188.34375 * _0x5af9bd,
    297.5 * _0x5af9bd,
    292.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    222.5 * _0x5af9bd,
    307.34375 * _0x5af9bd,
    106.5 * _0x5af9bd,
    196.34375 * _0x5af9bd,
    100.5 * _0x5af9bd,
    127.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[1], _0x15c4a2[2], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(106.5 * _0x5af9bd, 131.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    140.5 * _0x5af9bd,
    142.34375 * _0x5af9bd,
    225.5 * _0x5af9bd,
    184.34375 * _0x5af9bd,
    290.5 * _0x5af9bd,
    287.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    270.5 * _0x5af9bd,
    188.34375 * _0x5af9bd,
    152.5 * _0x5af9bd,
    118.34375 * _0x5af9bd,
    107.5 * _0x5af9bd,
    131.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[3]);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(157.5 * _0x5af9bd, 137.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    161.5 * _0x5af9bd,
    138.34375 * _0x5af9bd,
    164.5 * _0x5af9bd,
    140.34375 * _0x5af9bd,
    168.5 * _0x5af9bd,
    142.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    165.5 * _0x5af9bd,
    156.34375 * _0x5af9bd,
    141.5 * _0x5af9bd,
    176.34375 * _0x5af9bd,
    126.5 * _0x5af9bd,
    179.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    123.5 * _0x5af9bd,
    173.34375 * _0x5af9bd,
    120.5 * _0x5af9bd,
    169.34375 * _0x5af9bd,
    120.5 * _0x5af9bd,
    169.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    141.5 * _0x5af9bd,
    161.34375 * _0x5af9bd,
    156.5 * _0x5af9bd,
    145.34375 * _0x5af9bd,
    155.5 * _0x5af9bd,
    136.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[4]);
  circle(
    _0x254219,
    125.5 * _0x5af9bd,
    140.34375 * _0x5af9bd,
    11.180339887498949 * _0x5af9bd
  );
  fill_path(_0x254219, _0x15c4a2[5]);
  circle(
    _0x254219,
    122.5 * _0x5af9bd,
    135.34375 * _0x5af9bd,
    5.0990195135927845 * _0x5af9bd
  );
  fill_path(_0x254219, _0x15c4a2[6]);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(196.5 * _0x5af9bd, 151.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    211.5 * _0x5af9bd,
    158.34375 * _0x5af9bd,
    224.5 * _0x5af9bd,
    171.34375 * _0x5af9bd,
    229.5 * _0x5af9bd,
    176.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    246.5 * _0x5af9bd,
    163.34375 * _0x5af9bd,
    259.5 * _0x5af9bd,
    166.34375 * _0x5af9bd,
    272.5 * _0x5af9bd,
    168.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    254.5 * _0x5af9bd,
    146.34375 * _0x5af9bd,
    214.5 * _0x5af9bd,
    145.34375 * _0x5af9bd,
    198.5 * _0x5af9bd,
    151.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[7], _0x15c4a2[8], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(154.5 * _0x5af9bd, 222.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    164.5 * _0x5af9bd,
    234.34375 * _0x5af9bd,
    173.5 * _0x5af9bd,
    242.34375 * _0x5af9bd,
    178.5 * _0x5af9bd,
    245.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    174.5 * _0x5af9bd,
    265.34375 * _0x5af9bd,
    180.5 * _0x5af9bd,
    274.34375 * _0x5af9bd,
    186.5 * _0x5af9bd,
    283.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    165.5 * _0x5af9bd,
    277.34375 * _0x5af9bd,
    151.5 * _0x5af9bd,
    245.34375 * _0x5af9bd,
    155.5 * _0x5af9bd,
    224.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[7], _0x15c4a2[8], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(279.5 * _0x5af9bd, 294.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    286.5 * _0x5af9bd,
    285.84375 * _0x5af9bd,
    286.5 * _0x5af9bd,
    285.84375 * _0x5af9bd,
    293.5 * _0x5af9bd,
    277.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    315.5 * _0x5af9bd,
    280.34375 * _0x5af9bd,
    315.5 * _0x5af9bd,
    280.34375 * _0x5af9bd,
    337.5 * _0x5af9bd,
    283.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    340.5 * _0x5af9bd,
    311.34375 * _0x5af9bd,
    317.5 * _0x5af9bd,
    326.34375 * _0x5af9bd,
    307.5 * _0x5af9bd,
    331.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, _0x15c4a2[7], _0x15c4a2[8], 12 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(296.5 * _0x5af9bd, 287.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    311.5 * _0x5af9bd,
    291.34375 * _0x5af9bd,
    311.5 * _0x5af9bd,
    291.34375 * _0x5af9bd,
    326.5 * _0x5af9bd,
    295.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, undefined, _0x15c4a2[9], 6 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(294.5 * _0x5af9bd, 289.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    308.5 * _0x5af9bd,
    297.34375 * _0x5af9bd,
    308.5 * _0x5af9bd,
    297.34375 * _0x5af9bd,
    322.5 * _0x5af9bd,
    305.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, undefined, _0x15c4a2[9], 6 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(294.5 * _0x5af9bd, 291.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    304 * _0x5af9bd,
    303.34375 * _0x5af9bd,
    304 * _0x5af9bd,
    303.34375 * _0x5af9bd,
    313.5 * _0x5af9bd,
    315.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, undefined, _0x15c4a2[9], 6 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(226.5 * _0x5af9bd, 161.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    230.5 * _0x5af9bd,
    160.34375 * _0x5af9bd,
    236.5 * _0x5af9bd,
    158.34375 * _0x5af9bd,
    238.5 * _0x5af9bd,
    161.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    238.5 * _0x5af9bd,
    157.34375 * _0x5af9bd,
    228.5 * _0x5af9bd,
    159.34375 * _0x5af9bd,
    227.5 * _0x5af9bd,
    161.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, undefined, _0x15c4a2[9], 4 * _0x5af9bd);
  _0x254219.beginPath();
  _0x254219.lineCap = "round";
  _0x254219.lineJoin = "round";
  _0x254219.moveTo(167.5 * _0x5af9bd, 248.34375 * _0x5af9bd);
  _0x254219.bezierCurveTo(
    165.5 * _0x5af9bd,
    251.34375 * _0x5af9bd,
    168.5 * _0x5af9bd,
    256.34375 * _0x5af9bd,
    168.5 * _0x5af9bd,
    253.34375 * _0x5af9bd
  );
  _0x254219.bezierCurveTo(
    166.5 * _0x5af9bd,
    252.34375 * _0x5af9bd,
    168.5 * _0x5af9bd,
    246.34375 * _0x5af9bd,
    166.5 * _0x5af9bd,
    247.34375 * _0x5af9bd
  );
  _0x254219.closePath();
  fill_path(_0x254219, undefined, _0x15c4a2[9], 3 * _0x5af9bd);
  return _0x3e1274;
}
function create_fishfood_cooked(_0x233c21, _0x512c8c, _0x226e29) {
  var _0x5b398d = document.createElement("canvas");
  var _0x209646 = _0x5b398d.getContext("2d");
  _0x5b398d.width = 309 * _0x233c21;
  _0x5b398d.height = 287 * _0x233c21;
  _0x209646.globalAlpha = _0x512c8c ? 0.5 : 1;
  _0x209646.translate(10 * _0x233c21, 5 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(34.5 * _0x233c21, 38.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    91.5 * _0x233c21,
    30.53125 * _0x233c21,
    138.5 * _0x233c21,
    68.53125 * _0x233c21,
    169.5 * _0x233c21,
    93.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    208.5 * _0x233c21,
    128.53125 * _0x233c21,
    226.5 * _0x233c21,
    157.53125 * _0x233c21,
    233.5 * _0x233c21,
    209.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    195.5 * _0x233c21,
    218.53125 * _0x233c21,
    138.5 * _0x233c21,
    191.53125 * _0x233c21,
    105.5 * _0x233c21,
    157.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    54.5 * _0x233c21,
    112.53125 * _0x233c21,
    41.5 * _0x233c21,
    80.53125 * _0x233c21,
    33.5 * _0x233c21,
    38.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[0], _0x226e29[0], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(143.5 * _0x233c21, 74.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    164.5 * _0x233c21,
    73.53125 * _0x233c21,
    159 * _0x233c21,
    74.53125 * _0x233c21,
    174.5 * _0x233c21,
    74.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    186 * _0x233c21,
    86.53125 * _0x233c21,
    186 * _0x233c21,
    86.53125 * _0x233c21,
    197.5 * _0x233c21,
    98.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    186 * _0x233c21,
    97.03125 * _0x233c21,
    186 * _0x233c21,
    97.03125 * _0x233c21,
    174.5 * _0x233c21,
    95.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[0], _0x226e29[0], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(87.5 * _0x233c21, 142.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    92 * _0x233c21,
    160.03125 * _0x233c21,
    92 * _0x233c21,
    160.03125 * _0x233c21,
    96.5 * _0x233c21,
    177.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    108 * _0x233c21,
    181.53125 * _0x233c21,
    108 * _0x233c21,
    181.53125 * _0x233c21,
    119.5 * _0x233c21,
    185.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    116.5 * _0x233c21,
    175.53125 * _0x233c21,
    116.5 * _0x233c21,
    175.53125 * _0x233c21,
    113.5 * _0x233c21,
    165.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[0], _0x226e29[0], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(236.5 * _0x233c21, 189.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    274.5 * _0x233c21,
    197.53125 * _0x233c21,
    255.5 * _0x233c21,
    194.03125 * _0x233c21,
    274.5 * _0x233c21,
    198.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    272.5 * _0x233c21,
    236.53125 * _0x233c21,
    261.5 * _0x233c21,
    237.53125 * _0x233c21,
    242.5 * _0x233c21,
    248.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    230.5 * _0x233c21,
    231.03125 * _0x233c21,
    230.5 * _0x233c21,
    231.03125 * _0x233c21,
    218.5 * _0x233c21,
    213.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[0], _0x226e29[0], 10 * _0x233c21);
  _0x209646.globalAlpha = 1;
  _0x209646.translate(-10 * _0x233c21, -5 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(34.5 * _0x233c21, 38.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    91.5 * _0x233c21,
    30.53125 * _0x233c21,
    138.5 * _0x233c21,
    68.53125 * _0x233c21,
    169.5 * _0x233c21,
    93.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    208.5 * _0x233c21,
    128.53125 * _0x233c21,
    226.5 * _0x233c21,
    157.53125 * _0x233c21,
    233.5 * _0x233c21,
    209.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    195.5 * _0x233c21,
    218.53125 * _0x233c21,
    138.5 * _0x233c21,
    191.53125 * _0x233c21,
    105.5 * _0x233c21,
    157.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    54.5 * _0x233c21,
    112.53125 * _0x233c21,
    41.5 * _0x233c21,
    80.53125 * _0x233c21,
    33.5 * _0x233c21,
    38.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(143.5 * _0x233c21, 74.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    164.5 * _0x233c21,
    73.53125 * _0x233c21,
    159 * _0x233c21,
    74.53125 * _0x233c21,
    174.5 * _0x233c21,
    74.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    186 * _0x233c21,
    86.53125 * _0x233c21,
    186 * _0x233c21,
    86.53125 * _0x233c21,
    197.5 * _0x233c21,
    98.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    186 * _0x233c21,
    97.03125 * _0x233c21,
    186 * _0x233c21,
    97.03125 * _0x233c21,
    174.5 * _0x233c21,
    95.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(87.5 * _0x233c21, 142.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    92 * _0x233c21,
    160.03125 * _0x233c21,
    92 * _0x233c21,
    160.03125 * _0x233c21,
    96.5 * _0x233c21,
    177.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    108 * _0x233c21,
    181.53125 * _0x233c21,
    108 * _0x233c21,
    181.53125 * _0x233c21,
    119.5 * _0x233c21,
    185.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    116.5 * _0x233c21,
    175.53125 * _0x233c21,
    116.5 * _0x233c21,
    175.53125 * _0x233c21,
    113.5 * _0x233c21,
    165.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(236.5 * _0x233c21, 189.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    274.5 * _0x233c21,
    197.53125 * _0x233c21,
    255.5 * _0x233c21,
    194.03125 * _0x233c21,
    274.5 * _0x233c21,
    198.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    272.5 * _0x233c21,
    236.53125 * _0x233c21,
    261.5 * _0x233c21,
    237.53125 * _0x233c21,
    242.5 * _0x233c21,
    248.53125 * _0x233c21
  );
  _0x209646.bezierCurveTo(
    230.5 * _0x233c21,
    231.03125 * _0x233c21,
    230.5 * _0x233c21,
    231.03125 * _0x233c21,
    218.5 * _0x233c21,
    213.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 10 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(109.5 * _0x233c21, 51.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    107.5 * _0x233c21,
    92.53125 * _0x233c21,
    91.5 * _0x233c21,
    95.53125 * _0x233c21,
    59.5 * _0x233c21,
    101.53125 * _0x233c21
  );
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 7 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(72.5 * _0x233c21, 51.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    71 * _0x233c21,
    64.53125 * _0x233c21,
    69.5 * _0x233c21,
    76.53125 * _0x233c21,
    69.5 * _0x233c21,
    77.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 7 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(84.5 * _0x233c21, 63.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    70.5 * _0x233c21,
    65.03125 * _0x233c21,
    70.5 * _0x233c21,
    65.03125 * _0x233c21,
    56.5 * _0x233c21,
    66.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 7 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(125.5 * _0x233c21, 84.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    125.5 * _0x233c21,
    110.03125 * _0x233c21,
    125.5 * _0x233c21,
    110.03125 * _0x233c21,
    125.5 * _0x233c21,
    135.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 7 * _0x233c21);
  _0x209646.beginPath();
  _0x209646.lineCap = "round";
  _0x209646.lineJoin = "round";
  _0x209646.moveTo(149.5 * _0x233c21, 108.53125 * _0x233c21);
  _0x209646.bezierCurveTo(
    150 * _0x233c21,
    137.03125 * _0x233c21,
    150 * _0x233c21,
    137.03125 * _0x233c21,
    150.5 * _0x233c21,
    165.53125 * _0x233c21
  );
  _0x209646.closePath();
  fill_path(_0x209646, _0x226e29[1], _0x226e29[2], 7 * _0x233c21);
  return _0x5b398d;
}
function create_wall(_0x308c31, _0x589a8a, _0x4c903c) {
  var _0x30fb00 = document.createElement("canvas");
  var _0x1abe24 = _0x30fb00.getContext("2d");
  var _0x30b32d = _0x308c31 * 130;
  var _0x32fcb4 = _0x308c31 * 142;
  var _0x1b30a7 = _0x30b32d / 2;
  var _0x25ba62 = _0x32fcb4 / 2;
  _0x30fb00.width = _0x30b32d;
  _0x30fb00.height = _0x32fcb4;
  _0x1abe24.translate(_0x1b30a7, _0x25ba62 + 7 * _0x308c31);
  _0x1abe24.globalAlpha = _0x589a8a ? 0.5 : 1;
  circle(_0x1abe24, 0, 0, 60 * _0x308c31);
  fill_path(_0x1abe24, _0x4c903c[0]);
  _0x1abe24.translate(0, -7 * _0x308c31);
  _0x1abe24.globalAlpha = 1;
  circle(_0x1abe24, 0, 0, 60 * _0x308c31, 0);
  fill_path(_0x1abe24, _0x4c903c[1], _0x4c903c[2], 4 * _0x308c31);
  circle(_0x1abe24, 0, 0, 40 * _0x308c31);
  fill_path(_0x1abe24, _0x4c903c[3]);
  circle(_0x1abe24, 0, 0, 25 * _0x308c31);
  fill_path(_0x1abe24, _0x4c903c[4], _0x4c903c[5], 8 * _0x308c31);
  return _0x30fb00;
}
function create_delay_wall(_0x557ad0, _0x2546d6) {
  var _0x5c47f6 = document.createElement("canvas");
  var _0x57b600 = _0x5c47f6.getContext("2d");
  var _0xcedd15 = _0x557ad0 * 130;
  var _0x5718f1 = _0x557ad0 * 142;
  var _0x3368a0 = _0xcedd15 / 2;
  var _0x25d4f7 = _0x5718f1 / 2;
  _0x5c47f6.width = _0xcedd15;
  _0x5c47f6.height = _0x5718f1;
  circle(_0x57b600, _0x3368a0, _0x25d4f7, 40 * _0x557ad0, 0);
  fill_path(_0x57b600, undefined, _0x2546d6[0], 7 * _0x557ad0);
  circle(_0x57b600, _0x3368a0, _0x25d4f7, 30 * _0x557ad0, 0);
  fill_path(_0x57b600, undefined, _0x2546d6[0], 7 * _0x557ad0);
  circle(_0x57b600, _0x3368a0, _0x25d4f7, 20 * _0x557ad0, 0);
  fill_path(_0x57b600, _0x2546d6[0]);
  return _0x5c47f6;
}
function create_wall_diamond(_0x457542, _0x36ad57, _0x14cceb) {
  var _0x4a72d9 = document.createElement("canvas");
  var _0x2a63f4 = _0x4a72d9.getContext("2d");
  _0x4a72d9.width = 130 * _0x457542;
  _0x4a72d9.height = 142 * _0x457542;
  _0x2a63f4.globalAlpha = _0x36ad57 ? 0.5 : 1;
  _0x2a63f4.save();
  _0x2a63f4.translate(65 * _0x457542, 80 * _0x457542);
  _0x2a63f4.rotate(0.2);
  round_regular_polygon(_0x2a63f4, 9, 60 * _0x457542, 10 * _0x457542);
  _0x2a63f4.restore();
  fill_path(_0x2a63f4, _0x14cceb[0]);
  _0x2a63f4.globalAlpha = 1;
  _0x2a63f4.save();
  _0x2a63f4.translate(65 * _0x457542, 71 * _0x457542);
  _0x2a63f4.rotate(0.2);
  round_regular_polygon(_0x2a63f4, 9, 60 * _0x457542, 10 * _0x457542);
  fill_path(_0x2a63f4, _0x14cceb[1], _0x14cceb[2], 4);
  _0x2a63f4.rotate(-0.32);
  round_regular_polygon(_0x2a63f4, 9, 38 * _0x457542, 10 * _0x457542);
  fill_path(_0x2a63f4, _0x14cceb[3], _0x14cceb[4], 4);
  _0x2a63f4.rotate(0.68);
  round_regular_polygon(_0x2a63f4, 9, 20 * _0x457542, 8 * _0x457542);
  fill_path(_0x2a63f4, _0x14cceb[5], _0x14cceb[6], 6);
  _0x2a63f4.restore();
  return _0x4a72d9;
}
function create_palm(_0x228c3f, _0x4c227e) {
  var _0x19d6ac = document.createElement("canvas");
  var _0x486318 = _0x19d6ac.getContext("2d");
  _0x19d6ac.width = 372 * _0x228c3f;
  _0x19d6ac.height = 375 * _0x228c3f;
  _0x486318.globalAlpha = 0.5;
  _0x486318.translate(15 * _0x228c3f, 15 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    313.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    308.0000305175781 * _0x228c3f,
    130.58523559570312 * _0x228c3f,
    279.0000305175781 * _0x228c3f,
    158.58523559570312 * _0x228c3f,
    254.00003051757812 * _0x228c3f,
    175.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    287.0000305175781 * _0x228c3f,
    182.58523559570312 * _0x228c3f,
    274.0000305175781 * _0x228c3f,
    181.08523559570312 * _0x228c3f,
    294.0000305175781 * _0x228c3f,
    186.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.0000305175781 * _0x228c3f,
    205.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    315.0000305175781 * _0x228c3f,
    196.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    350.0000305175781 * _0x228c3f,
    219.58523559570312 * _0x228c3f,
    343.0000305175781 * _0x228c3f,
    221.58523559570312 * _0x228c3f,
    351.0000305175781 * _0x228c3f,
    230.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    296.0000305175781 * _0x228c3f,
    260.5852355957031 * _0x228c3f,
    264.0000305175781 * _0x228c3f,
    256.5852355957031 * _0x228c3f,
    220.00003051757812 * _0x228c3f,
    236.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    233.00003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    232.00003051757812 * _0x228c3f,
    279.5852355957031 * _0x228c3f,
    231.00003051757812 * _0x228c3f,
    295.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    213.00003051757812 * _0x228c3f,
    299.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    226.00003051757812 * _0x228c3f,
    316.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    223.00003051757812 * _0x228c3f,
    344.5852355957031 * _0x228c3f,
    216.00003051757812 * _0x228c3f,
    350.5852355957031 * _0x228c3f,
    209.00003051757812 * _0x228c3f,
    363.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    154.00003051757812 * _0x228c3f,
    318.5852355957031 * _0x228c3f,
    156.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    160.00003051757812 * _0x228c3f,
    238.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    135.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    125.00003051757812 * _0x228c3f,
    267.5852355957031 * _0x228c3f,
    112.00003051757812 * _0x228c3f,
    272.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    97.00003051757812 * _0x228c3f,
    260.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    281.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    66.00003051757812 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    59.000030517578125 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    39.000030517578125 * _0x228c3f,
    285.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    56.000030517578125 * _0x228c3f,
    216.58523559570312 * _0x228c3f,
    91.00003051757812 * _0x228c3f,
    204.58523559570312 * _0x228c3f,
    129.00003051757812 * _0x228c3f,
    189.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    90.00003051757812 * _0x228c3f,
    176.58523559570312 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    173.58523559570312 * _0x228c3f,
    79.00003051757812 * _0x228c3f,
    166.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    85.00003051757812 * _0x228c3f,
    143.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    66.00003051757812 * _0x228c3f,
    151.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    44.000030517578125 * _0x228c3f,
    133.58523559570312 * _0x228c3f,
    41.000030517578125 * _0x228c3f,
    124.58523559570312 * _0x228c3f,
    34.000030517578125 * _0x228c3f,
    102.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    100.00003051757812 * _0x228c3f,
    81.58523559570312 * _0x228c3f,
    134.00003051757812 * _0x228c3f,
    118.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    128.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    144.00003051757812 * _0x228c3f,
    102.58523559570312 * _0x228c3f,
    147.00003051757812 * _0x228c3f,
    90.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    80.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    77.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    157.00003051757812 * _0x228c3f,
    67.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    162.00003051757812 * _0x228c3f,
    42.585235595703125 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    29.585235595703125 * _0x228c3f,
    182.00003051757812 * _0x228c3f,
    14.585235595703125 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.00003051757812 * _0x228c3f,
    48.585235595703125 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    92.58523559570312 * _0x228c3f,
    218.00003051757812 * _0x228c3f,
    112.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    239.00003051757812 * _0x228c3f,
    95.58523559570312 * _0x228c3f,
    242.00003051757812 * _0x228c3f,
    97.58523559570312 * _0x228c3f,
    249.00003051757812 * _0x228c3f,
    94.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    261.0000305175781 * _0x228c3f,
    111.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    262.0000305175781 * _0x228c3f,
    87.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    282.0000305175781 * _0x228c3f,
    77.58523559570312 * _0x228c3f,
    301.0000305175781 * _0x228c3f,
    74.58523559570312 * _0x228c3f,
    314.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[0]);
  _0x486318.globalAlpha = 1;
  _0x486318.translate(-15 * _0x228c3f, -15 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    313.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    308.0000305175781 * _0x228c3f,
    130.58523559570312 * _0x228c3f,
    279.0000305175781 * _0x228c3f,
    158.58523559570312 * _0x228c3f,
    254.00003051757812 * _0x228c3f,
    175.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    287.0000305175781 * _0x228c3f,
    182.58523559570312 * _0x228c3f,
    274.0000305175781 * _0x228c3f,
    181.08523559570312 * _0x228c3f,
    294.0000305175781 * _0x228c3f,
    186.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.0000305175781 * _0x228c3f,
    205.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    315.0000305175781 * _0x228c3f,
    196.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    350.0000305175781 * _0x228c3f,
    219.58523559570312 * _0x228c3f,
    343.0000305175781 * _0x228c3f,
    221.58523559570312 * _0x228c3f,
    351.0000305175781 * _0x228c3f,
    230.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    296.0000305175781 * _0x228c3f,
    260.5852355957031 * _0x228c3f,
    264.0000305175781 * _0x228c3f,
    256.5852355957031 * _0x228c3f,
    220.00003051757812 * _0x228c3f,
    236.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    233.00003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    232.00003051757812 * _0x228c3f,
    279.5852355957031 * _0x228c3f,
    231.00003051757812 * _0x228c3f,
    295.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    213.00003051757812 * _0x228c3f,
    299.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    226.00003051757812 * _0x228c3f,
    316.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    223.00003051757812 * _0x228c3f,
    344.5852355957031 * _0x228c3f,
    216.00003051757812 * _0x228c3f,
    350.5852355957031 * _0x228c3f,
    209.00003051757812 * _0x228c3f,
    363.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    154.00003051757812 * _0x228c3f,
    318.5852355957031 * _0x228c3f,
    156.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    160.00003051757812 * _0x228c3f,
    238.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    135.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    125.00003051757812 * _0x228c3f,
    267.5852355957031 * _0x228c3f,
    112.00003051757812 * _0x228c3f,
    272.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    97.00003051757812 * _0x228c3f,
    260.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    281.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    66.00003051757812 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    59.000030517578125 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    39.000030517578125 * _0x228c3f,
    285.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    56.000030517578125 * _0x228c3f,
    216.58523559570312 * _0x228c3f,
    91.00003051757812 * _0x228c3f,
    204.58523559570312 * _0x228c3f,
    129.00003051757812 * _0x228c3f,
    189.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    90.00003051757812 * _0x228c3f,
    176.58523559570312 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    173.58523559570312 * _0x228c3f,
    79.00003051757812 * _0x228c3f,
    166.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    85.00003051757812 * _0x228c3f,
    143.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    66.00003051757812 * _0x228c3f,
    151.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    44.000030517578125 * _0x228c3f,
    133.58523559570312 * _0x228c3f,
    41.000030517578125 * _0x228c3f,
    124.58523559570312 * _0x228c3f,
    34.000030517578125 * _0x228c3f,
    102.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    100.00003051757812 * _0x228c3f,
    81.58523559570312 * _0x228c3f,
    134.00003051757812 * _0x228c3f,
    118.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    128.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    144.00003051757812 * _0x228c3f,
    102.58523559570312 * _0x228c3f,
    147.00003051757812 * _0x228c3f,
    90.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    80.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    77.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    157.00003051757812 * _0x228c3f,
    67.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    162.00003051757812 * _0x228c3f,
    42.585235595703125 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    29.585235595703125 * _0x228c3f,
    182.00003051757812 * _0x228c3f,
    14.585235595703125 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.00003051757812 * _0x228c3f,
    48.585235595703125 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    92.58523559570312 * _0x228c3f,
    218.00003051757812 * _0x228c3f,
    112.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    239.00003051757812 * _0x228c3f,
    95.58523559570312 * _0x228c3f,
    242.00003051757812 * _0x228c3f,
    97.58523559570312 * _0x228c3f,
    249.00003051757812 * _0x228c3f,
    94.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    261.0000305175781 * _0x228c3f,
    111.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    262.0000305175781 * _0x228c3f,
    87.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    282.0000305175781 * _0x228c3f,
    77.58523559570312 * _0x228c3f,
    301.0000305175781 * _0x228c3f,
    74.58523559570312 * _0x228c3f,
    314.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[1], _0x4c227e[2], 4 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    186.00003051757812 * _0x228c3f,
    192.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    185.00003051757812 * _0x228c3f,
    66.94886779785156 * _0x228c3f,
    184.50003051757812 * _0x228c3f,
    104.94886779785156 * _0x228c3f,
    183.00003051757812 * _0x228c3f,
    16.948867797851562 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    216.00003051757812 * _0x228c3f,
    47.94886779785156 * _0x228c3f,
    219.00003051757812 * _0x228c3f,
    80.94886779785156 * _0x228c3f,
    218.00003051757812 * _0x228c3f,
    113.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    209.00003051757812 * _0x228c3f,
    165.94886779785156 * _0x228c3f,
    200.00003051757812 * _0x228c3f,
    176.94886779785156 * _0x228c3f,
    189.00003051757812 * _0x228c3f,
    192.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    190.00003051757812 * _0x228c3f,
    191.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    207.00003051757812 * _0x228c3f,
    348.94886779785156 * _0x228c3f,
    205.00003051757812 * _0x228c3f,
    323.94886779785156 * _0x228c3f,
    209.00003051757812 * _0x228c3f,
    358.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    171.00003051757812 * _0x228c3f,
    334.94886779785156 * _0x228c3f,
    167.00003051757812 * _0x228c3f,
    302.94886779785156 * _0x228c3f,
    161.00003051757812 * _0x228c3f,
    268.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    160.00003051757812 * _0x228c3f,
    218.94886779785156 * _0x228c3f,
    181.00003051757812 * _0x228c3f,
    191.94886779785156 * _0x228c3f,
    189.00003051757812 * _0x228c3f,
    186.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    194.00003051757812 * _0x228c3f,
    195.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    116.00003051757812 * _0x228c3f,
    150.94886779785156 * _0x228c3f,
    116.00003051757812 * _0x228c3f,
    150.94886779785156 * _0x228c3f,
    38.000030517578125 * _0x228c3f,
    105.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    67.00003051757812 * _0x228c3f,
    90.94886779785156 * _0x228c3f,
    96.00003051757812 * _0x228c3f,
    99.94886779785156 * _0x228c3f,
    123.00003051757812 * _0x228c3f,
    111.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    183.00003051757812 * _0x228c3f,
    152.94886779785156 * _0x228c3f,
    179.00003051757812 * _0x228c3f,
    180.94886779785156 * _0x228c3f,
    193.00003051757812 * _0x228c3f,
    194.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    189.00003051757812 * _0x228c3f,
    190.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    250.00003051757812 * _0x228c3f,
    133.94886779785156 * _0x228c3f,
    311.0000305175781 * _0x228c3f,
    78.94886779785156 * _0x228c3f,
    311.0000305175781 * _0x228c3f,
    76.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    306.0000305175781 * _0x228c3f,
    127.94886779785156 * _0x228c3f,
    283.0000305175781 * _0x228c3f,
    148.94886779785156 * _0x228c3f,
    261.0000305175781 * _0x228c3f,
    166.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    220.00003051757812 * _0x228c3f,
    197.94886779785156 * _0x228c3f,
    191.00003051757812 * _0x228c3f,
    194.94886779785156 * _0x228c3f,
    189.00003051757812 * _0x228c3f,
    195.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    189.00003051757812 * _0x228c3f,
    194.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    268.5000305175781 * _0x228c3f,
    211.94886779785156 * _0x228c3f,
    268.5000305175781 * _0x228c3f,
    211.94886779785156 * _0x228c3f,
    348.0000305175781 * _0x228c3f,
    228.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    316.0000305175781 * _0x228c3f,
    247.94886779785156 * _0x228c3f,
    298.0000305175781 * _0x228c3f,
    256.94886779785156 * _0x228c3f,
    250.00003051757812 * _0x228c3f,
    246.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    197.00003051757812 * _0x228c3f,
    229.94886779785156 * _0x228c3f,
    189.00003051757812 * _0x228c3f,
    202.94886779785156 * _0x228c3f,
    188.00003051757812 * _0x228c3f,
    199.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    192.00003051757812 * _0x228c3f,
    191.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    116.50003051757812 * _0x228c3f,
    238.44886779785156 * _0x228c3f,
    116.50003051757812 * _0x228c3f,
    238.44886779785156 * _0x228c3f,
    41.000030517578125 * _0x228c3f,
    284.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    49.000030517578125 * _0x228c3f,
    252.94886779785156 * _0x228c3f,
    56.000030517578125 * _0x228c3f,
    242.94886779785156 * _0x228c3f,
    80.00003051757812 * _0x228c3f,
    215.94886779785156 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    125.00003051757812 * _0x228c3f,
    181.94886779785156 * _0x228c3f,
    174.00003051757812 * _0x228c3f,
    183.94886779785156 * _0x228c3f,
    192.00003051757812 * _0x228c3f,
    191.94886779785156 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, _0x4c227e[3], _0x4c227e[3], 2 * _0x228c3f);
  _0x486318.beginPath();
  _0x486318.lineCap = "round";
  _0x486318.lineJoin = "round";
  _0x486318.moveTo(
    313.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    308.0000305175781 * _0x228c3f,
    130.58523559570312 * _0x228c3f,
    279.0000305175781 * _0x228c3f,
    158.58523559570312 * _0x228c3f,
    254.00003051757812 * _0x228c3f,
    175.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    287.0000305175781 * _0x228c3f,
    182.58523559570312 * _0x228c3f,
    274.0000305175781 * _0x228c3f,
    181.08523559570312 * _0x228c3f,
    294.0000305175781 * _0x228c3f,
    186.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.5000305175781 * _0x228c3f,
    196.08523559570312 * _0x228c3f,
    293.0000305175781 * _0x228c3f,
    205.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    304.0000305175781 * _0x228c3f,
    201.08523559570312 * _0x228c3f,
    315.0000305175781 * _0x228c3f,
    196.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    350.0000305175781 * _0x228c3f,
    219.58523559570312 * _0x228c3f,
    343.0000305175781 * _0x228c3f,
    221.58523559570312 * _0x228c3f,
    351.0000305175781 * _0x228c3f,
    230.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    296.0000305175781 * _0x228c3f,
    260.5852355957031 * _0x228c3f,
    264.0000305175781 * _0x228c3f,
    256.5852355957031 * _0x228c3f,
    220.00003051757812 * _0x228c3f,
    236.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    233.00003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    232.00003051757812 * _0x228c3f,
    279.5852355957031 * _0x228c3f,
    231.00003051757812 * _0x228c3f,
    295.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    297.5852355957031 * _0x228c3f,
    213.00003051757812 * _0x228c3f,
    299.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    219.50003051757812 * _0x228c3f,
    308.0852355957031 * _0x228c3f,
    226.00003051757812 * _0x228c3f,
    316.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    223.00003051757812 * _0x228c3f,
    344.5852355957031 * _0x228c3f,
    216.00003051757812 * _0x228c3f,
    350.5852355957031 * _0x228c3f,
    209.00003051757812 * _0x228c3f,
    363.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    154.00003051757812 * _0x228c3f,
    318.5852355957031 * _0x228c3f,
    156.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    160.00003051757812 * _0x228c3f,
    238.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    135.00003051757812 * _0x228c3f,
    268.5852355957031 * _0x228c3f,
    125.00003051757812 * _0x228c3f,
    267.5852355957031 * _0x228c3f,
    112.00003051757812 * _0x228c3f,
    272.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    104.50003051757812 * _0x228c3f,
    266.5852355957031 * _0x228c3f,
    97.00003051757812 * _0x228c3f,
    260.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    93.00003051757812 * _0x228c3f,
    271.0852355957031 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    281.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    66.00003051757812 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    59.000030517578125 * _0x228c3f,
    288.5852355957031 * _0x228c3f,
    39.000030517578125 * _0x228c3f,
    285.5852355957031 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    56.000030517578125 * _0x228c3f,
    216.58523559570312 * _0x228c3f,
    91.00003051757812 * _0x228c3f,
    204.58523559570312 * _0x228c3f,
    129.00003051757812 * _0x228c3f,
    189.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    90.00003051757812 * _0x228c3f,
    176.58523559570312 * _0x228c3f,
    89.00003051757812 * _0x228c3f,
    173.58523559570312 * _0x228c3f,
    79.00003051757812 * _0x228c3f,
    166.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    82.00003051757812 * _0x228c3f,
    155.08523559570312 * _0x228c3f,
    85.00003051757812 * _0x228c3f,
    143.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    75.50003051757812 * _0x228c3f,
    147.58523559570312 * _0x228c3f,
    66.00003051757812 * _0x228c3f,
    151.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    44.000030517578125 * _0x228c3f,
    133.58523559570312 * _0x228c3f,
    41.000030517578125 * _0x228c3f,
    124.58523559570312 * _0x228c3f,
    34.000030517578125 * _0x228c3f,
    102.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    100.00003051757812 * _0x228c3f,
    81.58523559570312 * _0x228c3f,
    134.00003051757812 * _0x228c3f,
    118.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    128.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    144.00003051757812 * _0x228c3f,
    102.58523559570312 * _0x228c3f,
    147.00003051757812 * _0x228c3f,
    90.58523559570312 * _0x228c3f,
    150.00003051757812 * _0x228c3f,
    80.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    159.50003051757812 * _0x228c3f,
    79.08523559570312 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    77.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    163.00003051757812 * _0x228c3f,
    72.58523559570312 * _0x228c3f,
    157.00003051757812 * _0x228c3f,
    67.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    162.00003051757812 * _0x228c3f,
    42.585235595703125 * _0x228c3f,
    169.00003051757812 * _0x228c3f,
    29.585235595703125 * _0x228c3f,
    182.00003051757812 * _0x228c3f,
    14.585235595703125 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    219.00003051757812 * _0x228c3f,
    48.585235595703125 * _0x228c3f,
    222.00003051757812 * _0x228c3f,
    92.58523559570312 * _0x228c3f,
    218.00003051757812 * _0x228c3f,
    112.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    239.00003051757812 * _0x228c3f,
    95.58523559570312 * _0x228c3f,
    242.00003051757812 * _0x228c3f,
    97.58523559570312 * _0x228c3f,
    249.00003051757812 * _0x228c3f,
    94.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    255.00003051757812 * _0x228c3f,
    103.08523559570312 * _0x228c3f,
    261.0000305175781 * _0x228c3f,
    111.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    261.5000305175781 * _0x228c3f,
    99.58523559570312 * _0x228c3f,
    262.0000305175781 * _0x228c3f,
    87.58523559570312 * _0x228c3f
  );
  _0x486318.bezierCurveTo(
    282.0000305175781 * _0x228c3f,
    77.58523559570312 * _0x228c3f,
    301.0000305175781 * _0x228c3f,
    74.58523559570312 * _0x228c3f,
    314.0000305175781 * _0x228c3f,
    76.58523559570312 * _0x228c3f
  );
  _0x486318.closePath();
  fill_path(_0x486318, undefined, _0x4c227e[2], 4 * _0x228c3f);
  return _0x19d6ac;
}
function create_special_fur(_0x57142a, _0x48d877, _0x398aea) {
  var _0x58bfe1 = document.createElement("canvas");
  var _0x377200 = _0x58bfe1.getContext("2d");
  _0x58bfe1.width = 248 * _0x57142a;
  _0x58bfe1.height = 128 * _0x57142a;
  _0x377200.beginPath();
  _0x377200.lineCap = "round";
  _0x377200.lineJoin = "round";
  _0x377200.moveTo(137 * _0x57142a, 7 * _0x57142a);
  _0x377200.bezierCurveTo(
    169 * _0x57142a,
    14 * _0x57142a,
    212 * _0x57142a,
    9 * _0x57142a,
    241 * _0x57142a,
    5 * _0x57142a
  );
  _0x377200.bezierCurveTo(
    211 * _0x57142a,
    63 * _0x57142a,
    158 * _0x57142a,
    92 * _0x57142a,
    103 * _0x57142a,
    109 * _0x57142a
  );
  _0x377200.bezierCurveTo(
    73 * _0x57142a,
    126 * _0x57142a,
    54 * _0x57142a,
    124 * _0x57142a,
    6 * _0x57142a,
    99 * _0x57142a
  );
  _0x377200.bezierCurveTo(
    82 * _0x57142a,
    63 * _0x57142a,
    113 * _0x57142a,
    35 * _0x57142a,
    137 * _0x57142a,
    8 * _0x57142a
  );
  _0x377200.closePath();
  fill_path(_0x377200, _0x398aea[0], _0x398aea[1], 14 * _0x57142a);
  _0x377200.beginPath();
  _0x377200.lineCap = "round";
  _0x377200.lineJoin = "round";
  _0x377200.moveTo(73 * _0x57142a, 124 * _0x57142a);
  _0x377200.bezierCurveTo(
    111 * _0x57142a,
    126 * _0x57142a,
    162 * _0x57142a,
    97 * _0x57142a,
    203 * _0x57142a,
    61 * _0x57142a
  );
  _0x377200.bezierCurveTo(
    156 * _0x57142a,
    98 * _0x57142a,
    131 * _0x57142a,
    106 * _0x57142a,
    105 * _0x57142a,
    109 * _0x57142a
  );
  _0x377200.bezierCurveTo(
    99 * _0x57142a,
    121 * _0x57142a,
    87 * _0x57142a,
    124 * _0x57142a,
    72 * _0x57142a,
    124 * _0x57142a
  );
  _0x377200.closePath();
  fill_path(_0x377200, _0x398aea[2], _0x398aea[3], 1 * _0x57142a);
  return _0x58bfe1;
}
function create_wall_stone(_0x1b2067, _0x3b8d40, _0x5b2165) {
  var _0x3a0fbb = document.createElement("canvas");
  var _0xea9d0 = _0x3a0fbb.getContext("2d");
  _0x3a0fbb.width = 130 * _0x1b2067;
  _0x3a0fbb.height = 148 * _0x1b2067;
  _0xea9d0.globalAlpha = _0x3b8d40 ? 0.5 : 1;
  _0xea9d0.save();
  _0xea9d0.translate(65 * _0x1b2067, 85 * _0x1b2067);
  _0xea9d0.rotate(1.4);
  round_regular_polygon(_0xea9d0, 7, 60 * _0x1b2067, 10 * _0x1b2067);
  _0xea9d0.restore();
  fill_path(_0xea9d0, _0x5b2165[0]);
  _0xea9d0.globalAlpha = 1;
  _0xea9d0.save();
  _0xea9d0.translate(65 * _0x1b2067, 74 * _0x1b2067);
  _0xea9d0.rotate(1.4);
  round_regular_polygon(_0xea9d0, 7, 60 * _0x1b2067, 10 * _0x1b2067);
  fill_path(_0xea9d0, _0x5b2165[1], _0x5b2165[2], 4);
  _0xea9d0.rotate(0.64);
  round_regular_polygon(_0xea9d0, 7, 40 * _0x1b2067, 10 * _0x1b2067);
  fill_path(_0xea9d0, _0x5b2165[3], _0x5b2165[4], 4);
  _0xea9d0.rotate(0.12);
  round_regular_polygon(_0xea9d0, 7, 23 * _0x1b2067, 5 * _0x1b2067);
  _0xea9d0.restore();
  fill_path(_0xea9d0, _0x5b2165[5]);
  return _0x3a0fbb;
}
function create_wall_gold(_0x350086, _0x2002ea, _0x49152f) {
  var _0x28b54b = document.createElement("canvas");
  var _0xde52e4 = _0x28b54b.getContext("2d");
  _0x28b54b.width = _0x350086 * 125;
  _0x28b54b.height = _0x350086 * 139;
  _0xde52e4.globalAlpha = _0x2002ea ? 0.5 : 1;
  _0xde52e4.save();
  _0xde52e4.translate(63 * _0x350086, 79 * _0x350086);
  _0xde52e4.rotate(1);
  round_regular_polygon(_0xde52e4, 8, 60 * _0x350086, 10 * _0x350086);
  fill_path(_0xde52e4, _0x49152f[0]);
  _0xde52e4.restore();
  _0xde52e4.globalAlpha = 1;
  _0xde52e4.save();
  _0xde52e4.translate(63 * _0x350086, 69 * _0x350086);
  _0xde52e4.rotate(1);
  round_regular_polygon(_0xde52e4, 8, 60 * _0x350086, 10 * _0x350086);
  fill_path(_0xde52e4, _0x49152f[1], _0x49152f[2], 4);
  _0xde52e4.rotate(0.56);
  round_regular_polygon(_0xde52e4, 8, 40 * _0x350086, 10 * _0x350086);
  fill_path(_0xde52e4, _0x49152f[3], _0x49152f[4], 4);
  _0xde52e4.rotate(0.28);
  round_regular_polygon(_0xde52e4, 8, 28 * _0x350086, 8 * _0x350086);
  fill_path(_0xde52e4, _0x49152f[5]);
  _0xde52e4.restore();
  return _0x28b54b;
}
function create_door_wood(_0x2010f7, _0x39e97d, _0x2821e1) {
  var _0x52dcc4 = document.createElement("canvas");
  var _0x152808 = _0x52dcc4.getContext("2d");
  _0x52dcc4.width = 90 * _0x2010f7;
  _0x52dcc4.height = 101 * _0x2010f7;
  _0x152808.translate(0 * _0x2010f7, 5 * _0x2010f7);
  i === 0 &&
    ((_0x152808.globalAlpha = _0x39e97d ? 0.5 : 1),
    circle(_0x152808, 44 * _0x2010f7, 55 * _0x2010f7, 41 * _0x2010f7),
    fill_path(_0x152808, _0x2821e1[0]));
  _0x152808.globalAlpha = 1;
  circle(_0x152808, 44 * _0x2010f7, 45 * _0x2010f7, 41 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[1], _0x2821e1[2], 4 * _0x2010f7);
  circle(_0x152808, 44 * _0x2010f7, 45 * _0x2010f7, 31 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[3]);
  _0x152808.save();
  _0x152808.translate(45 * _0x2010f7, 45 * _0x2010f7);
  round_rect(
    _0x152808,
    -9 * _0x2010f7,
    -25.5 * _0x2010f7,
    18 * _0x2010f7,
    51 * _0x2010f7,
    30 * _0x2010f7
  );
  _0x152808.restore();
  fill_path(_0x152808, _0x2821e1[4], _0x2821e1[4], 2 * _0x2010f7);
  _0x152808.save();
  _0x152808.translate(45 * _0x2010f7, 45 * _0x2010f7);
  round_rect(
    _0x152808,
    -26 * _0x2010f7,
    -9 * _0x2010f7,
    52 * _0x2010f7,
    18 * _0x2010f7,
    30 * _0x2010f7
  );
  _0x152808.restore();
  fill_path(_0x152808, _0x2821e1[4], _0x2821e1[4], 2 * _0x2010f7);
  circle(_0x152808, 45 * _0x2010f7, 29 * _0x2010f7, 7 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[5]);
  circle(_0x152808, 45 * _0x2010f7, 61 * _0x2010f7, 7 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[5]);
  circle(_0x152808, 28 * _0x2010f7, 45 * _0x2010f7, 7 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[5]);
  circle(_0x152808, 62 * _0x2010f7, 45 * _0x2010f7, 7 * _0x2010f7);
  fill_path(_0x152808, _0x2821e1[5]);
  return _0x52dcc4;
}
function create_door_stone(_0x596c23, _0x3f1b56, _0x2f1b17) {
  var _0x329ed5 = document.createElement("canvas");
  var _0x1e731f = _0x329ed5.getContext("2d");
  _0x329ed5.width = 90 * _0x596c23;
  _0x329ed5.height = 98 * _0x596c23;
  _0x1e731f.translate(0, 4 * _0x596c23);
  if (i === 0) {
    _0x1e731f.globalAlpha = _0x3f1b56 ? 0.5 : 1;
    _0x1e731f.save();
    _0x1e731f.translate(44 * _0x596c23, 50 * _0x596c23);
    _0x1e731f.rotate(1.4);
    round_regular_polygon(_0x1e731f, 7, 41 * _0x596c23, 10 * _0x596c23);
    _0x1e731f.restore();
    fill_path(_0x1e731f, _0x2f1b17[0]);
  }
  _0x1e731f.globalAlpha = 1;
  _0x1e731f.save();
  _0x1e731f.translate(44 * _0x596c23, 44 * _0x596c23);
  _0x1e731f.rotate(1.4);
  round_regular_polygon(_0x1e731f, 7, 41 * _0x596c23, 10 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[1], _0x2f1b17[2], 4 * _0x596c23);
  round_regular_polygon(_0x1e731f, 7, 35 * _0x596c23, 10 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[3], _0x2f1b17[4], 4 * _0x596c23);
  round_regular_polygon(_0x1e731f, 7, 23 * _0x596c23, 5 * _0x596c23);
  _0x1e731f.restore();
  fill_path(_0x1e731f, _0x2f1b17[5]);
  _0x1e731f.save();
  _0x1e731f.translate(45 * _0x596c23, 45 * _0x596c23);
  _0x1e731f.rotate(0);
  round_rect(
    _0x1e731f,
    -9 * _0x596c23,
    -25.5 * _0x596c23,
    18 * _0x596c23,
    51 * _0x596c23,
    30 * _0x596c23
  );
  _0x1e731f.restore();
  fill_path(_0x1e731f, _0x2f1b17[4], _0x2f1b17[4], 2 * _0x596c23);
  _0x1e731f.save();
  _0x1e731f.translate(45 * _0x596c23, 45 * _0x596c23);
  _0x1e731f.rotate(0);
  round_rect(
    _0x1e731f,
    -26 * _0x596c23,
    -9 * _0x596c23,
    52 * _0x596c23,
    18 * _0x596c23,
    30 * _0x596c23
  );
  _0x1e731f.restore();
  fill_path(_0x1e731f, _0x2f1b17[4], _0x2f1b17[4], 2 * _0x596c23);
  circle(_0x1e731f, 45 * _0x596c23, 29 * _0x596c23, 7 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[5]);
  circle(_0x1e731f, 45 * _0x596c23, 61 * _0x596c23, 7 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[5]);
  circle(_0x1e731f, 28 * _0x596c23, 45 * _0x596c23, 7 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[5]);
  circle(_0x1e731f, 62 * _0x596c23, 45 * _0x596c23, 7 * _0x596c23);
  fill_path(_0x1e731f, _0x2f1b17[5]);
  return _0x329ed5;
}
function create_door_gold(_0x4a009e, _0x3ab9ba, _0x220358) {
  var _0xe743ab = document.createElement("canvas");
  var _0xf84efb = _0xe743ab.getContext("2d");
  _0xe743ab.width = 90 * _0x4a009e;
  _0xe743ab.height = 98 * _0x4a009e;
  _0xf84efb.translate(0, 4 * _0x4a009e);
  if (i === 0) {
    _0xf84efb.globalAlpha = _0x3ab9ba ? 0.5 : 1;
    _0xf84efb.save();
    _0xf84efb.translate(44 * _0x4a009e, 50 * _0x4a009e);
    _0xf84efb.rotate(1);
    round_regular_polygon(_0xf84efb, 8, 41 * _0x4a009e, 10 * _0x4a009e);
    fill_path(_0xf84efb, _0x220358[0]);
    _0xf84efb.restore();
  }
  _0xf84efb.globalAlpha = 1;
  _0xf84efb.save();
  _0xf84efb.translate(44 * _0x4a009e, 44 * _0x4a009e);
  _0xf84efb.rotate(1);
  round_regular_polygon(_0xf84efb, 8, 41 * _0x4a009e, 10 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[1], _0x220358[2], 4 * _0x4a009e);
  _0xf84efb.rotate(0.56);
  round_regular_polygon(_0xf84efb, 8, 33 * _0x4a009e, 10 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[3], _0x220358[4], 4 * _0x4a009e);
  _0xf84efb.rotate(0.28);
  round_regular_polygon(_0xf84efb, 8, 24 * _0x4a009e, 8 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[5]);
  _0xf84efb.restore();
  _0xf84efb.save();
  _0xf84efb.translate(45 * _0x4a009e, 45 * _0x4a009e);
  _0xf84efb.rotate(0);
  round_rect(
    _0xf84efb,
    -9 * _0x4a009e,
    -25.5 * _0x4a009e,
    18 * _0x4a009e,
    51 * _0x4a009e,
    30 * _0x4a009e
  );
  _0xf84efb.restore();
  fill_path(_0xf84efb, _0x220358[4], _0x220358[4], 2 * _0x4a009e);
  _0xf84efb.save();
  _0xf84efb.translate(45 * _0x4a009e, 45 * _0x4a009e);
  _0xf84efb.rotate(0);
  round_rect(
    _0xf84efb,
    -26 * _0x4a009e,
    -9 * _0x4a009e,
    52 * _0x4a009e,
    18 * _0x4a009e,
    30 * _0x4a009e
  );
  _0xf84efb.restore();
  fill_path(_0xf84efb, _0x220358[4], _0x220358[4], 2 * _0x4a009e);
  circle(_0xf84efb, 45 * _0x4a009e, 29 * _0x4a009e, 7 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[5]);
  circle(_0xf84efb, 45 * _0x4a009e, 61 * _0x4a009e, 7 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[5]);
  circle(_0xf84efb, 28 * _0x4a009e, 45 * _0x4a009e, 7 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[5]);
  circle(_0xf84efb, 62 * _0x4a009e, 45 * _0x4a009e, 7 * _0x4a009e);
  fill_path(_0xf84efb, _0x220358[5]);
  return _0xe743ab;
}
function create_furnace_on(_0x38ba45, _0xb4ea38, _0x46d854) {
  var _0x45ccaa = document.createElement("canvas");
  var _0x5083e0 = _0x45ccaa.getContext("2d");
  _0x45ccaa.width = 300 * _0x38ba45;
  _0x45ccaa.height = 300 * _0x38ba45;
  _0x5083e0.globalAlpha = _0xb4ea38 ? 0.5 : 1;
  _0x5083e0.save();
  _0x5083e0.translate(150 * _0x38ba45, 160 * _0x38ba45);
  _0x5083e0.rotate(6.28);
  round_regular_polygon(_0x5083e0, 6, 146 * _0x38ba45, 30 * _0x38ba45);
  _0x5083e0.restore();
  fill_path(_0x5083e0, _0x46d854[0]);
  _0x5083e0.globalAlpha = 1;
  _0x5083e0.save();
  _0x5083e0.translate(150 * _0x38ba45, 150 * _0x38ba45);
  _0x5083e0.rotate(6.28);
  round_regular_polygon(_0x5083e0, 6, 146 * _0x38ba45, 30 * _0x38ba45);
  _0x5083e0.restore();
  fill_path(_0x5083e0, _0x46d854[1], _0x46d854[2], 8 * _0x38ba45);
  _0x5083e0.save();
  _0x5083e0.translate(150 * _0x38ba45, 150 * _0x38ba45);
  _0x5083e0.rotate(0);
  round_regular_polygon(_0x5083e0, 6, 105 * _0x38ba45, 30 * _0x38ba45);
  _0x5083e0.restore();
  fill_path(_0x5083e0, _0x46d854[3], _0x46d854[3], 8 * _0x38ba45);
  _0x5083e0.save();
  _0x5083e0.translate(150 * _0x38ba45, 150 * _0x38ba45);
  _0x5083e0.rotate(0);
  round_regular_polygon(_0x5083e0, 6, 66 * _0x38ba45, 30 * _0x38ba45);
  _0x5083e0.restore();
  fill_path(_0x5083e0, _0x46d854[4], _0x46d854[2], 8 * _0x38ba45);
  _0x5083e0.save();
  _0x5083e0.translate(150 * _0x38ba45, 150 * _0x38ba45);
  _0x5083e0.rotate(0);
  round_regular_polygon(_0x5083e0, 6, 31 * _0x38ba45, 30 * _0x38ba45);
  _0x5083e0.restore();
  fill_path(_0x5083e0, _0x46d854[5], _0x46d854[6], 8 * _0x38ba45);
  _0x5083e0.beginPath();
  _0x5083e0.lineCap = "round";
  _0x5083e0.lineJoin = "round";
  _0x5083e0.moveTo(150 * _0x38ba45, 207 * _0x38ba45);
  _0x5083e0.bezierCurveTo(
    150 * _0x38ba45,
    151 * _0x38ba45,
    150 * _0x38ba45,
    101 * _0x38ba45,
    150 * _0x38ba45,
    94 * _0x38ba45
  );
  _0x5083e0.closePath();
  fill_path(_0x5083e0, undefined, _0x46d854[2], 8 * _0x38ba45);
  _0x5083e0.beginPath();
  _0x5083e0.lineCap = "round";
  _0x5083e0.lineJoin = "round";
  _0x5083e0.moveTo(118 * _0x38ba45, 100 * _0x38ba45);
  _0x5083e0.bezierCurveTo(
    118 * _0x38ba45,
    205 * _0x38ba45,
    118 * _0x38ba45,
    207 * _0x38ba45,
    118 * _0x38ba45,
    200 * _0x38ba45
  );
  _0x5083e0.closePath();
  fill_path(_0x5083e0, undefined, _0x46d854[2], 8 * _0x38ba45);
  _0x5083e0.beginPath();
  _0x5083e0.lineCap = "round";
  _0x5083e0.lineJoin = "round";
  _0x5083e0.moveTo(183 * _0x38ba45, 100 * _0x38ba45);
  _0x5083e0.bezierCurveTo(
    183 * _0x38ba45,
    203 * _0x38ba45,
    183 * _0x38ba45,
    203 * _0x38ba45,
    183 * _0x38ba45,
    200 * _0x38ba45
  );
  _0x5083e0.closePath();
  fill_path(_0x5083e0, undefined, _0x46d854[2], 8 * _0x38ba45);
  return _0x45ccaa;
}
function create_furnace_off(_0x23a685, _0x3cfd8c, _0x59f04d) {
  var _0x59b8cf = document.createElement("canvas");
  var _0x145d1e = _0x59b8cf.getContext("2d");
  _0x59b8cf.width = 300 * _0x23a685;
  _0x59b8cf.height = 300 * _0x23a685;
  _0x145d1e.globalAlpha = _0x3cfd8c ? 0.5 : 1;
  _0x145d1e.save();
  _0x145d1e.translate(150 * _0x23a685, 160 * _0x23a685);
  _0x145d1e.rotate(6.28);
  round_regular_polygon(_0x145d1e, 6, 146 * _0x23a685, 30 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[0]);
  _0x145d1e.globalAlpha = 1;
  _0x145d1e.save();
  _0x145d1e.translate(150 * _0x23a685, 150 * _0x23a685);
  _0x145d1e.rotate(6.28);
  round_regular_polygon(_0x145d1e, 6, 146 * _0x23a685, 30 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[1], _0x59f04d[2], 8 * _0x23a685);
  _0x145d1e.save();
  _0x145d1e.translate(150 * _0x23a685, 150 * _0x23a685);
  _0x145d1e.rotate(0);
  round_regular_polygon(_0x145d1e, 6, 105 * _0x23a685, 30 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[3], _0x59f04d[3], 8 * _0x23a685);
  _0x145d1e.save();
  _0x145d1e.translate(150 * _0x23a685, 150 * _0x23a685);
  _0x145d1e.rotate(0);
  round_regular_polygon(_0x145d1e, 6, 66 * _0x23a685, 30 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[4], _0x59f04d[2], 8 * _0x23a685);
  _0x145d1e.save();
  _0x145d1e.translate(131 * _0x23a685, 116 * _0x23a685);
  round_regular_polygon(_0x145d1e, 7, 17 * _0x23a685, 8 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[6]);
  _0x145d1e.save();
  _0x145d1e.translate(163 * _0x23a685, 168 * _0x23a685);
  round_regular_polygon(_0x145d1e, 7, 25 * _0x23a685, 8 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[6]);
  _0x145d1e.save();
  _0x145d1e.translate(117 * _0x23a685, 151 * _0x23a685);
  round_regular_polygon(_0x145d1e, 7, 11 * _0x23a685, 8 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[6]);
  _0x145d1e.save();
  _0x145d1e.translate(167 * _0x23a685, 122 * _0x23a685);
  round_regular_polygon(_0x145d1e, 7, 12 * _0x23a685, 8 * _0x23a685);
  _0x145d1e.restore();
  fill_path(_0x145d1e, _0x59f04d[6]);
  _0x145d1e.beginPath();
  _0x145d1e.lineCap = "round";
  _0x145d1e.lineJoin = "round";
  _0x145d1e.moveTo(150 * _0x23a685, 207 * _0x23a685);
  _0x145d1e.bezierCurveTo(
    150 * _0x23a685,
    151 * _0x23a685,
    150 * _0x23a685,
    101 * _0x23a685,
    150 * _0x23a685,
    94 * _0x23a685
  );
  _0x145d1e.closePath();
  fill_path(_0x145d1e, undefined, _0x59f04d[2], 8 * _0x23a685);
  _0x145d1e.beginPath();
  _0x145d1e.lineCap = "round";
  _0x145d1e.lineJoin = "round";
  _0x145d1e.moveTo(118 * _0x23a685, 100 * _0x23a685);
  _0x145d1e.bezierCurveTo(
    118 * _0x23a685,
    205 * _0x23a685,
    118 * _0x23a685,
    207 * _0x23a685,
    118 * _0x23a685,
    200 * _0x23a685
  );
  _0x145d1e.closePath();
  fill_path(_0x145d1e, undefined, _0x59f04d[2], 8 * _0x23a685);
  _0x145d1e.beginPath();
  _0x145d1e.lineCap = "round";
  _0x145d1e.lineJoin = "round";
  _0x145d1e.moveTo(183 * _0x23a685, 100 * _0x23a685);
  _0x145d1e.bezierCurveTo(
    183 * _0x23a685,
    203 * _0x23a685,
    183 * _0x23a685,
    203 * _0x23a685,
    183 * _0x23a685,
    200 * _0x23a685
  );
  _0x145d1e.closePath();
  fill_path(_0x145d1e, undefined, _0x59f04d[2], 8 * _0x23a685);
  return _0x59b8cf;
}
function create_furnace_slot(_0x8942b3, _0x573089, _0x2ac71d) {
  var _0x23d71c = document.createElement("canvas");
  var _0x55b010 = _0x23d71c.getContext("2d");
  _0x23d71c.width = 118 * _0x8942b3;
  _0x23d71c.height = 129 * _0x8942b3;
  _0x55b010.save();
  _0x55b010.translate(90 * _0x8942b3, 90 * _0x8942b3);
  round_rect(
    _0x55b010,
    -86.5 * _0x8942b3,
    -86 * _0x8942b3,
    110 * _0x8942b3,
    110 * _0x8942b3,
    15 * _0x8942b3
  );
  _0x55b010.restore();
  fill_path(_0x55b010, _0x2ac71d[0], _0x2ac71d[1], 4);
  return _0x23d71c;
}
function create_door_diamond(_0x5484d2, _0x3e8f1f, _0x3aa14f) {
  var _0x27d8a3 = document.createElement("canvas");
  var _0x2f433d = _0x27d8a3.getContext("2d");
  _0x27d8a3.width = 90 * _0x5484d2;
  _0x27d8a3.height = 98 * _0x5484d2;
  _0x2f433d.translate(0, 4 * _0x5484d2);
  if (i === 0) {
    _0x2f433d.globalAlpha = _0x3e8f1f ? 0.5 : 1;
    _0x2f433d.save();
    _0x2f433d.translate(44 * _0x5484d2, 50 * _0x5484d2);
    _0x2f433d.rotate(0.2);
    round_regular_polygon(_0x2f433d, 9, 41 * _0x5484d2, 10 * _0x5484d2);
    _0x2f433d.restore();
    fill_path(_0x2f433d, _0x3aa14f[0]);
  }
  _0x2f433d.globalAlpha = 1;
  _0x2f433d.save();
  _0x2f433d.translate(44 * _0x5484d2, 44 * _0x5484d2);
  _0x2f433d.rotate(0.2);
  round_regular_polygon(_0x2f433d, 9, 41 * _0x5484d2, 10 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[1], _0x3aa14f[2], 4 * _0x5484d2);
  _0x2f433d.rotate(-0.32);
  round_regular_polygon(_0x2f433d, 9, 32 * _0x5484d2, 10 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[3], _0x3aa14f[4], 4 * _0x5484d2);
  _0x2f433d.rotate(0.68);
  round_regular_polygon(_0x2f433d, 9, 23 * _0x5484d2, 8 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[5], _0x3aa14f[6], 6 * _0x5484d2);
  _0x2f433d.restore();
  _0x2f433d.save();
  _0x2f433d.translate(45 * _0x5484d2, 45 * _0x5484d2);
  _0x2f433d.rotate(0);
  round_rect(
    _0x2f433d,
    -9 * _0x5484d2,
    -25.5 * _0x5484d2,
    18 * _0x5484d2,
    51 * _0x5484d2,
    30 * _0x5484d2
  );
  _0x2f433d.restore();
  fill_path(_0x2f433d, _0x3aa14f[4], _0x3aa14f[4], 2 * _0x5484d2);
  _0x2f433d.save();
  _0x2f433d.translate(45 * _0x5484d2, 45 * _0x5484d2);
  _0x2f433d.rotate(0);
  round_rect(
    _0x2f433d,
    -26 * _0x5484d2,
    -9 * _0x5484d2,
    52 * _0x5484d2,
    18 * _0x5484d2,
    30 * _0x5484d2
  );
  _0x2f433d.restore();
  fill_path(_0x2f433d, _0x3aa14f[4], _0x3aa14f[4], 2 * _0x5484d2);
  circle(_0x2f433d, 45 * _0x5484d2, 29 * _0x5484d2, 7 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[5]);
  circle(_0x2f433d, 45 * _0x5484d2, 61 * _0x5484d2, 7 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[5]);
  circle(_0x2f433d, 28 * _0x5484d2, 45 * _0x5484d2, 7 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[5]);
  circle(_0x2f433d, 62 * _0x5484d2, 45 * _0x5484d2, 7 * _0x5484d2);
  fill_path(_0x2f433d, _0x3aa14f[5]);
  return _0x27d8a3;
}
function create_coat(_0x32f000, _0x190fa9, _0x365e8f) {
  var _0x49f156 = document.createElement("canvas");
  var _0x429259 = _0x49f156.getContext("2d");
  _0x49f156.width = 135 * _0x32f000;
  _0x49f156.height = 120 * _0x32f000;
  _0x429259.beginPath();
  _0x429259.lineCap = "round";
  _0x429259.lineJoin = "round";
  _0x429259.moveTo(3.5 * _0x32f000, 55.25 * _0x32f000);
  _0x429259.bezierCurveTo(
    3.5 * _0x32f000,
    114.25 * _0x32f000,
    2.5 * _0x32f000,
    109.25 * _0x32f000,
    3.5 * _0x32f000,
    112.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    5.5 * _0x32f000,
    119.25 * _0x32f000,
    8.5 * _0x32f000,
    119.25 * _0x32f000,
    11.5 * _0x32f000,
    119.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    15.5 * _0x32f000,
    114.25 * _0x32f000,
    13.5 * _0x32f000,
    95.25 * _0x32f000,
    14.5 * _0x32f000,
    82.25 * _0x32f000
  );
  _0x429259.closePath();
  fill_path(_0x429259, _0x365e8f[0], _0x365e8f[1], 7 * _0x32f000);
  _0x429259.beginPath();
  _0x429259.lineCap = "round";
  _0x429259.lineJoin = "round";
  _0x429259.moveTo(6.5 * _0x32f000, 43.25 * _0x32f000);
  _0x429259.bezierCurveTo(
    3.5 * _0x32f000,
    27.25 * _0x32f000,
    7.5 * _0x32f000,
    20.25 * _0x32f000,
    25.5 * _0x32f000,
    11.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    45.5 * _0x32f000,
    -0.75 * _0x32f000,
    73.5 * _0x32f000,
    1.25 * _0x32f000,
    107.5 * _0x32f000,
    10.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    131.5 * _0x32f000,
    21.25 * _0x32f000,
    125.5 * _0x32f000,
    34.25 * _0x32f000,
    125.5 * _0x32f000,
    36.25 * _0x32f000
  );
  _0x429259.closePath();
  fill_path(_0x429259, _0x365e8f[0], _0x365e8f[1], 7 * _0x32f000);
  _0x429259.beginPath();
  _0x429259.lineCap = "round";
  _0x429259.lineJoin = "round";
  _0x429259.moveTo(120.5 * _0x32f000, 62.25 * _0x32f000);
  _0x429259.bezierCurveTo(
    121.5 * _0x32f000,
    95.25 * _0x32f000,
    120.5 * _0x32f000,
    80.25 * _0x32f000,
    120.5 * _0x32f000,
    100.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    118.5 * _0x32f000,
    119.25 * _0x32f000,
    123.5 * _0x32f000,
    118.25 * _0x32f000,
    129.5 * _0x32f000,
    113.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    133.5 * _0x32f000,
    107.25 * _0x32f000,
    130.5 * _0x32f000,
    97.25 * _0x32f000,
    130.5 * _0x32f000,
    87.25 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    129.5 * _0x32f000,
    56.25 * _0x32f000,
    130 * _0x32f000,
    70.75 * _0x32f000,
    129.5 * _0x32f000,
    54.25 * _0x32f000
  );
  _0x429259.closePath();
  fill_path(_0x429259, _0x365e8f[0], _0x365e8f[1], 7 * _0x32f000);
  _0x429259.beginPath();
  _0x429259.lineCap = "round";
  _0x429259.lineJoin = "round";
  _0x429259.moveTo(17.5 * _0x32f000, 27 * _0x32f000);
  _0x429259.bezierCurveTo(
    48.5 * _0x32f000,
    5 * _0x32f000,
    93.5 * _0x32f000,
    14 * _0x32f000,
    118.5 * _0x32f000,
    26 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    132.5 * _0x32f000,
    35 * _0x32f000,
    133.5 * _0x32f000,
    52 * _0x32f000,
    132.5 * _0x32f000,
    68 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    125.5 * _0x32f000,
    87 * _0x32f000,
    116.5 * _0x32f000,
    84 * _0x32f000,
    96.5 * _0x32f000,
    75 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    60.5 * _0x32f000,
    66 * _0x32f000,
    52.5 * _0x32f000,
    74 * _0x32f000,
    37.5 * _0x32f000,
    78 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    2.5 * _0x32f000,
    86 * _0x32f000,
    3.5 * _0x32f000,
    78 * _0x32f000,
    1.5 * _0x32f000,
    61 * _0x32f000
  );
  _0x429259.bezierCurveTo(
    1.5 * _0x32f000,
    37 * _0x32f000,
    9.5 * _0x32f000,
    32 * _0x32f000,
    15.5 * _0x32f000,
    28 * _0x32f000
  );
  _0x429259.closePath();
  fill_path(_0x429259, _0x365e8f[2], _0x365e8f[3], 7 * _0x32f000);
  return _0x49f156;
}
function create_crab_crown(_0x444466, _0x1101e9, _0x231600) {
  var _0x247e70 = document.createElement("canvas");
  var _0x29976e = _0x247e70.getContext("2d");
  _0x247e70.width = 501 * _0x444466;
  _0x247e70.height = 309 * _0x444466;
  _0x29976e.translate(0, 6 * _0x444466);
  _0x29976e.globalAlpha = _0x1101e9 ? 0.5 : 1;
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(126 * _0x444466, 184 * _0x444466);
  _0x29976e.bezierCurveTo(
    169 * _0x444466,
    196 * _0x444466,
    194 * _0x444466,
    198 * _0x444466,
    227 * _0x444466,
    198 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    235 * _0x444466,
    222 * _0x444466,
    236 * _0x444466,
    223 * _0x444466,
    241 * _0x444466,
    226 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    245 * _0x444466,
    228 * _0x444466,
    257 * _0x444466,
    228 * _0x444466,
    263 * _0x444466,
    226 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    267 * _0x444466,
    225 * _0x444466,
    270 * _0x444466,
    211 * _0x444466,
    275 * _0x444466,
    198 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    332 * _0x444466,
    194 * _0x444466,
    347 * _0x444466,
    192 * _0x444466,
    372 * _0x444466,
    188 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    366 * _0x444466,
    174.5 * _0x444466,
    366 * _0x444466,
    174.5 * _0x444466,
    360 * _0x444466,
    161 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    253.5 * _0x444466,
    162 * _0x444466,
    253.5 * _0x444466,
    162 * _0x444466,
    147 * _0x444466,
    163 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[0]);
  _0x29976e.globalAlpha = 1;
  _0x29976e.translate(0, -6 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(100 * _0x444466, 116 * _0x444466);
  _0x29976e.bezierCurveTo(
    90 * _0x444466,
    101 * _0x444466,
    96 * _0x444466,
    89 * _0x444466,
    106 * _0x444466,
    83 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    86 * _0x444466,
    79 * _0x444466,
    86 * _0x444466,
    52 * _0x444466,
    93 * _0x444466,
    38 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    99 * _0x444466,
    51 * _0x444466,
    107 * _0x444466,
    57 * _0x444466,
    122 * _0x444466,
    63 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    130 * _0x444466,
    53 * _0x444466,
    141 * _0x444466,
    46 * _0x444466,
    161 * _0x444466,
    46 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    157 * _0x444466,
    31 * _0x444466,
    158 * _0x444466,
    20 * _0x444466,
    169 * _0x444466,
    6 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    171 * _0x444466,
    24 * _0x444466,
    186 * _0x444466,
    33 * _0x444466,
    198 * _0x444466,
    45 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    252 * _0x444466,
    45 * _0x444466,
    252 * _0x444466,
    45 * _0x444466,
    306 * _0x444466,
    45 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    323 * _0x444466,
    33 * _0x444466,
    332 * _0x444466,
    21 * _0x444466,
    335 * _0x444466,
    7 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    349 * _0x444466,
    21 * _0x444466,
    347 * _0x444466,
    36 * _0x444466,
    345 * _0x444466,
    46 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    364 * _0x444466,
    46 * _0x444466,
    369 * _0x444466,
    48 * _0x444466,
    377 * _0x444466,
    63 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    398 * _0x444466,
    58 * _0x444466,
    403 * _0x444466,
    49 * _0x444466,
    409 * _0x444466,
    40 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    419 * _0x444466,
    57 * _0x444466,
    411 * _0x444466,
    79 * _0x444466,
    398 * _0x444466,
    85 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    405 * _0x444466,
    100 * _0x444466,
    405 * _0x444466,
    106 * _0x444466,
    401 * _0x444466,
    118 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    332.5 * _0x444466,
    128.5 * _0x444466,
    332.5 * _0x444466,
    128.5 * _0x444466,
    264 * _0x444466,
    139 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[1], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(122 * _0x444466, 191 * _0x444466);
  _0x29976e.bezierCurveTo(
    123 * _0x444466,
    237 * _0x444466,
    135 * _0x444466,
    245 * _0x444466,
    153 * _0x444466,
    259 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    167 * _0x444466,
    269 * _0x444466,
    158 * _0x444466,
    281 * _0x444466,
    118 * _0x444466,
    276 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    104 * _0x444466,
    273 * _0x444466,
    98 * _0x444466,
    268 * _0x444466,
    93 * _0x444466,
    242 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    89 * _0x444466,
    220 * _0x444466,
    92 * _0x444466,
    201 * _0x444466,
    102 * _0x444466,
    179 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[3], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(403 * _0x444466, 182 * _0x444466);
  _0x29976e.bezierCurveTo(
    414 * _0x444466,
    215 * _0x444466,
    412 * _0x444466,
    232 * _0x444466,
    403 * _0x444466,
    260 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    395 * _0x444466,
    274 * _0x444466,
    375 * _0x444466,
    272 * _0x444466,
    356 * _0x444466,
    270 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    345 * _0x444466,
    268 * _0x444466,
    339 * _0x444466,
    262 * _0x444466,
    354 * _0x444466,
    252 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    370 * _0x444466,
    242 * _0x444466,
    380 * _0x444466,
    225 * _0x444466,
    384 * _0x444466,
    184 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[3], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(155 * _0x444466, 157 * _0x444466);
  _0x29976e.bezierCurveTo(
    146 * _0x444466,
    189 * _0x444466,
    137 * _0x444466,
    198 * _0x444466,
    114 * _0x444466,
    219 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    104 * _0x444466,
    212 * _0x444466,
    98 * _0x444466,
    203 * _0x444466,
    89 * _0x444466,
    189 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    82 * _0x444466,
    178 * _0x444466,
    91 * _0x444466,
    164 * _0x444466,
    93 * _0x444466,
    136 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[4], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(347 * _0x444466, 162 * _0x444466);
  _0x29976e.bezierCurveTo(
    357 * _0x444466,
    195 * _0x444466,
    376 * _0x444466,
    209 * _0x444466,
    387 * _0x444466,
    217 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    409 * _0x444466,
    201 * _0x444466,
    420 * _0x444466,
    181 * _0x444466,
    416 * _0x444466,
    166 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    410 * _0x444466,
    150 * _0x444466,
    412 * _0x444466,
    149 * _0x444466,
    408 * _0x444466,
    130 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[4], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(86 * _0x444466, 134 * _0x444466);
  _0x29976e.bezierCurveTo(
    79 * _0x444466,
    102 * _0x444466,
    92 * _0x444466,
    84 * _0x444466,
    108 * _0x444466,
    92 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    149 * _0x444466,
    108 * _0x444466,
    184 * _0x444466,
    111 * _0x444466,
    242 * _0x444466,
    111 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    294 * _0x444466,
    108 * _0x444466,
    341 * _0x444466,
    105 * _0x444466,
    386 * _0x444466,
    98 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    412 * _0x444466,
    91 * _0x444466,
    417 * _0x444466,
    86 * _0x444466,
    415 * _0x444466,
    133 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    413 * _0x444466,
    160 * _0x444466,
    413 * _0x444466,
    160 * _0x444466,
    368 * _0x444466,
    174 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    308 * _0x444466,
    184 * _0x444466,
    291 * _0x444466,
    185 * _0x444466,
    270 * _0x444466,
    186 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    264 * _0x444466,
    206 * _0x444466,
    262 * _0x444466,
    215 * _0x444466,
    253 * _0x444466,
    215 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    239 * _0x444466,
    217 * _0x444466,
    239 * _0x444466,
    211 * _0x444466,
    231 * _0x444466,
    186 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    178 * _0x444466,
    184 * _0x444466,
    156 * _0x444466,
    179 * _0x444466,
    112 * _0x444466,
    162 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    87 * _0x444466,
    151 * _0x444466,
    90 * _0x444466,
    144 * _0x444466,
    87 * _0x444466,
    137 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[4], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(63 * _0x444466, 98 * _0x444466);
  _0x29976e.bezierCurveTo(
    84 * _0x444466,
    121 * _0x444466,
    109 * _0x444466,
    102 * _0x444466,
    124 * _0x444466,
    117 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    138 * _0x444466,
    136 * _0x444466,
    123 * _0x444466,
    165 * _0x444466,
    94 * _0x444466,
    150 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    66 * _0x444466,
    131 * _0x444466,
    64 * _0x444466,
    115 * _0x444466,
    63 * _0x444466,
    99 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[3], _0x231600[2], 10 * _0x444466);
  _0x29976e.beginPath();
  _0x29976e.lineCap = "round";
  _0x29976e.lineJoin = "round";
  _0x29976e.moveTo(449 * _0x444466, 97 * _0x444466);
  _0x29976e.bezierCurveTo(
    446 * _0x444466,
    143 * _0x444466,
    415 * _0x444466,
    151 * _0x444466,
    402 * _0x444466,
    155 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    386 * _0x444466,
    157 * _0x444466,
    373 * _0x444466,
    133 * _0x444466,
    391 * _0x444466,
    116 * _0x444466
  );
  _0x29976e.bezierCurveTo(
    402 * _0x444466,
    106 * _0x444466,
    432 * _0x444466,
    124 * _0x444466,
    449 * _0x444466,
    97 * _0x444466
  );
  _0x29976e.closePath();
  fill_path(_0x29976e, _0x231600[3], _0x231600[2], 10 * _0x444466);
  return _0x247e70;
}
function create_crab_loot(_0x3ce89a, _0x9ef749, _0x5a474f) {
  var _0xa582d5 = document.createElement("canvas");
  var _0x30f73a = _0xa582d5.getContext("2d");
  _0xa582d5.width = 304 * _0x3ce89a;
  _0xa582d5.height = 278 * _0x3ce89a;
  _0x30f73a.translate(10 * _0x3ce89a, 25 * _0x3ce89a);
  _0x30f73a.globalAlpha = _0x9ef749 ? 0.5 : 1;
  _0x30f73a.beginPath();
  _0x30f73a.lineCap = "round";
  _0x30f73a.lineJoin = "round";
  _0x30f73a.moveTo(128 * _0x3ce89a, 137 * _0x3ce89a);
  _0x30f73a.bezierCurveTo(
    155 * _0x3ce89a,
    144 * _0x3ce89a,
    223 * _0x3ce89a,
    143 * _0x3ce89a,
    256 * _0x3ce89a,
    122 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    249 * _0x3ce89a,
    180 * _0x3ce89a,
    210 * _0x3ce89a,
    227 * _0x3ce89a,
    164 * _0x3ce89a,
    242 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    74 * _0x3ce89a,
    213 * _0x3ce89a,
    99 * _0x3ce89a,
    166 * _0x3ce89a,
    127 * _0x3ce89a,
    138 * _0x3ce89a
  );
  _0x30f73a.closePath();
  fill_path(_0x30f73a, _0x5a474f[0]);
  _0x30f73a.beginPath();
  _0x30f73a.lineCap = "round";
  _0x30f73a.lineJoin = "round";
  _0x30f73a.moveTo(284 * _0x3ce89a, 52 * _0x3ce89a);
  _0x30f73a.bezierCurveTo(
    126 * _0x3ce89a,
    112 * _0x3ce89a,
    89 * _0x3ce89a,
    177 * _0x3ce89a,
    170 * _0x3ce89a,
    241 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    103 * _0x3ce89a,
    275 * _0x3ce89a,
    20 * _0x3ce89a,
    239 * _0x3ce89a,
    12 * _0x3ce89a,
    159 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    5 * _0x3ce89a,
    76 * _0x3ce89a,
    75 * _0x3ce89a,
    4 * _0x3ce89a,
    165 * _0x3ce89a,
    13 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    233 * _0x3ce89a,
    15 * _0x3ce89a,
    260 * _0x3ce89a,
    33 * _0x3ce89a,
    284 * _0x3ce89a,
    52 * _0x3ce89a
  );
  _0x30f73a.closePath();
  fill_path(_0x30f73a, _0x5a474f[0]);
  _0x30f73a.translate(-10 * _0x3ce89a, -25 * _0x3ce89a);
  _0x30f73a.globalAlpha = 1;
  _0x30f73a.beginPath();
  _0x30f73a.lineCap = "round";
  _0x30f73a.lineJoin = "round";
  _0x30f73a.moveTo(128 * _0x3ce89a, 137 * _0x3ce89a);
  _0x30f73a.bezierCurveTo(
    155 * _0x3ce89a,
    144 * _0x3ce89a,
    223 * _0x3ce89a,
    143 * _0x3ce89a,
    256 * _0x3ce89a,
    122 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    249 * _0x3ce89a,
    180 * _0x3ce89a,
    210 * _0x3ce89a,
    227 * _0x3ce89a,
    164 * _0x3ce89a,
    242 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    74 * _0x3ce89a,
    213 * _0x3ce89a,
    99 * _0x3ce89a,
    166 * _0x3ce89a,
    127 * _0x3ce89a,
    138 * _0x3ce89a
  );
  _0x30f73a.closePath();
  fill_path(_0x30f73a, _0x5a474f[1], _0x5a474f[2], 15 * _0x3ce89a);
  _0x30f73a.beginPath();
  _0x30f73a.lineCap = "round";
  _0x30f73a.lineJoin = "round";
  _0x30f73a.moveTo(284 * _0x3ce89a, 52 * _0x3ce89a);
  _0x30f73a.bezierCurveTo(
    126 * _0x3ce89a,
    112 * _0x3ce89a,
    89 * _0x3ce89a,
    177 * _0x3ce89a,
    170 * _0x3ce89a,
    241 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    103 * _0x3ce89a,
    275 * _0x3ce89a,
    20 * _0x3ce89a,
    239 * _0x3ce89a,
    12 * _0x3ce89a,
    159 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    5 * _0x3ce89a,
    76 * _0x3ce89a,
    75 * _0x3ce89a,
    4 * _0x3ce89a,
    165 * _0x3ce89a,
    13 * _0x3ce89a
  );
  _0x30f73a.bezierCurveTo(
    233 * _0x3ce89a,
    15 * _0x3ce89a,
    260 * _0x3ce89a,
    33 * _0x3ce89a,
    284 * _0x3ce89a,
    52 * _0x3ce89a
  );
  _0x30f73a.closePath();
  fill_path(_0x30f73a, _0x5a474f[3], _0x5a474f[4], 15 * _0x3ce89a);
  return _0xa582d5;
}
function create_bed(_0x1feefb, _0x3f1894, _0x125542) {
  var _0x307949 = document.createElement("canvas");
  var _0xa63a57 = _0x307949.getContext("2d");
  _0x307949.width = 175 * _0x1feefb;
  _0x307949.height = 169 * _0x1feefb;
  _0xa63a57.globalAlpha = 0.5;
  _0xa63a57.translate(0, 3 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(19 * _0x1feefb, 139 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    18 * _0x1feefb,
    163 * _0x1feefb,
    22 * _0x1feefb,
    156 * _0x1feefb,
    53 * _0x1feefb,
    157 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    97.5 * _0x1feefb,
    157 * _0x1feefb,
    97.5 * _0x1feefb,
    157 * _0x1feefb,
    142 * _0x1feefb,
    157 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    150 * _0x1feefb,
    157 * _0x1feefb,
    153 * _0x1feefb,
    156 * _0x1feefb,
    154 * _0x1feefb,
    142 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[0]);
  _0xa63a57.globalAlpha = 1;
  _0xa63a57.translate(0, -3 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(86.5 * _0x1feefb, 81.5 * _0x1feefb);
  round_rect(
    _0xa63a57,
    -66.5 * _0x1feefb,
    -65.5 * _0x1feefb,
    133 * _0x1feefb,
    131 * _0x1feefb,
    10 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[1], _0x125542[2], 5 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(84.5 * _0x1feefb, 79 * _0x1feefb);
  round_rect(
    _0xa63a57,
    -50.5 * _0x1feefb,
    -49 * _0x1feefb,
    101 * _0x1feefb,
    98 * _0x1feefb,
    10 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[3], _0x125542[2], 5 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(42 * _0x1feefb, 54 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    37 * _0x1feefb,
    48 * _0x1feefb,
    39 * _0x1feefb,
    44 * _0x1feefb,
    38 * _0x1feefb,
    41 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    42 * _0x1feefb,
    40 * _0x1feefb,
    45 * _0x1feefb,
    40 * _0x1feefb,
    50 * _0x1feefb,
    41 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    85 * _0x1feefb,
    36 * _0x1feefb,
    98 * _0x1feefb,
    37 * _0x1feefb,
    116 * _0x1feefb,
    42 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    132 * _0x1feefb,
    39 * _0x1feefb,
    132 * _0x1feefb,
    39 * _0x1feefb,
    133 * _0x1feefb,
    56 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    136 * _0x1feefb,
    73 * _0x1feefb,
    136 * _0x1feefb,
    84 * _0x1feefb,
    132 * _0x1feefb,
    106 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    47 * _0x1feefb,
    113 * _0x1feefb,
    85.5 * _0x1feefb,
    106 * _0x1feefb,
    39 * _0x1feefb,
    106 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    32 * _0x1feefb,
    81 * _0x1feefb,
    38 * _0x1feefb,
    60 * _0x1feefb,
    42 * _0x1feefb,
    55 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[4], _0x125542[5], 5 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(28 * _0x1feefb, 24 * _0x1feefb);
  _0xa63a57.rotate(0);
  round_rect(
    _0xa63a57,
    -14 * _0x1feefb,
    -14 * _0x1feefb,
    28 * _0x1feefb,
    28 * _0x1feefb,
    4 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[1], _0x125542[2], 5 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(143 * _0x1feefb, 23 * _0x1feefb);
  _0xa63a57.rotate(0);
  round_rect(
    _0xa63a57,
    -14 * _0x1feefb,
    -14 * _0x1feefb,
    28 * _0x1feefb,
    28 * _0x1feefb,
    4 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[1], _0x125542[2], 5 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(55 * _0x1feefb, 80 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    73 * _0x1feefb,
    78 * _0x1feefb,
    84 * _0x1feefb,
    74 * _0x1feefb,
    100 * _0x1feefb,
    64 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    111 * _0x1feefb,
    57 * _0x1feefb,
    125 * _0x1feefb,
    67 * _0x1feefb,
    108 * _0x1feefb,
    84 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    96 * _0x1feefb,
    95 * _0x1feefb,
    86 * _0x1feefb,
    96 * _0x1feefb,
    70 * _0x1feefb,
    88 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    62.5 * _0x1feefb,
    84 * _0x1feefb,
    62.5 * _0x1feefb,
    84 * _0x1feefb,
    55 * _0x1feefb,
    80 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[5]);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(17 * _0x1feefb, 112 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    14 * _0x1feefb,
    146 * _0x1feefb,
    27 * _0x1feefb,
    152 * _0x1feefb,
    37 * _0x1feefb,
    149 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    78 * _0x1feefb,
    155 * _0x1feefb,
    128 * _0x1feefb,
    150 * _0x1feefb,
    146 * _0x1feefb,
    150 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    158 * _0x1feefb,
    144 * _0x1feefb,
    158 * _0x1feefb,
    121 * _0x1feefb,
    153 * _0x1feefb,
    114 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[8], _0x125542[9], 5 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(127 * _0x1feefb, 111 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    133 * _0x1feefb,
    136 * _0x1feefb,
    115 * _0x1feefb,
    149 * _0x1feefb,
    88 * _0x1feefb,
    150 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    119.5 * _0x1feefb,
    151 * _0x1feefb,
    119.5 * _0x1feefb,
    151 * _0x1feefb,
    151 * _0x1feefb,
    152 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    159 * _0x1feefb,
    136 * _0x1feefb,
    155 * _0x1feefb,
    126 * _0x1feefb,
    154 * _0x1feefb,
    113 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[9]);
  _0xa63a57.globalAlpha = 0.5;
  _0xa63a57.translate(0, 3 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(15 * _0x1feefb, 117 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    34 * _0x1feefb,
    109 * _0x1feefb,
    61 * _0x1feefb,
    106 * _0x1feefb,
    94 * _0x1feefb,
    109 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    126 * _0x1feefb,
    110 * _0x1feefb,
    142 * _0x1feefb,
    113 * _0x1feefb,
    154 * _0x1feefb,
    119 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    154 * _0x1feefb,
    123 * _0x1feefb,
    154 * _0x1feefb,
    123 * _0x1feefb,
    154 * _0x1feefb,
    127 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    127 * _0x1feefb,
    118 * _0x1feefb,
    15 * _0x1feefb,
    122 * _0x1feefb,
    18 * _0x1feefb,
    129 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[0]);
  _0xa63a57.globalAlpha = 1;
  _0xa63a57.translate(0, -3 * _0x1feefb);
  _0xa63a57.beginPath();
  _0xa63a57.lineCap = "round";
  _0xa63a57.lineJoin = "round";
  _0xa63a57.moveTo(14 * _0x1feefb, 127 * _0x1feefb);
  _0xa63a57.bezierCurveTo(
    13 * _0x1feefb,
    117 * _0x1feefb,
    12 * _0x1feefb,
    109 * _0x1feefb,
    15 * _0x1feefb,
    103 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    16 * _0x1feefb,
    95 * _0x1feefb,
    21 * _0x1feefb,
    92 * _0x1feefb,
    60 * _0x1feefb,
    93 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    91 * _0x1feefb,
    93 * _0x1feefb,
    118 * _0x1feefb,
    93 * _0x1feefb,
    143 * _0x1feefb,
    96 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    151 * _0x1feefb,
    96 * _0x1feefb,
    155 * _0x1feefb,
    99 * _0x1feefb,
    156 * _0x1feefb,
    112 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    157 * _0x1feefb,
    124 * _0x1feefb,
    157 * _0x1feefb,
    127 * _0x1feefb,
    156 * _0x1feefb,
    128 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    138 * _0x1feefb,
    112 * _0x1feefb,
    100 * _0x1feefb,
    118 * _0x1feefb,
    84 * _0x1feefb,
    118 * _0x1feefb
  );
  _0xa63a57.bezierCurveTo(
    28 * _0x1feefb,
    118 * _0x1feefb,
    20 * _0x1feefb,
    120 * _0x1feefb,
    16 * _0x1feefb,
    127 * _0x1feefb
  );
  _0xa63a57.closePath();
  fill_path(_0xa63a57, _0x125542[4], _0x125542[5], 5 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(27.5 * _0x1feefb, 138.5 * _0x1feefb);
  round_rect(
    _0xa63a57,
    -13.5 * _0x1feefb,
    -14.5 * _0x1feefb,
    27 * _0x1feefb,
    29 * _0x1feefb,
    4 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[1], _0x125542[2], 5 * _0x1feefb);
  _0xa63a57.save();
  _0xa63a57.translate(143.5 * _0x1feefb, 137 * _0x1feefb);
  round_rect(
    _0xa63a57,
    -13.5 * _0x1feefb,
    -14 * _0x1feefb,
    27 * _0x1feefb,
    28 * _0x1feefb,
    4 * _0x1feefb
  );
  _0xa63a57.restore();
  fill_path(_0xa63a57, _0x125542[1], _0x125542[2], 5 * _0x1feefb);
  return _0x307949;
}
function create_bed_top(_0x5ac8c2, _0x2e1ee6, _0x43b340) {
  var _0xb23d6b = document.createElement("canvas");
  var _0x2f7d26 = _0xb23d6b.getContext("2d");
  _0xb23d6b.width = 175 * _0x5ac8c2;
  _0xb23d6b.height = 169 * _0x5ac8c2;
  _0x2f7d26.beginPath();
  _0x2f7d26.lineCap = "round";
  _0x2f7d26.lineJoin = "round";
  _0x2f7d26.moveTo(17 * _0x5ac8c2, 112 * _0x5ac8c2);
  _0x2f7d26.bezierCurveTo(
    14 * _0x5ac8c2,
    146 * _0x5ac8c2,
    27 * _0x5ac8c2,
    152 * _0x5ac8c2,
    37 * _0x5ac8c2,
    149 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    78 * _0x5ac8c2,
    155 * _0x5ac8c2,
    128 * _0x5ac8c2,
    150 * _0x5ac8c2,
    146 * _0x5ac8c2,
    150 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    158 * _0x5ac8c2,
    144 * _0x5ac8c2,
    158 * _0x5ac8c2,
    121 * _0x5ac8c2,
    153 * _0x5ac8c2,
    114 * _0x5ac8c2
  );
  _0x2f7d26.closePath();
  fill_path(_0x2f7d26, _0x43b340[8], _0x43b340[9], 5 * _0x5ac8c2);
  _0x2f7d26.beginPath();
  _0x2f7d26.lineCap = "round";
  _0x2f7d26.lineJoin = "round";
  _0x2f7d26.moveTo(127 * _0x5ac8c2, 111 * _0x5ac8c2);
  _0x2f7d26.bezierCurveTo(
    133 * _0x5ac8c2,
    136 * _0x5ac8c2,
    115 * _0x5ac8c2,
    149 * _0x5ac8c2,
    88 * _0x5ac8c2,
    150 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    119.5 * _0x5ac8c2,
    151 * _0x5ac8c2,
    119.5 * _0x5ac8c2,
    151 * _0x5ac8c2,
    151 * _0x5ac8c2,
    152 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    159 * _0x5ac8c2,
    136 * _0x5ac8c2,
    155 * _0x5ac8c2,
    126 * _0x5ac8c2,
    154 * _0x5ac8c2,
    113 * _0x5ac8c2
  );
  _0x2f7d26.closePath();
  fill_path(_0x2f7d26, _0x43b340[9]);
  _0x2f7d26.globalAlpha = 0.5;
  _0x2f7d26.translate(0, 3 * _0x5ac8c2);
  _0x2f7d26.beginPath();
  _0x2f7d26.lineCap = "round";
  _0x2f7d26.lineJoin = "round";
  _0x2f7d26.moveTo(15 * _0x5ac8c2, 117 * _0x5ac8c2);
  _0x2f7d26.bezierCurveTo(
    34 * _0x5ac8c2,
    109 * _0x5ac8c2,
    61 * _0x5ac8c2,
    106 * _0x5ac8c2,
    94 * _0x5ac8c2,
    109 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    126 * _0x5ac8c2,
    110 * _0x5ac8c2,
    142 * _0x5ac8c2,
    113 * _0x5ac8c2,
    154 * _0x5ac8c2,
    119 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    154 * _0x5ac8c2,
    123 * _0x5ac8c2,
    154 * _0x5ac8c2,
    123 * _0x5ac8c2,
    154 * _0x5ac8c2,
    127 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    127 * _0x5ac8c2,
    118 * _0x5ac8c2,
    15 * _0x5ac8c2,
    122 * _0x5ac8c2,
    18 * _0x5ac8c2,
    129 * _0x5ac8c2
  );
  _0x2f7d26.closePath();
  fill_path(_0x2f7d26, _0x43b340[0]);
  _0x2f7d26.globalAlpha = 1;
  _0x2f7d26.translate(0, -3 * _0x5ac8c2);
  _0x2f7d26.beginPath();
  _0x2f7d26.lineCap = "round";
  _0x2f7d26.lineJoin = "round";
  _0x2f7d26.moveTo(14 * _0x5ac8c2, 127 * _0x5ac8c2);
  _0x2f7d26.bezierCurveTo(
    13 * _0x5ac8c2,
    117 * _0x5ac8c2,
    12 * _0x5ac8c2,
    109 * _0x5ac8c2,
    15 * _0x5ac8c2,
    103 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    16 * _0x5ac8c2,
    95 * _0x5ac8c2,
    21 * _0x5ac8c2,
    92 * _0x5ac8c2,
    60 * _0x5ac8c2,
    93 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    91 * _0x5ac8c2,
    93 * _0x5ac8c2,
    118 * _0x5ac8c2,
    93 * _0x5ac8c2,
    143 * _0x5ac8c2,
    96 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    151 * _0x5ac8c2,
    96 * _0x5ac8c2,
    155 * _0x5ac8c2,
    99 * _0x5ac8c2,
    156 * _0x5ac8c2,
    112 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    157 * _0x5ac8c2,
    124 * _0x5ac8c2,
    157 * _0x5ac8c2,
    127 * _0x5ac8c2,
    156 * _0x5ac8c2,
    128 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    138 * _0x5ac8c2,
    112 * _0x5ac8c2,
    100 * _0x5ac8c2,
    118 * _0x5ac8c2,
    84 * _0x5ac8c2,
    118 * _0x5ac8c2
  );
  _0x2f7d26.bezierCurveTo(
    28 * _0x5ac8c2,
    118 * _0x5ac8c2,
    20 * _0x5ac8c2,
    120 * _0x5ac8c2,
    16 * _0x5ac8c2,
    127 * _0x5ac8c2
  );
  _0x2f7d26.closePath();
  fill_path(_0x2f7d26, _0x43b340[4], _0x43b340[5], 5 * _0x5ac8c2);
  _0x2f7d26.save();
  _0x2f7d26.translate(27.5 * _0x5ac8c2, 138.5 * _0x5ac8c2);
  round_rect(
    _0x2f7d26,
    -13.5 * _0x5ac8c2,
    -14.5 * _0x5ac8c2,
    27 * _0x5ac8c2,
    29 * _0x5ac8c2,
    4 * _0x5ac8c2
  );
  _0x2f7d26.restore();
  fill_path(_0x2f7d26, _0x43b340[1], _0x43b340[2], 5 * _0x5ac8c2);
  _0x2f7d26.save();
  _0x2f7d26.translate(143.5 * _0x5ac8c2, 137 * _0x5ac8c2);
  round_rect(
    _0x2f7d26,
    -13.5 * _0x5ac8c2,
    -14 * _0x5ac8c2,
    27 * _0x5ac8c2,
    28 * _0x5ac8c2,
    4 * _0x5ac8c2
  );
  _0x2f7d26.restore();
  fill_path(_0x2f7d26, _0x43b340[1], _0x43b340[2], 5 * _0x5ac8c2);
  return _0xb23d6b;
}
function create_crab_spear(_0x2b6e89, _0x16151f, _0x38e8da) {
  var _0x5444fb = document.createElement("canvas");
  var _0x488211 = _0x5444fb.getContext("2d");
  _0x5444fb.width = 115 * _0x2b6e89;
  _0x5444fb.height = 585 * _0x2b6e89;
  _0x488211.scale(-1, 1);
  _0x488211.translate(-110 * _0x2b6e89, 0);
  _0x488211.translate(10 * _0x2b6e89, 10 * _0x2b6e89);
  _0x488211.globalAlpha = _0x16151f ? 0.5 : 1;
  _0x488211.save();
  _0x488211.translate(51.5 * _0x2b6e89, 342 * _0x2b6e89);
  round_rect(
    _0x488211,
    -14.5 * _0x2b6e89,
    -225 * _0x2b6e89,
    29 * _0x2b6e89,
    450 * _0x2b6e89,
    20 * _0x2b6e89
  );
  _0x488211.restore();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(54 * _0x2b6e89, 83 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    70 * _0x2b6e89,
    69 * _0x2b6e89,
    78 * _0x2b6e89,
    62 * _0x2b6e89,
    82 * _0x2b6e89,
    40 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    93 * _0x2b6e89,
    48 * _0x2b6e89,
    103 * _0x2b6e89,
    64 * _0x2b6e89,
    95 * _0x2b6e89,
    102 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    60 * _0x2b6e89,
    114 * _0x2b6e89,
    53 * _0x2b6e89,
    103 * _0x2b6e89,
    54 * _0x2b6e89,
    85 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(95 * _0x2b6e89, 97 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    102 * _0x2b6e89,
    43 * _0x2b6e89,
    77 * _0x2b6e89,
    71 * _0x2b6e89,
    6 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    34 * _0x2b6e89,
    10 * _0x2b6e89,
    6 * _0x2b6e89,
    43 * _0x2b6e89,
    5 * _0x2b6e89,
    76 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    4 * _0x2b6e89,
    98 * _0x2b6e89,
    15 * _0x2b6e89,
    130 * _0x2b6e89,
    64 * _0x2b6e89,
    130 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    76 * _0x2b6e89,
    129 * _0x2b6e89,
    95 * _0x2b6e89,
    113 * _0x2b6e89,
    97 * _0x2b6e89,
    97 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(55 * _0x2b6e89, 176 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    74 * _0x2b6e89,
    175 * _0x2b6e89,
    82 * _0x2b6e89,
    169 * _0x2b6e89,
    96 * _0x2b6e89,
    155 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    103 * _0x2b6e89,
    183 * _0x2b6e89,
    95 * _0x2b6e89,
    214 * _0x2b6e89,
    54 * _0x2b6e89,
    219 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(50 * _0x2b6e89, 176 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    25 * _0x2b6e89,
    177 * _0x2b6e89,
    16 * _0x2b6e89,
    164 * _0x2b6e89,
    7 * _0x2b6e89,
    156 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    0 * _0x2b6e89,
    186 * _0x2b6e89,
    10 * _0x2b6e89,
    201 * _0x2b6e89,
    43 * _0x2b6e89,
    220 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 403 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    412 * _0x2b6e89,
    58 * _0x2b6e89,
    412 * _0x2b6e89,
    67 * _0x2b6e89,
    403 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    66.5 * _0x2b6e89,
    434 * _0x2b6e89,
    66.5 * _0x2b6e89,
    434 * _0x2b6e89,
    66 * _0x2b6e89,
    465 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    480 * _0x2b6e89,
    40 * _0x2b6e89,
    472 * _0x2b6e89,
    36 * _0x2b6e89,
    465 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(59 * _0x2b6e89, 67 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    97 * _0x2b6e89,
    18 * _0x2b6e89,
    117 * _0x2b6e89,
    11 * _0x2b6e89,
    110 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    11 * _0x2b6e89,
    115 * _0x2b6e89,
    15 * _0x2b6e89,
    122 * _0x2b6e89,
    23 * _0x2b6e89,
    124 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    46 * _0x2b6e89,
    118 * _0x2b6e89,
    52 * _0x2b6e89,
    113 * _0x2b6e89,
    62 * _0x2b6e89,
    86 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(30 * _0x2b6e89, 125 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    136 * _0x2b6e89,
    57 * _0x2b6e89,
    134 * _0x2b6e89,
    77 * _0x2b6e89,
    127 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    71 * _0x2b6e89,
    158 * _0x2b6e89,
    71 * _0x2b6e89,
    159 * _0x2b6e89,
    66 * _0x2b6e89,
    159 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    50.5 * _0x2b6e89,
    156.5 * _0x2b6e89,
    50.5 * _0x2b6e89,
    156.5 * _0x2b6e89,
    35 * _0x2b6e89,
    154 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    31 * _0x2b6e89,
    145 * _0x2b6e89,
    31 * _0x2b6e89,
    136 * _0x2b6e89,
    31 * _0x2b6e89,
    125 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 171 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    32 * _0x2b6e89,
    221 * _0x2b6e89,
    43 * _0x2b6e89,
    233 * _0x2b6e89,
    70 * _0x2b6e89,
    247 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    75 * _0x2b6e89,
    234 * _0x2b6e89,
    75 * _0x2b6e89,
    230 * _0x2b6e89,
    72 * _0x2b6e89,
    221 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    48 * _0x2b6e89,
    206 * _0x2b6e89,
    54 * _0x2b6e89,
    188 * _0x2b6e89,
    50 * _0x2b6e89,
    176 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(60 * _0x2b6e89, 68 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    63 * _0x2b6e89,
    69 * _0x2b6e89,
    65 * _0x2b6e89,
    71 * _0x2b6e89,
    67 * _0x2b6e89,
    77 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    61 * _0x2b6e89,
    123 * _0x2b6e89,
    52 * _0x2b6e89,
    137 * _0x2b6e89,
    42 * _0x2b6e89,
    150 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    38 * _0x2b6e89,
    151 * _0x2b6e89,
    38 * _0x2b6e89,
    151 * _0x2b6e89,
    34 * _0x2b6e89,
    152 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    33 * _0x2b6e89,
    146.5 * _0x2b6e89,
    33 * _0x2b6e89,
    146.5 * _0x2b6e89,
    32 * _0x2b6e89,
    141 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    49 * _0x2b6e89,
    118 * _0x2b6e89,
    63 * _0x2b6e89,
    87 * _0x2b6e89,
    59 * _0x2b6e89,
    68 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(71 * _0x2b6e89, 172 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    222 * _0x2b6e89,
    49 * _0x2b6e89,
    234 * _0x2b6e89,
    35 * _0x2b6e89,
    248 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    30 * _0x2b6e89,
    236 * _0x2b6e89,
    30 * _0x2b6e89,
    230 * _0x2b6e89,
    31 * _0x2b6e89,
    217 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    44 * _0x2b6e89,
    202 * _0x2b6e89,
    49 * _0x2b6e89,
    191 * _0x2b6e89,
    52 * _0x2b6e89,
    172 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 151 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    27 * _0x2b6e89,
    165 * _0x2b6e89,
    31 * _0x2b6e89,
    173 * _0x2b6e89,
    36 * _0x2b6e89,
    178 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    185 * _0x2b6e89,
    73 * _0x2b6e89,
    184 * _0x2b6e89,
    71 * _0x2b6e89,
    170 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    72 * _0x2b6e89,
    154 * _0x2b6e89,
    71 * _0x2b6e89,
    154 * _0x2b6e89,
    63 * _0x2b6e89,
    155 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[0]);
  _0x488211.translate(-10 * _0x2b6e89, -10 * _0x2b6e89);
  _0x488211.globalAlpha = 1;
  _0x488211.save();
  _0x488211.translate(51.5 * _0x2b6e89, 342 * _0x2b6e89);
  round_rect(
    _0x488211,
    -14.5 * _0x2b6e89,
    -225 * _0x2b6e89,
    29 * _0x2b6e89,
    450 * _0x2b6e89,
    20 * _0x2b6e89
  );
  _0x488211.restore();
  fill_path(_0x488211, _0x38e8da[1], _0x38e8da[2], 5 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(54 * _0x2b6e89, 83 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    70 * _0x2b6e89,
    69 * _0x2b6e89,
    78 * _0x2b6e89,
    62 * _0x2b6e89,
    82 * _0x2b6e89,
    40 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    93 * _0x2b6e89,
    48 * _0x2b6e89,
    103 * _0x2b6e89,
    64 * _0x2b6e89,
    95 * _0x2b6e89,
    102 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    60 * _0x2b6e89,
    114 * _0x2b6e89,
    53 * _0x2b6e89,
    103 * _0x2b6e89,
    54 * _0x2b6e89,
    85 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[3], _0x38e8da[4], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(95 * _0x2b6e89, 97 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    102 * _0x2b6e89,
    43 * _0x2b6e89,
    77 * _0x2b6e89,
    71 * _0x2b6e89,
    6 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    34 * _0x2b6e89,
    10 * _0x2b6e89,
    6 * _0x2b6e89,
    43 * _0x2b6e89,
    5 * _0x2b6e89,
    76 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    4 * _0x2b6e89,
    98 * _0x2b6e89,
    15 * _0x2b6e89,
    130 * _0x2b6e89,
    64 * _0x2b6e89,
    130 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    76 * _0x2b6e89,
    129 * _0x2b6e89,
    95 * _0x2b6e89,
    113 * _0x2b6e89,
    97 * _0x2b6e89,
    97 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[5], _0x38e8da[6], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 403 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    412 * _0x2b6e89,
    58 * _0x2b6e89,
    412 * _0x2b6e89,
    67 * _0x2b6e89,
    403 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    66.5 * _0x2b6e89,
    434 * _0x2b6e89,
    66.5 * _0x2b6e89,
    434 * _0x2b6e89,
    66 * _0x2b6e89,
    465 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    480 * _0x2b6e89,
    40 * _0x2b6e89,
    472 * _0x2b6e89,
    36 * _0x2b6e89,
    465 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(37 * _0x2b6e89, 427 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    435 * _0x2b6e89,
    55 * _0x2b6e89,
    435 * _0x2b6e89,
    67 * _0x2b6e89,
    427 * _0x2b6e89
  );
  fill_path(_0x488211, undefined, _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(36 * _0x2b6e89, 448 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    46 * _0x2b6e89,
    454 * _0x2b6e89,
    54 * _0x2b6e89,
    457 * _0x2b6e89,
    65 * _0x2b6e89,
    449 * _0x2b6e89
  );
  fill_path(_0x488211, undefined, _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(55 * _0x2b6e89, 176 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    74 * _0x2b6e89,
    175 * _0x2b6e89,
    82 * _0x2b6e89,
    169 * _0x2b6e89,
    96 * _0x2b6e89,
    155 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    103 * _0x2b6e89,
    183 * _0x2b6e89,
    95 * _0x2b6e89,
    214 * _0x2b6e89,
    54 * _0x2b6e89,
    219 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[3], _0x38e8da[4], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(50 * _0x2b6e89, 176 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    25 * _0x2b6e89,
    177 * _0x2b6e89,
    16 * _0x2b6e89,
    164 * _0x2b6e89,
    7 * _0x2b6e89,
    156 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    0 * _0x2b6e89,
    186 * _0x2b6e89,
    10 * _0x2b6e89,
    201 * _0x2b6e89,
    43 * _0x2b6e89,
    220 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[3], _0x38e8da[4], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(59 * _0x2b6e89, 67 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    97 * _0x2b6e89,
    18 * _0x2b6e89,
    117 * _0x2b6e89,
    11 * _0x2b6e89,
    110 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    11 * _0x2b6e89,
    115 * _0x2b6e89,
    15 * _0x2b6e89,
    122 * _0x2b6e89,
    23 * _0x2b6e89,
    124 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    46 * _0x2b6e89,
    118 * _0x2b6e89,
    52 * _0x2b6e89,
    113 * _0x2b6e89,
    62 * _0x2b6e89,
    86 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(30 * _0x2b6e89, 125 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    47 * _0x2b6e89,
    136 * _0x2b6e89,
    57 * _0x2b6e89,
    134 * _0x2b6e89,
    77 * _0x2b6e89,
    127 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    71 * _0x2b6e89,
    158 * _0x2b6e89,
    71 * _0x2b6e89,
    159 * _0x2b6e89,
    66 * _0x2b6e89,
    159 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    50.5 * _0x2b6e89,
    156.5 * _0x2b6e89,
    50.5 * _0x2b6e89,
    156.5 * _0x2b6e89,
    35 * _0x2b6e89,
    154 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    31 * _0x2b6e89,
    145 * _0x2b6e89,
    31 * _0x2b6e89,
    136 * _0x2b6e89,
    31 * _0x2b6e89,
    125 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 171 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    32 * _0x2b6e89,
    221 * _0x2b6e89,
    43 * _0x2b6e89,
    233 * _0x2b6e89,
    70 * _0x2b6e89,
    247 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    75 * _0x2b6e89,
    234 * _0x2b6e89,
    75 * _0x2b6e89,
    230 * _0x2b6e89,
    72 * _0x2b6e89,
    221 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    48 * _0x2b6e89,
    206 * _0x2b6e89,
    54 * _0x2b6e89,
    188 * _0x2b6e89,
    50 * _0x2b6e89,
    176 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(60 * _0x2b6e89, 68 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    63 * _0x2b6e89,
    69 * _0x2b6e89,
    65 * _0x2b6e89,
    71 * _0x2b6e89,
    67 * _0x2b6e89,
    77 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    61 * _0x2b6e89,
    123 * _0x2b6e89,
    52 * _0x2b6e89,
    137 * _0x2b6e89,
    42 * _0x2b6e89,
    150 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    38 * _0x2b6e89,
    151 * _0x2b6e89,
    38 * _0x2b6e89,
    151 * _0x2b6e89,
    34 * _0x2b6e89,
    152 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    33 * _0x2b6e89,
    146.5 * _0x2b6e89,
    33 * _0x2b6e89,
    146.5 * _0x2b6e89,
    32 * _0x2b6e89,
    141 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    49 * _0x2b6e89,
    118 * _0x2b6e89,
    63 * _0x2b6e89,
    87 * _0x2b6e89,
    59 * _0x2b6e89,
    68 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(71 * _0x2b6e89, 172 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    222 * _0x2b6e89,
    49 * _0x2b6e89,
    234 * _0x2b6e89,
    35 * _0x2b6e89,
    248 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    30 * _0x2b6e89,
    236 * _0x2b6e89,
    30 * _0x2b6e89,
    230 * _0x2b6e89,
    31 * _0x2b6e89,
    217 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    44 * _0x2b6e89,
    202 * _0x2b6e89,
    49 * _0x2b6e89,
    191 * _0x2b6e89,
    52 * _0x2b6e89,
    172 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(35 * _0x2b6e89, 151 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    27 * _0x2b6e89,
    165 * _0x2b6e89,
    31 * _0x2b6e89,
    173 * _0x2b6e89,
    36 * _0x2b6e89,
    178 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    56 * _0x2b6e89,
    185 * _0x2b6e89,
    73 * _0x2b6e89,
    184 * _0x2b6e89,
    71 * _0x2b6e89,
    170 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    72 * _0x2b6e89,
    154 * _0x2b6e89,
    71 * _0x2b6e89,
    154 * _0x2b6e89,
    63 * _0x2b6e89,
    155 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[7], _0x38e8da[8], 6 * _0x2b6e89);
  _0x488211.beginPath();
  _0x488211.lineCap = "round";
  _0x488211.lineJoin = "round";
  _0x488211.moveTo(53 * _0x2b6e89, 113 * _0x2b6e89);
  _0x488211.bezierCurveTo(
    65 * _0x2b6e89,
    140 * _0x2b6e89,
    75 * _0x2b6e89,
    166 * _0x2b6e89,
    52 * _0x2b6e89,
    169 * _0x2b6e89
  );
  _0x488211.bezierCurveTo(
    29 * _0x2b6e89,
    168 * _0x2b6e89,
    41 * _0x2b6e89,
    143 * _0x2b6e89,
    53 * _0x2b6e89,
    112 * _0x2b6e89
  );
  _0x488211.closePath();
  fill_path(_0x488211, _0x38e8da[3], _0x38e8da[4], 6 * _0x2b6e89);
  return _0x5444fb;
}
function create_wood_spear(_0x1981ad, _0x3fdbbb, _0x328db6) {
  var _0x4caace = document.createElement("canvas");
  var _0x23bb16 = _0x4caace.getContext("2d");
  _0x4caace.width = 81 * _0x1981ad;
  _0x4caace.height = 626 * _0x1981ad;
  _0x23bb16.translate(20 * _0x1981ad, 20 * _0x1981ad);
  _0x23bb16.globalAlpha = _0x3fdbbb ? 0.5 : 1;
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(55 * _0x1981ad, 565 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    56 * _0x1981ad,
    586 * _0x1981ad,
    53 * _0x1981ad,
    591 * _0x1981ad,
    40 * _0x1981ad,
    592 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    28 * _0x1981ad,
    591 * _0x1981ad,
    27 * _0x1981ad,
    583 * _0x1981ad,
    28 * _0x1981ad,
    557 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27 * _0x1981ad,
    135 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    26 * _0x1981ad,
    74 * _0x1981ad,
    36 * _0x1981ad,
    26 * _0x1981ad,
    41 * _0x1981ad,
    15 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    54 * _0x1981ad,
    51 * _0x1981ad,
    54 * _0x1981ad,
    81 * _0x1981ad,
    55 * _0x1981ad,
    128 * _0x1981ad
  );
  _0x23bb16.closePath();
  fill_path(_0x23bb16, _0x328db6[0]);
  _0x23bb16.translate(-20 * _0x1981ad, -20 * _0x1981ad);
  _0x23bb16.globalAlpha = 1;
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(55 * _0x1981ad, 565 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    56 * _0x1981ad,
    586 * _0x1981ad,
    53 * _0x1981ad,
    591 * _0x1981ad,
    40 * _0x1981ad,
    592 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    28 * _0x1981ad,
    591 * _0x1981ad,
    27 * _0x1981ad,
    583 * _0x1981ad,
    28 * _0x1981ad,
    557 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27 * _0x1981ad,
    135 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    26 * _0x1981ad,
    74 * _0x1981ad,
    36 * _0x1981ad,
    26 * _0x1981ad,
    41 * _0x1981ad,
    15 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    54 * _0x1981ad,
    51 * _0x1981ad,
    54 * _0x1981ad,
    81 * _0x1981ad,
    55 * _0x1981ad,
    128 * _0x1981ad
  );
  _0x23bb16.closePath();
  fill_path(_0x23bb16, _0x328db6[1], _0x328db6[2], 8 * _0x1981ad);
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(27 * _0x1981ad, 129 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    32 * _0x1981ad,
    135 * _0x1981ad,
    48 * _0x1981ad,
    136 * _0x1981ad,
    53 * _0x1981ad,
    129 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    56 * _0x1981ad,
    97 * _0x1981ad,
    53 * _0x1981ad,
    82 * _0x1981ad,
    52 * _0x1981ad,
    64 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    49 * _0x1981ad,
    33 * _0x1981ad,
    44 * _0x1981ad,
    27 * _0x1981ad,
    41 * _0x1981ad,
    21 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    31 * _0x1981ad,
    40 * _0x1981ad,
    28 * _0x1981ad,
    84 * _0x1981ad,
    27 * _0x1981ad,
    127 * _0x1981ad
  );
  _0x23bb16.closePath();
  fill_path(_0x23bb16, _0x328db6[3]);
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(55 * _0x1981ad, 565 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    56 * _0x1981ad,
    586 * _0x1981ad,
    53 * _0x1981ad,
    591 * _0x1981ad,
    40 * _0x1981ad,
    592 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    28 * _0x1981ad,
    591 * _0x1981ad,
    27 * _0x1981ad,
    583 * _0x1981ad,
    28 * _0x1981ad,
    557 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27.5 * _0x1981ad,
    346 * _0x1981ad,
    27 * _0x1981ad,
    135 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    26 * _0x1981ad,
    74 * _0x1981ad,
    36 * _0x1981ad,
    26 * _0x1981ad,
    41 * _0x1981ad,
    15 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    54 * _0x1981ad,
    51 * _0x1981ad,
    54 * _0x1981ad,
    81 * _0x1981ad,
    55 * _0x1981ad,
    128 * _0x1981ad
  );
  _0x23bb16.closePath();
  fill_path(_0x23bb16, undefined, _0x328db6[2], 8 * _0x1981ad);
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(28 * _0x1981ad, 475 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    38 * _0x1981ad,
    482 * _0x1981ad,
    48 * _0x1981ad,
    480 * _0x1981ad,
    54 * _0x1981ad,
    474 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    54 * _0x1981ad,
    509.5 * _0x1981ad,
    54 * _0x1981ad,
    509.5 * _0x1981ad,
    54 * _0x1981ad,
    545 * _0x1981ad
  );
  _0x23bb16.bezierCurveTo(
    46 * _0x1981ad,
    554 * _0x1981ad,
    36 * _0x1981ad,
    552 * _0x1981ad,
    28 * _0x1981ad,
    545 * _0x1981ad
  );
  _0x23bb16.closePath();
  fill_path(_0x23bb16, _0x328db6[4], _0x328db6[5], 8 * _0x1981ad);
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(28 * _0x1981ad, 496 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    39 * _0x1981ad,
    506 * _0x1981ad,
    49 * _0x1981ad,
    503 * _0x1981ad,
    54 * _0x1981ad,
    496 * _0x1981ad
  );
  fill_path(_0x23bb16, undefined, _0x328db6[5], 8 * _0x1981ad);
  _0x23bb16.beginPath();
  _0x23bb16.lineCap = "round";
  _0x23bb16.lineJoin = "round";
  _0x23bb16.moveTo(28 * _0x1981ad, 521 * _0x1981ad);
  _0x23bb16.bezierCurveTo(
    41 * _0x1981ad,
    529 * _0x1981ad,
    49 * _0x1981ad,
    524 * _0x1981ad,
    54 * _0x1981ad,
    520 * _0x1981ad
  );
  fill_path(_0x23bb16, undefined, _0x328db6[5], 8 * _0x1981ad);
  return _0x4caace;
}
function create_stonespear(_0x4a8855, _0x20289a, _0x325969) {
  var _0x29f637 = document.createElement("canvas");
  var _0xe711bf = _0x29f637.getContext("2d");
  _0x29f637.width = 100 * _0x4a8855;
  _0x29f637.height = 648 * _0x4a8855;
  _0xe711bf.translate(20 * _0x4a8855, 20 * _0x4a8855);
  _0xe711bf.globalAlpha = _0x20289a ? 0.5 : 1;
  _0xe711bf.save();
  _0xe711bf.translate(50.5 * _0x4a8855, 349.5 * _0x4a8855);
  round_rect(
    _0xe711bf,
    -13.5 * _0x4a8855,
    -249.5 * _0x4a8855,
    27 * _0x4a8855,
    499 * _0x4a8855,
    10 * _0x4a8855
  );
  _0xe711bf.restore();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(36 * _0x4a8855, 538 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    49.5 * _0x4a8855,
    538 * _0x4a8855,
    49.5 * _0x4a8855,
    538 * _0x4a8855,
    63 * _0x4a8855,
    538 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    63.5 * _0x4a8855,
    568 * _0x4a8855,
    63.5 * _0x4a8855,
    568 * _0x4a8855,
    64 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    50 * _0x4a8855,
    598 * _0x4a8855,
    50 * _0x4a8855,
    598 * _0x4a8855,
    36 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    36 * _0x4a8855,
    568.5 * _0x4a8855,
    36 * _0x4a8855,
    568.5 * _0x4a8855,
    36 * _0x4a8855,
    539 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(36 * _0x4a8855, 554 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    45 * _0x4a8855,
    561 * _0x4a8855,
    56 * _0x4a8855,
    558 * _0x4a8855,
    63 * _0x4a8855,
    554 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(32 * _0x4a8855, 569 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    44 * _0x4a8855,
    576 * _0x4a8855,
    58 * _0x4a8855,
    574 * _0x4a8855,
    68 * _0x4a8855,
    569 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    68 * _0x4a8855,
    584 * _0x4a8855,
    68 * _0x4a8855,
    584 * _0x4a8855,
    68 * _0x4a8855,
    599 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    68 * _0x4a8855,
    608 * _0x4a8855,
    65 * _0x4a8855,
    618 * _0x4a8855,
    49 * _0x4a8855,
    617 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    34 * _0x4a8855,
    617 * _0x4a8855,
    32 * _0x4a8855,
    610 * _0x4a8855,
    32 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(41 * _0x4a8855, 581 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    48 * _0x4a8855,
    584 * _0x4a8855,
    55 * _0x4a8855,
    583 * _0x4a8855,
    60 * _0x4a8855,
    581 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    60 * _0x4a8855,
    589.5 * _0x4a8855,
    60 * _0x4a8855,
    589.5 * _0x4a8855,
    60 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    60 * _0x4a8855,
    604 * _0x4a8855,
    59 * _0x4a8855,
    609 * _0x4a8855,
    48 * _0x4a8855,
    608 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    40 * _0x4a8855,
    607 * _0x4a8855,
    40 * _0x4a8855,
    606 * _0x4a8855,
    41 * _0x4a8855,
    581 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(31 * _0x4a8855, 106 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    31 * _0x4a8855,
    124.5 * _0x4a8855,
    31 * _0x4a8855,
    124.5 * _0x4a8855,
    31 * _0x4a8855,
    143 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    31 * _0x4a8855,
    163 * _0x4a8855,
    38 * _0x4a8855,
    169 * _0x4a8855,
    48 * _0x4a8855,
    168 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    57 * _0x4a8855,
    168 * _0x4a8855,
    67 * _0x4a8855,
    165 * _0x4a8855,
    67 * _0x4a8855,
    148 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    67 * _0x4a8855,
    123.5 * _0x4a8855,
    67 * _0x4a8855,
    123.5 * _0x4a8855,
    67 * _0x4a8855,
    99 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(49 * _0x4a8855, 27 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    64 * _0x4a8855,
    62.5 * _0x4a8855,
    64 * _0x4a8855,
    62.5 * _0x4a8855,
    79 * _0x4a8855,
    98 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    74 * _0x4a8855,
    113 * _0x4a8855,
    63 * _0x4a8855,
    121 * _0x4a8855,
    50 * _0x4a8855,
    122 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    35 * _0x4a8855,
    123 * _0x4a8855,
    22 * _0x4a8855,
    109 * _0x4a8855,
    20 * _0x4a8855,
    98 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(49 * _0x4a8855, 43 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    61 * _0x4a8855,
    70 * _0x4a8855,
    61 * _0x4a8855,
    70 * _0x4a8855,
    73 * _0x4a8855,
    97 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    66 * _0x4a8855,
    116 * _0x4a8855,
    43 * _0x4a8855,
    122 * _0x4a8855,
    26 * _0x4a8855,
    99 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[0]);
  _0xe711bf.translate(-20 * _0x4a8855, -20 * _0x4a8855);
  _0xe711bf.globalAlpha = 1;
  _0xe711bf.save();
  _0xe711bf.translate(50.5 * _0x4a8855, 349.5 * _0x4a8855);
  round_rect(
    _0xe711bf,
    -13.5 * _0x4a8855,
    -249.5 * _0x4a8855,
    27 * _0x4a8855,
    499 * _0x4a8855,
    10 * _0x4a8855
  );
  _0xe711bf.restore();
  fill_path(_0xe711bf, _0x325969[1], _0x325969[2], 8 * _0x4a8855);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(36 * _0x4a8855, 538 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    49.5 * _0x4a8855,
    538 * _0x4a8855,
    49.5 * _0x4a8855,
    538 * _0x4a8855,
    63 * _0x4a8855,
    538 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    63.5 * _0x4a8855,
    568 * _0x4a8855,
    63.5 * _0x4a8855,
    568 * _0x4a8855,
    64 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    50 * _0x4a8855,
    598 * _0x4a8855,
    50 * _0x4a8855,
    598 * _0x4a8855,
    36 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    36 * _0x4a8855,
    568.5 * _0x4a8855,
    36 * _0x4a8855,
    568.5 * _0x4a8855,
    36 * _0x4a8855,
    539 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[3], _0x325969[4], 8 * _0x4a8855);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(36 * _0x4a8855, 554 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    45 * _0x4a8855,
    561 * _0x4a8855,
    56 * _0x4a8855,
    558 * _0x4a8855,
    63 * _0x4a8855,
    554 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, undefined, _0x325969[4], 8 * _0x4a8855);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(32 * _0x4a8855, 569 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    44 * _0x4a8855,
    576 * _0x4a8855,
    58 * _0x4a8855,
    574 * _0x4a8855,
    68 * _0x4a8855,
    569 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    68 * _0x4a8855,
    584 * _0x4a8855,
    68 * _0x4a8855,
    584 * _0x4a8855,
    68 * _0x4a8855,
    599 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    68 * _0x4a8855,
    608 * _0x4a8855,
    65 * _0x4a8855,
    618 * _0x4a8855,
    49 * _0x4a8855,
    617 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    34 * _0x4a8855,
    617 * _0x4a8855,
    32 * _0x4a8855,
    610 * _0x4a8855,
    32 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[5], _0x325969[6], 8 * _0x4a8855);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(41 * _0x4a8855, 581 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    48 * _0x4a8855,
    584 * _0x4a8855,
    55 * _0x4a8855,
    583 * _0x4a8855,
    60 * _0x4a8855,
    581 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    60 * _0x4a8855,
    589.5 * _0x4a8855,
    60 * _0x4a8855,
    589.5 * _0x4a8855,
    60 * _0x4a8855,
    598 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    60 * _0x4a8855,
    604 * _0x4a8855,
    59 * _0x4a8855,
    609 * _0x4a8855,
    48 * _0x4a8855,
    608 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    40 * _0x4a8855,
    607 * _0x4a8855,
    40 * _0x4a8855,
    606 * _0x4a8855,
    41 * _0x4a8855,
    581 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[7]);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(31 * _0x4a8855, 106 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    31 * _0x4a8855,
    124.5 * _0x4a8855,
    31 * _0x4a8855,
    124.5 * _0x4a8855,
    31 * _0x4a8855,
    143 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    31 * _0x4a8855,
    163 * _0x4a8855,
    38 * _0x4a8855,
    169 * _0x4a8855,
    48 * _0x4a8855,
    168 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    57 * _0x4a8855,
    168 * _0x4a8855,
    67 * _0x4a8855,
    165 * _0x4a8855,
    67 * _0x4a8855,
    148 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    67 * _0x4a8855,
    123.5 * _0x4a8855,
    67 * _0x4a8855,
    123.5 * _0x4a8855,
    67 * _0x4a8855,
    99 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[5], _0x325969[6], 8 * _0x4a8855);
  _0xe711bf.save();
  _0xe711bf.translate(-46 * _0x4a8855, -50 * _0x4a8855);
  _0xe711bf.scale(2, 2);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(51 * _0x4a8855, 80 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    51 * _0x4a8855,
    89.5 * _0x4a8855,
    51 * _0x4a8855,
    89.5 * _0x4a8855,
    51 * _0x4a8855,
    99 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    49 * _0x4a8855,
    103 * _0x4a8855,
    46 * _0x4a8855,
    105 * _0x4a8855,
    44 * _0x4a8855,
    99 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    44 * _0x4a8855,
    88.5 * _0x4a8855,
    44 * _0x4a8855,
    88.5 * _0x4a8855,
    44 * _0x4a8855,
    78 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[8]);
  _0xe711bf.restore();
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(49 * _0x4a8855, 27 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    64 * _0x4a8855,
    62.5 * _0x4a8855,
    64 * _0x4a8855,
    62.5 * _0x4a8855,
    79 * _0x4a8855,
    98 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    74 * _0x4a8855,
    113 * _0x4a8855,
    63 * _0x4a8855,
    121 * _0x4a8855,
    50 * _0x4a8855,
    122 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    35 * _0x4a8855,
    123 * _0x4a8855,
    22 * _0x4a8855,
    109 * _0x4a8855,
    20 * _0x4a8855,
    98 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[8], _0x325969[9], 8 * _0x4a8855);
  _0xe711bf.scale(2, 2);
  _0xe711bf.translate(-23 * _0x4a8855, -20 * _0x4a8855);
  _0xe711bf.beginPath();
  _0xe711bf.lineCap = "round";
  _0xe711bf.lineJoin = "round";
  _0xe711bf.moveTo(57 * _0x4a8855, 69 * _0x4a8855);
  _0xe711bf.bezierCurveTo(
    50 * _0x4a8855,
    76 * _0x4a8855,
    43 * _0x4a8855,
    75 * _0x4a8855,
    38 * _0x4a8855,
    69 * _0x4a8855
  );
  _0xe711bf.bezierCurveTo(
    43 * _0x4a8855,
    57 * _0x4a8855,
    43 * _0x4a8855,
    57 * _0x4a8855,
    48 * _0x4a8855,
    45 * _0x4a8855
  );
  _0xe711bf.closePath();
  fill_path(_0xe711bf, _0x325969[10]);
  return _0x29f637;
}
function create_goldspear(_0x3a8f35, _0x3f0cec, _0x2dfeb5) {
  var _0x5ee76e = document.createElement("canvas");
  var _0x28a851 = _0x5ee76e.getContext("2d");
  _0x5ee76e.width = 88 * _0x3a8f35;
  _0x5ee76e.height = 647 * _0x3a8f35;
  _0x28a851.translate(20 * _0x3a8f35, 20 * _0x3a8f35);
  _0x28a851.globalAlpha = _0x3f0cec ? 0.5 : 1;
  _0x28a851.save();
  _0x28a851.translate(45 * _0x3a8f35, 384.5 * _0x3a8f35);
  round_rect(
    _0x28a851,
    -15 * _0x3a8f35,
    -216.5 * _0x3a8f35,
    30 * _0x3a8f35,
    433 * _0x3a8f35,
    10 * _0x3a8f35
  );
  _0x28a851.restore();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(27 * _0x3a8f35, 572 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    44 * _0x3a8f35,
    580 * _0x3a8f35,
    55 * _0x3a8f35,
    576 * _0x3a8f35,
    62 * _0x3a8f35,
    572 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    65 * _0x3a8f35,
    585.5 * _0x3a8f35,
    65 * _0x3a8f35,
    585.5 * _0x3a8f35,
    68 * _0x3a8f35,
    599 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    71 * _0x3a8f35,
    612 * _0x3a8f35,
    68 * _0x3a8f35,
    618 * _0x3a8f35,
    34 * _0x3a8f35,
    616 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    14 * _0x3a8f35,
    615 * _0x3a8f35,
    19 * _0x3a8f35,
    607 * _0x3a8f35,
    27 * _0x3a8f35,
    573 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(32 * _0x3a8f35, 587 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    39 * _0x3a8f35,
    590 * _0x3a8f35,
    48 * _0x3a8f35,
    588 * _0x3a8f35,
    54 * _0x3a8f35,
    587 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    57 * _0x3a8f35,
    604 * _0x3a8f35,
    59 * _0x3a8f35,
    609 * _0x3a8f35,
    46 * _0x3a8f35,
    609 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    27 * _0x3a8f35,
    609 * _0x3a8f35,
    28 * _0x3a8f35,
    605 * _0x3a8f35,
    33 * _0x3a8f35,
    588 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(31 * _0x3a8f35, 113 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    27 * _0x3a8f35,
    139 * _0x3a8f35,
    27 * _0x3a8f35,
    139 * _0x3a8f35,
    23 * _0x3a8f35,
    165 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    18 * _0x3a8f35,
    187 * _0x3a8f35,
    39 * _0x3a8f35,
    195 * _0x3a8f35,
    57 * _0x3a8f35,
    186 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    68 * _0x3a8f35,
    180 * _0x3a8f35,
    65 * _0x3a8f35,
    171 * _0x3a8f35,
    62 * _0x3a8f35,
    153 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    58.5 * _0x3a8f35,
    131 * _0x3a8f35,
    58.5 * _0x3a8f35,
    131 * _0x3a8f35,
    55 * _0x3a8f35,
    109 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(39 * _0x3a8f35, 139 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    43 * _0x3a8f35,
    139 * _0x3a8f35,
    43 * _0x3a8f35,
    139 * _0x3a8f35,
    47 * _0x3a8f35,
    139 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    51 * _0x3a8f35,
    158 * _0x3a8f35,
    56 * _0x3a8f35,
    176 * _0x3a8f35,
    44 * _0x3a8f35,
    175 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    33 * _0x3a8f35,
    177 * _0x3a8f35,
    34 * _0x3a8f35,
    167 * _0x3a8f35,
    39 * _0x3a8f35,
    140 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(44 * _0x3a8f35, 29 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    57 * _0x3a8f35,
    63 * _0x3a8f35,
    57 * _0x3a8f35,
    63 * _0x3a8f35,
    70 * _0x3a8f35,
    97 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    60 * _0x3a8f35,
    111 * _0x3a8f35,
    60 * _0x3a8f35,
    111 * _0x3a8f35,
    50 * _0x3a8f35,
    125 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    45 * _0x3a8f35,
    128 * _0x3a8f35,
    41 * _0x3a8f35,
    128 * _0x3a8f35,
    35 * _0x3a8f35,
    124 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    26.5 * _0x3a8f35,
    110 * _0x3a8f35,
    26.5 * _0x3a8f35,
    110 * _0x3a8f35,
    18 * _0x3a8f35,
    96 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(44 * _0x3a8f35, 54 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    50 * _0x3a8f35,
    72 * _0x3a8f35,
    50 * _0x3a8f35,
    72 * _0x3a8f35,
    56 * _0x3a8f35,
    90 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    58 * _0x3a8f35,
    94 * _0x3a8f35,
    59 * _0x3a8f35,
    98 * _0x3a8f35,
    53 * _0x3a8f35,
    105 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    47 * _0x3a8f35,
    113 * _0x3a8f35,
    43 * _0x3a8f35,
    113 * _0x3a8f35,
    36 * _0x3a8f35,
    103 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    29 * _0x3a8f35,
    96 * _0x3a8f35,
    31 * _0x3a8f35,
    94 * _0x3a8f35,
    35 * _0x3a8f35,
    83 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[0]);
  _0x28a851.translate(-20 * _0x3a8f35, -20 * _0x3a8f35);
  _0x28a851.globalAlpha = 1;
  _0x28a851.save();
  _0x28a851.translate(45 * _0x3a8f35, 384.5 * _0x3a8f35);
  round_rect(
    _0x28a851,
    -15 * _0x3a8f35,
    -216.5 * _0x3a8f35,
    30 * _0x3a8f35,
    433 * _0x3a8f35,
    10 * _0x3a8f35
  );
  _0x28a851.restore();
  fill_path(_0x28a851, _0x2dfeb5[1], _0x2dfeb5[2], 8 * _0x3a8f35);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(27 * _0x3a8f35, 572 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    44 * _0x3a8f35,
    580 * _0x3a8f35,
    55 * _0x3a8f35,
    576 * _0x3a8f35,
    62 * _0x3a8f35,
    572 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    65 * _0x3a8f35,
    585.5 * _0x3a8f35,
    65 * _0x3a8f35,
    585.5 * _0x3a8f35,
    68 * _0x3a8f35,
    599 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    71 * _0x3a8f35,
    612 * _0x3a8f35,
    68 * _0x3a8f35,
    618 * _0x3a8f35,
    34 * _0x3a8f35,
    616 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    14 * _0x3a8f35,
    615 * _0x3a8f35,
    19 * _0x3a8f35,
    607 * _0x3a8f35,
    27 * _0x3a8f35,
    573 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[3], _0x2dfeb5[4], 8 * _0x3a8f35);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(32 * _0x3a8f35, 587 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    39 * _0x3a8f35,
    590 * _0x3a8f35,
    48 * _0x3a8f35,
    588 * _0x3a8f35,
    54 * _0x3a8f35,
    587 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    57 * _0x3a8f35,
    604 * _0x3a8f35,
    59 * _0x3a8f35,
    609 * _0x3a8f35,
    46 * _0x3a8f35,
    609 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    27 * _0x3a8f35,
    609 * _0x3a8f35,
    28 * _0x3a8f35,
    605 * _0x3a8f35,
    33 * _0x3a8f35,
    588 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[5]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(31 * _0x3a8f35, 113 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    27 * _0x3a8f35,
    139 * _0x3a8f35,
    27 * _0x3a8f35,
    139 * _0x3a8f35,
    23 * _0x3a8f35,
    165 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    18 * _0x3a8f35,
    187 * _0x3a8f35,
    39 * _0x3a8f35,
    195 * _0x3a8f35,
    57 * _0x3a8f35,
    186 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    68 * _0x3a8f35,
    180 * _0x3a8f35,
    65 * _0x3a8f35,
    171 * _0x3a8f35,
    62 * _0x3a8f35,
    153 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    58.5 * _0x3a8f35,
    131 * _0x3a8f35,
    58.5 * _0x3a8f35,
    131 * _0x3a8f35,
    55 * _0x3a8f35,
    109 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[3], _0x2dfeb5[4], 8 * _0x3a8f35);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(39 * _0x3a8f35, 139 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    43 * _0x3a8f35,
    139 * _0x3a8f35,
    43 * _0x3a8f35,
    139 * _0x3a8f35,
    47 * _0x3a8f35,
    139 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    51 * _0x3a8f35,
    158 * _0x3a8f35,
    56 * _0x3a8f35,
    176 * _0x3a8f35,
    44 * _0x3a8f35,
    175 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    33 * _0x3a8f35,
    177 * _0x3a8f35,
    34 * _0x3a8f35,
    167 * _0x3a8f35,
    39 * _0x3a8f35,
    140 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[5]);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(44 * _0x3a8f35, 29 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    57 * _0x3a8f35,
    63 * _0x3a8f35,
    57 * _0x3a8f35,
    63 * _0x3a8f35,
    70 * _0x3a8f35,
    97 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    60 * _0x3a8f35,
    111 * _0x3a8f35,
    60 * _0x3a8f35,
    111 * _0x3a8f35,
    50 * _0x3a8f35,
    125 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    45 * _0x3a8f35,
    128 * _0x3a8f35,
    41 * _0x3a8f35,
    128 * _0x3a8f35,
    35 * _0x3a8f35,
    124 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    26.5 * _0x3a8f35,
    110 * _0x3a8f35,
    26.5 * _0x3a8f35,
    110 * _0x3a8f35,
    18 * _0x3a8f35,
    96 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[6], _0x2dfeb5[7], 8 * _0x3a8f35);
  _0x28a851.beginPath();
  _0x28a851.lineCap = "round";
  _0x28a851.lineJoin = "round";
  _0x28a851.moveTo(44 * _0x3a8f35, 54 * _0x3a8f35);
  _0x28a851.bezierCurveTo(
    50 * _0x3a8f35,
    72 * _0x3a8f35,
    50 * _0x3a8f35,
    72 * _0x3a8f35,
    56 * _0x3a8f35,
    90 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    58 * _0x3a8f35,
    94 * _0x3a8f35,
    59 * _0x3a8f35,
    98 * _0x3a8f35,
    53 * _0x3a8f35,
    105 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    47 * _0x3a8f35,
    113 * _0x3a8f35,
    43 * _0x3a8f35,
    113 * _0x3a8f35,
    36 * _0x3a8f35,
    103 * _0x3a8f35
  );
  _0x28a851.bezierCurveTo(
    29 * _0x3a8f35,
    96 * _0x3a8f35,
    31 * _0x3a8f35,
    94 * _0x3a8f35,
    35 * _0x3a8f35,
    83 * _0x3a8f35
  );
  _0x28a851.closePath();
  fill_path(_0x28a851, _0x2dfeb5[8]);
  return _0x5ee76e;
}
function create_diamondspear(_0x57bc6d, _0x1cdc96, _0x5e5acc) {
  var _0x55650a = document.createElement("canvas");
  var _0x5a27e5 = _0x55650a.getContext("2d");
  _0x55650a.width = 106 * _0x57bc6d;
  _0x55650a.height = 681 * _0x57bc6d;
  _0x5a27e5.translate(20 * _0x57bc6d, 20 * _0x57bc6d);
  _0x5a27e5.globalAlpha = _0x1cdc96 ? 0.5 : 1;
  _0x5a27e5.save();
  _0x5a27e5.translate(52.5 * _0x57bc6d, 395 * _0x57bc6d);
  _0x5a27e5.rotate(0);
  round_rect(
    _0x5a27e5,
    -11.5 * _0x57bc6d,
    -226 * _0x57bc6d,
    23 * _0x57bc6d,
    452 * _0x57bc6d,
    10 * _0x57bc6d
  );
  _0x5a27e5.restore();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(35 * _0x57bc6d, 588 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    47 * _0x57bc6d,
    596 * _0x57bc6d,
    61 * _0x57bc6d,
    594 * _0x57bc6d,
    69 * _0x57bc6d,
    588 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    79 * _0x57bc6d,
    615 * _0x57bc6d,
    78 * _0x57bc6d,
    632 * _0x57bc6d,
    59 * _0x57bc6d,
    643 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    41 * _0x57bc6d,
    650 * _0x57bc6d,
    27 * _0x57bc6d,
    632 * _0x57bc6d,
    30 * _0x57bc6d,
    610 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 135 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    61.5 * _0x57bc6d,
    142 * _0x57bc6d,
    61.5 * _0x57bc6d,
    142 * _0x57bc6d,
    71 * _0x57bc6d,
    149 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    69.5 * _0x57bc6d,
    166 * _0x57bc6d,
    69.5 * _0x57bc6d,
    166 * _0x57bc6d,
    68 * _0x57bc6d,
    183 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    60.5 * _0x57bc6d,
    187.5 * _0x57bc6d,
    60.5 * _0x57bc6d,
    187.5 * _0x57bc6d,
    53 * _0x57bc6d,
    192 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    45 * _0x57bc6d,
    187.5 * _0x57bc6d,
    45 * _0x57bc6d,
    187.5 * _0x57bc6d,
    37 * _0x57bc6d,
    183 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    35.5 * _0x57bc6d,
    167 * _0x57bc6d,
    35.5 * _0x57bc6d,
    167 * _0x57bc6d,
    34 * _0x57bc6d,
    151 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(64 * _0x57bc6d, 150 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    63 * _0x57bc6d,
    164 * _0x57bc6d,
    63 * _0x57bc6d,
    164 * _0x57bc6d,
    62 * _0x57bc6d,
    178 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    58 * _0x57bc6d,
    181 * _0x57bc6d,
    58 * _0x57bc6d,
    181 * _0x57bc6d,
    54 * _0x57bc6d,
    184 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    48.5 * _0x57bc6d,
    181.5 * _0x57bc6d,
    48.5 * _0x57bc6d,
    181.5 * _0x57bc6d,
    43 * _0x57bc6d,
    179 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    42 * _0x57bc6d,
    164.5 * _0x57bc6d,
    42 * _0x57bc6d,
    164.5 * _0x57bc6d,
    41 * _0x57bc6d,
    150 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    46 * _0x57bc6d,
    152.5 * _0x57bc6d,
    46 * _0x57bc6d,
    152.5 * _0x57bc6d,
    51 * _0x57bc6d,
    155 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 39 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    65.5 * _0x57bc6d,
    82 * _0x57bc6d,
    65.5 * _0x57bc6d,
    82 * _0x57bc6d,
    79 * _0x57bc6d,
    125 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    66 * _0x57bc6d,
    137.5 * _0x57bc6d,
    66 * _0x57bc6d,
    137.5 * _0x57bc6d,
    53 * _0x57bc6d,
    150 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    39 * _0x57bc6d,
    138 * _0x57bc6d,
    39 * _0x57bc6d,
    138 * _0x57bc6d,
    25 * _0x57bc6d,
    126 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 64 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    60 * _0x57bc6d,
    92.5 * _0x57bc6d,
    60 * _0x57bc6d,
    92.5 * _0x57bc6d,
    68 * _0x57bc6d,
    121 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    61 * _0x57bc6d,
    127.5 * _0x57bc6d,
    61 * _0x57bc6d,
    127.5 * _0x57bc6d,
    54 * _0x57bc6d,
    134 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    46.5 * _0x57bc6d,
    127.5 * _0x57bc6d,
    46.5 * _0x57bc6d,
    127.5 * _0x57bc6d,
    39 * _0x57bc6d,
    121 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[0]);
  _0x5a27e5.translate(-20 * _0x57bc6d, -20 * _0x57bc6d);
  _0x5a27e5.globalAlpha = 1;
  _0x5a27e5.save();
  _0x5a27e5.translate(52.5 * _0x57bc6d, 395 * _0x57bc6d);
  _0x5a27e5.rotate(0);
  round_rect(
    _0x5a27e5,
    -11.5 * _0x57bc6d,
    -226 * _0x57bc6d,
    23 * _0x57bc6d,
    452 * _0x57bc6d,
    10 * _0x57bc6d
  );
  _0x5a27e5.restore();
  fill_path(_0x5a27e5, _0x5e5acc[1], _0x5e5acc[2], 8 * _0x57bc6d);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(35 * _0x57bc6d, 588 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    47 * _0x57bc6d,
    596 * _0x57bc6d,
    61 * _0x57bc6d,
    594 * _0x57bc6d,
    69 * _0x57bc6d,
    588 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    79 * _0x57bc6d,
    615 * _0x57bc6d,
    78 * _0x57bc6d,
    632 * _0x57bc6d,
    59 * _0x57bc6d,
    643 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    41 * _0x57bc6d,
    650 * _0x57bc6d,
    27 * _0x57bc6d,
    632 * _0x57bc6d,
    30 * _0x57bc6d,
    610 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[3], _0x5e5acc[4], 8 * _0x57bc6d);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 135 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    61.5 * _0x57bc6d,
    142 * _0x57bc6d,
    61.5 * _0x57bc6d,
    142 * _0x57bc6d,
    71 * _0x57bc6d,
    149 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    69.5 * _0x57bc6d,
    166 * _0x57bc6d,
    69.5 * _0x57bc6d,
    166 * _0x57bc6d,
    68 * _0x57bc6d,
    183 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    60.5 * _0x57bc6d,
    187.5 * _0x57bc6d,
    60.5 * _0x57bc6d,
    187.5 * _0x57bc6d,
    53 * _0x57bc6d,
    192 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    45 * _0x57bc6d,
    187.5 * _0x57bc6d,
    45 * _0x57bc6d,
    187.5 * _0x57bc6d,
    37 * _0x57bc6d,
    183 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    35.5 * _0x57bc6d,
    167 * _0x57bc6d,
    35.5 * _0x57bc6d,
    167 * _0x57bc6d,
    34 * _0x57bc6d,
    151 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[3], _0x5e5acc[4], 8 * _0x57bc6d);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(64 * _0x57bc6d, 150 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    63 * _0x57bc6d,
    164 * _0x57bc6d,
    63 * _0x57bc6d,
    164 * _0x57bc6d,
    62 * _0x57bc6d,
    178 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    58 * _0x57bc6d,
    181 * _0x57bc6d,
    58 * _0x57bc6d,
    181 * _0x57bc6d,
    54 * _0x57bc6d,
    184 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    48.5 * _0x57bc6d,
    181.5 * _0x57bc6d,
    48.5 * _0x57bc6d,
    181.5 * _0x57bc6d,
    43 * _0x57bc6d,
    179 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    42 * _0x57bc6d,
    164.5 * _0x57bc6d,
    42 * _0x57bc6d,
    164.5 * _0x57bc6d,
    41 * _0x57bc6d,
    150 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    46 * _0x57bc6d,
    152.5 * _0x57bc6d,
    46 * _0x57bc6d,
    152.5 * _0x57bc6d,
    51 * _0x57bc6d,
    155 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[5]);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 39 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    65.5 * _0x57bc6d,
    82 * _0x57bc6d,
    65.5 * _0x57bc6d,
    82 * _0x57bc6d,
    79 * _0x57bc6d,
    125 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    66 * _0x57bc6d,
    137.5 * _0x57bc6d,
    66 * _0x57bc6d,
    137.5 * _0x57bc6d,
    53 * _0x57bc6d,
    150 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    39 * _0x57bc6d,
    138 * _0x57bc6d,
    39 * _0x57bc6d,
    138 * _0x57bc6d,
    25 * _0x57bc6d,
    126 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[6], _0x5e5acc[7], 8 * _0x57bc6d);
  _0x5a27e5.beginPath();
  _0x5a27e5.lineCap = "round";
  _0x5a27e5.lineJoin = "round";
  _0x5a27e5.moveTo(52 * _0x57bc6d, 64 * _0x57bc6d);
  _0x5a27e5.bezierCurveTo(
    60 * _0x57bc6d,
    92.5 * _0x57bc6d,
    60 * _0x57bc6d,
    92.5 * _0x57bc6d,
    68 * _0x57bc6d,
    121 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    61 * _0x57bc6d,
    127.5 * _0x57bc6d,
    61 * _0x57bc6d,
    127.5 * _0x57bc6d,
    54 * _0x57bc6d,
    134 * _0x57bc6d
  );
  _0x5a27e5.bezierCurveTo(
    46.5 * _0x57bc6d,
    127.5 * _0x57bc6d,
    46.5 * _0x57bc6d,
    127.5 * _0x57bc6d,
    39 * _0x57bc6d,
    121 * _0x57bc6d
  );
  _0x5a27e5.closePath();
  fill_path(_0x5a27e5, _0x5e5acc[8]);
  return _0x55650a;
}
function create_amespear(_0x421f4c, _0x157f3a, _0x23cf98) {
  var _0xcc0ca7 = document.createElement("canvas");
  var _0x155808 = _0xcc0ca7.getContext("2d");
  _0xcc0ca7.width = 108 * _0x421f4c;
  _0xcc0ca7.height = 669 * _0x421f4c;
  _0x155808.translate(20 * _0x421f4c, 20 * _0x421f4c);
  _0x155808.globalAlpha = _0x157f3a ? 0.5 : 1;
  _0x155808.save();
  _0x155808.translate(54 * _0x421f4c, 389.5 * _0x421f4c);
  round_rect(
    _0x155808,
    -15 * _0x421f4c,
    -228.5 * _0x421f4c,
    30 * _0x421f4c,
    457 * _0x421f4c,
    10 * _0x421f4c
  );
  _0x155808.restore();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(35 * _0x421f4c, 579 * _0x421f4c);
  _0x155808.bezierCurveTo(
    47 * _0x421f4c,
    587 * _0x421f4c,
    61 * _0x421f4c,
    584 * _0x421f4c,
    71 * _0x421f4c,
    579 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    75 * _0x421f4c,
    597.5 * _0x421f4c,
    75 * _0x421f4c,
    597.5 * _0x421f4c,
    79 * _0x421f4c,
    616 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    66.5 * _0x421f4c,
    628 * _0x421f4c,
    66.5 * _0x421f4c,
    628 * _0x421f4c,
    54 * _0x421f4c,
    640 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    41 * _0x421f4c,
    628.5 * _0x421f4c,
    41 * _0x421f4c,
    628.5 * _0x421f4c,
    28 * _0x421f4c,
    617 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(30 * _0x421f4c, 141 * _0x421f4c);
  _0x155808.bezierCurveTo(
    40 * _0x421f4c,
    136 * _0x421f4c,
    40 * _0x421f4c,
    136 * _0x421f4c,
    50 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    63 * _0x421f4c,
    136 * _0x421f4c,
    63 * _0x421f4c,
    136 * _0x421f4c,
    76 * _0x421f4c,
    141 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    72.5 * _0x421f4c,
    161.5 * _0x421f4c,
    72.5 * _0x421f4c,
    161.5 * _0x421f4c,
    69 * _0x421f4c,
    182 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    61.5 * _0x421f4c,
    186.5 * _0x421f4c,
    61.5 * _0x421f4c,
    186.5 * _0x421f4c,
    54 * _0x421f4c,
    191 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    45 * _0x421f4c,
    186.5 * _0x421f4c,
    45 * _0x421f4c,
    186.5 * _0x421f4c,
    36 * _0x421f4c,
    182 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(42 * _0x421f4c, 152 * _0x421f4c);
  _0x155808.bezierCurveTo(
    53 * _0x421f4c,
    152 * _0x421f4c,
    53 * _0x421f4c,
    152 * _0x421f4c,
    64 * _0x421f4c,
    152 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    62 * _0x421f4c,
    171 * _0x421f4c,
    62 * _0x421f4c,
    176 * _0x421f4c,
    55 * _0x421f4c,
    177 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    42 * _0x421f4c,
    176 * _0x421f4c,
    45 * _0x421f4c,
    174 * _0x421f4c,
    42 * _0x421f4c,
    152 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(52 * _0x421f4c, 28 * _0x421f4c);
  _0x155808.bezierCurveTo(
    67.5 * _0x421f4c,
    55 * _0x421f4c,
    67.5 * _0x421f4c,
    55 * _0x421f4c,
    83 * _0x421f4c,
    82 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    80 * _0x421f4c,
    106.5 * _0x421f4c,
    80 * _0x421f4c,
    106.5 * _0x421f4c,
    77 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    58 * _0x421f4c,
    147 * _0x421f4c,
    44 * _0x421f4c,
    141 * _0x421f4c,
    29 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    26.5 * _0x421f4c,
    106.5 * _0x421f4c,
    26.5 * _0x421f4c,
    106.5 * _0x421f4c,
    24 * _0x421f4c,
    82 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(53 * _0x421f4c, 53 * _0x421f4c);
  _0x155808.bezierCurveTo(
    61 * _0x421f4c,
    70 * _0x421f4c,
    61 * _0x421f4c,
    70 * _0x421f4c,
    69 * _0x421f4c,
    87 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    67 * _0x421f4c,
    106 * _0x421f4c,
    67 * _0x421f4c,
    106 * _0x421f4c,
    65 * _0x421f4c,
    125 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    54 * _0x421f4c,
    130 * _0x421f4c,
    51 * _0x421f4c,
    130 * _0x421f4c,
    41 * _0x421f4c,
    125 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    39 * _0x421f4c,
    105 * _0x421f4c,
    39 * _0x421f4c,
    105 * _0x421f4c,
    37 * _0x421f4c,
    85 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[0]);
  _0x155808.translate(-20 * _0x421f4c, -20 * _0x421f4c);
  _0x155808.globalAlpha = 1;
  _0x155808.save();
  _0x155808.translate(54 * _0x421f4c, 389.5 * _0x421f4c);
  _0x155808.rotate(0);
  round_rect(
    _0x155808,
    -15 * _0x421f4c,
    -228.5 * _0x421f4c,
    30 * _0x421f4c,
    457 * _0x421f4c,
    10 * _0x421f4c
  );
  _0x155808.restore();
  fill_path(_0x155808, _0x23cf98[1], _0x23cf98[2], 8 * _0x421f4c);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(35 * _0x421f4c, 579 * _0x421f4c);
  _0x155808.bezierCurveTo(
    47 * _0x421f4c,
    587 * _0x421f4c,
    61 * _0x421f4c,
    584 * _0x421f4c,
    71 * _0x421f4c,
    579 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    75 * _0x421f4c,
    597.5 * _0x421f4c,
    75 * _0x421f4c,
    597.5 * _0x421f4c,
    79 * _0x421f4c,
    616 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    66.5 * _0x421f4c,
    628 * _0x421f4c,
    66.5 * _0x421f4c,
    628 * _0x421f4c,
    54 * _0x421f4c,
    640 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    41 * _0x421f4c,
    628.5 * _0x421f4c,
    41 * _0x421f4c,
    628.5 * _0x421f4c,
    28 * _0x421f4c,
    617 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[3], _0x23cf98[4], 8 * _0x421f4c);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(30 * _0x421f4c, 141 * _0x421f4c);
  _0x155808.bezierCurveTo(
    40 * _0x421f4c,
    136 * _0x421f4c,
    40 * _0x421f4c,
    136 * _0x421f4c,
    50 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    63 * _0x421f4c,
    136 * _0x421f4c,
    63 * _0x421f4c,
    136 * _0x421f4c,
    76 * _0x421f4c,
    141 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    72.5 * _0x421f4c,
    161.5 * _0x421f4c,
    72.5 * _0x421f4c,
    161.5 * _0x421f4c,
    69 * _0x421f4c,
    182 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    61.5 * _0x421f4c,
    186.5 * _0x421f4c,
    61.5 * _0x421f4c,
    186.5 * _0x421f4c,
    54 * _0x421f4c,
    191 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    45 * _0x421f4c,
    186.5 * _0x421f4c,
    45 * _0x421f4c,
    186.5 * _0x421f4c,
    36 * _0x421f4c,
    182 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[3], _0x23cf98[4], 8 * _0x421f4c);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(42 * _0x421f4c, 152 * _0x421f4c);
  _0x155808.bezierCurveTo(
    53 * _0x421f4c,
    152 * _0x421f4c,
    53 * _0x421f4c,
    152 * _0x421f4c,
    64 * _0x421f4c,
    152 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    62 * _0x421f4c,
    171 * _0x421f4c,
    62 * _0x421f4c,
    176 * _0x421f4c,
    55 * _0x421f4c,
    177 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    42 * _0x421f4c,
    176 * _0x421f4c,
    45 * _0x421f4c,
    174 * _0x421f4c,
    42 * _0x421f4c,
    152 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[5]);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(52 * _0x421f4c, 28 * _0x421f4c);
  _0x155808.bezierCurveTo(
    67.5 * _0x421f4c,
    55 * _0x421f4c,
    67.5 * _0x421f4c,
    55 * _0x421f4c,
    83 * _0x421f4c,
    82 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    80 * _0x421f4c,
    106.5 * _0x421f4c,
    80 * _0x421f4c,
    106.5 * _0x421f4c,
    77 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    58 * _0x421f4c,
    147 * _0x421f4c,
    44 * _0x421f4c,
    141 * _0x421f4c,
    29 * _0x421f4c,
    131 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    26.5 * _0x421f4c,
    106.5 * _0x421f4c,
    26.5 * _0x421f4c,
    106.5 * _0x421f4c,
    24 * _0x421f4c,
    82 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[6], _0x23cf98[7], 8 * _0x421f4c);
  _0x155808.beginPath();
  _0x155808.lineCap = "round";
  _0x155808.lineJoin = "round";
  _0x155808.moveTo(53 * _0x421f4c, 53 * _0x421f4c);
  _0x155808.bezierCurveTo(
    61 * _0x421f4c,
    70 * _0x421f4c,
    61 * _0x421f4c,
    70 * _0x421f4c,
    69 * _0x421f4c,
    87 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    67 * _0x421f4c,
    106 * _0x421f4c,
    67 * _0x421f4c,
    106 * _0x421f4c,
    65 * _0x421f4c,
    125 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    54 * _0x421f4c,
    130 * _0x421f4c,
    51 * _0x421f4c,
    130 * _0x421f4c,
    41 * _0x421f4c,
    125 * _0x421f4c
  );
  _0x155808.bezierCurveTo(
    39 * _0x421f4c,
    105 * _0x421f4c,
    39 * _0x421f4c,
    105 * _0x421f4c,
    37 * _0x421f4c,
    85 * _0x421f4c
  );
  _0x155808.closePath();
  fill_path(_0x155808, _0x23cf98[8]);
  return _0xcc0ca7;
}
function create_spear(_0x448801, _0x3b7942, _0xcf2db1) {
  var _0x4c145a = document.createElement("canvas");
  var _0xbeb8b3 = _0x4c145a.getContext("2d");
  _0x4c145a.width = 81 * _0x448801;
  _0x4c145a.height = 350 * _0x448801;
  _0xbeb8b3.globalAlpha = _0x3b7942 ? 0.6 : 1;
  _0xbeb8b3.translate(0, 5 * _0x448801);
  _0xbeb8b3.save();
  _0xbeb8b3.translate(35 * _0x448801, 160 * _0x448801);
  _0xbeb8b3.rotate(0);
  round_rect(
    _0xbeb8b3,
    -6 * _0x448801,
    -100.5 * _0x448801,
    12 * _0x448801,
    240 * _0x448801,
    10 * _0x448801
  );
  _0xbeb8b3.restore();
  fill_path(_0xbeb8b3, _0xcf2db1[0]);
  _0xbeb8b3.translate(0, -5 * _0x448801);
  _0xbeb8b3.beginPath();
  _0xbeb8b3.lineCap = "round";
  _0xbeb8b3.lineJoin = "round";
  _0xbeb8b3.save();
  _0xbeb8b3.translate(-6 * _0x448801, 11 * _0x448801);
  _0xbeb8b3.moveTo(26.0714111328125 * _0x448801, 50.9 * _0x448801);
  _0xbeb8b3.bezierCurveTo(
    32.0714111328125 * _0x448801,
    35.892852783203125 * _0x448801,
    39.0714111328125 * _0x448801,
    18.892852783203125 * _0x448801,
    45.0714111328125 * _0x448801,
    7.892852783203125 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    51.0714111328125 * _0x448801,
    13.892852783203125 * _0x448801,
    56.0714111328125 * _0x448801,
    36.892852783203125 * _0x448801,
    60.0714111328125 * _0x448801,
    50.892852783203125 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    52.5714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    52.5714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    45.0714111328125 * _0x448801,
    66.89285278320312 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    37.0714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    37.0714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    29.0714111328125 * _0x448801,
    50.892852783203125 * _0x448801
  );
  _0xbeb8b3.closePath();
  fill_path(_0xbeb8b3, _0xcf2db1[0]);
  _0xbeb8b3.restore();
  _0xbeb8b3.globalAlpha = 1;
  _0xbeb8b3.save();
  _0xbeb8b3.translate(0, -10 * _0x448801);
  _0xbeb8b3.translate(
    45.0714111328125 * _0x448801,
    149.39285278320312 * _0x448801
  );
  _0xbeb8b3.rotate(0);
  round_rect(
    _0xbeb8b3,
    -6 * _0x448801,
    -94.5 * _0x448801,
    12 * _0x448801,
    250 * _0x448801,
    10 * _0x448801
  );
  _0xbeb8b3.restore();
  fill_path(_0xbeb8b3, _0xcf2db1[1], _0xcf2db1[2], 6 * _0x448801);
  _0xbeb8b3.translate(0, 0 * _0x448801);
  _0xbeb8b3.beginPath();
  _0xbeb8b3.lineCap = "round";
  _0xbeb8b3.lineJoin = "round";
  _0xbeb8b3.moveTo(29.0714111328125 * _0x448801, 50.9 * _0x448801);
  _0xbeb8b3.bezierCurveTo(
    32.0714111328125 * _0x448801,
    35.892852783203125 * _0x448801,
    39.0714111328125 * _0x448801,
    18.892852783203125 * _0x448801,
    45.0714111328125 * _0x448801,
    7.892852783203125 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    51.0714111328125 * _0x448801,
    13.892852783203125 * _0x448801,
    56.0714111328125 * _0x448801,
    36.892852783203125 * _0x448801,
    60.0714111328125 * _0x448801,
    50.892852783203125 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    52.5714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    52.5714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    45.0714111328125 * _0x448801,
    66.89285278320312 * _0x448801
  );
  _0xbeb8b3.bezierCurveTo(
    37.0714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    37.0714111328125 * _0x448801,
    58.892852783203125 * _0x448801,
    29.0714111328125 * _0x448801,
    50.892852783203125 * _0x448801
  );
  _0xbeb8b3.closePath();
  fill_path(_0xbeb8b3, _0xcf2db1[3], _0xcf2db1[4], 6 * _0x448801);
  return _0x4c145a;
}
function create_dragon_spear(_0x5354aa, _0x5e0572, _0x3538df) {
  var _0xbdec87 = document.createElement("canvas");
  var _0x212938 = _0xbdec87.getContext("2d");
  _0xbdec87.width = 43 * _0x5354aa;
  _0xbdec87.height = 209 * _0x5354aa;
  _0x212938.globalAlpha = _0x5e0572 ? 0.5 : 1;
  _0x212938.translate(0, 10 * _0x5354aa);
  _0x212938.translate(5 * _0x5354aa, 5 * _0x5354aa);
  _0x212938.save();
  _0x212938.translate(21 * _0x5354aa, 102.5 * _0x5354aa);
  round_rect(
    _0x212938,
    -4 * _0x5354aa,
    -76.5 * _0x5354aa,
    8 * _0x5354aa,
    163 * _0x5354aa,
    10 * _0x5354aa
  );
  _0x212938.restore();
  fill_path(_0x212938, _0x3538df[0]);
  _0x212938.translate(0, 10 * _0x5354aa);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(20 * _0x5354aa, 10 * _0x5354aa);
  _0x212938.bezierCurveTo(
    25 * _0x5354aa,
    25.5 * _0x5354aa,
    25 * _0x5354aa,
    25.5 * _0x5354aa,
    30 * _0x5354aa,
    41 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    25.5 * _0x5354aa,
    38.5 * _0x5354aa,
    25.5 * _0x5354aa,
    38.5 * _0x5354aa,
    21 * _0x5354aa,
    36 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    16 * _0x5354aa,
    38.5 * _0x5354aa,
    16 * _0x5354aa,
    38.5 * _0x5354aa,
    11 * _0x5354aa,
    41 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[0]);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(21 * _0x5354aa, 1 * _0x5354aa);
  _0x212938.bezierCurveTo(
    28 * _0x5354aa,
    18 * _0x5354aa,
    28 * _0x5354aa,
    18 * _0x5354aa,
    35 * _0x5354aa,
    35 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    28.5 * _0x5354aa,
    32 * _0x5354aa,
    28.5 * _0x5354aa,
    32 * _0x5354aa,
    22 * _0x5354aa,
    29 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14.5 * _0x5354aa,
    32.5 * _0x5354aa,
    14.5 * _0x5354aa,
    32.5 * _0x5354aa,
    7 * _0x5354aa,
    36 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[0]);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(14 * _0x5354aa, 146 * _0x5354aa);
  _0x212938.bezierCurveTo(
    21 * _0x5354aa,
    146 * _0x5354aa,
    21 * _0x5354aa,
    146 * _0x5354aa,
    28 * _0x5354aa,
    146 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27.5 * _0x5354aa,
    147.5 * _0x5354aa,
    27.5 * _0x5354aa,
    147.5 * _0x5354aa,
    27 * _0x5354aa,
    149 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27 * _0x5354aa,
    160 * _0x5354aa,
    27 * _0x5354aa,
    160 * _0x5354aa,
    27 * _0x5354aa,
    171 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27.5 * _0x5354aa,
    171.5 * _0x5354aa,
    27.5 * _0x5354aa,
    171.5 * _0x5354aa,
    28 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    21 * _0x5354aa,
    172 * _0x5354aa,
    21 * _0x5354aa,
    172 * _0x5354aa,
    14 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14 * _0x5354aa,
    171.5 * _0x5354aa,
    14 * _0x5354aa,
    171.5 * _0x5354aa,
    14 * _0x5354aa,
    171 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14.5 * _0x5354aa,
    171.5 * _0x5354aa,
    14.5 * _0x5354aa,
    171.5 * _0x5354aa,
    15 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    15 * _0x5354aa,
    160.5 * _0x5354aa,
    15 * _0x5354aa,
    160.5 * _0x5354aa,
    15 * _0x5354aa,
    149 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[0]);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(21 * _0x5354aa, 6 * _0x5354aa);
  _0x212938.bezierCurveTo(
    26.5 * _0x5354aa,
    18.5 * _0x5354aa,
    26.5 * _0x5354aa,
    18.5 * _0x5354aa,
    32 * _0x5354aa,
    31 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27 * _0x5354aa,
    29 * _0x5354aa,
    27 * _0x5354aa,
    29 * _0x5354aa,
    22 * _0x5354aa,
    27 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[0]);
  _0x212938.translate(0, -20 * _0x5354aa);
  _0x212938.globalAlpha = 1;
  _0x212938.translate(0, 10 * _0x5354aa);
  _0x212938.translate(-5 * _0x5354aa, -5 * _0x5354aa);
  _0x212938.save();
  _0x212938.translate(21 * _0x5354aa, 102.5 * _0x5354aa);
  round_rect(
    _0x212938,
    -4 * _0x5354aa,
    -76.5 * _0x5354aa,
    8 * _0x5354aa,
    163 * _0x5354aa,
    10 * _0x5354aa
  );
  _0x212938.restore();
  fill_path(_0x212938, _0x3538df[1], _0x3538df[2], 4 * _0x5354aa);
  _0x212938.translate(0, 10 * _0x5354aa);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(20 * _0x5354aa, 10 * _0x5354aa);
  _0x212938.bezierCurveTo(
    25 * _0x5354aa,
    25.5 * _0x5354aa,
    25 * _0x5354aa,
    25.5 * _0x5354aa,
    30 * _0x5354aa,
    41 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    25.5 * _0x5354aa,
    38.5 * _0x5354aa,
    25.5 * _0x5354aa,
    38.5 * _0x5354aa,
    21 * _0x5354aa,
    36 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    16 * _0x5354aa,
    38.5 * _0x5354aa,
    16 * _0x5354aa,
    38.5 * _0x5354aa,
    11 * _0x5354aa,
    41 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[3], _0x3538df[4], 4 * _0x5354aa);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(21 * _0x5354aa, 1 * _0x5354aa);
  _0x212938.bezierCurveTo(
    28 * _0x5354aa,
    18 * _0x5354aa,
    28 * _0x5354aa,
    18 * _0x5354aa,
    35 * _0x5354aa,
    35 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    28.5 * _0x5354aa,
    32 * _0x5354aa,
    28.5 * _0x5354aa,
    32 * _0x5354aa,
    22 * _0x5354aa,
    29 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14.5 * _0x5354aa,
    32.5 * _0x5354aa,
    14.5 * _0x5354aa,
    32.5 * _0x5354aa,
    7 * _0x5354aa,
    36 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[5], _0x3538df[6], 4 * _0x5354aa);
  _0x212938.translate(0, 0 * _0x5354aa);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(14 * _0x5354aa, 146 * _0x5354aa);
  _0x212938.bezierCurveTo(
    21 * _0x5354aa,
    146 * _0x5354aa,
    21 * _0x5354aa,
    146 * _0x5354aa,
    28 * _0x5354aa,
    146 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27.5 * _0x5354aa,
    147.5 * _0x5354aa,
    27.5 * _0x5354aa,
    147.5 * _0x5354aa,
    27 * _0x5354aa,
    149 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27 * _0x5354aa,
    160 * _0x5354aa,
    27 * _0x5354aa,
    160 * _0x5354aa,
    27 * _0x5354aa,
    171 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27.5 * _0x5354aa,
    171.5 * _0x5354aa,
    27.5 * _0x5354aa,
    171.5 * _0x5354aa,
    28 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    21 * _0x5354aa,
    172 * _0x5354aa,
    21 * _0x5354aa,
    172 * _0x5354aa,
    14 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14 * _0x5354aa,
    171.5 * _0x5354aa,
    14 * _0x5354aa,
    171.5 * _0x5354aa,
    14 * _0x5354aa,
    171 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    14.5 * _0x5354aa,
    171.5 * _0x5354aa,
    14.5 * _0x5354aa,
    171.5 * _0x5354aa,
    15 * _0x5354aa,
    172 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    15 * _0x5354aa,
    160.5 * _0x5354aa,
    15 * _0x5354aa,
    160.5 * _0x5354aa,
    15 * _0x5354aa,
    149 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[1], _0x3538df[2], 4 * _0x5354aa);
  _0x212938.beginPath();
  _0x212938.lineCap = "round";
  _0x212938.lineJoin = "round";
  _0x212938.moveTo(21 * _0x5354aa, 6 * _0x5354aa);
  _0x212938.bezierCurveTo(
    26.5 * _0x5354aa,
    18.5 * _0x5354aa,
    26.5 * _0x5354aa,
    18.5 * _0x5354aa,
    32 * _0x5354aa,
    31 * _0x5354aa
  );
  _0x212938.bezierCurveTo(
    27 * _0x5354aa,
    29 * _0x5354aa,
    27 * _0x5354aa,
    29 * _0x5354aa,
    22 * _0x5354aa,
    27 * _0x5354aa
  );
  _0x212938.closePath();
  fill_path(_0x212938, _0x3538df[8]);
  return _0xbdec87;
}
function create_plus_chest(_0x261438, _0x5d4e37, _0x9d7985) {
  var _0x2f8841 = document.createElement("canvas");
  var _0x11936e = _0x2f8841.getContext("2d");
  _0x2f8841.width = 200 * _0x261438;
  _0x2f8841.height = 200 * _0x261438;
  _0x11936e.save();
  _0x11936e.translate(112 * _0x261438, 158 * _0x261438);
  round_rect(
    _0x11936e,
    -86.5 * _0x261438,
    -86 * _0x261438,
    150 * _0x261438,
    35 * _0x261438,
    20 * _0x261438
  );
  _0x11936e.restore();
  fill_path(_0x11936e, _0x9d7985[0]);
  _0x11936e.save();
  _0x11936e.translate(170 * _0x261438, 100 * _0x261438);
  round_rect(
    _0x11936e,
    -86.5 * _0x261438,
    -86 * _0x261438,
    35 * _0x261438,
    150 * _0x261438,
    20 * _0x261438
  );
  _0x11936e.restore();
  fill_path(_0x11936e, _0x9d7985[0]);
  return _0x2f8841;
}
function create_chest_slot(_0x497213, _0x2417e9, _0x45f6fe) {
  var _0x5434fc = document.createElement("canvas");
  var _0x36c310 = _0x5434fc.getContext("2d");
  _0x5434fc.width = 118 * _0x497213;
  _0x5434fc.height = 129 * _0x497213;
  _0x36c310.save();
  _0x36c310.translate(90 * _0x497213, 90 * _0x497213);
  round_rect(
    _0x36c310,
    -86.5 * _0x497213,
    -86 * _0x497213,
    110 * _0x497213,
    110 * _0x497213,
    15 * _0x497213
  );
  _0x36c310.restore();
  fill_path(_0x36c310, _0x45f6fe[0], _0x45f6fe[1], 4);
  _0x36c310.save();
  round_rect(
    _0x36c310,
    30 * _0x497213,
    115 * _0x497213,
    60 * _0x497213,
    5 * _0x497213,
    15 * _0x497213
  );
  _0x36c310.restore();
  fill_path(_0x36c310, _0x45f6fe[2], _0x45f6fe[3], 4);
  _0x36c310.save();
  round_rect(
    _0x36c310,
    50 * _0x497213,
    117 * _0x497213,
    20 * _0x497213,
    10 * _0x497213,
    15 * _0x497213
  );
  _0x36c310.restore();
  fill_path(_0x36c310, _0x45f6fe[2]);
  return _0x5434fc;
}
function create_chest(_0x2ac785, _0x4ebea0, _0x30d293) {
  var _0x120c6e = document.createElement("canvas");
  var _0x591e00 = _0x120c6e.getContext("2d");
  _0x120c6e.width = 165 * _0x2ac785;
  _0x120c6e.height = 123 * _0x2ac785;
  _0x591e00.save();
  _0x591e00.translate(81 * _0x2ac785, 65 * _0x2ac785);
  round_rect(
    _0x591e00,
    -78 * _0x2ac785,
    -54.5 * _0x2ac785,
    156 * _0x2ac785,
    109 * _0x2ac785,
    20 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, _0x30d293[0]);
  _0x591e00.save();
  _0x591e00.translate(81 * _0x2ac785, 58 * _0x2ac785);
  round_rect(
    _0x591e00,
    -78 * _0x2ac785,
    -54.5 * _0x2ac785,
    156 * _0x2ac785,
    109 * _0x2ac785,
    20 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, _0x30d293[1], _0x30d293[2], 4);
  _0x591e00.save();
  _0x591e00.translate(81 * _0x2ac785, 58 * _0x2ac785);
  round_rect(
    _0x591e00,
    -69 * _0x2ac785,
    -47 * _0x2ac785,
    138 * _0x2ac785,
    93 * _0x2ac785,
    15 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, _0x30d293[3], _0x30d293[4], 4);
  _0x591e00.save();
  _0x591e00.translate(79 * _0x2ac785, 54 * _0x2ac785);
  round_rect(
    _0x591e00,
    -34 * _0x2ac785,
    -40 * _0x2ac785,
    68 * _0x2ac785,
    88 * _0x2ac785,
    13 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, undefined, _0x30d293[5], 4);
  _0x591e00.beginPath();
  _0x591e00.lineCap = "round";
  _0x591e00.lineJoin = "round";
  _0x591e00.moveTo(44 * _0x2ac785, 13 * _0x2ac785);
  _0x591e00.bezierCurveTo(
    43.5 * _0x2ac785,
    55 * _0x2ac785,
    43.5 * _0x2ac785,
    55 * _0x2ac785,
    43 * _0x2ac785,
    101 * _0x2ac785
  );
  _0x591e00.closePath();
  fill_path(_0x591e00, undefined, _0x30d293[6], 4);
  _0x591e00.beginPath();
  _0x591e00.lineCap = "round";
  _0x591e00.lineJoin = "round";
  _0x591e00.moveTo(115 * _0x2ac785, 13 * _0x2ac785);
  _0x591e00.bezierCurveTo(
    115 * _0x2ac785,
    56 * _0x2ac785,
    115 * _0x2ac785,
    56 * _0x2ac785,
    115 * _0x2ac785,
    101 * _0x2ac785
  );
  _0x591e00.closePath();
  fill_path(_0x591e00, undefined, _0x30d293[6], 4);
  _0x591e00.beginPath();
  _0x591e00.lineCap = "round";
  _0x591e00.lineJoin = "round";
  _0x591e00.moveTo(35 * _0x2ac785, 6 * _0x2ac785);
  _0x591e00.bezierCurveTo(
    35 * _0x2ac785,
    56 * _0x2ac785,
    36 * _0x2ac785,
    109 * _0x2ac785,
    35 * _0x2ac785,
    110 * _0x2ac785
  );
  _0x591e00.closePath();
  fill_path(_0x591e00, undefined, _0x30d293[7], 4);
  _0x591e00.beginPath();
  _0x591e00.lineCap = "round";
  _0x591e00.lineJoin = "round";
  _0x591e00.moveTo(123 * _0x2ac785, 6 * _0x2ac785);
  _0x591e00.bezierCurveTo(
    123 * _0x2ac785,
    56 * _0x2ac785,
    123 * _0x2ac785,
    56 * _0x2ac785,
    123 * _0x2ac785,
    110 * _0x2ac785
  );
  _0x591e00.closePath();
  fill_path(_0x591e00, undefined, _0x30d293[7], 4);
  _0x591e00.save();
  _0x591e00.translate(79 * _0x2ac785, 113 * _0x2ac785);
  round_rect(
    _0x591e00,
    -18 * _0x2ac785,
    -2 * _0x2ac785,
    36 * _0x2ac785,
    4 * _0x2ac785,
    20 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, undefined, _0x30d293[8], 4);
  _0x591e00.save();
  _0x591e00.translate(75 * _0x2ac785, 118 * _0x2ac785);
  round_rect(
    _0x591e00,
    -6 * _0x2ac785,
    -2.5 * _0x2ac785,
    20 * _0x2ac785,
    5 * _0x2ac785,
    20 * _0x2ac785
  );
  _0x591e00.restore();
  fill_path(_0x591e00, _0x30d293[8]);
  return _0x120c6e;
}
function create_bag(_0x14db63, _0x35a26e, _0x180663) {
  var _0x3656e0 = document.createElement("canvas");
  var _0x5461d1 = _0x3656e0.getContext("2d");
  _0x3656e0.width = 86 * _0x14db63;
  _0x3656e0.height = 45 * _0x14db63;
  _0x5461d1.beginPath();
  _0x5461d1.lineCap = "round";
  _0x5461d1.lineJoin = "round";
  _0x5461d1.moveTo(15 * _0x14db63, 15 * _0x14db63);
  _0x5461d1.bezierCurveTo(
    16 * _0x14db63,
    15 * _0x14db63,
    19.5 * _0x14db63,
    9 * _0x14db63,
    24 * _0x14db63,
    2 * _0x14db63
  );
  _0x5461d1.bezierCurveTo(
    41 * _0x14db63,
    2 * _0x14db63,
    41 * _0x14db63,
    2 * _0x14db63,
    58 * _0x14db63,
    2 * _0x14db63
  );
  _0x5461d1.bezierCurveTo(
    64 * _0x14db63,
    13 * _0x14db63,
    61 * _0x14db63,
    8 * _0x14db63,
    65 * _0x14db63,
    13 * _0x14db63
  );
  _0x5461d1.closePath();
  fill_path(_0x5461d1, _0x180663[0], _0x180663[1], 4);
  _0x5461d1.save();
  _0x5461d1.translate(43 * _0x14db63, 27 * _0x14db63);
  _0x5461d1.rotate(0);
  round_rect(
    _0x5461d1,
    -40 * _0x14db63,
    -15 * _0x14db63,
    80 * _0x14db63,
    30 * _0x14db63,
    10 * _0x14db63
  );
  _0x5461d1.restore();
  fill_path(_0x5461d1, _0x180663[0], _0x180663[1], 4);
  _0x5461d1.save();
  _0x5461d1.translate(43 * _0x14db63, 33 * _0x14db63);
  _0x5461d1.rotate(0);
  round_rect(
    _0x5461d1,
    -17 * _0x14db63,
    -4.5 * _0x14db63,
    34 * _0x14db63,
    9 * _0x14db63,
    10 * _0x14db63
  );
  _0x5461d1.restore();
  fill_path(_0x5461d1, _0x180663[0], _0x180663[1], 4);
  return _0x3656e0;
}
function create_fur(_0x24ed81, _0x53c74b, _0x456f7d) {
  var _0x104739 = document.createElement("canvas");
  var _0x105860 = _0x104739.getContext("2d");
  _0x104739.width = 92 * _0x24ed81;
  _0x104739.height = 108 * _0x24ed81;
  _0x105860.beginPath();
  _0x105860.lineCap = "round";
  _0x105860.lineJoin = "round";
  _0x105860.moveTo(31 * _0x24ed81, 10 * _0x24ed81);
  _0x105860.bezierCurveTo(
    37 * _0x24ed81,
    2 * _0x24ed81,
    49 * _0x24ed81,
    0 * _0x24ed81,
    61 * _0x24ed81,
    15 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    81 * _0x24ed81,
    31 * _0x24ed81,
    78 * _0x24ed81,
    25 * _0x24ed81,
    79 * _0x24ed81,
    37 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    76 * _0x24ed81,
    44 * _0x24ed81,
    81 * _0x24ed81,
    56 * _0x24ed81,
    85 * _0x24ed81,
    63 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    91 * _0x24ed81,
    71 * _0x24ed81,
    90 * _0x24ed81,
    78 * _0x24ed81,
    83 * _0x24ed81,
    84 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    60 * _0x24ed81,
    98 * _0x24ed81,
    67 * _0x24ed81,
    95 * _0x24ed81,
    57 * _0x24ed81,
    102 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    47 * _0x24ed81,
    106 * _0x24ed81,
    43 * _0x24ed81,
    106 * _0x24ed81,
    31 * _0x24ed81,
    98 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    22 * _0x24ed81,
    91 * _0x24ed81,
    17 * _0x24ed81,
    89 * _0x24ed81,
    7 * _0x24ed81,
    84 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    1 * _0x24ed81,
    77 * _0x24ed81,
    4 * _0x24ed81,
    73 * _0x24ed81,
    7 * _0x24ed81,
    60 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    11 * _0x24ed81,
    50 * _0x24ed81,
    5 * _0x24ed81,
    32 * _0x24ed81,
    15 * _0x24ed81,
    27 * _0x24ed81
  );
  _0x105860.bezierCurveTo(
    26 * _0x24ed81,
    18 * _0x24ed81,
    26 * _0x24ed81,
    24 * _0x24ed81,
    31 * _0x24ed81,
    10 * _0x24ed81
  );
  _0x105860.closePath();
  fill_path(_0x105860, _0x456f7d[0], _0x456f7d[1], 4);
  return _0x104739;
}
function create_verified(_0x10b56b, _0x252f00) {
  var _0x165708 = document.createElement("canvas");
  var _0x5021f1 = _0x165708.getContext("2d");
  _0x165708.width = 60 * _0x10b56b;
  _0x165708.height = 60 * _0x10b56b;
  _0x5021f1.translate(-25 * _0x10b56b, -25 * _0x10b56b);
  _0x5021f1.translate(0, 5 * _0x10b56b);
  _0x5021f1.beginPath();
  _0x5021f1.lineCap = "round";
  _0x5021f1.lineJoin = "round";
  _0x5021f1.moveTo(24 * _0x10b56b, 50 * _0x10b56b);
  _0x5021f1.bezierCurveTo(
    32.5 * _0x10b56b,
    54.5 * _0x10b56b,
    32.5 * _0x10b56b,
    54.5 * _0x10b56b,
    41 * _0x10b56b,
    59 * _0x10b56b
  );
  _0x5021f1.bezierCurveTo(
    57 * _0x10b56b,
    47 * _0x10b56b,
    57 * _0x10b56b,
    47 * _0x10b56b,
    73 * _0x10b56b,
    35 * _0x10b56b
  );
  _0x5021f1.bezierCurveTo(
    57 * _0x10b56b,
    53 * _0x10b56b,
    57 * _0x10b56b,
    53 * _0x10b56b,
    41 * _0x10b56b,
    71 * _0x10b56b
  );
  _0x5021f1.closePath();
  fill_path(_0x5021f1, _0x252f00[0]);
  _0x5021f1.translate(0, -5 * _0x10b56b);
  _0x5021f1.beginPath();
  _0x5021f1.lineCap = "round";
  _0x5021f1.lineJoin = "round";
  _0x5021f1.moveTo(24 * _0x10b56b, 50 * _0x10b56b);
  _0x5021f1.bezierCurveTo(
    32.5 * _0x10b56b,
    54.5 * _0x10b56b,
    32.5 * _0x10b56b,
    54.5 * _0x10b56b,
    41 * _0x10b56b,
    59 * _0x10b56b
  );
  _0x5021f1.bezierCurveTo(
    57 * _0x10b56b,
    47 * _0x10b56b,
    57 * _0x10b56b,
    47 * _0x10b56b,
    73 * _0x10b56b,
    35 * _0x10b56b
  );
  _0x5021f1.bezierCurveTo(
    57 * _0x10b56b,
    53 * _0x10b56b,
    57 * _0x10b56b,
    53 * _0x10b56b,
    41 * _0x10b56b,
    71 * _0x10b56b
  );
  _0x5021f1.closePath();
  fill_path(_0x5021f1, _0x252f00[1]);
  return _0x165708;
}
function create_earmuff(_0x14627a, _0x56bf51, _0x140c71) {
  var _0xfacda2 = document.createElement("canvas");
  var _0x44b0d3 = _0xfacda2.getContext("2d");
  _0xfacda2.width = 151 * _0x14627a;
  _0xfacda2.height = 80 * _0x14627a;
  _0x44b0d3.beginPath();
  _0x44b0d3.lineCap = "round";
  _0x44b0d3.lineJoin = "round";
  _0x44b0d3.moveTo(133 * _0x14627a, 54 * _0x14627a);
  _0x44b0d3.bezierCurveTo(
    136 * _0x14627a,
    18 * _0x14627a,
    129 * _0x14627a,
    18 * _0x14627a,
    114 * _0x14627a,
    13 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    51 * _0x14627a,
    0 * _0x14627a,
    36 * _0x14627a,
    16 * _0x14627a,
    34 * _0x14627a,
    16 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    8 * _0x14627a,
    28 * _0x14627a,
    22 * _0x14627a,
    56 * _0x14627a,
    21 * _0x14627a,
    57 * _0x14627a
  );
  _0x44b0d3.closePath();
  fill_path(_0x44b0d3, _0x140c71[2], _0x140c71[3], 4);
  _0x44b0d3.beginPath();
  _0x44b0d3.lineCap = "round";
  _0x44b0d3.lineJoin = "round";
  _0x44b0d3.moveTo(130 * _0x14627a, 40 * _0x14627a);
  _0x44b0d3.bezierCurveTo(
    132 * _0x14627a,
    35 * _0x14627a,
    132 * _0x14627a,
    30 * _0x14627a,
    132 * _0x14627a,
    29 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    145 * _0x14627a,
    38 * _0x14627a,
    144 * _0x14627a,
    43 * _0x14627a,
    137 * _0x14627a,
    54 * _0x14627a
  );
  _0x44b0d3.closePath();
  fill_path(_0x44b0d3, _0x140c71[0], _0x140c71[1], 4);
  _0x44b0d3.beginPath();
  _0x44b0d3.lineCap = "round";
  _0x44b0d3.lineJoin = "round";
  _0x44b0d3.moveTo(20 * _0x14627a, 33 * _0x14627a);
  _0x44b0d3.bezierCurveTo(
    24 * _0x14627a,
    44 * _0x14627a,
    215 * _0x14627a,
    39 * _0x14627a,
    23 * _0x14627a,
    44 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    19 * _0x14627a,
    49 * _0x14627a,
    19 * _0x14627a,
    49 * _0x14627a,
    15 * _0x14627a,
    54 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    4 * _0x14627a,
    43 * _0x14627a,
    10 * _0x14627a,
    35 * _0x14627a,
    20 * _0x14627a,
    32 * _0x14627a
  );
  _0x44b0d3.closePath();
  fill_path(_0x44b0d3, _0x140c71[0], _0x140c71[1], 4);
  _0x44b0d3.beginPath();
  _0x44b0d3.lineCap = "round";
  _0x44b0d3.lineJoin = "round";
  _0x44b0d3.moveTo(18 * _0x14627a, 52 * _0x14627a);
  _0x44b0d3.bezierCurveTo(
    24 * _0x14627a,
    31 * _0x14627a,
    34 * _0x14627a,
    25 * _0x14627a,
    75 * _0x14627a,
    23 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    130 * _0x14627a,
    24 * _0x14627a,
    129 * _0x14627a,
    32 * _0x14627a,
    134 * _0x14627a,
    51 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    138 * _0x14627a,
    70 * _0x14627a,
    126 * _0x14627a,
    72 * _0x14627a,
    90 * _0x14627a,
    73 * _0x14627a
  );
  _0x44b0d3.bezierCurveTo(
    18 * _0x14627a,
    72 * _0x14627a,
    15 * _0x14627a,
    68 * _0x14627a,
    18 * _0x14627a,
    54 * _0x14627a
  );
  _0x44b0d3.closePath();
  fill_path(_0x44b0d3, _0x140c71[0], _0x140c71[1], 4);
  return _0xfacda2;
}
function create_cap_scarf(_0x3e5fb9, _0x449884, _0x3f4289) {
  var _0x4672be = document.createElement("canvas");
  var _0x3b6b66 = _0x4672be.getContext("2d");
  _0x4672be.width = 138 * _0x3e5fb9;
  _0x4672be.height = 133 * _0x3e5fb9;
  _0x3b6b66.globalAlpha = _0x449884 ? 0.3 : 1;
  _0x3b6b66.translate(0, 5 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(26 * _0x3e5fb9, 79.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    13 * _0x3e5fb9,
    84.640625 * _0x3e5fb9,
    9 * _0x3e5fb9,
    86.640625 * _0x3e5fb9,
    7 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    6 * _0x3e5fb9,
    69.640625 * _0x3e5fb9,
    15 * _0x3e5fb9,
    67.640625 * _0x3e5fb9,
    31 * _0x3e5fb9,
    62.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    63 * _0x3e5fb9,
    55.640625 * _0x3e5fb9,
    85 * _0x3e5fb9,
    57.640625 * _0x3e5fb9,
    104 * _0x3e5fb9,
    63.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    131 * _0x3e5fb9,
    69.640625 * _0x3e5fb9,
    132 * _0x3e5fb9,
    71.640625 * _0x3e5fb9,
    131 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    131 * _0x3e5fb9,
    91.640625 * _0x3e5fb9,
    112 * _0x3e5fb9,
    80.640625 * _0x3e5fb9,
    91 * _0x3e5fb9,
    75.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    51 * _0x3e5fb9,
    70.640625 * _0x3e5fb9,
    45 * _0x3e5fb9,
    74.640625 * _0x3e5fb9,
    28 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[0]);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(8 * _0x3e5fb9, 82.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    40 * _0x3e5fb9,
    107.640625 * _0x3e5fb9,
    53 * _0x3e5fb9,
    104.640625 * _0x3e5fb9,
    67 * _0x3e5fb9,
    106.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    101 * _0x3e5fb9,
    103.640625 * _0x3e5fb9,
    117 * _0x3e5fb9,
    93.640625 * _0x3e5fb9,
    127 * _0x3e5fb9,
    84.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    135 * _0x3e5fb9,
    95.640625 * _0x3e5fb9,
    131 * _0x3e5fb9,
    107.640625 * _0x3e5fb9,
    110 * _0x3e5fb9,
    118.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    78 * _0x3e5fb9,
    129.640625 * _0x3e5fb9,
    67 * _0x3e5fb9,
    130.640625 * _0x3e5fb9,
    27 * _0x3e5fb9,
    119.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    0 * _0x3e5fb9,
    105.640625 * _0x3e5fb9,
    8 * _0x3e5fb9,
    83.640625 * _0x3e5fb9,
    10 * _0x3e5fb9,
    84.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[0]);
  _0x3b6b66.globalAlpha = 1;
  _0x3b6b66.translate(0, -5 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(8 * _0x3e5fb9, 73.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    7 * _0x3e5fb9,
    23.640625 * _0x3e5fb9,
    33 * _0x3e5fb9,
    19.640625 * _0x3e5fb9,
    71 * _0x3e5fb9,
    17.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    129 * _0x3e5fb9,
    19.640625 * _0x3e5fb9,
    130 * _0x3e5fb9,
    45.640625 * _0x3e5fb9,
    130 * _0x3e5fb9,
    76.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    90 * _0x3e5fb9,
    63.640625 * _0x3e5fb9,
    85 * _0x3e5fb9,
    63.640625 * _0x3e5fb9,
    73 * _0x3e5fb9,
    63.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    38 * _0x3e5fb9,
    63.640625 * _0x3e5fb9,
    33 * _0x3e5fb9,
    66.640625 * _0x3e5fb9,
    8 * _0x3e5fb9,
    73.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[1], _0x3f4289[2], 4 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(72 * _0x3e5fb9, 28.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    51 * _0x3e5fb9,
    25.640625 * _0x3e5fb9,
    56 * _0x3e5fb9,
    7.640625 * _0x3e5fb9,
    70 * _0x3e5fb9,
    5.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    94 * _0x3e5fb9,
    7.640625 * _0x3e5fb9,
    87 * _0x3e5fb9,
    29.640625 * _0x3e5fb9,
    72 * _0x3e5fb9,
    28.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[3], _0x3f4289[2], 4 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(51 * _0x3e5fb9, 26.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    42 * _0x3e5fb9,
    29.640625 * _0x3e5fb9,
    43 * _0x3e5fb9,
    31.640625 * _0x3e5fb9,
    42 * _0x3e5fb9,
    37.640625 * _0x3e5fb9
  );
  fill_path(_0x3b6b66, undefined, _0x3f4289[2], 4 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(90 * _0x3e5fb9, 26.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    100 * _0x3e5fb9,
    28.640625 * _0x3e5fb9,
    98 * _0x3e5fb9,
    34.640625 * _0x3e5fb9,
    99 * _0x3e5fb9,
    38.640625 * _0x3e5fb9
  );
  fill_path(_0x3b6b66, undefined, _0x3f4289[2], 4 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(26 * _0x3e5fb9, 79.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    13 * _0x3e5fb9,
    84.640625 * _0x3e5fb9,
    9 * _0x3e5fb9,
    86.640625 * _0x3e5fb9,
    7 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    6 * _0x3e5fb9,
    69.640625 * _0x3e5fb9,
    15 * _0x3e5fb9,
    67.640625 * _0x3e5fb9,
    31 * _0x3e5fb9,
    62.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    63 * _0x3e5fb9,
    55.640625 * _0x3e5fb9,
    85 * _0x3e5fb9,
    57.640625 * _0x3e5fb9,
    104 * _0x3e5fb9,
    63.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    131 * _0x3e5fb9,
    69.640625 * _0x3e5fb9,
    132 * _0x3e5fb9,
    71.640625 * _0x3e5fb9,
    131 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    131 * _0x3e5fb9,
    91.640625 * _0x3e5fb9,
    112 * _0x3e5fb9,
    80.640625 * _0x3e5fb9,
    91 * _0x3e5fb9,
    75.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    51 * _0x3e5fb9,
    70.640625 * _0x3e5fb9,
    45 * _0x3e5fb9,
    74.640625 * _0x3e5fb9,
    28 * _0x3e5fb9,
    78.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[3], _0x3f4289[4], 4 * _0x3e5fb9);
  _0x3b6b66.beginPath();
  _0x3b6b66.lineCap = "round";
  _0x3b6b66.lineJoin = "round";
  _0x3b6b66.moveTo(8 * _0x3e5fb9, 82.640625 * _0x3e5fb9);
  _0x3b6b66.bezierCurveTo(
    40 * _0x3e5fb9,
    107.640625 * _0x3e5fb9,
    53 * _0x3e5fb9,
    104.640625 * _0x3e5fb9,
    67 * _0x3e5fb9,
    106.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    101 * _0x3e5fb9,
    103.640625 * _0x3e5fb9,
    117 * _0x3e5fb9,
    93.640625 * _0x3e5fb9,
    127 * _0x3e5fb9,
    84.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    135 * _0x3e5fb9,
    95.640625 * _0x3e5fb9,
    131 * _0x3e5fb9,
    107.640625 * _0x3e5fb9,
    110 * _0x3e5fb9,
    118.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    78 * _0x3e5fb9,
    129.640625 * _0x3e5fb9,
    67 * _0x3e5fb9,
    130.640625 * _0x3e5fb9,
    27 * _0x3e5fb9,
    119.640625 * _0x3e5fb9
  );
  _0x3b6b66.bezierCurveTo(
    0 * _0x3e5fb9,
    105.640625 * _0x3e5fb9,
    8 * _0x3e5fb9,
    83.640625 * _0x3e5fb9,
    10 * _0x3e5fb9,
    84.640625 * _0x3e5fb9
  );
  _0x3b6b66.closePath();
  fill_path(_0x3b6b66, _0x3f4289[3], _0x3f4289[4], 4 * _0x3e5fb9);
  return _0x4672be;
}
function create_spike(_0x368bbf, _0x21a7ec, _0x592980) {
  var _0x59b589 = document.createElement("canvas");
  var _0x27e086 = _0x59b589.getContext("2d");
  var _0x45fa06 = _0x368bbf * 170;
  var _0x2049d5 = _0x368bbf * 172;
  var _0x51d77b = _0x45fa06 / 2;
  var _0x592d22 = _0x2049d5 / 2;
  _0x59b589.width = _0x45fa06;
  _0x59b589.height = _0x2049d5;
  _0x27e086.translate(_0x51d77b, _0x592d22 + 7 * _0x368bbf);
  _0x27e086.globalAlpha = _0x21a7ec ? 0.5 : 0;
  circle(_0x27e086, 0, 0, 60 * _0x368bbf);
  fill_path(_0x27e086, _0x592980[0]);
  _0x27e086.globalAlpha = 1;
  _0x27e086.translate(0, -7 * _0x368bbf);
  _0x27e086.save();
  for (var _0x229f39 = 0; _0x229f39 < 10; _0x229f39++) {
    _0x27e086.rotate(Math.PI / 5);
    _0x27e086.save();
    _0x27e086.translate(65 * _0x368bbf, 0);
    round_regular_polygon(_0x27e086, 3, 20 * _0x368bbf, 4 * _0x368bbf);
    fill_path(_0x27e086, _0x592980[1], _0x592980[2], 4 * _0x368bbf);
    _0x27e086.restore();
  }
  _0x27e086.restore();
  circle(_0x27e086, 0, 0, 60 * _0x368bbf, 0);
  fill_path(_0x27e086, _0x592980[3], _0x592980[4], 4 * _0x368bbf);
  circle(_0x27e086, 0, 0, 40 * _0x368bbf);
  fill_path(_0x27e086, _0x592980[5]);
  circle(_0x27e086, 0, 0, 25 * _0x368bbf);
  fill_path(_0x27e086, _0x592980[6], _0x592980[7], 8 * _0x368bbf);
  return _0x59b589;
}
function create_spiketimer(_0x2a3b3c, _0xba984a) {
  var _0x24ecbf = document.createElement("canvas");
  var _0x4f76ab = _0x24ecbf.getContext("2d");
  var _0x11a7a5 = _0x2a3b3c * 170;
  var _0x12a7fd = _0x2a3b3c * 172;
  var _0x4f2ede = _0x11a7a5 / 2;
  var _0x313bb2 = _0x12a7fd / 2;
  _0x24ecbf.width = _0x11a7a5;
  _0x24ecbf.height = _0x12a7fd;
  _0x4f76ab.translate(_0x4f2ede, _0x313bb2);
  _0x4f76ab.save();
  for (var _0x53c502 = 0; _0x53c502 < 10; _0x53c502++) {
    _0x4f76ab.rotate(Math.PI / 5);
    _0x4f76ab.save();
    _0x4f76ab.translate(65 * _0x2a3b3c, 0);
    round_regular_polygon(_0x4f76ab, 3, 18 * _0x2a3b3c, 4 * _0x2a3b3c);
    fill_path(_0x4f76ab, _0xba984a[0]);
    _0x4f76ab.restore();
  }
  _0x4f76ab.restore();
  circle(_0x4f76ab, 0, 0, 40 * _0x2a3b3c, 0);
  fill_path(_0x4f76ab, undefined, _0xba984a[0], 6 * _0x2a3b3c);
  circle(_0x4f76ab, 0, 0, 20 * _0x2a3b3c, 0);
  fill_path(_0x4f76ab, _0xba984a[0]);
  return _0x24ecbf;
}
function create_spike_stone(_0x39cb20, _0x10a99f, _0x5eb8fc) {
  var _0x40fac6 = document.createElement("canvas");
  var _0x4d0817 = _0x40fac6.getContext("2d");
  _0x40fac6.width = 170 * _0x39cb20;
  _0x40fac6.height = 170 * _0x39cb20;
  _0x4d0817.globalAlpha = _0x10a99f ? 0.5 : 1;
  _0x4d0817.translate(0, 5 * _0x39cb20);
  _0x4d0817.save();
  _0x4d0817.translate(85 * _0x39cb20, 88 * _0x39cb20);
  _0x4d0817.rotate(1.4);
  round_regular_polygon(_0x4d0817, 7, 60 * _0x39cb20, 10 * _0x39cb20);
  _0x4d0817.restore();
  fill_path(_0x4d0817, _0x5eb8fc[0]);
  _0x4d0817.globalAlpha = 1;
  _0x4d0817.translate(85 * _0x39cb20, 80 * _0x39cb20);
  for (var _0x2c7b9b = 0; _0x2c7b9b < 10; _0x2c7b9b++) {
    _0x4d0817.rotate(Math.PI / 5);
    _0x4d0817.save();
    _0x4d0817.translate(65 * _0x39cb20, 0);
    round_regular_polygon(_0x4d0817, 3, 21 * _0x39cb20, 4 * _0x39cb20);
    fill_path(_0x4d0817, _0x5eb8fc[1], _0x5eb8fc[2], 4 * _0x39cb20);
    _0x4d0817.restore();
  }
  _0x4d0817.save();
  _0x4d0817.translate(0 * _0x39cb20, 0 * _0x39cb20);
  _0x4d0817.rotate(1.4);
  round_regular_polygon(_0x4d0817, 7, 60 * _0x39cb20, 10 * _0x39cb20);
  fill_path(_0x4d0817, _0x5eb8fc[3], _0x5eb8fc[4], 4 * _0x39cb20);
  _0x4d0817.rotate(0.64);
  round_regular_polygon(_0x4d0817, 7, 40 * _0x39cb20, 10 * _0x39cb20);
  fill_path(_0x4d0817, _0x5eb8fc[5], _0x5eb8fc[6], 4 * _0x39cb20);
  _0x4d0817.rotate(0.12);
  round_regular_polygon(_0x4d0817, 7, 23 * _0x39cb20, 5 * _0x39cb20);
  _0x4d0817.restore();
  fill_path(_0x4d0817, _0x5eb8fc[7]);
  return _0x40fac6;
}
function create_spike_gold(_0x56f2f5, _0x3f0c97, _0x54c79a) {
  var _0x1cff06 = document.createElement("canvas");
  var _0x3a9c82 = _0x1cff06.getContext("2d");
  _0x1cff06.width = 170 * _0x56f2f5;
  _0x1cff06.height = 170 * _0x56f2f5;
  _0x3a9c82.globalAlpha = _0x3f0c97 ? 0.5 : 1;
  _0x3a9c82.translate(0, 3 * _0x56f2f5);
  _0x3a9c82.save();
  _0x3a9c82.translate(85 * _0x56f2f5, 95 * _0x56f2f5);
  _0x3a9c82.rotate(1.4);
  round_regular_polygon(_0x3a9c82, 7, 60 * _0x56f2f5, 10 * _0x56f2f5);
  _0x3a9c82.restore();
  fill_path(_0x3a9c82, _0x54c79a[0]);
  _0x3a9c82.globalAlpha = 1;
  _0x3a9c82.translate(85 * _0x56f2f5, 82 * _0x56f2f5);
  for (var _0x5070af = 0; _0x5070af < 10; _0x5070af++) {
    _0x3a9c82.rotate(Math.PI / 5);
    _0x3a9c82.save();
    _0x3a9c82.translate(65 * _0x56f2f5, 0);
    round_regular_polygon(_0x3a9c82, 3, 21 * _0x56f2f5, 4 * _0x56f2f5);
    fill_path(_0x3a9c82, _0x54c79a[1], _0x54c79a[2], 4 * _0x56f2f5);
    _0x3a9c82.restore();
  }
  _0x3a9c82.save();
  _0x3a9c82.translate(0 * _0x56f2f5, 0 * _0x56f2f5);
  _0x3a9c82.rotate(1);
  round_regular_polygon(_0x3a9c82, 8, 60 * _0x56f2f5, 10 * _0x56f2f5);
  fill_path(_0x3a9c82, _0x54c79a[3], _0x54c79a[4], 4 * _0x56f2f5);
  _0x3a9c82.rotate(0.56);
  round_regular_polygon(_0x3a9c82, 8, 40 * _0x56f2f5, 10 * _0x56f2f5);
  fill_path(_0x3a9c82, _0x54c79a[5], _0x54c79a[6], 4 * _0x56f2f5);
  _0x3a9c82.rotate(0.28);
  round_regular_polygon(_0x3a9c82, 8, 28 * _0x56f2f5, 8 * _0x56f2f5);
  fill_path(_0x3a9c82, _0x54c79a[7]);
  _0x3a9c82.restore();
  return _0x1cff06;
}
function create_spike_diamond(_0x1c8900, _0x23acac, _0x18ab00) {
  var _0x4034de = document.createElement("canvas");
  var _0x4bb2ab = _0x4034de.getContext("2d");
  _0x4034de.width = 170 * _0x1c8900;
  _0x4034de.height = 170 * _0x1c8900;
  _0x4bb2ab.translate(0, 3 * _0x1c8900);
  _0x4bb2ab.globalAlpha = _0x23acac ? 0.5 : 1;
  _0x4bb2ab.save();
  _0x4bb2ab.translate(85 * _0x1c8900, 95 * _0x1c8900);
  _0x4bb2ab.rotate(1.4);
  round_regular_polygon(_0x4bb2ab, 7, 60 * _0x1c8900, 10 * _0x1c8900);
  _0x4bb2ab.restore();
  fill_path(_0x4bb2ab, _0x18ab00[0]);
  _0x4bb2ab.globalAlpha = 1;
  _0x4bb2ab.translate(85 * _0x1c8900, 82 * _0x1c8900);
  for (var _0xa0ba66 = 0; _0xa0ba66 < 10; _0xa0ba66++) {
    _0x4bb2ab.rotate(Math.PI / 5);
    _0x4bb2ab.save();
    _0x4bb2ab.translate(65 * _0x1c8900, 0);
    round_regular_polygon(_0x4bb2ab, 3, 21 * _0x1c8900, 4 * _0x1c8900);
    fill_path(_0x4bb2ab, _0x18ab00[1], _0x18ab00[2], 4 * _0x1c8900);
    _0x4bb2ab.restore();
  }
  _0x4bb2ab.save();
  _0x4bb2ab.translate(0 * _0x1c8900, 0 * _0x1c8900);
  _0x4bb2ab.rotate(0.2);
  round_regular_polygon(_0x4bb2ab, 9, 60 * _0x1c8900, 10 * _0x1c8900);
  fill_path(_0x4bb2ab, _0x18ab00[3], _0x18ab00[4], 4 * _0x1c8900);
  _0x4bb2ab.rotate(-0.32);
  round_regular_polygon(_0x4bb2ab, 9, 38 * _0x1c8900, 10 * _0x1c8900);
  fill_path(_0x4bb2ab, _0x18ab00[5], _0x18ab00[6], 4 * _0x1c8900);
  _0x4bb2ab.rotate(0.68);
  round_regular_polygon(_0x4bb2ab, 9, 20 * _0x1c8900, 8 * _0x1c8900);
  fill_path(_0x4bb2ab, _0x18ab00[7], _0x18ab00[8], 6 * _0x1c8900);
  _0x4bb2ab.restore();
  return _0x4034de;
}
function create_hammer(_0x43dca2, _0x38e920, _0x504a52) {
  var _0x1c9126 = document.createElement("canvas");
  var _0x3d6a7e = _0x1c9126.getContext("2d");
  _0x1c9126.width = 69 * _0x43dca2;
  _0x1c9126.height = 120 * _0x43dca2;
  _0x3d6a7e.globalAlpha = _0x38e920 ? 0.5 : 1;
  _0x3d6a7e.save();
  _0x3d6a7e.translate(30 * _0x43dca2, 84 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -6 * _0x43dca2,
    -66.5 * _0x43dca2,
    8 * _0x43dca2,
    100 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[0]);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(30 * _0x43dca2, 45 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -9.5 * _0x43dca2,
    -6.5 * _0x43dca2,
    16 * _0x43dca2,
    13 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[0]);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(30 * _0x43dca2, 17 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -7.5 * _0x43dca2,
    -5.5 * _0x43dca2,
    12 * _0x43dca2,
    11 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[0]);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(30 * _0x43dca2, 31 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -26 * _0x43dca2,
    -14.5 * _0x43dca2,
    52 * _0x43dca2,
    29 * _0x43dca2,
    5 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[0]);
  _0x3d6a7e.globalAlpha = 1;
  _0x3d6a7e.save();
  _0x3d6a7e.translate(36 * _0x43dca2, 79.140625 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -6 * _0x43dca2,
    -66.5 * _0x43dca2,
    8 * _0x43dca2,
    100 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[1], _0x504a52[2], 3 * _0x43dca2);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(35 * _0x43dca2, 40.140625 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -9.5 * _0x43dca2,
    -6.5 * _0x43dca2,
    16 * _0x43dca2,
    13 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[3], _0x504a52[4], 3 * _0x43dca2);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(35 * _0x43dca2, 12.140625 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -7.5 * _0x43dca2,
    -5.5 * _0x43dca2,
    12 * _0x43dca2,
    11 * _0x43dca2,
    10 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[3], _0x504a52[4], 3 * _0x43dca2);
  _0x3d6a7e.save();
  _0x3d6a7e.translate(34.5 * _0x43dca2, 26.140625 * _0x43dca2);
  round_rect(
    _0x3d6a7e,
    -26 * _0x43dca2,
    -14.5 * _0x43dca2,
    52 * _0x43dca2,
    29 * _0x43dca2,
    5 * _0x43dca2
  );
  _0x3d6a7e.restore();
  fill_path(_0x3d6a7e, _0x504a52[3], _0x504a52[4], 3 * _0x43dca2);
  return _0x1c9126;
}
function create_clock_day(_0x3fd60e) {
  var _0x4a634a = document.createElement("canvas");
  var _0x1eb329 = _0x4a634a.getContext("2d");
  _0x4a634a.width = 321 * _0x3fd60e;
  _0x4a634a.height = 345 * _0x3fd60e;
  _0x1eb329.translate(0, 5 * _0x3fd60e);
  _0x1eb329.translate(0, 20 * _0x3fd60e);
  circle(
    _0x1eb329,
    160.5 * _0x3fd60e,
    159.5 * _0x3fd60e,
    156.39595138242822 * _0x3fd60e
  );
  fill_path(_0x1eb329, "#322413", "#322413", 4 * _0x3fd60e);
  _0x1eb329.translate(0, -20 * _0x3fd60e);
  circle(
    _0x1eb329,
    160.5 * _0x3fd60e,
    159.5 * _0x3fd60e,
    156.39595138242822 * _0x3fd60e
  );
  fill_path(_0x1eb329, "#392C16", "#5E3E1A", 10 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    31.999969482421875 * _0x3fd60e,
    163.07290649414062 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    22.999969482421875 * _0x3fd60e,
    67.07290649414062 * _0x3fd60e,
    106 * _0x3fd60e,
    20.072906494140625 * _0x3fd60e,
    162 * _0x3fd60e,
    23.072906494140625 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    269.9999694824219 * _0x3fd60e,
    31.072906494140625 * _0x3fd60e,
    292.9999694824219 * _0x3fd60e,
    120.07290649414062 * _0x3fd60e,
    294.9999694824219 * _0x3fd60e,
    161.07290649414062 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    165.49996948242188 * _0x3fd60e,
    162.07290649414062 * _0x3fd60e,
    165.49996948242188 * _0x3fd60e,
    162.07290649414062 * _0x3fd60e,
    35.999969482421875 * _0x3fd60e,
    163.07290649414062 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, "#12432D");
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    32.999969482421875 * _0x3fd60e,
    165.07290649414062 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    16.999969482421875 * _0x3fd60e,
    221.07290649414062 * _0x3fd60e,
    85 * _0x3fd60e,
    289.0729064941406 * _0x3fd60e,
    156 * _0x3fd60e,
    294.0729064941406 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    263.9999694824219 * _0x3fd60e,
    293.0729064941406 * _0x3fd60e,
    295.9999694824219 * _0x3fd60e,
    199.07290649414062 * _0x3fd60e,
    294.9999694824219 * _0x3fd60e,
    159.07290649414062 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, "#3A2A0D");
  circle(
    _0x1eb329,
    161 * _0x3fd60e,
    158.07290649414062 * _0x3fd60e,
    133.4053971921676 * _0x3fd60e
  );
  fill_path(_0x1eb329, undefined, "#5E3E1A", 10 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    31.999969482421875 * _0x3fd60e,
    161.62844848632812 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    162.49996948242188 * _0x3fd60e,
    161.62844848632812 * _0x3fd60e,
    162.49996948242188 * _0x3fd60e,
    161.62844848632812 * _0x3fd60e,
    292.9999694824219 * _0x3fd60e,
    161.62844848632812 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#5E3E1A", 12 * _0x3fd60e);
  _0x1eb329.translate(0, 8 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(66 * _0x3fd60e, 158.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    86 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e,
    86 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e,
    106 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    57.999969482421875 * _0x3fd60e,
    117.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    85 * _0x3fd60e,
    128.29513549804688 * _0x3fd60e,
    85 * _0x3fd60e,
    128.29513549804688 * _0x3fd60e,
    113 * _0x3fd60e,
    139.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(95 * _0x3fd60e, 90.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    112 * _0x3fd60e,
    105.79513549804688 * _0x3fd60e,
    112 * _0x3fd60e,
    105.79513549804688 * _0x3fd60e,
    129 * _0x3fd60e,
    121.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(116 * _0x3fd60e, 52.850677490234375 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    130 * _0x3fd60e,
    83.85067749023438 * _0x3fd60e,
    130 * _0x3fd60e,
    83.85067749023438 * _0x3fd60e,
    144 * _0x3fd60e,
    114.85067749023438 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(159 * _0x3fd60e, 61.295135498046875 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    160.49996948242188 * _0x3fd60e,
    92.29513549804688 * _0x3fd60e,
    160.49996948242188 * _0x3fd60e,
    92.29513549804688 * _0x3fd60e,
    160 * _0x3fd60e,
    123.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(203 * _0x3fd60e, 51.295135498046875 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    190.49996948242188 * _0x3fd60e,
    83.29513549804688 * _0x3fd60e,
    190.49996948242188 * _0x3fd60e,
    83.29513549804688 * _0x3fd60e,
    176 * _0x3fd60e,
    115.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(225 * _0x3fd60e, 89.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    210.49996948242188 * _0x3fd60e,
    104.79513549804688 * _0x3fd60e,
    210.49996948242188 * _0x3fd60e,
    104.79513549804688 * _0x3fd60e,
    194 * _0x3fd60e,
    120.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    266.9999694824219 * _0x3fd60e,
    112.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    233.49996948242188 * _0x3fd60e,
    127.29513549804688 * _0x3fd60e,
    233.49996948242188 * _0x3fd60e,
    127.29513549804688 * _0x3fd60e,
    199 * _0x3fd60e,
    142.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    256.9999694824219 * _0x3fd60e,
    155.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    238.49996948242188 * _0x3fd60e,
    156.29513549804688 * _0x3fd60e,
    238.49996948242188 * _0x3fd60e,
    156.29513549804688 * _0x3fd60e,
    219 * _0x3fd60e,
    157.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#c7a726", 12 * _0x3fd60e);
  _0x1eb329.translate(0, -8 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(66 * _0x3fd60e, 158.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    86 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e,
    86 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e,
    106 * _0x3fd60e,
    158.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    57.999969482421875 * _0x3fd60e,
    117.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    85 * _0x3fd60e,
    128.29513549804688 * _0x3fd60e,
    85 * _0x3fd60e,
    128.29513549804688 * _0x3fd60e,
    113 * _0x3fd60e,
    139.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(95 * _0x3fd60e, 90.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    112 * _0x3fd60e,
    105.79513549804688 * _0x3fd60e,
    112 * _0x3fd60e,
    105.79513549804688 * _0x3fd60e,
    129 * _0x3fd60e,
    121.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(116 * _0x3fd60e, 52.850677490234375 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    130 * _0x3fd60e,
    83.85067749023438 * _0x3fd60e,
    130 * _0x3fd60e,
    83.85067749023438 * _0x3fd60e,
    144 * _0x3fd60e,
    114.85067749023438 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(159 * _0x3fd60e, 61.295135498046875 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    160.49996948242188 * _0x3fd60e,
    92.29513549804688 * _0x3fd60e,
    160.49996948242188 * _0x3fd60e,
    92.29513549804688 * _0x3fd60e,
    160 * _0x3fd60e,
    123.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(203 * _0x3fd60e, 51.295135498046875 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    190.49996948242188 * _0x3fd60e,
    83.29513549804688 * _0x3fd60e,
    190.49996948242188 * _0x3fd60e,
    83.29513549804688 * _0x3fd60e,
    176 * _0x3fd60e,
    115.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(225 * _0x3fd60e, 89.29513549804688 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    210.49996948242188 * _0x3fd60e,
    104.79513549804688 * _0x3fd60e,
    210.49996948242188 * _0x3fd60e,
    104.79513549804688 * _0x3fd60e,
    194 * _0x3fd60e,
    120.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    266.9999694824219 * _0x3fd60e,
    112.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    233.49996948242188 * _0x3fd60e,
    127.29513549804688 * _0x3fd60e,
    233.49996948242188 * _0x3fd60e,
    127.29513549804688 * _0x3fd60e,
    199 * _0x3fd60e,
    142.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    256.9999694824219 * _0x3fd60e,
    155.29513549804688 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    238.49996948242188 * _0x3fd60e,
    156.29513549804688 * _0x3fd60e,
    238.49996948242188 * _0x3fd60e,
    156.29513549804688 * _0x3fd60e,
    219 * _0x3fd60e,
    157.29513549804688 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, undefined, "#EDCE4F", 12 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(
    94.00003051757812 * _0x3fd60e,
    164.40341186523438 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    162.50003051757812 * _0x3fd60e,
    164.40341186523438 * _0x3fd60e,
    230.00003051757812 * _0x3fd60e,
    165.40341186523438 * _0x3fd60e,
    231.00003051757812 * _0x3fd60e,
    164.40341186523438 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    214.00003051757812 * _0x3fd60e,
    267.4034118652344 * _0x3fd60e,
    92.00003051757812 * _0x3fd60e,
    243.40341186523438 * _0x3fd60e,
    93.00003051757812 * _0x3fd60e,
    165.40341186523438 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, "#704618", "#5D3D1A", 8 * _0x3fd60e);
  _0x1eb329.beginPath();
  _0x1eb329.lineCap = "round";
  _0x1eb329.lineJoin = "round";
  _0x1eb329.moveTo(96 * _0x3fd60e, 166 * _0x3fd60e);
  _0x1eb329.bezierCurveTo(
    88 * _0x3fd60e,
    117 * _0x3fd60e,
    129 * _0x3fd60e,
    92 * _0x3fd60e,
    161 * _0x3fd60e,
    91 * _0x3fd60e
  );
  _0x1eb329.bezierCurveTo(
    201 * _0x3fd60e,
    90 * _0x3fd60e,
    223 * _0x3fd60e,
    121 * _0x3fd60e,
    230 * _0x3fd60e,
    161 * _0x3fd60e
  );
  _0x1eb329.closePath();
  fill_path(_0x1eb329, "#ECBE35", "#EDCE4F", 8 * _0x3fd60e);
  circle(
    _0x1eb329,
    160.00003051757812 * _0x3fd60e,
    166.49432373046875 * _0x3fd60e,
    28.30194339616981 * _0x3fd60e
  );
  fill_path(_0x1eb329, "#392C16", "#5E3E1A", 10 * _0x3fd60e);
  return _0x4a634a;
}
function create_clock_night(_0x4e7eb2) {
  var _0x4c9ac1 = document.createElement("canvas");
  var _0x5ebb1c = _0x4c9ac1.getContext("2d");
  _0x4c9ac1.width = 321 * _0x4e7eb2;
  _0x4c9ac1.height = 345 * _0x4e7eb2;
  _0x5ebb1c.translate(0, 5 * _0x4e7eb2);
  _0x5ebb1c.translate(0, 20 * _0x4e7eb2);
  circle(
    _0x5ebb1c,
    160.5 * _0x4e7eb2,
    159.5 * _0x4e7eb2,
    156.39595138242822 * _0x4e7eb2
  );
  fill_path(_0x5ebb1c, "#322413", "#322413", 4 * _0x4e7eb2);
  _0x5ebb1c.translate(0, -20 * _0x4e7eb2);
  circle(
    _0x5ebb1c,
    160.5 * _0x4e7eb2,
    159.5 * _0x4e7eb2,
    156.39595138242822 * _0x4e7eb2
  );
  fill_path(_0x5ebb1c, "#392C16", "#5E3E1A", 10 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    31.999969482421875 * _0x4e7eb2,
    163.07290649414062 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    22.999969482421875 * _0x4e7eb2,
    67.07290649414062 * _0x4e7eb2,
    106 * _0x4e7eb2,
    20.072906494140625 * _0x4e7eb2,
    162 * _0x4e7eb2,
    23.072906494140625 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    269.9999694824219 * _0x4e7eb2,
    31.072906494140625 * _0x4e7eb2,
    292.9999694824219 * _0x4e7eb2,
    120.07290649414062 * _0x4e7eb2,
    294.9999694824219 * _0x4e7eb2,
    161.07290649414062 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    165.49996948242188 * _0x4e7eb2,
    162.07290649414062 * _0x4e7eb2,
    165.49996948242188 * _0x4e7eb2,
    162.07290649414062 * _0x4e7eb2,
    35.999969482421875 * _0x4e7eb2,
    163.07290649414062 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, "#3A2A0D");
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    32.999969482421875 * _0x4e7eb2,
    165.07290649414062 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    16.999969482421875 * _0x4e7eb2,
    221.07290649414062 * _0x4e7eb2,
    85 * _0x4e7eb2,
    289.0729064941406 * _0x4e7eb2,
    156 * _0x4e7eb2,
    294.0729064941406 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    263.9999694824219 * _0x4e7eb2,
    293.0729064941406 * _0x4e7eb2,
    295.9999694824219 * _0x4e7eb2,
    199.07290649414062 * _0x4e7eb2,
    294.9999694824219 * _0x4e7eb2,
    159.07290649414062 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, "#071A1B");
  circle(
    _0x5ebb1c,
    161 * _0x4e7eb2,
    158.07290649414062 * _0x4e7eb2,
    133.4053971921676 * _0x4e7eb2
  );
  fill_path(_0x5ebb1c, undefined, "#5E3E1A", 10 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    31.999969482421875 * _0x4e7eb2,
    161.62844848632812 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    162.49996948242188 * _0x4e7eb2,
    161.62844848632812 * _0x4e7eb2,
    162.49996948242188 * _0x4e7eb2,
    161.62844848632812 * _0x4e7eb2,
    292.9999694824219 * _0x4e7eb2,
    161.62844848632812 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3E1A", 12 * _0x4e7eb2);
  _0x5ebb1c.translate(0, 8 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(66 * _0x4e7eb2, 158.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    86 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2,
    86 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2,
    106 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    57.999969482421875 * _0x4e7eb2,
    117.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    85 * _0x4e7eb2,
    128.29513549804688 * _0x4e7eb2,
    85 * _0x4e7eb2,
    128.29513549804688 * _0x4e7eb2,
    113 * _0x4e7eb2,
    139.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(95 * _0x4e7eb2, 90.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    112 * _0x4e7eb2,
    105.79513549804688 * _0x4e7eb2,
    112 * _0x4e7eb2,
    105.79513549804688 * _0x4e7eb2,
    129 * _0x4e7eb2,
    121.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(116 * _0x4e7eb2, 52.850677490234375 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    130 * _0x4e7eb2,
    83.85067749023438 * _0x4e7eb2,
    130 * _0x4e7eb2,
    83.85067749023438 * _0x4e7eb2,
    144 * _0x4e7eb2,
    114.85067749023438 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(159 * _0x4e7eb2, 61.295135498046875 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    160.49996948242188 * _0x4e7eb2,
    92.29513549804688 * _0x4e7eb2,
    160.49996948242188 * _0x4e7eb2,
    92.29513549804688 * _0x4e7eb2,
    160 * _0x4e7eb2,
    123.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(203 * _0x4e7eb2, 51.295135498046875 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    190.49996948242188 * _0x4e7eb2,
    83.29513549804688 * _0x4e7eb2,
    190.49996948242188 * _0x4e7eb2,
    83.29513549804688 * _0x4e7eb2,
    176 * _0x4e7eb2,
    115.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(225 * _0x4e7eb2, 89.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    210.49996948242188 * _0x4e7eb2,
    104.79513549804688 * _0x4e7eb2,
    210.49996948242188 * _0x4e7eb2,
    104.79513549804688 * _0x4e7eb2,
    194 * _0x4e7eb2,
    120.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    266.9999694824219 * _0x4e7eb2,
    112.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    233.49996948242188 * _0x4e7eb2,
    127.29513549804688 * _0x4e7eb2,
    233.49996948242188 * _0x4e7eb2,
    127.29513549804688 * _0x4e7eb2,
    199 * _0x4e7eb2,
    142.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    256.9999694824219 * _0x4e7eb2,
    155.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    238.49996948242188 * _0x4e7eb2,
    156.29513549804688 * _0x4e7eb2,
    238.49996948242188 * _0x4e7eb2,
    156.29513549804688 * _0x4e7eb2,
    219 * _0x4e7eb2,
    157.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#281C08", 12 * _0x4e7eb2);
  _0x5ebb1c.translate(0, -8 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(66 * _0x4e7eb2, 158.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    86 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2,
    86 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2,
    106 * _0x4e7eb2,
    158.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    57.999969482421875 * _0x4e7eb2,
    117.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    85 * _0x4e7eb2,
    128.29513549804688 * _0x4e7eb2,
    85 * _0x4e7eb2,
    128.29513549804688 * _0x4e7eb2,
    113 * _0x4e7eb2,
    139.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(95 * _0x4e7eb2, 90.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    112 * _0x4e7eb2,
    105.79513549804688 * _0x4e7eb2,
    112 * _0x4e7eb2,
    105.79513549804688 * _0x4e7eb2,
    129 * _0x4e7eb2,
    121.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(116 * _0x4e7eb2, 52.850677490234375 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    130 * _0x4e7eb2,
    83.85067749023438 * _0x4e7eb2,
    130 * _0x4e7eb2,
    83.85067749023438 * _0x4e7eb2,
    144 * _0x4e7eb2,
    114.85067749023438 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(159 * _0x4e7eb2, 61.295135498046875 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    160.49996948242188 * _0x4e7eb2,
    92.29513549804688 * _0x4e7eb2,
    160.49996948242188 * _0x4e7eb2,
    92.29513549804688 * _0x4e7eb2,
    160 * _0x4e7eb2,
    123.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(203 * _0x4e7eb2, 51.295135498046875 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    190.49996948242188 * _0x4e7eb2,
    83.29513549804688 * _0x4e7eb2,
    190.49996948242188 * _0x4e7eb2,
    83.29513549804688 * _0x4e7eb2,
    176 * _0x4e7eb2,
    115.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(225 * _0x4e7eb2, 89.29513549804688 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    210.49996948242188 * _0x4e7eb2,
    104.79513549804688 * _0x4e7eb2,
    210.49996948242188 * _0x4e7eb2,
    104.79513549804688 * _0x4e7eb2,
    194 * _0x4e7eb2,
    120.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    266.9999694824219 * _0x4e7eb2,
    112.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    233.49996948242188 * _0x4e7eb2,
    127.29513549804688 * _0x4e7eb2,
    233.49996948242188 * _0x4e7eb2,
    127.29513549804688 * _0x4e7eb2,
    199 * _0x4e7eb2,
    142.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    256.9999694824219 * _0x4e7eb2,
    155.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    238.49996948242188 * _0x4e7eb2,
    156.29513549804688 * _0x4e7eb2,
    238.49996948242188 * _0x4e7eb2,
    156.29513549804688 * _0x4e7eb2,
    219 * _0x4e7eb2,
    157.29513549804688 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, undefined, "#5E3C10", 12 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(96 * _0x4e7eb2, 166 * _0x4e7eb2);
  _0x5ebb1c.bezierCurveTo(
    88 * _0x4e7eb2,
    117 * _0x4e7eb2,
    129 * _0x4e7eb2,
    92 * _0x4e7eb2,
    161 * _0x4e7eb2,
    91 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    201 * _0x4e7eb2,
    90 * _0x4e7eb2,
    223 * _0x4e7eb2,
    121 * _0x4e7eb2,
    230 * _0x4e7eb2,
    161 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, "#704618", "#5D3D1A", 8 * _0x4e7eb2);
  _0x5ebb1c.beginPath();
  _0x5ebb1c.lineCap = "round";
  _0x5ebb1c.lineJoin = "round";
  _0x5ebb1c.moveTo(
    94.00003051757812 * _0x4e7eb2,
    164.40341186523438 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    162.50003051757812 * _0x4e7eb2,
    164.40341186523438 * _0x4e7eb2,
    230.00003051757812 * _0x4e7eb2,
    165.40341186523438 * _0x4e7eb2,
    231.00003051757812 * _0x4e7eb2,
    164.40341186523438 * _0x4e7eb2
  );
  _0x5ebb1c.bezierCurveTo(
    214.00003051757812 * _0x4e7eb2,
    267.4034118652344 * _0x4e7eb2,
    92.00003051757812 * _0x4e7eb2,
    243.40341186523438 * _0x4e7eb2,
    93.00003051757812 * _0x4e7eb2,
    165.40341186523438 * _0x4e7eb2
  );
  _0x5ebb1c.closePath();
  fill_path(_0x5ebb1c, "#E1DDD5", "#EAE7E4", 8 * _0x4e7eb2);
  circle(
    _0x5ebb1c,
    160.00003051757812 * _0x4e7eb2,
    166.49432373046875 * _0x4e7eb2,
    28.30194339616981 * _0x4e7eb2
  );
  fill_path(_0x5ebb1c, "#392C16", "#5E3E1A", 10 * _0x4e7eb2);
  return _0x4c9ac1;
}
function create_arrow_clock(_0x5b8e32) {
  var _0x5642de = document.createElement("canvas");
  var _0x50813b = _0x5642de.getContext("2d");
  _0x5642de.width = 321 * _0x5b8e32;
  _0x5642de.height = 345 * _0x5b8e32;
  _0x50813b.translate(0, 5 * _0x5b8e32);
  circle(
    _0x50813b,
    161.00003051757812 * _0x5b8e32,
    165.40341186523438 * _0x5b8e32,
    20.808652046684813 * _0x5b8e32
  );
  fill_path(_0x50813b, "#C09D6F", "#A37943", 10 * _0x5b8e32);
  _0x50813b.beginPath();
  _0x50813b.lineCap = "round";
  _0x50813b.lineJoin = "round";
  _0x50813b.moveTo(
    162.00003051757812 * _0x5b8e32,
    48.403411865234375 * _0x5b8e32
  );
  _0x50813b.bezierCurveTo(
    172.50003051757812 * _0x5b8e32,
    67.40341186523438 * _0x5b8e32,
    172.50003051757812 * _0x5b8e32,
    67.40341186523438 * _0x5b8e32,
    183.00003051757812 * _0x5b8e32,
    86.40341186523438 * _0x5b8e32
  );
  _0x50813b.bezierCurveTo(
    160.50003051757812 * _0x5b8e32,
    86.40341186523438 * _0x5b8e32,
    160.50003051757812 * _0x5b8e32,
    86.40341186523438 * _0x5b8e32,
    138.00003051757812 * _0x5b8e32,
    86.40341186523438 * _0x5b8e32
  );
  _0x50813b.closePath();
  fill_path(_0x50813b, "#C09D6F", "#A37943", 10 * _0x5b8e32);
  _0x50813b.save();
  _0x50813b.translate(
    161.50003051757812 * _0x5b8e32,
    117.90341186523438 * _0x5b8e32
  );
  round_rect(
    _0x50813b,
    -5.5 * _0x5b8e32,
    -37.5 * _0x5b8e32,
    11 * _0x5b8e32,
    75 * _0x5b8e32,
    10 * _0x5b8e32
  );
  _0x50813b.restore();
  fill_path(_0x50813b, "#C09D6F", "#A37943", 10 * _0x5b8e32);
  _0x50813b.save();
  _0x50813b.translate(
    162.00003051757812 * _0x5b8e32,
    78.90341186523438 * _0x5b8e32
  );
  round_rect(
    _0x50813b,
    -10 * _0x5b8e32,
    -5.5 * _0x5b8e32,
    20 * _0x5b8e32,
    11 * _0x5b8e32,
    1 * _0x5b8e32
  );
  _0x50813b.restore();
  fill_path(_0x50813b, "#C09D6F");
  circle(
    _0x50813b,
    161.00003051757812 * _0x5b8e32,
    163.6761474609375 * _0x5b8e32,
    17.08800749063506 * _0x5b8e32
  );
  fill_path(_0x50813b, "#C09D6F");
  return _0x5642de;
}
function create_island(_0x302a84, _0x58e35d, _0x58ca16) {
  var _0x17f9c4 = document.createElement("canvas"),
    _0x4cac82 = _0x17f9c4.getContext("2d");
  if (_0x58ca16 == 0) {
    _0x17f9c4.width = 566 * _0x302a84;
    _0x17f9c4.height = 429 * _0x302a84;
    _0x4cac82.beginPath();
    _0x4cac82.lineCap = "round";
    _0x4cac82.lineJoin = "round";
    _0x4cac82.moveTo(312.625 * _0x302a84, 39.046875 * _0x302a84);
    _0x4cac82.bezierCurveTo(
      456.625 * _0x302a84,
      60.046875 * _0x302a84,
      521.625 * _0x302a84,
      134.046875 * _0x302a84,
      528.625 * _0x302a84,
      199.046875 * _0x302a84
    );
    _0x4cac82.bezierCurveTo(
      540.625 * _0x302a84,
      298.046875 * _0x302a84,
      491.625 * _0x302a84,
      364.046875 * _0x302a84,
      405.625 * _0x302a84,
      394.046875 * _0x302a84
    );
    _0x4cac82.bezierCurveTo(
      270.625 * _0x302a84,
      429.046875 * _0x302a84,
      182.625 * _0x302a84,
      395.046875 * _0x302a84,
      100.625 * _0x302a84,
      344.046875 * _0x302a84
    );
    _0x4cac82.bezierCurveTo(
      15.625 * _0x302a84,
      283.046875 * _0x302a84,
      20.625 * _0x302a84,
      195.046875 * _0x302a84,
      33.625 * _0x302a84,
      158.046875 * _0x302a84
    );
    _0x4cac82.bezierCurveTo(
      56.625 * _0x302a84,
      80.046875 * _0x302a84,
      102.625 * _0x302a84,
      46.046875 * _0x302a84,
      183.625 * _0x302a84,
      33.046875 * _0x302a84
    );
    _0x4cac82.bezierCurveTo(
      225.625 * _0x302a84,
      25.046875 * _0x302a84,
      270.625 * _0x302a84,
      30.046875 * _0x302a84,
      312.625 * _0x302a84,
      39.046875 * _0x302a84
    );
    _0x4cac82.closePath();
    fill_path(_0x4cac82, _0x58e35d[0]);
  } else {
    if (_0x58ca16 == 1) {
      var _0x17f9c4 = document.createElement("canvas");
      var _0x4cac82 = _0x17f9c4.getContext("2d");
      _0x17f9c4.width = 511 * _0x302a84;
      _0x17f9c4.height = 408 * _0x302a84;
      _0x4cac82.beginPath();
      _0x4cac82.lineCap = "round";
      _0x4cac82.lineJoin = "round";
      _0x4cac82.moveTo(141.625 * _0x302a84, 49.296875 * _0x302a84);
      _0x4cac82.bezierCurveTo(
        225.625 * _0x302a84,
        10.296875 * _0x302a84,
        320.625 * _0x302a84,
        16.296875 * _0x302a84,
        390.625 * _0x302a84,
        39.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        476.625 * _0x302a84,
        71.296875 * _0x302a84,
        483.625 * _0x302a84,
        142.296875 * _0x302a84,
        486.625 * _0x302a84,
        197.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        491.625 * _0x302a84,
        289.296875 * _0x302a84,
        462.625 * _0x302a84,
        317.296875 * _0x302a84,
        417.625 * _0x302a84,
        351.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        367.625 * _0x302a84,
        385.296875 * _0x302a84,
        313.625 * _0x302a84,
        404.296875 * _0x302a84,
        218.625 * _0x302a84,
        395.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        108.625 * _0x302a84,
        381.296875 * _0x302a84,
        81.625 * _0x302a84,
        350.296875 * _0x302a84,
        52.625 * _0x302a84,
        305.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        16.625 * _0x302a84,
        244.296875 * _0x302a84,
        23.625 * _0x302a84,
        171.296875 * _0x302a84,
        37.625 * _0x302a84,
        145.296875 * _0x302a84
      );
      _0x4cac82.bezierCurveTo(
        65.625 * _0x302a84,
        84.296875 * _0x302a84,
        97.625 * _0x302a84,
        74.296875 * _0x302a84,
        141.625 * _0x302a84,
        49.296875 * _0x302a84
      );
      _0x4cac82.closePath();
      fill_path(_0x4cac82, _0x58e35d[0]);
    } else {
      if (_0x58ca16 == 2) {
        var _0x17f9c4 = document.createElement("canvas");
        var _0x4cac82 = _0x17f9c4.getContext("2d");
        _0x17f9c4.width = 504 * _0x302a84;
        _0x17f9c4.height = 408 * _0x302a84;
        _0x4cac82.beginPath();
        _0x4cac82.lineCap = "round";
        _0x4cac82.lineJoin = "round";
        _0x4cac82.moveTo(153.625 * _0x302a84, 46.296875 * _0x302a84);
        _0x4cac82.bezierCurveTo(
          271.625 * _0x302a84,
          17.296875 * _0x302a84,
          345.625 * _0x302a84,
          35.296875 * _0x302a84,
          410.625 * _0x302a84,
          71.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          473.625 * _0x302a84,
          109.296875 * _0x302a84,
          478.625 * _0x302a84,
          167.296875 * _0x302a84,
          473.625 * _0x302a84,
          205.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          462.625 * _0x302a84,
          295.296875 * _0x302a84,
          438.625 * _0x302a84,
          316.296875 * _0x302a84,
          388.625 * _0x302a84,
          345.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          331.625 * _0x302a84,
          374.296875 * _0x302a84,
          273.625 * _0x302a84,
          392.296875 * _0x302a84,
          180.625 * _0x302a84,
          387.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          111.625 * _0x302a84,
          380.296875 * _0x302a84,
          86.625 * _0x302a84,
          360.296875 * _0x302a84,
          51.625 * _0x302a84,
          309.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          23.625 * _0x302a84,
          267.296875 * _0x302a84,
          25.625 * _0x302a84,
          226.296875 * _0x302a84,
          27.625 * _0x302a84,
          175.296875 * _0x302a84
        );
        _0x4cac82.bezierCurveTo(
          37.625 * _0x302a84,
          99.296875 * _0x302a84,
          88.625 * _0x302a84,
          57.296875 * _0x302a84,
          153.625 * _0x302a84,
          46.296875 * _0x302a84
        );
        _0x4cac82.closePath();
        fill_path(_0x4cac82, _0x58e35d[0]);
      }
    }
  }
  return _0x17f9c4;
}
function create_sign(_0x1c6a63, _0x3f9a23, _0x52db62) {
  var _0x127dae = document.createElement("canvas");
  var _0x4fb50c = _0x127dae.getContext("2d");
  _0x127dae.width = 450 * _0x1c6a63;
  _0x127dae.height = 260 * _0x1c6a63;
  _0x4fb50c.translate(10 * _0x1c6a63, 10 * _0x1c6a63);
  _0x4fb50c.globalAlpha = _0x3f9a23 ? 0.5 : 1;
  _0x4fb50c.translate(20 * _0x1c6a63, 20 * _0x1c6a63);
  round_rect(_0x4fb50c, 0, 0, 400 * _0x1c6a63, 220 * _0x1c6a63, 30 * _0x1c6a63);
  fill_path(_0x4fb50c, _0x52db62[0]);
  _0x4fb50c.globalAlpha = 1;
  _0x4fb50c.translate(-20 * _0x1c6a63, -20 * _0x1c6a63);
  _0x4fb50c.beginPath();
  _0x4fb50c.lineCap = "round";
  _0x4fb50c.lineJoin = "round";
  _0x4fb50c.moveTo(9 * _0x1c6a63, 5 * _0x1c6a63);
  _0x4fb50c.bezierCurveTo(
    381 * _0x1c6a63,
    2 * _0x1c6a63,
    197 * _0x1c6a63,
    4.5 * _0x1c6a63,
    385 * _0x1c6a63,
    4 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    397 * _0x1c6a63,
    4 * _0x1c6a63,
    401 * _0x1c6a63,
    4 * _0x1c6a63,
    399 * _0x1c6a63,
    23 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    367 * _0x1c6a63,
    27 * _0x1c6a63,
    367 * _0x1c6a63,
    27 * _0x1c6a63,
    335 * _0x1c6a63,
    31 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    366.5 * _0x1c6a63,
    33.5 * _0x1c6a63,
    366.5 * _0x1c6a63,
    33.5 * _0x1c6a63,
    398 * _0x1c6a63,
    36 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    398 * _0x1c6a63,
    41.5 * _0x1c6a63,
    398 * _0x1c6a63,
    41.5 * _0x1c6a63,
    398 * _0x1c6a63,
    47 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    398 * _0x1c6a63,
    56 * _0x1c6a63,
    399 * _0x1c6a63,
    56 * _0x1c6a63,
    386 * _0x1c6a63,
    56 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    200.5 * _0x1c6a63,
    56.5 * _0x1c6a63,
    200.5 * _0x1c6a63,
    56.5 * _0x1c6a63,
    15 * _0x1c6a63,
    57 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    2 * _0x1c6a63,
    55 * _0x1c6a63,
    4 * _0x1c6a63,
    52 * _0x1c6a63,
    4 * _0x1c6a63,
    43 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    4 * _0x1c6a63,
    30.5 * _0x1c6a63,
    4 * _0x1c6a63,
    30.5 * _0x1c6a63,
    4 * _0x1c6a63,
    18 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    16 * _0x1c6a63,
    18.5 * _0x1c6a63,
    16 * _0x1c6a63,
    18.5 * _0x1c6a63,
    28 * _0x1c6a63,
    19 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    18.5 * _0x1c6a63,
    12 * _0x1c6a63,
    18.5 * _0x1c6a63,
    12 * _0x1c6a63,
    9 * _0x1c6a63,
    5 * _0x1c6a63
  );
  _0x4fb50c.closePath();
  fill_path(_0x4fb50c, _0x52db62[2], _0x52db62[1], 12 * _0x1c6a63);
  _0x4fb50c.beginPath();
  _0x4fb50c.lineCap = "round";
  _0x4fb50c.lineJoin = "round";
  _0x4fb50c.moveTo(5 * _0x1c6a63, 70 * _0x1c6a63);
  _0x4fb50c.bezierCurveTo(
    5 * _0x1c6a63,
    58 * _0x1c6a63,
    5 * _0x1c6a63,
    55 * _0x1c6a63,
    17 * _0x1c6a63,
    57 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    203 * _0x1c6a63,
    57 * _0x1c6a63,
    203 * _0x1c6a63,
    57 * _0x1c6a63,
    389 * _0x1c6a63,
    57 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    400 * _0x1c6a63,
    57 * _0x1c6a63,
    400 * _0x1c6a63,
    59 * _0x1c6a63,
    400 * _0x1c6a63,
    69 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    400.5 * _0x1c6a63,
    83.5 * _0x1c6a63,
    400.5 * _0x1c6a63,
    83.5 * _0x1c6a63,
    401 * _0x1c6a63,
    98 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    402 * _0x1c6a63,
    108 * _0x1c6a63,
    401 * _0x1c6a63,
    108 * _0x1c6a63,
    388 * _0x1c6a63,
    108 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    201.5 * _0x1c6a63,
    108 * _0x1c6a63,
    201.5 * _0x1c6a63,
    108 * _0x1c6a63,
    15 * _0x1c6a63,
    108 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    1 * _0x1c6a63,
    106 * _0x1c6a63,
    5 * _0x1c6a63,
    106 * _0x1c6a63,
    5 * _0x1c6a63,
    87 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    33 * _0x1c6a63,
    84.5 * _0x1c6a63,
    33 * _0x1c6a63,
    84.5 * _0x1c6a63,
    61 * _0x1c6a63,
    82 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    33.5 * _0x1c6a63,
    76.5 * _0x1c6a63,
    33.5 * _0x1c6a63,
    76.5 * _0x1c6a63,
    6 * _0x1c6a63,
    71 * _0x1c6a63
  );
  _0x4fb50c.closePath();
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  _0x4fb50c.beginPath();
  _0x4fb50c.lineCap = "round";
  _0x4fb50c.lineJoin = "round";
  _0x4fb50c.moveTo(19 * _0x1c6a63, 158 * _0x1c6a63);
  _0x4fb50c.bezierCurveTo(
    2 * _0x1c6a63,
    159 * _0x1c6a63,
    4 * _0x1c6a63,
    156 * _0x1c6a63,
    5 * _0x1c6a63,
    118 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    4 * _0x1c6a63,
    110 * _0x1c6a63,
    6 * _0x1c6a63,
    107 * _0x1c6a63,
    26 * _0x1c6a63,
    109 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    206.5 * _0x1c6a63,
    109 * _0x1c6a63,
    206.5 * _0x1c6a63,
    109 * _0x1c6a63,
    387 * _0x1c6a63,
    109 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    400 * _0x1c6a63,
    108 * _0x1c6a63,
    400 * _0x1c6a63,
    108 * _0x1c6a63,
    398 * _0x1c6a63,
    127 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    384.5 * _0x1c6a63,
    130 * _0x1c6a63,
    384.5 * _0x1c6a63,
    130 * _0x1c6a63,
    371 * _0x1c6a63,
    133 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    385.5 * _0x1c6a63,
    138 * _0x1c6a63,
    385.5 * _0x1c6a63,
    138 * _0x1c6a63,
    400 * _0x1c6a63,
    143 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    402 * _0x1c6a63,
    156 * _0x1c6a63,
    402 * _0x1c6a63,
    162 * _0x1c6a63,
    385 * _0x1c6a63,
    160 * _0x1c6a63
  );
  _0x4fb50c.closePath();
  fill_path(_0x4fb50c, _0x52db62[2], _0x52db62[1], 12 * _0x1c6a63);
  _0x4fb50c.beginPath();
  _0x4fb50c.lineCap = "round";
  _0x4fb50c.lineJoin = "round";
  _0x4fb50c.moveTo(4 * _0x1c6a63, 183 * _0x1c6a63);
  _0x4fb50c.bezierCurveTo(
    1 * _0x1c6a63,
    163 * _0x1c6a63,
    4 * _0x1c6a63,
    158 * _0x1c6a63,
    28 * _0x1c6a63,
    161 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    207.5 * _0x1c6a63,
    161 * _0x1c6a63,
    207.5 * _0x1c6a63,
    161 * _0x1c6a63,
    387 * _0x1c6a63,
    161 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    401 * _0x1c6a63,
    159 * _0x1c6a63,
    400 * _0x1c6a63,
    164 * _0x1c6a63,
    400 * _0x1c6a63,
    177 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    364.5 * _0x1c6a63,
    184 * _0x1c6a63,
    364.5 * _0x1c6a63,
    184 * _0x1c6a63,
    329 * _0x1c6a63,
    191 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    364.5 * _0x1c6a63,
    192.5 * _0x1c6a63,
    364.5 * _0x1c6a63,
    192.5 * _0x1c6a63,
    400 * _0x1c6a63,
    194 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    403 * _0x1c6a63,
    209 * _0x1c6a63,
    401 * _0x1c6a63,
    214 * _0x1c6a63,
    385 * _0x1c6a63,
    213 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    201.5 * _0x1c6a63,
    213 * _0x1c6a63,
    201.5 * _0x1c6a63,
    213 * _0x1c6a63,
    18 * _0x1c6a63,
    213 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    3 * _0x1c6a63,
    213 * _0x1c6a63,
    2 * _0x1c6a63,
    213 * _0x1c6a63,
    4 * _0x1c6a63,
    198 * _0x1c6a63
  );
  _0x4fb50c.bezierCurveTo(
    12.5 * _0x1c6a63,
    193 * _0x1c6a63,
    12.5 * _0x1c6a63,
    193 * _0x1c6a63,
    21 * _0x1c6a63,
    188 * _0x1c6a63
  );
  _0x4fb50c.closePath();
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  circle(
    _0x4fb50c,
    41 * _0x1c6a63,
    30 * _0x1c6a63,
    14.7648230602334 * _0x1c6a63
  );
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  circle(
    _0x4fb50c,
    369 * _0x1c6a63,
    30 * _0x1c6a63,
    15.556349186104045 * _0x1c6a63
  );
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  circle(
    _0x4fb50c,
    364 * _0x1c6a63,
    190 * _0x1c6a63,
    15.620499351813308 * _0x1c6a63
  );
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  circle(
    _0x4fb50c,
    41 * _0x1c6a63,
    186 * _0x1c6a63,
    15.556349186104045 * _0x1c6a63
  );
  fill_path(_0x4fb50c, _0x52db62[3], _0x52db62[1], 12 * _0x1c6a63);
  return _0x127dae;
}
function create_sign_button(_0xc10334, _0xe0526, _0x1d5927) {
  var _0x284b14 = document.createElement("canvas");
  var _0x76067d = _0x284b14.getContext("2d");
  _0x284b14.width = 450 * _0xc10334;
  _0x284b14.height = 260 * _0xc10334;
  _0x76067d.translate(10 * _0xc10334, 10 * _0xc10334);
  if (_0x1d5927 == 1) {
    _0x76067d.beginPath();
    _0x76067d.lineCap = "round";
    _0x76067d.lineJoin = "round";
    _0x76067d.moveTo(9 * _0xc10334, 5 * _0xc10334);
    _0x76067d.bezierCurveTo(
      381 * _0xc10334,
      2 * _0xc10334,
      197 * _0xc10334,
      4.5 * _0xc10334,
      385 * _0xc10334,
      4 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      397 * _0xc10334,
      4 * _0xc10334,
      401 * _0xc10334,
      4 * _0xc10334,
      399 * _0xc10334,
      23 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      367 * _0xc10334,
      27 * _0xc10334,
      367 * _0xc10334,
      27 * _0xc10334,
      335 * _0xc10334,
      31 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      366.5 * _0xc10334,
      33.5 * _0xc10334,
      366.5 * _0xc10334,
      33.5 * _0xc10334,
      398 * _0xc10334,
      36 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      398 * _0xc10334,
      41.5 * _0xc10334,
      398 * _0xc10334,
      41.5 * _0xc10334,
      398 * _0xc10334,
      47 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      398 * _0xc10334,
      56 * _0xc10334,
      399 * _0xc10334,
      56 * _0xc10334,
      386 * _0xc10334,
      56 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      200.5 * _0xc10334,
      56.5 * _0xc10334,
      200.5 * _0xc10334,
      56.5 * _0xc10334,
      15 * _0xc10334,
      57 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      2 * _0xc10334,
      55 * _0xc10334,
      4 * _0xc10334,
      52 * _0xc10334,
      4 * _0xc10334,
      43 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      4 * _0xc10334,
      30.5 * _0xc10334,
      4 * _0xc10334,
      30.5 * _0xc10334,
      4 * _0xc10334,
      18 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      16 * _0xc10334,
      18.5 * _0xc10334,
      16 * _0xc10334,
      18.5 * _0xc10334,
      28 * _0xc10334,
      19 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      18.5 * _0xc10334,
      12 * _0xc10334,
      18.5 * _0xc10334,
      12 * _0xc10334,
      9 * _0xc10334,
      5 * _0xc10334
    );
    _0x76067d.closePath();
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    _0x76067d.beginPath();
    _0x76067d.lineCap = "round";
    _0x76067d.lineJoin = "round";
    _0x76067d.moveTo(5 * _0xc10334, 70 * _0xc10334);
    _0x76067d.bezierCurveTo(
      5 * _0xc10334,
      58 * _0xc10334,
      5 * _0xc10334,
      55 * _0xc10334,
      17 * _0xc10334,
      57 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      203 * _0xc10334,
      57 * _0xc10334,
      203 * _0xc10334,
      57 * _0xc10334,
      389 * _0xc10334,
      57 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      400 * _0xc10334,
      57 * _0xc10334,
      400 * _0xc10334,
      59 * _0xc10334,
      400 * _0xc10334,
      69 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      400.5 * _0xc10334,
      83.5 * _0xc10334,
      400.5 * _0xc10334,
      83.5 * _0xc10334,
      401 * _0xc10334,
      98 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      402 * _0xc10334,
      108 * _0xc10334,
      401 * _0xc10334,
      108 * _0xc10334,
      388 * _0xc10334,
      108 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      201.5 * _0xc10334,
      108 * _0xc10334,
      201.5 * _0xc10334,
      108 * _0xc10334,
      15 * _0xc10334,
      108 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      1 * _0xc10334,
      106 * _0xc10334,
      5 * _0xc10334,
      106 * _0xc10334,
      5 * _0xc10334,
      87 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      33 * _0xc10334,
      84.5 * _0xc10334,
      33 * _0xc10334,
      84.5 * _0xc10334,
      61 * _0xc10334,
      82 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      33.5 * _0xc10334,
      76.5 * _0xc10334,
      33.5 * _0xc10334,
      76.5 * _0xc10334,
      6 * _0xc10334,
      71 * _0xc10334
    );
    _0x76067d.closePath();
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    _0x76067d.beginPath();
    _0x76067d.lineCap = "round";
    _0x76067d.lineJoin = "round";
    _0x76067d.moveTo(19 * _0xc10334, 158 * _0xc10334);
    _0x76067d.bezierCurveTo(
      2 * _0xc10334,
      159 * _0xc10334,
      4 * _0xc10334,
      156 * _0xc10334,
      5 * _0xc10334,
      118 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      4 * _0xc10334,
      110 * _0xc10334,
      6 * _0xc10334,
      107 * _0xc10334,
      26 * _0xc10334,
      109 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      206.5 * _0xc10334,
      109 * _0xc10334,
      206.5 * _0xc10334,
      109 * _0xc10334,
      387 * _0xc10334,
      109 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      400 * _0xc10334,
      108 * _0xc10334,
      400 * _0xc10334,
      108 * _0xc10334,
      398 * _0xc10334,
      127 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      384.5 * _0xc10334,
      130 * _0xc10334,
      384.5 * _0xc10334,
      130 * _0xc10334,
      371 * _0xc10334,
      133 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      385.5 * _0xc10334,
      138 * _0xc10334,
      385.5 * _0xc10334,
      138 * _0xc10334,
      400 * _0xc10334,
      143 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      402 * _0xc10334,
      156 * _0xc10334,
      402 * _0xc10334,
      162 * _0xc10334,
      385 * _0xc10334,
      160 * _0xc10334
    );
    _0x76067d.closePath();
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    _0x76067d.beginPath();
    _0x76067d.lineCap = "round";
    _0x76067d.lineJoin = "round";
    _0x76067d.moveTo(4 * _0xc10334, 183 * _0xc10334);
    _0x76067d.bezierCurveTo(
      1 * _0xc10334,
      163 * _0xc10334,
      4 * _0xc10334,
      158 * _0xc10334,
      28 * _0xc10334,
      161 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      207.5 * _0xc10334,
      161 * _0xc10334,
      207.5 * _0xc10334,
      161 * _0xc10334,
      387 * _0xc10334,
      161 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      401 * _0xc10334,
      159 * _0xc10334,
      400 * _0xc10334,
      164 * _0xc10334,
      400 * _0xc10334,
      177 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      364.5 * _0xc10334,
      184 * _0xc10334,
      364.5 * _0xc10334,
      184 * _0xc10334,
      329 * _0xc10334,
      191 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      364.5 * _0xc10334,
      192.5 * _0xc10334,
      364.5 * _0xc10334,
      192.5 * _0xc10334,
      400 * _0xc10334,
      194 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      403 * _0xc10334,
      209 * _0xc10334,
      401 * _0xc10334,
      214 * _0xc10334,
      385 * _0xc10334,
      213 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      201.5 * _0xc10334,
      213 * _0xc10334,
      201.5 * _0xc10334,
      213 * _0xc10334,
      18 * _0xc10334,
      213 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      3 * _0xc10334,
      213 * _0xc10334,
      2 * _0xc10334,
      213 * _0xc10334,
      4 * _0xc10334,
      198 * _0xc10334
    );
    _0x76067d.bezierCurveTo(
      12.5 * _0xc10334,
      193 * _0xc10334,
      12.5 * _0xc10334,
      193 * _0xc10334,
      21 * _0xc10334,
      188 * _0xc10334
    );
    _0x76067d.closePath();
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    circle(
      _0x76067d,
      41 * _0xc10334,
      30 * _0xc10334,
      14.7648230602334 * _0xc10334
    );
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    circle(
      _0x76067d,
      369 * _0xc10334,
      30 * _0xc10334,
      15.556349186104045 * _0xc10334
    );
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    circle(
      _0x76067d,
      364 * _0xc10334,
      190 * _0xc10334,
      15.620499351813308 * _0xc10334
    );
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    circle(
      _0x76067d,
      41 * _0xc10334,
      186 * _0xc10334,
      15.556349186104045 * _0xc10334
    );
    fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
  } else {
    if (_0x1d5927 == 2) {
      _0x76067d.beginPath();
      _0x76067d.lineCap = "round";
      _0x76067d.lineJoin = "round";
      _0x76067d.moveTo(9 * _0xc10334, 5 * _0xc10334);
      _0x76067d.bezierCurveTo(
        381 * _0xc10334,
        2 * _0xc10334,
        197 * _0xc10334,
        4.5 * _0xc10334,
        385 * _0xc10334,
        4 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        397 * _0xc10334,
        4 * _0xc10334,
        401 * _0xc10334,
        4 * _0xc10334,
        399 * _0xc10334,
        23 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        367 * _0xc10334,
        27 * _0xc10334,
        367 * _0xc10334,
        27 * _0xc10334,
        335 * _0xc10334,
        31 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        366.5 * _0xc10334,
        33.5 * _0xc10334,
        366.5 * _0xc10334,
        33.5 * _0xc10334,
        398 * _0xc10334,
        36 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        398 * _0xc10334,
        41.5 * _0xc10334,
        398 * _0xc10334,
        41.5 * _0xc10334,
        398 * _0xc10334,
        47 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        398 * _0xc10334,
        56 * _0xc10334,
        399 * _0xc10334,
        56 * _0xc10334,
        386 * _0xc10334,
        56 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        200.5 * _0xc10334,
        56.5 * _0xc10334,
        200.5 * _0xc10334,
        56.5 * _0xc10334,
        15 * _0xc10334,
        57 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        2 * _0xc10334,
        55 * _0xc10334,
        4 * _0xc10334,
        52 * _0xc10334,
        4 * _0xc10334,
        43 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        4 * _0xc10334,
        30.5 * _0xc10334,
        4 * _0xc10334,
        30.5 * _0xc10334,
        4 * _0xc10334,
        18 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        16 * _0xc10334,
        18.5 * _0xc10334,
        16 * _0xc10334,
        18.5 * _0xc10334,
        28 * _0xc10334,
        19 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        18.5 * _0xc10334,
        12 * _0xc10334,
        18.5 * _0xc10334,
        12 * _0xc10334,
        9 * _0xc10334,
        5 * _0xc10334
      );
      _0x76067d.closePath();
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      _0x76067d.beginPath();
      _0x76067d.lineCap = "round";
      _0x76067d.lineJoin = "round";
      _0x76067d.moveTo(5 * _0xc10334, 70 * _0xc10334);
      _0x76067d.bezierCurveTo(
        5 * _0xc10334,
        58 * _0xc10334,
        5 * _0xc10334,
        55 * _0xc10334,
        17 * _0xc10334,
        57 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        203 * _0xc10334,
        57 * _0xc10334,
        203 * _0xc10334,
        57 * _0xc10334,
        389 * _0xc10334,
        57 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        400 * _0xc10334,
        57 * _0xc10334,
        400 * _0xc10334,
        59 * _0xc10334,
        400 * _0xc10334,
        69 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        400.5 * _0xc10334,
        83.5 * _0xc10334,
        400.5 * _0xc10334,
        83.5 * _0xc10334,
        401 * _0xc10334,
        98 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        402 * _0xc10334,
        108 * _0xc10334,
        401 * _0xc10334,
        108 * _0xc10334,
        388 * _0xc10334,
        108 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        201.5 * _0xc10334,
        108 * _0xc10334,
        201.5 * _0xc10334,
        108 * _0xc10334,
        15 * _0xc10334,
        108 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        1 * _0xc10334,
        106 * _0xc10334,
        5 * _0xc10334,
        106 * _0xc10334,
        5 * _0xc10334,
        87 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        33 * _0xc10334,
        84.5 * _0xc10334,
        33 * _0xc10334,
        84.5 * _0xc10334,
        61 * _0xc10334,
        82 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        33.5 * _0xc10334,
        76.5 * _0xc10334,
        33.5 * _0xc10334,
        76.5 * _0xc10334,
        6 * _0xc10334,
        71 * _0xc10334
      );
      _0x76067d.closePath();
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      _0x76067d.beginPath();
      _0x76067d.lineCap = "round";
      _0x76067d.lineJoin = "round";
      _0x76067d.moveTo(19 * _0xc10334, 158 * _0xc10334);
      _0x76067d.bezierCurveTo(
        2 * _0xc10334,
        159 * _0xc10334,
        4 * _0xc10334,
        156 * _0xc10334,
        5 * _0xc10334,
        118 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        4 * _0xc10334,
        110 * _0xc10334,
        6 * _0xc10334,
        107 * _0xc10334,
        26 * _0xc10334,
        109 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        206.5 * _0xc10334,
        109 * _0xc10334,
        206.5 * _0xc10334,
        109 * _0xc10334,
        387 * _0xc10334,
        109 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        400 * _0xc10334,
        108 * _0xc10334,
        400 * _0xc10334,
        108 * _0xc10334,
        398 * _0xc10334,
        127 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        384.5 * _0xc10334,
        130 * _0xc10334,
        384.5 * _0xc10334,
        130 * _0xc10334,
        371 * _0xc10334,
        133 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        385.5 * _0xc10334,
        138 * _0xc10334,
        385.5 * _0xc10334,
        138 * _0xc10334,
        400 * _0xc10334,
        143 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        402 * _0xc10334,
        156 * _0xc10334,
        402 * _0xc10334,
        162 * _0xc10334,
        385 * _0xc10334,
        160 * _0xc10334
      );
      _0x76067d.closePath();
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      _0x76067d.beginPath();
      _0x76067d.lineCap = "round";
      _0x76067d.lineJoin = "round";
      _0x76067d.moveTo(4 * _0xc10334, 183 * _0xc10334);
      _0x76067d.bezierCurveTo(
        1 * _0xc10334,
        163 * _0xc10334,
        4 * _0xc10334,
        158 * _0xc10334,
        28 * _0xc10334,
        161 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        207.5 * _0xc10334,
        161 * _0xc10334,
        207.5 * _0xc10334,
        161 * _0xc10334,
        387 * _0xc10334,
        161 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        401 * _0xc10334,
        159 * _0xc10334,
        400 * _0xc10334,
        164 * _0xc10334,
        400 * _0xc10334,
        177 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        364.5 * _0xc10334,
        184 * _0xc10334,
        364.5 * _0xc10334,
        184 * _0xc10334,
        329 * _0xc10334,
        191 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        364.5 * _0xc10334,
        192.5 * _0xc10334,
        364.5 * _0xc10334,
        192.5 * _0xc10334,
        400 * _0xc10334,
        194 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        403 * _0xc10334,
        209 * _0xc10334,
        401 * _0xc10334,
        214 * _0xc10334,
        385 * _0xc10334,
        213 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        201.5 * _0xc10334,
        213 * _0xc10334,
        201.5 * _0xc10334,
        213 * _0xc10334,
        18 * _0xc10334,
        213 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        3 * _0xc10334,
        213 * _0xc10334,
        2 * _0xc10334,
        213 * _0xc10334,
        4 * _0xc10334,
        198 * _0xc10334
      );
      _0x76067d.bezierCurveTo(
        12.5 * _0xc10334,
        193 * _0xc10334,
        12.5 * _0xc10334,
        193 * _0xc10334,
        21 * _0xc10334,
        188 * _0xc10334
      );
      _0x76067d.closePath();
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      circle(
        _0x76067d,
        41 * _0xc10334,
        30 * _0xc10334,
        14.7648230602334 * _0xc10334
      );
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      circle(
        _0x76067d,
        369 * _0xc10334,
        30 * _0xc10334,
        15.556349186104045 * _0xc10334
      );
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      circle(
        _0x76067d,
        364 * _0xc10334,
        190 * _0xc10334,
        15.620499351813308 * _0xc10334
      );
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
      circle(
        _0x76067d,
        41 * _0xc10334,
        186 * _0xc10334,
        15.556349186104045 * _0xc10334
      );
      fill_path(_0x76067d, _0xe0526[3], _0xe0526[3], 32 * _0xc10334);
    }
  }
  _0x76067d.beginPath();
  _0x76067d.lineCap = "round";
  _0x76067d.lineJoin = "round";
  _0x76067d.moveTo(9 * _0xc10334, 5 * _0xc10334);
  _0x76067d.bezierCurveTo(
    381 * _0xc10334,
    2 * _0xc10334,
    197 * _0xc10334,
    4.5 * _0xc10334,
    385 * _0xc10334,
    4 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    397 * _0xc10334,
    4 * _0xc10334,
    401 * _0xc10334,
    4 * _0xc10334,
    399 * _0xc10334,
    23 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    367 * _0xc10334,
    27 * _0xc10334,
    367 * _0xc10334,
    27 * _0xc10334,
    335 * _0xc10334,
    31 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    366.5 * _0xc10334,
    33.5 * _0xc10334,
    366.5 * _0xc10334,
    33.5 * _0xc10334,
    398 * _0xc10334,
    36 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    398 * _0xc10334,
    41.5 * _0xc10334,
    398 * _0xc10334,
    41.5 * _0xc10334,
    398 * _0xc10334,
    47 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    398 * _0xc10334,
    56 * _0xc10334,
    399 * _0xc10334,
    56 * _0xc10334,
    386 * _0xc10334,
    56 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    200.5 * _0xc10334,
    56.5 * _0xc10334,
    200.5 * _0xc10334,
    56.5 * _0xc10334,
    15 * _0xc10334,
    57 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    2 * _0xc10334,
    55 * _0xc10334,
    4 * _0xc10334,
    52 * _0xc10334,
    4 * _0xc10334,
    43 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    4 * _0xc10334,
    30.5 * _0xc10334,
    4 * _0xc10334,
    30.5 * _0xc10334,
    4 * _0xc10334,
    18 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    16 * _0xc10334,
    18.5 * _0xc10334,
    16 * _0xc10334,
    18.5 * _0xc10334,
    28 * _0xc10334,
    19 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    18.5 * _0xc10334,
    12 * _0xc10334,
    18.5 * _0xc10334,
    12 * _0xc10334,
    9 * _0xc10334,
    5 * _0xc10334
  );
  _0x76067d.closePath();
  fill_path(_0x76067d, _0xe0526[1], _0xe0526[0], 12 * _0xc10334);
  _0x76067d.beginPath();
  _0x76067d.lineCap = "round";
  _0x76067d.lineJoin = "round";
  _0x76067d.moveTo(5 * _0xc10334, 70 * _0xc10334);
  _0x76067d.bezierCurveTo(
    5 * _0xc10334,
    58 * _0xc10334,
    5 * _0xc10334,
    55 * _0xc10334,
    17 * _0xc10334,
    57 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    203 * _0xc10334,
    57 * _0xc10334,
    203 * _0xc10334,
    57 * _0xc10334,
    389 * _0xc10334,
    57 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    400 * _0xc10334,
    57 * _0xc10334,
    400 * _0xc10334,
    59 * _0xc10334,
    400 * _0xc10334,
    69 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    400.5 * _0xc10334,
    83.5 * _0xc10334,
    400.5 * _0xc10334,
    83.5 * _0xc10334,
    401 * _0xc10334,
    98 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    402 * _0xc10334,
    108 * _0xc10334,
    401 * _0xc10334,
    108 * _0xc10334,
    388 * _0xc10334,
    108 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    201.5 * _0xc10334,
    108 * _0xc10334,
    201.5 * _0xc10334,
    108 * _0xc10334,
    15 * _0xc10334,
    108 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    1 * _0xc10334,
    106 * _0xc10334,
    5 * _0xc10334,
    106 * _0xc10334,
    5 * _0xc10334,
    87 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    33 * _0xc10334,
    84.5 * _0xc10334,
    33 * _0xc10334,
    84.5 * _0xc10334,
    61 * _0xc10334,
    82 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    33.5 * _0xc10334,
    76.5 * _0xc10334,
    33.5 * _0xc10334,
    76.5 * _0xc10334,
    6 * _0xc10334,
    71 * _0xc10334
  );
  _0x76067d.closePath();
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  _0x76067d.beginPath();
  _0x76067d.lineCap = "round";
  _0x76067d.lineJoin = "round";
  _0x76067d.moveTo(19 * _0xc10334, 158 * _0xc10334);
  _0x76067d.bezierCurveTo(
    2 * _0xc10334,
    159 * _0xc10334,
    4 * _0xc10334,
    156 * _0xc10334,
    5 * _0xc10334,
    118 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    4 * _0xc10334,
    110 * _0xc10334,
    6 * _0xc10334,
    107 * _0xc10334,
    26 * _0xc10334,
    109 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    206.5 * _0xc10334,
    109 * _0xc10334,
    206.5 * _0xc10334,
    109 * _0xc10334,
    387 * _0xc10334,
    109 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    400 * _0xc10334,
    108 * _0xc10334,
    400 * _0xc10334,
    108 * _0xc10334,
    398 * _0xc10334,
    127 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    384.5 * _0xc10334,
    130 * _0xc10334,
    384.5 * _0xc10334,
    130 * _0xc10334,
    371 * _0xc10334,
    133 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    385.5 * _0xc10334,
    138 * _0xc10334,
    385.5 * _0xc10334,
    138 * _0xc10334,
    400 * _0xc10334,
    143 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    402 * _0xc10334,
    156 * _0xc10334,
    402 * _0xc10334,
    162 * _0xc10334,
    385 * _0xc10334,
    160 * _0xc10334
  );
  _0x76067d.closePath();
  fill_path(_0x76067d, _0xe0526[1], _0xe0526[0], 12 * _0xc10334);
  _0x76067d.beginPath();
  _0x76067d.lineCap = "round";
  _0x76067d.lineJoin = "round";
  _0x76067d.moveTo(4 * _0xc10334, 183 * _0xc10334);
  _0x76067d.bezierCurveTo(
    1 * _0xc10334,
    163 * _0xc10334,
    4 * _0xc10334,
    158 * _0xc10334,
    28 * _0xc10334,
    161 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    207.5 * _0xc10334,
    161 * _0xc10334,
    207.5 * _0xc10334,
    161 * _0xc10334,
    387 * _0xc10334,
    161 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    401 * _0xc10334,
    159 * _0xc10334,
    400 * _0xc10334,
    164 * _0xc10334,
    400 * _0xc10334,
    177 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    364.5 * _0xc10334,
    184 * _0xc10334,
    364.5 * _0xc10334,
    184 * _0xc10334,
    329 * _0xc10334,
    191 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    364.5 * _0xc10334,
    192.5 * _0xc10334,
    364.5 * _0xc10334,
    192.5 * _0xc10334,
    400 * _0xc10334,
    194 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    403 * _0xc10334,
    209 * _0xc10334,
    401 * _0xc10334,
    214 * _0xc10334,
    385 * _0xc10334,
    213 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    201.5 * _0xc10334,
    213 * _0xc10334,
    201.5 * _0xc10334,
    213 * _0xc10334,
    18 * _0xc10334,
    213 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    3 * _0xc10334,
    213 * _0xc10334,
    2 * _0xc10334,
    213 * _0xc10334,
    4 * _0xc10334,
    198 * _0xc10334
  );
  _0x76067d.bezierCurveTo(
    12.5 * _0xc10334,
    193 * _0xc10334,
    12.5 * _0xc10334,
    193 * _0xc10334,
    21 * _0xc10334,
    188 * _0xc10334
  );
  _0x76067d.closePath();
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  circle(
    _0x76067d,
    41 * _0xc10334,
    30 * _0xc10334,
    14.7648230602334 * _0xc10334
  );
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  circle(
    _0x76067d,
    369 * _0xc10334,
    30 * _0xc10334,
    15.556349186104045 * _0xc10334
  );
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  circle(
    _0x76067d,
    364 * _0xc10334,
    190 * _0xc10334,
    15.620499351813308 * _0xc10334
  );
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  circle(
    _0x76067d,
    41 * _0xc10334,
    186 * _0xc10334,
    15.556349186104045 * _0xc10334
  );
  fill_path(_0x76067d, _0xe0526[2], _0xe0526[0], 12 * _0xc10334);
  return _0x284b14;
}
function create_symbols(_0x200246, _0x3907ba, _0x125d03, _0x2836eb) {
  var _0xa4553f = document.createElement("canvas");
  var _0x1b6f07 = _0xa4553f.getContext("2d");
  _0xa4553f.width = 450 * _0x200246;
  _0xa4553f.height = 260 * _0x200246;
  var _0x31609a = create_sign(1 * _0x200246, true, _0x125d03);
  _0x1b6f07.drawImage(_0x31609a, 0 * _0x200246, 0 * _0x200246);
  if (_0x2836eb == 1) {
    _0x1b6f07.translate(100 * _0x200246, 0 * _0x200246);
    circle(_0x1b6f07, 113 * _0x200246, 120 * _0x200246, 66 * _0x200246);
    fill_path(_0x1b6f07, undefined, _0x125d03[4], 13 * _0x200246);
    var _0x31609a = create_sword(0.65 * _0x200246, true, [
      "#0d1b1c",
      "#4d2d14",
      "#432516",
      "#939393",
      "#5f6061",
    ]);
    _0x1b6f07.rotate(0.7);
    _0x1b6f07.drawImage(_0x31609a, 133 * _0x200246, -64 * _0x200246);
    _0x1b6f07.rotate(-0.7);
    _0x1b6f07.beginPath();
    _0x1b6f07.lineCap = "round";
    _0x1b6f07.lineJoin = "round";
    _0x1b6f07.moveTo(70 * _0x200246, 70 * _0x200246);
    _0x1b6f07.bezierCurveTo(
      113 * _0x200246,
      120.5 * _0x200246,
      113 * _0x200246,
      120.5 * _0x200246,
      156 * _0x200246,
      171 * _0x200246
    );
    _0x1b6f07.closePath();
    fill_path(_0x1b6f07, undefined, _0x125d03[4], 13 * _0x200246);
  } else {
    if (_0x2836eb == 2) {
      _0x1b6f07.translate(100 * _0x200246, 0 * _0x200246);
      circle(_0x1b6f07, 113 * _0x200246, 120 * _0x200246, 66 * _0x200246);
      fill_path(_0x1b6f07, undefined, _0x125d03[4], 13 * _0x200246);
      _0x1b6f07.translate(30 * _0x200246, 40 * _0x200246);
      _0x1b6f07.save();
      _0x1b6f07.translate(83.5 * _0x200246, 66.5 * _0x200246);
      round_rect(
        _0x1b6f07,
        -40.5 * _0x200246,
        -29.5 * _0x200246,
        81 * _0x200246,
        59 * _0x200246,
        15 * _0x200246
      );
      _0x1b6f07.restore();
      fill_path(_0x1b6f07, "#dff2f7", "#187484", 7 * _0x200246);
      circle(_0x1b6f07, 22 * _0x200246, 82 * _0x200246, 12 * _0x200246);
      fill_path(_0x1b6f07, "#dff2f7", "#187484", 7 * _0x200246);
      circle(_0x1b6f07, 145 * _0x200246, 82 * _0x200246, 12 * _0x200246);
      fill_path(_0x1b6f07, "#dff2f7", "#187484", 7 * _0x200246);
      var _0x31609a = create_plant(0.5 * _0x200246, true, [
        "#80500b",
        "#7c4908",
      ]);
      _0x1b6f07.drawImage(_0x31609a, 10 * _0x200246, 85 * _0x200246);
      var _0x31609a = create_plant(0.5 * _0x200246, true, [
        "#80500b",
        "#7c4908",
      ]);
      _0x1b6f07.drawImage(_0x31609a, 50 * _0x200246, 85 * _0x200246);
      var _0x31609a = create_plant(0.5 * _0x200246, true, [
        "#80500b",
        "#7c4908",
      ]);
      _0x1b6f07.drawImage(_0x31609a, 90 * _0x200246, 85 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 90 * _0x200246, 105 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 90 * _0x200246, 105 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 30 * _0x200246, 125 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 50 * _0x200246, 115 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 30 * _0x200246, 100 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 80 * _0x200246, 120 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 110 * _0x200246, 125 * _0x200246);
      var _0x31609a = create_fruit(1 * _0x200246, true, ["#3d2a6e", "#8255b5"]);
      _0x1b6f07.drawImage(_0x31609a, 120 * _0x200246, 105 * _0x200246);
    } else {
      if (_0x2836eb == 3) {
        _0x1b6f07.translate(100 * _0x200246, 0 * _0x200246);
        circle(_0x1b6f07, 113 * _0x200246, 120 * _0x200246, 66 * _0x200246);
        fill_path(_0x1b6f07, undefined, _0x125d03[4], 13 * _0x200246);
        _0x1b6f07.translate(40 * _0x200246, 50 * _0x200246);
        _0x1b6f07.save();
        _0x1b6f07.translate(71 * _0x200246, 69 * _0x200246);
        round_rect(
          _0x1b6f07,
          -30 * _0x200246,
          -42 * _0x200246,
          60 * _0x200246,
          84 * _0x200246,
          10 * _0x200246
        );
        _0x1b6f07.restore();
        fill_path(_0x1b6f07, undefined, _0x125d03[5], 4 * _0x200246);
        _0x1b6f07.beginPath();
        _0x1b6f07.lineCap = "round";
        _0x1b6f07.lineJoin = "round";
        _0x1b6f07.moveTo(42 * _0x200246, 28 * _0x200246);
        _0x1b6f07.bezierCurveTo(
          60 * _0x200246,
          31 * _0x200246,
          60 * _0x200246,
          31 * _0x200246,
          78 * _0x200246,
          34 * _0x200246
        );
        _0x1b6f07.bezierCurveTo(
          82 * _0x200246,
          34 * _0x200246,
          84 * _0x200246,
          37 * _0x200246,
          83 * _0x200246,
          45 * _0x200246
        );
        _0x1b6f07.bezierCurveTo(
          83 * _0x200246,
          80 * _0x200246,
          83 * _0x200246,
          80 * _0x200246,
          83 * _0x200246,
          115 * _0x200246
        );
        _0x1b6f07.bezierCurveTo(
          83 * _0x200246,
          120 * _0x200246,
          80 * _0x200246,
          122 * _0x200246,
          73 * _0x200246,
          120 * _0x200246
        );
        _0x1b6f07.bezierCurveTo(
          42 * _0x200246,
          111 * _0x200246,
          43 * _0x200246,
          109 * _0x200246,
          41 * _0x200246,
          102 * _0x200246
        );
        _0x1b6f07.bezierCurveTo(
          41 * _0x200246,
          71 * _0x200246,
          41 * _0x200246,
          71 * _0x200246,
          41 * _0x200246,
          40 * _0x200246
        );
        _0x1b6f07.closePath();
        fill_path(_0x1b6f07, _0x125d03[5], _0x125d03[5], 4 * _0x200246);
        _0x1b6f07.translate(-40 * _0x200246, -50 * _0x200246);
        _0x1b6f07.beginPath();
        _0x1b6f07.lineCap = "round";
        _0x1b6f07.lineJoin = "round";
        _0x1b6f07.moveTo(70 * _0x200246, 70 * _0x200246);
        _0x1b6f07.bezierCurveTo(
          113 * _0x200246,
          120.5 * _0x200246,
          113 * _0x200246,
          120.5 * _0x200246,
          156 * _0x200246,
          171 * _0x200246
        );
        _0x1b6f07.closePath();
        fill_path(_0x1b6f07, undefined, _0x125d03[4], 13 * _0x200246);
      } else {
        if (_0x2836eb == 4) {
          _0x1b6f07.scale(1, 1);
          _0x1b6f07.translate(70 * _0x200246, 50 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(23 * _0x200246, 6 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            25.5 * _0x200246,
            56 * _0x200246,
            25.5 * _0x200246,
            56 * _0x200246,
            28 * _0x200246,
            106 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(59 * _0x200246, 10 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            61 * _0x200246,
            51.5 * _0x200246,
            61 * _0x200246,
            51.5 * _0x200246,
            63 * _0x200246,
            93 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(7 * _0x200246, 55 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            33.5 * _0x200246,
            55 * _0x200246,
            33.5 * _0x200246,
            55 * _0x200246,
            60 * _0x200246,
            55 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.translate(10 * _0x200246, 0 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(123 * _0x200246, 16 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            103 * _0x200246,
            16.5 * _0x200246,
            103 * _0x200246,
            16.5 * _0x200246,
            83 * _0x200246,
            17 * _0x200246
          );
          _0x1b6f07.bezierCurveTo(
            83.5 * _0x200246,
            61 * _0x200246,
            83.5 * _0x200246,
            61 * _0x200246,
            84 * _0x200246,
            105 * _0x200246
          );
          _0x1b6f07.bezierCurveTo(
            106 * _0x200246,
            105 * _0x200246,
            106 * _0x200246,
            105 * _0x200246,
            128 * _0x200246,
            105 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(72 * _0x200246, 63 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            88.5 * _0x200246,
            62.5 * _0x200246,
            88.5 * _0x200246,
            62.5 * _0x200246,
            105 * _0x200246,
            62 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.translate(10 * _0x200246, 10 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(141 * _0x200246, 8 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            143 * _0x200246,
            50 * _0x200246,
            143 * _0x200246,
            50 * _0x200246,
            145 * _0x200246,
            92 * _0x200246
          );
          _0x1b6f07.bezierCurveTo(
            169 * _0x200246,
            88.5 * _0x200246,
            169 * _0x200246,
            88.5 * _0x200246,
            193 * _0x200246,
            85 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
          _0x1b6f07.translate(10 * _0x200246, -10 * _0x200246);
          _0x1b6f07.beginPath();
          _0x1b6f07.lineCap = "round";
          _0x1b6f07.lineJoin = "round";
          _0x1b6f07.moveTo(205 * _0x200246, 124 * _0x200246);
          _0x1b6f07.bezierCurveTo(
            205 * _0x200246,
            69 * _0x200246,
            205 * _0x200246,
            69 * _0x200246,
            205 * _0x200246,
            14 * _0x200246
          );
          _0x1b6f07.bezierCurveTo(
            239 * _0x200246,
            15 * _0x200246,
            250 * _0x200246,
            37 * _0x200246,
            249 * _0x200246,
            49 * _0x200246
          );
          _0x1b6f07.bezierCurveTo(
            251 * _0x200246,
            65 * _0x200246,
            242 * _0x200246,
            76 * _0x200246,
            206 * _0x200246,
            75 * _0x200246
          );
          fill_path(_0x1b6f07, undefined, _0x125d03[5], 14 * _0x200246);
        }
      }
    }
  }
  return _0xa4553f;
}
function create_dragon_helmet(_0x5cc4c9, _0x2c8134, _0x1e955b) {
  var _0x4d50a8 = document.createElement("canvas");
  var _0x1b2810 = _0x4d50a8.getContext("2d");
  _0x4d50a8.width = 345 * _0x5cc4c9;
  _0x4d50a8.height = 250 * _0x5cc4c9;
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(105 * _0x5cc4c9, 58 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    100.5 * _0x5cc4c9,
    43 * _0x5cc4c9,
    100.5 * _0x5cc4c9,
    43 * _0x5cc4c9,
    96 * _0x5cc4c9,
    28 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    119.5 * _0x5cc4c9,
    33.5 * _0x5cc4c9,
    119.5 * _0x5cc4c9,
    33.5 * _0x5cc4c9,
    143 * _0x5cc4c9,
    39 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    170 * _0x5cc4c9,
    37 * _0x5cc4c9,
    177 * _0x5cc4c9,
    37 * _0x5cc4c9,
    188 * _0x5cc4c9,
    40 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    213 * _0x5cc4c9,
    33.5 * _0x5cc4c9,
    213 * _0x5cc4c9,
    33.5 * _0x5cc4c9,
    238 * _0x5cc4c9,
    27 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    231 * _0x5cc4c9,
    52 * _0x5cc4c9,
    234 * _0x5cc4c9,
    42.5 * _0x5cc4c9,
    230 * _0x5cc4c9,
    58 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[1], _0x1e955b[2], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(108 * _0x5cc4c9, 51 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    91 * _0x5cc4c9,
    55 * _0x5cc4c9,
    85 * _0x5cc4c9,
    44 * _0x5cc4c9,
    86 * _0x5cc4c9,
    29 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    62 * _0x5cc4c9,
    50 * _0x5cc4c9,
    78 * _0x5cc4c9,
    69 * _0x5cc4c9,
    92 * _0x5cc4c9,
    75 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[3], _0x1e955b[4], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(249 * _0x5cc4c9, 27 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    273 * _0x5cc4c9,
    49 * _0x5cc4c9,
    262 * _0x5cc4c9,
    68 * _0x5cc4c9,
    246 * _0x5cc4c9,
    77 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    231 * _0x5cc4c9,
    59 * _0x5cc4c9,
    236 * _0x5cc4c9,
    66.5 * _0x5cc4c9,
    226 * _0x5cc4c9,
    56 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    243 * _0x5cc4c9,
    53 * _0x5cc4c9,
    252 * _0x5cc4c9,
    43 * _0x5cc4c9,
    249 * _0x5cc4c9,
    28 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[3], _0x1e955b[4], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(87 * _0x5cc4c9, 78 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    87 * _0x5cc4c9,
    59 * _0x5cc4c9,
    98 * _0x5cc4c9,
    46 * _0x5cc4c9,
    127 * _0x5cc4c9,
    48 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    176 * _0x5cc4c9,
    48.5 * _0x5cc4c9,
    176 * _0x5cc4c9,
    48.5 * _0x5cc4c9,
    225 * _0x5cc4c9,
    49 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    243 * _0x5cc4c9,
    49 * _0x5cc4c9,
    253 * _0x5cc4c9,
    59 * _0x5cc4c9,
    253 * _0x5cc4c9,
    76 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    211 * _0x5cc4c9,
    85.5 * _0x5cc4c9,
    211 * _0x5cc4c9,
    85.5 * _0x5cc4c9,
    169 * _0x5cc4c9,
    95 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[5], _0x1e955b[6], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(56 * _0x5cc4c9, 105 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    56 * _0x5cc4c9,
    92 * _0x5cc4c9,
    59 * _0x5cc4c9,
    86 * _0x5cc4c9,
    65 * _0x5cc4c9,
    73 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    62.5 * _0x5cc4c9,
    61.5 * _0x5cc4c9,
    62.5 * _0x5cc4c9,
    61.5 * _0x5cc4c9,
    60 * _0x5cc4c9,
    50 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    99.5 * _0x5cc4c9,
    64.5 * _0x5cc4c9,
    99.5 * _0x5cc4c9,
    64.5 * _0x5cc4c9,
    139 * _0x5cc4c9,
    79 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    164 * _0x5cc4c9,
    77 * _0x5cc4c9,
    177 * _0x5cc4c9,
    76 * _0x5cc4c9,
    203 * _0x5cc4c9,
    78 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    242 * _0x5cc4c9,
    63.5 * _0x5cc4c9,
    242 * _0x5cc4c9,
    63.5 * _0x5cc4c9,
    281 * _0x5cc4c9,
    49 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    279 * _0x5cc4c9,
    60.5 * _0x5cc4c9,
    279 * _0x5cc4c9,
    60.5 * _0x5cc4c9,
    277 * _0x5cc4c9,
    72 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    286 * _0x5cc4c9,
    88 * _0x5cc4c9,
    286 * _0x5cc4c9,
    96 * _0x5cc4c9,
    287 * _0x5cc4c9,
    104 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    228.5 * _0x5cc4c9,
    127 * _0x5cc4c9,
    228.5 * _0x5cc4c9,
    127 * _0x5cc4c9,
    170 * _0x5cc4c9,
    150 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[1], _0x1e955b[2], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(48 * _0x5cc4c9, 130 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    61 * _0x5cc4c9,
    155 * _0x5cc4c9,
    63 * _0x5cc4c9,
    165 * _0x5cc4c9,
    56 * _0x5cc4c9,
    171 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    48 * _0x5cc4c9,
    177 * _0x5cc4c9,
    40 * _0x5cc4c9,
    171 * _0x5cc4c9,
    38 * _0x5cc4c9,
    178 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    33 * _0x5cc4c9,
    180 * _0x5cc4c9,
    37 * _0x5cc4c9,
    188 * _0x5cc4c9,
    47 * _0x5cc4c9,
    208 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    52 * _0x5cc4c9,
    221 * _0x5cc4c9,
    55 * _0x5cc4c9,
    222 * _0x5cc4c9,
    75 * _0x5cc4c9,
    229 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    91 * _0x5cc4c9,
    213 * _0x5cc4c9,
    98 * _0x5cc4c9,
    212 * _0x5cc4c9,
    112 * _0x5cc4c9,
    219 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    167 * _0x5cc4c9,
    225 * _0x5cc4c9,
    187 * _0x5cc4c9,
    224 * _0x5cc4c9,
    222 * _0x5cc4c9,
    220 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    244 * _0x5cc4c9,
    214 * _0x5cc4c9,
    247 * _0x5cc4c9,
    213 * _0x5cc4c9,
    263 * _0x5cc4c9,
    229 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    295 * _0x5cc4c9,
    220 * _0x5cc4c9,
    291 * _0x5cc4c9,
    215 * _0x5cc4c9,
    301 * _0x5cc4c9,
    194 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    308 * _0x5cc4c9,
    178 * _0x5cc4c9,
    309 * _0x5cc4c9,
    176 * _0x5cc4c9,
    302 * _0x5cc4c9,
    173 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    290 * _0x5cc4c9,
    177 * _0x5cc4c9,
    289 * _0x5cc4c9,
    177 * _0x5cc4c9,
    283 * _0x5cc4c9,
    169 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    279 * _0x5cc4c9,
    163 * _0x5cc4c9,
    279 * _0x5cc4c9,
    161 * _0x5cc4c9,
    290 * _0x5cc4c9,
    130 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    270 * _0x5cc4c9,
    127 * _0x5cc4c9,
    270 * _0x5cc4c9,
    127 * _0x5cc4c9,
    250 * _0x5cc4c9,
    124 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    209 * _0x5cc4c9,
    137.5 * _0x5cc4c9,
    209 * _0x5cc4c9,
    137.5 * _0x5cc4c9,
    168 * _0x5cc4c9,
    151 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    121 * _0x5cc4c9,
    135 * _0x5cc4c9,
    121 * _0x5cc4c9,
    135 * _0x5cc4c9,
    74 * _0x5cc4c9,
    119 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[1], _0x1e955b[2], 8 * _0x5cc4c9);
  _0x1b2810.globalCompositeOperation = "destination-out";
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(133 * _0x5cc4c9, 158 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    152 * _0x5cc4c9,
    193 * _0x5cc4c9,
    158 * _0x5cc4c9,
    205 * _0x5cc4c9,
    140 * _0x5cc4c9,
    203 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    99 * _0x5cc4c9,
    195 * _0x5cc4c9,
    96 * _0x5cc4c9,
    189 * _0x5cc4c9,
    86 * _0x5cc4c9,
    173 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    80 * _0x5cc4c9,
    159 * _0x5cc4c9,
    88 * _0x5cc4c9,
    145 * _0x5cc4c9,
    104 * _0x5cc4c9,
    141 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[7], _0x1e955b[8], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(215 * _0x5cc4c9, 146 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    204 * _0x5cc4c9,
    167 * _0x5cc4c9,
    204 * _0x5cc4c9,
    167 * _0x5cc4c9,
    193 * _0x5cc4c9,
    188 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    187 * _0x5cc4c9,
    201 * _0x5cc4c9,
    191 * _0x5cc4c9,
    209 * _0x5cc4c9,
    213 * _0x5cc4c9,
    201 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    247 * _0x5cc4c9,
    192 * _0x5cc4c9,
    253 * _0x5cc4c9,
    181 * _0x5cc4c9,
    257 * _0x5cc4c9,
    169 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    260 * _0x5cc4c9,
    157 * _0x5cc4c9,
    254 * _0x5cc4c9,
    149 * _0x5cc4c9,
    243 * _0x5cc4c9,
    141 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[7], _0x1e955b[8], 8 * _0x5cc4c9);
  _0x1b2810.globalCompositeOperation = "source-over";
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(133 * _0x5cc4c9, 158 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    152 * _0x5cc4c9,
    193 * _0x5cc4c9,
    158 * _0x5cc4c9,
    205 * _0x5cc4c9,
    140 * _0x5cc4c9,
    203 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    99 * _0x5cc4c9,
    195 * _0x5cc4c9,
    96 * _0x5cc4c9,
    189 * _0x5cc4c9,
    86 * _0x5cc4c9,
    173 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    80 * _0x5cc4c9,
    159 * _0x5cc4c9,
    88 * _0x5cc4c9,
    145 * _0x5cc4c9,
    104 * _0x5cc4c9,
    141 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, undefined, _0x1e955b[8], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(215 * _0x5cc4c9, 146 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    204 * _0x5cc4c9,
    167 * _0x5cc4c9,
    204 * _0x5cc4c9,
    167 * _0x5cc4c9,
    193 * _0x5cc4c9,
    188 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    187 * _0x5cc4c9,
    201 * _0x5cc4c9,
    191 * _0x5cc4c9,
    209 * _0x5cc4c9,
    213 * _0x5cc4c9,
    201 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    247 * _0x5cc4c9,
    192 * _0x5cc4c9,
    253 * _0x5cc4c9,
    181 * _0x5cc4c9,
    257 * _0x5cc4c9,
    169 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    260 * _0x5cc4c9,
    157 * _0x5cc4c9,
    254 * _0x5cc4c9,
    149 * _0x5cc4c9,
    243 * _0x5cc4c9,
    141 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, undefined, _0x1e955b[8], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(39 * _0x5cc4c9, 66 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    57 * _0x5cc4c9,
    107 * _0x5cc4c9,
    63 * _0x5cc4c9,
    96 * _0x5cc4c9,
    120 * _0x5cc4c9,
    106 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    154 * _0x5cc4c9,
    112 * _0x5cc4c9,
    163 * _0x5cc4c9,
    116 * _0x5cc4c9,
    174 * _0x5cc4c9,
    135 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    180 * _0x5cc4c9,
    109 * _0x5cc4c9,
    191 * _0x5cc4c9,
    113 * _0x5cc4c9,
    237 * _0x5cc4c9,
    103 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    276 * _0x5cc4c9,
    100 * _0x5cc4c9,
    289 * _0x5cc4c9,
    94 * _0x5cc4c9,
    301 * _0x5cc4c9,
    67 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    317 * _0x5cc4c9,
    112 * _0x5cc4c9,
    301 * _0x5cc4c9,
    141 * _0x5cc4c9,
    274 * _0x5cc4c9,
    139 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    204 * _0x5cc4c9,
    166 * _0x5cc4c9,
    197 * _0x5cc4c9,
    169 * _0x5cc4c9,
    173 * _0x5cc4c9,
    183 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    170 * _0x5cc4c9,
    183 * _0x5cc4c9,
    170 * _0x5cc4c9,
    183 * _0x5cc4c9,
    167 * _0x5cc4c9,
    183 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    132 * _0x5cc4c9,
    160 * _0x5cc4c9,
    112 * _0x5cc4c9,
    156 * _0x5cc4c9,
    73 * _0x5cc4c9,
    141 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    43 * _0x5cc4c9,
    146 * _0x5cc4c9,
    27 * _0x5cc4c9,
    120 * _0x5cc4c9,
    39 * _0x5cc4c9,
    66 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[7], _0x1e955b[8], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(115 * _0x5cc4c9, 185 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    115 * _0x5cc4c9,
    200 * _0x5cc4c9,
    118 * _0x5cc4c9,
    206 * _0x5cc4c9,
    124 * _0x5cc4c9,
    212 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    133 * _0x5cc4c9,
    223 * _0x5cc4c9,
    132 * _0x5cc4c9,
    231 * _0x5cc4c9,
    121 * _0x5cc4c9,
    230 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    108 * _0x5cc4c9,
    226 * _0x5cc4c9,
    108 * _0x5cc4c9,
    215 * _0x5cc4c9,
    107 * _0x5cc4c9,
    209 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    106 * _0x5cc4c9,
    201 * _0x5cc4c9,
    110 * _0x5cc4c9,
    196 * _0x5cc4c9,
    114 * _0x5cc4c9,
    185 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[3], _0x1e955b[4], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(226 * _0x5cc4c9, 186 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    234 * _0x5cc4c9,
    201 * _0x5cc4c9,
    238 * _0x5cc4c9,
    209 * _0x5cc4c9,
    228 * _0x5cc4c9,
    225 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    223 * _0x5cc4c9,
    233 * _0x5cc4c9,
    213 * _0x5cc4c9,
    233 * _0x5cc4c9,
    211 * _0x5cc4c9,
    226 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    206 * _0x5cc4c9,
    219 * _0x5cc4c9,
    217 * _0x5cc4c9,
    216 * _0x5cc4c9,
    221 * _0x5cc4c9,
    207 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    225 * _0x5cc4c9,
    196 * _0x5cc4c9,
    225 * _0x5cc4c9,
    191 * _0x5cc4c9,
    226 * _0x5cc4c9,
    186 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[3], _0x1e955b[4], 8 * _0x5cc4c9);
  _0x1b2810.beginPath();
  _0x1b2810.lineCap = "round";
  _0x1b2810.lineJoin = "round";
  _0x1b2810.moveTo(172 * _0x5cc4c9, 110 * _0x5cc4c9);
  _0x1b2810.bezierCurveTo(
    189 * _0x5cc4c9,
    153 * _0x5cc4c9,
    192 * _0x5cc4c9,
    160 * _0x5cc4c9,
    188 * _0x5cc4c9,
    175 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    183 * _0x5cc4c9,
    190 * _0x5cc4c9,
    176 * _0x5cc4c9,
    197 * _0x5cc4c9,
    165 * _0x5cc4c9,
    191 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    153 * _0x5cc4c9,
    181 * _0x5cc4c9,
    152 * _0x5cc4c9,
    166 * _0x5cc4c9,
    157 * _0x5cc4c9,
    151 * _0x5cc4c9
  );
  _0x1b2810.bezierCurveTo(
    164.5 * _0x5cc4c9,
    131 * _0x5cc4c9,
    164.5 * _0x5cc4c9,
    131 * _0x5cc4c9,
    172 * _0x5cc4c9,
    111 * _0x5cc4c9
  );
  _0x1b2810.closePath();
  fill_path(_0x1b2810, _0x1e955b[3], _0x1e955b[4], 8 * _0x5cc4c9);
  return _0x4d50a8;
}
function create_fir_one(_0x4123df, _0x36a0e6) {
  var _0x249bda = document.createElement("canvas");
  var _0x3fa508 = _0x249bda.getContext("2d");
  _0x249bda.width = 149 * _0x4123df;
  _0x249bda.height = 153 * _0x4123df;
  _0x3fa508.globalAlpha = 0.5;
  circle(_0x3fa508, 74.5 * _0x4123df, 85 * _0x4123df, 66 * _0x4123df);
  fill_path(_0x3fa508, _0x36a0e6[0]);
  _0x3fa508.globalAlpha = 1;
  circle(_0x3fa508, 75.5 * _0x4123df, 72.5 * _0x4123df, 67 * _0x4123df);
  fill_path(_0x3fa508, _0x36a0e6[1], _0x36a0e6[2], 4 * _0x4123df);
  circle(_0x3fa508, 75.5 * _0x4123df, 73.5 * _0x4123df, 54 * _0x4123df);
  fill_path(_0x3fa508, _0x36a0e6[3]);
  _0x3fa508.globalAlpha = 0.5;
  circle(_0x3fa508, 74.5 * _0x4123df, 80.5 * _0x4123df, 39 * _0x4123df);
  fill_path(_0x3fa508, _0x36a0e6[4]);
  _0x3fa508.globalAlpha = 1;
  circle(_0x3fa508, 74.5 * _0x4123df, 74.5 * _0x4123df, 37 * _0x4123df);
  fill_path(_0x3fa508, _0x36a0e6[5]);
  return _0x249bda;
}
function create_fir_two(_0x1a90d1, _0x58d842) {
  var _0x28401d = document.createElement("canvas");
  var _0x1ffc84 = _0x28401d.getContext("2d");
  _0x28401d.width = 173 * _0x1a90d1;
  _0x28401d.height = 178 * _0x1a90d1;
  _0x1ffc84.globalAlpha = 0.5;
  circle(_0x1ffc84, 86.5 * _0x1a90d1, 98 * _0x1a90d1, 80 * _0x1a90d1);
  fill_path(_0x1ffc84, _0x58d842[0]);
  _0x1ffc84.globalAlpha = 1;
  circle(_0x1ffc84, 86.5 * _0x1a90d1, 89 * _0x1a90d1, 81 * _0x1a90d1);
  fill_path(_0x1ffc84, _0x58d842[1], _0x58d842[2], 4 * _0x1a90d1);
  circle(_0x1ffc84, 86.5 * _0x1a90d1, 86 * _0x1a90d1, 59 * _0x1a90d1);
  fill_path(_0x1ffc84, _0x58d842[3], _0x58d842[4], 4 * _0x1a90d1);
  _0x1ffc84.globalAlpha = 0.5;
  circle(_0x1ffc84, 86.5 * _0x1a90d1, 95 * _0x1a90d1, 34 * _0x1a90d1);
  fill_path(_0x1ffc84, _0x58d842[0]);
  _0x1ffc84.globalAlpha = 1;
  circle(_0x1ffc84, 86.5 * _0x1a90d1, 89 * _0x1a90d1, 34 * _0x1a90d1);
  fill_path(_0x1ffc84, _0x58d842[5]);
  return _0x28401d;
}
function create_fir_three(_0x5d5396, _0x1ce6d1) {
  var _0x260dbb = document.createElement("canvas");
  var _0x7f1ec9 = _0x260dbb.getContext("2d");
  _0x260dbb.width = 253 * _0x5d5396;
  _0x260dbb.height = 260 * _0x5d5396;
  _0x7f1ec9.globalAlpha = 0.5;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 134 * _0x5d5396, 119 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[0]);
  _0x7f1ec9.globalAlpha = 1;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 124 * _0x5d5396, 119 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[1], _0x1ce6d1[2], 4 * _0x5d5396);
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 127 * _0x5d5396, 100 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[3]);
  _0x7f1ec9.globalAlpha = 0.5;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 135 * _0x5d5396, 81 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[0]);
  _0x7f1ec9.globalAlpha = 1;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 125 * _0x5d5396, 84 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[4], _0x1ce6d1[5], 4 * _0x5d5396);
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 125 * _0x5d5396, 61 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[6], _0x1ce6d1[7], 4 * _0x5d5396);
  _0x7f1ec9.globalAlpha = 0.5;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 134 * _0x5d5396, 40 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[8]);
  _0x7f1ec9.globalAlpha = 1;
  circle(_0x7f1ec9, 126.5 * _0x5d5396, 125 * _0x5d5396, 40 * _0x5d5396);
  fill_path(_0x7f1ec9, _0x1ce6d1[9]);
  return _0x260dbb;
}
function create_amethyst(_0xc1968c, _0xd291ae, _0x4aa501) {
  var _0x296593 = document.createElement("canvas");
  var _0x64815a = _0x296593.getContext("2d");
  _0x296593.width = 139 * _0xc1968c;
  _0x296593.height = 135 * _0xc1968c;
  _0x64815a.translate(0, 10 * _0xc1968c);
  _0x64815a.globalAlpha = _0xd291ae ? 0.5 : 1;
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(32 * _0xc1968c, 77 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    6 * _0xc1968c,
    41 * _0xc1968c,
    6 * _0xc1968c,
    33 * _0xc1968c,
    12 * _0xc1968c,
    27 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    27 * _0xc1968c,
    6 * _0xc1968c,
    28 * _0xc1968c,
    6 * _0xc1968c,
    37 * _0xc1968c,
    6 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    62 * _0xc1968c,
    3 * _0xc1968c,
    64 * _0xc1968c,
    5 * _0xc1968c,
    67 * _0xc1968c,
    13 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    80 * _0xc1968c,
    36 * _0xc1968c,
    73.5 * _0xc1968c,
    25 * _0xc1968c,
    80 * _0xc1968c,
    37 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    73.5 * _0xc1968c,
    54 * _0xc1968c,
    65 * _0xc1968c,
    74 * _0xc1968c,
    67 * _0xc1968c,
    71 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[0]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(65 * _0xc1968c, 37 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    105 * _0xc1968c,
    40 * _0xc1968c,
    113 * _0xc1968c,
    39 * _0xc1968c,
    117 * _0xc1968c,
    48 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    126 * _0xc1968c,
    70 * _0xc1968c,
    128 * _0xc1968c,
    72 * _0xc1968c,
    124 * _0xc1968c,
    80 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    112 * _0xc1968c,
    101 * _0xc1968c,
    110 * _0xc1968c,
    104 * _0xc1968c,
    99 * _0xc1968c,
    104 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    59 * _0xc1968c,
    100 * _0xc1968c,
    55 * _0xc1968c,
    99 * _0xc1968c,
    56 * _0xc1968c,
    99 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    47.5 * _0xc1968c,
    79 * _0xc1968c,
    45 * _0xc1968c,
    66 * _0xc1968c,
    39 * _0xc1968c,
    59 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[0]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(30 * _0xc1968c, 63 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    5 * _0xc1968c,
    99 * _0xc1968c,
    5 * _0xc1968c,
    101 * _0xc1968c,
    8 * _0xc1968c,
    103 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    19 * _0xc1968c,
    123 * _0xc1968c,
    22 * _0xc1968c,
    125 * _0xc1968c,
    28 * _0xc1968c,
    126 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    57 * _0xc1968c,
    127 * _0xc1968c,
    55 * _0xc1968c,
    127 * _0xc1968c,
    58 * _0xc1968c,
    120 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    82 * _0xc1968c,
    86 * _0xc1968c,
    83 * _0xc1968c,
    78 * _0xc1968c,
    82 * _0xc1968c,
    87 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[0]);
  _0x64815a.translate(0, -10 * _0xc1968c);
  _0x64815a.globalAlpha = 1;
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(32 * _0xc1968c, 77 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    6 * _0xc1968c,
    41 * _0xc1968c,
    6 * _0xc1968c,
    33 * _0xc1968c,
    12 * _0xc1968c,
    27 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    27 * _0xc1968c,
    6 * _0xc1968c,
    28 * _0xc1968c,
    6 * _0xc1968c,
    37 * _0xc1968c,
    6 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    62 * _0xc1968c,
    3 * _0xc1968c,
    64 * _0xc1968c,
    5 * _0xc1968c,
    67 * _0xc1968c,
    13 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    80 * _0xc1968c,
    36 * _0xc1968c,
    73.5 * _0xc1968c,
    25 * _0xc1968c,
    80 * _0xc1968c,
    37 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    73.5 * _0xc1968c,
    54 * _0xc1968c,
    65 * _0xc1968c,
    74 * _0xc1968c,
    67 * _0xc1968c,
    71 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[1]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(65 * _0xc1968c, 37 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    105 * _0xc1968c,
    40 * _0xc1968c,
    113 * _0xc1968c,
    39 * _0xc1968c,
    117 * _0xc1968c,
    48 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    126 * _0xc1968c,
    70 * _0xc1968c,
    128 * _0xc1968c,
    72 * _0xc1968c,
    124 * _0xc1968c,
    80 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    112 * _0xc1968c,
    101 * _0xc1968c,
    110 * _0xc1968c,
    104 * _0xc1968c,
    99 * _0xc1968c,
    104 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    59 * _0xc1968c,
    100 * _0xc1968c,
    55 * _0xc1968c,
    99 * _0xc1968c,
    56 * _0xc1968c,
    99 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    47.5 * _0xc1968c,
    79 * _0xc1968c,
    45 * _0xc1968c,
    66 * _0xc1968c,
    39 * _0xc1968c,
    59 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[1]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(30 * _0xc1968c, 63 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    5 * _0xc1968c,
    99 * _0xc1968c,
    5 * _0xc1968c,
    101 * _0xc1968c,
    8 * _0xc1968c,
    103 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    19 * _0xc1968c,
    123 * _0xc1968c,
    22 * _0xc1968c,
    125 * _0xc1968c,
    28 * _0xc1968c,
    126 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    57 * _0xc1968c,
    127 * _0xc1968c,
    55 * _0xc1968c,
    127 * _0xc1968c,
    58 * _0xc1968c,
    120 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    82 * _0xc1968c,
    86 * _0xc1968c,
    83 * _0xc1968c,
    78 * _0xc1968c,
    82 * _0xc1968c,
    87 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[1]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(80 * _0xc1968c, 38 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    72.5 * _0xc1968c,
    52 * _0xc1968c,
    72.5 * _0xc1968c,
    52 * _0xc1968c,
    65 * _0xc1968c,
    66 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    47.5 * _0xc1968c,
    37 * _0xc1968c,
    47.5 * _0xc1968c,
    37 * _0xc1968c,
    30 * _0xc1968c,
    7 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    48 * _0xc1968c,
    4 * _0xc1968c,
    57 * _0xc1968c,
    4 * _0xc1968c,
    64 * _0xc1968c,
    10 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[2]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(65 * _0xc1968c, 65 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    125 * _0xc1968c,
    73 * _0xc1968c,
    95.5 * _0xc1968c,
    69 * _0xc1968c,
    126 * _0xc1968c,
    73 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    119 * _0xc1968c,
    98 * _0xc1968c,
    106 * _0xc1968c,
    104 * _0xc1968c,
    98 * _0xc1968c,
    103 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    84.5 * _0xc1968c,
    102 * _0xc1968c,
    84.5 * _0xc1968c,
    102 * _0xc1968c,
    71 * _0xc1968c,
    101 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    64 * _0xc1968c,
    86 * _0xc1968c,
    64 * _0xc1968c,
    86 * _0xc1968c,
    57 * _0xc1968c,
    70 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[2]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(27 * _0xc1968c, 69 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    64 * _0xc1968c,
    65 * _0xc1968c,
    46 * _0xc1968c,
    67 * _0xc1968c,
    65 * _0xc1968c,
    65 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    43.5 * _0xc1968c,
    94 * _0xc1968c,
    43.5 * _0xc1968c,
    94 * _0xc1968c,
    22 * _0xc1968c,
    123 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    8 * _0xc1968c,
    103 * _0xc1968c,
    8 * _0xc1968c,
    103 * _0xc1968c,
    9 * _0xc1968c,
    103 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    5 * _0xc1968c,
    98 * _0xc1968c,
    11 * _0xc1968c,
    89 * _0xc1968c,
    26 * _0xc1968c,
    70 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[2]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(26 * _0xc1968c, 69 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    65 * _0xc1968c,
    60 * _0xc1968c,
    45 * _0xc1968c,
    65 * _0xc1968c,
    64 * _0xc1968c,
    60 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    63 * _0xc1968c,
    65 * _0xc1968c,
    63 * _0xc1968c,
    65 * _0xc1968c,
    62 * _0xc1968c,
    70 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[2]);
  _0x64815a.beginPath();
  _0x64815a.lineCap = "round";
  _0x64815a.lineJoin = "round";
  _0x64815a.moveTo(80 * _0xc1968c, 38 * _0xc1968c);
  _0x64815a.bezierCurveTo(
    68 * _0xc1968c,
    70 * _0xc1968c,
    75 * _0xc1968c,
    53 * _0xc1968c,
    70 * _0xc1968c,
    68 * _0xc1968c
  );
  _0x64815a.bezierCurveTo(
    65 * _0xc1968c,
    67 * _0xc1968c,
    65 * _0xc1968c,
    67 * _0xc1968c,
    60 * _0xc1968c,
    65 * _0xc1968c
  );
  _0x64815a.closePath();
  fill_path(_0x64815a, _0x4aa501[2]);
  return _0x296593;
}
function create_dragon_ground(_0x6e8b87, _0x4e223a) {
  var _0x172767 = document.createElement("canvas");
  var _0x3d53b8 = _0x172767.getContext("2d");
  _0x172767.width = 100 * _0x6e8b87;
  _0x172767.height = 100 * _0x6e8b87;
  _0x3d53b8.globalAlpha = 0.5;
  _0x3d53b8.fillStyle = _0x4e223a[0];
  _0x3d53b8.fillRect(0, 0, _0x172767.width, _0x172767.height);
  return _0x172767;
}
function create_snow_one(_0x38cc37, _0x46307c) {
  var _0x39e634 = document.createElement("canvas");
  var _0xcb6ef7 = _0x39e634.getContext("2d");
  _0x39e634.width = 120 * _0x38cc37;
  _0x39e634.height = 300 * _0x38cc37;
  _0xcb6ef7.translate(-80 * _0x38cc37, -20);
  _0xcb6ef7.beginPath();
  _0xcb6ef7.lineCap = "round";
  _0xcb6ef7.lineJoin = "round";
  _0xcb6ef7.moveTo(200.5 * _0x38cc37, 14.953125 * _0x38cc37);
  _0xcb6ef7.bezierCurveTo(
    203 * _0x38cc37,
    171.953125 * _0x38cc37,
    203 * _0x38cc37,
    171.953125 * _0x38cc37,
    205.5 * _0x38cc37,
    328.953125 * _0x38cc37
  );
  _0xcb6ef7.bezierCurveTo(
    188.5 * _0x38cc37,
    257.953125 * _0x38cc37,
    164.5 * _0x38cc37,
    216.953125 * _0x38cc37,
    166.5 * _0x38cc37,
    176.953125 * _0x38cc37
  );
  _0xcb6ef7.bezierCurveTo(
    168.5 * _0x38cc37,
    133.953125 * _0x38cc37,
    198.5 * _0x38cc37,
    98.953125 * _0x38cc37,
    200.5 * _0x38cc37,
    14.953125 * _0x38cc37
  );
  _0xcb6ef7.closePath();
  fill_path(_0xcb6ef7, _0x46307c[0]);
  return _0x39e634;
}
function create_snow_two(_0xa0466b, _0x565299) {
  var _0x1f08e4 = document.createElement("canvas");
  var _0x3e3bee = _0x1f08e4.getContext("2d");
  _0x1f08e4.width = 120 * _0xa0466b;
  _0x1f08e4.height = 300 * _0xa0466b;
  _0x3e3bee.translate(-200 * _0xa0466b, -40 * _0xa0466b);
  _0x3e3bee.beginPath();
  _0x3e3bee.lineCap = "round";
  _0x3e3bee.lineJoin = "round";
  _0x3e3bee.moveTo(344 * _0xa0466b, 18.40625 * _0xa0466b);
  _0x3e3bee.bezierCurveTo(
    345 * _0xa0466b,
    361.40625 * _0xa0466b,
    344 * _0xa0466b,
    191.40625 * _0xa0466b,
    344 * _0xa0466b,
    364.40625 * _0xa0466b
  );
  _0x3e3bee.bezierCurveTo(
    261 * _0xa0466b,
    275.40625 * _0xa0466b,
    274 * _0xa0466b,
    259.40625 * _0xa0466b,
    229 * _0xa0466b,
    213.40625 * _0xa0466b
  );
  _0x3e3bee.bezierCurveTo(
    199 * _0xa0466b,
    187.40625 * _0xa0466b,
    222 * _0xa0466b,
    133.40625 * _0xa0466b,
    273 * _0xa0466b,
    100.40625 * _0xa0466b
  );
  _0x3e3bee.bezierCurveTo(
    321 * _0xa0466b,
    71.40625 * _0xa0466b,
    327 * _0xa0466b,
    34.40625 * _0xa0466b,
    344 * _0xa0466b,
    18.40625 * _0xa0466b
  );
  _0x3e3bee.closePath();
  fill_path(_0x3e3bee, _0x565299[0]);
  _0x3e3bee.beginPath();
  _0x3e3bee.lineCap = "round";
  _0x3e3bee.lineJoin = "round";
  _0x3e3bee.moveTo(335 * _0xa0466b, 38.072906494140625 * _0xa0466b);
  _0x3e3bee.bezierCurveTo(
    307 * _0xa0466b,
    62.072906494140625 * _0xa0466b,
    291 * _0xa0466b,
    60.072906494140625 * _0xa0466b,
    262 * _0xa0466b,
    68.07290649414062 * _0xa0466b
  );
  _0x3e3bee.bezierCurveTo(
    223 * _0xa0466b,
    80.07290649414062 * _0xa0466b,
    225 * _0xa0466b,
    111.07290649414062 * _0xa0466b,
    264 * _0xa0466b,
    139.07290649414062 * _0xa0466b
  );
  _0x3e3bee.closePath();
  fill_path(_0x3e3bee, _0x565299[0]);
  return _0x1f08e4;
}
function create_snow_three(_0x2695cd, _0x23b102) {
  var _0x4416bb = document.createElement("canvas");
  var _0x11e0dd = _0x4416bb.getContext("2d");
  _0x4416bb.width = 120 * _0x2695cd;
  _0x4416bb.height = 320 * _0x2695cd;
  _0x11e0dd.translate(-60 * _0x2695cd, -15 * _0x2695cd);
  _0x11e0dd.beginPath();
  _0x11e0dd.lineCap = "round";
  _0x11e0dd.lineJoin = "round";
  _0x11e0dd.moveTo(188.5 * _0x2695cd, 3.953125 * _0x2695cd);
  _0x11e0dd.bezierCurveTo(
    188.5 * _0x2695cd,
    171.453125 * _0x2695cd,
    188.5 * _0x2695cd,
    171.453125 * _0x2695cd,
    188.5 * _0x2695cd,
    338.953125 * _0x2695cd
  );
  _0x11e0dd.bezierCurveTo(
    162.5 * _0x2695cd,
    268.953125 * _0x2695cd,
    145.5 * _0x2695cd,
    265.953125 * _0x2695cd,
    116.5 * _0x2695cd,
    244.953125 * _0x2695cd
  );
  _0x11e0dd.bezierCurveTo(
    67.5 * _0x2695cd,
    204.953125 * _0x2695cd,
    87.5 * _0x2695cd,
    160.953125 * _0x2695cd,
    113.5 * _0x2695cd,
    125.953125 * _0x2695cd
  );
  _0x11e0dd.bezierCurveTo(
    141.5 * _0x2695cd,
    90.953125 * _0x2695cd,
    176.5 * _0x2695cd,
    56.953125 * _0x2695cd,
    188.5 * _0x2695cd,
    3.953125 * _0x2695cd
  );
  _0x11e0dd.closePath();
  fill_path(_0x11e0dd, _0x23b102[0]);
  return _0x4416bb;
}
function create_snow_four(_0x239814, _0x208a17) {
  var _0x2b60fb = document.createElement("canvas");
  var _0x2d7da6 = _0x2b60fb.getContext("2d");
  _0x2b60fb.width = 120 * _0x239814;
  _0x2b60fb.height = 330 * _0x239814;
  _0x2d7da6.translate(-60 * _0x239814, -10 * _0x239814);
  _0x2d7da6.beginPath();
  _0x2d7da6.lineCap = "round";
  _0x2d7da6.lineJoin = "round";
  _0x2d7da6.moveTo(188.5 * _0x239814, 7.953125 * _0x239814);
  _0x2d7da6.bezierCurveTo(
    188.5 * _0x239814,
    334.953125 * _0x239814,
    188.5 * _0x239814,
    332.953125 * _0x239814,
    188.5 * _0x239814,
    339.953125 * _0x239814
  );
  _0x2d7da6.bezierCurveTo(
    166.5 * _0x239814,
    295.953125 * _0x239814,
    145.5 * _0x239814,
    295.953125 * _0x239814,
    139.5 * _0x239814,
    282.953125 * _0x239814
  );
  _0x2d7da6.bezierCurveTo(
    124.5 * _0x239814,
    244.953125 * _0x239814,
    139.5 * _0x239814,
    243.953125 * _0x239814,
    131.5 * _0x239814,
    212.953125 * _0x239814
  );
  _0x2d7da6.bezierCurveTo(
    118.5 * _0x239814,
    161.953125 * _0x239814,
    69.5 * _0x239814,
    156.953125 * _0x239814,
    74.5 * _0x239814,
    92.953125 * _0x239814
  );
  _0x2d7da6.bezierCurveTo(
    85.5 * _0x239814,
    41.953125 * _0x239814,
    158.5 * _0x239814,
    49.953125 * _0x239814,
    188.5 * _0x239814,
    7.953125 * _0x239814
  );
  _0x2d7da6.closePath();
  fill_path(_0x2d7da6, _0x208a17[0]);
  return _0x2b60fb;
}
function create_snow_five(_0x5421f5, _0x46f541) {
  var _0x92ac4f = document.createElement("canvas");
  var _0x51e120 = _0x92ac4f.getContext("2d");
  _0x92ac4f.width = 48 * _0x5421f5;
  _0x92ac4f.height = 47 * _0x5421f5;
  _0x51e120.beginPath();
  _0x51e120.lineCap = "round";
  _0x51e120.lineJoin = "round";
  _0x51e120.moveTo(7.1875 * _0x5421f5, 25.434661865234375 * _0x5421f5);
  _0x51e120.bezierCurveTo(
    11.1875 * _0x5421f5,
    13.434661865234375 * _0x5421f5,
    18.1875 * _0x5421f5,
    8.434661865234375 * _0x5421f5,
    32.1875 * _0x5421f5,
    10.434661865234375 * _0x5421f5
  );
  _0x51e120.bezierCurveTo(
    45.1875 * _0x5421f5,
    14.434661865234375 * _0x5421f5,
    41.1875 * _0x5421f5,
    24.434661865234375 * _0x5421f5,
    36.1875 * _0x5421f5,
    30.434661865234375 * _0x5421f5
  );
  _0x51e120.bezierCurveTo(
    22.1875 * _0x5421f5,
    42.434661865234375 * _0x5421f5,
    2.1875 * _0x5421f5,
    41.434661865234375 * _0x5421f5,
    7.1875 * _0x5421f5,
    25.434661865234375 * _0x5421f5
  );
  _0x51e120.closePath();
  fill_path(_0x51e120, _0x46f541[0]);
  return _0x92ac4f;
}
function create_snow_six(_0x59cfa9, _0x4fe0b1) {
  var _0x3d7cdd = document.createElement("canvas");
  var _0x19ee6b = _0x3d7cdd.getContext("2d");
  _0x3d7cdd.width = 120 * _0x59cfa9;
  _0x3d7cdd.height = 280 * _0x59cfa9;
  _0x19ee6b.translate(-100 * _0x59cfa9, -20 * _0x59cfa9);
  _0x19ee6b.beginPath();
  _0x19ee6b.lineCap = "round";
  _0x19ee6b.lineJoin = "round";
  _0x19ee6b.moveTo(228.5 * _0x59cfa9, 331.953125 * _0x59cfa9);
  _0x19ee6b.bezierCurveTo(
    228.5 * _0x59cfa9,
    12.953125 * _0x59cfa9,
    228.5 * _0x59cfa9,
    171.453125 * _0x59cfa9,
    228.5 * _0x59cfa9,
    10.953125 * _0x59cfa9
  );
  _0x19ee6b.bezierCurveTo(
    196.5 * _0x59cfa9,
    76.953125 * _0x59cfa9,
    206.5 * _0x59cfa9,
    78.953125 * _0x59cfa9,
    191.5 * _0x59cfa9,
    114.953125 * _0x59cfa9
  );
  _0x19ee6b.bezierCurveTo(
    162.5 * _0x59cfa9,
    170.953125 * _0x59cfa9,
    206.5 * _0x59cfa9,
    220.953125 * _0x59cfa9,
    210.5 * _0x59cfa9,
    251.953125 * _0x59cfa9
  );
  _0x19ee6b.bezierCurveTo(
    218.5 * _0x59cfa9,
    287.953125 * _0x59cfa9,
    220.5 * _0x59cfa9,
    291.953125 * _0x59cfa9,
    228.5 * _0x59cfa9,
    331.953125 * _0x59cfa9
  );
  _0x19ee6b.closePath();
  fill_path(_0x19ee6b, _0x4fe0b1[0]);
  return _0x3d7cdd;
}
function create_snow_sept(_0x407756, _0xa31e0b) {
  var _0xd12fdd = document.createElement("canvas");
  var _0x4bdb54 = _0xd12fdd.getContext("2d");
  _0xd12fdd.width = 33 * _0x407756;
  _0xd12fdd.height = 35 * _0x407756;
  _0x4bdb54.beginPath();
  _0x4bdb54.lineCap = "round";
  _0x4bdb54.lineJoin = "round";
  _0x4bdb54.moveTo(12.75 * _0x407756, 7.1328125 * _0x407756);
  _0x4bdb54.bezierCurveTo(
    26.75 * _0x407756,
    8.1328125 * _0x407756,
    27.75 * _0x407756,
    14.1328125 * _0x407756,
    24.75 * _0x407756,
    23.1328125 * _0x407756
  );
  _0x4bdb54.bezierCurveTo(
    19.75 * _0x407756,
    31.1328125 * _0x407756,
    15.75 * _0x407756,
    33.1328125 * _0x407756,
    6.75 * _0x407756,
    26.1328125 * _0x407756
  );
  _0x4bdb54.bezierCurveTo(
    0.75 * _0x407756,
    19.1328125 * _0x407756,
    4.75 * _0x407756,
    8.1328125 * _0x407756,
    12.75 * _0x407756,
    7.1328125 * _0x407756
  );
  _0x4bdb54.closePath();
  fill_path(_0x4bdb54, _0xa31e0b[0]);
  return _0xd12fdd;
}
function create_snow_step(_0x115010, _0x104139) {
  var _0x234acf = document.createElement("canvas");
  var _0x9201d0 = _0x234acf.getContext("2d");
  _0x234acf.width = 20 * _0x115010;
  _0x234acf.height = 35 * _0x115010;
  round_rect(_0x9201d0, 0, 0, 20, 35, 7);
  fill_path(_0x9201d0, _0x104139[0]);
  return _0x234acf;
}
function create_winter_fox(_0x7b613f, _0x4624be) {
  var _0x1d32fc = document.createElement("canvas");
  var _0x5aaab2 = _0x1d32fc.getContext("2d");
  _0x1d32fc.width = 161 * _0x7b613f;
  _0x1d32fc.height = 190 * _0x7b613f;
  _0x5aaab2.globalAlpha = 0.5;
  _0x5aaab2.translate(0, 8);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(9 * _0x7b613f, 93 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    17 * _0x7b613f,
    95 * _0x7b613f,
    19 * _0x7b613f,
    95 * _0x7b613f,
    21 * _0x7b613f,
    95 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    9 * _0x7b613f,
    83 * _0x7b613f,
    17 * _0x7b613f,
    93 * _0x7b613f,
    4 * _0x7b613f,
    76 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    11 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    75 * _0x7b613f,
    18 * _0x7b613f,
    75 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    13 * _0x7b613f,
    67 * _0x7b613f,
    13 * _0x7b613f,
    67 * _0x7b613f,
    7 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    14 * _0x7b613f,
    59 * _0x7b613f,
    14 * _0x7b613f,
    59 * _0x7b613f,
    21 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    46 * _0x7b613f,
    35 * _0x7b613f,
    35 * _0x7b613f,
    45 * _0x7b613f,
    49 * _0x7b613f,
    31 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    53 * _0x7b613f,
    24 * _0x7b613f,
    51 * _0x7b613f,
    21 * _0x7b613f,
    51 * _0x7b613f,
    16 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    63 * _0x7b613f,
    23 * _0x7b613f,
    63 * _0x7b613f,
    24 * _0x7b613f,
    69 * _0x7b613f,
    29 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    76 * _0x7b613f,
    7 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    76 * _0x7b613f,
    6 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    81 * _0x7b613f,
    12 * _0x7b613f,
    84 * _0x7b613f,
    18 * _0x7b613f,
    89 * _0x7b613f,
    27 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    95 * _0x7b613f,
    25 * _0x7b613f,
    100 * _0x7b613f,
    16 * _0x7b613f,
    105 * _0x7b613f,
    14 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    103 * _0x7b613f,
    25 * _0x7b613f,
    111 * _0x7b613f,
    33 * _0x7b613f,
    110 * _0x7b613f,
    34 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    123 * _0x7b613f,
    48 * _0x7b613f,
    123 * _0x7b613f,
    48 * _0x7b613f,
    136 * _0x7b613f,
    62 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    142 * _0x7b613f,
    60 * _0x7b613f,
    147 * _0x7b613f,
    59 * _0x7b613f,
    155 * _0x7b613f,
    58 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    147 * _0x7b613f,
    65 * _0x7b613f,
    147 * _0x7b613f,
    65 * _0x7b613f,
    139 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    73 * _0x7b613f,
    145 * _0x7b613f,
    73 * _0x7b613f,
    151 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    80 * _0x7b613f,
    145 * _0x7b613f,
    80 * _0x7b613f,
    138 * _0x7b613f,
    87 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    144 * _0x7b613f,
    88 * _0x7b613f,
    144 * _0x7b613f,
    88 * _0x7b613f,
    150 * _0x7b613f,
    89 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    125 * _0x7b613f,
    103 * _0x7b613f,
    125 * _0x7b613f,
    125 * _0x7b613f,
    113 * _0x7b613f,
    141 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    92 * _0x7b613f,
    178 * _0x7b613f,
    85 * _0x7b613f,
    177 * _0x7b613f,
    76 * _0x7b613f,
    178 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    64 * _0x7b613f,
    179 * _0x7b613f,
    51 * _0x7b613f,
    164 * _0x7b613f,
    35 * _0x7b613f,
    131 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    18 * _0x7b613f,
    95 * _0x7b613f,
    13 * _0x7b613f,
    99 * _0x7b613f,
    8 * _0x7b613f,
    93 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[0]);
  _0x5aaab2.globalAlpha = 1;
  _0x5aaab2.translate(0, -8);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(9 * _0x7b613f, 93 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    17 * _0x7b613f,
    95 * _0x7b613f,
    19 * _0x7b613f,
    95 * _0x7b613f,
    21 * _0x7b613f,
    95 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    9 * _0x7b613f,
    83 * _0x7b613f,
    17 * _0x7b613f,
    93 * _0x7b613f,
    4 * _0x7b613f,
    76 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    11 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    75 * _0x7b613f,
    18 * _0x7b613f,
    75 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    13 * _0x7b613f,
    67 * _0x7b613f,
    13 * _0x7b613f,
    67 * _0x7b613f,
    7 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    14 * _0x7b613f,
    59 * _0x7b613f,
    14 * _0x7b613f,
    59 * _0x7b613f,
    21 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    46 * _0x7b613f,
    35 * _0x7b613f,
    35 * _0x7b613f,
    45 * _0x7b613f,
    49 * _0x7b613f,
    31 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    53 * _0x7b613f,
    24 * _0x7b613f,
    51 * _0x7b613f,
    21 * _0x7b613f,
    51 * _0x7b613f,
    16 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    63 * _0x7b613f,
    23 * _0x7b613f,
    63 * _0x7b613f,
    24 * _0x7b613f,
    69 * _0x7b613f,
    29 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    76 * _0x7b613f,
    7 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    76 * _0x7b613f,
    6 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    81 * _0x7b613f,
    12 * _0x7b613f,
    84 * _0x7b613f,
    18 * _0x7b613f,
    89 * _0x7b613f,
    27 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    95 * _0x7b613f,
    25 * _0x7b613f,
    100 * _0x7b613f,
    16 * _0x7b613f,
    105 * _0x7b613f,
    14 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    103 * _0x7b613f,
    25 * _0x7b613f,
    111 * _0x7b613f,
    33 * _0x7b613f,
    110 * _0x7b613f,
    34 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    123 * _0x7b613f,
    48 * _0x7b613f,
    123 * _0x7b613f,
    48 * _0x7b613f,
    136 * _0x7b613f,
    62 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    142 * _0x7b613f,
    60 * _0x7b613f,
    147 * _0x7b613f,
    59 * _0x7b613f,
    155 * _0x7b613f,
    58 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    147 * _0x7b613f,
    65 * _0x7b613f,
    147 * _0x7b613f,
    65 * _0x7b613f,
    139 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    73 * _0x7b613f,
    145 * _0x7b613f,
    73 * _0x7b613f,
    151 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    80 * _0x7b613f,
    145 * _0x7b613f,
    80 * _0x7b613f,
    138 * _0x7b613f,
    87 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    144 * _0x7b613f,
    88 * _0x7b613f,
    144 * _0x7b613f,
    88 * _0x7b613f,
    150 * _0x7b613f,
    89 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    125 * _0x7b613f,
    103 * _0x7b613f,
    125 * _0x7b613f,
    125 * _0x7b613f,
    113 * _0x7b613f,
    141 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    92 * _0x7b613f,
    178 * _0x7b613f,
    85 * _0x7b613f,
    177 * _0x7b613f,
    76 * _0x7b613f,
    178 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    64 * _0x7b613f,
    179 * _0x7b613f,
    51 * _0x7b613f,
    164 * _0x7b613f,
    35 * _0x7b613f,
    131 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    18 * _0x7b613f,
    95 * _0x7b613f,
    13 * _0x7b613f,
    99 * _0x7b613f,
    8 * _0x7b613f,
    93 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[1]);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(28 * _0x7b613f, 63 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    23 * _0x7b613f,
    54 * _0x7b613f,
    24 * _0x7b613f,
    47 * _0x7b613f,
    26 * _0x7b613f,
    37 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    28 * _0x7b613f,
    29 * _0x7b613f,
    31 * _0x7b613f,
    31 * _0x7b613f,
    41 * _0x7b613f,
    35 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    52 * _0x7b613f,
    45 * _0x7b613f,
    55 * _0x7b613f,
    51 * _0x7b613f,
    57 * _0x7b613f,
    53 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    50 * _0x7b613f,
    50 * _0x7b613f,
    44 * _0x7b613f,
    47 * _0x7b613f,
    43 * _0x7b613f,
    48 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    43 * _0x7b613f,
    52 * _0x7b613f,
    43 * _0x7b613f,
    52 * _0x7b613f,
    42 * _0x7b613f,
    57 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    38 * _0x7b613f,
    54 * _0x7b613f,
    38 * _0x7b613f,
    54 * _0x7b613f,
    33 * _0x7b613f,
    51 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    34 * _0x7b613f,
    56 * _0x7b613f,
    34 * _0x7b613f,
    56 * _0x7b613f,
    34 * _0x7b613f,
    61 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[3]);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(99 * _0x7b613f, 55 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    107 * _0x7b613f,
    43 * _0x7b613f,
    113 * _0x7b613f,
    39 * _0x7b613f,
    121 * _0x7b613f,
    34 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    130 * _0x7b613f,
    29 * _0x7b613f,
    130 * _0x7b613f,
    34 * _0x7b613f,
    130 * _0x7b613f,
    42 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    131 * _0x7b613f,
    57 * _0x7b613f,
    128 * _0x7b613f,
    61 * _0x7b613f,
    129 * _0x7b613f,
    63 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    124 * _0x7b613f,
    62 * _0x7b613f,
    124 * _0x7b613f,
    62 * _0x7b613f,
    119 * _0x7b613f,
    61 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    119 * _0x7b613f,
    56 * _0x7b613f,
    120 * _0x7b613f,
    61 * _0x7b613f,
    118 * _0x7b613f,
    52 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    115 * _0x7b613f,
    55 * _0x7b613f,
    111 * _0x7b613f,
    59 * _0x7b613f,
    111 * _0x7b613f,
    58 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    110 * _0x7b613f,
    54 * _0x7b613f,
    109 * _0x7b613f,
    57 * _0x7b613f,
    109 * _0x7b613f,
    51 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[3]);
  circle(_0x5aaab2, 103 * _0x7b613f, 110 * _0x7b613f, 11 * _0x7b613f);
  fill_path(_0x5aaab2, _0x4624be[4]);
  circle(_0x5aaab2, 55 * _0x7b613f, 111 * _0x7b613f, 11 * _0x7b613f);
  fill_path(_0x5aaab2, _0x4624be[4]);
  circle(_0x5aaab2, 99 * _0x7b613f, 107 * _0x7b613f, 5 * _0x7b613f);
  fill_path(_0x5aaab2, _0x4624be[1]);
  circle(_0x5aaab2, 51 * _0x7b613f, 108 * _0x7b613f, 5 * _0x7b613f);
  fill_path(_0x5aaab2, _0x4624be[1]);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(31 * _0x7b613f, 121 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    45 * _0x7b613f,
    128 * _0x7b613f,
    51 * _0x7b613f,
    133 * _0x7b613f,
    53 * _0x7b613f,
    141 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    59 * _0x7b613f,
    161 * _0x7b613f,
    70 * _0x7b613f,
    173 * _0x7b613f,
    80 * _0x7b613f,
    169 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    89 * _0x7b613f,
    172 * _0x7b613f,
    99 * _0x7b613f,
    149 * _0x7b613f,
    107 * _0x7b613f,
    133 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    114 * _0x7b613f,
    122 * _0x7b613f,
    119 * _0x7b613f,
    123 * _0x7b613f,
    124 * _0x7b613f,
    119 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    109 * _0x7b613f,
    148 * _0x7b613f,
    117 * _0x7b613f,
    133 * _0x7b613f,
    109 * _0x7b613f,
    147 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    87 * _0x7b613f,
    180 * _0x7b613f,
    84 * _0x7b613f,
    179 * _0x7b613f,
    76 * _0x7b613f,
    178 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    49 * _0x7b613f,
    173 * _0x7b613f,
    44 * _0x7b613f,
    149 * _0x7b613f,
    31 * _0x7b613f,
    121 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[5]);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.translate(-2, 0);
  _0x5aaab2.moveTo(71 * _0x7b613f, 162 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    80 * _0x7b613f,
    155 * _0x7b613f,
    85 * _0x7b613f,
    159 * _0x7b613f,
    89 * _0x7b613f,
    164 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    90 * _0x7b613f,
    171 * _0x7b613f,
    86 * _0x7b613f,
    173 * _0x7b613f,
    79 * _0x7b613f,
    173 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    67 * _0x7b613f,
    172 * _0x7b613f,
    67 * _0x7b613f,
    168 * _0x7b613f,
    71 * _0x7b613f,
    162 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[3]);
  _0x5aaab2.translate(2, 0);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(9 * _0x7b613f, 93 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    17 * _0x7b613f,
    95 * _0x7b613f,
    19 * _0x7b613f,
    95 * _0x7b613f,
    21 * _0x7b613f,
    95 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    9 * _0x7b613f,
    83 * _0x7b613f,
    17 * _0x7b613f,
    93 * _0x7b613f,
    4 * _0x7b613f,
    76 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    11 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    75 * _0x7b613f,
    18 * _0x7b613f,
    75 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    13 * _0x7b613f,
    67 * _0x7b613f,
    13 * _0x7b613f,
    67 * _0x7b613f,
    7 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    14 * _0x7b613f,
    59 * _0x7b613f,
    14 * _0x7b613f,
    59 * _0x7b613f,
    21 * _0x7b613f,
    59 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    46 * _0x7b613f,
    35 * _0x7b613f,
    35 * _0x7b613f,
    45 * _0x7b613f,
    49 * _0x7b613f,
    31 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    53 * _0x7b613f,
    24 * _0x7b613f,
    51 * _0x7b613f,
    21 * _0x7b613f,
    51 * _0x7b613f,
    16 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    63 * _0x7b613f,
    23 * _0x7b613f,
    63 * _0x7b613f,
    24 * _0x7b613f,
    69 * _0x7b613f,
    29 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    76 * _0x7b613f,
    7 * _0x7b613f,
    75 * _0x7b613f,
    11 * _0x7b613f,
    76 * _0x7b613f,
    6 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    81 * _0x7b613f,
    12 * _0x7b613f,
    84 * _0x7b613f,
    18 * _0x7b613f,
    89 * _0x7b613f,
    27 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    95 * _0x7b613f,
    25 * _0x7b613f,
    100 * _0x7b613f,
    16 * _0x7b613f,
    105 * _0x7b613f,
    14 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    103 * _0x7b613f,
    25 * _0x7b613f,
    111 * _0x7b613f,
    33 * _0x7b613f,
    110 * _0x7b613f,
    34 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    123 * _0x7b613f,
    48 * _0x7b613f,
    123 * _0x7b613f,
    48 * _0x7b613f,
    136 * _0x7b613f,
    62 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    142 * _0x7b613f,
    60 * _0x7b613f,
    147 * _0x7b613f,
    59 * _0x7b613f,
    155 * _0x7b613f,
    58 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    147 * _0x7b613f,
    65 * _0x7b613f,
    147 * _0x7b613f,
    65 * _0x7b613f,
    139 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    73 * _0x7b613f,
    145 * _0x7b613f,
    73 * _0x7b613f,
    151 * _0x7b613f,
    73 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    145 * _0x7b613f,
    80 * _0x7b613f,
    145 * _0x7b613f,
    80 * _0x7b613f,
    138 * _0x7b613f,
    87 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    144 * _0x7b613f,
    88 * _0x7b613f,
    144 * _0x7b613f,
    88 * _0x7b613f,
    150 * _0x7b613f,
    89 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    125 * _0x7b613f,
    103 * _0x7b613f,
    125 * _0x7b613f,
    125 * _0x7b613f,
    113 * _0x7b613f,
    141 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    92 * _0x7b613f,
    178 * _0x7b613f,
    85 * _0x7b613f,
    177 * _0x7b613f,
    76 * _0x7b613f,
    178 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    64 * _0x7b613f,
    179 * _0x7b613f,
    51 * _0x7b613f,
    164 * _0x7b613f,
    35 * _0x7b613f,
    131 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    18 * _0x7b613f,
    95 * _0x7b613f,
    13 * _0x7b613f,
    99 * _0x7b613f,
    8 * _0x7b613f,
    93 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, undefined, _0x4624be[2], 4 * _0x7b613f);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(25 * _0x7b613f, 63 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    16 * _0x7b613f,
    58 * _0x7b613f,
    17 * _0x7b613f,
    51 * _0x7b613f,
    17 * _0x7b613f,
    33 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    19 * _0x7b613f,
    12 * _0x7b613f,
    21 * _0x7b613f,
    12 * _0x7b613f,
    32 * _0x7b613f,
    17 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    63 * _0x7b613f,
    31 * _0x7b613f,
    66 * _0x7b613f,
    45 * _0x7b613f,
    66 * _0x7b613f,
    54 * _0x7b613f
  );
  fill_path(_0x5aaab2, _0x4624be[1], _0x4624be[2], 4 * _0x7b613f);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(91 * _0x7b613f, 53 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    91 * _0x7b613f,
    40 * _0x7b613f,
    98 * _0x7b613f,
    33 * _0x7b613f,
    121 * _0x7b613f,
    20 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    137 * _0x7b613f,
    12 * _0x7b613f,
    137 * _0x7b613f,
    16 * _0x7b613f,
    139 * _0x7b613f,
    27 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    141 * _0x7b613f,
    49 * _0x7b613f,
    140 * _0x7b613f,
    57 * _0x7b613f,
    134 * _0x7b613f,
    64 * _0x7b613f
  );
  fill_path(_0x5aaab2, _0x4624be[1], _0x4624be[2], 4 * _0x7b613f);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(31 * _0x7b613f, 63 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    23 * _0x7b613f,
    54 * _0x7b613f,
    24 * _0x7b613f,
    47 * _0x7b613f,
    26 * _0x7b613f,
    37 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    28 * _0x7b613f,
    29 * _0x7b613f,
    31 * _0x7b613f,
    31 * _0x7b613f,
    41 * _0x7b613f,
    35 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    52 * _0x7b613f,
    45 * _0x7b613f,
    55 * _0x7b613f,
    51 * _0x7b613f,
    57 * _0x7b613f,
    53 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    50 * _0x7b613f,
    50 * _0x7b613f,
    44 * _0x7b613f,
    47 * _0x7b613f,
    43 * _0x7b613f,
    48 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    43 * _0x7b613f,
    52 * _0x7b613f,
    43 * _0x7b613f,
    52 * _0x7b613f,
    42 * _0x7b613f,
    57 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    38 * _0x7b613f,
    54 * _0x7b613f,
    38 * _0x7b613f,
    54 * _0x7b613f,
    33 * _0x7b613f,
    51 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    34 * _0x7b613f,
    56 * _0x7b613f,
    34 * _0x7b613f,
    56 * _0x7b613f,
    34 * _0x7b613f,
    61 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[3]);
  _0x5aaab2.beginPath();
  _0x5aaab2.lineCap = "round";
  _0x5aaab2.lineJoin = "round";
  _0x5aaab2.moveTo(99 * _0x7b613f, 55 * _0x7b613f);
  _0x5aaab2.bezierCurveTo(
    107 * _0x7b613f,
    43 * _0x7b613f,
    113 * _0x7b613f,
    39 * _0x7b613f,
    121 * _0x7b613f,
    34 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    130 * _0x7b613f,
    29 * _0x7b613f,
    130 * _0x7b613f,
    34 * _0x7b613f,
    130 * _0x7b613f,
    42 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    131 * _0x7b613f,
    57 * _0x7b613f,
    128 * _0x7b613f,
    61 * _0x7b613f,
    129 * _0x7b613f,
    63 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    124 * _0x7b613f,
    62 * _0x7b613f,
    124 * _0x7b613f,
    62 * _0x7b613f,
    119 * _0x7b613f,
    61 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    119 * _0x7b613f,
    56 * _0x7b613f,
    120 * _0x7b613f,
    61 * _0x7b613f,
    118 * _0x7b613f,
    52 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    115 * _0x7b613f,
    55 * _0x7b613f,
    111 * _0x7b613f,
    59 * _0x7b613f,
    111 * _0x7b613f,
    58 * _0x7b613f
  );
  _0x5aaab2.bezierCurveTo(
    110 * _0x7b613f,
    54 * _0x7b613f,
    109 * _0x7b613f,
    57 * _0x7b613f,
    109 * _0x7b613f,
    51 * _0x7b613f
  );
  _0x5aaab2.closePath();
  fill_path(_0x5aaab2, _0x4624be[3]);
  return _0x1d32fc;
}
function create_hurt_fox_winter(_0x2f4b3b, _0xfa0422) {
  var _0x8b80fa = document.createElement("canvas");
  var _0x42c324 = _0x8b80fa.getContext("2d");
  _0x8b80fa.width = 161 * _0x2f4b3b;
  _0x8b80fa.height = 190 * _0x2f4b3b;
  _0x42c324.beginPath();
  _0x42c324.lineCap = "round";
  _0x42c324.lineJoin = "round";
  _0x42c324.moveTo(9 * _0x2f4b3b, 93 * _0x2f4b3b);
  _0x42c324.bezierCurveTo(
    17 * _0x2f4b3b,
    95 * _0x2f4b3b,
    19 * _0x2f4b3b,
    95 * _0x2f4b3b,
    21 * _0x2f4b3b,
    95 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    9 * _0x2f4b3b,
    83 * _0x2f4b3b,
    17 * _0x2f4b3b,
    93 * _0x2f4b3b,
    4 * _0x2f4b3b,
    76 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    11 * _0x2f4b3b,
    75 * _0x2f4b3b,
    11 * _0x2f4b3b,
    75 * _0x2f4b3b,
    18 * _0x2f4b3b,
    75 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    13 * _0x2f4b3b,
    67 * _0x2f4b3b,
    13 * _0x2f4b3b,
    67 * _0x2f4b3b,
    7 * _0x2f4b3b,
    59 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    14 * _0x2f4b3b,
    59 * _0x2f4b3b,
    14 * _0x2f4b3b,
    59 * _0x2f4b3b,
    21 * _0x2f4b3b,
    59 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    46 * _0x2f4b3b,
    35 * _0x2f4b3b,
    35 * _0x2f4b3b,
    45 * _0x2f4b3b,
    49 * _0x2f4b3b,
    31 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    53 * _0x2f4b3b,
    24 * _0x2f4b3b,
    51 * _0x2f4b3b,
    21 * _0x2f4b3b,
    51 * _0x2f4b3b,
    16 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    63 * _0x2f4b3b,
    23 * _0x2f4b3b,
    63 * _0x2f4b3b,
    24 * _0x2f4b3b,
    69 * _0x2f4b3b,
    29 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    76 * _0x2f4b3b,
    7 * _0x2f4b3b,
    75 * _0x2f4b3b,
    11 * _0x2f4b3b,
    76 * _0x2f4b3b,
    6 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    81 * _0x2f4b3b,
    12 * _0x2f4b3b,
    84 * _0x2f4b3b,
    18 * _0x2f4b3b,
    89 * _0x2f4b3b,
    27 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    95 * _0x2f4b3b,
    25 * _0x2f4b3b,
    100 * _0x2f4b3b,
    16 * _0x2f4b3b,
    105 * _0x2f4b3b,
    14 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    103 * _0x2f4b3b,
    25 * _0x2f4b3b,
    111 * _0x2f4b3b,
    33 * _0x2f4b3b,
    110 * _0x2f4b3b,
    34 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    123 * _0x2f4b3b,
    48 * _0x2f4b3b,
    123 * _0x2f4b3b,
    48 * _0x2f4b3b,
    136 * _0x2f4b3b,
    62 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    142 * _0x2f4b3b,
    60 * _0x2f4b3b,
    147 * _0x2f4b3b,
    59 * _0x2f4b3b,
    155 * _0x2f4b3b,
    58 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    147 * _0x2f4b3b,
    65 * _0x2f4b3b,
    147 * _0x2f4b3b,
    65 * _0x2f4b3b,
    139 * _0x2f4b3b,
    73 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    145 * _0x2f4b3b,
    73 * _0x2f4b3b,
    145 * _0x2f4b3b,
    73 * _0x2f4b3b,
    151 * _0x2f4b3b,
    73 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    145 * _0x2f4b3b,
    80 * _0x2f4b3b,
    145 * _0x2f4b3b,
    80 * _0x2f4b3b,
    138 * _0x2f4b3b,
    87 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    144 * _0x2f4b3b,
    88 * _0x2f4b3b,
    144 * _0x2f4b3b,
    88 * _0x2f4b3b,
    150 * _0x2f4b3b,
    89 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    125 * _0x2f4b3b,
    103 * _0x2f4b3b,
    125 * _0x2f4b3b,
    125 * _0x2f4b3b,
    113 * _0x2f4b3b,
    141 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    92 * _0x2f4b3b,
    178 * _0x2f4b3b,
    85 * _0x2f4b3b,
    177 * _0x2f4b3b,
    76 * _0x2f4b3b,
    178 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    64 * _0x2f4b3b,
    179 * _0x2f4b3b,
    51 * _0x2f4b3b,
    164 * _0x2f4b3b,
    35 * _0x2f4b3b,
    131 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    18 * _0x2f4b3b,
    95 * _0x2f4b3b,
    13 * _0x2f4b3b,
    99 * _0x2f4b3b,
    8 * _0x2f4b3b,
    93 * _0x2f4b3b
  );
  _0x42c324.closePath();
  fill_path(_0x42c324, _0xfa0422, _0xfa0422, 4 * _0x2f4b3b);
  _0x42c324.beginPath();
  _0x42c324.lineCap = "round";
  _0x42c324.lineJoin = "round";
  _0x42c324.moveTo(25 * _0x2f4b3b, 63 * _0x2f4b3b);
  _0x42c324.bezierCurveTo(
    16 * _0x2f4b3b,
    58 * _0x2f4b3b,
    17 * _0x2f4b3b,
    51 * _0x2f4b3b,
    17 * _0x2f4b3b,
    33 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    19 * _0x2f4b3b,
    12 * _0x2f4b3b,
    21 * _0x2f4b3b,
    12 * _0x2f4b3b,
    32 * _0x2f4b3b,
    17 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    63 * _0x2f4b3b,
    31 * _0x2f4b3b,
    66 * _0x2f4b3b,
    45 * _0x2f4b3b,
    66 * _0x2f4b3b,
    54 * _0x2f4b3b
  );
  fill_path(_0x42c324, _0xfa0422, _0xfa0422, 4 * _0x2f4b3b);
  _0x42c324.beginPath();
  _0x42c324.lineCap = "round";
  _0x42c324.lineJoin = "round";
  _0x42c324.moveTo(91 * _0x2f4b3b, 53 * _0x2f4b3b);
  _0x42c324.bezierCurveTo(
    91 * _0x2f4b3b,
    40 * _0x2f4b3b,
    98 * _0x2f4b3b,
    33 * _0x2f4b3b,
    121 * _0x2f4b3b,
    20 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    137 * _0x2f4b3b,
    12 * _0x2f4b3b,
    137 * _0x2f4b3b,
    16 * _0x2f4b3b,
    139 * _0x2f4b3b,
    27 * _0x2f4b3b
  );
  _0x42c324.bezierCurveTo(
    141 * _0x2f4b3b,
    49 * _0x2f4b3b,
    140 * _0x2f4b3b,
    57 * _0x2f4b3b,
    134 * _0x2f4b3b,
    64 * _0x2f4b3b
  );
  fill_path(_0x42c324, _0xfa0422, _0xfa0422, 4 * _0x2f4b3b);
  return _0x8b80fa;
}
function create_polar_bear(_0x47ca21, _0x5a9235) {
  var _0x2d68e0 = document.createElement("canvas");
  var _0x3229e4 = _0x2d68e0.getContext("2d");
  _0x2d68e0.width = 147 * _0x47ca21;
  _0x2d68e0.height = 172 * _0x47ca21;
  _0x3229e4.globalAlpha = 0.5;
  _0x3229e4.translate(0, 8 * _0x47ca21);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(8 * _0x47ca21, 50 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    15 * _0x47ca21,
    16 * _0x47ca21,
    49 * _0x47ca21,
    6 * _0x47ca21,
    67 * _0x47ca21,
    6 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    121 * _0x47ca21,
    3 * _0x47ca21,
    128 * _0x47ca21,
    32 * _0x47ca21,
    135 * _0x47ca21,
    48 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    146 * _0x47ca21,
    96 * _0x47ca21,
    124 * _0x47ca21,
    131 * _0x47ca21,
    96 * _0x47ca21,
    135 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    96 * _0x47ca21,
    158 * _0x47ca21,
    79 * _0x47ca21,
    156 * _0x47ca21,
    75 * _0x47ca21,
    156 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    50 * _0x47ca21,
    154 * _0x47ca21,
    53 * _0x47ca21,
    150 * _0x47ca21,
    52 * _0x47ca21,
    135 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    2 * _0x47ca21,
    127 * _0x47ca21,
    3 * _0x47ca21,
    87 * _0x47ca21,
    8 * _0x47ca21,
    50 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[0]);
  _0x3229e4.translate(0, -8 * _0x47ca21);
  _0x3229e4.globalAlpha = 1;
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(8 * _0x47ca21, 50 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    15 * _0x47ca21,
    16 * _0x47ca21,
    49 * _0x47ca21,
    6 * _0x47ca21,
    67 * _0x47ca21,
    6 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    121 * _0x47ca21,
    3 * _0x47ca21,
    128 * _0x47ca21,
    32 * _0x47ca21,
    135 * _0x47ca21,
    48 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    146 * _0x47ca21,
    96 * _0x47ca21,
    124 * _0x47ca21,
    131 * _0x47ca21,
    96 * _0x47ca21,
    135 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    96 * _0x47ca21,
    158 * _0x47ca21,
    79 * _0x47ca21,
    156 * _0x47ca21,
    75 * _0x47ca21,
    156 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    50 * _0x47ca21,
    154 * _0x47ca21,
    53 * _0x47ca21,
    150 * _0x47ca21,
    52 * _0x47ca21,
    135 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    2 * _0x47ca21,
    127 * _0x47ca21,
    3 * _0x47ca21,
    87 * _0x47ca21,
    8 * _0x47ca21,
    50 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[1], _0x5a9235[2], 4 * _0x47ca21);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(14 * _0x47ca21, 57 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    2 * _0x47ca21,
    50 * _0x47ca21,
    5 * _0x47ca21,
    22 * _0x47ca21,
    24 * _0x47ca21,
    22 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    41 * _0x47ca21,
    21 * _0x47ca21,
    54 * _0x47ca21,
    32 * _0x47ca21,
    55 * _0x47ca21,
    48 * _0x47ca21
  );
  fill_path(_0x3229e4, _0x5a9235[1], _0x5a9235[2], 4 * _0x47ca21);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(93 * _0x47ca21, 47 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    94 * _0x47ca21,
    24 * _0x47ca21,
    116 * _0x47ca21,
    21 * _0x47ca21,
    120 * _0x47ca21,
    20 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    144 * _0x47ca21,
    17 * _0x47ca21,
    146 * _0x47ca21,
    52 * _0x47ca21,
    133 * _0x47ca21,
    58 * _0x47ca21
  );
  fill_path(_0x3229e4, _0x5a9235[1], _0x5a9235[2], 4 * _0x47ca21);
  circle(_0x3229e4, 51 * _0x47ca21, 91 * _0x47ca21, 9 * _0x47ca21);
  fill_path(_0x3229e4, _0x5a9235[3]);
  circle(_0x3229e4, 95 * _0x47ca21, 91 * _0x47ca21, 9 * _0x47ca21);
  fill_path(_0x3229e4, _0x5a9235[3]);
  circle(_0x3229e4, 91 * _0x47ca21, 89 * _0x47ca21, 4 * _0x47ca21);
  fill_path(_0x3229e4, _0x5a9235[4]);
  circle(_0x3229e4, 47 * _0x47ca21, 89 * _0x47ca21, 4 * _0x47ca21);
  fill_path(_0x3229e4, _0x5a9235[4]);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(54 * _0x47ca21, 133 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    56 * _0x47ca21,
    108 * _0x47ca21,
    64 * _0x47ca21,
    99 * _0x47ca21,
    73 * _0x47ca21,
    98 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    86 * _0x47ca21,
    97 * _0x47ca21,
    91 * _0x47ca21,
    119 * _0x47ca21,
    93 * _0x47ca21,
    133 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    94 * _0x47ca21,
    155 * _0x47ca21,
    90 * _0x47ca21,
    150 * _0x47ca21,
    74 * _0x47ca21,
    155 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    50 * _0x47ca21,
    152 * _0x47ca21,
    55 * _0x47ca21,
    145 * _0x47ca21,
    54 * _0x47ca21,
    134 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[5]);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(65.25 * _0x47ca21, 135 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    75.25 * _0x47ca21,
    128 * _0x47ca21,
    83.25 * _0x47ca21,
    133 * _0x47ca21,
    83.25 * _0x47ca21,
    138 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    88.25 * _0x47ca21,
    148 * _0x47ca21,
    61.25 * _0x47ca21,
    149 * _0x47ca21,
    64.25 * _0x47ca21,
    137 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[6]);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(74 * _0x47ca21, 145 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    74 * _0x47ca21,
    148 * _0x47ca21,
    74 * _0x47ca21,
    148 * _0x47ca21,
    74 * _0x47ca21,
    151 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, undefined, _0x5a9235[6], 2 * _0x47ca21);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(19 * _0x47ca21, 58 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    10 * _0x47ca21,
    38 * _0x47ca21,
    18 * _0x47ca21,
    33 * _0x47ca21,
    28 * _0x47ca21,
    34 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    41 * _0x47ca21,
    39 * _0x47ca21,
    45 * _0x47ca21,
    45 * _0x47ca21,
    50 * _0x47ca21,
    51 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[6]);
  _0x3229e4.beginPath();
  _0x3229e4.lineCap = "round";
  _0x3229e4.lineJoin = "round";
  _0x3229e4.moveTo(100 * _0x47ca21, 51 * _0x47ca21);
  _0x3229e4.bezierCurveTo(
    106 * _0x47ca21,
    36 * _0x47ca21,
    119 * _0x47ca21,
    31 * _0x47ca21,
    128 * _0x47ca21,
    36 * _0x47ca21
  );
  _0x3229e4.bezierCurveTo(
    137 * _0x47ca21,
    49 * _0x47ca21,
    128 * _0x47ca21,
    58 * _0x47ca21,
    128 * _0x47ca21,
    60 * _0x47ca21
  );
  _0x3229e4.closePath();
  fill_path(_0x3229e4, _0x5a9235[6]);
  return _0x2d68e0;
}
function create_hurt_polar_bear(_0x5026b2, _0x48dc78) {
  var _0x1fb3e3 = document.createElement("canvas");
  var _0x3d0604 = _0x1fb3e3.getContext("2d");
  _0x1fb3e3.width = 147 * _0x5026b2;
  _0x1fb3e3.height = 172 * _0x5026b2;
  _0x3d0604.beginPath();
  _0x3d0604.lineCap = "round";
  _0x3d0604.lineJoin = "round";
  _0x3d0604.moveTo(8 * _0x5026b2, 50 * _0x5026b2);
  _0x3d0604.bezierCurveTo(
    15 * _0x5026b2,
    16 * _0x5026b2,
    49 * _0x5026b2,
    6 * _0x5026b2,
    67 * _0x5026b2,
    6 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    121 * _0x5026b2,
    3 * _0x5026b2,
    128 * _0x5026b2,
    32 * _0x5026b2,
    135 * _0x5026b2,
    48 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    146 * _0x5026b2,
    96 * _0x5026b2,
    124 * _0x5026b2,
    131 * _0x5026b2,
    96 * _0x5026b2,
    135 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    96 * _0x5026b2,
    158 * _0x5026b2,
    79 * _0x5026b2,
    156 * _0x5026b2,
    75 * _0x5026b2,
    156 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    50 * _0x5026b2,
    154 * _0x5026b2,
    53 * _0x5026b2,
    150 * _0x5026b2,
    52 * _0x5026b2,
    135 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    2 * _0x5026b2,
    127 * _0x5026b2,
    3 * _0x5026b2,
    87 * _0x5026b2,
    8 * _0x5026b2,
    50 * _0x5026b2
  );
  _0x3d0604.closePath();
  fill_path(_0x3d0604, _0x48dc78, _0x48dc78, 4 * _0x5026b2);
  _0x3d0604.beginPath();
  _0x3d0604.lineCap = "round";
  _0x3d0604.lineJoin = "round";
  _0x3d0604.moveTo(14 * _0x5026b2, 57 * _0x5026b2);
  _0x3d0604.bezierCurveTo(
    2 * _0x5026b2,
    50 * _0x5026b2,
    5 * _0x5026b2,
    22 * _0x5026b2,
    24 * _0x5026b2,
    22 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    41 * _0x5026b2,
    21 * _0x5026b2,
    54 * _0x5026b2,
    32 * _0x5026b2,
    55 * _0x5026b2,
    48 * _0x5026b2
  );
  fill_path(_0x3d0604, _0x48dc78, _0x48dc78, 4 * _0x5026b2);
  _0x3d0604.beginPath();
  _0x3d0604.lineCap = "round";
  _0x3d0604.lineJoin = "round";
  _0x3d0604.moveTo(93 * _0x5026b2, 47 * _0x5026b2);
  _0x3d0604.bezierCurveTo(
    94 * _0x5026b2,
    24 * _0x5026b2,
    116 * _0x5026b2,
    21 * _0x5026b2,
    120 * _0x5026b2,
    20 * _0x5026b2
  );
  _0x3d0604.bezierCurveTo(
    144 * _0x5026b2,
    17 * _0x5026b2,
    146 * _0x5026b2,
    52 * _0x5026b2,
    133 * _0x5026b2,
    58 * _0x5026b2
  );
  fill_path(_0x3d0604, _0x48dc78, _0x48dc78, 4 * _0x5026b2);
  return _0x1fb3e3;
}
function create_dragon(_0x5d25b9, _0x19b126) {
  var _0x2fa086 = document.createElement("canvas");
  var _0x221e59 = _0x2fa086.getContext("2d");
  _0x2fa086.width = 271 * _0x5d25b9;
  _0x2fa086.height = 366 * _0x5d25b9;
  _0x221e59.globalAlpha = 0.5;
  _0x221e59.translate(0, 10 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 99 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    186 * _0x5d25b9,
    123 * _0x5d25b9,
    199 * _0x5d25b9,
    152 * _0x5d25b9,
    209 * _0x5d25b9,
    169 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    228 * _0x5d25b9,
    205 * _0x5d25b9,
    224 * _0x5d25b9,
    245 * _0x5d25b9,
    190 * _0x5d25b9,
    276 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    296 * _0x5d25b9,
    99 * _0x5d25b9,
    292 * _0x5d25b9,
    79 * _0x5d25b9,
    274 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    49 * _0x5d25b9,
    253 * _0x5d25b9,
    47 * _0x5d25b9,
    214 * _0x5d25b9,
    50 * _0x5d25b9,
    197 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    61 * _0x5d25b9,
    143 * _0x5d25b9,
    102 * _0x5d25b9,
    113 * _0x5d25b9,
    131 * _0x5d25b9,
    99 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(73 * _0x5d25b9, 270 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    79 * _0x5d25b9,
    280 * _0x5d25b9,
    77 * _0x5d25b9,
    280 * _0x5d25b9,
    78 * _0x5d25b9,
    287 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    78 * _0x5d25b9,
    290 * _0x5d25b9,
    83 * _0x5d25b9,
    291 * _0x5d25b9,
    82 * _0x5d25b9,
    299 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    81 * _0x5d25b9,
    301 * _0x5d25b9,
    87 * _0x5d25b9,
    301 * _0x5d25b9,
    92 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    94 * _0x5d25b9,
    319 * _0x5d25b9,
    100 * _0x5d25b9,
    321 * _0x5d25b9,
    107 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    323 * _0x5d25b9,
    114 * _0x5d25b9,
    324 * _0x5d25b9,
    119 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    321 * _0x5d25b9,
    146 * _0x5d25b9,
    323 * _0x5d25b9,
    139 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    324 * _0x5d25b9,
    150 * _0x5d25b9,
    324 * _0x5d25b9,
    153 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    168 * _0x5d25b9,
    319 * _0x5d25b9,
    171 * _0x5d25b9,
    316 * _0x5d25b9,
    173 * _0x5d25b9,
    307 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    180 * _0x5d25b9,
    305 * _0x5d25b9,
    180 * _0x5d25b9,
    301 * _0x5d25b9,
    178 * _0x5d25b9,
    296 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    183 * _0x5d25b9,
    296 * _0x5d25b9,
    185 * _0x5d25b9,
    289 * _0x5d25b9,
    188 * _0x5d25b9,
    279 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    171 * _0x5d25b9,
    286 * _0x5d25b9,
    149 * _0x5d25b9,
    290 * _0x5d25b9,
    132 * _0x5d25b9,
    289 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    101 * _0x5d25b9,
    290 * _0x5d25b9,
    86 * _0x5d25b9,
    280 * _0x5d25b9,
    74 * _0x5d25b9,
    271 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(76 * _0x5d25b9, 252 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    85 * _0x5d25b9,
    294 * _0x5d25b9,
    96 * _0x5d25b9,
    314 * _0x5d25b9,
    103 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    316 * _0x5d25b9,
    151 * _0x5d25b9,
    314 * _0x5d25b9,
    156 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    169 * _0x5d25b9,
    317 * _0x5d25b9,
    182 * _0x5d25b9,
    285 * _0x5d25b9,
    191 * _0x5d25b9,
    256 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    78 * _0x5d25b9,
    252 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(84 * _0x5d25b9, 257 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    273 * _0x5d25b9,
    146 * _0x5d25b9,
    268 * _0x5d25b9,
    179 * _0x5d25b9,
    261 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    190 * _0x5d25b9,
    258 * _0x5d25b9,
    187 * _0x5d25b9,
    266 * _0x5d25b9,
    178 * _0x5d25b9,
    272 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    160 * _0x5d25b9,
    284 * _0x5d25b9,
    123 * _0x5d25b9,
    282 * _0x5d25b9,
    100 * _0x5d25b9,
    277 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    73 * _0x5d25b9,
    260 * _0x5d25b9,
    79 * _0x5d25b9,
    257 * _0x5d25b9,
    84 * _0x5d25b9,
    257 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(125 * _0x5d25b9, 65 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    133 * _0x5d25b9,
    45 * _0x5d25b9,
    136 * _0x5d25b9,
    42 * _0x5d25b9,
    141 * _0x5d25b9,
    55 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    151 * _0x5d25b9,
    96 * _0x5d25b9,
    164 * _0x5d25b9,
    117 * _0x5d25b9,
    175 * _0x5d25b9,
    134 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    203 * _0x5d25b9,
    181 * _0x5d25b9,
    207 * _0x5d25b9,
    182 * _0x5d25b9,
    208 * _0x5d25b9,
    215 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    206 * _0x5d25b9,
    240 * _0x5d25b9,
    205 * _0x5d25b9,
    246 * _0x5d25b9,
    184 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    267 * _0x5d25b9,
    131 * _0x5d25b9,
    272 * _0x5d25b9,
    86 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    67 * _0x5d25b9,
    252 * _0x5d25b9,
    68 * _0x5d25b9,
    239 * _0x5d25b9,
    64 * _0x5d25b9,
    216 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    62 * _0x5d25b9,
    194 * _0x5d25b9,
    72 * _0x5d25b9,
    169 * _0x5d25b9,
    92 * _0x5d25b9,
    142 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    121 * _0x5d25b9,
    114 * _0x5d25b9,
    101 * _0x5d25b9,
    125 * _0x5d25b9,
    65 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(115 * _0x5d25b9, 37 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    116 * _0x5d25b9,
    28 * _0x5d25b9,
    119 * _0x5d25b9,
    27 * _0x5d25b9,
    126 * _0x5d25b9,
    37 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134 * _0x5d25b9,
    48 * _0x5d25b9,
    134 * _0x5d25b9,
    49 * _0x5d25b9,
    132 * _0x5d25b9,
    59 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    131 * _0x5d25b9,
    67 * _0x5d25b9,
    127 * _0x5d25b9,
    65 * _0x5d25b9,
    120 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    49 * _0x5d25b9,
    113 * _0x5d25b9,
    43 * _0x5d25b9,
    115 * _0x5d25b9,
    38 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(146 * _0x5d25b9, 34 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    152 * _0x5d25b9,
    28 * _0x5d25b9,
    155 * _0x5d25b9,
    27 * _0x5d25b9,
    157 * _0x5d25b9,
    39 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    157 * _0x5d25b9,
    45 * _0x5d25b9,
    157 * _0x5d25b9,
    49 * _0x5d25b9,
    150 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    57 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    50 * _0x5d25b9,
    137 * _0x5d25b9,
    47 * _0x5d25b9,
    141 * _0x5d25b9,
    42 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(143 * _0x5d25b9, 69 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    56 * _0x5d25b9,
    156 * _0x5d25b9,
    50 * _0x5d25b9,
    158 * _0x5d25b9,
    58 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    159 * _0x5d25b9,
    64 * _0x5d25b9,
    160 * _0x5d25b9,
    67 * _0x5d25b9,
    153 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    83 * _0x5d25b9,
    145 * _0x5d25b9,
    84 * _0x5d25b9,
    143 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(149 * _0x5d25b9, 92 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    149 * _0x5d25b9,
    89 * _0x5d25b9,
    151 * _0x5d25b9,
    84 * _0x5d25b9,
    156 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    73 * _0x5d25b9,
    163 * _0x5d25b9,
    78 * _0x5d25b9,
    162 * _0x5d25b9,
    86 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    91 * _0x5d25b9,
    155 * _0x5d25b9,
    99 * _0x5d25b9,
    152 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(111 * _0x5d25b9, 61 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    51 * _0x5d25b9,
    117 * _0x5d25b9,
    51 * _0x5d25b9,
    124 * _0x5d25b9,
    64 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    128 * _0x5d25b9,
    68 * _0x5d25b9,
    128 * _0x5d25b9,
    76 * _0x5d25b9,
    126 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    123 * _0x5d25b9,
    84 * _0x5d25b9,
    122 * _0x5d25b9,
    82 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    112 * _0x5d25b9,
    67 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    68 * _0x5d25b9,
    111 * _0x5d25b9,
    66 * _0x5d25b9,
    111 * _0x5d25b9,
    62 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(107 * _0x5d25b9, 81 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    108 * _0x5d25b9,
    74 * _0x5d25b9,
    112 * _0x5d25b9,
    73 * _0x5d25b9,
    118 * _0x5d25b9,
    84 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    88 * _0x5d25b9,
    122 * _0x5d25b9,
    93 * _0x5d25b9,
    121 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    98 * _0x5d25b9,
    113 * _0x5d25b9,
    98 * _0x5d25b9,
    109 * _0x5d25b9,
    90 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    107 * _0x5d25b9,
    87 * _0x5d25b9,
    106 * _0x5d25b9,
    85 * _0x5d25b9,
    107 * _0x5d25b9,
    82 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[0]);
  _0x221e59.globalAlpha = 1;
  _0x221e59.translate(0, -10 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 99 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    186 * _0x5d25b9,
    123 * _0x5d25b9,
    199 * _0x5d25b9,
    152 * _0x5d25b9,
    209 * _0x5d25b9,
    169 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    228 * _0x5d25b9,
    205 * _0x5d25b9,
    224 * _0x5d25b9,
    245 * _0x5d25b9,
    190 * _0x5d25b9,
    276 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    296 * _0x5d25b9,
    99 * _0x5d25b9,
    292 * _0x5d25b9,
    79 * _0x5d25b9,
    274 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    49 * _0x5d25b9,
    253 * _0x5d25b9,
    47 * _0x5d25b9,
    214 * _0x5d25b9,
    50 * _0x5d25b9,
    197 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    61 * _0x5d25b9,
    143 * _0x5d25b9,
    102 * _0x5d25b9,
    113 * _0x5d25b9,
    131 * _0x5d25b9,
    99 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(73 * _0x5d25b9, 270 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    79 * _0x5d25b9,
    280 * _0x5d25b9,
    77 * _0x5d25b9,
    280 * _0x5d25b9,
    78 * _0x5d25b9,
    287 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    78 * _0x5d25b9,
    290 * _0x5d25b9,
    83 * _0x5d25b9,
    291 * _0x5d25b9,
    82 * _0x5d25b9,
    299 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    81 * _0x5d25b9,
    301 * _0x5d25b9,
    87 * _0x5d25b9,
    301 * _0x5d25b9,
    92 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    94 * _0x5d25b9,
    319 * _0x5d25b9,
    100 * _0x5d25b9,
    321 * _0x5d25b9,
    107 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    323 * _0x5d25b9,
    114 * _0x5d25b9,
    324 * _0x5d25b9,
    119 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    321 * _0x5d25b9,
    146 * _0x5d25b9,
    323 * _0x5d25b9,
    139 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    324 * _0x5d25b9,
    150 * _0x5d25b9,
    324 * _0x5d25b9,
    153 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    168 * _0x5d25b9,
    319 * _0x5d25b9,
    171 * _0x5d25b9,
    316 * _0x5d25b9,
    173 * _0x5d25b9,
    307 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    180 * _0x5d25b9,
    305 * _0x5d25b9,
    180 * _0x5d25b9,
    301 * _0x5d25b9,
    178 * _0x5d25b9,
    296 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    183 * _0x5d25b9,
    296 * _0x5d25b9,
    185 * _0x5d25b9,
    289 * _0x5d25b9,
    188 * _0x5d25b9,
    279 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    171 * _0x5d25b9,
    286 * _0x5d25b9,
    149 * _0x5d25b9,
    290 * _0x5d25b9,
    132 * _0x5d25b9,
    289 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    101 * _0x5d25b9,
    290 * _0x5d25b9,
    86 * _0x5d25b9,
    280 * _0x5d25b9,
    74 * _0x5d25b9,
    271 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(76 * _0x5d25b9, 252 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    85 * _0x5d25b9,
    294 * _0x5d25b9,
    96 * _0x5d25b9,
    314 * _0x5d25b9,
    103 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    316 * _0x5d25b9,
    151 * _0x5d25b9,
    314 * _0x5d25b9,
    156 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    169 * _0x5d25b9,
    317 * _0x5d25b9,
    182 * _0x5d25b9,
    285 * _0x5d25b9,
    191 * _0x5d25b9,
    256 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    78 * _0x5d25b9,
    252 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(84 * _0x5d25b9, 257 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    273 * _0x5d25b9,
    146 * _0x5d25b9,
    268 * _0x5d25b9,
    179 * _0x5d25b9,
    261 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    190 * _0x5d25b9,
    258 * _0x5d25b9,
    187 * _0x5d25b9,
    266 * _0x5d25b9,
    178 * _0x5d25b9,
    272 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    160 * _0x5d25b9,
    284 * _0x5d25b9,
    123 * _0x5d25b9,
    282 * _0x5d25b9,
    100 * _0x5d25b9,
    277 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    73 * _0x5d25b9,
    260 * _0x5d25b9,
    79 * _0x5d25b9,
    257 * _0x5d25b9,
    84 * _0x5d25b9,
    257 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(125 * _0x5d25b9, 65 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    133 * _0x5d25b9,
    45 * _0x5d25b9,
    136 * _0x5d25b9,
    42 * _0x5d25b9,
    141 * _0x5d25b9,
    55 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    151 * _0x5d25b9,
    96 * _0x5d25b9,
    164 * _0x5d25b9,
    117 * _0x5d25b9,
    175 * _0x5d25b9,
    134 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    203 * _0x5d25b9,
    181 * _0x5d25b9,
    207 * _0x5d25b9,
    182 * _0x5d25b9,
    208 * _0x5d25b9,
    215 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    206 * _0x5d25b9,
    240 * _0x5d25b9,
    205 * _0x5d25b9,
    246 * _0x5d25b9,
    184 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    267 * _0x5d25b9,
    131 * _0x5d25b9,
    272 * _0x5d25b9,
    86 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    67 * _0x5d25b9,
    252 * _0x5d25b9,
    68 * _0x5d25b9,
    239 * _0x5d25b9,
    64 * _0x5d25b9,
    216 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    62 * _0x5d25b9,
    194 * _0x5d25b9,
    72 * _0x5d25b9,
    169 * _0x5d25b9,
    92 * _0x5d25b9,
    142 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    121 * _0x5d25b9,
    114 * _0x5d25b9,
    101 * _0x5d25b9,
    125 * _0x5d25b9,
    65 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(115 * _0x5d25b9, 37 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    116 * _0x5d25b9,
    28 * _0x5d25b9,
    119 * _0x5d25b9,
    27 * _0x5d25b9,
    126 * _0x5d25b9,
    37 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134 * _0x5d25b9,
    48 * _0x5d25b9,
    134 * _0x5d25b9,
    49 * _0x5d25b9,
    132 * _0x5d25b9,
    59 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    131 * _0x5d25b9,
    67 * _0x5d25b9,
    127 * _0x5d25b9,
    65 * _0x5d25b9,
    120 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    49 * _0x5d25b9,
    113 * _0x5d25b9,
    43 * _0x5d25b9,
    115 * _0x5d25b9,
    38 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(146 * _0x5d25b9, 34 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    152 * _0x5d25b9,
    28 * _0x5d25b9,
    155 * _0x5d25b9,
    27 * _0x5d25b9,
    157 * _0x5d25b9,
    39 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    157 * _0x5d25b9,
    45 * _0x5d25b9,
    157 * _0x5d25b9,
    49 * _0x5d25b9,
    150 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    57 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    50 * _0x5d25b9,
    137 * _0x5d25b9,
    47 * _0x5d25b9,
    141 * _0x5d25b9,
    42 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(143 * _0x5d25b9, 69 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    56 * _0x5d25b9,
    156 * _0x5d25b9,
    50 * _0x5d25b9,
    158 * _0x5d25b9,
    58 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    159 * _0x5d25b9,
    64 * _0x5d25b9,
    160 * _0x5d25b9,
    67 * _0x5d25b9,
    153 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    83 * _0x5d25b9,
    145 * _0x5d25b9,
    84 * _0x5d25b9,
    143 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(149 * _0x5d25b9, 92 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    149 * _0x5d25b9,
    89 * _0x5d25b9,
    151 * _0x5d25b9,
    84 * _0x5d25b9,
    156 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    73 * _0x5d25b9,
    163 * _0x5d25b9,
    78 * _0x5d25b9,
    162 * _0x5d25b9,
    86 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    91 * _0x5d25b9,
    155 * _0x5d25b9,
    99 * _0x5d25b9,
    152 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(111 * _0x5d25b9, 61 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    51 * _0x5d25b9,
    117 * _0x5d25b9,
    51 * _0x5d25b9,
    124 * _0x5d25b9,
    64 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    128 * _0x5d25b9,
    68 * _0x5d25b9,
    128 * _0x5d25b9,
    76 * _0x5d25b9,
    126 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    123 * _0x5d25b9,
    84 * _0x5d25b9,
    122 * _0x5d25b9,
    82 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    112 * _0x5d25b9,
    67 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    68 * _0x5d25b9,
    111 * _0x5d25b9,
    66 * _0x5d25b9,
    111 * _0x5d25b9,
    62 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(107 * _0x5d25b9, 81 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    108 * _0x5d25b9,
    74 * _0x5d25b9,
    112 * _0x5d25b9,
    73 * _0x5d25b9,
    118 * _0x5d25b9,
    84 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    88 * _0x5d25b9,
    122 * _0x5d25b9,
    93 * _0x5d25b9,
    121 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    98 * _0x5d25b9,
    113 * _0x5d25b9,
    98 * _0x5d25b9,
    109 * _0x5d25b9,
    90 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    107 * _0x5d25b9,
    87 * _0x5d25b9,
    106 * _0x5d25b9,
    85 * _0x5d25b9,
    107 * _0x5d25b9,
    82 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[3], _0x19b126[3], 8 * _0x5d25b9);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 99 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    186 * _0x5d25b9,
    123 * _0x5d25b9,
    199 * _0x5d25b9,
    152 * _0x5d25b9,
    209 * _0x5d25b9,
    169 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    228 * _0x5d25b9,
    205 * _0x5d25b9,
    224 * _0x5d25b9,
    245 * _0x5d25b9,
    190 * _0x5d25b9,
    276 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    296 * _0x5d25b9,
    99 * _0x5d25b9,
    292 * _0x5d25b9,
    79 * _0x5d25b9,
    274 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    49 * _0x5d25b9,
    253 * _0x5d25b9,
    47 * _0x5d25b9,
    214 * _0x5d25b9,
    50 * _0x5d25b9,
    197 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    61 * _0x5d25b9,
    143 * _0x5d25b9,
    102 * _0x5d25b9,
    113 * _0x5d25b9,
    131 * _0x5d25b9,
    99 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[1]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(73 * _0x5d25b9, 270 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    79 * _0x5d25b9,
    280 * _0x5d25b9,
    77 * _0x5d25b9,
    280 * _0x5d25b9,
    78 * _0x5d25b9,
    287 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    78 * _0x5d25b9,
    290 * _0x5d25b9,
    83 * _0x5d25b9,
    291 * _0x5d25b9,
    82 * _0x5d25b9,
    299 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    81 * _0x5d25b9,
    301 * _0x5d25b9,
    87 * _0x5d25b9,
    301 * _0x5d25b9,
    92 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    94 * _0x5d25b9,
    319 * _0x5d25b9,
    100 * _0x5d25b9,
    321 * _0x5d25b9,
    107 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    323 * _0x5d25b9,
    114 * _0x5d25b9,
    324 * _0x5d25b9,
    119 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    321 * _0x5d25b9,
    146 * _0x5d25b9,
    323 * _0x5d25b9,
    139 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    324 * _0x5d25b9,
    150 * _0x5d25b9,
    324 * _0x5d25b9,
    153 * _0x5d25b9,
    320 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    168 * _0x5d25b9,
    319 * _0x5d25b9,
    171 * _0x5d25b9,
    316 * _0x5d25b9,
    173 * _0x5d25b9,
    307 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    180 * _0x5d25b9,
    305 * _0x5d25b9,
    180 * _0x5d25b9,
    301 * _0x5d25b9,
    178 * _0x5d25b9,
    296 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    183 * _0x5d25b9,
    296 * _0x5d25b9,
    185 * _0x5d25b9,
    289 * _0x5d25b9,
    188 * _0x5d25b9,
    279 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    171 * _0x5d25b9,
    286 * _0x5d25b9,
    149 * _0x5d25b9,
    290 * _0x5d25b9,
    132 * _0x5d25b9,
    289 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    101 * _0x5d25b9,
    290 * _0x5d25b9,
    86 * _0x5d25b9,
    280 * _0x5d25b9,
    74 * _0x5d25b9,
    271 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[5]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(76 * _0x5d25b9, 252 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    85 * _0x5d25b9,
    294 * _0x5d25b9,
    96 * _0x5d25b9,
    314 * _0x5d25b9,
    103 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    316 * _0x5d25b9,
    151 * _0x5d25b9,
    314 * _0x5d25b9,
    156 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    169 * _0x5d25b9,
    317 * _0x5d25b9,
    182 * _0x5d25b9,
    285 * _0x5d25b9,
    191 * _0x5d25b9,
    256 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    134.5 * _0x5d25b9,
    254 * _0x5d25b9,
    78 * _0x5d25b9,
    252 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[2]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(84 * _0x5d25b9, 257 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    273 * _0x5d25b9,
    146 * _0x5d25b9,
    268 * _0x5d25b9,
    179 * _0x5d25b9,
    261 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    190 * _0x5d25b9,
    258 * _0x5d25b9,
    187 * _0x5d25b9,
    266 * _0x5d25b9,
    178 * _0x5d25b9,
    272 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    160 * _0x5d25b9,
    284 * _0x5d25b9,
    123 * _0x5d25b9,
    282 * _0x5d25b9,
    100 * _0x5d25b9,
    277 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    73 * _0x5d25b9,
    260 * _0x5d25b9,
    79 * _0x5d25b9,
    257 * _0x5d25b9,
    84 * _0x5d25b9,
    257 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[1]);
  circle(_0x221e59, 102 * _0x5d25b9, 269 * _0x5d25b9, 11 * _0x5d25b9);
  fill_path(_0x221e59, _0x19b126[3]);
  circle(_0x221e59, 98 * _0x5d25b9, 266 * _0x5d25b9, 5 * _0x5d25b9);
  fill_path(_0x221e59, _0x19b126[6]);
  circle(_0x221e59, 168 * _0x5d25b9, 269 * _0x5d25b9, 11 * _0x5d25b9);
  fill_path(_0x221e59, _0x19b126[3]);
  circle(_0x221e59, 164 * _0x5d25b9, 266 * _0x5d25b9, 5 * _0x5d25b9);
  fill_path(_0x221e59, _0x19b126[6]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(125 * _0x5d25b9, 65 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    133 * _0x5d25b9,
    45 * _0x5d25b9,
    136 * _0x5d25b9,
    42 * _0x5d25b9,
    141 * _0x5d25b9,
    55 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    151 * _0x5d25b9,
    96 * _0x5d25b9,
    164 * _0x5d25b9,
    117 * _0x5d25b9,
    175 * _0x5d25b9,
    134 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    203 * _0x5d25b9,
    181 * _0x5d25b9,
    207 * _0x5d25b9,
    182 * _0x5d25b9,
    208 * _0x5d25b9,
    215 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    206 * _0x5d25b9,
    240 * _0x5d25b9,
    205 * _0x5d25b9,
    246 * _0x5d25b9,
    184 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    267 * _0x5d25b9,
    131 * _0x5d25b9,
    272 * _0x5d25b9,
    86 * _0x5d25b9,
    258 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    67 * _0x5d25b9,
    252 * _0x5d25b9,
    68 * _0x5d25b9,
    239 * _0x5d25b9,
    64 * _0x5d25b9,
    216 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    62 * _0x5d25b9,
    194 * _0x5d25b9,
    72 * _0x5d25b9,
    169 * _0x5d25b9,
    92 * _0x5d25b9,
    142 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    106 * _0x5d25b9,
    121 * _0x5d25b9,
    114 * _0x5d25b9,
    101 * _0x5d25b9,
    125 * _0x5d25b9,
    65 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[2]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(115 * _0x5d25b9, 235 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    118 * _0x5d25b9,
    258 * _0x5d25b9,
    137 * _0x5d25b9,
    268 * _0x5d25b9,
    148 * _0x5d25b9,
    246 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    156 * _0x5d25b9,
    228 * _0x5d25b9,
    152 * _0x5d25b9,
    169 * _0x5d25b9,
    150 * _0x5d25b9,
    140 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    147 * _0x5d25b9,
    87 * _0x5d25b9,
    143 * _0x5d25b9,
    69 * _0x5d25b9,
    142 * _0x5d25b9,
    60 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    136 * _0x5d25b9,
    44 * _0x5d25b9,
    132 * _0x5d25b9,
    43 * _0x5d25b9,
    127 * _0x5d25b9,
    62 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    119 * _0x5d25b9,
    116 * _0x5d25b9,
    119 * _0x5d25b9,
    140 * _0x5d25b9,
    116 * _0x5d25b9,
    166 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    113 * _0x5d25b9,
    202 * _0x5d25b9,
    113 * _0x5d25b9,
    223 * _0x5d25b9,
    115 * _0x5d25b9,
    233 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[4]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(132 * _0x5d25b9, 219 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    140 * _0x5d25b9,
    229 * _0x5d25b9,
    142 * _0x5d25b9,
    231 * _0x5d25b9,
    145 * _0x5d25b9,
    237 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    145 * _0x5d25b9,
    245 * _0x5d25b9,
    139 * _0x5d25b9,
    249 * _0x5d25b9,
    133 * _0x5d25b9,
    249 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    123 * _0x5d25b9,
    248 * _0x5d25b9,
    123 * _0x5d25b9,
    243 * _0x5d25b9,
    121 * _0x5d25b9,
    239 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    126 * _0x5d25b9,
    227 * _0x5d25b9,
    129 * _0x5d25b9,
    223 * _0x5d25b9,
    132 * _0x5d25b9,
    219 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 179 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    140 * _0x5d25b9,
    188.5 * _0x5d25b9,
    140 * _0x5d25b9,
    188.5 * _0x5d25b9,
    147 * _0x5d25b9,
    198 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    209 * _0x5d25b9,
    142 * _0x5d25b9,
    214 * _0x5d25b9,
    133 * _0x5d25b9,
    214 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    121 * _0x5d25b9,
    211 * _0x5d25b9,
    121 * _0x5d25b9,
    207 * _0x5d25b9,
    120 * _0x5d25b9,
    200 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    126.5 * _0x5d25b9,
    189.5 * _0x5d25b9,
    126.5 * _0x5d25b9,
    189.5 * _0x5d25b9,
    133 * _0x5d25b9,
    179 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 143 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    139 * _0x5d25b9,
    151.5 * _0x5d25b9,
    139 * _0x5d25b9,
    151.5 * _0x5d25b9,
    145 * _0x5d25b9,
    160 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    143 * _0x5d25b9,
    167 * _0x5d25b9,
    140 * _0x5d25b9,
    170 * _0x5d25b9,
    134 * _0x5d25b9,
    170 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    128 * _0x5d25b9,
    169 * _0x5d25b9,
    124 * _0x5d25b9,
    167 * _0x5d25b9,
    123 * _0x5d25b9,
    161 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    128 * _0x5d25b9,
    152 * _0x5d25b9,
    128 * _0x5d25b9,
    152 * _0x5d25b9,
    133 * _0x5d25b9,
    143 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 115 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    137.5 * _0x5d25b9,
    121.5 * _0x5d25b9,
    137.5 * _0x5d25b9,
    121.5 * _0x5d25b9,
    142 * _0x5d25b9,
    128 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    133 * _0x5d25b9,
    138 * _0x5d25b9,
    135 * _0x5d25b9,
    133 * _0x5d25b9,
    135 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    129 * _0x5d25b9,
    135 * _0x5d25b9,
    125 * _0x5d25b9,
    132 * _0x5d25b9,
    125 * _0x5d25b9,
    129 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    129 * _0x5d25b9,
    122 * _0x5d25b9,
    129 * _0x5d25b9,
    122 * _0x5d25b9,
    133 * _0x5d25b9,
    115 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(133 * _0x5d25b9, 94 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    136.5 * _0x5d25b9,
    98.5 * _0x5d25b9,
    136.5 * _0x5d25b9,
    98.5 * _0x5d25b9,
    140 * _0x5d25b9,
    103 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    139 * _0x5d25b9,
    109 * _0x5d25b9,
    137 * _0x5d25b9,
    109 * _0x5d25b9,
    133 * _0x5d25b9,
    110 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    127 * _0x5d25b9,
    108 * _0x5d25b9,
    129 * _0x5d25b9,
    107 * _0x5d25b9,
    127 * _0x5d25b9,
    105 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    130 * _0x5d25b9,
    99.5 * _0x5d25b9,
    130 * _0x5d25b9,
    99.5 * _0x5d25b9,
    133 * _0x5d25b9,
    94 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(130 * _0x5d25b9, 279 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    136.5 * _0x5d25b9,
    287.5 * _0x5d25b9,
    136.5 * _0x5d25b9,
    287.5 * _0x5d25b9,
    143 * _0x5d25b9,
    296 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    143 * _0x5d25b9,
    302 * _0x5d25b9,
    139 * _0x5d25b9,
    309 * _0x5d25b9,
    131 * _0x5d25b9,
    308 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    123 * _0x5d25b9,
    306 * _0x5d25b9,
    121 * _0x5d25b9,
    303 * _0x5d25b9,
    120 * _0x5d25b9,
    297 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    125.5 * _0x5d25b9,
    288.5 * _0x5d25b9,
    125.5 * _0x5d25b9,
    288.5 * _0x5d25b9,
    131 * _0x5d25b9,
    280 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(147 * _0x5d25b9, 303 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    151 * _0x5d25b9,
    311 * _0x5d25b9,
    151 * _0x5d25b9,
    319 * _0x5d25b9,
    147 * _0x5d25b9,
    321 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    138 * _0x5d25b9,
    320 * _0x5d25b9,
    145 * _0x5d25b9,
    308 * _0x5d25b9,
    147 * _0x5d25b9,
    303 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(115 * _0x5d25b9, 303 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    115 * _0x5d25b9,
    312 * _0x5d25b9,
    118 * _0x5d25b9,
    319 * _0x5d25b9,
    115 * _0x5d25b9,
    319 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    112 * _0x5d25b9,
    324 * _0x5d25b9,
    109 * _0x5d25b9,
    318 * _0x5d25b9,
    109 * _0x5d25b9,
    314 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    109 * _0x5d25b9,
    308 * _0x5d25b9,
    112 * _0x5d25b9,
    303 * _0x5d25b9,
    115 * _0x5d25b9,
    303 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(89 * _0x5d25b9, 280 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    83 * _0x5d25b9,
    279 * _0x5d25b9,
    80 * _0x5d25b9,
    281 * _0x5d25b9,
    81 * _0x5d25b9,
    286 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    83 * _0x5d25b9,
    290 * _0x5d25b9,
    84 * _0x5d25b9,
    290 * _0x5d25b9,
    87 * _0x5d25b9,
    286 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(94 * _0x5d25b9, 290 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    93 * _0x5d25b9,
    294 * _0x5d25b9,
    90 * _0x5d25b9,
    303 * _0x5d25b9,
    86 * _0x5d25b9,
    298 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    84 * _0x5d25b9,
    295 * _0x5d25b9,
    84 * _0x5d25b9,
    291 * _0x5d25b9,
    89 * _0x5d25b9,
    291 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(163 * _0x5d25b9, 295 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    175 * _0x5d25b9,
    294 * _0x5d25b9,
    176 * _0x5d25b9,
    296 * _0x5d25b9,
    175 * _0x5d25b9,
    301 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    174 * _0x5d25b9,
    305 * _0x5d25b9,
    171 * _0x5d25b9,
    305 * _0x5d25b9,
    166 * _0x5d25b9,
    300 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(172 * _0x5d25b9, 286 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    180 * _0x5d25b9,
    285 * _0x5d25b9,
    181 * _0x5d25b9,
    285 * _0x5d25b9,
    180 * _0x5d25b9,
    291 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    176 * _0x5d25b9,
    295 * _0x5d25b9,
    174 * _0x5d25b9,
    294 * _0x5d25b9,
    172 * _0x5d25b9,
    286 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[8]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(115 * _0x5d25b9, 37 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    116 * _0x5d25b9,
    28 * _0x5d25b9,
    119 * _0x5d25b9,
    27 * _0x5d25b9,
    126 * _0x5d25b9,
    37 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    134 * _0x5d25b9,
    48 * _0x5d25b9,
    134 * _0x5d25b9,
    49 * _0x5d25b9,
    132 * _0x5d25b9,
    59 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    131 * _0x5d25b9,
    67 * _0x5d25b9,
    127 * _0x5d25b9,
    65 * _0x5d25b9,
    120 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    49 * _0x5d25b9,
    113 * _0x5d25b9,
    43 * _0x5d25b9,
    115 * _0x5d25b9,
    38 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(146 * _0x5d25b9, 34 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    152 * _0x5d25b9,
    28 * _0x5d25b9,
    155 * _0x5d25b9,
    27 * _0x5d25b9,
    157 * _0x5d25b9,
    39 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    157 * _0x5d25b9,
    45 * _0x5d25b9,
    157 * _0x5d25b9,
    49 * _0x5d25b9,
    150 * _0x5d25b9,
    56 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    141 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    66 * _0x5d25b9,
    138 * _0x5d25b9,
    57 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    137 * _0x5d25b9,
    50 * _0x5d25b9,
    137 * _0x5d25b9,
    47 * _0x5d25b9,
    141 * _0x5d25b9,
    42 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(143 * _0x5d25b9, 69 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    56 * _0x5d25b9,
    156 * _0x5d25b9,
    50 * _0x5d25b9,
    158 * _0x5d25b9,
    58 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    159 * _0x5d25b9,
    64 * _0x5d25b9,
    160 * _0x5d25b9,
    67 * _0x5d25b9,
    153 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    148 * _0x5d25b9,
    83 * _0x5d25b9,
    145 * _0x5d25b9,
    84 * _0x5d25b9,
    143 * _0x5d25b9,
    77 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(149 * _0x5d25b9, 92 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    149 * _0x5d25b9,
    89 * _0x5d25b9,
    151 * _0x5d25b9,
    84 * _0x5d25b9,
    156 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    73 * _0x5d25b9,
    163 * _0x5d25b9,
    78 * _0x5d25b9,
    162 * _0x5d25b9,
    86 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    161 * _0x5d25b9,
    91 * _0x5d25b9,
    155 * _0x5d25b9,
    99 * _0x5d25b9,
    152 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(111 * _0x5d25b9, 61 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    51 * _0x5d25b9,
    117 * _0x5d25b9,
    51 * _0x5d25b9,
    124 * _0x5d25b9,
    64 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    128 * _0x5d25b9,
    68 * _0x5d25b9,
    128 * _0x5d25b9,
    76 * _0x5d25b9,
    126 * _0x5d25b9,
    79 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    123 * _0x5d25b9,
    84 * _0x5d25b9,
    122 * _0x5d25b9,
    82 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    112 * _0x5d25b9,
    67 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9,
    115 * _0x5d25b9,
    74 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    111 * _0x5d25b9,
    68 * _0x5d25b9,
    111 * _0x5d25b9,
    66 * _0x5d25b9,
    111 * _0x5d25b9,
    62 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  _0x221e59.beginPath();
  _0x221e59.lineCap = "round";
  _0x221e59.lineJoin = "round";
  _0x221e59.moveTo(107 * _0x5d25b9, 81 * _0x5d25b9);
  _0x221e59.bezierCurveTo(
    108 * _0x5d25b9,
    74 * _0x5d25b9,
    112 * _0x5d25b9,
    73 * _0x5d25b9,
    118 * _0x5d25b9,
    84 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    122 * _0x5d25b9,
    88 * _0x5d25b9,
    122 * _0x5d25b9,
    93 * _0x5d25b9,
    121 * _0x5d25b9,
    98 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    114 * _0x5d25b9,
    98 * _0x5d25b9,
    113 * _0x5d25b9,
    98 * _0x5d25b9,
    109 * _0x5d25b9,
    90 * _0x5d25b9
  );
  _0x221e59.bezierCurveTo(
    107 * _0x5d25b9,
    87 * _0x5d25b9,
    106 * _0x5d25b9,
    85 * _0x5d25b9,
    107 * _0x5d25b9,
    82 * _0x5d25b9
  );
  _0x221e59.closePath();
  fill_path(_0x221e59, _0x19b126[7]);
  return _0x2fa086;
}
function create_hurt_dragon(_0x3d46d7, _0x205fd7) {
  var _0x495d48 = document.createElement("canvas");
  var _0x5f1889 = _0x495d48.getContext("2d");
  _0x495d48.width = 271 * _0x3d46d7;
  _0x495d48.height = 366 * _0x3d46d7;
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(133 * _0x3d46d7, 99 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    186 * _0x3d46d7,
    123 * _0x3d46d7,
    199 * _0x3d46d7,
    152 * _0x3d46d7,
    209 * _0x3d46d7,
    169 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    228 * _0x3d46d7,
    205 * _0x3d46d7,
    224 * _0x3d46d7,
    245 * _0x3d46d7,
    190 * _0x3d46d7,
    276 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    161 * _0x3d46d7,
    296 * _0x3d46d7,
    99 * _0x3d46d7,
    292 * _0x3d46d7,
    79 * _0x3d46d7,
    274 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    49 * _0x3d46d7,
    253 * _0x3d46d7,
    47 * _0x3d46d7,
    214 * _0x3d46d7,
    50 * _0x3d46d7,
    197 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    61 * _0x3d46d7,
    143 * _0x3d46d7,
    102 * _0x3d46d7,
    113 * _0x3d46d7,
    131 * _0x3d46d7,
    99 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(73 * _0x3d46d7, 270 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    79 * _0x3d46d7,
    280 * _0x3d46d7,
    77 * _0x3d46d7,
    280 * _0x3d46d7,
    78 * _0x3d46d7,
    287 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    78 * _0x3d46d7,
    290 * _0x3d46d7,
    83 * _0x3d46d7,
    291 * _0x3d46d7,
    82 * _0x3d46d7,
    299 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    81 * _0x3d46d7,
    301 * _0x3d46d7,
    87 * _0x3d46d7,
    301 * _0x3d46d7,
    92 * _0x3d46d7,
    314 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    94 * _0x3d46d7,
    319 * _0x3d46d7,
    100 * _0x3d46d7,
    321 * _0x3d46d7,
    107 * _0x3d46d7,
    320 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    111 * _0x3d46d7,
    323 * _0x3d46d7,
    114 * _0x3d46d7,
    324 * _0x3d46d7,
    119 * _0x3d46d7,
    320 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    137 * _0x3d46d7,
    321 * _0x3d46d7,
    146 * _0x3d46d7,
    323 * _0x3d46d7,
    139 * _0x3d46d7,
    320 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    141 * _0x3d46d7,
    324 * _0x3d46d7,
    150 * _0x3d46d7,
    324 * _0x3d46d7,
    153 * _0x3d46d7,
    320 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    168 * _0x3d46d7,
    319 * _0x3d46d7,
    171 * _0x3d46d7,
    316 * _0x3d46d7,
    173 * _0x3d46d7,
    307 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    180 * _0x3d46d7,
    305 * _0x3d46d7,
    180 * _0x3d46d7,
    301 * _0x3d46d7,
    178 * _0x3d46d7,
    296 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    183 * _0x3d46d7,
    296 * _0x3d46d7,
    185 * _0x3d46d7,
    289 * _0x3d46d7,
    188 * _0x3d46d7,
    279 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    171 * _0x3d46d7,
    286 * _0x3d46d7,
    149 * _0x3d46d7,
    290 * _0x3d46d7,
    132 * _0x3d46d7,
    289 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    101 * _0x3d46d7,
    290 * _0x3d46d7,
    86 * _0x3d46d7,
    280 * _0x3d46d7,
    74 * _0x3d46d7,
    271 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(76 * _0x3d46d7, 252 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    85 * _0x3d46d7,
    294 * _0x3d46d7,
    96 * _0x3d46d7,
    314 * _0x3d46d7,
    103 * _0x3d46d7,
    314 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    106 * _0x3d46d7,
    316 * _0x3d46d7,
    151 * _0x3d46d7,
    314 * _0x3d46d7,
    156 * _0x3d46d7,
    314 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    169 * _0x3d46d7,
    317 * _0x3d46d7,
    182 * _0x3d46d7,
    285 * _0x3d46d7,
    191 * _0x3d46d7,
    256 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    134.5 * _0x3d46d7,
    254 * _0x3d46d7,
    134.5 * _0x3d46d7,
    254 * _0x3d46d7,
    78 * _0x3d46d7,
    252 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(84 * _0x3d46d7, 257 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    122 * _0x3d46d7,
    273 * _0x3d46d7,
    146 * _0x3d46d7,
    268 * _0x3d46d7,
    179 * _0x3d46d7,
    261 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    190 * _0x3d46d7,
    258 * _0x3d46d7,
    187 * _0x3d46d7,
    266 * _0x3d46d7,
    178 * _0x3d46d7,
    272 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    160 * _0x3d46d7,
    284 * _0x3d46d7,
    123 * _0x3d46d7,
    282 * _0x3d46d7,
    100 * _0x3d46d7,
    277 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    73 * _0x3d46d7,
    260 * _0x3d46d7,
    79 * _0x3d46d7,
    257 * _0x3d46d7,
    84 * _0x3d46d7,
    257 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(125 * _0x3d46d7, 65 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    133 * _0x3d46d7,
    45 * _0x3d46d7,
    136 * _0x3d46d7,
    42 * _0x3d46d7,
    141 * _0x3d46d7,
    55 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    151 * _0x3d46d7,
    96 * _0x3d46d7,
    164 * _0x3d46d7,
    117 * _0x3d46d7,
    175 * _0x3d46d7,
    134 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    203 * _0x3d46d7,
    181 * _0x3d46d7,
    207 * _0x3d46d7,
    182 * _0x3d46d7,
    208 * _0x3d46d7,
    215 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    206 * _0x3d46d7,
    240 * _0x3d46d7,
    205 * _0x3d46d7,
    246 * _0x3d46d7,
    184 * _0x3d46d7,
    258 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    161 * _0x3d46d7,
    267 * _0x3d46d7,
    131 * _0x3d46d7,
    272 * _0x3d46d7,
    86 * _0x3d46d7,
    258 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    67 * _0x3d46d7,
    252 * _0x3d46d7,
    68 * _0x3d46d7,
    239 * _0x3d46d7,
    64 * _0x3d46d7,
    216 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    62 * _0x3d46d7,
    194 * _0x3d46d7,
    72 * _0x3d46d7,
    169 * _0x3d46d7,
    92 * _0x3d46d7,
    142 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    106 * _0x3d46d7,
    121 * _0x3d46d7,
    114 * _0x3d46d7,
    101 * _0x3d46d7,
    125 * _0x3d46d7,
    65 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(115 * _0x3d46d7, 37 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    116 * _0x3d46d7,
    28 * _0x3d46d7,
    119 * _0x3d46d7,
    27 * _0x3d46d7,
    126 * _0x3d46d7,
    37 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    134 * _0x3d46d7,
    48 * _0x3d46d7,
    134 * _0x3d46d7,
    49 * _0x3d46d7,
    132 * _0x3d46d7,
    59 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    131 * _0x3d46d7,
    67 * _0x3d46d7,
    127 * _0x3d46d7,
    65 * _0x3d46d7,
    120 * _0x3d46d7,
    56 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    114 * _0x3d46d7,
    49 * _0x3d46d7,
    113 * _0x3d46d7,
    43 * _0x3d46d7,
    115 * _0x3d46d7,
    38 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(146 * _0x3d46d7, 34 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    152 * _0x3d46d7,
    28 * _0x3d46d7,
    155 * _0x3d46d7,
    27 * _0x3d46d7,
    157 * _0x3d46d7,
    39 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    157 * _0x3d46d7,
    45 * _0x3d46d7,
    157 * _0x3d46d7,
    49 * _0x3d46d7,
    150 * _0x3d46d7,
    56 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    141 * _0x3d46d7,
    66 * _0x3d46d7,
    138 * _0x3d46d7,
    66 * _0x3d46d7,
    138 * _0x3d46d7,
    57 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    137 * _0x3d46d7,
    50 * _0x3d46d7,
    137 * _0x3d46d7,
    47 * _0x3d46d7,
    141 * _0x3d46d7,
    42 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(143 * _0x3d46d7, 69 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    148 * _0x3d46d7,
    56 * _0x3d46d7,
    156 * _0x3d46d7,
    50 * _0x3d46d7,
    158 * _0x3d46d7,
    58 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    159 * _0x3d46d7,
    64 * _0x3d46d7,
    160 * _0x3d46d7,
    67 * _0x3d46d7,
    153 * _0x3d46d7,
    77 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    148 * _0x3d46d7,
    83 * _0x3d46d7,
    145 * _0x3d46d7,
    84 * _0x3d46d7,
    143 * _0x3d46d7,
    77 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(149 * _0x3d46d7, 92 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    149 * _0x3d46d7,
    89 * _0x3d46d7,
    151 * _0x3d46d7,
    84 * _0x3d46d7,
    156 * _0x3d46d7,
    79 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    161 * _0x3d46d7,
    73 * _0x3d46d7,
    163 * _0x3d46d7,
    78 * _0x3d46d7,
    162 * _0x3d46d7,
    86 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    161 * _0x3d46d7,
    91 * _0x3d46d7,
    155 * _0x3d46d7,
    99 * _0x3d46d7,
    152 * _0x3d46d7,
    98 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(111 * _0x3d46d7, 61 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    114 * _0x3d46d7,
    51 * _0x3d46d7,
    117 * _0x3d46d7,
    51 * _0x3d46d7,
    124 * _0x3d46d7,
    64 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    128 * _0x3d46d7,
    68 * _0x3d46d7,
    128 * _0x3d46d7,
    76 * _0x3d46d7,
    126 * _0x3d46d7,
    79 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    123 * _0x3d46d7,
    84 * _0x3d46d7,
    122 * _0x3d46d7,
    82 * _0x3d46d7,
    115 * _0x3d46d7,
    74 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    112 * _0x3d46d7,
    67 * _0x3d46d7,
    115 * _0x3d46d7,
    74 * _0x3d46d7,
    115 * _0x3d46d7,
    74 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    111 * _0x3d46d7,
    68 * _0x3d46d7,
    111 * _0x3d46d7,
    66 * _0x3d46d7,
    111 * _0x3d46d7,
    62 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  _0x5f1889.beginPath();
  _0x5f1889.lineCap = "round";
  _0x5f1889.lineJoin = "round";
  _0x5f1889.moveTo(107 * _0x3d46d7, 81 * _0x3d46d7);
  _0x5f1889.bezierCurveTo(
    108 * _0x3d46d7,
    74 * _0x3d46d7,
    112 * _0x3d46d7,
    73 * _0x3d46d7,
    118 * _0x3d46d7,
    84 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    122 * _0x3d46d7,
    88 * _0x3d46d7,
    122 * _0x3d46d7,
    93 * _0x3d46d7,
    121 * _0x3d46d7,
    98 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    114 * _0x3d46d7,
    98 * _0x3d46d7,
    113 * _0x3d46d7,
    98 * _0x3d46d7,
    109 * _0x3d46d7,
    90 * _0x3d46d7
  );
  _0x5f1889.bezierCurveTo(
    107 * _0x3d46d7,
    87 * _0x3d46d7,
    106 * _0x3d46d7,
    85 * _0x3d46d7,
    107 * _0x3d46d7,
    82 * _0x3d46d7
  );
  _0x5f1889.closePath();
  fill_path(_0x5f1889, _0x205fd7[0]);
  return _0x495d48;
}
function create_wingleft(_0x4acb91, _0x11f402) {
  var _0x4b3d61 = document.createElement("canvas");
  var _0x50b5aa = _0x4b3d61.getContext("2d");
  _0x4b3d61.width = 85 * _0x4acb91;
  _0x4b3d61.height = 145 * _0x4acb91;
  _0x50b5aa.translate(-20 * _0x4acb91, -95 * _0x4acb91);
  _0x50b5aa.beginPath();
  _0x50b5aa.lineCap = "round";
  _0x50b5aa.lineJoin = "round";
  _0x50b5aa.moveTo(50 * _0x4acb91, 105 * _0x4acb91);
  _0x50b5aa.bezierCurveTo(
    52 * _0x4acb91,
    119 * _0x4acb91,
    64 * _0x4acb91,
    137 * _0x4acb91,
    71 * _0x4acb91,
    146 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    71 * _0x4acb91,
    161 * _0x4acb91,
    74 * _0x4acb91,
    169 * _0x4acb91,
    79 * _0x4acb91,
    179 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    68 * _0x4acb91,
    192 * _0x4acb91,
    70 * _0x4acb91,
    204 * _0x4acb91,
    69 * _0x4acb91,
    216 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    50 * _0x4acb91,
    189.5 * _0x4acb91,
    50 * _0x4acb91,
    189.5 * _0x4acb91,
    31 * _0x4acb91,
    163 * _0x4acb91
  );
  _0x50b5aa.closePath();
  fill_path(_0x50b5aa, _0x11f402[1]);
  _0x50b5aa.beginPath();
  _0x50b5aa.lineCap = "round";
  _0x50b5aa.lineJoin = "round";
  _0x50b5aa.moveTo(44 * _0x4acb91, 106 * _0x4acb91);
  _0x50b5aa.bezierCurveTo(
    49 * _0x4acb91,
    90 * _0x4acb91,
    58 * _0x4acb91,
    104 * _0x4acb91,
    51 * _0x4acb91,
    121 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    45 * _0x4acb91,
    143 * _0x4acb91,
    41 * _0x4acb91,
    151 * _0x4acb91,
    37 * _0x4acb91,
    162 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    48 * _0x4acb91,
    180 * _0x4acb91,
    58 * _0x4acb91,
    188 * _0x4acb91,
    76 * _0x4acb91,
    205 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    104 * _0x4acb91,
    209 * _0x4acb91,
    105 * _0x4acb91,
    229 * _0x4acb91,
    92 * _0x4acb91,
    235 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    76 * _0x4acb91,
    239 * _0x4acb91,
    75 * _0x4acb91,
    232 * _0x4acb91,
    56 * _0x4acb91,
    213 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    31 * _0x4acb91,
    187 * _0x4acb91,
    28 * _0x4acb91,
    176 * _0x4acb91,
    23 * _0x4acb91,
    162 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    38 * _0x4acb91,
    131 * _0x4acb91,
    40 * _0x4acb91,
    120 * _0x4acb91,
    44 * _0x4acb91,
    106 * _0x4acb91
  );
  _0x50b5aa.closePath();
  fill_path(_0x50b5aa, _0x11f402[2], _0x11f402[3], 4 * _0x4acb91);
  _0x50b5aa.beginPath();
  _0x50b5aa.lineCap = "round";
  _0x50b5aa.lineJoin = "round";
  _0x50b5aa.moveTo(30 * _0x4acb91, 159 * _0x4acb91);
  _0x50b5aa.bezierCurveTo(
    46 * _0x4acb91,
    157 * _0x4acb91,
    59 * _0x4acb91,
    152 * _0x4acb91,
    68 * _0x4acb91,
    148 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    63 * _0x4acb91,
    155 * _0x4acb91,
    52 * _0x4acb91,
    160 * _0x4acb91,
    44 * _0x4acb91,
    164 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    59 * _0x4acb91,
    169 * _0x4acb91,
    66 * _0x4acb91,
    174 * _0x4acb91,
    75 * _0x4acb91,
    178 * _0x4acb91
  );
  _0x50b5aa.bezierCurveTo(
    58 * _0x4acb91,
    178 * _0x4acb91,
    49 * _0x4acb91,
    175 * _0x4acb91,
    37 * _0x4acb91,
    174 * _0x4acb91
  );
  _0x50b5aa.closePath();
  fill_path(_0x50b5aa, _0x11f402[2]);
  return _0x4b3d61;
}
function create_hurt_wingleft(_0x4233d4, _0xfc17e3) {
  var _0xd41672 = document.createElement("canvas");
  var _0x59ebfa = _0xd41672.getContext("2d");
  _0xd41672.width = 85 * _0x4233d4;
  _0xd41672.height = 145 * _0x4233d4;
  _0x59ebfa.translate(-20 * _0x4233d4, -95 * _0x4233d4);
  _0x59ebfa.beginPath();
  _0x59ebfa.lineCap = "round";
  _0x59ebfa.lineJoin = "round";
  _0x59ebfa.moveTo(50 * _0x4233d4, 105 * _0x4233d4);
  _0x59ebfa.bezierCurveTo(
    52 * _0x4233d4,
    119 * _0x4233d4,
    64 * _0x4233d4,
    137 * _0x4233d4,
    71 * _0x4233d4,
    146 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    71 * _0x4233d4,
    161 * _0x4233d4,
    74 * _0x4233d4,
    169 * _0x4233d4,
    79 * _0x4233d4,
    179 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    68 * _0x4233d4,
    192 * _0x4233d4,
    70 * _0x4233d4,
    204 * _0x4233d4,
    69 * _0x4233d4,
    216 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    50 * _0x4233d4,
    189.5 * _0x4233d4,
    50 * _0x4233d4,
    189.5 * _0x4233d4,
    31 * _0x4233d4,
    163 * _0x4233d4
  );
  _0x59ebfa.closePath();
  fill_path(_0x59ebfa, _0xfc17e3);
  _0x59ebfa.beginPath();
  _0x59ebfa.lineCap = "round";
  _0x59ebfa.lineJoin = "round";
  _0x59ebfa.moveTo(44 * _0x4233d4, 106 * _0x4233d4);
  _0x59ebfa.bezierCurveTo(
    49 * _0x4233d4,
    90 * _0x4233d4,
    58 * _0x4233d4,
    104 * _0x4233d4,
    51 * _0x4233d4,
    121 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    45 * _0x4233d4,
    143 * _0x4233d4,
    41 * _0x4233d4,
    151 * _0x4233d4,
    37 * _0x4233d4,
    162 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    48 * _0x4233d4,
    180 * _0x4233d4,
    58 * _0x4233d4,
    188 * _0x4233d4,
    76 * _0x4233d4,
    205 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    104 * _0x4233d4,
    209 * _0x4233d4,
    105 * _0x4233d4,
    229 * _0x4233d4,
    92 * _0x4233d4,
    235 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    76 * _0x4233d4,
    239 * _0x4233d4,
    75 * _0x4233d4,
    232 * _0x4233d4,
    56 * _0x4233d4,
    213 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    31 * _0x4233d4,
    187 * _0x4233d4,
    28 * _0x4233d4,
    176 * _0x4233d4,
    23 * _0x4233d4,
    162 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    38 * _0x4233d4,
    131 * _0x4233d4,
    40 * _0x4233d4,
    120 * _0x4233d4,
    44 * _0x4233d4,
    106 * _0x4233d4
  );
  _0x59ebfa.closePath();
  fill_path(_0x59ebfa, _0xfc17e3, _0xfc17e3, 4 * _0x4233d4);
  _0x59ebfa.beginPath();
  _0x59ebfa.lineCap = "round";
  _0x59ebfa.lineJoin = "round";
  _0x59ebfa.moveTo(30 * _0x4233d4, 159 * _0x4233d4);
  _0x59ebfa.bezierCurveTo(
    46 * _0x4233d4,
    157 * _0x4233d4,
    59 * _0x4233d4,
    152 * _0x4233d4,
    68 * _0x4233d4,
    148 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    63 * _0x4233d4,
    155 * _0x4233d4,
    52 * _0x4233d4,
    160 * _0x4233d4,
    44 * _0x4233d4,
    164 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    59 * _0x4233d4,
    169 * _0x4233d4,
    66 * _0x4233d4,
    174 * _0x4233d4,
    75 * _0x4233d4,
    178 * _0x4233d4
  );
  _0x59ebfa.bezierCurveTo(
    58 * _0x4233d4,
    178 * _0x4233d4,
    49 * _0x4233d4,
    175 * _0x4233d4,
    37 * _0x4233d4,
    174 * _0x4233d4
  );
  _0x59ebfa.closePath();
  fill_path(_0x59ebfa, _0xfc17e3);
  return _0xd41672;
}
function create_wingright(_0x5018a3, _0x2c7b80) {
  var _0x2231b0 = document.createElement("canvas");
  var _0x23f2b0 = _0x2231b0.getContext("2d");
  _0x2231b0.width = 85 * _0x5018a3;
  _0x2231b0.height = 145 * _0x5018a3;
  _0x23f2b0.translate(-165 * _0x5018a3, -95 * _0x5018a3);
  _0x23f2b0.beginPath();
  _0x23f2b0.lineCap = "round";
  _0x23f2b0.lineJoin = "round";
  _0x23f2b0.moveTo(217 * _0x5018a3, 103 * _0x5018a3);
  _0x23f2b0.bezierCurveTo(
    209 * _0x5018a3,
    129 * _0x5018a3,
    203 * _0x5018a3,
    137 * _0x5018a3,
    195 * _0x5018a3,
    146 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    195 * _0x5018a3,
    159 * _0x5018a3,
    194 * _0x5018a3,
    167 * _0x5018a3,
    189 * _0x5018a3,
    178 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    193 * _0x5018a3,
    186 * _0x5018a3,
    196 * _0x5018a3,
    195 * _0x5018a3,
    198 * _0x5018a3,
    216 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    217.5 * _0x5018a3,
    189.5 * _0x5018a3,
    217.5 * _0x5018a3,
    189.5 * _0x5018a3,
    237 * _0x5018a3,
    163 * _0x5018a3
  );
  _0x23f2b0.closePath();
  fill_path(_0x23f2b0, _0x2c7b80[1]);
  _0x23f2b0.beginPath();
  _0x23f2b0.lineCap = "round";
  _0x23f2b0.lineJoin = "round";
  _0x23f2b0.moveTo(231 * _0x5018a3, 163 * _0x5018a3);
  _0x23f2b0.bezierCurveTo(
    221 * _0x5018a3,
    139 * _0x5018a3,
    218 * _0x5018a3,
    128 * _0x5018a3,
    215 * _0x5018a3,
    114 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    213 * _0x5018a3,
    102 * _0x5018a3,
    220 * _0x5018a3,
    92 * _0x5018a3,
    222 * _0x5018a3,
    107 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    224 * _0x5018a3,
    118 * _0x5018a3,
    233 * _0x5018a3,
    138 * _0x5018a3,
    244 * _0x5018a3,
    161 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    235 * _0x5018a3,
    188 * _0x5018a3,
    224 * _0x5018a3,
    198 * _0x5018a3,
    204 * _0x5018a3,
    221 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    190 * _0x5018a3,
    233 * _0x5018a3,
    190 * _0x5018a3,
    235 * _0x5018a3,
    180 * _0x5018a3,
    235 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    167 * _0x5018a3,
    235 * _0x5018a3,
    164 * _0x5018a3,
    216 * _0x5018a3,
    175 * _0x5018a3,
    211 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    176 * _0x5018a3,
    208 * _0x5018a3,
    181 * _0x5018a3,
    207 * _0x5018a3,
    191 * _0x5018a3,
    205 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    213 * _0x5018a3,
    186 * _0x5018a3,
    218 * _0x5018a3,
    180 * _0x5018a3,
    230 * _0x5018a3,
    163 * _0x5018a3
  );
  _0x23f2b0.closePath();
  fill_path(_0x23f2b0, _0x2c7b80[2], _0x2c7b80[3], 4 * _0x5018a3);
  _0x23f2b0.beginPath();
  _0x23f2b0.lineCap = "round";
  _0x23f2b0.lineJoin = "round";
  _0x23f2b0.moveTo(234 * _0x5018a3, 154 * _0x5018a3);
  _0x23f2b0.bezierCurveTo(
    227 * _0x5018a3,
    156 * _0x5018a3,
    222 * _0x5018a3,
    156 * _0x5018a3,
    199 * _0x5018a3,
    148 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    201 * _0x5018a3,
    151 * _0x5018a3,
    216 * _0x5018a3,
    159 * _0x5018a3,
    224 * _0x5018a3,
    162 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    209 * _0x5018a3,
    169.5 * _0x5018a3,
    209 * _0x5018a3,
    169.5 * _0x5018a3,
    194 * _0x5018a3,
    177 * _0x5018a3
  );
  _0x23f2b0.bezierCurveTo(
    213.5 * _0x5018a3,
    175 * _0x5018a3,
    213.5 * _0x5018a3,
    175 * _0x5018a3,
    233 * _0x5018a3,
    173 * _0x5018a3
  );
  _0x23f2b0.closePath();
  fill_path(_0x23f2b0, _0x2c7b80[2]);
  return _0x2231b0;
}
function create_hurt_wingright(_0x1d1e90, _0x5f5109) {
  var _0x176e26 = document.createElement("canvas");
  var _0x1a1a56 = _0x176e26.getContext("2d");
  _0x176e26.width = 85 * _0x1d1e90;
  _0x176e26.height = 145 * _0x1d1e90;
  _0x1a1a56.translate(-165 * _0x1d1e90, -95 * _0x1d1e90);
  _0x1a1a56.beginPath();
  _0x1a1a56.lineCap = "round";
  _0x1a1a56.lineJoin = "round";
  _0x1a1a56.moveTo(217 * _0x1d1e90, 103 * _0x1d1e90);
  _0x1a1a56.bezierCurveTo(
    209 * _0x1d1e90,
    129 * _0x1d1e90,
    203 * _0x1d1e90,
    137 * _0x1d1e90,
    195 * _0x1d1e90,
    146 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    195 * _0x1d1e90,
    159 * _0x1d1e90,
    194 * _0x1d1e90,
    167 * _0x1d1e90,
    189 * _0x1d1e90,
    178 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    193 * _0x1d1e90,
    186 * _0x1d1e90,
    196 * _0x1d1e90,
    195 * _0x1d1e90,
    198 * _0x1d1e90,
    216 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    217.5 * _0x1d1e90,
    189.5 * _0x1d1e90,
    217.5 * _0x1d1e90,
    189.5 * _0x1d1e90,
    237 * _0x1d1e90,
    163 * _0x1d1e90
  );
  _0x1a1a56.closePath();
  fill_path(_0x1a1a56, _0x5f5109);
  _0x1a1a56.beginPath();
  _0x1a1a56.lineCap = "round";
  _0x1a1a56.lineJoin = "round";
  _0x1a1a56.moveTo(231 * _0x1d1e90, 163 * _0x1d1e90);
  _0x1a1a56.bezierCurveTo(
    221 * _0x1d1e90,
    139 * _0x1d1e90,
    218 * _0x1d1e90,
    128 * _0x1d1e90,
    215 * _0x1d1e90,
    114 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    213 * _0x1d1e90,
    102 * _0x1d1e90,
    220 * _0x1d1e90,
    92 * _0x1d1e90,
    222 * _0x1d1e90,
    107 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    224 * _0x1d1e90,
    118 * _0x1d1e90,
    233 * _0x1d1e90,
    138 * _0x1d1e90,
    244 * _0x1d1e90,
    161 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    235 * _0x1d1e90,
    188 * _0x1d1e90,
    224 * _0x1d1e90,
    198 * _0x1d1e90,
    204 * _0x1d1e90,
    221 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    190 * _0x1d1e90,
    233 * _0x1d1e90,
    190 * _0x1d1e90,
    235 * _0x1d1e90,
    180 * _0x1d1e90,
    235 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    167 * _0x1d1e90,
    235 * _0x1d1e90,
    164 * _0x1d1e90,
    216 * _0x1d1e90,
    175 * _0x1d1e90,
    211 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    176 * _0x1d1e90,
    208 * _0x1d1e90,
    181 * _0x1d1e90,
    207 * _0x1d1e90,
    191 * _0x1d1e90,
    205 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    213 * _0x1d1e90,
    186 * _0x1d1e90,
    218 * _0x1d1e90,
    180 * _0x1d1e90,
    230 * _0x1d1e90,
    163 * _0x1d1e90
  );
  _0x1a1a56.closePath();
  fill_path(_0x1a1a56, _0x5f5109, _0x5f5109, 4 * _0x1d1e90);
  _0x1a1a56.beginPath();
  _0x1a1a56.lineCap = "round";
  _0x1a1a56.lineJoin = "round";
  _0x1a1a56.moveTo(234 * _0x1d1e90, 154 * _0x1d1e90);
  _0x1a1a56.bezierCurveTo(
    227 * _0x1d1e90,
    156 * _0x1d1e90,
    222 * _0x1d1e90,
    156 * _0x1d1e90,
    199 * _0x1d1e90,
    148 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    201 * _0x1d1e90,
    151 * _0x1d1e90,
    216 * _0x1d1e90,
    159 * _0x1d1e90,
    224 * _0x1d1e90,
    162 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    209 * _0x1d1e90,
    169.5 * _0x1d1e90,
    209 * _0x1d1e90,
    169.5 * _0x1d1e90,
    194 * _0x1d1e90,
    177 * _0x1d1e90
  );
  _0x1a1a56.bezierCurveTo(
    213.5 * _0x1d1e90,
    175 * _0x1d1e90,
    213.5 * _0x1d1e90,
    175 * _0x1d1e90,
    233 * _0x1d1e90,
    173 * _0x1d1e90
  );
  _0x1a1a56.closePath();
  fill_path(_0x1a1a56, _0x5f5109);
  return _0x176e26;
}
function create_explorer_hat(_0x11dd20, _0x2a879f, _0x2b215e) {
  var _0x2ef557 = document.createElement("canvas");
  var _0x3a05e6 = _0x2ef557.getContext("2d");
  _0x2ef557.width = 187 * _0x11dd20;
  _0x2ef557.height = 119 * _0x11dd20;
  _0x3a05e6.globalAlpha = _0x2a879f ? 0.5 : 1;
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.translate(0, 3);
  _0x3a05e6.moveTo(53 * _0x11dd20, 45 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    3 * _0x11dd20,
    60 * _0x11dd20,
    11 * _0x11dd20,
    72 * _0x11dd20,
    19 * _0x11dd20,
    81 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    28 * _0x11dd20,
    82 * _0x11dd20,
    24 * _0x11dd20,
    81 * _0x11dd20,
    29 * _0x11dd20,
    82 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    26 * _0x11dd20,
    87 * _0x11dd20,
    28 * _0x11dd20,
    84 * _0x11dd20,
    28 * _0x11dd20,
    87 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    63 * _0x11dd20,
    101 * _0x11dd20,
    92 * _0x11dd20,
    100 * _0x11dd20,
    138 * _0x11dd20,
    93 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    172 * _0x11dd20,
    87 * _0x11dd20,
    180 * _0x11dd20,
    72 * _0x11dd20,
    168 * _0x11dd20,
    62 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    154 * _0x11dd20,
    51 * _0x11dd20,
    150 * _0x11dd20,
    50 * _0x11dd20,
    148 * _0x11dd20,
    49 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    132 * _0x11dd20,
    42 * _0x11dd20,
    90 * _0x11dd20,
    40 * _0x11dd20,
    55 * _0x11dd20,
    45 * _0x11dd20
  );
  _0x3a05e6.closePath();
  fill_path(_0x3a05e6, _0x2b215e[5]);
  _0x3a05e6.globalAlpha = 1;
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.translate(0, -3);
  _0x3a05e6.moveTo(53 * _0x11dd20, 45 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    3 * _0x11dd20,
    60 * _0x11dd20,
    11 * _0x11dd20,
    72 * _0x11dd20,
    19 * _0x11dd20,
    81 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    28 * _0x11dd20,
    82 * _0x11dd20,
    24 * _0x11dd20,
    81 * _0x11dd20,
    29 * _0x11dd20,
    82 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    26 * _0x11dd20,
    87 * _0x11dd20,
    28 * _0x11dd20,
    84 * _0x11dd20,
    28 * _0x11dd20,
    87 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    63 * _0x11dd20,
    101 * _0x11dd20,
    92 * _0x11dd20,
    100 * _0x11dd20,
    138 * _0x11dd20,
    93 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    172 * _0x11dd20,
    87 * _0x11dd20,
    180 * _0x11dd20,
    72 * _0x11dd20,
    168 * _0x11dd20,
    62 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    154 * _0x11dd20,
    51 * _0x11dd20,
    150 * _0x11dd20,
    50 * _0x11dd20,
    148 * _0x11dd20,
    49 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    132 * _0x11dd20,
    42 * _0x11dd20,
    90 * _0x11dd20,
    40 * _0x11dd20,
    55 * _0x11dd20,
    45 * _0x11dd20
  );
  _0x3a05e6.closePath();
  fill_path(_0x3a05e6, _0x2b215e[0], _0x2b215e[1], 4 * _0x11dd20);
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.moveTo(151 * _0x11dd20, 60 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    140 * _0x11dd20,
    36 * _0x11dd20,
    137 * _0x11dd20,
    32 * _0x11dd20,
    124 * _0x11dd20,
    29 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    98 * _0x11dd20,
    22 * _0x11dd20,
    80 * _0x11dd20,
    24 * _0x11dd20,
    62 * _0x11dd20,
    28 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    42 * _0x11dd20,
    35 * _0x11dd20,
    38 * _0x11dd20,
    46 * _0x11dd20,
    34 * _0x11dd20,
    58 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    53 * _0x11dd20,
    74 * _0x11dd20,
    76 * _0x11dd20,
    76 * _0x11dd20,
    91 * _0x11dd20,
    78 * _0x11dd20
  );
  _0x3a05e6.closePath();
  fill_path(_0x3a05e6, _0x2b215e[0], _0x2b215e[1], 4 * _0x11dd20);
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.moveTo(37 * _0x11dd20, 53 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    30 * _0x11dd20,
    56 * _0x11dd20,
    29 * _0x11dd20,
    67 * _0x11dd20,
    30 * _0x11dd20,
    68 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    94 * _0x11dd20,
    108 * _0x11dd20,
    150 * _0x11dd20,
    76 * _0x11dd20,
    155 * _0x11dd20,
    70 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    154 * _0x11dd20,
    60 * _0x11dd20,
    151 * _0x11dd20,
    54 * _0x11dd20,
    149 * _0x11dd20,
    53 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    101 * _0x11dd20,
    74 * _0x11dd20,
    66 * _0x11dd20,
    66 * _0x11dd20,
    37 * _0x11dd20,
    53 * _0x11dd20
  );
  _0x3a05e6.closePath();
  fill_path(_0x3a05e6, _0x2b215e[2], _0x2b215e[3], 4 * _0x11dd20);
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.moveTo(100 * _0x11dd20, 36 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    92 * _0x11dd20,
    25 * _0x11dd20,
    86 * _0x11dd20,
    28 * _0x11dd20,
    82 * _0x11dd20,
    34 * _0x11dd20
  );
  _0x3a05e6.bezierCurveTo(
    88 * _0x11dd20,
    40 * _0x11dd20,
    93 * _0x11dd20,
    40 * _0x11dd20,
    98 * _0x11dd20,
    36 * _0x11dd20
  );
  _0x3a05e6.closePath();
  fill_path(_0x3a05e6, _0x2b215e[0], _0x2b215e[1], 4 * _0x11dd20);
  _0x3a05e6.beginPath();
  _0x3a05e6.lineCap = "round";
  _0x3a05e6.lineJoin = "round";
  _0x3a05e6.moveTo(80 * _0x11dd20, 43 * _0x11dd20);
  _0x3a05e6.bezierCurveTo(
    69 * _0x11dd20,
    46 * _0x11dd20,
    67 * _0x11dd20,
    52 * _0x11dd20,
    69 * _0x11dd20,
    58 * _0x11dd20
  );
  fill_path(_0x3a05e6, undefined, _0x2b215e[1], 4 * _0x11dd20);
  circle(_0x3a05e6, 58 * _0x11dd20, 50 * _0x11dd20, 5 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[4]);
  circle(_0x3a05e6, 43 * _0x11dd20, 65 * _0x11dd20, 5 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[4]);
  circle(_0x3a05e6, 58 * _0x11dd20, 73 * _0x11dd20, 5 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[4]);
  circle(_0x3a05e6, 58 * _0x11dd20, 50 * _0x11dd20, 2 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[5]);
  circle(_0x3a05e6, 43 * _0x11dd20, 65 * _0x11dd20, 2 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[5]);
  circle(_0x3a05e6, 58 * _0x11dd20, 73 * _0x11dd20, 2 * _0x11dd20);
  fill_path(_0x3a05e6, _0x2b215e[5]);
  return _0x2ef557;
}
function create_wooden_helmet(_0x214209, _0x5b5cc9, _0x286e52) {
  var _0x2057be = document.createElement("canvas");
  var _0x6c6377 = _0x2057be.getContext("2d");
  _0x2057be.width = 180 * _0x214209;
  _0x2057be.height = 120 * _0x214209;
  _0x6c6377.translate(-65 * _0x214209, -35 * _0x214209);
  _0x6c6377.globalAlpha = _0x5b5cc9 ? 0.5 : 1;
  _0x6c6377.translate(0, 10 * _0x214209);
  _0x6c6377.save();
  _0x6c6377.translate(150.5 * _0x214209, 63.84375 * _0x214209);
  round_rect(
    _0x6c6377,
    -67 * _0x214209,
    -16.5 * _0x214209,
    134 * _0x214209,
    33 * _0x214209,
    5 * _0x214209
  );
  _0x6c6377.restore();
  fill_path(_0x6c6377, _0x286e52[0]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(80.5 * _0x214209, 75.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    83 * _0x214209,
    106.34375 * _0x214209,
    83 * _0x214209,
    106.34375 * _0x214209,
    85.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    93 * _0x214209,
    135.84375 * _0x214209,
    93 * _0x214209,
    135.84375 * _0x214209,
    100.5 * _0x214209,
    134.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    99.5 * _0x214209,
    100.84375 * _0x214209,
    99.5 * _0x214209,
    100.84375 * _0x214209,
    98.5 * _0x214209,
    67.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[0]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(206.5 * _0x214209, 71.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    203.5 * _0x214209,
    104.34375 * _0x214209,
    203.5 * _0x214209,
    104.34375 * _0x214209,
    200.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    208.5 * _0x214209,
    137.34375 * _0x214209,
    208.5 * _0x214209,
    137.34375 * _0x214209,
    216.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    219 * _0x214209,
    102.84375 * _0x214209,
    219 * _0x214209,
    102.84375 * _0x214209,
    221.5 * _0x214209,
    68.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[0]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(136.5 * _0x214209, 75.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    139 * _0x214209,
    94.34375 * _0x214209,
    139 * _0x214209,
    94.34375 * _0x214209,
    141.5 * _0x214209,
    113.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    149.5 * _0x214209,
    115.34375 * _0x214209,
    149.5 * _0x214209,
    115.34375 * _0x214209,
    157.5 * _0x214209,
    117.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    162 * _0x214209,
    97.34375 * _0x214209,
    162 * _0x214209,
    97.34375 * _0x214209,
    166.5 * _0x214209,
    77.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[0]);
  _0x6c6377.save();
  _0x6c6377.translate(152.5 * _0x214209, 80.84375 * _0x214209);
  _0x6c6377.rotate(3.12);
  round_rect(
    _0x6c6377,
    -73 * _0x214209,
    -20.5 * _0x214209,
    146 * _0x214209,
    41 * _0x214209,
    5 * _0x214209
  );
  _0x6c6377.restore();
  fill_path(_0x6c6377, _0x286e52[0]);
  _0x6c6377.globalAlpha = 1;
  _0x6c6377.translate(0, -10 * _0x214209);
  _0x6c6377.save();
  _0x6c6377.translate(150.5 * _0x214209, 63.84375 * _0x214209);
  round_rect(
    _0x6c6377,
    -67 * _0x214209,
    -16.5 * _0x214209,
    134 * _0x214209,
    33 * _0x214209,
    5 * _0x214209
  );
  _0x6c6377.restore();
  fill_path(_0x6c6377, _0x286e52[1], _0x286e52[2], 4 * _0x214209);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(80.5 * _0x214209, 75.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    83 * _0x214209,
    106.34375 * _0x214209,
    83 * _0x214209,
    106.34375 * _0x214209,
    85.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    93 * _0x214209,
    135.84375 * _0x214209,
    93 * _0x214209,
    135.84375 * _0x214209,
    100.5 * _0x214209,
    134.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    99.5 * _0x214209,
    100.84375 * _0x214209,
    99.5 * _0x214209,
    100.84375 * _0x214209,
    98.5 * _0x214209,
    67.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[1], _0x286e52[2], 4 * _0x214209);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(206.5 * _0x214209, 71.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    203.5 * _0x214209,
    104.34375 * _0x214209,
    203.5 * _0x214209,
    104.34375 * _0x214209,
    200.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    208.5 * _0x214209,
    137.34375 * _0x214209,
    208.5 * _0x214209,
    137.34375 * _0x214209,
    216.5 * _0x214209,
    137.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    219 * _0x214209,
    102.84375 * _0x214209,
    219 * _0x214209,
    102.84375 * _0x214209,
    221.5 * _0x214209,
    68.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[1], _0x286e52[2], 4 * _0x214209);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(136.5 * _0x214209, 75.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    139 * _0x214209,
    94.34375 * _0x214209,
    139 * _0x214209,
    94.34375 * _0x214209,
    141.5 * _0x214209,
    113.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    149.5 * _0x214209,
    115.34375 * _0x214209,
    149.5 * _0x214209,
    115.34375 * _0x214209,
    157.5 * _0x214209,
    117.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    162 * _0x214209,
    97.34375 * _0x214209,
    162 * _0x214209,
    97.34375 * _0x214209,
    166.5 * _0x214209,
    77.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[1], _0x286e52[2], 4 * _0x214209);
  _0x6c6377.save();
  _0x6c6377.translate(152.5 * _0x214209, 80.84375 * _0x214209);
  _0x6c6377.rotate(3.12);
  round_rect(
    _0x6c6377,
    -73 * _0x214209,
    -20.5 * _0x214209,
    146 * _0x214209,
    41 * _0x214209,
    5 * _0x214209
  );
  _0x6c6377.restore();
  fill_path(_0x6c6377, _0x286e52[1], _0x286e52[2], 4 * _0x214209);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(83.5 * _0x214209, 73.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    93.5 * _0x214209,
    70.34375 * _0x214209,
    105.5 * _0x214209,
    70.34375 * _0x214209,
    124.5 * _0x214209,
    72.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    132.5 * _0x214209,
    78.34375 * _0x214209,
    162.5 * _0x214209,
    80.34375 * _0x214209,
    176.5 * _0x214209,
    76.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    194.5 * _0x214209,
    69.34375 * _0x214209,
    192.5 * _0x214209,
    68.34375 * _0x214209,
    199.5 * _0x214209,
    63.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    204.5 * _0x214209,
    63.34375 * _0x214209,
    204.5 * _0x214209,
    63.34375 * _0x214209,
    209.5 * _0x214209,
    63.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    153.5 * _0x214209,
    82.34375 * _0x214209,
    157.5 * _0x214209,
    85.34375 * _0x214209,
    209.5 * _0x214209,
    63.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    194.5 * _0x214209,
    88.34375 * _0x214209,
    162.5 * _0x214209,
    87.34375 * _0x214209,
    149.5 * _0x214209,
    88.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    129.5 * _0x214209,
    81.34375 * _0x214209,
    103.5 * _0x214209,
    75.34375 * _0x214209,
    83.5 * _0x214209,
    82.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(137.5 * _0x214209, 65.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    150.5 * _0x214209,
    76.34375 * _0x214209,
    170.5 * _0x214209,
    71.34375 * _0x214209,
    174.5 * _0x214209,
    65.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(221.5 * _0x214209, 85.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    211.5 * _0x214209,
    79.34375 * _0x214209,
    191.5 * _0x214209,
    88.34375 * _0x214209,
    181.5 * _0x214209,
    96.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    201.5 * _0x214209,
    96.34375 * _0x214209,
    201.5 * _0x214209,
    96.34375 * _0x214209,
    221.5 * _0x214209,
    96.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(84.5 * _0x214209, 89.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    102.5 * _0x214209,
    87.34375 * _0x214209,
    112.5 * _0x214209,
    88.34375 * _0x214209,
    119.5 * _0x214209,
    97.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    102 * _0x214209,
    98.34375 * _0x214209,
    102 * _0x214209,
    98.34375 * _0x214209,
    84.5 * _0x214209,
    99.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(208.5 * _0x214209, 104.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    208.5 * _0x214209,
    110.34375 * _0x214209,
    208.5 * _0x214209,
    110.34375 * _0x214209,
    208.5 * _0x214209,
    116.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    211.5 * _0x214209,
    110.34375 * _0x214209,
    211.5 * _0x214209,
    110.34375 * _0x214209,
    214.5 * _0x214209,
    104.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(87.5 * _0x214209, 117.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    92 * _0x214209,
    118.84375 * _0x214209,
    92 * _0x214209,
    118.84375 * _0x214209,
    96.5 * _0x214209,
    120.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    93 * _0x214209,
    123.84375 * _0x214209,
    93 * _0x214209,
    123.84375 * _0x214209,
    89.5 * _0x214209,
    127.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(107.5 * _0x214209, 51.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    122.5 * _0x214209,
    54.34375 * _0x214209,
    122.5 * _0x214209,
    54.34375 * _0x214209,
    137.5 * _0x214209,
    57.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    118 * _0x214209,
    57.34375 * _0x214209,
    118 * _0x214209,
    57.34375 * _0x214209,
    98.5 * _0x214209,
    57.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    94.5 * _0x214209,
    54.84375 * _0x214209,
    94.5 * _0x214209,
    54.84375 * _0x214209,
    90.5 * _0x214209,
    52.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(170.5 * _0x214209, 52.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    179.5 * _0x214209,
    51.84375 * _0x214209,
    179.5 * _0x214209,
    51.84375 * _0x214209,
    188.5 * _0x214209,
    51.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    187.5 * _0x214209,
    53.84375 * _0x214209,
    187.5 * _0x214209,
    53.84375 * _0x214209,
    186.5 * _0x214209,
    56.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    177 * _0x214209,
    56.34375 * _0x214209,
    177 * _0x214209,
    56.34375 * _0x214209,
    167.5 * _0x214209,
    56.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[3]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(80.5 * _0x214209, 69.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    86.5 * _0x214209,
    70.34375 * _0x214209,
    86.5 * _0x214209,
    70.34375 * _0x214209,
    92.5 * _0x214209,
    71.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    86 * _0x214209,
    73.34375 * _0x214209,
    86 * _0x214209,
    73.34375 * _0x214209,
    79.5 * _0x214209,
    75.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(222.5 * _0x214209, 75.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    214.5 * _0x214209,
    76.34375 * _0x214209,
    214.5 * _0x214209,
    76.34375 * _0x214209,
    206.5 * _0x214209,
    77.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    216.5 * _0x214209,
    79.34375 * _0x214209,
    216.5 * _0x214209,
    79.34375 * _0x214209,
    226.5 * _0x214209,
    81.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(116.5 * _0x214209, 100.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    128 * _0x214209,
    97.34375 * _0x214209,
    128 * _0x214209,
    97.34375 * _0x214209,
    139.5 * _0x214209,
    94.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    140 * _0x214209,
    96.84375 * _0x214209,
    140 * _0x214209,
    96.84375 * _0x214209,
    140.5 * _0x214209,
    99.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(112.5 * _0x214209, 48.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    115.5 * _0x214209,
    50.84375 * _0x214209,
    115.5 * _0x214209,
    50.84375 * _0x214209,
    118.5 * _0x214209,
    53.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    131 * _0x214209,
    50.84375 * _0x214209,
    131 * _0x214209,
    50.84375 * _0x214209,
    143.5 * _0x214209,
    48.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(216.5 * _0x214209, 109.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    213 * _0x214209,
    114.84375 * _0x214209,
    213 * _0x214209,
    114.84375 * _0x214209,
    209.5 * _0x214209,
    120.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    212 * _0x214209,
    118.84375 * _0x214209,
    212 * _0x214209,
    118.84375 * _0x214209,
    214.5 * _0x214209,
    117.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  _0x6c6377.beginPath();
  _0x6c6377.lineCap = "round";
  _0x6c6377.lineJoin = "round";
  _0x6c6377.moveTo(86.5 * _0x214209, 133.34375 * _0x214209);
  _0x6c6377.bezierCurveTo(
    89 * _0x214209,
    127.34375 * _0x214209,
    89 * _0x214209,
    127.34375 * _0x214209,
    91.5 * _0x214209,
    121.34375 * _0x214209
  );
  _0x6c6377.bezierCurveTo(
    92.5 * _0x214209,
    127.34375 * _0x214209,
    92.5 * _0x214209,
    127.34375 * _0x214209,
    93.5 * _0x214209,
    133.34375 * _0x214209
  );
  _0x6c6377.closePath();
  fill_path(_0x6c6377, _0x286e52[2]);
  return _0x2057be;
}
function create_viking_hat(_0x5173ba, _0x239de2, _0x1b6dff) {
  var _0x359c83 = document.createElement("canvas");
  var _0x16f039 = _0x359c83.getContext("2d");
  _0x359c83.width = 175 * _0x5173ba;
  _0x359c83.height = 106 * _0x5173ba;
  _0x16f039.globalAlpha = _0x239de2 ? 0.5 : 1;
  _0x16f039.translate(0, 8 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(28 * _0x5173ba, 67 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    55 * _0x5173ba,
    80 * _0x5173ba,
    126 * _0x5173ba,
    74 * _0x5173ba,
    144 * _0x5173ba,
    68 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    145 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    114 * _0x5173ba,
    94 * _0x5173ba,
    47 * _0x5173ba,
    91 * _0x5173ba,
    28 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[0]);
  _0x16f039.globalAlpha = 1;
  _0x16f039.translate(0, -8 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(145 * _0x5173ba, 75 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    143 * _0x5173ba,
    51 * _0x5173ba,
    133 * _0x5173ba,
    29 * _0x5173ba,
    100 * _0x5173ba,
    27 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    52 * _0x5173ba,
    21 * _0x5173ba,
    37 * _0x5173ba,
    37 * _0x5173ba,
    31 * _0x5173ba,
    54 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    23 * _0x5173ba,
    78 * _0x5173ba,
    28 * _0x5173ba,
    77 * _0x5173ba,
    36 * _0x5173ba,
    79 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    80 * _0x5173ba,
    87 * _0x5173ba,
    120 * _0x5173ba,
    81 * _0x5173ba,
    145 * _0x5173ba,
    76 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[1]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(38 * _0x5173ba, 46 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    52 * _0x5173ba,
    37 * _0x5173ba,
    69 * _0x5173ba,
    36 * _0x5173ba,
    85 * _0x5173ba,
    36 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    118 * _0x5173ba,
    38 * _0x5173ba,
    129 * _0x5173ba,
    42 * _0x5173ba,
    137 * _0x5173ba,
    48 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    135 * _0x5173ba,
    45 * _0x5173ba,
    135 * _0x5173ba,
    45 * _0x5173ba,
    133 * _0x5173ba,
    42 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    124 * _0x5173ba,
    32 * _0x5173ba,
    116 * _0x5173ba,
    28 * _0x5173ba,
    88 * _0x5173ba,
    25 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    47 * _0x5173ba,
    28 * _0x5173ba,
    40 * _0x5173ba,
    32 * _0x5173ba,
    36 * _0x5173ba,
    44 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[5]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(145 * _0x5173ba, 75 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    143 * _0x5173ba,
    51 * _0x5173ba,
    133 * _0x5173ba,
    29 * _0x5173ba,
    100 * _0x5173ba,
    27 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    52 * _0x5173ba,
    21 * _0x5173ba,
    37 * _0x5173ba,
    37 * _0x5173ba,
    31 * _0x5173ba,
    54 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    23 * _0x5173ba,
    78 * _0x5173ba,
    28 * _0x5173ba,
    77 * _0x5173ba,
    36 * _0x5173ba,
    79 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    80 * _0x5173ba,
    87 * _0x5173ba,
    120 * _0x5173ba,
    81 * _0x5173ba,
    145 * _0x5173ba,
    76 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, undefined, _0x1b6dff[2], 4 * _0x5173ba);
  _0x16f039.translate(0, -3 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(28 * _0x5173ba, 67 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    55 * _0x5173ba,
    80 * _0x5173ba,
    126 * _0x5173ba,
    74 * _0x5173ba,
    144 * _0x5173ba,
    68 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    145 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    114 * _0x5173ba,
    94 * _0x5173ba,
    47 * _0x5173ba,
    91 * _0x5173ba,
    28 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[10], _0x1b6dff[10], 4 * _0x5173ba);
  _0x16f039.translate(0, 3 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(131 * _0x5173ba, 43 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    145 * _0x5173ba,
    40 * _0x5173ba,
    148 * _0x5173ba,
    32 * _0x5173ba,
    147 * _0x5173ba,
    17 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    166 * _0x5173ba,
    39 * _0x5173ba,
    155 * _0x5173ba,
    62 * _0x5173ba,
    140 * _0x5173ba,
    67 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    128 * _0x5173ba,
    65 * _0x5173ba,
    128 * _0x5173ba,
    52 * _0x5173ba,
    131 * _0x5173ba,
    45 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[3]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(41 * _0x5173ba, 43 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    30 * _0x5173ba,
    42 * _0x5173ba,
    24 * _0x5173ba,
    33 * _0x5173ba,
    25 * _0x5173ba,
    17 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    7 * _0x5173ba,
    34 * _0x5173ba,
    17 * _0x5173ba,
    63 * _0x5173ba,
    33 * _0x5173ba,
    66 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    45 * _0x5173ba,
    59 * _0x5173ba,
    44 * _0x5173ba,
    53 * _0x5173ba,
    42 * _0x5173ba,
    44 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[3]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(24 * _0x5173ba, 19 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    24 * _0x5173ba,
    35 * _0x5173ba,
    35 * _0x5173ba,
    42 * _0x5173ba,
    42 * _0x5173ba,
    44 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    43 * _0x5173ba,
    51 * _0x5173ba,
    43 * _0x5173ba,
    48 * _0x5173ba,
    43 * _0x5173ba,
    56 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    25 * _0x5173ba,
    47 * _0x5173ba,
    17 * _0x5173ba,
    36 * _0x5173ba,
    23 * _0x5173ba,
    20 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[6]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(148 * _0x5173ba, 18 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    159 * _0x5173ba,
    44 * _0x5173ba,
    139 * _0x5173ba,
    52 * _0x5173ba,
    130 * _0x5173ba,
    55 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    129 * _0x5173ba,
    48 * _0x5173ba,
    129 * _0x5173ba,
    46 * _0x5173ba,
    131 * _0x5173ba,
    43 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    144 * _0x5173ba,
    37 * _0x5173ba,
    148 * _0x5173ba,
    35 * _0x5173ba,
    147 * _0x5173ba,
    18 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[6]);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(131 * _0x5173ba, 43 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    145 * _0x5173ba,
    40 * _0x5173ba,
    148 * _0x5173ba,
    32 * _0x5173ba,
    147 * _0x5173ba,
    17 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    166 * _0x5173ba,
    39 * _0x5173ba,
    155 * _0x5173ba,
    62 * _0x5173ba,
    140 * _0x5173ba,
    67 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    128 * _0x5173ba,
    65 * _0x5173ba,
    128 * _0x5173ba,
    52 * _0x5173ba,
    131 * _0x5173ba,
    45 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, undefined, _0x1b6dff[4], 4 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(41 * _0x5173ba, 43 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    30 * _0x5173ba,
    42 * _0x5173ba,
    24 * _0x5173ba,
    33 * _0x5173ba,
    25 * _0x5173ba,
    17 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    7 * _0x5173ba,
    34 * _0x5173ba,
    17 * _0x5173ba,
    63 * _0x5173ba,
    33 * _0x5173ba,
    66 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    45 * _0x5173ba,
    59 * _0x5173ba,
    44 * _0x5173ba,
    53 * _0x5173ba,
    42 * _0x5173ba,
    44 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, undefined, _0x1b6dff[4], 4 * _0x5173ba);
  _0x16f039.save();
  _0x16f039.translate(87 * _0x5173ba, 34.5 * _0x5173ba);
  _0x16f039.rotate(0);
  round_rect(
    _0x16f039,
    -8 * _0x5173ba,
    -10.5 * _0x5173ba,
    16 * _0x5173ba,
    21 * _0x5173ba,
    10 * _0x5173ba
  );
  _0x16f039.restore();
  fill_path(_0x16f039, _0x1b6dff[7], _0x1b6dff[2], 4 * _0x5173ba);
  _0x16f039.save();
  _0x16f039.translate(87 * _0x5173ba, 57 * _0x5173ba);
  _0x16f039.rotate(0);
  round_rect(
    _0x16f039,
    -8 * _0x5173ba,
    -23 * _0x5173ba,
    16 * _0x5173ba,
    46 * _0x5173ba,
    10 * _0x5173ba
  );
  _0x16f039.restore();
  fill_path(_0x16f039, _0x1b6dff[8], _0x1b6dff[2], 4 * _0x5173ba);
  circle(
    _0x16f039,
    87 * _0x5173ba,
    39 * _0x5173ba,
    4.123105625617661 * _0x5173ba
  );
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  circle(
    _0x16f039,
    87 * _0x5173ba,
    60 * _0x5173ba,
    4.242640687119285 * _0x5173ba
  );
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(28 * _0x5173ba, 67 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    55 * _0x5173ba,
    80 * _0x5173ba,
    126 * _0x5173ba,
    74 * _0x5173ba,
    144 * _0x5173ba,
    68 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    144.5 * _0x5173ba,
    75 * _0x5173ba,
    145 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    114 * _0x5173ba,
    94 * _0x5173ba,
    47 * _0x5173ba,
    91 * _0x5173ba,
    28 * _0x5173ba,
    82 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[8], _0x1b6dff[2], 4 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(27 * _0x5173ba, 69 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    13 * _0x5173ba,
    77 * _0x5173ba,
    16 * _0x5173ba,
    74 * _0x5173ba,
    27 * _0x5173ba,
    80 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  _0x16f039.beginPath();
  _0x16f039.lineCap = "round";
  _0x16f039.lineJoin = "round";
  _0x16f039.moveTo(145 * _0x5173ba, 70 * _0x5173ba);
  _0x16f039.bezierCurveTo(
    149.5 * _0x5173ba,
    72 * _0x5173ba,
    149.5 * _0x5173ba,
    72 * _0x5173ba,
    154 * _0x5173ba,
    74 * _0x5173ba
  );
  _0x16f039.bezierCurveTo(
    150 * _0x5173ba,
    77 * _0x5173ba,
    150 * _0x5173ba,
    77 * _0x5173ba,
    146 * _0x5173ba,
    80 * _0x5173ba
  );
  _0x16f039.closePath();
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  circle(_0x16f039, 50 * _0x5173ba, 80 * _0x5173ba, 5 * _0x5173ba);
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  circle(
    _0x16f039,
    86.01141357421875 * _0x5173ba,
    81.76705932617188 * _0x5173ba,
    5 * _0x5173ba
  );
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  circle(
    _0x16f039,
    119.01141357421875 * _0x5173ba,
    80.13069152832031 * _0x5173ba,
    5 * _0x5173ba
  );
  fill_path(_0x16f039, _0x1b6dff[9], _0x1b6dff[2], 4 * _0x5173ba);
  return _0x359c83;
}
function create_gold_helmet(_0x70c023, _0x272562, _0x1cfb94) {
  var _0x31c630 = document.createElement("canvas");
  var _0x4e6fab = _0x31c630.getContext("2d");
  _0x31c630.width = 142 * _0x70c023;
  _0x31c630.height = 118 * _0x70c023;
  _0x4e6fab.save();
  _0x4e6fab.translate(
    70.16665649414062 * _0x70c023,
    38.20831298828125 * _0x70c023
  );
  round_rect(
    _0x4e6fab,
    -58.5 * _0x70c023,
    -27.5 * _0x70c023,
    117 * _0x70c023,
    55 * _0x70c023,
    20 * _0x70c023
  );
  _0x4e6fab.restore();
  fill_path(_0x4e6fab, _0x1cfb94[0], _0x1cfb94[1], 4 * _0x70c023);
  _0x4e6fab.save();
  _0x4e6fab.translate(70 * _0x70c023, 42.70831298828125 * _0x70c023);
  round_rect(
    _0x4e6fab,
    -61 * _0x70c023,
    -20 * _0x70c023,
    122 * _0x70c023,
    40 * _0x70c023,
    20 * _0x70c023
  );
  _0x4e6fab.restore();
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  _0x4e6fab.beginPath();
  _0x4e6fab.lineCap = "round";
  _0x4e6fab.lineJoin = "round";
  _0x4e6fab.moveTo(123 * _0x70c023, 70.375 * _0x70c023);
  _0x4e6fab.bezierCurveTo(
    115 * _0x70c023,
    99.375 * _0x70c023,
    119 * _0x70c023,
    85.375 * _0x70c023,
    115 * _0x70c023,
    100.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    112 * _0x70c023,
    116.375 * _0x70c023,
    117 * _0x70c023,
    109.375 * _0x70c023,
    131 * _0x70c023,
    100.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    131 * _0x70c023,
    83.375 * _0x70c023,
    131 * _0x70c023,
    83.375 * _0x70c023,
    131 * _0x70c023,
    66.375 * _0x70c023
  );
  _0x4e6fab.closePath();
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  _0x4e6fab.beginPath();
  _0x4e6fab.lineCap = "round";
  _0x4e6fab.lineJoin = "round";
  _0x4e6fab.moveTo(11 * _0x70c023, 68.375 * _0x70c023);
  _0x4e6fab.bezierCurveTo(
    11.166656494140625 * _0x70c023,
    84.375 * _0x70c023,
    9 * _0x70c023,
    99.375 * _0x70c023,
    10 * _0x70c023,
    100.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    35 * _0x70c023,
    113.375 * _0x70c023,
    27 * _0x70c023,
    110.375 * _0x70c023,
    25 * _0x70c023,
    95.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    16 * _0x70c023,
    68.375 * _0x70c023,
    17 * _0x70c023,
    69.375 * _0x70c023,
    17 * _0x70c023,
    68.375 * _0x70c023
  );
  _0x4e6fab.closePath();
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  _0x4e6fab.beginPath();
  _0x4e6fab.lineCap = "round";
  _0x4e6fab.lineJoin = "round";
  _0x4e6fab.moveTo(46 * _0x70c023, 32.375 * _0x70c023);
  _0x4e6fab.bezierCurveTo(
    43 * _0x70c023,
    8.375 * _0x70c023,
    45 * _0x70c023,
    7.375 * _0x70c023,
    56 * _0x70c023,
    6.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    105 * _0x70c023,
    4.375 * _0x70c023,
    102 * _0x70c023,
    6.375 * _0x70c023,
    97 * _0x70c023,
    32.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    138 * _0x70c023,
    43.375 * _0x70c023,
    133 * _0x70c023,
    45.375 * _0x70c023,
    133 * _0x70c023,
    58.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    133 * _0x70c023,
    85.375 * _0x70c023,
    125 * _0x70c023,
    74.375 * _0x70c023,
    111 * _0x70c023,
    70.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    70 * _0x70c023,
    69.875 * _0x70c023,
    29 * _0x70c023,
    69.375 * _0x70c023,
    29 * _0x70c023,
    69.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    7 * _0x70c023,
    84.375 * _0x70c023,
    7 * _0x70c023,
    70.375 * _0x70c023,
    7 * _0x70c023,
    59.375 * _0x70c023
  );
  _0x4e6fab.bezierCurveTo(
    6 * _0x70c023,
    28.375 * _0x70c023,
    32 * _0x70c023,
    39.375 * _0x70c023,
    44 * _0x70c023,
    32.375 * _0x70c023
  );
  _0x4e6fab.closePath();
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  circle(
    _0x4e6fab,
    71 * _0x70c023,
    44.375 * _0x70c023,
    16.55294535724685 * _0x70c023
  );
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  circle(
    _0x4e6fab,
    71 * _0x70c023,
    43.70831298828125 * _0x70c023,
    8.94427190999916 * _0x70c023
  );
  fill_path(_0x4e6fab, _0x1cfb94[2], _0x1cfb94[1], 4 * _0x70c023);
  return _0x31c630;
}
function create_diamond_helmet(_0x249b50, _0x5da332, _0x27a6fe) {
  var _0x3712b4 = document.createElement("canvas");
  var _0x26f7cd = _0x3712b4.getContext("2d");
  _0x3712b4.width = 142 * _0x249b50;
  _0x3712b4.height = 118 * _0x249b50;
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(111 * _0x249b50, 27.3671875 * _0x249b50);
  _0x26f7cd.bezierCurveTo(
    128 * _0x249b50,
    9.3671875 * _0x249b50,
    125 * _0x249b50,
    13.3671875 * _0x249b50,
    126 * _0x249b50,
    21.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    126 * _0x249b50,
    33.3671875 * _0x249b50,
    119 * _0x249b50,
    43.3671875 * _0x249b50,
    118 * _0x249b50,
    42.3671875 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(31 * _0x249b50, 23.3671875 * _0x249b50);
  _0x26f7cd.bezierCurveTo(
    17 * _0x249b50,
    15.3671875 * _0x249b50,
    16 * _0x249b50,
    14.3671875 * _0x249b50,
    17 * _0x249b50,
    20.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    22 * _0x249b50,
    33.3671875 * _0x249b50,
    20 * _0x249b50,
    27.3671875 * _0x249b50,
    24 * _0x249b50,
    34.3671875 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.save();
  _0x26f7cd.translate(70.5 * _0x249b50, 34.8671875 * _0x249b50);
  _0x26f7cd.rotate(0);
  round_rect(
    _0x26f7cd,
    -49.5 * _0x249b50,
    -21.5 * _0x249b50,
    99 * _0x249b50,
    43 * _0x249b50,
    15 * _0x249b50
  );
  _0x26f7cd.restore();
  fill_path(_0x26f7cd, _0x27a6fe[0], _0x27a6fe[1], 4 * _0x249b50);
  _0x26f7cd.save();
  _0x26f7cd.translate(71 * _0x249b50, 40.8671875 * _0x249b50);
  _0x26f7cd.rotate(0);
  round_rect(
    _0x26f7cd,
    -49 * _0x249b50,
    -12.5 * _0x249b50,
    98 * _0x249b50,
    25 * _0x249b50,
    15 * _0x249b50
  );
  _0x26f7cd.restore();
  fill_path(_0x26f7cd, _0x27a6fe[2], _0x27a6fe[1], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(
    19.800003051757812 * _0x249b50,
    75.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    19.300003051757812 * _0x249b50,
    82.95625305175781 * _0x249b50,
    19.300003051757812 * _0x249b50,
    82.95625305175781 * _0x249b50,
    18.800003051757812 * _0x249b50,
    89.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    38.80000305175781 * _0x249b50,
    115.95625305175781 * _0x249b50,
    37.80000305175781 * _0x249b50,
    104.95625305175781 * _0x249b50,
    31.800003051757812 * _0x249b50,
    91.95625305175781 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[2], _0x27a6fe[1], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(
    119.80000305175781 * _0x249b50,
    75.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    120.80000305175781 * _0x249b50,
    82.95625305175781 * _0x249b50,
    120.80000305175781 * _0x249b50,
    82.95625305175781 * _0x249b50,
    121.80000305175781 * _0x249b50,
    89.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    101.80000305175781 * _0x249b50,
    111.95625305175781 * _0x249b50,
    99.80000305175781 * _0x249b50,
    111.95625305175781 * _0x249b50,
    112.80000305175781 * _0x249b50,
    81.95625305175781 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[2], _0x27a6fe[1], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(17.800003051757812 * _0x249b50, 49.15625 * _0x249b50);
  _0x26f7cd.bezierCurveTo(
    17.800003051757812 * _0x249b50,
    64.15625 * _0x249b50,
    17.800003051757812 * _0x249b50,
    64.15625 * _0x249b50,
    17.800003051757812 * _0x249b50,
    79.15625 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    23.300003051757812 * _0x249b50,
    85.15625 * _0x249b50,
    23.300003051757812 * _0x249b50,
    85.15625 * _0x249b50,
    28.800003051757812 * _0x249b50,
    91.15625 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    36.80000305175781 * _0x249b50,
    96.15625 * _0x249b50,
    32.80000305175781 * _0x249b50,
    91.15625 * _0x249b50,
    28.800003051757812 * _0x249b50,
    77.15625 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    33.80000305175781 * _0x249b50,
    65.15625 * _0x249b50,
    33.80000305175781 * _0x249b50,
    65.15625 * _0x249b50,
    38.80000305175781 * _0x249b50,
    53.15625 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(
    123.80000305175781 * _0x249b50,
    53.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    121.80000305175781 * _0x249b50,
    77.95625305175781 * _0x249b50,
    121.80000305175781 * _0x249b50,
    74.95625305175781 * _0x249b50,
    121.80000305175781 * _0x249b50,
    78.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    115.80000305175781 * _0x249b50,
    84.95625305175781 * _0x249b50,
    115.80000305175781 * _0x249b50,
    84.95625305175781 * _0x249b50,
    109.80000305175781 * _0x249b50,
    90.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    102.80000305175781 * _0x249b50,
    93.95625305175781 * _0x249b50,
    105.80000305175781 * _0x249b50,
    86.95625305175781 * _0x249b50,
    110.80000305175781 * _0x249b50,
    76.95625305175781 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    107.30000305175781 * _0x249b50,
    65.45625305175781 * _0x249b50,
    103.80000305175781 * _0x249b50,
    53.95625305175781 * _0x249b50,
    103.80000305175781 * _0x249b50,
    53.95625305175781 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.beginPath();
  _0x26f7cd.lineCap = "round";
  _0x26f7cd.lineJoin = "round";
  _0x26f7cd.moveTo(18 * _0x249b50, 56.3671875 * _0x249b50);
  _0x26f7cd.bezierCurveTo(
    70 * _0x249b50,
    56.8671875 * _0x249b50,
    70 * _0x249b50,
    56.8671875 * _0x249b50,
    122 * _0x249b50,
    57.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    137 * _0x249b50,
    20.3671875 * _0x249b50,
    137 * _0x249b50,
    16.3671875 * _0x249b50,
    126 * _0x249b50,
    22.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    115.5 * _0x249b50,
    34.3671875 * _0x249b50,
    115.5 * _0x249b50,
    34.3671875 * _0x249b50,
    105 * _0x249b50,
    46.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    70.5 * _0x249b50,
    46.3671875 * _0x249b50,
    70.5 * _0x249b50,
    46.3671875 * _0x249b50,
    36 * _0x249b50,
    46.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    4 * _0x249b50,
    14.3671875 * _0x249b50,
    7 * _0x249b50,
    18.3671875 * _0x249b50,
    8 * _0x249b50,
    27.3671875 * _0x249b50
  );
  _0x26f7cd.bezierCurveTo(
    12.5 * _0x249b50,
    41.8671875 * _0x249b50,
    12.5 * _0x249b50,
    41.8671875 * _0x249b50,
    17 * _0x249b50,
    56.3671875 * _0x249b50
  );
  _0x26f7cd.closePath();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.save();
  _0x26f7cd.translate(
    68.30000305175781 * _0x249b50,
    41.45625305175781 * _0x249b50
  );
  _0x26f7cd.rotate(0.76);
  round_rect(
    _0x26f7cd,
    -20.5 * _0x249b50,
    -20.5 * _0x249b50,
    41 * _0x249b50,
    41 * _0x249b50,
    10 * _0x249b50
  );
  _0x26f7cd.restore();
  fill_path(_0x26f7cd, undefined, _0x27a6fe[5], 4 * _0x249b50);
  _0x26f7cd.save();
  _0x26f7cd.translate(
    68.80000305175781 * _0x249b50,
    44.45625305175781 * _0x249b50
  );
  _0x26f7cd.rotate(0.76);
  round_rect(
    _0x26f7cd,
    -21 * _0x249b50,
    -20.5 * _0x249b50,
    42 * _0x249b50,
    41 * _0x249b50,
    10 * _0x249b50
  );
  _0x26f7cd.restore();
  fill_path(_0x26f7cd, _0x27a6fe[3], _0x27a6fe[4], 4 * _0x249b50);
  _0x26f7cd.save();
  _0x26f7cd.translate(
    69.80000305175781 * _0x249b50,
    44.556243896484375 * _0x249b50
  );
  _0x26f7cd.rotate(0.76);
  round_rect(
    _0x26f7cd,
    -10 * _0x249b50,
    -10 * _0x249b50,
    20 * _0x249b50,
    20 * _0x249b50,
    5 * _0x249b50
  );
  _0x26f7cd.restore();
  fill_path(_0x26f7cd, _0x27a6fe[6], _0x27a6fe[7], 4 * _0x249b50);
  return _0x3712b4;
}
function create_amethyst_helmet(_0x25f9e2, _0x481bbc, _0x336db8) {
  var _0x6ad522 = document.createElement("canvas");
  var _0x4f662c = _0x6ad522.getContext("2d");
  _0x6ad522.width = 145 * _0x25f9e2;
  _0x6ad522.height = 120 * _0x25f9e2;
  _0x4f662c.beginPath();
  _0x4f662c.scale(0.6, 0.6);
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.translate(18 * _0x25f9e2, -8 * _0x25f9e2);
  _0x4f662c.moveTo(101 * _0x25f9e2, 72 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    144 * _0x25f9e2,
    69 * _0x25f9e2,
    149 * _0x25f9e2,
    58 * _0x25f9e2,
    162 * _0x25f9e2,
    49 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    174 * _0x25f9e2,
    31 * _0x25f9e2,
    173 * _0x25f9e2,
    38 * _0x25f9e2,
    172 * _0x25f9e2,
    45 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    168 * _0x25f9e2,
    73 * _0x25f9e2,
    158 * _0x25f9e2,
    75 * _0x25f9e2,
    152 * _0x25f9e2,
    78 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    106 * _0x25f9e2,
    89 * _0x25f9e2,
    107 * _0x25f9e2,
    91 * _0x25f9e2,
    107 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    107 * _0x25f9e2,
    100 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    99 * _0x25f9e2,
    112 * _0x25f9e2,
    98 * _0x25f9e2,
    110 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    94 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    92 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    92 * _0x25f9e2,
    89 * _0x25f9e2,
    90 * _0x25f9e2,
    90 * _0x25f9e2,
    73 * _0x25f9e2,
    86 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    81 * _0x25f9e2,
    40 * _0x25f9e2,
    77 * _0x25f9e2,
    35 * _0x25f9e2,
    68 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    23 * _0x25f9e2,
    36 * _0x25f9e2,
    28 * _0x25f9e2,
    34 * _0x25f9e2,
    36 * _0x25f9e2,
    46 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    58 * _0x25f9e2,
    83 * _0x25f9e2,
    72 * _0x25f9e2,
    98 * _0x25f9e2,
    72 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[4], _0x336db8[5], 4 * _0x25f9e2);
  _0x4f662c.beginPath();
  _0x4f662c.scale(1.1, 1.1);
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.translate(-9 * _0x25f9e2, 4 * _0x25f9e2);
  _0x4f662c.moveTo(101 * _0x25f9e2, 72 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    144 * _0x25f9e2,
    69 * _0x25f9e2,
    149 * _0x25f9e2,
    58 * _0x25f9e2,
    162 * _0x25f9e2,
    49 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    174 * _0x25f9e2,
    31 * _0x25f9e2,
    173 * _0x25f9e2,
    38 * _0x25f9e2,
    172 * _0x25f9e2,
    45 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    168 * _0x25f9e2,
    73 * _0x25f9e2,
    158 * _0x25f9e2,
    75 * _0x25f9e2,
    152 * _0x25f9e2,
    78 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    106 * _0x25f9e2,
    89 * _0x25f9e2,
    107 * _0x25f9e2,
    91 * _0x25f9e2,
    107 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    107 * _0x25f9e2,
    100 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    99 * _0x25f9e2,
    112 * _0x25f9e2,
    98 * _0x25f9e2,
    110 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    94 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    92 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    92 * _0x25f9e2,
    89 * _0x25f9e2,
    90 * _0x25f9e2,
    90 * _0x25f9e2,
    73 * _0x25f9e2,
    86 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    81 * _0x25f9e2,
    40 * _0x25f9e2,
    77 * _0x25f9e2,
    35 * _0x25f9e2,
    68 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    23 * _0x25f9e2,
    36 * _0x25f9e2,
    28 * _0x25f9e2,
    34 * _0x25f9e2,
    36 * _0x25f9e2,
    46 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    58 * _0x25f9e2,
    83 * _0x25f9e2,
    72 * _0x25f9e2,
    98 * _0x25f9e2,
    72 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[4], _0x336db8[5], 4 * _0x25f9e2);
  _0x4f662c.scale(1.1, 1.1);
  _0x4f662c.translate(-9 * _0x25f9e2, 4 * _0x25f9e2);
  _0x4f662c.save();
  _0x4f662c.translate(100 * _0x25f9e2, 73.06874084472656 * _0x25f9e2);
  _0x4f662c.rotate(0);
  round_rect(
    _0x4f662c,
    -61 * _0x25f9e2,
    -38.5 * _0x25f9e2,
    122 * _0x25f9e2,
    40 * _0x25f9e2,
    20 * _0x25f9e2
  );
  _0x4f662c.restore();
  fill_path(_0x4f662c, _0x336db8[1], _0x336db8[2], 4 * _0x25f9e2);
  _0x4f662c.save();
  _0x4f662c.translate(100 * _0x25f9e2, 71.36874389648438 * _0x25f9e2);
  _0x4f662c.rotate(0);
  round_rect(
    _0x4f662c,
    -60.5 * _0x25f9e2,
    -18 * _0x25f9e2,
    121 * _0x25f9e2,
    30 * _0x25f9e2,
    20 * _0x25f9e2
  );
  _0x4f662c.restore();
  fill_path(_0x4f662c, _0x336db8[3], _0x336db8[2], 4 * _0x25f9e2);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(144 * _0x25f9e2, 80 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    152 * _0x25f9e2,
    100 * _0x25f9e2,
    152 * _0x25f9e2,
    101 * _0x25f9e2,
    153 * _0x25f9e2,
    102 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    159 * _0x25f9e2,
    100 * _0x25f9e2,
    159 * _0x25f9e2,
    100 * _0x25f9e2,
    160 * _0x25f9e2,
    100 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    161 * _0x25f9e2,
    84 * _0x25f9e2,
    161 * _0x25f9e2,
    84 * _0x25f9e2,
    162 * _0x25f9e2,
    68 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[2]);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(57 * _0x25f9e2, 75 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    48 * _0x25f9e2,
    101 * _0x25f9e2,
    53 * _0x25f9e2,
    89 * _0x25f9e2,
    48 * _0x25f9e2,
    102 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    44 * _0x25f9e2,
    100 * _0x25f9e2,
    44 * _0x25f9e2,
    100 * _0x25f9e2,
    39 * _0x25f9e2,
    97 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    39 * _0x25f9e2,
    83 * _0x25f9e2,
    39 * _0x25f9e2,
    83 * _0x25f9e2,
    39 * _0x25f9e2,
    69 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[2]);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(101 * _0x25f9e2, 72 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    144 * _0x25f9e2,
    69 * _0x25f9e2,
    149 * _0x25f9e2,
    58 * _0x25f9e2,
    162 * _0x25f9e2,
    49 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    174 * _0x25f9e2,
    31 * _0x25f9e2,
    173 * _0x25f9e2,
    38 * _0x25f9e2,
    172 * _0x25f9e2,
    45 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    168 * _0x25f9e2,
    73 * _0x25f9e2,
    158 * _0x25f9e2,
    75 * _0x25f9e2,
    152 * _0x25f9e2,
    78 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    106 * _0x25f9e2,
    89 * _0x25f9e2,
    107 * _0x25f9e2,
    91 * _0x25f9e2,
    107 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    107 * _0x25f9e2,
    100 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    99 * _0x25f9e2,
    112 * _0x25f9e2,
    98 * _0x25f9e2,
    110 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    94 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2,
    93 * _0x25f9e2,
    107 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    93 * _0x25f9e2,
    100 * _0x25f9e2,
    92 * _0x25f9e2,
    94 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    92 * _0x25f9e2,
    89 * _0x25f9e2,
    90 * _0x25f9e2,
    90 * _0x25f9e2,
    73 * _0x25f9e2,
    86 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    81 * _0x25f9e2,
    40 * _0x25f9e2,
    77 * _0x25f9e2,
    35 * _0x25f9e2,
    68 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    23 * _0x25f9e2,
    36 * _0x25f9e2,
    28 * _0x25f9e2,
    34 * _0x25f9e2,
    36 * _0x25f9e2,
    46 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    45 * _0x25f9e2,
    58 * _0x25f9e2,
    83 * _0x25f9e2,
    72 * _0x25f9e2,
    98 * _0x25f9e2,
    72 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[4], _0x336db8[5], 4 * _0x25f9e2);
  _0x4f662c.translate(0, 0);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(115.5 * _0x25f9e2, 116.07290649414062 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    159.5 * _0x25f9e2,
    99.07290649414062 * _0x25f9e2,
    159.5 * _0x25f9e2,
    98.07290649414062 * _0x25f9e2,
    159.5 * _0x25f9e2,
    98.07290649414062 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    155.5 * _0x25f9e2,
    116.07290649414062 * _0x25f9e2,
    159.5 * _0x25f9e2,
    116.07290649414062 * _0x25f9e2,
    159.5 * _0x25f9e2,
    118.07290649414062 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    147.5 * _0x25f9e2,
    130.07290649414062 * _0x25f9e2,
    136.5 * _0x25f9e2,
    132.07290649414062 * _0x25f9e2,
    115.5 * _0x25f9e2,
    138.07290649414062 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[3], _0x336db8[2], 4 * _0x25f9e2);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(39.5 * _0x25f9e2, 96.07290649414062 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    85.5 * _0x25f9e2,
    114.07290649414062 * _0x25f9e2,
    62.5 * _0x25f9e2,
    105.57290649414062 * _0x25f9e2,
    85.5 * _0x25f9e2,
    115.07290649414062 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    85.5 * _0x25f9e2,
    125.57290649414062 * _0x25f9e2,
    85.5 * _0x25f9e2,
    125.57290649414062 * _0x25f9e2,
    85.5 * _0x25f9e2,
    136.07290649414062 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    51.5 * _0x25f9e2,
    129.07290649414062 * _0x25f9e2,
    51.5 * _0x25f9e2,
    125.07290649414062 * _0x25f9e2,
    41.5 * _0x25f9e2,
    118.07290649414062 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    44.5 * _0x25f9e2,
    106.07290649414062 * _0x25f9e2,
    42.5 * _0x25f9e2,
    103.07290649414062 * _0x25f9e2,
    40.5 * _0x25f9e2,
    96.07290649414062 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[3], _0x336db8[2], 4 * _0x25f9e2);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(86 * _0x25f9e2, 80 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    97 * _0x25f9e2,
    88 * _0x25f9e2,
    106 * _0x25f9e2,
    84 * _0x25f9e2,
    112 * _0x25f9e2,
    80 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    112 * _0x25f9e2,
    62 * _0x25f9e2,
    106 * _0x25f9e2,
    59 * _0x25f9e2,
    99 * _0x25f9e2,
    54 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    86 * _0x25f9e2,
    62 * _0x25f9e2,
    86 * _0x25f9e2,
    73 * _0x25f9e2,
    86 * _0x25f9e2,
    80 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[3], _0x336db8[2], 4 * _0x25f9e2);
  _0x4f662c.scale(0.5, 0.5);
  _0x4f662c.translate(100 * _0x25f9e2, 71 * _0x25f9e2);
  _0x4f662c.beginPath();
  _0x4f662c.lineCap = "round";
  _0x4f662c.lineJoin = "round";
  _0x4f662c.moveTo(86 * _0x25f9e2, 80 * _0x25f9e2);
  _0x4f662c.bezierCurveTo(
    97 * _0x25f9e2,
    88 * _0x25f9e2,
    106 * _0x25f9e2,
    84 * _0x25f9e2,
    112 * _0x25f9e2,
    80 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    112 * _0x25f9e2,
    62 * _0x25f9e2,
    106 * _0x25f9e2,
    59 * _0x25f9e2,
    99 * _0x25f9e2,
    54 * _0x25f9e2
  );
  _0x4f662c.bezierCurveTo(
    86 * _0x25f9e2,
    62 * _0x25f9e2,
    86 * _0x25f9e2,
    73 * _0x25f9e2,
    86 * _0x25f9e2,
    80 * _0x25f9e2
  );
  _0x4f662c.closePath();
  fill_path(_0x4f662c, _0x336db8[6], _0x336db8[2], 4 * _0x25f9e2);
  return _0x6ad522;
}
function create_book(_0x4f1697, _0x441fc2, _0x4b9d31) {
  var _0x18e171 = document.createElement("canvas");
  var _0x5af028 = _0x18e171.getContext("2d");
  _0x18e171.width = 400 * _0x4f1697;
  _0x18e171.height = 400 * _0x4f1697;
  _0x5af028.save();
  _0x5af028.translate(204 * _0x4f1697, 195.0833282470703 * _0x4f1697);
  _0x5af028.rotate(10.16);
  round_rect(
    _0x5af028,
    -97.5 * _0x4f1697,
    -134.5 * _0x4f1697,
    195 * _0x4f1697,
    269 * _0x4f1697,
    10 * _0x4f1697
  );
  _0x5af028.restore();
  fill_path(_0x5af028, _0x4b9d31[0], _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.beginPath();
  _0x5af028.lineCap = "round";
  _0x5af028.lineJoin = "round";
  _0x5af028.moveTo(58.5 * _0x4f1697, 226.5833282470703 * _0x4f1697);
  _0x5af028.bezierCurveTo(
    120.5 * _0x4f1697,
    281.5833282470703 * _0x4f1697,
    120.5 * _0x4f1697,
    281.5833282470703 * _0x4f1697,
    182.5 * _0x4f1697,
    336.5833282470703 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    263 * _0x4f1697,
    248.5833282470703 * _0x4f1697,
    263 * _0x4f1697,
    248.5833282470703 * _0x4f1697,
    343.5 * _0x4f1697,
    160.5833282470703 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    280.5 * _0x4f1697,
    104.58332824707031 * _0x4f1697,
    280.5 * _0x4f1697,
    104.58332824707031 * _0x4f1697,
    217.5 * _0x4f1697,
    48.58332824707031 * _0x4f1697
  );
  _0x5af028.closePath();
  fill_path(_0x5af028, _0x4b9d31[2], _0x4b9d31[3], 4 * _0x4f1697);
  _0x5af028.save();
  _0x5af028.translate(197 * _0x4f1697, 169.0833282470703 * _0x4f1697);
  _0x5af028.rotate(10.16);
  round_rect(
    _0x5af028,
    -93.5 * _0x4f1697,
    -126.5 * _0x4f1697,
    187 * _0x4f1697,
    253 * _0x4f1697,
    10 * _0x4f1697
  );
  _0x5af028.restore();
  fill_path(_0x5af028, _0x4b9d31[4], _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.beginPath();
  _0x5af028.lineCap = "round";
  _0x5af028.lineJoin = "round";
  _0x5af028.moveTo(226.5 * _0x4f1697, 24.583328247070312 * _0x4f1697);
  _0x5af028.bezierCurveTo(
    58.5 * _0x4f1697,
    207.5833282470703 * _0x4f1697,
    143 * _0x4f1697,
    116.58332824707031 * _0x4f1697,
    59.5 * _0x4f1697,
    208.5833282470703 * _0x4f1697
  );
  _0x5af028.closePath();
  fill_path(_0x5af028, undefined, _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.beginPath();
  _0x5af028.lineCap = "round";
  _0x5af028.lineJoin = "round";
  _0x5af028.moveTo(
    46.133331298828125 * _0x4f1697,
    202.64999389648438 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    46.133331298828125 * _0x4f1697,
    215.64999389648438 * _0x4f1697,
    46.133331298828125 * _0x4f1697,
    215.64999389648438 * _0x4f1697,
    46.133331298828125 * _0x4f1697,
    228.64999389648438 * _0x4f1697
  );
  _0x5af028.closePath();
  fill_path(_0x5af028, _0x4b9d31[4], _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.beginPath();
  _0x5af028.lineCap = "round";
  _0x5af028.lineJoin = "round";
  _0x5af028.moveTo(
    55.133331298828125 * _0x4f1697,
    211.64999389648438 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    55.133331298828125 * _0x4f1697,
    225.14999389648438 * _0x4f1697,
    55.133331298828125 * _0x4f1697,
    225.14999389648438 * _0x4f1697,
    55.133331298828125 * _0x4f1697,
    238.64999389648438 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    50.133331298828125 * _0x4f1697,
    235.64999389648438 * _0x4f1697,
    50.133331298828125 * _0x4f1697,
    235.64999389648438 * _0x4f1697,
    45.133331298828125 * _0x4f1697,
    232.64999389648438 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    45.133331298828125 * _0x4f1697,
    216.64999389648438 * _0x4f1697,
    45.133331298828125 * _0x4f1697,
    216.64999389648438 * _0x4f1697,
    45.133331298828125 * _0x4f1697,
    200.64999389648438 * _0x4f1697
  );
  _0x5af028.closePath();
  fill_path(_0x5af028, _0x4b9d31[4], _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.beginPath();
  _0x5af028.lineCap = "round";
  _0x5af028.lineJoin = "round";
  _0x5af028.moveTo(
    46.133331298828125 * _0x4f1697,
    198.39999389648438 * _0x4f1697
  );
  _0x5af028.bezierCurveTo(
    46.133331298828125 * _0x4f1697,
    199.89999389648438 * _0x4f1697,
    46.133331298828125 * _0x4f1697,
    199.89999389648438 * _0x4f1697,
    46.133331298828125 * _0x4f1697,
    201.39999389648438 * _0x4f1697
  );
  _0x5af028.closePath();
  fill_path(_0x5af028, _0x4b9d31[4], _0x4b9d31[1], 8 * _0x4f1697);
  _0x5af028.save();
  _0x5af028.translate(
    249.63333129882812 * _0x4f1697,
    120.89999389648438 * _0x4f1697
  );
  _0x5af028.rotate(7.04);
  round_rect(
    _0x5af028,
    -58.5 * _0x4f1697,
    -32 * _0x4f1697,
    117 * _0x4f1697,
    64 * _0x4f1697,
    10 * _0x4f1697
  );
  _0x5af028.restore();
  fill_path(_0x5af028, _0x4b9d31[5]);
  return _0x18e171;
}
function create_paper(_0x1da3af, _0x5b436f, _0x2f1f1d) {
  var _0xa98012 = document.createElement("canvas");
  var _0x3917c1 = _0xa98012.getContext("2d");
  _0xa98012.width = 170 * _0x1da3af;
  _0xa98012.height = 170 * _0x1da3af;
  _0x3917c1.globalAlpha = _0x5b436f ? 0.5 : 1;
  _0x3917c1.translate(-10 * _0x1da3af, 10 * _0x1da3af);
  _0x3917c1.beginPath();
  _0x3917c1.lineCap = "round";
  _0x3917c1.lineJoin = "round";
  _0x3917c1.moveTo(72.5 * _0x1da3af, 4.109375 * _0x1da3af);
  _0x3917c1.bezierCurveTo(
    117 * _0x1da3af,
    9.609375 * _0x1da3af,
    117 * _0x1da3af,
    9.609375 * _0x1da3af,
    161.5 * _0x1da3af,
    15.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    134.5 * _0x1da3af,
    106.109375 * _0x1da3af,
    110.5 * _0x1da3af,
    130.109375 * _0x1da3af,
    63.5 * _0x1da3af,
    145.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    33.5 * _0x1da3af,
    120.609375 * _0x1da3af,
    33.5 * _0x1da3af,
    120.609375 * _0x1da3af,
    3.5 * _0x1da3af,
    96.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    82.5 * _0x1da3af,
    75.109375 * _0x1da3af,
    69.5 * _0x1da3af,
    29.109375 * _0x1da3af,
    71.5 * _0x1da3af,
    6.109375 * _0x1da3af
  );
  _0x3917c1.closePath();
  fill_path(_0x3917c1, _0x2f1f1d[0]);
  _0x3917c1.globalAlpha = 1;
  _0x3917c1.translate(10 * _0x1da3af, -10 * _0x1da3af);
  _0x3917c1.beginPath();
  _0x3917c1.lineCap = "round";
  _0x3917c1.lineJoin = "round";
  _0x3917c1.moveTo(72.5 * _0x1da3af, 4.109375 * _0x1da3af);
  _0x3917c1.bezierCurveTo(
    117 * _0x1da3af,
    9.609375 * _0x1da3af,
    117 * _0x1da3af,
    9.609375 * _0x1da3af,
    161.5 * _0x1da3af,
    15.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    134.5 * _0x1da3af,
    106.109375 * _0x1da3af,
    110.5 * _0x1da3af,
    130.109375 * _0x1da3af,
    63.5 * _0x1da3af,
    145.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    33.5 * _0x1da3af,
    120.609375 * _0x1da3af,
    33.5 * _0x1da3af,
    120.609375 * _0x1da3af,
    3.5 * _0x1da3af,
    96.109375 * _0x1da3af
  );
  _0x3917c1.bezierCurveTo(
    82.5 * _0x1da3af,
    75.109375 * _0x1da3af,
    69.5 * _0x1da3af,
    29.109375 * _0x1da3af,
    71.5 * _0x1da3af,
    6.109375 * _0x1da3af
  );
  _0x3917c1.closePath();
  fill_path(_0x3917c1, _0x2f1f1d[1], _0x2f1f1d[2], 10 * _0x1da3af);
  return _0xa98012;
}
function create_lock(_0xf95898, _0x3c9d79, _0x444e07) {
  var _0x2ed2dd = document.createElement("canvas");
  var _0x402c68 = _0x2ed2dd.getContext("2d");
  _0x2ed2dd.width = 47 * _0xf95898;
  _0x2ed2dd.height = 60 * _0xf95898;
  var _0x2ed2dd = document.createElement("canvas");
  var _0x402c68 = _0x2ed2dd.getContext("2d");
  _0x2ed2dd.width = 47 * _0xf95898;
  _0x2ed2dd.height = 60 * _0xf95898;
  circle(
    _0x402c68,
    23.5 * _0xf95898,
    20.734375 * _0xf95898,
    15.132745950421556 * _0xf95898
  );
  fill_path(_0x402c68, undefined, _0x444e07[2], 4 * _0xf95898);
  circle(
    _0x402c68,
    23.5 * _0xf95898,
    20.734375 * _0xf95898,
    18.601075237738275 * _0xf95898
  );
  fill_path(_0x402c68, undefined, _0x444e07[1], 4 * _0xf95898);
  circle(
    _0x402c68,
    23.5 * _0xf95898,
    20.734375 * _0xf95898,
    11.40175425099138 * _0xf95898
  );
  fill_path(_0x402c68, undefined, _0x444e07[1], 4 * _0xf95898);
  _0x402c68.save();
  _0x402c68.translate(23 * _0xf95898, 38.734375 * _0xf95898);
  _0x402c68.rotate(0);
  round_rect(
    _0x402c68,
    -21.5 * _0xf95898,
    -19 * _0xf95898,
    43 * _0xf95898,
    38 * _0xf95898,
    10 * _0xf95898
  );
  _0x402c68.restore();
  fill_path(_0x402c68, _0x444e07[2], _0x444e07[1], 4 * _0xf95898);
  _0x402c68.save();
  _0x402c68.translate(23.5 * _0xf95898, 43.734375 * _0xf95898);
  _0x402c68.rotate(0.5235987755982988);
  round_regular_polygon(
    _0x402c68,
    3,
    8.06225774829855 * _0xf95898,
    0 * _0xf95898
  );
  _0x402c68.restore();
  fill_path(_0x402c68, _0x444e07[3]);
  circle(
    _0x402c68,
    23.5 * _0xf95898,
    35.734375 * _0xf95898,
    7.0710678118654755 * _0xf95898
  );
  fill_path(_0x402c68, _0x444e07[3]);
  return _0x2ed2dd;
}
function create_tronctotem(_0x1ce06a, _0x3200fa, _0x5bc6cf) {
  var _0x1892e6 = document.createElement("canvas");
  var _0x179078 = _0x1892e6.getContext("2d");
  _0x1892e6.width = 201 * _0x1ce06a;
  _0x1892e6.height = 164 * _0x1ce06a;
  _0x179078.translate(0, 5 * _0x1ce06a);
  _0x179078.globalAlpha = _0x3200fa ? 0.5 : 1;
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    74.92746655359852 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[0], _0x5bc6cf[0], 4 * _0x1ce06a);
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    65.9417374971317 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[0], _0x5bc6cf[0], 4 * _0x1ce06a);
  _0x179078.translate(0, -5);
  _0x179078.globalAlpha = 1;
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    74.92746655359852 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[1], _0x5bc6cf[3], 4 * _0x1ce06a);
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    65.9417374971317 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[1], _0x5bc6cf[2], 4 * _0x1ce06a);
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    35.9417374971317 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[1], _0x5bc6cf[2], 20 * _0x1ce06a);
  circle(
    _0x179078,
    100.5 * _0x1ce06a,
    82 * _0x1ce06a,
    15.9417374971317 * _0x1ce06a
  );
  fill_path(_0x179078, _0x5bc6cf[1], _0x5bc6cf[2], 6 * _0x1ce06a);
  return _0x1892e6;
}
function create_headtotem(_0x23c807, _0x35ec65, _0x462ca2, _0x412761) {
  var _0x529b69 = document.createElement("canvas");
  var _0x1f1ac8 = _0x529b69.getContext("2d");
  _0x529b69.width = 501 * _0x23c807;
  _0x529b69.height = 564 * _0x23c807;
  _0x1f1ac8.scale(0.5, 0.5);
  _0x1f1ac8.translate(240 * _0x23c807, 255 * _0x23c807);
  _0x1f1ac8.rotate(_0x412761);
  _0x1f1ac8.globalAlpha = _0x35ec65 ? 0.5 : 0.2;
  circle(
    _0x1f1ac8,
    174 * _0x23c807,
    87.984375 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    174 * _0x23c807,
    87.984375 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 8 * _0x23c807);
  circle(_0x1f1ac8, 174 * _0x23c807, 87.484375 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[0]);
  circle(
    _0x1f1ac8,
    30 * _0x23c807,
    87.984375 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(
    _0x1f1ac8,
    30 * _0x23c807,
    87.984375 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(_0x1f1ac8, 30 * _0x23c807, 87.484375 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[0]);
  circle(
    _0x1f1ac8,
    100 * _0x23c807,
    30 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(
    _0x1f1ac8,
    100 * _0x23c807,
    30 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(_0x1f1ac8, 100 * _0x23c807, 30 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[0]);
  circle(
    _0x1f1ac8,
    100 * _0x23c807,
    130 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(
    _0x1f1ac8,
    100 * _0x23c807,
    130 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  circle(_0x1f1ac8, 100 * _0x23c807, 130 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[0]);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(102 * _0x23c807, 81.984375 * _0x23c807);
  _0x1f1ac8.rotate(0);
  round_rect(
    _0x1f1ac8,
    -74 * _0x23c807,
    -57 * _0x23c807,
    148 * _0x23c807,
    114 * _0x23c807,
    23 * _0x23c807
  );
  _0x1f1ac8.restore();
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(101 * _0x23c807, 64.984375 * _0x23c807);
  _0x1f1ac8.rotate(0);
  round_rect(
    _0x1f1ac8,
    -33 * _0x23c807,
    -10 * _0x23c807,
    66 * _0x23c807,
    20 * _0x23c807,
    15 * _0x23c807
  );
  _0x1f1ac8.restore();
  fill_path(_0x1f1ac8, _0x462ca2[0], _0x462ca2[0], 4 * _0x23c807);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(102 * _0x23c807, 63.484375 * _0x23c807);
  _0x1f1ac8.rotate(0);
  round_rect(
    _0x1f1ac8,
    -9 * _0x23c807,
    -27.5 * _0x23c807,
    18 * _0x23c807,
    55 * _0x23c807,
    15 * _0x23c807
  );
  _0x1f1ac8.restore();
  _0x1f1ac8.translate(5, -5);
  _0x1f1ac8.globalAlpha = 1;
  circle(
    _0x1f1ac8,
    174 * _0x23c807,
    87.984375 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    174 * _0x23c807,
    87.984375 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(_0x1f1ac8, 174 * _0x23c807, 87.484375 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[2]);
  circle(
    _0x1f1ac8,
    30 * _0x23c807,
    87.984375 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    30 * _0x23c807,
    87.984375 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(_0x1f1ac8, 30 * _0x23c807, 87.484375 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[2]);
  circle(
    _0x1f1ac8,
    102 * _0x23c807,
    30 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    102 * _0x23c807,
    30 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(_0x1f1ac8, 102 * _0x23c807, 30 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[1]);
  circle(
    _0x1f1ac8,
    102 * _0x23c807,
    130 * _0x23c807,
    20.8806130178211 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    102 * _0x23c807,
    130 * _0x23c807,
    12.165525060596439 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(_0x1f1ac8, 102 * _0x23c807, 130 * _0x23c807, 6 * _0x23c807);
  fill_path(_0x1f1ac8, _0x462ca2[1]);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(102 * _0x23c807, 81.984375 * _0x23c807);
  round_rect(
    _0x1f1ac8,
    -74 * _0x23c807,
    -57 * _0x23c807,
    148 * _0x23c807,
    114 * _0x23c807,
    23 * _0x23c807
  );
  _0x1f1ac8.restore();
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(101 * _0x23c807, 64.984375 * _0x23c807);
  round_rect(
    _0x1f1ac8,
    -33 * _0x23c807,
    -10 * _0x23c807,
    66 * _0x23c807,
    20 * _0x23c807,
    15 * _0x23c807
  );
  _0x1f1ac8.restore();
  fill_path(_0x1f1ac8, _0x462ca2[2], _0x462ca2[1], 8 * _0x23c807);
  _0x1f1ac8.save();
  _0x1f1ac8.translate(102 * _0x23c807, 63.484375 * _0x23c807);
  round_rect(
    _0x1f1ac8,
    -9 * _0x23c807,
    -27.5 * _0x23c807,
    18 * _0x23c807,
    55 * _0x23c807,
    15 * _0x23c807
  );
  _0x1f1ac8.restore();
  fill_path(_0x1f1ac8, _0x462ca2[2], _0x462ca2[1], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    135 * _0x23c807,
    107.36605834960938 * _0x23c807,
    21.095023109728988 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    135 * _0x23c807,
    107.36605834960938 * _0x23c807,
    13 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    135 * _0x23c807,
    107.36605834960938 * _0x23c807,
    6.082762530298219 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[2]);
  circle(
    _0x1f1ac8,
    70 * _0x23c807,
    107.36605834960938 * _0x23c807,
    21.095023109728988 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    70 * _0x23c807,
    107.36605834960938 * _0x23c807,
    13 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[1], _0x462ca2[3], 8 * _0x23c807);
  circle(
    _0x1f1ac8,
    70 * _0x23c807,
    107.36605834960938 * _0x23c807,
    6.082762530298219 * _0x23c807
  );
  fill_path(_0x1f1ac8, _0x462ca2[2]);
  return _0x529b69;
}
function create_icon_team(_0x33c7c7, _0x59f60a, _0x5e3a39) {
  var _0x28921e = document.createElement("canvas");
  var _0x2d0e93 = _0x28921e.getContext("2d");
  _0x28921e.width = 95 * _0x33c7c7;
  _0x28921e.height = 85 * _0x33c7c7;
  if (_0x5e3a39 == 0) {
    _0x2d0e93.translate(7 * _0x33c7c7, 15 * _0x33c7c7);
    _0x2d0e93.scale(0.9, 0.9);
    _0x2d0e93.save();
    round_rect(
      _0x2d0e93,
      0 * _0x33c7c7,
      5 * _0x33c7c7,
      90 * _0x33c7c7,
      60 * _0x33c7c7,
      10
    );
    fill_path(_0x2d0e93, _0x59f60a[0]);
    _0x2d0e93.globalCompositeOperation = "destination-out";
    circle(_0x2d0e93, 25 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
    _0x2d0e93.fill();
    circle(_0x2d0e93, 65 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
    _0x2d0e93.fill();
    _0x2d0e93.restore();
    _0x2d0e93.save();
    round_rect(_0x2d0e93, 0, 0, 90 * _0x33c7c7, 60 * _0x33c7c7, 10 * _0x33c7c7);
    fill_path(_0x2d0e93, _0x59f60a[1]);
    _0x2d0e93.globalCompositeOperation = "destination-out";
    circle(_0x2d0e93, 25 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
    _0x2d0e93.fill();
    circle(_0x2d0e93, 65 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
    _0x2d0e93.fill();
    _0x2d0e93.restore();
  } else {
    if (_0x5e3a39 == 1) {
      _0x2d0e93.scale(0.8, 0.8);
      _0x2d0e93.translate(15 * _0x33c7c7, 33 * _0x33c7c7);
      _0x2d0e93.save();
      _0x2d0e93.scale(0.56, 0.56);
      _0x2d0e93.translate(-39 * _0x33c7c7, -60 * _0x33c7c7);
      _0x2d0e93.beginPath();
      _0x2d0e93.lineCap = "round";
      _0x2d0e93.lineJoin = "round";
      _0x2d0e93.moveTo(32.5 * _0x33c7c7, 50.642852783203125 * _0x33c7c7);
      _0x2d0e93.bezierCurveTo(
        83 * _0x33c7c7,
        69.64285278320312 * _0x33c7c7,
        83 * _0x33c7c7,
        69.64285278320312 * _0x33c7c7,
        133.5 * _0x33c7c7,
        88.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        93 * _0x33c7c7,
        92.64285278320312 * _0x33c7c7,
        93 * _0x33c7c7,
        92.64285278320312 * _0x33c7c7,
        52.5 * _0x33c7c7,
        96.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        30.5 * _0x33c7c7,
        100.64285278320312 * _0x33c7c7,
        36.5 * _0x33c7c7,
        94.64285278320312 * _0x33c7c7,
        32.5 * _0x33c7c7,
        84.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        21.5 * _0x33c7c7,
        45.642852783203125 * _0x33c7c7,
        24.5 * _0x33c7c7,
        48.642852783203125 * _0x33c7c7,
        31.5 * _0x33c7c7,
        50.642852783203125 * _0x33c7c7
      );
      _0x2d0e93.closePath();
      fill_path(_0x2d0e93, _0x59f60a[1]);
      _0x2d0e93.beginPath();
      _0x2d0e93.lineCap = "round";
      _0x2d0e93.lineJoin = "round";
      _0x2d0e93.moveTo(116.5 * _0x33c7c7, 85.64285278320312 * _0x33c7c7);
      _0x2d0e93.bezierCurveTo(
        160.5 * _0x33c7c7,
        67.14285278320312 * _0x33c7c7,
        160.5 * _0x33c7c7,
        67.14285278320312 * _0x33c7c7,
        204.5 * _0x33c7c7,
        48.642852783203125 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        220.5 * _0x33c7c7,
        42.642852783203125 * _0x33c7c7,
        208.5 * _0x33c7c7,
        68.64285278320312 * _0x33c7c7,
        205.5 * _0x33c7c7,
        85.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        202.5 * _0x33c7c7,
        98.64285278320312 * _0x33c7c7,
        199.5 * _0x33c7c7,
        98.64285278320312 * _0x33c7c7,
        188.5 * _0x33c7c7,
        100.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.closePath();
      fill_path(_0x2d0e93, _0x59f60a[1]);
      _0x2d0e93.beginPath();
      _0x2d0e93.lineCap = "round";
      _0x2d0e93.lineJoin = "round";
      _0x2d0e93.moveTo(166.5 * _0x33c7c7, 68.64285278320312 * _0x33c7c7);
      _0x2d0e93.bezierCurveTo(
        147.5 * _0x33c7c7,
        72.64285278320312 * _0x33c7c7,
        145.5 * _0x33c7c7,
        73.64285278320312 * _0x33c7c7,
        142.5 * _0x33c7c7,
        62.642852783203125 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        121.5 * _0x33c7c7,
        12.642852783203125 * _0x33c7c7,
        122.5 * _0x33c7c7,
        5.642852783203125 * _0x33c7c7,
        117.5 * _0x33c7c7,
        15.642852783203125 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        105.5 * _0x33c7c7,
        40.642852783203125 * _0x33c7c7,
        105.5 * _0x33c7c7,
        40.642852783203125 * _0x33c7c7,
        93.5 * _0x33c7c7,
        65.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        89.5 * _0x33c7c7,
        74.64285278320312 * _0x33c7c7,
        84.5 * _0x33c7c7,
        72.64285278320312 * _0x33c7c7,
        73.5 * _0x33c7c7,
        74.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.bezierCurveTo(
        98 * _0x33c7c7,
        87.64285278320312 * _0x33c7c7,
        98 * _0x33c7c7,
        87.64285278320312 * _0x33c7c7,
        122.5 * _0x33c7c7,
        100.64285278320312 * _0x33c7c7
      );
      _0x2d0e93.closePath();
      fill_path(_0x2d0e93, _0x59f60a[1]);
      _0x2d0e93.restore();
      _0x2d0e93.save();
      round_rect(
        _0x2d0e93,
        0,
        15 * _0x33c7c7,
        90 * _0x33c7c7,
        50 * _0x33c7c7,
        10 * _0x33c7c7
      );
      fill_path(_0x2d0e93, _0x59f60a[0]);
      round_rect(
        _0x2d0e93,
        0,
        10 * _0x33c7c7,
        90 * _0x33c7c7,
        50 * _0x33c7c7,
        10 * _0x33c7c7
      );
      fill_path(_0x2d0e93, _0x59f60a[1]);
      _0x2d0e93.globalCompositeOperation = "destination-out";
      circle(_0x2d0e93, 25 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
      _0x2d0e93.fill();
      circle(_0x2d0e93, 65 * _0x33c7c7, 40 * _0x33c7c7, 10 * _0x33c7c7);
      _0x2d0e93.fill();
      _0x2d0e93.restore();
    }
  }
  return _0x28921e;
}
function create_team_button(_0x3dbebc, _0x1f45f5, _0x42d651) {
  var _0x4d7065 = document.createElement("canvas");
  var _0x261929 = _0x4d7065.getContext("2d");
  _0x4d7065.width = 120 * _0x3dbebc;
  _0x4d7065.height = 100 * _0x3dbebc;
  round_rect(
    _0x261929,
    10 * _0x3dbebc,
    10 * _0x3dbebc,
    95 * _0x3dbebc,
    80 * _0x3dbebc,
    10 * _0x3dbebc
  );
  fill_path(_0x261929, _0x1f45f5[2]);
  round_rect(
    _0x261929,
    10 * _0x3dbebc,
    5 * _0x3dbebc,
    95 * _0x3dbebc,
    80 * _0x3dbebc,
    10 * _0x3dbebc
  );
  fill_path(_0x261929, _0x1f45f5[3], _0x1f45f5[4], 4 * _0x3dbebc);
  if (_0x42d651 == 0) {
    var _0x370dac = create_icon_team(0.75 * _0x3dbebc, _0x1f45f5, 0);
    _0x261929.drawImage(_0x370dac, 22 * _0x3dbebc, 18 * _0x3dbebc);
  } else {
    if (_0x42d651 == 1) {
      var _0x370dac = create_icon_team(0.75 * _0x3dbebc, _0x1f45f5, 1);
      _0x261929.drawImage(_0x370dac, 22 * _0x3dbebc, 18 * _0x3dbebc);
    }
  }
  return _0x4d7065;
}
function create_totem(_0x2c7a40, _0xb6a5ca, _0x3b0887) {
  var _0x3aa7d6 = document.createElement("canvas");
  var _0xced38d = _0x3aa7d6.getContext("2d");
  _0x3aa7d6.width = 185 * _0x2c7a40;
  _0x3aa7d6.height = 164 * _0x2c7a40;
  _0xced38d.translate(0, 0);
  var _0x535aaf = create_tronctotem(_0x2c7a40, _0xb6a5ca, _0x3b0887);
  _0xced38d.drawImage(_0x535aaf, -10 * _0x2c7a40, 0 * _0x2c7a40);
  var _0x535aaf = create_headtotem(_0x2c7a40, _0xb6a5ca, _0x3b0887, 0);
  _0xced38d.drawImage(_0x535aaf, -83 * _0x2c7a40, -40 * _0x2c7a40);
  var _0x535aaf = create_headtotem(
    _0x2c7a40,
    _0xb6a5ca,
    _0x3b0887,
    Math.PI / 1.4
  );
  _0xced38d.drawImage(_0x535aaf, -15 * _0x2c7a40, -88 * _0x2c7a40);
  var _0x535aaf = create_headtotem(
    _0x2c7a40,
    _0xb6a5ca,
    _0x3b0887,
    Math.PI / -1.4
  );
  _0xced38d.drawImage(_0x535aaf, 15 * _0x2c7a40, -8 * _0x2c7a40);
  return _0x3aa7d6;
}
function create_lockpick(_0x357e2e, _0x32c59a, _0x14f182) {
  var _0x8c18e4 = document.createElement("canvas");
  var _0x22abf9 = _0x8c18e4.getContext("2d");
  _0x8c18e4.width = 450 * _0x357e2e;
  _0x8c18e4.height = 790 * _0x357e2e;
  _0x22abf9.translate(5 * _0x357e2e, 5 * _0x357e2e);
  _0x22abf9.globalAlpha = _0x32c59a ? 0 : 0;
  circle(_0x22abf9, 178.5 * _0x357e2e, 172.828125 * _0x357e2e, 150 * _0x357e2e);
  fill_path(_0x22abf9, undefined, _0x14f182[0], 65 * _0x357e2e);
  circle(_0x22abf9, 178.5 * _0x357e2e, 172.828125 * _0x357e2e, 150 * _0x357e2e);
  fill_path(_0x22abf9, undefined, _0x14f182[0], 55 * _0x357e2e);
  _0x22abf9.closePath();
  _0x22abf9.save();
  _0x22abf9.translate(177 * _0x357e2e, 512.328125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -25 * _0x357e2e,
    -202.5 * _0x357e2e,
    65 * _0x357e2e,
    405 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.save();
  _0x22abf9.translate(136 * _0x357e2e, 581.828125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -39 * _0x357e2e,
    -23 * _0x357e2e,
    78 * _0x357e2e,
    46 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.save();
  _0x22abf9.translate(135.5 * _0x357e2e, 663.828125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -39.5 * _0x357e2e,
    -22 * _0x357e2e,
    79 * _0x357e2e,
    44 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(114 * _0x357e2e, 594.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    175 * _0x357e2e,
    596.828125 * _0x357e2e,
    163 * _0x357e2e,
    596.828125 * _0x357e2e,
    172 * _0x357e2e,
    594.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    171.5 * _0x357e2e,
    633.828125 * _0x357e2e,
    171.5 * _0x357e2e,
    633.828125 * _0x357e2e,
    171 * _0x357e2e,
    672.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    110 * _0x357e2e,
    673.828125 * _0x357e2e,
    140.5 * _0x357e2e,
    673.328125 * _0x357e2e,
    110 * _0x357e2e,
    673.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    110.5 * _0x357e2e,
    661.828125 * _0x357e2e,
    110.5 * _0x357e2e,
    661.828125 * _0x357e2e,
    111 * _0x357e2e,
    649.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    157 * _0x357e2e,
    633.828125 * _0x357e2e,
    134 * _0x357e2e,
    607.828125 * _0x357e2e,
    114 * _0x357e2e,
    594.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.translate(0, 5 * _0x357e2e);
  _0x22abf9.moveTo(140 * _0x357e2e, 294.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    212 * _0x357e2e,
    295.828125 * _0x357e2e,
    176.5 * _0x357e2e,
    295.328125 * _0x357e2e,
    213 * _0x357e2e,
    295.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    201.5 * _0x357e2e,
    325.328125 * _0x357e2e,
    201.5 * _0x357e2e,
    325.328125 * _0x357e2e,
    190 * _0x357e2e,
    354.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    175.5 * _0x357e2e,
    355.828125 * _0x357e2e,
    175.5 * _0x357e2e,
    355.828125 * _0x357e2e,
    161 * _0x357e2e,
    356.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    154.5 * _0x357e2e,
    328.828125 * _0x357e2e,
    154.5 * _0x357e2e,
    328.828125 * _0x357e2e,
    148 * _0x357e2e,
    300.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.translate(3, -5 * _0x357e2e);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(159 * _0x357e2e, 679.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    180 * _0x357e2e,
    665.828125 * _0x357e2e,
    155 * _0x357e2e,
    675.828125 * _0x357e2e,
    151 * _0x357e2e,
    671.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    154.5 * _0x357e2e,
    685.328125 * _0x357e2e,
    154.5 * _0x357e2e,
    685.328125 * _0x357e2e,
    158 * _0x357e2e,
    698.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    171 * _0x357e2e,
    699.828125 * _0x357e2e,
    171 * _0x357e2e,
    699.828125 * _0x357e2e,
    184 * _0x357e2e,
    700.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[0]);
  _0x22abf9.save();
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(157 * _0x357e2e, 548.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    157 * _0x357e2e,
    561.828125 * _0x357e2e,
    157 * _0x357e2e,
    561.828125 * _0x357e2e,
    157 * _0x357e2e,
    574.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    132.5 * _0x357e2e,
    580.828125 * _0x357e2e,
    132.5 * _0x357e2e,
    580.828125 * _0x357e2e,
    108 * _0x357e2e,
    586.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    112 * _0x357e2e,
    599.828125 * _0x357e2e,
    111 * _0x357e2e,
    593.828125 * _0x357e2e,
    112 * _0x357e2e,
    599.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    159 * _0x357e2e,
    603.828125 * _0x357e2e,
    126.5 * _0x357e2e,
    601.328125 * _0x357e2e,
    141 * _0x357e2e,
    602.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    145 * _0x357e2e,
    641.828125 * _0x357e2e,
    143.5 * _0x357e2e,
    623.828125 * _0x357e2e,
    146 * _0x357e2e,
    644.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    129.5 * _0x357e2e,
    645.328125 * _0x357e2e,
    129.5 * _0x357e2e,
    645.328125 * _0x357e2e,
    113 * _0x357e2e,
    645.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    107.5 * _0x357e2e,
    652.828125 * _0x357e2e,
    107.5 * _0x357e2e,
    652.828125 * _0x357e2e,
    102 * _0x357e2e,
    659.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    104 * _0x357e2e,
    669.328125 * _0x357e2e,
    104 * _0x357e2e,
    669.328125 * _0x357e2e,
    106 * _0x357e2e,
    678.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    145 * _0x357e2e,
    679.328125 * _0x357e2e,
    145 * _0x357e2e,
    679.328125 * _0x357e2e,
    184 * _0x357e2e,
    679.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    185 * _0x357e2e,
    615.828125 * _0x357e2e,
    185 * _0x357e2e,
    615.828125 * _0x357e2e,
    186 * _0x357e2e,
    551.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    172.5 * _0x357e2e,
    551.328125 * _0x357e2e,
    172.5 * _0x357e2e,
    551.328125 * _0x357e2e,
    159 * _0x357e2e,
    550.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[0], _0x14f182[0], 7 * _0x357e2e);
  _0x22abf9.restore();
  _0x22abf9.globalAlpha = 1;
  _0x22abf9.translate(15 * _0x357e2e, 35 * _0x357e2e);
  circle(_0x22abf9, 178.5 * _0x357e2e, 172.828125 * _0x357e2e, 150 * _0x357e2e);
  fill_path(_0x22abf9, undefined, _0x14f182[2], 95 * _0x357e2e);
  circle(_0x22abf9, 178.5 * _0x357e2e, 172.828125 * _0x357e2e, 150 * _0x357e2e);
  fill_path(_0x22abf9, undefined, _0x14f182[1], 55 * _0x357e2e);
  _0x22abf9.closePath();
  _0x22abf9.save();
  _0x22abf9.translate(177 * _0x357e2e, 512.328125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -25 * _0x357e2e,
    -202.5 * _0x357e2e,
    65 * _0x357e2e,
    405 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[1], _0x14f182[2], 20 * _0x357e2e);
  _0x22abf9.save();
  _0x22abf9.translate(136 * _0x357e2e, 581.828125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -39 * _0x357e2e,
    -23 * _0x357e2e,
    78 * _0x357e2e,
    46 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[1], _0x14f182[2], 20 * _0x357e2e);
  _0x22abf9.save();
  _0x22abf9.translate(135.5 * _0x357e2e, 663.828125 * _0x357e2e);
  round_rect(
    _0x22abf9,
    -39.5 * _0x357e2e,
    -22 * _0x357e2e,
    79 * _0x357e2e,
    44 * _0x357e2e,
    25 * _0x357e2e
  );
  _0x22abf9.restore();
  fill_path(_0x22abf9, _0x14f182[1], _0x14f182[2], 20 * _0x357e2e);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(114 * _0x357e2e, 594.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    175 * _0x357e2e,
    596.828125 * _0x357e2e,
    163 * _0x357e2e,
    596.828125 * _0x357e2e,
    172 * _0x357e2e,
    594.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    171.5 * _0x357e2e,
    633.828125 * _0x357e2e,
    171.5 * _0x357e2e,
    633.828125 * _0x357e2e,
    171 * _0x357e2e,
    672.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    110 * _0x357e2e,
    673.828125 * _0x357e2e,
    140.5 * _0x357e2e,
    673.328125 * _0x357e2e,
    110 * _0x357e2e,
    673.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    110.5 * _0x357e2e,
    661.828125 * _0x357e2e,
    110.5 * _0x357e2e,
    661.828125 * _0x357e2e,
    111 * _0x357e2e,
    649.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    157 * _0x357e2e,
    633.828125 * _0x357e2e,
    134 * _0x357e2e,
    607.828125 * _0x357e2e,
    114 * _0x357e2e,
    594.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[1]);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.translate(0, 5 * _0x357e2e);
  _0x22abf9.moveTo(123 * _0x357e2e, 294.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    212 * _0x357e2e,
    295.828125 * _0x357e2e,
    190.5 * _0x357e2e,
    295.328125 * _0x357e2e,
    250 * _0x357e2e,
    295.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    231.5 * _0x357e2e,
    325.328125 * _0x357e2e,
    231.5 * _0x357e2e,
    325.328125 * _0x357e2e,
    220 * _0x357e2e,
    354.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    175.5 * _0x357e2e,
    355.828125 * _0x357e2e,
    175.5 * _0x357e2e,
    355.828125 * _0x357e2e,
    140 * _0x357e2e,
    356.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    123.5 * _0x357e2e,
    328.828125 * _0x357e2e,
    123.5 * _0x357e2e,
    328.828125 * _0x357e2e,
    123 * _0x357e2e,
    294.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[1]);
  _0x22abf9.translate(0, -5 * _0x357e2e);
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(159 * _0x357e2e, 679.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    180 * _0x357e2e,
    665.828125 * _0x357e2e,
    155 * _0x357e2e,
    675.828125 * _0x357e2e,
    151 * _0x357e2e,
    671.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    154.5 * _0x357e2e,
    685.328125 * _0x357e2e,
    154.5 * _0x357e2e,
    685.328125 * _0x357e2e,
    158 * _0x357e2e,
    698.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    171 * _0x357e2e,
    699.828125 * _0x357e2e,
    171 * _0x357e2e,
    699.828125 * _0x357e2e,
    184 * _0x357e2e,
    700.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[1]);
  _0x22abf9.save();
  _0x22abf9.beginPath();
  _0x22abf9.lineCap = "round";
  _0x22abf9.lineJoin = "round";
  _0x22abf9.moveTo(157 * _0x357e2e, 548.828125 * _0x357e2e);
  _0x22abf9.bezierCurveTo(
    157 * _0x357e2e,
    561.828125 * _0x357e2e,
    157 * _0x357e2e,
    561.828125 * _0x357e2e,
    157 * _0x357e2e,
    574.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    132.5 * _0x357e2e,
    580.828125 * _0x357e2e,
    132.5 * _0x357e2e,
    580.828125 * _0x357e2e,
    108 * _0x357e2e,
    586.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    112 * _0x357e2e,
    599.828125 * _0x357e2e,
    111 * _0x357e2e,
    593.828125 * _0x357e2e,
    112 * _0x357e2e,
    599.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    159 * _0x357e2e,
    603.828125 * _0x357e2e,
    126.5 * _0x357e2e,
    601.328125 * _0x357e2e,
    141 * _0x357e2e,
    602.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    145 * _0x357e2e,
    641.828125 * _0x357e2e,
    143.5 * _0x357e2e,
    623.828125 * _0x357e2e,
    146 * _0x357e2e,
    644.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    129.5 * _0x357e2e,
    645.328125 * _0x357e2e,
    129.5 * _0x357e2e,
    645.328125 * _0x357e2e,
    113 * _0x357e2e,
    645.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    107.5 * _0x357e2e,
    652.828125 * _0x357e2e,
    107.5 * _0x357e2e,
    652.828125 * _0x357e2e,
    102 * _0x357e2e,
    659.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    104 * _0x357e2e,
    669.328125 * _0x357e2e,
    104 * _0x357e2e,
    669.328125 * _0x357e2e,
    106 * _0x357e2e,
    678.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    145 * _0x357e2e,
    679.328125 * _0x357e2e,
    145 * _0x357e2e,
    679.328125 * _0x357e2e,
    184 * _0x357e2e,
    679.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    185 * _0x357e2e,
    615.828125 * _0x357e2e,
    185 * _0x357e2e,
    615.828125 * _0x357e2e,
    186 * _0x357e2e,
    551.828125 * _0x357e2e
  );
  _0x22abf9.bezierCurveTo(
    172.5 * _0x357e2e,
    551.328125 * _0x357e2e,
    172.5 * _0x357e2e,
    551.328125 * _0x357e2e,
    159 * _0x357e2e,
    550.828125 * _0x357e2e
  );
  _0x22abf9.closePath();
  fill_path(_0x22abf9, _0x14f182[1], _0x14f182[1], 7 * _0x357e2e);
  _0x22abf9.restore();
  return _0x8c18e4;
}
function create_resurrection_ground(_0x47d29e, _0x5dce18, _0x13aa88) {
  var _0x37717d = document.createElement("canvas");
  var _0x165fc2 = _0x37717d.getContext("2d");
  _0x37717d.width = 202 * _0x47d29e;
  _0x37717d.height = 202 * _0x47d29e;
  _0x165fc2.translate(2 * _0x47d29e, 1 * _0x47d29e);
  _0x165fc2.globalAlpha = 0.3;
  circle(_0x165fc2, 98 * _0x47d29e, 99 * _0x47d29e, 100 * _0x47d29e);
  fill_path(_0x165fc2, _0x13aa88[0]);
  _0x165fc2.globalAlpha = 0.5;
  circle(_0x165fc2, 98 * _0x47d29e, 99 * _0x47d29e, 90 * _0x47d29e);
  fill_path(_0x165fc2, _0x13aa88[1]);
  return _0x37717d;
}
function create_resurrection_hole(_0x4e46ed, _0x32d670, _0x7311b5) {
  var _0x23b844 = document.createElement("canvas");
  var _0x395992 = _0x23b844.getContext("2d");
  _0x23b844.width = 89 * _0x4e46ed;
  _0x23b844.height = 89 * _0x4e46ed;
  _0x395992.save();
  _0x395992.translate(44.5 * _0x4e46ed, 44.5 * _0x4e46ed);
  round_regular_polygon(_0x395992, 6, 40 * _0x4e46ed, 10 * _0x4e46ed);
  _0x395992.restore();
  fill_path(_0x395992, _0x7311b5[0], _0x7311b5[1], 5 * _0x4e46ed);
  _0x395992.save();
  _0x395992.translate(44.5 * _0x4e46ed, 44.5 * _0x4e46ed);
  round_regular_polygon(
    _0x395992,
    6,
    25.11521001172521 * _0x4e46ed,
    10 * _0x4e46ed
  );
  _0x395992.restore();
  fill_path(_0x395992, _0x7311b5[2], _0x7311b5[3], 5 * _0x4e46ed);
  return _0x23b844;
}
function create_resurrection_rotate(_0xc59e43, _0x1a5389, _0x59f5db) {
  var _0x335942 = document.createElement("canvas");
  var _0x463b41 = _0x335942.getContext("2d");
  _0x335942.width = 88 * _0xc59e43;
  _0x335942.height = 88 * _0xc59e43;
  _0x463b41.save();
  _0x463b41.translate(44 * _0xc59e43, 44 * _0xc59e43);
  _0x463b41.rotate(0.52);
  round_regular_polygon(_0x463b41, 6, 43 * _0xc59e43, 10 * _0xc59e43);
  _0x463b41.restore();
  fill_path(_0x463b41, _0x59f5db[0], _0x59f5db[1], 3 * _0xc59e43);
  return _0x335942;
}
function create_resurrection(_0x5e18d1, _0x2ee417, _0x142365) {
  var _0x575eea = document.createElement("canvas");
  var _0x404a22 = _0x575eea.getContext("2d");
  _0x575eea.width = 202 * _0x5e18d1;
  _0x575eea.height = 202 * _0x5e18d1;
  _0x404a22.translate(2 * _0x5e18d1, 1 * _0x5e18d1);
  _0x404a22.globalAlpha = _0x2ee417 ? 0.5 : 1;
  _0x404a22.translate(0, 10 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 41.15177917480469 * _0x5e18d1);
  _0x404a22.rotate(0.8);
  round_rect(
    _0x404a22,
    -16 * _0x5e18d1,
    -16.5 * _0x5e18d1,
    32 * _0x5e18d1,
    33 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(98 * _0x5e18d1, 22.5089111328125 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    97.5 * _0x5e18d1,
    41.5089111328125 * _0x5e18d1,
    97.5 * _0x5e18d1,
    41.5089111328125 * _0x5e18d1,
    97 * _0x5e18d1,
    60.5089111328125 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(147.5 * _0x5e18d1, 69.5089111328125 * _0x5e18d1);
  _0x404a22.rotate(0.2);
  round_rect(
    _0x404a22,
    -15.5 * _0x5e18d1,
    -16 * _0x5e18d1,
    31 * _0x5e18d1,
    32 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(163 * _0x5e18d1, 59.50892639160156 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    147 * _0x5e18d1,
    69.50892639160156 * _0x5e18d1,
    127 * _0x5e18d1,
    82.50892639160156 * _0x5e18d1,
    131 * _0x5e18d1,
    79.50892639160156 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(143.5 * _0x5e18d1, 128.2946319580078 * _0x5e18d1);
  _0x404a22.rotate(1.24);
  round_rect(
    _0x404a22,
    -16.5 * _0x5e18d1,
    -17.5 * _0x5e18d1,
    33 * _0x5e18d1,
    35 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(162 * _0x5e18d1, 135.93748474121094 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    143.5 * _0x5e18d1,
    128.43748474121094 * _0x5e18d1,
    129 * _0x5e18d1,
    120.93748474121094 * _0x5e18d1,
    125 * _0x5e18d1,
    120.93748474121094 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(99 * _0x5e18d1, 156.08035278320312 * _0x5e18d1);
  _0x404a22.rotate(0.84);
  round_rect(
    _0x404a22,
    -18 * _0x5e18d1,
    -18 * _0x5e18d1,
    36 * _0x5e18d1,
    36 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(98 * _0x5e18d1, 136.08035278320312 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    98 * _0x5e18d1,
    156.08035278320312 * _0x5e18d1,
    98 * _0x5e18d1,
    156.08035278320312 * _0x5e18d1,
    98 * _0x5e18d1,
    176.08035278320312 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(54 * _0x5e18d1, 72.22320556640625 * _0x5e18d1);
  _0x404a22.rotate(1.32);
  round_rect(
    _0x404a22,
    -18 * _0x5e18d1,
    -19 * _0x5e18d1,
    36 * _0x5e18d1,
    38 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(34 * _0x5e18d1, 60.79463195800781 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    53.5 * _0x5e18d1,
    72.29463195800781 * _0x5e18d1,
    69 * _0x5e18d1,
    79.79463195800781 * _0x5e18d1,
    73 * _0x5e18d1,
    83.79463195800781 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(49 * _0x5e18d1, 127.29463195800781 * _0x5e18d1);
  _0x404a22.rotate(1.76);
  round_rect(
    _0x404a22,
    -20 * _0x5e18d1,
    -17.5 * _0x5e18d1,
    40 * _0x5e18d1,
    35 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(30 * _0x5e18d1, 141.7946319580078 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    47 * _0x5e18d1,
    130.2946319580078 * _0x5e18d1,
    64 * _0x5e18d1,
    119.79463195800781 * _0x5e18d1,
    64 * _0x5e18d1,
    118.79463195800781 * _0x5e18d1
  );
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.globalAlpha = 1;
  _0x404a22.translate(0, -10 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 41.15177917480469 * _0x5e18d1);
  _0x404a22.rotate(0.8);
  round_rect(
    _0x404a22,
    -16 * _0x5e18d1,
    -16.5 * _0x5e18d1,
    32 * _0x5e18d1,
    33 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(98 * _0x5e18d1, 22.5089111328125 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    97.5 * _0x5e18d1,
    41.5089111328125 * _0x5e18d1,
    97.5 * _0x5e18d1,
    41.5089111328125 * _0x5e18d1,
    97 * _0x5e18d1,
    60.5089111328125 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(147.5 * _0x5e18d1, 69.5089111328125 * _0x5e18d1);
  _0x404a22.rotate(0.2);
  round_rect(
    _0x404a22,
    -15.5 * _0x5e18d1,
    -16 * _0x5e18d1,
    31 * _0x5e18d1,
    32 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(163 * _0x5e18d1, 59.50892639160156 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    147 * _0x5e18d1,
    69.50892639160156 * _0x5e18d1,
    127 * _0x5e18d1,
    82.50892639160156 * _0x5e18d1,
    131 * _0x5e18d1,
    79.50892639160156 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(143.5 * _0x5e18d1, 128.2946319580078 * _0x5e18d1);
  _0x404a22.rotate(1.24);
  round_rect(
    _0x404a22,
    -16.5 * _0x5e18d1,
    -17.5 * _0x5e18d1,
    33 * _0x5e18d1,
    35 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(162 * _0x5e18d1, 135.93748474121094 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    143.5 * _0x5e18d1,
    128.43748474121094 * _0x5e18d1,
    129 * _0x5e18d1,
    120.93748474121094 * _0x5e18d1,
    125 * _0x5e18d1,
    120.93748474121094 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(99 * _0x5e18d1, 156.08035278320312 * _0x5e18d1);
  _0x404a22.rotate(0.84);
  round_rect(
    _0x404a22,
    -18 * _0x5e18d1,
    -18 * _0x5e18d1,
    36 * _0x5e18d1,
    36 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(98 * _0x5e18d1, 136.08035278320312 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    98 * _0x5e18d1,
    156.08035278320312 * _0x5e18d1,
    98 * _0x5e18d1,
    156.08035278320312 * _0x5e18d1,
    98 * _0x5e18d1,
    176.08035278320312 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(54 * _0x5e18d1, 72.22320556640625 * _0x5e18d1);
  _0x404a22.rotate(1.32);
  round_rect(
    _0x404a22,
    -18 * _0x5e18d1,
    -19 * _0x5e18d1,
    36 * _0x5e18d1,
    38 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(34 * _0x5e18d1, 60.79463195800781 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    53.5 * _0x5e18d1,
    72.29463195800781 * _0x5e18d1,
    69 * _0x5e18d1,
    79.79463195800781 * _0x5e18d1,
    73 * _0x5e18d1,
    83.79463195800781 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(49 * _0x5e18d1, 127.29463195800781 * _0x5e18d1);
  _0x404a22.rotate(1.76);
  round_rect(
    _0x404a22,
    -20 * _0x5e18d1,
    -17.5 * _0x5e18d1,
    40 * _0x5e18d1,
    35 * _0x5e18d1,
    7 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[3], _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.beginPath();
  _0x404a22.lineCap = "round";
  _0x404a22.lineJoin = "round";
  _0x404a22.moveTo(30 * _0x5e18d1, 141.7946319580078 * _0x5e18d1);
  _0x404a22.bezierCurveTo(
    47 * _0x5e18d1,
    130.2946319580078 * _0x5e18d1,
    64 * _0x5e18d1,
    119.79463195800781 * _0x5e18d1,
    64 * _0x5e18d1,
    118.79463195800781 * _0x5e18d1
  );
  fill_path(_0x404a22, undefined, _0x142365[4], 5 * _0x5e18d1);
  _0x404a22.globalAlpha = _0x2ee417 ? 0.5 : 1;
  _0x404a22.translate(0, 10 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 99 * _0x5e18d1);
  round_regular_polygon(
    _0x404a22,
    6,
    70.28669492273468 * _0x5e18d1,
    10 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 99 * _0x5e18d1);
  round_regular_polygon(
    _0x404a22,
    6,
    56.455940020351264 * _0x5e18d1,
    10 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[2]);
  _0x404a22.globalAlpha = 1;
  _0x404a22.translate(0, -10 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 99 * _0x5e18d1);
  round_regular_polygon(
    _0x404a22,
    6,
    70.28669492273468 * _0x5e18d1,
    10 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[5], _0x142365[6], 5 * _0x5e18d1);
  _0x404a22.save();
  _0x404a22.translate(98 * _0x5e18d1, 99 * _0x5e18d1);
  round_regular_polygon(
    _0x404a22,
    6,
    56.455940020351264 * _0x5e18d1,
    10 * _0x5e18d1
  );
  _0x404a22.restore();
  fill_path(_0x404a22, _0x142365[7], _0x142365[8], 7 * _0x5e18d1);
  return _0x575eea;
}
function create_dragon_heart(_0x479adc, _0x238879, _0x1c4e6a) {
  var _0x5d1bb8 = document.createElement("canvas");
  var _0x3c353c = _0x5d1bb8.getContext("2d");
  _0x5d1bb8.width = 161 * _0x479adc;
  _0x5d1bb8.height = 184 * _0x479adc;
  _0x3c353c.translate(0, 10 * _0x479adc);
  _0x3c353c.globalAlpha = 1;
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(105.5 * _0x479adc, 34.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    48.5 * _0x479adc,
    7.609375 * _0x479adc,
    11.5 * _0x479adc,
    58.609375 * _0x479adc,
    20.5 * _0x479adc,
    97.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    44.5 * _0x479adc,
    161.609375 * _0x479adc,
    70.5 * _0x479adc,
    171.609375 * _0x479adc,
    88.5 * _0x479adc,
    156.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    120.5 * _0x479adc,
    129.609375 * _0x479adc,
    123.5 * _0x479adc,
    105.609375 * _0x479adc,
    128.5 * _0x479adc,
    83.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    137.5 * _0x479adc,
    79.609375 * _0x479adc,
    141.5 * _0x479adc,
    79.609375 * _0x479adc,
    146.5 * _0x479adc,
    81.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    153.5 * _0x479adc,
    70.609375 * _0x479adc,
    151.5 * _0x479adc,
    65.609375 * _0x479adc,
    148.5 * _0x479adc,
    61.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    134.5 * _0x479adc,
    60.609375 * _0x479adc,
    131.5 * _0x479adc,
    63.609375 * _0x479adc,
    127.5 * _0x479adc,
    66.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    127.5 * _0x479adc,
    55.609375 * _0x479adc,
    125.5 * _0x479adc,
    54.609375 * _0x479adc,
    120.5 * _0x479adc,
    51.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    128.5 * _0x479adc,
    42.609375 * _0x479adc,
    136.5 * _0x479adc,
    38.609375 * _0x479adc,
    147.5 * _0x479adc,
    39.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    152.5 * _0x479adc,
    23.609375 * _0x479adc,
    147.5 * _0x479adc,
    21.609375 * _0x479adc,
    140.5 * _0x479adc,
    17.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    120.5 * _0x479adc,
    17.609375 * _0x479adc,
    114.5 * _0x479adc,
    27.609375 * _0x479adc,
    106.5 * _0x479adc,
    35.609375 * _0x479adc
  );
  _0x3c353c.closePath();
  fill_path(_0x3c353c, _0x1c4e6a[0]);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(45.5 * _0x479adc, 144.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    35.5 * _0x479adc,
    155.609375 * _0x479adc,
    37 * _0x479adc,
    152.109375 * _0x479adc,
    28.5 * _0x479adc,
    159.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    16.5 * _0x479adc,
    154.609375 * _0x479adc,
    16.5 * _0x479adc,
    151.609375 * _0x479adc,
    17.5 * _0x479adc,
    141.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    25.5 * _0x479adc,
    134.109375 * _0x479adc,
    25.5 * _0x479adc,
    134.109375 * _0x479adc,
    33.5 * _0x479adc,
    126.609375 * _0x479adc
  );
  fill_path(_0x3c353c, _0x1c4e6a[0]);
  _0x3c353c.translate(0, -10 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(45.5 * _0x479adc, 144.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    35.5 * _0x479adc,
    155.609375 * _0x479adc,
    37 * _0x479adc,
    152.109375 * _0x479adc,
    28.5 * _0x479adc,
    159.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    16.5 * _0x479adc,
    154.609375 * _0x479adc,
    16.5 * _0x479adc,
    151.609375 * _0x479adc,
    17.5 * _0x479adc,
    141.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    25.5 * _0x479adc,
    134.109375 * _0x479adc,
    25.5 * _0x479adc,
    134.109375 * _0x479adc,
    33.5 * _0x479adc,
    126.609375 * _0x479adc
  );
  fill_path(_0x3c353c, _0x1c4e6a[1], _0x1c4e6a[2], 8 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(105.5 * _0x479adc, 34.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    48.5 * _0x479adc,
    7.609375 * _0x479adc,
    11.5 * _0x479adc,
    58.609375 * _0x479adc,
    20.5 * _0x479adc,
    97.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    44.5 * _0x479adc,
    161.609375 * _0x479adc,
    70.5 * _0x479adc,
    171.609375 * _0x479adc,
    88.5 * _0x479adc,
    156.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    120.5 * _0x479adc,
    129.609375 * _0x479adc,
    123.5 * _0x479adc,
    105.609375 * _0x479adc,
    128.5 * _0x479adc,
    83.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    137.5 * _0x479adc,
    79.609375 * _0x479adc,
    141.5 * _0x479adc,
    79.609375 * _0x479adc,
    146.5 * _0x479adc,
    81.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    153.5 * _0x479adc,
    70.609375 * _0x479adc,
    151.5 * _0x479adc,
    65.609375 * _0x479adc,
    148.5 * _0x479adc,
    61.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    134.5 * _0x479adc,
    60.609375 * _0x479adc,
    131.5 * _0x479adc,
    63.609375 * _0x479adc,
    127.5 * _0x479adc,
    66.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    127.5 * _0x479adc,
    55.609375 * _0x479adc,
    125.5 * _0x479adc,
    54.609375 * _0x479adc,
    120.5 * _0x479adc,
    51.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    128.5 * _0x479adc,
    42.609375 * _0x479adc,
    136.5 * _0x479adc,
    38.609375 * _0x479adc,
    147.5 * _0x479adc,
    39.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    152.5 * _0x479adc,
    23.609375 * _0x479adc,
    147.5 * _0x479adc,
    21.609375 * _0x479adc,
    140.5 * _0x479adc,
    17.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    120.5 * _0x479adc,
    17.609375 * _0x479adc,
    114.5 * _0x479adc,
    27.609375 * _0x479adc,
    106.5 * _0x479adc,
    35.609375 * _0x479adc
  );
  _0x3c353c.closePath();
  fill_path(_0x3c353c, _0x1c4e6a[1], _0x1c4e6a[2], 8 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(104.5 * _0x479adc, 35.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    71.5 * _0x479adc,
    36.609375 * _0x479adc,
    57.5 * _0x479adc,
    52.609375 * _0x479adc,
    58.5 * _0x479adc,
    81.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    59.5 * _0x479adc,
    103.609375 * _0x479adc,
    66.5 * _0x479adc,
    107.609375 * _0x479adc,
    66.5 * _0x479adc,
    116.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    67.5 * _0x479adc,
    128.609375 * _0x479adc,
    65.5 * _0x479adc,
    131.609375 * _0x479adc,
    63.5 * _0x479adc,
    137.609375 * _0x479adc
  );
  fill_path(_0x3c353c, undefined, _0x1c4e6a[2], 8 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(59.5 * _0x479adc, 72.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    38.5 * _0x479adc,
    80.609375 * _0x479adc,
    43.5 * _0x479adc,
    81.609375 * _0x479adc,
    37.5 * _0x479adc,
    89.609375 * _0x479adc
  );
  fill_path(_0x3c353c, undefined, _0x1c4e6a[2], 4 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(60.5 * _0x479adc, 85.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    75.5 * _0x479adc,
    91.609375 * _0x479adc,
    76.5 * _0x479adc,
    96.609375 * _0x479adc,
    81.5 * _0x479adc,
    104.609375 * _0x479adc
  );
  fill_path(_0x3c353c, undefined, _0x1c4e6a[2], 4 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(68.5 * _0x479adc, 122.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    79.5 * _0x479adc,
    130.609375 * _0x479adc,
    74.5 * _0x479adc,
    128.609375 * _0x479adc,
    80.5 * _0x479adc,
    134.609375 * _0x479adc
  );
  fill_path(_0x3c353c, _0x1c4e6a[1], _0x1c4e6a[2], 4 * _0x479adc);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(142.5 * _0x479adc, 18.609375 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    151.5 * _0x479adc,
    28.609375 * _0x479adc,
    151.5 * _0x479adc,
    32.609375 * _0x479adc,
    146.5 * _0x479adc,
    40.609375 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    137.5 * _0x479adc,
    26.609375 * _0x479adc,
    138.5 * _0x479adc,
    24.609375 * _0x479adc,
    142.5 * _0x479adc,
    19.609375 * _0x479adc
  );
  _0x3c353c.closePath();
  fill_path(_0x3c353c, _0x1c4e6a[3]);
  _0x3c353c.beginPath();
  _0x3c353c.lineCap = "round";
  _0x3c353c.lineJoin = "round";
  _0x3c353c.moveTo(146.5 * _0x479adc, 61.50892639160156 * _0x479adc);
  _0x3c353c.bezierCurveTo(
    157.5 * _0x479adc,
    69.50892639160156 * _0x479adc,
    150.5 * _0x479adc,
    79.50892639160156 * _0x479adc,
    145.5 * _0x479adc,
    81.50892639160156 * _0x479adc
  );
  _0x3c353c.bezierCurveTo(
    140.5 * _0x479adc,
    65.50892639160156 * _0x479adc,
    144.5 * _0x479adc,
    64.50892639160156 * _0x479adc,
    146.5 * _0x479adc,
    62.50892639160156 * _0x479adc
  );
  _0x3c353c.closePath();
  fill_path(_0x3c353c, _0x1c4e6a[3]);
  return _0x5d1bb8;
}
function create_ghost(_0x3c217d, _0x4e836a, _0x4e8fb5) {
  var _0x2ddf60 = document.createElement("canvas");
  var _0x4b6263 = _0x2ddf60.getContext("2d");
  _0x2ddf60.width = 254 * _0x3c217d;
  _0x2ddf60.height = 288 * _0x3c217d;
  _0x4b6263.translate(0, 5);
  _0x4b6263.globalAlpha = 0.5;
  _0x4b6263.beginPath();
  _0x4b6263.lineCap = "round";
  _0x4b6263.lineJoin = "round";
  _0x4b6263.moveTo(218 * _0x3c217d, 84.640625 * _0x3c217d);
  _0x4b6263.bezierCurveTo(
    150 * _0x3c217d,
    13.640625 * _0x3c217d,
    186 * _0x3c217d,
    92.640625 * _0x3c217d,
    168 * _0x3c217d,
    103.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    151 * _0x3c217d,
    107.640625 * _0x3c217d,
    150 * _0x3c217d,
    61.640625 * _0x3c217d,
    144 * _0x3c217d,
    39.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    135 * _0x3c217d,
    1.640625 * _0x3c217d,
    113 * _0x3c217d,
    2.640625 * _0x3c217d,
    110 * _0x3c217d,
    40.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    106 * _0x3c217d,
    97.640625 * _0x3c217d,
    98 * _0x3c217d,
    102.640625 * _0x3c217d,
    83 * _0x3c217d,
    100.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    68 * _0x3c217d,
    98.640625 * _0x3c217d,
    67 * _0x3c217d,
    77.640625 * _0x3c217d,
    70 * _0x3c217d,
    55.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    75 * _0x3c217d,
    16.640625 * _0x3c217d,
    47 * _0x3c217d,
    52.640625 * _0x3c217d,
    38 * _0x3c217d,
    67.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    10 * _0x3c217d,
    113.640625 * _0x3c217d,
    10 * _0x3c217d,
    181.640625 * _0x3c217d,
    23 * _0x3c217d,
    213.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    45 * _0x3c217d,
    266.640625 * _0x3c217d,
    97 * _0x3c217d,
    277.640625 * _0x3c217d,
    147 * _0x3c217d,
    269.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    217 * _0x3c217d,
    259.640625 * _0x3c217d,
    236 * _0x3c217d,
    221.640625 * _0x3c217d,
    239 * _0x3c217d,
    166.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    239 * _0x3c217d,
    113.640625 * _0x3c217d,
    223 * _0x3c217d,
    90.640625 * _0x3c217d,
    219 * _0x3c217d,
    86.640625 * _0x3c217d
  );
  _0x4b6263.closePath();
  fill_path(_0x4b6263, _0x4e8fb5[0], _0x4e8fb5[0], 4 * _0x3c217d);
  circle(
    _0x4b6263,
    175 * _0x3c217d,
    220.640625 * _0x3c217d,
    29.546573405388315 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[0]);
  circle(
    _0x4b6263,
    79 * _0x3c217d,
    222.640625 * _0x3c217d,
    28.178005607210743 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[0]);
  circle(
    _0x4b6263,
    175 * _0x3c217d,
    214.640625 * _0x3c217d,
    27.892651361962706 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[0], _0x4e8fb5[0], 4 * _0x3c217d);
  circle(
    _0x4b6263,
    79 * _0x3c217d,
    215.640625 * _0x3c217d,
    26.570660511172846 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[0], _0x4e8fb5[0], 4 * _0x3c217d);
  _0x4b6263.translate(0, -5);
  _0x4b6263.globalAlpha = 1;
  _0x4b6263.beginPath();
  _0x4b6263.lineCap = "round";
  _0x4b6263.lineJoin = "round";
  _0x4b6263.moveTo(218 * _0x3c217d, 84.640625 * _0x3c217d);
  _0x4b6263.bezierCurveTo(
    150 * _0x3c217d,
    13.640625 * _0x3c217d,
    186 * _0x3c217d,
    92.640625 * _0x3c217d,
    168 * _0x3c217d,
    103.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    151 * _0x3c217d,
    107.640625 * _0x3c217d,
    150 * _0x3c217d,
    61.640625 * _0x3c217d,
    144 * _0x3c217d,
    39.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    135 * _0x3c217d,
    1.640625 * _0x3c217d,
    113 * _0x3c217d,
    2.640625 * _0x3c217d,
    110 * _0x3c217d,
    40.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    106 * _0x3c217d,
    97.640625 * _0x3c217d,
    98 * _0x3c217d,
    102.640625 * _0x3c217d,
    83 * _0x3c217d,
    100.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    68 * _0x3c217d,
    98.640625 * _0x3c217d,
    67 * _0x3c217d,
    77.640625 * _0x3c217d,
    70 * _0x3c217d,
    55.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    75 * _0x3c217d,
    16.640625 * _0x3c217d,
    47 * _0x3c217d,
    52.640625 * _0x3c217d,
    38 * _0x3c217d,
    67.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    10 * _0x3c217d,
    113.640625 * _0x3c217d,
    10 * _0x3c217d,
    181.640625 * _0x3c217d,
    23 * _0x3c217d,
    213.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    45 * _0x3c217d,
    266.640625 * _0x3c217d,
    97 * _0x3c217d,
    277.640625 * _0x3c217d,
    147 * _0x3c217d,
    269.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    217 * _0x3c217d,
    259.640625 * _0x3c217d,
    236 * _0x3c217d,
    221.640625 * _0x3c217d,
    239 * _0x3c217d,
    166.640625 * _0x3c217d
  );
  _0x4b6263.bezierCurveTo(
    239 * _0x3c217d,
    113.640625 * _0x3c217d,
    223 * _0x3c217d,
    90.640625 * _0x3c217d,
    219 * _0x3c217d,
    86.640625 * _0x3c217d
  );
  _0x4b6263.closePath();
  fill_path(_0x4b6263, _0x4e8fb5[1], _0x4e8fb5[2], 4 * _0x3c217d);
  circle(
    _0x4b6263,
    175 * _0x3c217d,
    222.640625 * _0x3c217d,
    26.546573405388315 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[3]);
  circle(
    _0x4b6263,
    79 * _0x3c217d,
    222.640625 * _0x3c217d,
    26.178005607210743 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[3]);
  circle(
    _0x4b6263,
    175 * _0x3c217d,
    210.640625 * _0x3c217d,
    26.892651361962706 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[4], _0x4e8fb5[5], 8 * _0x3c217d);
  circle(
    _0x4b6263,
    79 * _0x3c217d,
    210.640625 * _0x3c217d,
    26.570660511172846 * _0x3c217d
  );
  fill_path(_0x4b6263, _0x4e8fb5[4], _0x4e8fb5[5], 8 * _0x3c217d);
  return _0x2ddf60;
}
function create_gemme_green(_0x8b9ce1, _0x52c25e, _0x13bede) {
  var _0xf41119 = document.createElement("canvas");
  var _0x6a034 = _0xf41119.getContext("2d");
  _0xf41119.width = 104 * _0x8b9ce1;
  _0xf41119.height = 117 * _0x8b9ce1;
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(4 * _0x8b9ce1, 90 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    20 * _0x8b9ce1,
    99.5 * _0x8b9ce1,
    20 * _0x8b9ce1,
    99.5 * _0x8b9ce1,
    36 * _0x8b9ce1,
    109 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    67 * _0x8b9ce1,
    92 * _0x8b9ce1,
    67 * _0x8b9ce1,
    92 * _0x8b9ce1,
    98 * _0x8b9ce1,
    75 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    91 * _0x8b9ce1,
    27 * _0x8b9ce1,
    91 * _0x8b9ce1,
    27 * _0x8b9ce1,
    91 * _0x8b9ce1,
    28 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    72.5 * _0x8b9ce1,
    16 * _0x8b9ce1,
    72.5 * _0x8b9ce1,
    16 * _0x8b9ce1,
    54 * _0x8b9ce1,
    4 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    33.5 * _0x8b9ce1,
    10 * _0x8b9ce1,
    33.5 * _0x8b9ce1,
    10 * _0x8b9ce1,
    13 * _0x8b9ce1,
    16 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, _0x13bede[0]);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(6 * _0x8b9ce1, 76 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    13.5 * _0x8b9ce1,
    51.5 * _0x8b9ce1,
    13.5 * _0x8b9ce1,
    51.5 * _0x8b9ce1,
    21 * _0x8b9ce1,
    27 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    37.5 * _0x8b9ce1,
    17 * _0x8b9ce1,
    37.5 * _0x8b9ce1,
    17 * _0x8b9ce1,
    54 * _0x8b9ce1,
    7 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    33.5 * _0x8b9ce1,
    12.5 * _0x8b9ce1,
    33.5 * _0x8b9ce1,
    12.5 * _0x8b9ce1,
    13 * _0x8b9ce1,
    18 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, _0x13bede[1]);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(24 * _0x8b9ce1, 62 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    28.5 * _0x8b9ce1,
    53 * _0x8b9ce1,
    28.5 * _0x8b9ce1,
    53 * _0x8b9ce1,
    33 * _0x8b9ce1,
    44 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    41.5 * _0x8b9ce1,
    41 * _0x8b9ce1,
    41.5 * _0x8b9ce1,
    41 * _0x8b9ce1,
    50 * _0x8b9ce1,
    38 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    52.5 * _0x8b9ce1,
    35 * _0x8b9ce1,
    52.5 * _0x8b9ce1,
    35 * _0x8b9ce1,
    55 * _0x8b9ce1,
    32 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    52 * _0x8b9ce1,
    30 * _0x8b9ce1,
    52 * _0x8b9ce1,
    30 * _0x8b9ce1,
    49 * _0x8b9ce1,
    28 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    38 * _0x8b9ce1,
    31.5 * _0x8b9ce1,
    38 * _0x8b9ce1,
    31.5 * _0x8b9ce1,
    27 * _0x8b9ce1,
    35 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, _0x13bede[1]);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(36 * _0x8b9ce1, 107 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    66 * _0x8b9ce1,
    90.5 * _0x8b9ce1,
    66 * _0x8b9ce1,
    90.5 * _0x8b9ce1,
    96 * _0x8b9ce1,
    74 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    93 * _0x8b9ce1,
    52.5 * _0x8b9ce1,
    93 * _0x8b9ce1,
    52.5 * _0x8b9ce1,
    90 * _0x8b9ce1,
    31 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    87 * _0x8b9ce1,
    48 * _0x8b9ce1,
    87 * _0x8b9ce1,
    48 * _0x8b9ce1,
    84 * _0x8b9ce1,
    65 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, _0x13bede[2]);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(1 * _0x8b9ce1, 89 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    18 * _0x8b9ce1,
    100 * _0x8b9ce1,
    34 * _0x8b9ce1,
    110 * _0x8b9ce1,
    35 * _0x8b9ce1,
    111 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    67 * _0x8b9ce1,
    93 * _0x8b9ce1,
    67 * _0x8b9ce1,
    93 * _0x8b9ce1,
    99 * _0x8b9ce1,
    75 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    100 * _0x8b9ce1,
    78.5 * _0x8b9ce1,
    100 * _0x8b9ce1,
    78.5 * _0x8b9ce1,
    101 * _0x8b9ce1,
    82 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    68 * _0x8b9ce1,
    99 * _0x8b9ce1,
    68 * _0x8b9ce1,
    99 * _0x8b9ce1,
    35 * _0x8b9ce1,
    116 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    18 * _0x8b9ce1,
    106.5 * _0x8b9ce1,
    18 * _0x8b9ce1,
    106.5 * _0x8b9ce1,
    1 * _0x8b9ce1,
    97 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, _0x13bede[3]);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(36 * _0x8b9ce1, 107 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    66.5 * _0x8b9ce1,
    91.5 * _0x8b9ce1,
    66.5 * _0x8b9ce1,
    91.5 * _0x8b9ce1,
    97 * _0x8b9ce1,
    76 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    94.5 * _0x8b9ce1,
    52 * _0x8b9ce1,
    94.5 * _0x8b9ce1,
    52 * _0x8b9ce1,
    92 * _0x8b9ce1,
    28 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    73 * _0x8b9ce1,
    15.5 * _0x8b9ce1,
    73 * _0x8b9ce1,
    15.5 * _0x8b9ce1,
    54 * _0x8b9ce1,
    3 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    33 * _0x8b9ce1,
    9.5 * _0x8b9ce1,
    33 * _0x8b9ce1,
    9.5 * _0x8b9ce1,
    12 * _0x8b9ce1,
    16 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    8 * _0x8b9ce1,
    53 * _0x8b9ce1,
    8 * _0x8b9ce1,
    53 * _0x8b9ce1,
    4 * _0x8b9ce1,
    90 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    18.5 * _0x8b9ce1,
    99 * _0x8b9ce1,
    18.5 * _0x8b9ce1,
    99 * _0x8b9ce1,
    33 * _0x8b9ce1,
    108 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(22 * _0x8b9ce1, 71 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    30 * _0x8b9ce1,
    76.5 * _0x8b9ce1,
    30 * _0x8b9ce1,
    76.5 * _0x8b9ce1,
    38 * _0x8b9ce1,
    82 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    53 * _0x8b9ce1,
    72 * _0x8b9ce1,
    53 * _0x8b9ce1,
    72 * _0x8b9ce1,
    68 * _0x8b9ce1,
    62 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    68 * _0x8b9ce1,
    52 * _0x8b9ce1,
    68 * _0x8b9ce1,
    52 * _0x8b9ce1,
    68 * _0x8b9ce1,
    42 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    59.5 * _0x8b9ce1,
    35.5 * _0x8b9ce1,
    59.5 * _0x8b9ce1,
    35.5 * _0x8b9ce1,
    51 * _0x8b9ce1,
    29 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    39.5 * _0x8b9ce1,
    32 * _0x8b9ce1,
    39.5 * _0x8b9ce1,
    32 * _0x8b9ce1,
    28 * _0x8b9ce1,
    35 * _0x8b9ce1
  );
  _0x6a034.bezierCurveTo(
    25 * _0x8b9ce1,
    52 * _0x8b9ce1,
    25 * _0x8b9ce1,
    52 * _0x8b9ce1,
    22 * _0x8b9ce1,
    69 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(5 * _0x8b9ce1, 89 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    20 * _0x8b9ce1,
    73 * _0x8b9ce1,
    12.5 * _0x8b9ce1,
    80.5 * _0x8b9ce1,
    20 * _0x8b9ce1,
    72 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(35 * _0x8b9ce1, 102 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    36 * _0x8b9ce1,
    92.5 * _0x8b9ce1,
    36 * _0x8b9ce1,
    92.5 * _0x8b9ce1,
    37 * _0x8b9ce1,
    83 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(68 * _0x8b9ce1, 62 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    81 * _0x8b9ce1,
    67.5 * _0x8b9ce1,
    81 * _0x8b9ce1,
    67.5 * _0x8b9ce1,
    94 * _0x8b9ce1,
    73 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(70 * _0x8b9ce1, 41 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    80 * _0x8b9ce1,
    35.5 * _0x8b9ce1,
    80 * _0x8b9ce1,
    35.5 * _0x8b9ce1,
    90 * _0x8b9ce1,
    30 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(28 * _0x8b9ce1, 33 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    21.5 * _0x8b9ce1,
    26.5 * _0x8b9ce1,
    21.5 * _0x8b9ce1,
    26.5 * _0x8b9ce1,
    15 * _0x8b9ce1,
    20 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  _0x6a034.beginPath();
  _0x6a034.lineCap = "round";
  _0x6a034.lineJoin = "round";
  _0x6a034.moveTo(51 * _0x8b9ce1, 28 * _0x8b9ce1);
  _0x6a034.bezierCurveTo(
    53 * _0x8b9ce1,
    17 * _0x8b9ce1,
    53 * _0x8b9ce1,
    17 * _0x8b9ce1,
    55 * _0x8b9ce1,
    6 * _0x8b9ce1
  );
  _0x6a034.closePath();
  fill_path(_0x6a034, undefined, _0x13bede[4], 6 * _0x8b9ce1);
  return _0xf41119;
}
function create_superhammer(_0x320eca, _0x3c794f, _0x195581) {
  var _0x574353 = document.createElement("canvas");
  var _0x591ec3 = _0x574353.getContext("2d");
  _0x574353.width = 105 * _0x320eca;
  _0x574353.height = 144 * _0x320eca;
  _0x591ec3.globalAlpha = _0x3c794f ? 0.5 : 1;
  _0x591ec3.translate(-5 * _0x320eca, 0 * _0x320eca);
  _0x591ec3.save();
  _0x591ec3.translate(52.5 * _0x320eca, 91.5 * _0x320eca);
  round_rect(
    _0x591ec3,
    -4.5 * _0x320eca,
    -39 * _0x320eca,
    9 * _0x320eca,
    78 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[0], _0x195581[0], 3 * _0x320eca);
  _0x591ec3.save();
  _0x591ec3.translate(53 * _0x320eca, 36 * _0x320eca);
  round_rect(
    _0x591ec3,
    -29 * _0x320eca,
    -17.5 * _0x320eca,
    58 * _0x320eca,
    35 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[0], _0x195581[0], 4 * _0x320eca);
  _0x591ec3.save();
  _0x591ec3.translate(53.5 * _0x320eca, 35.5 * _0x320eca);
  round_rect(
    _0x591ec3,
    -26.5 * _0x320eca,
    -15 * _0x320eca,
    53 * _0x320eca,
    30 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[0], _0x195581[0], 4 * _0x320eca);
  _0x591ec3.translate(5 * _0x320eca, 0 * _0x320eca);
  _0x591ec3.globalAlpha = 1;
  _0x591ec3.save();
  _0x591ec3.translate(52.5 * _0x320eca, 91.5 * _0x320eca);
  round_rect(
    _0x591ec3,
    -4.5 * _0x320eca,
    -39 * _0x320eca,
    9 * _0x320eca,
    78 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[1], _0x195581[2], 3 * _0x320eca);
  _0x591ec3.save();
  _0x591ec3.translate(53 * _0x320eca, 36 * _0x320eca);
  round_rect(
    _0x591ec3,
    -29 * _0x320eca,
    -17.5 * _0x320eca,
    58 * _0x320eca,
    35 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[3], _0x195581[4], 4 * _0x320eca);
  _0x591ec3.save();
  _0x591ec3.translate(53.5 * _0x320eca, 35.5 * _0x320eca);
  round_rect(
    _0x591ec3,
    -26.5 * _0x320eca,
    -15 * _0x320eca,
    53 * _0x320eca,
    30 * _0x320eca,
    5 * _0x320eca
  );
  _0x591ec3.restore();
  fill_path(_0x591ec3, _0x195581[5], _0x195581[6], 4 * _0x320eca);
  _0x591ec3.beginPath();
  _0x591ec3.lineCap = "round";
  _0x591ec3.lineJoin = "round";
  _0x591ec3.moveTo(49 * _0x320eca, 60.5 * _0x320eca);
  _0x591ec3.bezierCurveTo(
    44 * _0x320eca,
    56.5 * _0x320eca,
    44 * _0x320eca,
    56.5 * _0x320eca,
    39 * _0x320eca,
    52.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    39 * _0x320eca,
    46.5 * _0x320eca,
    39 * _0x320eca,
    46.5 * _0x320eca,
    39 * _0x320eca,
    40.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    44 * _0x320eca,
    44 * _0x320eca,
    44 * _0x320eca,
    44 * _0x320eca,
    49 * _0x320eca,
    47.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    49 * _0x320eca,
    54 * _0x320eca,
    49 * _0x320eca,
    54 * _0x320eca,
    49 * _0x320eca,
    60.5 * _0x320eca
  );
  _0x591ec3.closePath();
  fill_path(_0x591ec3, _0x195581[7], _0x195581[6], 3 * _0x320eca);
  _0x591ec3.beginPath();
  _0x591ec3.lineCap = "round";
  _0x591ec3.lineJoin = "round";
  _0x591ec3.moveTo(66 * _0x320eca, 40.5 * _0x320eca);
  _0x591ec3.bezierCurveTo(
    66 * _0x320eca,
    46.5 * _0x320eca,
    66 * _0x320eca,
    46.5 * _0x320eca,
    66 * _0x320eca,
    52.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    60.5 * _0x320eca,
    56.5 * _0x320eca,
    60.5 * _0x320eca,
    56.5 * _0x320eca,
    55 * _0x320eca,
    60.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    56 * _0x320eca,
    53 * _0x320eca,
    56 * _0x320eca,
    53 * _0x320eca,
    57 * _0x320eca,
    45.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    61.5 * _0x320eca,
    43 * _0x320eca,
    61.5 * _0x320eca,
    43 * _0x320eca,
    66 * _0x320eca,
    40.5 * _0x320eca
  );
  _0x591ec3.closePath();
  fill_path(_0x591ec3, _0x195581[7], _0x195581[6], 3 * _0x320eca);
  _0x591ec3.beginPath();
  _0x591ec3.lineCap = "round";
  _0x591ec3.lineJoin = "round";
  _0x591ec3.moveTo(52 * _0x320eca, 33.5 * _0x320eca);
  _0x591ec3.bezierCurveTo(
    55.5 * _0x320eca,
    41 * _0x320eca,
    55.5 * _0x320eca,
    41 * _0x320eca,
    59 * _0x320eca,
    48.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    56 * _0x320eca,
    58 * _0x320eca,
    56 * _0x320eca,
    58 * _0x320eca,
    53 * _0x320eca,
    67.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    49 * _0x320eca,
    58 * _0x320eca,
    49 * _0x320eca,
    58 * _0x320eca,
    45 * _0x320eca,
    48.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    48.5 * _0x320eca,
    41 * _0x320eca,
    48.5 * _0x320eca,
    41 * _0x320eca,
    52 * _0x320eca,
    33.5 * _0x320eca
  );
  _0x591ec3.closePath();
  fill_path(_0x591ec3, _0x195581[9], _0x195581[8], 3 * _0x320eca);
  _0x591ec3.beginPath();
  _0x591ec3.lineCap = "round";
  _0x591ec3.lineJoin = "round";
  _0x591ec3.moveTo(52 * _0x320eca, 47.5 * _0x320eca);
  _0x591ec3.bezierCurveTo(
    54.5 * _0x320eca,
    50.5 * _0x320eca,
    54.5 * _0x320eca,
    50.5 * _0x320eca,
    57 * _0x320eca,
    53.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    55 * _0x320eca,
    60 * _0x320eca,
    55 * _0x320eca,
    60 * _0x320eca,
    53 * _0x320eca,
    66.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    50.5 * _0x320eca,
    61 * _0x320eca,
    50.5 * _0x320eca,
    61 * _0x320eca,
    48 * _0x320eca,
    55.5 * _0x320eca
  );
  _0x591ec3.bezierCurveTo(
    50 * _0x320eca,
    52 * _0x320eca,
    50 * _0x320eca,
    52 * _0x320eca,
    52 * _0x320eca,
    48.5 * _0x320eca
  );
  _0x591ec3.closePath();
  fill_path(_0x591ec3, _0x195581[11], _0x195581[10], 3 * _0x320eca);
  return _0x574353;
}
function create_dragon_sword(_0x2e90af, _0x4a2301, _0x460109) {
  var _0x5b4af5 = document.createElement("canvas");
  var _0x361831 = _0x5b4af5.getContext("2d");
  _0x5b4af5.width = 46 * _0x2e90af;
  _0x5b4af5.height = 140 * _0x2e90af;
  _0x361831.scale(-1 * _0x2e90af, 1 * _0x2e90af);
  _0x361831.translate(-50 * _0x2e90af, 40 * _0x2e90af);
  _0x361831.translate(-20 * _0x2e90af, 0);
  _0x361831.globalAlpha = _0x4a2301 ? 0.5 : 1;
  _0x361831.translate(10 * _0x2e90af, 0);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.moveTo(
    22.599990844726562 * _0x2e90af,
    85.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    17.599990844726562 * _0x2e90af,
    83.94999694824219 * _0x2e90af,
    17.599990844726562 * _0x2e90af,
    83.94999694824219 * _0x2e90af,
    12.599990844726562 * _0x2e90af,
    81.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    19.599990844726562 * _0x2e90af,
    73.94999694824219 * _0x2e90af,
    2.5999908447265625 * _0x2e90af,
    22.949996948242188 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    7.9499969482421875 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    27.599990844726562 * _0x2e90af,
    28.949996948242188 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    26.949996948242188 * _0x2e90af,
    35.59999084472656 * _0x2e90af,
    32.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    25.599990844726562 * _0x2e90af,
    59.94999694824219 * _0x2e90af,
    26.599990844726562 * _0x2e90af,
    69.94999694824219 * _0x2e90af,
    29.599990844726562 * _0x2e90af,
    82.94999694824219 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[0]);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.translate(-1 * _0x2e90af, 0);
  _0x361831.moveTo(17.599990844726562 * _0x2e90af, 89.75 * _0x2e90af);
  _0x361831.bezierCurveTo(
    24.599990844726562 * _0x2e90af,
    99.75 * _0x2e90af,
    24.599990844726562 * _0x2e90af,
    101.75 * _0x2e90af,
    20.599990844726562 * _0x2e90af,
    111.75 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    28.599990844726562 * _0x2e90af,
    110.75 * _0x2e90af,
    26.599990844726562 * _0x2e90af,
    112.75 * _0x2e90af,
    28.599990844726562 * _0x2e90af,
    111.75 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    30.599990844726562 * _0x2e90af,
    96.75 * _0x2e90af,
    32.59999084472656 * _0x2e90af,
    96.75 * _0x2e90af,
    30.599990844726562 * _0x2e90af,
    87.75 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[0]);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.translate(1 * _0x2e90af, 0);
  _0x361831.moveTo(
    7.5999908447265625 * _0x2e90af,
    86.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    12.599990844726562 * _0x2e90af,
    85.34999084472656 * _0x2e90af,
    14.599990844726562 * _0x2e90af,
    84.34999084472656 * _0x2e90af,
    13.599990844726562 * _0x2e90af,
    84.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    21.599990844726562 * _0x2e90af,
    83.34999084472656 * _0x2e90af,
    21.599990844726562 * _0x2e90af,
    83.34999084472656 * _0x2e90af,
    29.599990844726562 * _0x2e90af,
    82.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    33.59999084472656 * _0x2e90af,
    85.84999084472656 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    85.84999084472656 * _0x2e90af,
    37.59999084472656 * _0x2e90af,
    89.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    34.09999084472656 * _0x2e90af,
    91.84999084472656 * _0x2e90af,
    34.09999084472656 * _0x2e90af,
    91.84999084472656 * _0x2e90af,
    30.599990844726562 * _0x2e90af,
    94.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    21.099990844726562 * _0x2e90af,
    93.34999084472656 * _0x2e90af,
    21.099990844726562 * _0x2e90af,
    93.34999084472656 * _0x2e90af,
    11.599990844726562 * _0x2e90af,
    92.34999084472656 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[0]);
  _0x361831.save();
  _0x361831.translate(
    23.599990844726562 * _0x2e90af,
    110.94999694824219 * _0x2e90af
  );
  _0x361831.rotate(0);
  round_rect(
    _0x361831,
    -7 * _0x2e90af,
    -4 * _0x2e90af,
    14 * _0x2e90af,
    8 * _0x2e90af,
    10 * _0x2e90af
  );
  _0x361831.restore();
  fill_path(_0x361831, _0x460109[0]);
  _0x361831.translate(0 * _0x2e90af, 0);
  _0x361831.globalAlpha = 1;
  _0x361831.translate(10 * _0x2e90af, 0);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.moveTo(
    22.599990844726562 * _0x2e90af,
    85.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    17.599990844726562 * _0x2e90af,
    83.94999694824219 * _0x2e90af,
    17.599990844726562 * _0x2e90af,
    83.94999694824219 * _0x2e90af,
    12.599990844726562 * _0x2e90af,
    81.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    19.599990844726562 * _0x2e90af,
    73.94999694824219 * _0x2e90af,
    2.5999908447265625 * _0x2e90af,
    22.949996948242188 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    7.9499969482421875 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    27.599990844726562 * _0x2e90af,
    28.949996948242188 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    26.949996948242188 * _0x2e90af,
    35.59999084472656 * _0x2e90af,
    32.94999694824219 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    25.599990844726562 * _0x2e90af,
    59.94999694824219 * _0x2e90af,
    26.599990844726562 * _0x2e90af,
    69.94999694824219 * _0x2e90af,
    29.599990844726562 * _0x2e90af,
    82.94999694824219 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[3], _0x460109[4], 3 * _0x2e90af);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.translate(-1 * _0x2e90af, 0);
  _0x361831.moveTo(17.599990844726562 * _0x2e90af, 89.75 * _0x2e90af);
  _0x361831.bezierCurveTo(
    24.599990844726562 * _0x2e90af,
    99.75 * _0x2e90af,
    24.599990844726562 * _0x2e90af,
    101.75 * _0x2e90af,
    20.599990844726562 * _0x2e90af,
    111.75 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    28.599990844726562 * _0x2e90af,
    110.75 * _0x2e90af,
    26.599990844726562 * _0x2e90af,
    112.75 * _0x2e90af,
    28.599990844726562 * _0x2e90af,
    111.75 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    30.599990844726562 * _0x2e90af,
    96.75 * _0x2e90af,
    32.59999084472656 * _0x2e90af,
    96.75 * _0x2e90af,
    30.599990844726562 * _0x2e90af,
    87.75 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[1], _0x460109[2], 3 * _0x2e90af);
  _0x361831.beginPath();
  _0x361831.lineCap = "round";
  _0x361831.lineJoin = "round";
  _0x361831.translate(1 * _0x2e90af, 0);
  _0x361831.moveTo(
    7.5999908447265625 * _0x2e90af,
    86.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    12.599990844726562 * _0x2e90af,
    85.34999084472656 * _0x2e90af,
    14.599990844726562 * _0x2e90af,
    84.34999084472656 * _0x2e90af,
    13.599990844726562 * _0x2e90af,
    84.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    21.599990844726562 * _0x2e90af,
    83.34999084472656 * _0x2e90af,
    21.599990844726562 * _0x2e90af,
    83.34999084472656 * _0x2e90af,
    29.599990844726562 * _0x2e90af,
    82.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    33.59999084472656 * _0x2e90af,
    85.84999084472656 * _0x2e90af,
    33.59999084472656 * _0x2e90af,
    85.84999084472656 * _0x2e90af,
    37.59999084472656 * _0x2e90af,
    89.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    34.09999084472656 * _0x2e90af,
    91.84999084472656 * _0x2e90af,
    34.09999084472656 * _0x2e90af,
    91.84999084472656 * _0x2e90af,
    30.599990844726562 * _0x2e90af,
    94.34999084472656 * _0x2e90af
  );
  _0x361831.bezierCurveTo(
    21.099990844726562 * _0x2e90af,
    93.34999084472656 * _0x2e90af,
    21.099990844726562 * _0x2e90af,
    93.34999084472656 * _0x2e90af,
    11.599990844726562 * _0x2e90af,
    92.34999084472656 * _0x2e90af
  );
  _0x361831.closePath();
  fill_path(_0x361831, _0x460109[1], _0x460109[2], 3 * _0x2e90af);
  _0x361831.save();
  _0x361831.translate(
    23.599990844726562 * _0x2e90af,
    110.94999694824219 * _0x2e90af
  );
  _0x361831.rotate(0);
  round_rect(
    _0x361831,
    -7 * _0x2e90af,
    -4 * _0x2e90af,
    14 * _0x2e90af,
    8 * _0x2e90af,
    10 * _0x2e90af
  );
  _0x361831.restore();
  fill_path(_0x361831, _0x460109[1], _0x460109[2], 3 * _0x2e90af);
  return _0x5b4af5;
}
function create_cursed_sword(_0x331618, _0x3cd1fb, _0x3535eb) {
  var _0x475106 = document.createElement("canvas");
  var _0x58e9fd = _0x475106.getContext("2d");
  _0x475106.width = 65 * _0x331618;
  _0x475106.height = 131 * _0x331618;
  _0x58e9fd.globalAlpha = _0x3cd1fb ? 0.5 : 1;
  _0x58e9fd.translate(3, 0);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(21.25 * _0x331618, 88.9375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    19.25 * _0x331618,
    57.9375 * _0x331618,
    19.25 * _0x331618,
    57.9375 * _0x331618,
    17.25 * _0x331618,
    26.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    24.25 * _0x331618,
    20.9375 * _0x331618,
    24.25 * _0x331618,
    20.9375 * _0x331618,
    31.25 * _0x331618,
    14.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    32.75 * _0x331618,
    54.4375 * _0x331618,
    32.75 * _0x331618,
    54.4375 * _0x331618,
    34.25 * _0x331618,
    93.9375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[0]);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(30.25 * _0x331618, 5.9375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    39.25 * _0x331618,
    14.9375 * _0x331618,
    39.25 * _0x331618,
    14.9375 * _0x331618,
    48.25 * _0x331618,
    23.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    44.75 * _0x331618,
    56.4375 * _0x331618,
    44.75 * _0x331618,
    56.4375 * _0x331618,
    41.25 * _0x331618,
    88.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    36.25 * _0x331618,
    88.9375 * _0x331618,
    36.25 * _0x331618,
    88.9375 * _0x331618,
    31.25 * _0x331618,
    88.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    30.75 * _0x331618,
    47.9375 * _0x331618,
    30.75 * _0x331618,
    47.9375 * _0x331618,
    30.25 * _0x331618,
    6.9375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[0], _0x3535eb[0], 4 * _0x331618);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(7.25 * _0x331618, 85.4375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    31.75 * _0x331618,
    85.4375 * _0x331618,
    31.75 * _0x331618,
    85.4375 * _0x331618,
    56.25 * _0x331618,
    85.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    51.25 * _0x331618,
    91.9375 * _0x331618,
    51.25 * _0x331618,
    91.9375 * _0x331618,
    46.25 * _0x331618,
    98.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    30.25 * _0x331618,
    98.4375 * _0x331618,
    30.25 * _0x331618,
    98.4375 * _0x331618,
    14.25 * _0x331618,
    98.4375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[0], _0x3535eb[0], 4 * _0x331618);
  _0x58e9fd.save();
  _0x58e9fd.translate(31.25 * _0x331618, 108.9375 * _0x331618);
  round_rect(
    _0x58e9fd,
    -6 * _0x331618,
    -14.5 * _0x331618,
    12 * _0x331618,
    29 * _0x331618,
    10 * _0x331618
  );
  _0x58e9fd.restore();
  _0x58e9fd.globalAlpha = 1;
  _0x58e9fd.translate(-3, 0);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(21.25 * _0x331618, 88.9375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    19.25 * _0x331618,
    57.9375 * _0x331618,
    19.25 * _0x331618,
    57.9375 * _0x331618,
    17.25 * _0x331618,
    26.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    24.25 * _0x331618,
    20.9375 * _0x331618,
    24.25 * _0x331618,
    20.9375 * _0x331618,
    31.25 * _0x331618,
    14.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    32.75 * _0x331618,
    54.4375 * _0x331618,
    32.75 * _0x331618,
    54.4375 * _0x331618,
    34.25 * _0x331618,
    93.9375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[1]);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(30.25 * _0x331618, 5.9375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    39.25 * _0x331618,
    14.9375 * _0x331618,
    39.25 * _0x331618,
    14.9375 * _0x331618,
    48.25 * _0x331618,
    23.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    44.75 * _0x331618,
    56.4375 * _0x331618,
    44.75 * _0x331618,
    56.4375 * _0x331618,
    41.25 * _0x331618,
    88.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    36.25 * _0x331618,
    88.9375 * _0x331618,
    36.25 * _0x331618,
    88.9375 * _0x331618,
    31.25 * _0x331618,
    88.9375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    30.75 * _0x331618,
    47.9375 * _0x331618,
    30.75 * _0x331618,
    47.9375 * _0x331618,
    30.25 * _0x331618,
    6.9375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[2], _0x3535eb[1], 4 * _0x331618);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(7.25 * _0x331618, 85.4375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    31.75 * _0x331618,
    85.4375 * _0x331618,
    31.75 * _0x331618,
    85.4375 * _0x331618,
    56.25 * _0x331618,
    85.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    51.25 * _0x331618,
    91.9375 * _0x331618,
    51.25 * _0x331618,
    91.9375 * _0x331618,
    46.25 * _0x331618,
    98.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    30.25 * _0x331618,
    98.4375 * _0x331618,
    30.25 * _0x331618,
    98.4375 * _0x331618,
    14.25 * _0x331618,
    98.4375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[4], _0x3535eb[5], 4 * _0x331618);
  _0x58e9fd.save();
  _0x58e9fd.translate(31.25 * _0x331618, 108.9375 * _0x331618);
  round_rect(
    _0x58e9fd,
    -6 * _0x331618,
    -14.5 * _0x331618,
    12 * _0x331618,
    29 * _0x331618,
    10 * _0x331618
  );
  _0x58e9fd.restore();
  fill_path(_0x58e9fd, _0x3535eb[4], _0x3535eb[5], 4 * _0x331618);
  _0x58e9fd.beginPath();
  _0x58e9fd.lineCap = "round";
  _0x58e9fd.lineJoin = "round";
  _0x58e9fd.moveTo(31.25 * _0x331618, 73.4375 * _0x331618);
  _0x58e9fd.bezierCurveTo(
    33.25 * _0x331618,
    77.9375 * _0x331618,
    33.25 * _0x331618,
    77.9375 * _0x331618,
    35.25 * _0x331618,
    82.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    33.25 * _0x331618,
    87.4375 * _0x331618,
    33.25 * _0x331618,
    87.4375 * _0x331618,
    31.25 * _0x331618,
    92.4375 * _0x331618
  );
  _0x58e9fd.bezierCurveTo(
    29.25 * _0x331618,
    87.9375 * _0x331618,
    29.25 * _0x331618,
    87.9375 * _0x331618,
    27.25 * _0x331618,
    83.4375 * _0x331618
  );
  _0x58e9fd.closePath();
  fill_path(_0x58e9fd, _0x3535eb[3], _0x3535eb[1], 2 * _0x331618);
  return _0x475106;
}
function create_shop(_0x11cfae, _0x579a4e) {
  var _0x11271f = document.createElement("canvas");
  var _0x1c43eb = _0x11271f.getContext("2d");
  var _0x21cc4e = _0x11cfae * 120;
  var _0x209190 = _0x11cfae * 140;
  _0x11271f.width = _0x21cc4e;
  _0x11271f.height = _0x209190;
  _0x11271f.width = 130 * _0x11cfae;
  _0x11271f.height = 120 * _0x11cfae;
  round_rect(
    _0x1c43eb,
    10 * _0x11cfae,
    12 * _0x11cfae,
    110 * _0x11cfae,
    90 * _0x11cfae,
    10 * _0x11cfae
  );
  fill_path(_0x1c43eb, _0x579a4e[0]);
  round_rect(
    _0x1c43eb,
    10 * _0x11cfae,
    5 * _0x11cfae,
    110 * _0x11cfae,
    90 * _0x11cfae,
    10 * _0x11cfae
  );
  fill_path(_0x1c43eb, _0x579a4e[1], _0x579a4e[2], 4 * _0x11cfae);
  var _0xd02e82 = create_rotated_img(
    -Math.PI / 5,
    create_pickaxe(_0x11cfae * 0.5, true, [
      "rgba(255, 255, 255, 0)",
      "rgba(255, 255, 255, 0)",
      "rgba(255, 255, 255, 0)",
      "#FFF",
      "#FFF",
      "#FFF",
      "#FFF",
    ])
  );
  _0x1c43eb.drawImage(_0xd02e82, 12 * _0x11cfae, 18 * _0x11cfae);
  var _0xd02e82 = create_rotated_img(
    Math.PI / 4,
    create_hammer(_0x11cfae * 0.55, true, [
      "rgba(255, 255, 255, 0)",
      "#FFF",
      "#FFF",
      "#FFF",
      "#FFF",
    ])
  );
  _0x1c43eb.drawImage(_0xd02e82, 36 * _0x11cfae, 16 * _0x11cfae);
  return _0x11271f;
}
function create_blue_orb(_0x53d66c, _0x21dbab, _0x43311c) {
  var _0x55dc36 = document.createElement("canvas");
  var _0xea2364 = _0x55dc36.getContext("2d");
  _0x55dc36.width = 137 * _0x53d66c;
  _0x55dc36.height = 129 * _0x53d66c;
  _0xea2364.globalAlpha = 0.5;
  circle(
    _0xea2364,
    69 * _0x53d66c,
    64 * _0x53d66c,
    48.16637831516918 * _0x53d66c
  );
  fill_path(_0xea2364, _0x43311c[1]);
  _0xea2364.globalAlpha = 0.7;
  circle(
    _0xea2364,
    69 * _0x53d66c,
    64 * _0x53d66c,
    38.23105625617661 * _0x53d66c
  );
  fill_path(_0xea2364, _0x43311c[2]);
  _0xea2364.globalAlpha = 0.7;
  circle(
    _0xea2364,
    69 * _0x53d66c,
    64 * _0x53d66c,
    32.01562118716424 * _0x53d66c
  );
  fill_path(_0xea2364, _0x43311c[2], _0x43311c[3], 4 * _0x53d66c);
  _0xea2364.beginPath();
  _0xea2364.lineCap = "round";
  _0xea2364.lineJoin = "round";
  _0xea2364.moveTo(72 * _0x53d66c, 41 * _0x53d66c);
  _0xea2364.bezierCurveTo(
    52 * _0x53d66c,
    41 * _0x53d66c,
    48 * _0x53d66c,
    50 * _0x53d66c,
    45 * _0x53d66c,
    58 * _0x53d66c
  );
  _0xea2364.bezierCurveTo(
    43 * _0x53d66c,
    67 * _0x53d66c,
    45 * _0x53d66c,
    68 * _0x53d66c,
    46 * _0x53d66c,
    72 * _0x53d66c
  );
  _0xea2364.bezierCurveTo(
    52 * _0x53d66c,
    53 * _0x53d66c,
    60 * _0x53d66c,
    48 * _0x53d66c,
    72 * _0x53d66c,
    42 * _0x53d66c
  );
  _0xea2364.closePath();
  fill_path(_0xea2364, _0x43311c[3]);
  _0xea2364.beginPath();
  _0xea2364.lineCap = "round";
  _0xea2364.lineJoin = "round";
  _0xea2364.moveTo(93 * _0x53d66c, 62 * _0x53d66c);
  _0xea2364.bezierCurveTo(
    95 * _0x53d66c,
    72 * _0x53d66c,
    90 * _0x53d66c,
    81 * _0x53d66c,
    81 * _0x53d66c,
    87 * _0x53d66c
  );
  _0xea2364.bezierCurveTo(
    74 * _0x53d66c,
    91 * _0x53d66c,
    69 * _0x53d66c,
    89 * _0x53d66c,
    64 * _0x53d66c,
    88 * _0x53d66c
  );
  _0xea2364.bezierCurveTo(
    77 * _0x53d66c,
    83 * _0x53d66c,
    84 * _0x53d66c,
    82 * _0x53d66c,
    92 * _0x53d66c,
    62 * _0x53d66c
  );
  _0xea2364.closePath();
  fill_path(_0xea2364, _0x43311c[3]);
  return _0x55dc36;
}
function create_dragon_cube(_0x35229b, _0xdabecf, _0xbe7352) {
  var _0xe40ca3 = document.createElement("canvas");
  var _0x57bcc7 = _0xe40ca3.getContext("2d");
  _0xe40ca3.width = 137 * _0x35229b;
  _0xe40ca3.height = 129 * _0x35229b;
  _0x57bcc7.globalAlpha = 0.4;
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(
    42.000030517578125 * _0x35229b,
    41.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    45.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b,
    49.000030517578125 * _0x35229b,
    37.17047119140625 * _0x35229b,
    62.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    94.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    100.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    102.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    47.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    80.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    102.00003051757812 * _0x35229b,
    84.17047119140625 * _0x35229b,
    100.00003051757812 * _0x35229b,
    86.17047119140625 * _0x35229b,
    95.00003051757812 * _0x35229b,
    88.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    84.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    89.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    79.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    86.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    53.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    42.17047119140625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, undefined, _0xbe7352[2], 40 * _0x35229b);
  _0x57bcc7.globalAlpha = 0.4;
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(
    42.000030517578125 * _0x35229b,
    41.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    45.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b,
    49.000030517578125 * _0x35229b,
    37.17047119140625 * _0x35229b,
    62.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    94.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    100.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    102.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    47.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    80.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    102.00003051757812 * _0x35229b,
    84.17047119140625 * _0x35229b,
    100.00003051757812 * _0x35229b,
    86.17047119140625 * _0x35229b,
    95.00003051757812 * _0x35229b,
    88.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    84.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    89.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    79.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    86.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    53.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    42.17047119140625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, undefined, _0xbe7352[1], 20 * _0x35229b);
  _0x57bcc7.globalAlpha = 0.8;
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(
    42.000030517578125 * _0x35229b,
    41.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    45.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b,
    49.000030517578125 * _0x35229b,
    37.17047119140625 * _0x35229b,
    62.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    94.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    100.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    102.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    47.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    80.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    102.00003051757812 * _0x35229b,
    84.17047119140625 * _0x35229b,
    100.00003051757812 * _0x35229b,
    86.17047119140625 * _0x35229b,
    95.00003051757812 * _0x35229b,
    88.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    84.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    89.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    79.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    86.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    53.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    42.17047119140625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[0], _0xbe7352[1], 4 * _0x35229b);
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(
    51.000030517578125 * _0x35229b,
    37.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    51.000030517578125 * _0x35229b,
    61.9886474609375 * _0x35229b,
    51.000030517578125 * _0x35229b,
    61.9886474609375 * _0x35229b,
    51.000030517578125 * _0x35229b,
    85.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    75.50003051757812 * _0x35229b,
    85.9886474609375 * _0x35229b,
    75.50003051757812 * _0x35229b,
    85.9886474609375 * _0x35229b,
    100.00003051757812 * _0x35229b,
    85.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    100.00003051757812 * _0x35229b,
    61.9886474609375 * _0x35229b,
    100.00003051757812 * _0x35229b,
    61.9886474609375 * _0x35229b,
    100.00003051757812 * _0x35229b,
    37.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    76.00003051757812 * _0x35229b,
    37.9886474609375 * _0x35229b,
    76.00003051757812 * _0x35229b,
    37.9886474609375 * _0x35229b,
    52.000030517578125 * _0x35229b,
    37.9886474609375 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[1], _0xbe7352[2], 4 * _0x35229b);
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(99.00003051757812 * _0x35229b, 38.9886474609375 * _0x35229b);
  _0x57bcc7.bezierCurveTo(
    93.50003051757812 * _0x35229b,
    44.9886474609375 * _0x35229b,
    93.50003051757812 * _0x35229b,
    44.9886474609375 * _0x35229b,
    88.00003051757812 * _0x35229b,
    50.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    88.00003051757812 * _0x35229b,
    72.4886474609375 * _0x35229b,
    88.00003051757812 * _0x35229b,
    72.4886474609375 * _0x35229b,
    88.00003051757812 * _0x35229b,
    93.9886474609375 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    94.00003051757812 * _0x35229b,
    90.4886474609375 * _0x35229b,
    94.00003051757812 * _0x35229b,
    90.4886474609375 * _0x35229b,
    100.00003051757812 * _0x35229b,
    86.9886474609375 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[1], _0xbe7352[2], 4 * _0x35229b);
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(87.00003051757812 * _0x35229b, 49.625 * _0x35229b);
  _0x57bcc7.bezierCurveTo(
    61.000030517578125 * _0x35229b,
    49.625 * _0x35229b,
    61.000030517578125 * _0x35229b,
    49.625 * _0x35229b,
    35.000030517578125 * _0x35229b,
    49.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    35.000030517578125 * _0x35229b,
    70.625 * _0x35229b,
    35.000030517578125 * _0x35229b,
    70.625 * _0x35229b,
    35.000030517578125 * _0x35229b,
    91.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    60.500030517578125 * _0x35229b,
    91.625 * _0x35229b,
    60.500030517578125 * _0x35229b,
    91.625 * _0x35229b,
    86.00003051757812 * _0x35229b,
    91.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    86.50003051757812 * _0x35229b,
    70.625 * _0x35229b,
    86.50003051757812 * _0x35229b,
    70.625 * _0x35229b,
    87.00003051757812 * _0x35229b,
    49.625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[1], _0xbe7352[3], 4 * _0x35229b);
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(47.000030517578125 * _0x35229b, 36.625 * _0x35229b);
  _0x57bcc7.bezierCurveTo(
    73.00003051757812 * _0x35229b,
    37.125 * _0x35229b,
    73.00003051757812 * _0x35229b,
    37.125 * _0x35229b,
    99.00003051757812 * _0x35229b,
    37.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    93.50003051757812 * _0x35229b,
    44.125 * _0x35229b,
    93.50003051757812 * _0x35229b,
    44.125 * _0x35229b,
    88.00003051757812 * _0x35229b,
    50.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    60.500030517578125 * _0x35229b,
    50.125 * _0x35229b,
    60.500030517578125 * _0x35229b,
    50.125 * _0x35229b,
    33.000030517578125 * _0x35229b,
    49.625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[1], _0xbe7352[3], 4 * _0x35229b);
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(53.000030517578125 * _0x35229b, 52.625 * _0x35229b);
  _0x57bcc7.bezierCurveTo(
    40.000030517578125 * _0x35229b,
    54.625 * _0x35229b,
    39.000030517578125 * _0x35229b,
    59.625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    67.625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    45.000030517578125 * _0x35229b,
    59.625 * _0x35229b,
    48.000030517578125 * _0x35229b,
    58.625 * _0x35229b,
    54.000030517578125 * _0x35229b,
    53.625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, _0xbe7352[3]);
  _0x57bcc7.globalAlpha = 1;
  _0x57bcc7.beginPath();
  _0x57bcc7.lineCap = "round";
  _0x57bcc7.lineJoin = "round";
  _0x57bcc7.moveTo(
    42.000030517578125 * _0x35229b,
    41.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    45.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b,
    49.000030517578125 * _0x35229b,
    37.17047119140625 * _0x35229b,
    62.000030517578125 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    78.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    94.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    100.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    102.00003051757812 * _0x35229b,
    38.17047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    47.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    63.67047119140625 * _0x35229b,
    101.00003051757812 * _0x35229b,
    80.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    102.00003051757812 * _0x35229b,
    84.17047119140625 * _0x35229b,
    100.00003051757812 * _0x35229b,
    86.17047119140625 * _0x35229b,
    95.00003051757812 * _0x35229b,
    88.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    84.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    89.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b,
    79.00003051757812 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    59.500030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    94.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    86.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    69.67047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    53.17047119140625 * _0x35229b
  );
  _0x57bcc7.bezierCurveTo(
    33.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    34.000030517578125 * _0x35229b,
    47.17047119140625 * _0x35229b,
    40.000030517578125 * _0x35229b,
    42.17047119140625 * _0x35229b
  );
  _0x57bcc7.closePath();
  fill_path(_0x57bcc7, undefined, _0xbe7352[3], 4 * _0x35229b);
  return _0xe40ca3;
}
function create_lake_edge(_0x502880, _0x5c0a48, _0x33e683) {
  var _0x1ffe4b = document.createElement("canvas"),
    _0x5566a5 = _0x1ffe4b.getContext("2d");
  if (_0x33e683 == 0) {
    _0x1ffe4b.width = 543 * _0x502880;
    _0x1ffe4b.height = 393 * _0x502880;
    _0x5566a5.beginPath();
    _0x5566a5.lineCap = "round";
    _0x5566a5.lineJoin = "round";
    _0x5566a5.moveTo(
      164.23297119140625 * _0x502880,
      72.80398559570312 * _0x502880
    );
    _0x5566a5.bezierCurveTo(
      289.23297119140625 * _0x502880,
      41.803985595703125 * _0x502880,
      413.23297119140625 * _0x502880,
      86.80398559570312 * _0x502880,
      441.23297119140625 * _0x502880,
      105.80398559570312 * _0x502880
    );
    _0x5566a5.bezierCurveTo(
      513.2329711914062 * _0x502880,
      149.80398559570312 * _0x502880,
      475.23297119140625 * _0x502880,
      224.80398559570312 * _0x502880,
      451.23297119140625 * _0x502880,
      258.8039855957031 * _0x502880
    );
    _0x5566a5.bezierCurveTo(
      410.23297119140625 * _0x502880,
      315.8039855957031 * _0x502880,
      380.23297119140625 * _0x502880,
      314.8039855957031 * _0x502880,
      289.23297119140625 * _0x502880,
      320.8039855957031 * _0x502880
    );
    _0x5566a5.bezierCurveTo(
      160.23297119140625 * _0x502880,
      329.8039855957031 * _0x502880,
      102.23297119140625 * _0x502880,
      312.8039855957031 * _0x502880,
      72.23297119140625 * _0x502880,
      258.8039855957031 * _0x502880
    );
    _0x5566a5.bezierCurveTo(
      32.23297119140625 * _0x502880,
      156.80398559570312 * _0x502880,
      93.23297119140625 * _0x502880,
      92.80398559570312 * _0x502880,
      164.23297119140625 * _0x502880,
      72.80398559570312 * _0x502880
    );
    _0x5566a5.closePath();
    fill_path(_0x5566a5, _0x5c0a48[0]);
  } else {
    if (_0x33e683 == 1) {
      _0x1ffe4b.width = 543 * _0x502880;
      _0x1ffe4b.height = 470 * _0x502880;
      _0x5566a5.beginPath();
      _0x5566a5.lineCap = "round";
      _0x5566a5.lineJoin = "round";
      _0x5566a5.moveTo(
        238.23297119140625 * _0x502880,
        34.622161865234375 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        423.23297119140625 * _0x502880,
        21.622161865234375 * _0x502880,
        474.23297119140625 * _0x502880,
        96.62216186523438 * _0x502880,
        499.23297119140625 * _0x502880,
        167.62216186523438 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        536.2329711914062 * _0x502880,
        288.6221618652344 * _0x502880,
        487.23297119140625 * _0x502880,
        367.6221618652344 * _0x502880,
        403.23297119140625 * _0x502880,
        412.6221618652344 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        287.23297119140625 * _0x502880,
        466.6221618652344 * _0x502880,
        127.23297119140625 * _0x502880,
        424.6221618652344 * _0x502880,
        50.23297119140625 * _0x502880,
        318.6221618652344 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        -0.76702880859375 * _0x502880,
        239.62216186523438 * _0x502880,
        30.23297119140625 * _0x502880,
        110.62216186523438 * _0x502880,
        73.23297119140625 * _0x502880,
        77.62216186523438 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        128.23297119140625 * _0x502880,
        29.622161865234375 * _0x502880,
        202.23297119140625 * _0x502880,
        40.622161865234375 * _0x502880,
        238.23297119140625 * _0x502880,
        34.622161865234375 * _0x502880
      );
      _0x5566a5.closePath();
      fill_path(_0x5566a5, _0x5c0a48[0]);
    } else {
      _0x1ffe4b.width = 543 * _0x502880;
      _0x1ffe4b.height = 470 * _0x502880;
      _0x5566a5.beginPath();
      _0x5566a5.lineCap = "round";
      _0x5566a5.lineJoin = "round";
      _0x5566a5.moveTo(
        268.23297119140625 * _0x502880,
        23.349441528320312 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        424.23297119140625 * _0x502880,
        -0.6505584716796875 * _0x502880,
        524.2329711914062 * _0x502880,
        44.34944152832031 * _0x502880,
        519.2329711914062 * _0x502880,
        186.3494415283203 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        515.2329711914062 * _0x502880,
        341.3494415283203 * _0x502880,
        431.23297119140625 * _0x502880,
        409.3494415283203 * _0x502880,
        357.23297119140625 * _0x502880,
        442.3494415283203 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        278.23297119140625 * _0x502880,
        469.3494415283203 * _0x502880,
        144.23297119140625 * _0x502880,
        460.3494415283203 * _0x502880,
        51.23297119140625 * _0x502880,
        348.3494415283203 * _0x502880
      );
      _0x5566a5.bezierCurveTo(
        3.23297119140625 * _0x502880,
        274.3494415283203 * _0x502880,
        45.23297119140625 * _0x502880,
        87.34944152832031 * _0x502880,
        268.23297119140625 * _0x502880,
        23.349441528320312 * _0x502880
      );
      _0x5566a5.closePath();
      fill_path(_0x5566a5, _0x5c0a48[0]);
    }
  }
  return _0x1ffe4b;
}
function create_lake_deep(_0x4c4e7e, _0x3483eb, _0x576b9b) {
  var _0x5025cb = document.createElement("canvas"),
    _0x38f11b = _0x5025cb.getContext("2d");
  if (_0x576b9b == 0) {
    _0x5025cb.width = 543 * _0x4c4e7e;
    _0x5025cb.height = 393 * _0x4c4e7e;
    _0x38f11b.beginPath();
    _0x38f11b.lineCap = "round";
    _0x38f11b.lineJoin = "round";
    _0x38f11b.moveTo(109.5 * _0x4c4e7e, 154.046875 * _0x4c4e7e);
    _0x38f11b.bezierCurveTo(
      143.5 * _0x4c4e7e,
      96.046875 * _0x4c4e7e,
      208.5 * _0x4c4e7e,
      92.046875 * _0x4c4e7e,
      288.5 * _0x4c4e7e,
      97.046875 * _0x4c4e7e
    );
    _0x38f11b.bezierCurveTo(
      357.5 * _0x4c4e7e,
      104.046875 * _0x4c4e7e,
      414.5 * _0x4c4e7e,
      132.046875 * _0x4c4e7e,
      422.5 * _0x4c4e7e,
      166.046875 * _0x4c4e7e
    );
    _0x38f11b.bezierCurveTo(
      431.5 * _0x4c4e7e,
      192.046875 * _0x4c4e7e,
      400.5 * _0x4c4e7e,
      261.046875 * _0x4c4e7e,
      332.5 * _0x4c4e7e,
      271.046875 * _0x4c4e7e
    );
    _0x38f11b.bezierCurveTo(
      272.5 * _0x4c4e7e,
      279.046875 * _0x4c4e7e,
      159.5 * _0x4c4e7e,
      285.046875 * _0x4c4e7e,
      126.5 * _0x4c4e7e,
      260.046875 * _0x4c4e7e
    );
    _0x38f11b.bezierCurveTo(
      99.5 * _0x4c4e7e,
      238.046875 * _0x4c4e7e,
      95.5 * _0x4c4e7e,
      183.046875 * _0x4c4e7e,
      109.5 * _0x4c4e7e,
      154.046875 * _0x4c4e7e
    );
    _0x38f11b.closePath();
    fill_path(_0x38f11b, _0x3483eb[0]);
  } else {
    if (_0x576b9b == 1) {
      _0x5025cb.width = 543 * _0x4c4e7e;
      _0x5025cb.height = 470 * _0x4c4e7e;
      _0x38f11b.beginPath();
      _0x38f11b.lineCap = "round";
      _0x38f11b.lineJoin = "round";
      _0x38f11b.moveTo(
        216.23297119140625 * _0x4c4e7e,
        100.34944152832031 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        349.23297119140625 * _0x4c4e7e,
        110.34944152832031 * _0x4c4e7e,
        422.23297119140625 * _0x4c4e7e,
        142.3494415283203 * _0x4c4e7e,
        434.23297119140625 * _0x4c4e7e,
        194.3494415283203 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        451.23297119140625 * _0x4c4e7e,
        268.3494415283203 * _0x4c4e7e,
        397.23297119140625 * _0x4c4e7e,
        367.3494415283203 * _0x4c4e7e,
        313.23297119140625 * _0x4c4e7e,
        351.3494415283203 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        148.23297119140625 * _0x4c4e7e,
        330.3494415283203 * _0x4c4e7e,
        106.23297119140625 * _0x4c4e7e,
        319.3494415283203 * _0x4c4e7e,
        87.23297119140625 * _0x4c4e7e,
        248.3494415283203 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        63.23297119140625 * _0x4c4e7e,
        164.3494415283203 * _0x4c4e7e,
        102.23297119140625 * _0x4c4e7e,
        90.34944152832031 * _0x4c4e7e,
        216.23297119140625 * _0x4c4e7e,
        100.34944152832031 * _0x4c4e7e
      );
      _0x38f11b.closePath();
      fill_path(_0x38f11b, _0x3483eb[0]);
    } else {
      _0x5025cb.width = 543 * _0x4c4e7e;
      _0x5025cb.height = 470 * _0x4c4e7e;
      _0x38f11b.beginPath();
      _0x38f11b.lineCap = "round";
      _0x38f11b.lineJoin = "round";
      _0x38f11b.moveTo(
        155.23297119140625 * _0x4c4e7e,
        126.71307373046875 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        232.23297119140625 * _0x4c4e7e,
        76.71307373046875 * _0x4c4e7e,
        340.23297119140625 * _0x4c4e7e,
        67.71307373046875 * _0x4c4e7e,
        411.23297119140625 * _0x4c4e7e,
        106.71307373046875 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        458.23297119140625 * _0x4c4e7e,
        131.71307373046875 * _0x4c4e7e,
        465.23297119140625 * _0x4c4e7e,
        280.71307373046875 * _0x4c4e7e,
        353.23297119140625 * _0x4c4e7e,
        363.71307373046875 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        299.23297119140625 * _0x4c4e7e,
        404.71307373046875 * _0x4c4e7e,
        143.23297119140625 * _0x4c4e7e,
        415.71307373046875 * _0x4c4e7e,
        88.23297119140625 * _0x4c4e7e,
        327.71307373046875 * _0x4c4e7e
      );
      _0x38f11b.bezierCurveTo(
        48.23297119140625 * _0x4c4e7e,
        256.71307373046875 * _0x4c4e7e,
        93.23297119140625 * _0x4c4e7e,
        171.71307373046875 * _0x4c4e7e,
        155.23297119140625 * _0x4c4e7e,
        126.71307373046875 * _0x4c4e7e
      );
      _0x38f11b.closePath();
      fill_path(_0x38f11b, _0x3483eb[0]);
    }
  }
  return _0x5025cb;
}
function create_lake(_0x5701b2, _0x1b007a, _0xbef57f) {
  var _0x581672 = document.createElement("canvas"),
    _0x4e8a89 = _0x581672.getContext("2d");
  if (_0xbef57f == 0) {
    _0x581672.width = 543 * _0x5701b2;
    _0x581672.height = 393 * _0x5701b2;
    _0x4e8a89.beginPath();
    _0x4e8a89.lineCap = "round";
    _0x4e8a89.lineJoin = "round";
    _0x4e8a89.moveTo(
      196.23297119140625 * _0x5701b2,
      77.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      276.23297119140625 * _0x5701b2,
      69.8948974609375 * _0x5701b2,
      360.23297119140625 * _0x5701b2,
      87.8948974609375 * _0x5701b2,
      431.23297119140625 * _0x5701b2,
      121.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      474.23297119140625 * _0x5701b2,
      146.8948974609375 * _0x5701b2,
      463.23297119140625 * _0x5701b2,
      184.8948974609375 * _0x5701b2,
      437.23297119140625 * _0x5701b2,
      235.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      413.23297119140625 * _0x5701b2,
      277.8948974609375 * _0x5701b2,
      383.23297119140625 * _0x5701b2,
      289.8948974609375 * _0x5701b2,
      303.23297119140625 * _0x5701b2,
      289.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      178.23297119140625 * _0x5701b2,
      292.8948974609375 * _0x5701b2,
      127.23297119140625 * _0x5701b2,
      301.8948974609375 * _0x5701b2,
      92.23297119140625 * _0x5701b2,
      268.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      55.23297119140625 * _0x5701b2,
      234.8948974609375 * _0x5701b2,
      59.23297119140625 * _0x5701b2,
      147.8948974609375 * _0x5701b2,
      100.23297119140625 * _0x5701b2,
      112.8948974609375 * _0x5701b2
    );
    _0x4e8a89.bezierCurveTo(
      133.23297119140625 * _0x5701b2,
      83.8948974609375 * _0x5701b2,
      167.23297119140625 * _0x5701b2,
      82.8948974609375 * _0x5701b2,
      196.23297119140625 * _0x5701b2,
      77.8948974609375 * _0x5701b2
    );
    _0x4e8a89.closePath();
    fill_path(_0x4e8a89, _0x1b007a[0]);
  } else {
    if (_0xbef57f == 1) {
      _0x581672.width = 543 * _0x5701b2;
      _0x581672.height = 470 * _0x5701b2;
      _0x4e8a89.beginPath();
      _0x4e8a89.lineCap = "round";
      _0x4e8a89.lineJoin = "round";
      _0x4e8a89.moveTo(
        285.23297119140625 * _0x5701b2,
        51.803985595703125 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        408.23297119140625 * _0x5701b2,
        57.803985595703125 * _0x5701b2,
        463.23297119140625 * _0x5701b2,
        107.80398559570312 * _0x5701b2,
        480.23297119140625 * _0x5701b2,
        183.80398559570312 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        500.23297119140625 * _0x5701b2,
        282.8039855957031 * _0x5701b2,
        473.23297119140625 * _0x5701b2,
        351.8039855957031 * _0x5701b2,
        373.23297119140625 * _0x5701b2,
        390.8039855957031 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        286.23297119140625 * _0x5701b2,
        420.8039855957031 * _0x5701b2,
        173.23297119140625 * _0x5701b2,
        396.8039855957031 * _0x5701b2,
        86.23297119140625 * _0x5701b2,
        331.8039855957031 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        13.23297119140625 * _0x5701b2,
        267.8039855957031 * _0x5701b2,
        19.23297119140625 * _0x5701b2,
        79.80398559570312 * _0x5701b2,
        143.23297119140625 * _0x5701b2,
        50.803985595703125 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        175.23297119140625 * _0x5701b2,
        41.803985595703125 * _0x5701b2,
        263.23297119140625 * _0x5701b2,
        51.803985595703125 * _0x5701b2,
        285.23297119140625 * _0x5701b2,
        51.803985595703125 * _0x5701b2
      );
      _0x4e8a89.closePath();
      fill_path(_0x4e8a89, _0x1b007a[0]);
    } else {
      _0x581672.width = 543 * _0x5701b2;
      _0x581672.height = 470 * _0x5701b2;
      _0x4e8a89.beginPath();
      _0x4e8a89.lineCap = "round";
      _0x4e8a89.lineJoin = "round";
      _0x4e8a89.moveTo(
        492.23297119140625 * _0x5701b2,
        170.0767059326172 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        493.23297119140625 * _0x5701b2,
        300.16761779785156 * _0x5701b2,
        411.23297119140625 * _0x5701b2,
        382.16761779785156 * _0x5701b2,
        321.23297119140625 * _0x5701b2,
        419.16761779785156 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        251.23297119140625 * _0x5701b2,
        444.16761779785156 * _0x5701b2,
        125.23297119140625 * _0x5701b2,
        422.16761779785156 * _0x5701b2,
        63.23297119140625 * _0x5701b2,
        347.16761779785156 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        22.23297119140625 * _0x5701b2,
        282.16761779785156 * _0x5701b2,
        53.23297119140625 * _0x5701b2,
        152.16761779785156 * _0x5701b2,
        179.23297119140625 * _0x5701b2,
        79.16761779785156 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        237.23297119140625 * _0x5701b2,
        46.16761779785156 * _0x5701b2,
        326.23297119140625 * _0x5701b2,
        27.167617797851562 * _0x5701b2,
        409.23297119140625 * _0x5701b2,
        50.16761779785156 * _0x5701b2
      );
      _0x4e8a89.bezierCurveTo(
        470.23297119140625 * _0x5701b2,
        66.16761779785156 * _0x5701b2,
        493.23297119140625 * _0x5701b2,
        104.16761779785156 * _0x5701b2,
        492.23297119140625 * _0x5701b2,
        170.0767059326172 * _0x5701b2
      );
      _0x4e8a89.closePath();
      fill_path(_0x4e8a89, _0x1b007a[0]);
    }
  }
  return _0x581672;
}
function create_shingle(_0x67c381, _0x267efc, _0x391ca3) {
  var _0x10baf8 = document.createElement("canvas");
  var _0x4cb0e8 = _0x10baf8.getContext("2d");
  if (_0x391ca3 == 0) {
    _0x10baf8.width = 543 * _0x67c381;
    _0x10baf8.height = 393 * _0x67c381;
    _0x4cb0e8.translate(40 * _0x67c381, 60 * _0x67c381);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(176 * _0x67c381, 10.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      188 * _0x67c381,
      16.25 * _0x67c381,
      187 * _0x67c381,
      25.25 * _0x67c381,
      183 * _0x67c381,
      26.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      177 * _0x67c381,
      26.25 * _0x67c381,
      175 * _0x67c381,
      21.25 * _0x67c381,
      173 * _0x67c381,
      19.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      170 * _0x67c381,
      14.25 * _0x67c381,
      170 * _0x67c381,
      10.25 * _0x67c381,
      176 * _0x67c381,
      10.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(176 * _0x67c381, 10.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      188 * _0x67c381,
      16.25 * _0x67c381,
      187 * _0x67c381,
      25.25 * _0x67c381,
      183 * _0x67c381,
      26.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      177 * _0x67c381,
      26.25 * _0x67c381,
      175 * _0x67c381,
      21.25 * _0x67c381,
      173 * _0x67c381,
      19.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      170 * _0x67c381,
      14.25 * _0x67c381,
      170 * _0x67c381,
      10.25 * _0x67c381,
      176 * _0x67c381,
      10.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(274 * _0x67c381, 8 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      276 * _0x67c381,
      12 * _0x67c381,
      271 * _0x67c381,
      23 * _0x67c381,
      266 * _0x67c381,
      20 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      264 * _0x67c381,
      19 * _0x67c381,
      262 * _0x67c381,
      15 * _0x67c381,
      267 * _0x67c381,
      9 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      271 * _0x67c381,
      5 * _0x67c381,
      274 * _0x67c381,
      5 * _0x67c381,
      274 * _0x67c381,
      8 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(274 * _0x67c381, 8 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      276 * _0x67c381,
      12 * _0x67c381,
      271 * _0x67c381,
      23 * _0x67c381,
      266 * _0x67c381,
      20 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      264 * _0x67c381,
      19 * _0x67c381,
      262 * _0x67c381,
      15 * _0x67c381,
      267 * _0x67c381,
      9 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      271 * _0x67c381,
      5 * _0x67c381,
      274 * _0x67c381,
      5 * _0x67c381,
      274 * _0x67c381,
      8 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(282 * _0x67c381, 23.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      275 * _0x67c381,
      25.25 * _0x67c381,
      272 * _0x67c381,
      29.25 * _0x67c381,
      274 * _0x67c381,
      36.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      277 * _0x67c381,
      40.25 * _0x67c381,
      280 * _0x67c381,
      37.25 * _0x67c381,
      283 * _0x67c381,
      32.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      286 * _0x67c381,
      26.25 * _0x67c381,
      286 * _0x67c381,
      25.25 * _0x67c381,
      282 * _0x67c381,
      23.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(282 * _0x67c381, 23.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      275 * _0x67c381,
      25.25 * _0x67c381,
      272 * _0x67c381,
      29.25 * _0x67c381,
      274 * _0x67c381,
      36.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      277 * _0x67c381,
      40.25 * _0x67c381,
      280 * _0x67c381,
      37.25 * _0x67c381,
      283 * _0x67c381,
      32.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      286 * _0x67c381,
      26.25 * _0x67c381,
      286 * _0x67c381,
      25.25 * _0x67c381,
      282 * _0x67c381,
      23.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(343.75 * _0x67c381, 18.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      346.75 * _0x67c381,
      27.25 * _0x67c381,
      346.75 * _0x67c381,
      32.25 * _0x67c381,
      339.75 * _0x67c381,
      31.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      336.75 * _0x67c381,
      29.25 * _0x67c381,
      335.75 * _0x67c381,
      27.25 * _0x67c381,
      336.75 * _0x67c381,
      22.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      336.75 * _0x67c381,
      16.25 * _0x67c381,
      338.75 * _0x67c381,
      15.25 * _0x67c381,
      343.75 * _0x67c381,
      18.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(343.75 * _0x67c381, 18.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      346.75 * _0x67c381,
      27.25 * _0x67c381,
      346.75 * _0x67c381,
      32.25 * _0x67c381,
      339.75 * _0x67c381,
      31.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      336.75 * _0x67c381,
      29.25 * _0x67c381,
      335.75 * _0x67c381,
      27.25 * _0x67c381,
      336.75 * _0x67c381,
      22.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      336.75 * _0x67c381,
      16.25 * _0x67c381,
      338.75 * _0x67c381,
      15.25 * _0x67c381,
      343.75 * _0x67c381,
      18.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(364.75 * _0x67c381, 22.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      368.75 * _0x67c381,
      27.25 * _0x67c381,
      362.75 * _0x67c381,
      36.25 * _0x67c381,
      356.75 * _0x67c381,
      39.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      346.75 * _0x67c381,
      43.25 * _0x67c381,
      346.75 * _0x67c381,
      34.25 * _0x67c381,
      348.75 * _0x67c381,
      31.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      352.75 * _0x67c381,
      23.25 * _0x67c381,
      360.75 * _0x67c381,
      20.25 * _0x67c381,
      363.75 * _0x67c381,
      22.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(364.75 * _0x67c381, 22.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      368.75 * _0x67c381,
      27.25 * _0x67c381,
      362.75 * _0x67c381,
      36.25 * _0x67c381,
      356.75 * _0x67c381,
      39.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      346.75 * _0x67c381,
      43.25 * _0x67c381,
      346.75 * _0x67c381,
      34.25 * _0x67c381,
      348.75 * _0x67c381,
      31.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      352.75 * _0x67c381,
      23.25 * _0x67c381,
      360.75 * _0x67c381,
      20.25 * _0x67c381,
      363.75 * _0x67c381,
      22.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(350.75 * _0x67c381, 52.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      352.75 * _0x67c381,
      45.25 * _0x67c381,
      360.75 * _0x67c381,
      43.25 * _0x67c381,
      368.75 * _0x67c381,
      52.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      369.75 * _0x67c381,
      58.25 * _0x67c381,
      366.75 * _0x67c381,
      59.25 * _0x67c381,
      357.75 * _0x67c381,
      57.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      350.75 * _0x67c381,
      56.25 * _0x67c381,
      352.75 * _0x67c381,
      55.25 * _0x67c381,
      350.75 * _0x67c381,
      52.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(350.75 * _0x67c381, 52.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      352.75 * _0x67c381,
      45.25 * _0x67c381,
      360.75 * _0x67c381,
      43.25 * _0x67c381,
      368.75 * _0x67c381,
      52.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      369.75 * _0x67c381,
      58.25 * _0x67c381,
      366.75 * _0x67c381,
      59.25 * _0x67c381,
      357.75 * _0x67c381,
      57.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      350.75 * _0x67c381,
      56.25 * _0x67c381,
      352.75 * _0x67c381,
      55.25 * _0x67c381,
      350.75 * _0x67c381,
      52.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(421.75 * _0x67c381, 81.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      432.75 * _0x67c381,
      85.25 * _0x67c381,
      431.75 * _0x67c381,
      89.25 * _0x67c381,
      426.75 * _0x67c381,
      93.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      418.75 * _0x67c381,
      95.25 * _0x67c381,
      414.75 * _0x67c381,
      93.25 * _0x67c381,
      412.75 * _0x67c381,
      89.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      411.75 * _0x67c381,
      84.25 * _0x67c381,
      413.75 * _0x67c381,
      81.25 * _0x67c381,
      421.75 * _0x67c381,
      81.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(421.75 * _0x67c381, 81.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      432.75 * _0x67c381,
      85.25 * _0x67c381,
      431.75 * _0x67c381,
      89.25 * _0x67c381,
      426.75 * _0x67c381,
      93.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      418.75 * _0x67c381,
      95.25 * _0x67c381,
      414.75 * _0x67c381,
      93.25 * _0x67c381,
      412.75 * _0x67c381,
      89.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      411.75 * _0x67c381,
      84.25 * _0x67c381,
      413.75 * _0x67c381,
      81.25 * _0x67c381,
      421.75 * _0x67c381,
      81.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(432.75 * _0x67c381, 105.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      430.75 * _0x67c381,
      115.25 * _0x67c381,
      411.75 * _0x67c381,
      130.25 * _0x67c381,
      408.75 * _0x67c381,
      117.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      407.75 * _0x67c381,
      106.25 * _0x67c381,
      414.75 * _0x67c381,
      103.25 * _0x67c381,
      421.75 * _0x67c381,
      101.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      430.75 * _0x67c381,
      100.25 * _0x67c381,
      432.75 * _0x67c381,
      101.25 * _0x67c381,
      432.75 * _0x67c381,
      105.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(432.75 * _0x67c381, 105.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      430.75 * _0x67c381,
      115.25 * _0x67c381,
      411.75 * _0x67c381,
      130.25 * _0x67c381,
      408.75 * _0x67c381,
      117.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      407.75 * _0x67c381,
      106.25 * _0x67c381,
      414.75 * _0x67c381,
      103.25 * _0x67c381,
      421.75 * _0x67c381,
      101.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      430.75 * _0x67c381,
      100.25 * _0x67c381,
      432.75 * _0x67c381,
      101.25 * _0x67c381,
      432.75 * _0x67c381,
      105.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(422.75 * _0x67c381, 153.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      437.75 * _0x67c381,
      155.25 * _0x67c381,
      442.75 * _0x67c381,
      158.25 * _0x67c381,
      436.75 * _0x67c381,
      165.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      431.75 * _0x67c381,
      170.25 * _0x67c381,
      424.75 * _0x67c381,
      167.25 * _0x67c381,
      419.75 * _0x67c381,
      163.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      413.75 * _0x67c381,
      157.25 * _0x67c381,
      415.75 * _0x67c381,
      153.25 * _0x67c381,
      422.75 * _0x67c381,
      153.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(422.75 * _0x67c381, 153.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      437.75 * _0x67c381,
      155.25 * _0x67c381,
      442.75 * _0x67c381,
      158.25 * _0x67c381,
      436.75 * _0x67c381,
      165.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      431.75 * _0x67c381,
      170.25 * _0x67c381,
      424.75 * _0x67c381,
      167.25 * _0x67c381,
      419.75 * _0x67c381,
      163.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      413.75 * _0x67c381,
      157.25 * _0x67c381,
      415.75 * _0x67c381,
      153.25 * _0x67c381,
      422.75 * _0x67c381,
      153.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(409.75 * _0x67c381, 158.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      409.75 * _0x67c381,
      168.25 * _0x67c381,
      401.75 * _0x67c381,
      172.25 * _0x67c381,
      397.75 * _0x67c381,
      167.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      394.75 * _0x67c381,
      159.25 * _0x67c381,
      407.75 * _0x67c381,
      150.25 * _0x67c381,
      408.75 * _0x67c381,
      158.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(409.75 * _0x67c381, 158.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      409.75 * _0x67c381,
      168.25 * _0x67c381,
      401.75 * _0x67c381,
      172.25 * _0x67c381,
      397.75 * _0x67c381,
      167.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      394.75 * _0x67c381,
      159.25 * _0x67c381,
      407.75 * _0x67c381,
      150.25 * _0x67c381,
      408.75 * _0x67c381,
      158.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(204 * _0x67c381, 238.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      204 * _0x67c381,
      248.25 * _0x67c381,
      184 * _0x67c381,
      255.25 * _0x67c381,
      180 * _0x67c381,
      247.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      177 * _0x67c381,
      241.25 * _0x67c381,
      187 * _0x67c381,
      236.25 * _0x67c381,
      192 * _0x67c381,
      235.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      201 * _0x67c381,
      233.25 * _0x67c381,
      204 * _0x67c381,
      233.25 * _0x67c381,
      204 * _0x67c381,
      238.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(204 * _0x67c381, 238.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      204 * _0x67c381,
      248.25 * _0x67c381,
      184 * _0x67c381,
      255.25 * _0x67c381,
      180 * _0x67c381,
      247.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      177 * _0x67c381,
      241.25 * _0x67c381,
      187 * _0x67c381,
      236.25 * _0x67c381,
      192 * _0x67c381,
      235.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      201 * _0x67c381,
      233.25 * _0x67c381,
      204 * _0x67c381,
      233.25 * _0x67c381,
      204 * _0x67c381,
      238.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(208 * _0x67c381, 246.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      202 * _0x67c381,
      255.25 * _0x67c381,
      204 * _0x67c381,
      258.25 * _0x67c381,
      212 * _0x67c381,
      255.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      217 * _0x67c381,
      250.25 * _0x67c381,
      217 * _0x67c381,
      248.25 * _0x67c381,
      216 * _0x67c381,
      244.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      210 * _0x67c381,
      241.25 * _0x67c381,
      209 * _0x67c381,
      245.25 * _0x67c381,
      208 * _0x67c381,
      246.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(208 * _0x67c381, 246.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      202 * _0x67c381,
      255.25 * _0x67c381,
      204 * _0x67c381,
      258.25 * _0x67c381,
      212 * _0x67c381,
      255.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      217 * _0x67c381,
      250.25 * _0x67c381,
      217 * _0x67c381,
      248.25 * _0x67c381,
      216 * _0x67c381,
      244.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      210 * _0x67c381,
      241.25 * _0x67c381,
      209 * _0x67c381,
      245.25 * _0x67c381,
      208 * _0x67c381,
      246.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(197 * _0x67c381, 258.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      194 * _0x67c381,
      265.25 * _0x67c381,
      186 * _0x67c381,
      270.25 * _0x67c381,
      185 * _0x67c381,
      262.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      187 * _0x67c381,
      255.25 * _0x67c381,
      191 * _0x67c381,
      252.25 * _0x67c381,
      195 * _0x67c381,
      253.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      198 * _0x67c381,
      256.25 * _0x67c381,
      197 * _0x67c381,
      257.25 * _0x67c381,
      197 * _0x67c381,
      258.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(197 * _0x67c381, 258.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      194 * _0x67c381,
      265.25 * _0x67c381,
      186 * _0x67c381,
      270.25 * _0x67c381,
      185 * _0x67c381,
      262.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      187 * _0x67c381,
      255.25 * _0x67c381,
      191 * _0x67c381,
      252.25 * _0x67c381,
      195 * _0x67c381,
      253.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      198 * _0x67c381,
      256.25 * _0x67c381,
      197 * _0x67c381,
      257.25 * _0x67c381,
      197 * _0x67c381,
      258.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(24 * _0x67c381, 111.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      32 * _0x67c381,
      115.25 * _0x67c381,
      29 * _0x67c381,
      123.25 * _0x67c381,
      22 * _0x67c381,
      133.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      15 * _0x67c381,
      140.25 * _0x67c381,
      7 * _0x67c381,
      137.25 * _0x67c381,
      9 * _0x67c381,
      125.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      12 * _0x67c381,
      114.25 * _0x67c381,
      20 * _0x67c381,
      110.25 * _0x67c381,
      24 * _0x67c381,
      111.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(24 * _0x67c381, 111.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      32 * _0x67c381,
      115.25 * _0x67c381,
      29 * _0x67c381,
      123.25 * _0x67c381,
      22 * _0x67c381,
      133.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      15 * _0x67c381,
      140.25 * _0x67c381,
      7 * _0x67c381,
      137.25 * _0x67c381,
      9 * _0x67c381,
      125.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      12 * _0x67c381,
      114.25 * _0x67c381,
      20 * _0x67c381,
      110.25 * _0x67c381,
      24 * _0x67c381,
      111.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(33 * _0x67c381, 137.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      41 * _0x67c381,
      142.25 * _0x67c381,
      40 * _0x67c381,
      145.25 * _0x67c381,
      35 * _0x67c381,
      147.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      22 * _0x67c381,
      147.25 * _0x67c381,
      18 * _0x67c381,
      144.25 * _0x67c381,
      22 * _0x67c381,
      138.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      26 * _0x67c381,
      133.25 * _0x67c381,
      31 * _0x67c381,
      136.25 * _0x67c381,
      33 * _0x67c381,
      137.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(33 * _0x67c381, 137.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      41 * _0x67c381,
      142.25 * _0x67c381,
      40 * _0x67c381,
      145.25 * _0x67c381,
      35 * _0x67c381,
      147.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      22 * _0x67c381,
      147.25 * _0x67c381,
      18 * _0x67c381,
      144.25 * _0x67c381,
      22 * _0x67c381,
      138.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      26 * _0x67c381,
      133.25 * _0x67c381,
      31 * _0x67c381,
      136.25 * _0x67c381,
      33 * _0x67c381,
      137.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
    _0x4cb0e8.globalAlpha = 0.5;
    _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(36 * _0x67c381, 187.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      25 * _0x67c381,
      198.25 * _0x67c381,
      19 * _0x67c381,
      193.25 * _0x67c381,
      23 * _0x67c381,
      187.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      26 * _0x67c381,
      178.25 * _0x67c381,
      32 * _0x67c381,
      173.25 * _0x67c381,
      38 * _0x67c381,
      175.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      44 * _0x67c381,
      180.25 * _0x67c381,
      39 * _0x67c381,
      186.25 * _0x67c381,
      36 * _0x67c381,
      187.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[0]);
    _0x4cb0e8.globalAlpha = 1;
    _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
    _0x4cb0e8.beginPath();
    _0x4cb0e8.lineCap = "round";
    _0x4cb0e8.lineJoin = "round";
    _0x4cb0e8.moveTo(36 * _0x67c381, 187.25 * _0x67c381);
    _0x4cb0e8.bezierCurveTo(
      25 * _0x67c381,
      198.25 * _0x67c381,
      19 * _0x67c381,
      193.25 * _0x67c381,
      23 * _0x67c381,
      187.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      26 * _0x67c381,
      178.25 * _0x67c381,
      32 * _0x67c381,
      173.25 * _0x67c381,
      38 * _0x67c381,
      175.25 * _0x67c381
    );
    _0x4cb0e8.bezierCurveTo(
      44 * _0x67c381,
      180.25 * _0x67c381,
      39 * _0x67c381,
      186.25 * _0x67c381,
      36 * _0x67c381,
      187.25 * _0x67c381
    );
    _0x4cb0e8.closePath();
    fill_path(_0x4cb0e8, _0x267efc[1]);
  } else {
    if (_0x391ca3 == 1) {
      _0x10baf8.width = 543 * _0x67c381;
      _0x10baf8.height = 470 * _0x67c381;
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        377.1428527832031 * _0x67c381,
        56.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        384.1428527832031 * _0x67c381,
        44.87498474121094 * _0x67c381,
        403.1428527832031 * _0x67c381,
        39.87498474121094 * _0x67c381,
        403.1428527832031 * _0x67c381,
        51.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        402.1428527832031 * _0x67c381,
        59.87498474121094 * _0x67c381,
        396.1428527832031 * _0x67c381,
        61.87498474121094 * _0x67c381,
        389.1428527832031 * _0x67c381,
        64.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        376.1428527832031 * _0x67c381,
        67.87498474121094 * _0x67c381,
        375.1428527832031 * _0x67c381,
        62.87498474121094 * _0x67c381,
        377.1428527832031 * _0x67c381,
        56.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        377.1428527832031 * _0x67c381,
        56.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        384.1428527832031 * _0x67c381,
        44.87498474121094 * _0x67c381,
        403.1428527832031 * _0x67c381,
        39.87498474121094 * _0x67c381,
        403.1428527832031 * _0x67c381,
        51.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        402.1428527832031 * _0x67c381,
        59.87498474121094 * _0x67c381,
        396.1428527832031 * _0x67c381,
        61.87498474121094 * _0x67c381,
        389.1428527832031 * _0x67c381,
        64.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        376.1428527832031 * _0x67c381,
        67.87498474121094 * _0x67c381,
        375.1428527832031 * _0x67c381,
        62.87498474121094 * _0x67c381,
        377.1428527832031 * _0x67c381,
        56.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        349.1428527832031 * _0x67c381,
        44.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        358.1428527832031 * _0x67c381,
        37.303558349609375 * _0x67c381,
        370.1428527832031 * _0x67c381,
        47.303558349609375 * _0x67c381,
        364.1428527832031 * _0x67c381,
        51.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        356.1428527832031 * _0x67c381,
        55.303558349609375 * _0x67c381,
        345.1428527832031 * _0x67c381,
        48.303558349609375 * _0x67c381,
        349.1428527832031 * _0x67c381,
        45.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        349.1428527832031 * _0x67c381,
        44.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        358.1428527832031 * _0x67c381,
        37.303558349609375 * _0x67c381,
        370.1428527832031 * _0x67c381,
        47.303558349609375 * _0x67c381,
        364.1428527832031 * _0x67c381,
        51.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        356.1428527832031 * _0x67c381,
        55.303558349609375 * _0x67c381,
        345.1428527832031 * _0x67c381,
        48.303558349609375 * _0x67c381,
        349.1428527832031 * _0x67c381,
        45.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        480.1428527832031 * _0x67c381,
        152.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        477.1428527832031 * _0x67c381,
        145.30355834960938 * _0x67c381,
        480.1428527832031 * _0x67c381,
        140.30355834960938 * _0x67c381,
        489.1428527832031 * _0x67c381,
        135.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        497.1428527832031 * _0x67c381,
        133.30355834960938 * _0x67c381,
        498.1428527832031 * _0x67c381,
        140.30355834960938 * _0x67c381,
        491.1428527832031 * _0x67c381,
        147.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        485.1428527832031 * _0x67c381,
        155.30355834960938 * _0x67c381,
        482.1428527832031 * _0x67c381,
        156.30355834960938 * _0x67c381,
        480.1428527832031 * _0x67c381,
        152.30355834960938 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        480.1428527832031 * _0x67c381,
        152.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        477.1428527832031 * _0x67c381,
        145.30355834960938 * _0x67c381,
        480.1428527832031 * _0x67c381,
        140.30355834960938 * _0x67c381,
        489.1428527832031 * _0x67c381,
        135.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        497.1428527832031 * _0x67c381,
        133.30355834960938 * _0x67c381,
        498.1428527832031 * _0x67c381,
        140.30355834960938 * _0x67c381,
        491.1428527832031 * _0x67c381,
        147.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        485.1428527832031 * _0x67c381,
        155.30355834960938 * _0x67c381,
        482.1428527832031 * _0x67c381,
        156.30355834960938 * _0x67c381,
        480.1428527832031 * _0x67c381,
        152.30355834960938 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        211.14285278320312 * _0x67c381,
        27.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        223.14285278320312 * _0x67c381,
        21.303558349609375 * _0x67c381,
        234.14285278320312 * _0x67c381,
        34.303558349609375 * _0x67c381,
        232.14285278320312 * _0x67c381,
        42.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        228.14285278320312 * _0x67c381,
        49.303558349609375 * _0x67c381,
        223.14285278320312 * _0x67c381,
        45.303558349609375 * _0x67c381,
        213.14285278320312 * _0x67c381,
        38.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        205.14285278320312 * _0x67c381,
        31.303558349609375 * _0x67c381,
        208.14285278320312 * _0x67c381,
        29.303558349609375 * _0x67c381,
        211.14285278320312 * _0x67c381,
        27.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        211.14285278320312 * _0x67c381,
        27.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        223.14285278320312 * _0x67c381,
        21.303558349609375 * _0x67c381,
        234.14285278320312 * _0x67c381,
        34.303558349609375 * _0x67c381,
        232.14285278320312 * _0x67c381,
        42.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        228.14285278320312 * _0x67c381,
        49.303558349609375 * _0x67c381,
        223.14285278320312 * _0x67c381,
        45.303558349609375 * _0x67c381,
        213.14285278320312 * _0x67c381,
        38.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        205.14285278320312 * _0x67c381,
        31.303558349609375 * _0x67c381,
        208.14285278320312 * _0x67c381,
        29.303558349609375 * _0x67c381,
        211.14285278320312 * _0x67c381,
        27.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        364.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        354.1428527832031 * _0x67c381,
        72.30355834960938 * _0x67c381,
        356.1428527832031 * _0x67c381,
        64.30355834960938 * _0x67c381,
        359.1428527832031 * _0x67c381,
        59.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        365.1428527832031 * _0x67c381,
        55.303558349609375 * _0x67c381,
        366.1428527832031 * _0x67c381,
        61.303558349609375 * _0x67c381,
        366.1428527832031 * _0x67c381,
        69.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        365.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381,
        365.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381,
        364.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        364.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        354.1428527832031 * _0x67c381,
        72.30355834960938 * _0x67c381,
        356.1428527832031 * _0x67c381,
        64.30355834960938 * _0x67c381,
        359.1428527832031 * _0x67c381,
        59.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        365.1428527832031 * _0x67c381,
        55.303558349609375 * _0x67c381,
        366.1428527832031 * _0x67c381,
        61.303558349609375 * _0x67c381,
        366.1428527832031 * _0x67c381,
        69.30355834960938 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        365.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381,
        365.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381,
        364.1428527832031 * _0x67c381,
        73.30355834960938 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        182.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        173.14285278320312 * _0x67c381,
        52.303558349609375 * _0x67c381,
        177.14285278320312 * _0x67c381,
        39.303558349609375 * _0x67c381,
        198.14285278320312 * _0x67c381,
        36.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        209.14285278320312 * _0x67c381,
        37.303558349609375 * _0x67c381,
        206.14285278320312 * _0x67c381,
        49.303558349609375 * _0x67c381,
        193.14285278320312 * _0x67c381,
        53.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        187.14285278320312 * _0x67c381,
        56.303558349609375 * _0x67c381,
        185.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381,
        182.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        182.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        173.14285278320312 * _0x67c381,
        52.303558349609375 * _0x67c381,
        177.14285278320312 * _0x67c381,
        39.303558349609375 * _0x67c381,
        198.14285278320312 * _0x67c381,
        36.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        209.14285278320312 * _0x67c381,
        37.303558349609375 * _0x67c381,
        206.14285278320312 * _0x67c381,
        49.303558349609375 * _0x67c381,
        193.14285278320312 * _0x67c381,
        53.303558349609375 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        187.14285278320312 * _0x67c381,
        56.303558349609375 * _0x67c381,
        185.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381,
        182.14285278320312 * _0x67c381,
        57.303558349609375 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        489.1428527832031 * _0x67c381,
        267.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        500.1428527832031 * _0x67c381,
        257.0178527832031 * _0x67c381,
        511.1428527832031 * _0x67c381,
        269.0178527832031 * _0x67c381,
        514.1428527832031 * _0x67c381,
        275.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        519.1428527832031 * _0x67c381,
        285.0178527832031 * _0x67c381,
        509.1428527832031 * _0x67c381,
        288.0178527832031 * _0x67c381,
        501.1428527832031 * _0x67c381,
        282.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        488.1428527832031 * _0x67c381,
        277.0178527832031 * _0x67c381,
        485.1428527832031 * _0x67c381,
        271.0178527832031 * _0x67c381,
        489.1428527832031 * _0x67c381,
        267.0178527832031 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        489.1428527832031 * _0x67c381,
        267.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        500.1428527832031 * _0x67c381,
        257.0178527832031 * _0x67c381,
        511.1428527832031 * _0x67c381,
        269.0178527832031 * _0x67c381,
        514.1428527832031 * _0x67c381,
        275.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        519.1428527832031 * _0x67c381,
        285.0178527832031 * _0x67c381,
        509.1428527832031 * _0x67c381,
        288.0178527832031 * _0x67c381,
        501.1428527832031 * _0x67c381,
        282.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        488.1428527832031 * _0x67c381,
        277.0178527832031 * _0x67c381,
        485.1428527832031 * _0x67c381,
        271.0178527832031 * _0x67c381,
        489.1428527832031 * _0x67c381,
        267.0178527832031 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        480.1428527832031 * _0x67c381,
        122.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        469.1428527832031 * _0x67c381,
        119.73213958740234 * _0x67c381,
        473.1428527832031 * _0x67c381,
        108.73213958740234 * _0x67c381,
        476.1428527832031 * _0x67c381,
        107.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        483.1428527832031 * _0x67c381,
        102.73213958740234 * _0x67c381,
        485.1428527832031 * _0x67c381,
        118.73213958740234 * _0x67c381,
        480.1428527832031 * _0x67c381,
        122.73213958740234 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        480.1428527832031 * _0x67c381,
        122.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        469.1428527832031 * _0x67c381,
        119.73213958740234 * _0x67c381,
        473.1428527832031 * _0x67c381,
        108.73213958740234 * _0x67c381,
        476.1428527832031 * _0x67c381,
        107.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        483.1428527832031 * _0x67c381,
        102.73213958740234 * _0x67c381,
        485.1428527832031 * _0x67c381,
        118.73213958740234 * _0x67c381,
        480.1428527832031 * _0x67c381,
        122.73213958740234 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        470.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        472.1428527832031 * _0x67c381,
        277.3035697937012 * _0x67c381,
        480.1428527832031 * _0x67c381,
        277.3035697937012 * _0x67c381,
        489.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        490.1428527832031 * _0x67c381,
        292.3035697937012 * _0x67c381,
        482.1428527832031 * _0x67c381,
        294.3035697937012 * _0x67c381,
        470.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        470.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        472.1428527832031 * _0x67c381,
        277.3035697937012 * _0x67c381,
        480.1428527832031 * _0x67c381,
        277.3035697937012 * _0x67c381,
        489.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        490.1428527832031 * _0x67c381,
        292.3035697937012 * _0x67c381,
        482.1428527832031 * _0x67c381,
        294.3035697937012 * _0x67c381,
        470.1428527832031 * _0x67c381,
        286.3035697937012 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        518.1428527832031 * _0x67c381,
        265.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        524.1428527832031 * _0x67c381,
        262.0178565979004 * _0x67c381,
        521.1428527832031 * _0x67c381,
        247.0178565979004 * _0x67c381,
        514.1428527832031 * _0x67c381,
        250.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        510.1428527832031 * _0x67c381,
        252.0178565979004 * _0x67c381,
        509.1428527832031 * _0x67c381,
        266.0178565979004 * _0x67c381,
        518.1428527832031 * _0x67c381,
        266.0178565979004 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        518.1428527832031 * _0x67c381,
        265.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        524.1428527832031 * _0x67c381,
        262.0178565979004 * _0x67c381,
        521.1428527832031 * _0x67c381,
        247.0178565979004 * _0x67c381,
        514.1428527832031 * _0x67c381,
        250.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        510.1428527832031 * _0x67c381,
        252.0178565979004 * _0x67c381,
        509.1428527832031 * _0x67c381,
        266.0178565979004 * _0x67c381,
        518.1428527832031 * _0x67c381,
        266.0178565979004 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        179.14285278320312 * _0x67c381,
        399.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        174.14285278320312 * _0x67c381,
        385.5892858505249 * _0x67c381,
        186.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381,
        198.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        208.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381,
        206.14285278320312 * _0x67c381,
        391.5892858505249 * _0x67c381,
        194.14285278320312 * _0x67c381,
        396.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        184.14285278320312 * _0x67c381,
        401.5892858505249 * _0x67c381,
        182.14285278320312 * _0x67c381,
        402.5892858505249 * _0x67c381,
        179.14285278320312 * _0x67c381,
        399.5892858505249 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        179.14285278320312 * _0x67c381,
        399.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        174.14285278320312 * _0x67c381,
        385.5892858505249 * _0x67c381,
        186.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381,
        198.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        208.14285278320312 * _0x67c381,
        379.5892858505249 * _0x67c381,
        206.14285278320312 * _0x67c381,
        391.5892858505249 * _0x67c381,
        194.14285278320312 * _0x67c381,
        396.5892858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        184.14285278320312 * _0x67c381,
        401.5892858505249 * _0x67c381,
        182.14285278320312 * _0x67c381,
        402.5892858505249 * _0x67c381,
        179.14285278320312 * _0x67c381,
        399.5892858505249 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(163.14285278320312 * _0x67c381, 407.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        152.14285278320312 * _0x67c381,
        405.875 * _0x67c381,
        156.14285278320312 * _0x67c381,
        391.875 * _0x67c381,
        163.14285278320312 * _0x67c381,
        385.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        170.14285278320312 * _0x67c381,
        381.875 * _0x67c381,
        173.14285278320312 * _0x67c381,
        385.875 * _0x67c381,
        170.14285278320312 * _0x67c381,
        398.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        169.14285278320312 * _0x67c381,
        403.875 * _0x67c381,
        165.14285278320312 * _0x67c381,
        408.875 * _0x67c381,
        164.14285278320312 * _0x67c381,
        407.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(163.14285278320312 * _0x67c381, 407.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        152.14285278320312 * _0x67c381,
        405.875 * _0x67c381,
        156.14285278320312 * _0x67c381,
        391.875 * _0x67c381,
        163.14285278320312 * _0x67c381,
        385.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        170.14285278320312 * _0x67c381,
        381.875 * _0x67c381,
        173.14285278320312 * _0x67c381,
        385.875 * _0x67c381,
        170.14285278320312 * _0x67c381,
        398.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        169.14285278320312 * _0x67c381,
        403.875 * _0x67c381,
        165.14285278320312 * _0x67c381,
        408.875 * _0x67c381,
        164.14285278320312 * _0x67c381,
        407.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        78.14285278320312 * _0x67c381,
        71.73211669921875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        82.14285278320312 * _0x67c381,
        62.73211669921875 * _0x67c381,
        88.14285278320312 * _0x67c381,
        69.73211669921875 * _0x67c381,
        91.14285278320312 * _0x67c381,
        79.73211669921875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        90.14285278320312 * _0x67c381,
        86.73211669921875 * _0x67c381,
        79.14285278320312 * _0x67c381,
        83.73211669921875 * _0x67c381,
        78.14285278320312 * _0x67c381,
        71.73211669921875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        78.14285278320312 * _0x67c381,
        71.73211669921875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        82.14285278320312 * _0x67c381,
        62.73211669921875 * _0x67c381,
        88.14285278320312 * _0x67c381,
        69.73211669921875 * _0x67c381,
        91.14285278320312 * _0x67c381,
        79.73211669921875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        90.14285278320312 * _0x67c381,
        86.73211669921875 * _0x67c381,
        79.14285278320312 * _0x67c381,
        83.73211669921875 * _0x67c381,
        78.14285278320312 * _0x67c381,
        71.73211669921875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        385.1428527832031 * _0x67c381,
        405.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        392.1428527832031 * _0x67c381,
        397.017858505249 * _0x67c381,
        406.1428527832031 * _0x67c381,
        401.017858505249 * _0x67c381,
        409.1428527832031 * _0x67c381,
        418.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        410.1428527832031 * _0x67c381,
        426.017858505249 * _0x67c381,
        401.1428527832031 * _0x67c381,
        425.017858505249 * _0x67c381,
        388.1428527832031 * _0x67c381,
        418.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        381.1428527832031 * _0x67c381,
        411.017858505249 * _0x67c381,
        383.1428527832031 * _0x67c381,
        407.017858505249 * _0x67c381,
        385.1428527832031 * _0x67c381,
        405.017858505249 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        385.1428527832031 * _0x67c381,
        405.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        392.1428527832031 * _0x67c381,
        397.017858505249 * _0x67c381,
        406.1428527832031 * _0x67c381,
        401.017858505249 * _0x67c381,
        409.1428527832031 * _0x67c381,
        418.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        410.1428527832031 * _0x67c381,
        426.017858505249 * _0x67c381,
        401.1428527832031 * _0x67c381,
        425.017858505249 * _0x67c381,
        388.1428527832031 * _0x67c381,
        418.017858505249 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        381.1428527832031 * _0x67c381,
        411.017858505249 * _0x67c381,
        383.1428527832031 * _0x67c381,
        407.017858505249 * _0x67c381,
        385.1428527832031 * _0x67c381,
        405.017858505249 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        414.1428527832031 * _0x67c381,
        361.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        418.1428527832031 * _0x67c381,
        352.4464282989502 * _0x67c381,
        426.1428527832031 * _0x67c381,
        353.4464282989502 * _0x67c381,
        437.1428527832031 * _0x67c381,
        362.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        441.1428527832031 * _0x67c381,
        366.4464282989502 * _0x67c381,
        439.1428527832031 * _0x67c381,
        373.4464282989502 * _0x67c381,
        428.1428527832031 * _0x67c381,
        372.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        416.1428527832031 * _0x67c381,
        370.4464282989502 * _0x67c381,
        412.1428527832031 * _0x67c381,
        367.4464282989502 * _0x67c381,
        415.1428527832031 * _0x67c381,
        361.4464282989502 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        414.1428527832031 * _0x67c381,
        361.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        418.1428527832031 * _0x67c381,
        352.4464282989502 * _0x67c381,
        426.1428527832031 * _0x67c381,
        353.4464282989502 * _0x67c381,
        437.1428527832031 * _0x67c381,
        362.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        441.1428527832031 * _0x67c381,
        366.4464282989502 * _0x67c381,
        439.1428527832031 * _0x67c381,
        373.4464282989502 * _0x67c381,
        428.1428527832031 * _0x67c381,
        372.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        416.1428527832031 * _0x67c381,
        370.4464282989502 * _0x67c381,
        412.1428527832031 * _0x67c381,
        367.4464282989502 * _0x67c381,
        415.1428527832031 * _0x67c381,
        361.4464282989502 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(453.1428527832031 * _0x67c381, 356.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        458.1428527832031 * _0x67c381,
        363.875 * _0x67c381,
        447.1428527832031 * _0x67c381,
        373.875 * _0x67c381,
        444.1428527832031 * _0x67c381,
        369.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        441.1428527832031 * _0x67c381,
        361.875 * _0x67c381,
        448.1428527832031 * _0x67c381,
        352.875 * _0x67c381,
        453.1428527832031 * _0x67c381,
        356.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(453.1428527832031 * _0x67c381, 356.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        458.1428527832031 * _0x67c381,
        363.875 * _0x67c381,
        447.1428527832031 * _0x67c381,
        373.875 * _0x67c381,
        444.1428527832031 * _0x67c381,
        369.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        441.1428527832031 * _0x67c381,
        361.875 * _0x67c381,
        448.1428527832031 * _0x67c381,
        352.875 * _0x67c381,
        453.1428527832031 * _0x67c381,
        356.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        40.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        52.142852783203125 * _0x67c381,
        224.1607151031494 * _0x67c381,
        44.142852783203125 * _0x67c381,
        251.1607151031494 * _0x67c381,
        36.142852783203125 * _0x67c381,
        248.1607151031494 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        25.142852783203125 * _0x67c381,
        245.1607151031494 * _0x67c381,
        34.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381,
        41.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        40.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        52.142852783203125 * _0x67c381,
        224.1607151031494 * _0x67c381,
        44.142852783203125 * _0x67c381,
        251.1607151031494 * _0x67c381,
        36.142852783203125 * _0x67c381,
        248.1607151031494 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        25.142852783203125 * _0x67c381,
        245.1607151031494 * _0x67c381,
        34.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381,
        41.142852783203125 * _0x67c381,
        225.1607151031494 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        114.14285278320312 * _0x67c381,
        52.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        123.14285278320312 * _0x67c381,
        57.4464111328125 * _0x67c381,
        111.14285278320312 * _0x67c381,
        71.4464111328125 * _0x67c381,
        106.14285278320312 * _0x67c381,
        65.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        101.14285278320312 * _0x67c381,
        58.4464111328125 * _0x67c381,
        111.14285278320312 * _0x67c381,
        51.4464111328125 * _0x67c381,
        114.14285278320312 * _0x67c381,
        52.4464111328125 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        114.14285278320312 * _0x67c381,
        52.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        123.14285278320312 * _0x67c381,
        57.4464111328125 * _0x67c381,
        111.14285278320312 * _0x67c381,
        71.4464111328125 * _0x67c381,
        106.14285278320312 * _0x67c381,
        65.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        101.14285278320312 * _0x67c381,
        58.4464111328125 * _0x67c381,
        111.14285278320312 * _0x67c381,
        51.4464111328125 * _0x67c381,
        114.14285278320312 * _0x67c381,
        52.4464111328125 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        35.142852783203125 * _0x67c381,
        256.3035707473755 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        41.142852783203125 * _0x67c381,
        263.3035707473755 * _0x67c381,
        32.142852783203125 * _0x67c381,
        270.3035707473755 * _0x67c381,
        27.142852783203125 * _0x67c381,
        270.3035707473755 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        20.142852783203125 * _0x67c381,
        267.3035707473755 * _0x67c381,
        29.142852783203125 * _0x67c381,
        252.3035707473755 * _0x67c381,
        35.142852783203125 * _0x67c381,
        255.3035707473755 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        35.142852783203125 * _0x67c381,
        256.3035707473755 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        41.142852783203125 * _0x67c381,
        263.3035707473755 * _0x67c381,
        32.142852783203125 * _0x67c381,
        270.3035707473755 * _0x67c381,
        27.142852783203125 * _0x67c381,
        270.3035707473755 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        20.142852783203125 * _0x67c381,
        267.3035707473755 * _0x67c381,
        29.142852783203125 * _0x67c381,
        252.3035707473755 * _0x67c381,
        35.142852783203125 * _0x67c381,
        255.3035707473755 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        48.142852783203125 * _0x67c381,
        266.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        59.142852783203125 * _0x67c381,
        273.4464282989502 * _0x67c381,
        41.142852783203125 * _0x67c381,
        290.4464282989502 * _0x67c381,
        33.142852783203125 * _0x67c381,
        285.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        25.142852783203125 * _0x67c381,
        277.4464282989502 * _0x67c381,
        44.142852783203125 * _0x67c381,
        261.4464282989502 * _0x67c381,
        48.142852783203125 * _0x67c381,
        266.4464282989502 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        48.142852783203125 * _0x67c381,
        266.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        59.142852783203125 * _0x67c381,
        273.4464282989502 * _0x67c381,
        41.142852783203125 * _0x67c381,
        290.4464282989502 * _0x67c381,
        33.142852783203125 * _0x67c381,
        285.4464282989502 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        25.142852783203125 * _0x67c381,
        277.4464282989502 * _0x67c381,
        44.142852783203125 * _0x67c381,
        261.4464282989502 * _0x67c381,
        48.142852783203125 * _0x67c381,
        266.4464282989502 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        138.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        150.14285278320312 * _0x67c381,
        387.5892868041992 * _0x67c381,
        140.14285278320312 * _0x67c381,
        405.5892868041992 * _0x67c381,
        131.14285278320312 * _0x67c381,
        402.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        125.14285278320312 * _0x67c381,
        397.5892868041992 * _0x67c381,
        134.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381,
        138.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        138.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        150.14285278320312 * _0x67c381,
        387.5892868041992 * _0x67c381,
        140.14285278320312 * _0x67c381,
        405.5892868041992 * _0x67c381,
        131.14285278320312 * _0x67c381,
        402.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        125.14285278320312 * _0x67c381,
        397.5892868041992 * _0x67c381,
        134.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381,
        138.14285278320312 * _0x67c381,
        385.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        218.14285278320312 * _0x67c381,
        394.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        224.14285278320312 * _0x67c381,
        398.16071701049805 * _0x67c381,
        222.14285278320312 * _0x67c381,
        403.16071701049805 * _0x67c381,
        214.14285278320312 * _0x67c381,
        407.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        204.14285278320312 * _0x67c381,
        407.16071701049805 * _0x67c381,
        213.14285278320312 * _0x67c381,
        392.16071701049805 * _0x67c381,
        218.14285278320312 * _0x67c381,
        394.16071701049805 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        218.14285278320312 * _0x67c381,
        394.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        224.14285278320312 * _0x67c381,
        398.16071701049805 * _0x67c381,
        222.14285278320312 * _0x67c381,
        403.16071701049805 * _0x67c381,
        214.14285278320312 * _0x67c381,
        407.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        204.14285278320312 * _0x67c381,
        407.16071701049805 * _0x67c381,
        213.14285278320312 * _0x67c381,
        392.16071701049805 * _0x67c381,
        218.14285278320312 * _0x67c381,
        394.16071701049805 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.translate(50 * _0x67c381, 100 * _0x67c381);
    } else {
      _0x10baf8.width = 543 * _0x67c381;
      _0x10baf8.height = 470 * _0x67c381;
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(97.14285278320312 * _0x67c381, 113.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        104.14285278320312 * _0x67c381,
        106.875 * _0x67c381,
        113.14285278320312 * _0x67c381,
        109.875 * _0x67c381,
        118.14285278320312 * _0x67c381,
        118.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        119.14285278320312 * _0x67c381,
        121.875 * _0x67c381,
        118.14285278320312 * _0x67c381,
        129.875 * _0x67c381,
        103.14285278320312 * _0x67c381,
        124.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        94.14285278320312 * _0x67c381,
        120.875 * _0x67c381,
        95.14285278320312 * _0x67c381,
        117.875 * _0x67c381,
        97.14285278320312 * _0x67c381,
        113.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(97.14285278320312 * _0x67c381, 113.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        104.14285278320312 * _0x67c381,
        106.875 * _0x67c381,
        113.14285278320312 * _0x67c381,
        109.875 * _0x67c381,
        118.14285278320312 * _0x67c381,
        118.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        119.14285278320312 * _0x67c381,
        121.875 * _0x67c381,
        118.14285278320312 * _0x67c381,
        129.875 * _0x67c381,
        103.14285278320312 * _0x67c381,
        124.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        94.14285278320312 * _0x67c381,
        120.875 * _0x67c381,
        95.14285278320312 * _0x67c381,
        117.875 * _0x67c381,
        97.14285278320312 * _0x67c381,
        113.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        88.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        90.14285278320312 * _0x67c381,
        128.87498474121094 * _0x67c381,
        104.14285278320312 * _0x67c381,
        130.87498474121094 * _0x67c381,
        107.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        109.14285278320312 * _0x67c381,
        147.87498474121094 * _0x67c381,
        89.14285278320312 * _0x67c381,
        145.87498474121094 * _0x67c381,
        88.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        88.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        90.14285278320312 * _0x67c381,
        128.87498474121094 * _0x67c381,
        104.14285278320312 * _0x67c381,
        130.87498474121094 * _0x67c381,
        107.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        109.14285278320312 * _0x67c381,
        147.87498474121094 * _0x67c381,
        89.14285278320312 * _0x67c381,
        145.87498474121094 * _0x67c381,
        88.14285278320312 * _0x67c381,
        138.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        194.14285278320312 * _0x67c381,
        44.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        202.14285278320312 * _0x67c381,
        49.87498474121094 * _0x67c381,
        195.14285278320312 * _0x67c381,
        62.87498474121094 * _0x67c381,
        187.14285278320312 * _0x67c381,
        60.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        180.14285278320312 * _0x67c381,
        57.87498474121094 * _0x67c381,
        190.14285278320312 * _0x67c381,
        40.87498474121094 * _0x67c381,
        194.14285278320312 * _0x67c381,
        44.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        194.14285278320312 * _0x67c381,
        44.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        202.14285278320312 * _0x67c381,
        49.87498474121094 * _0x67c381,
        195.14285278320312 * _0x67c381,
        62.87498474121094 * _0x67c381,
        187.14285278320312 * _0x67c381,
        60.87498474121094 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        180.14285278320312 * _0x67c381,
        57.87498474121094 * _0x67c381,
        190.14285278320312 * _0x67c381,
        40.87498474121094 * _0x67c381,
        194.14285278320312 * _0x67c381,
        44.87498474121094 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        22.142852783203125 * _0x67c381,
        218.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        31.142852783203125 * _0x67c381,
        205.44642639160156 * _0x67c381,
        49.142852783203125 * _0x67c381,
        221.44642639160156 * _0x67c381,
        49.142852783203125 * _0x67c381,
        230.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        44.142852783203125 * _0x67c381,
        243.44642639160156 * _0x67c381,
        14.142852783203125 * _0x67c381,
        228.44642639160156 * _0x67c381,
        22.142852783203125 * _0x67c381,
        218.44642639160156 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        22.142852783203125 * _0x67c381,
        218.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        31.142852783203125 * _0x67c381,
        205.44642639160156 * _0x67c381,
        49.142852783203125 * _0x67c381,
        221.44642639160156 * _0x67c381,
        49.142852783203125 * _0x67c381,
        230.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        44.142852783203125 * _0x67c381,
        243.44642639160156 * _0x67c381,
        14.142852783203125 * _0x67c381,
        228.44642639160156 * _0x67c381,
        22.142852783203125 * _0x67c381,
        218.44642639160156 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(41.142852783203125 * _0x67c381, 249.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        33.142852783203125 * _0x67c381,
        255.875 * _0x67c381,
        30.142852783203125 * _0x67c381,
        265.875 * _0x67c381,
        40.142852783203125 * _0x67c381,
        266.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        49.142852783203125 * _0x67c381,
        261.875 * _0x67c381,
        53.142852783203125 * _0x67c381,
        244.875 * _0x67c381,
        41.142852783203125 * _0x67c381,
        249.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(41.142852783203125 * _0x67c381, 249.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        33.142852783203125 * _0x67c381,
        255.875 * _0x67c381,
        30.142852783203125 * _0x67c381,
        265.875 * _0x67c381,
        40.142852783203125 * _0x67c381,
        266.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        49.142852783203125 * _0x67c381,
        261.875 * _0x67c381,
        53.142852783203125 * _0x67c381,
        244.875 * _0x67c381,
        41.142852783203125 * _0x67c381,
        249.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(105.14285278320312 * _0x67c381, 369.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        92.14285278320312 * _0x67c381,
        361.875 * _0x67c381,
        77.14285278320312 * _0x67c381,
        375.875 * _0x67c381,
        79.14285278320312 * _0x67c381,
        384.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        84.14285278320312 * _0x67c381,
        399.875 * _0x67c381,
        114.14285278320312 * _0x67c381,
        375.875 * _0x67c381,
        104.14285278320312 * _0x67c381,
        369.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(105.14285278320312 * _0x67c381, 369.875 * _0x67c381);
      _0x4cb0e8.bezierCurveTo(
        92.14285278320312 * _0x67c381,
        361.875 * _0x67c381,
        77.14285278320312 * _0x67c381,
        375.875 * _0x67c381,
        79.14285278320312 * _0x67c381,
        384.875 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        84.14285278320312 * _0x67c381,
        399.875 * _0x67c381,
        114.14285278320312 * _0x67c381,
        375.875 * _0x67c381,
        104.14285278320312 * _0x67c381,
        369.875 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        233.14285278320312 * _0x67c381,
        43.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        238.14285278320312 * _0x67c381,
        47.4464111328125 * _0x67c381,
        222.14285278320312 * _0x67c381,
        73.4464111328125 * _0x67c381,
        214.14285278320312 * _0x67c381,
        58.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        211.14285278320312 * _0x67c381,
        48.4464111328125 * _0x67c381,
        230.14285278320312 * _0x67c381,
        35.4464111328125 * _0x67c381,
        233.14285278320312 * _0x67c381,
        42.4464111328125 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        233.14285278320312 * _0x67c381,
        43.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        238.14285278320312 * _0x67c381,
        47.4464111328125 * _0x67c381,
        222.14285278320312 * _0x67c381,
        73.4464111328125 * _0x67c381,
        214.14285278320312 * _0x67c381,
        58.4464111328125 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        211.14285278320312 * _0x67c381,
        48.4464111328125 * _0x67c381,
        230.14285278320312 * _0x67c381,
        35.4464111328125 * _0x67c381,
        233.14285278320312 * _0x67c381,
        42.4464111328125 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        371.1428527832031 * _0x67c381,
        34.73213195800781 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        378.1428527832031 * _0x67c381,
        20.732131958007812 * _0x67c381,
        395.1428527832031 * _0x67c381,
        32.73213195800781 * _0x67c381,
        396.1428527832031 * _0x67c381,
        42.73213195800781 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        399.1428527832031 * _0x67c381,
        59.73213195800781 * _0x67c381,
        369.1428527832031 * _0x67c381,
        43.73213195800781 * _0x67c381,
        372.1428527832031 * _0x67c381,
        34.73213195800781 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        371.1428527832031 * _0x67c381,
        34.73213195800781 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        378.1428527832031 * _0x67c381,
        20.732131958007812 * _0x67c381,
        395.1428527832031 * _0x67c381,
        32.73213195800781 * _0x67c381,
        396.1428527832031 * _0x67c381,
        42.73213195800781 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        399.1428527832031 * _0x67c381,
        59.73213195800781 * _0x67c381,
        369.1428527832031 * _0x67c381,
        43.73213195800781 * _0x67c381,
        372.1428527832031 * _0x67c381,
        34.73213195800781 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        117.14285278320312 * _0x67c381,
        392.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        115.14285278320312 * _0x67c381,
        384.5892868041992 * _0x67c381,
        109.14285278320312 * _0x67c381,
        383.5892868041992 * _0x67c381,
        103.14285278320312 * _0x67c381,
        384.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        95.14285278320312 * _0x67c381,
        389.5892868041992 * _0x67c381,
        97.14285278320312 * _0x67c381,
        393.5892868041992 * _0x67c381,
        107.14285278320312 * _0x67c381,
        396.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        114.14285278320312 * _0x67c381,
        396.5892868041992 * _0x67c381,
        118.14285278320312 * _0x67c381,
        393.5892868041992 * _0x67c381,
        116.14285278320312 * _0x67c381,
        391.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        117.14285278320312 * _0x67c381,
        392.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        115.14285278320312 * _0x67c381,
        384.5892868041992 * _0x67c381,
        109.14285278320312 * _0x67c381,
        383.5892868041992 * _0x67c381,
        103.14285278320312 * _0x67c381,
        384.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        95.14285278320312 * _0x67c381,
        389.5892868041992 * _0x67c381,
        97.14285278320312 * _0x67c381,
        393.5892868041992 * _0x67c381,
        107.14285278320312 * _0x67c381,
        396.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        114.14285278320312 * _0x67c381,
        396.5892868041992 * _0x67c381,
        118.14285278320312 * _0x67c381,
        393.5892868041992 * _0x67c381,
        116.14285278320312 * _0x67c381,
        391.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        122.14285278320312 * _0x67c381,
        403.7321472167969 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        132.14285278320312 * _0x67c381,
        399.7321472167969 * _0x67c381,
        133.14285278320312 * _0x67c381,
        418.7321472167969 * _0x67c381,
        129.14285278320312 * _0x67c381,
        419.7321472167969 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        119.14285278320312 * _0x67c381,
        420.7321472167969 * _0x67c381,
        118.14285278320312 * _0x67c381,
        402.7321472167969 * _0x67c381,
        123.14285278320312 * _0x67c381,
        403.7321472167969 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        122.14285278320312 * _0x67c381,
        403.7321472167969 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        132.14285278320312 * _0x67c381,
        399.7321472167969 * _0x67c381,
        133.14285278320312 * _0x67c381,
        418.7321472167969 * _0x67c381,
        129.14285278320312 * _0x67c381,
        419.7321472167969 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        119.14285278320312 * _0x67c381,
        420.7321472167969 * _0x67c381,
        118.14285278320312 * _0x67c381,
        402.7321472167969 * _0x67c381,
        123.14285278320312 * _0x67c381,
        403.7321472167969 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        317.1428527832031 * _0x67c381,
        417.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        333.1428527832031 * _0x67c381,
        421.5892868041992 * _0x67c381,
        299.1428527832031 * _0x67c381,
        455.5892868041992 * _0x67c381,
        294.1428527832031 * _0x67c381,
        438.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        289.1428527832031 * _0x67c381,
        423.5892868041992 * _0x67c381,
        307.1428527832031 * _0x67c381,
        414.5892868041992 * _0x67c381,
        317.1428527832031 * _0x67c381,
        417.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        317.1428527832031 * _0x67c381,
        417.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        333.1428527832031 * _0x67c381,
        421.5892868041992 * _0x67c381,
        299.1428527832031 * _0x67c381,
        455.5892868041992 * _0x67c381,
        294.1428527832031 * _0x67c381,
        438.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        289.1428527832031 * _0x67c381,
        423.5892868041992 * _0x67c381,
        307.1428527832031 * _0x67c381,
        414.5892868041992 * _0x67c381,
        317.1428527832031 * _0x67c381,
        417.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        322.1428527832031 * _0x67c381,
        437.30357360839844 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        330.1428527832031 * _0x67c381,
        431.30357360839844 * _0x67c381,
        336.1428527832031 * _0x67c381,
        440.30357360839844 * _0x67c381,
        336.1428527832031 * _0x67c381,
        448.30357360839844 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        334.1428527832031 * _0x67c381,
        454.30357360839844 * _0x67c381,
        316.1428527832031 * _0x67c381,
        447.30357360839844 * _0x67c381,
        323.1428527832031 * _0x67c381,
        437.30357360839844 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        322.1428527832031 * _0x67c381,
        437.30357360839844 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        330.1428527832031 * _0x67c381,
        431.30357360839844 * _0x67c381,
        336.1428527832031 * _0x67c381,
        440.30357360839844 * _0x67c381,
        336.1428527832031 * _0x67c381,
        448.30357360839844 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        334.1428527832031 * _0x67c381,
        454.30357360839844 * _0x67c381,
        316.1428527832031 * _0x67c381,
        447.30357360839844 * _0x67c381,
        323.1428527832031 * _0x67c381,
        437.30357360839844 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        438.1428527832031 * _0x67c381,
        358.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        455.1428527832031 * _0x67c381,
        351.5892868041992 * _0x67c381,
        467.1428527832031 * _0x67c381,
        371.5892868041992 * _0x67c381,
        455.1428527832031 * _0x67c381,
        374.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        442.1428527832031 * _0x67c381,
        377.5892868041992 * _0x67c381,
        429.1428527832031 * _0x67c381,
        361.5892868041992 * _0x67c381,
        438.1428527832031 * _0x67c381,
        358.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        438.1428527832031 * _0x67c381,
        358.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        455.1428527832031 * _0x67c381,
        351.5892868041992 * _0x67c381,
        467.1428527832031 * _0x67c381,
        371.5892868041992 * _0x67c381,
        455.1428527832031 * _0x67c381,
        374.5892868041992 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        442.1428527832031 * _0x67c381,
        377.5892868041992 * _0x67c381,
        429.1428527832031 * _0x67c381,
        361.5892868041992 * _0x67c381,
        438.1428527832031 * _0x67c381,
        358.5892868041992 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        423.1428527832031 * _0x67c381,
        363.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        433.1428527832031 * _0x67c381,
        362.16071701049805 * _0x67c381,
        433.1428527832031 * _0x67c381,
        374.16071701049805 * _0x67c381,
        421.1428527832031 * _0x67c381,
        382.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        413.1428527832031 * _0x67c381,
        383.16071701049805 * _0x67c381,
        413.1428527832031 * _0x67c381,
        368.16071701049805 * _0x67c381,
        423.1428527832031 * _0x67c381,
        363.16071701049805 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        423.1428527832031 * _0x67c381,
        363.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        433.1428527832031 * _0x67c381,
        362.16071701049805 * _0x67c381,
        433.1428527832031 * _0x67c381,
        374.16071701049805 * _0x67c381,
        421.1428527832031 * _0x67c381,
        382.16071701049805 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        413.1428527832031 * _0x67c381,
        383.16071701049805 * _0x67c381,
        413.1428527832031 * _0x67c381,
        368.16071701049805 * _0x67c381,
        423.1428527832031 * _0x67c381,
        363.16071701049805 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        431.1428527832031 * _0x67c381,
        333.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        447.1428527832031 * _0x67c381,
        330.0178565979004 * _0x67c381,
        448.1428527832031 * _0x67c381,
        340.0178565979004 * _0x67c381,
        447.1428527832031 * _0x67c381,
        343.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        445.1428527832031 * _0x67c381,
        351.0178565979004 * _0x67c381,
        415.1428527832031 * _0x67c381,
        343.0178565979004 * _0x67c381,
        431.1428527832031 * _0x67c381,
        333.0178565979004 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        431.1428527832031 * _0x67c381,
        333.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        447.1428527832031 * _0x67c381,
        330.0178565979004 * _0x67c381,
        448.1428527832031 * _0x67c381,
        340.0178565979004 * _0x67c381,
        447.1428527832031 * _0x67c381,
        343.0178565979004 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        445.1428527832031 * _0x67c381,
        351.0178565979004 * _0x67c381,
        415.1428527832031 * _0x67c381,
        343.0178565979004 * _0x67c381,
        431.1428527832031 * _0x67c381,
        333.0178565979004 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        486.1428527832031 * _0x67c381,
        272.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        493.1428527832031 * _0x67c381,
        260.44642639160156 * _0x67c381,
        519.1428527832031 * _0x67c381,
        277.44642639160156 * _0x67c381,
        511.1428527832031 * _0x67c381,
        289.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        503.1428527832031 * _0x67c381,
        297.44642639160156 * _0x67c381,
        483.1428527832031 * _0x67c381,
        277.44642639160156 * _0x67c381,
        486.1428527832031 * _0x67c381,
        273.44642639160156 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        486.1428527832031 * _0x67c381,
        272.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        493.1428527832031 * _0x67c381,
        260.44642639160156 * _0x67c381,
        519.1428527832031 * _0x67c381,
        277.44642639160156 * _0x67c381,
        511.1428527832031 * _0x67c381,
        289.44642639160156 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        503.1428527832031 * _0x67c381,
        297.44642639160156 * _0x67c381,
        483.1428527832031 * _0x67c381,
        277.44642639160156 * _0x67c381,
        486.1428527832031 * _0x67c381,
        273.44642639160156 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        503.1428527832031 * _0x67c381,
        245.01785278320312 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        516.1428527832031 * _0x67c381,
        247.01785278320312 * _0x67c381,
        513.1428527832031 * _0x67c381,
        264.0178527832031 * _0x67c381,
        509.1428527832031 * _0x67c381,
        265.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        499.1428527832031 * _0x67c381,
        268.0178527832031 * _0x67c381,
        494.1428527832031 * _0x67c381,
        244.01785278320312 * _0x67c381,
        504.1428527832031 * _0x67c381,
        245.01785278320312 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        503.1428527832031 * _0x67c381,
        245.01785278320312 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        516.1428527832031 * _0x67c381,
        247.01785278320312 * _0x67c381,
        513.1428527832031 * _0x67c381,
        264.0178527832031 * _0x67c381,
        509.1428527832031 * _0x67c381,
        265.0178527832031 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        499.1428527832031 * _0x67c381,
        268.0178527832031 * _0x67c381,
        494.1428527832031 * _0x67c381,
        244.01785278320312 * _0x67c381,
        504.1428527832031 * _0x67c381,
        245.01785278320312 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        518.1428527832031 * _0x67c381,
        179.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        529.1428527832031 * _0x67c381,
        181.73213958740234 * _0x67c381,
        514.1428527832031 * _0x67c381,
        212.73213958740234 * _0x67c381,
        505.1428527832031 * _0x67c381,
        200.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        499.1428527832031 * _0x67c381,
        186.73213958740234 * _0x67c381,
        515.1428527832031 * _0x67c381,
        177.73213958740234 * _0x67c381,
        518.1428527832031 * _0x67c381,
        179.73213958740234 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        518.1428527832031 * _0x67c381,
        179.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        529.1428527832031 * _0x67c381,
        181.73213958740234 * _0x67c381,
        514.1428527832031 * _0x67c381,
        212.73213958740234 * _0x67c381,
        505.1428527832031 * _0x67c381,
        200.73213958740234 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        499.1428527832031 * _0x67c381,
        186.73213958740234 * _0x67c381,
        515.1428527832031 * _0x67c381,
        177.73213958740234 * _0x67c381,
        518.1428527832031 * _0x67c381,
        179.73213958740234 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        438.1428527832031 * _0x67c381,
        22.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        446.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        422.1428527832031 * _0x67c381,
        54.16070556640625 * _0x67c381,
        414.1428527832031 * _0x67c381,
        40.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        409.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        430.1428527832031 * _0x67c381,
        15.16070556640625 * _0x67c381,
        438.1428527832031 * _0x67c381,
        22.16070556640625 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        438.1428527832031 * _0x67c381,
        22.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        446.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        422.1428527832031 * _0x67c381,
        54.16070556640625 * _0x67c381,
        414.1428527832031 * _0x67c381,
        40.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        409.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        430.1428527832031 * _0x67c381,
        15.16070556640625 * _0x67c381,
        438.1428527832031 * _0x67c381,
        22.16070556640625 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.globalAlpha = 0.5;
      _0x4cb0e8.translate(3 * _0x67c381, 3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        406.1428527832031 * _0x67c381,
        11.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        418.1428527832031 * _0x67c381,
        14.16070556640625 * _0x67c381,
        411.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        403.1428527832031 * _0x67c381,
        30.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        395.1428527832031 * _0x67c381,
        31.16070556640625 * _0x67c381,
        391.1428527832031 * _0x67c381,
        16.16070556640625 * _0x67c381,
        406.1428527832031 * _0x67c381,
        10.16070556640625 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[0]);
      _0x4cb0e8.globalAlpha = 1;
      _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
      _0x4cb0e8.beginPath();
      _0x4cb0e8.lineCap = "round";
      _0x4cb0e8.lineJoin = "round";
      _0x4cb0e8.moveTo(
        406.1428527832031 * _0x67c381,
        11.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        418.1428527832031 * _0x67c381,
        14.16070556640625 * _0x67c381,
        411.1428527832031 * _0x67c381,
        27.16070556640625 * _0x67c381,
        403.1428527832031 * _0x67c381,
        30.16070556640625 * _0x67c381
      );
      _0x4cb0e8.bezierCurveTo(
        395.1428527832031 * _0x67c381,
        31.16070556640625 * _0x67c381,
        391.1428527832031 * _0x67c381,
        16.16070556640625 * _0x67c381,
        406.1428527832031 * _0x67c381,
        10.16070556640625 * _0x67c381
      );
      _0x4cb0e8.closePath();
      fill_path(_0x4cb0e8, _0x267efc[1]);
      _0x4cb0e8.translate(100 * _0x67c381, 100 * _0x67c381);
    }
  }
  _0x4cb0e8.globalAlpha = 1;
  _0x4cb0e8.translate(-3 * _0x67c381, -3 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(271 * _0x67c381, 111 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    259 * _0x67c381,
    110 * _0x67c381,
    258 * _0x67c381,
    99 * _0x67c381,
    265 * _0x67c381,
    95 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    276 * _0x67c381,
    91 * _0x67c381,
    279 * _0x67c381,
    100 * _0x67c381,
    275 * _0x67c381,
    107 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    274 * _0x67c381,
    109 * _0x67c381,
    273 * _0x67c381,
    110 * _0x67c381,
    271 * _0x67c381,
    111 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[2], _0x267efc[3], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(169 * _0x67c381, 121 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    159 * _0x67c381,
    129 * _0x67c381,
    149 * _0x67c381,
    126 * _0x67c381,
    144 * _0x67c381,
    114 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    142 * _0x67c381,
    102 * _0x67c381,
    149 * _0x67c381,
    98 * _0x67c381,
    163 * _0x67c381,
    96 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    175 * _0x67c381,
    98 * _0x67c381,
    176 * _0x67c381,
    115 * _0x67c381,
    169 * _0x67c381,
    121 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[2], _0x267efc[3], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(213 * _0x67c381, 150 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    206 * _0x67c381,
    134 * _0x67c381,
    216 * _0x67c381,
    120 * _0x67c381,
    235 * _0x67c381,
    129 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    247 * _0x67c381,
    139 * _0x67c381,
    242 * _0x67c381,
    146 * _0x67c381,
    237 * _0x67c381,
    154 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    226 * _0x67c381,
    162 * _0x67c381,
    218 * _0x67c381,
    159 * _0x67c381,
    213 * _0x67c381,
    150 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[2], _0x267efc[3], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(236 * _0x67c381, 169 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    247 * _0x67c381,
    166 * _0x67c381,
    250 * _0x67c381,
    172 * _0x67c381,
    247 * _0x67c381,
    181 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    242 * _0x67c381,
    186 * _0x67c381,
    241 * _0x67c381,
    181 * _0x67c381,
    242 * _0x67c381,
    182 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    241 * _0x67c381,
    178 * _0x67c381,
    240 * _0x67c381,
    179 * _0x67c381,
    239 * _0x67c381,
    181 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    240 * _0x67c381,
    184 * _0x67c381,
    237 * _0x67c381,
    186 * _0x67c381,
    233 * _0x67c381,
    181 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    230 * _0x67c381,
    173 * _0x67c381,
    233 * _0x67c381,
    169 * _0x67c381,
    236 * _0x67c381,
    169 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[2], _0x267efc[3], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(163 * _0x67c381, 170 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    176 * _0x67c381,
    165 * _0x67c381,
    180 * _0x67c381,
    172 * _0x67c381,
    181 * _0x67c381,
    181 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    182 * _0x67c381,
    189 * _0x67c381,
    178 * _0x67c381,
    192 * _0x67c381,
    174 * _0x67c381,
    188 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    172 * _0x67c381,
    183 * _0x67c381,
    170 * _0x67c381,
    184 * _0x67c381,
    170 * _0x67c381,
    188 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    176 * _0x67c381,
    194 * _0x67c381,
    165 * _0x67c381,
    196 * _0x67c381,
    162 * _0x67c381,
    190 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    152 * _0x67c381,
    181 * _0x67c381,
    157 * _0x67c381,
    173 * _0x67c381,
    163 * _0x67c381,
    170 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[2], _0x267efc[3], 2 * _0x67c381);
  _0x4cb0e8.scale(0.05, 0.05);
  _0x4cb0e8.translate(5000 * _0x67c381, 1900 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 46.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    353 * _0x67c381,
    131.546875 * _0x67c381,
    303 * _0x67c381,
    213.546875 * _0x67c381,
    272 * _0x67c381,
    236.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    203 * _0x67c381,
    179.546875 * _0x67c381,
    236 * _0x67c381,
    84.546875 * _0x67c381,
    273 * _0x67c381,
    47.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(467 * _0x67c381, 257.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    369 * _0x67c381,
    194.546875 * _0x67c381,
    325 * _0x67c381,
    236.546875 * _0x67c381,
    291 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    371 * _0x67c381,
    335.546875 * _0x67c381,
    427 * _0x67c381,
    313.546875 * _0x67c381,
    467 * _0x67c381,
    258.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(269 * _0x67c381, 275.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    343 * _0x67c381,
    356.546875 * _0x67c381,
    355 * _0x67c381,
    407.546875 * _0x67c381,
    323 * _0x67c381,
    472.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    224 * _0x67c381,
    451.546875 * _0x67c381,
    238 * _0x67c381,
    326.546875 * _0x67c381,
    270 * _0x67c381,
    275.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(260 * _0x67c381, 267.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    134 * _0x67c381,
    221.546875 * _0x67c381,
    89 * _0x67c381,
    256.546875 * _0x67c381,
    60 * _0x67c381,
    295.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    116 * _0x67c381,
    357.546875 * _0x67c381,
    242 * _0x67c381,
    344.546875 * _0x67c381,
    260 * _0x67c381,
    267.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(124 * _0x67c381, 123.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    255 * _0x67c381,
    140.546875 * _0x67c381,
    265 * _0x67c381,
    234.546875 * _0x67c381,
    267 * _0x67c381,
    269.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    159 * _0x67c381,
    283.546875 * _0x67c381,
    127 * _0x67c381,
    192.546875 * _0x67c381,
    124 * _0x67c381,
    124.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(267 * _0x67c381, 268.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    265 * _0x67c381,
    170.546875 * _0x67c381,
    364 * _0x67c381,
    127.546875 * _0x67c381,
    407 * _0x67c381,
    132.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    427 * _0x67c381,
    204.546875 * _0x67c381,
    341 * _0x67c381,
    277.546875 * _0x67c381,
    268 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(270 * _0x67c381, 269.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    370 * _0x67c381,
    251.546875 * _0x67c381,
    410 * _0x67c381,
    328.546875 * _0x67c381,
    420 * _0x67c381,
    399.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    292 * _0x67c381,
    412.546875 * _0x67c381,
    275 * _0x67c381,
    313.546875 * _0x67c381,
    269 * _0x67c381,
    272.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 266.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    291 * _0x67c381,
    370.546875 * _0x67c381,
    235 * _0x67c381,
    428.546875 * _0x67c381,
    173 * _0x67c381,
    451.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    124 * _0x67c381,
    365.546875 * _0x67c381,
    217 * _0x67c381,
    274.546875 * _0x67c381,
    272 * _0x67c381,
    265.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    266 * _0x67c381,
    251.546875 * _0x67c381,
    19.1049731745428 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    292 * _0x67c381,
    274.546875 * _0x67c381,
    15.556349186104045 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    258 * _0x67c381,
    291.546875 * _0x67c381,
    17.029386365926403 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  _0x4cb0e8.scale(1.4, 1.4);
  _0x4cb0e8.translate(-700 * _0x67c381, 280 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 46.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    353 * _0x67c381,
    131.546875 * _0x67c381,
    303 * _0x67c381,
    213.546875 * _0x67c381,
    272 * _0x67c381,
    236.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    203 * _0x67c381,
    179.546875 * _0x67c381,
    236 * _0x67c381,
    84.546875 * _0x67c381,
    273 * _0x67c381,
    47.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(467 * _0x67c381, 257.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    369 * _0x67c381,
    194.546875 * _0x67c381,
    325 * _0x67c381,
    236.546875 * _0x67c381,
    291 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    371 * _0x67c381,
    335.546875 * _0x67c381,
    427 * _0x67c381,
    313.546875 * _0x67c381,
    467 * _0x67c381,
    258.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(269 * _0x67c381, 275.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    343 * _0x67c381,
    356.546875 * _0x67c381,
    355 * _0x67c381,
    407.546875 * _0x67c381,
    323 * _0x67c381,
    472.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    224 * _0x67c381,
    451.546875 * _0x67c381,
    238 * _0x67c381,
    326.546875 * _0x67c381,
    270 * _0x67c381,
    275.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(260 * _0x67c381, 267.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    134 * _0x67c381,
    221.546875 * _0x67c381,
    89 * _0x67c381,
    256.546875 * _0x67c381,
    60 * _0x67c381,
    295.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    116 * _0x67c381,
    357.546875 * _0x67c381,
    242 * _0x67c381,
    344.546875 * _0x67c381,
    260 * _0x67c381,
    267.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(124 * _0x67c381, 123.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    255 * _0x67c381,
    140.546875 * _0x67c381,
    265 * _0x67c381,
    234.546875 * _0x67c381,
    267 * _0x67c381,
    269.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    159 * _0x67c381,
    283.546875 * _0x67c381,
    127 * _0x67c381,
    192.546875 * _0x67c381,
    124 * _0x67c381,
    124.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(267 * _0x67c381, 268.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    265 * _0x67c381,
    170.546875 * _0x67c381,
    364 * _0x67c381,
    127.546875 * _0x67c381,
    407 * _0x67c381,
    132.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    427 * _0x67c381,
    204.546875 * _0x67c381,
    341 * _0x67c381,
    277.546875 * _0x67c381,
    268 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(270 * _0x67c381, 269.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    370 * _0x67c381,
    251.546875 * _0x67c381,
    410 * _0x67c381,
    328.546875 * _0x67c381,
    420 * _0x67c381,
    399.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    292 * _0x67c381,
    412.546875 * _0x67c381,
    275 * _0x67c381,
    313.546875 * _0x67c381,
    269 * _0x67c381,
    272.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 266.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    291 * _0x67c381,
    370.546875 * _0x67c381,
    235 * _0x67c381,
    428.546875 * _0x67c381,
    173 * _0x67c381,
    451.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    124 * _0x67c381,
    365.546875 * _0x67c381,
    217 * _0x67c381,
    274.546875 * _0x67c381,
    272 * _0x67c381,
    265.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    266 * _0x67c381,
    251.546875 * _0x67c381,
    19.1049731745428 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    292 * _0x67c381,
    274.546875 * _0x67c381,
    15.556349186104045 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    258 * _0x67c381,
    291.546875 * _0x67c381,
    17.029386365926403 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  _0x4cb0e8.translate(-900 * _0x67c381, -200 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 46.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    353 * _0x67c381,
    131.546875 * _0x67c381,
    303 * _0x67c381,
    213.546875 * _0x67c381,
    272 * _0x67c381,
    236.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    203 * _0x67c381,
    179.546875 * _0x67c381,
    236 * _0x67c381,
    84.546875 * _0x67c381,
    273 * _0x67c381,
    47.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(467 * _0x67c381, 257.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    369 * _0x67c381,
    194.546875 * _0x67c381,
    325 * _0x67c381,
    236.546875 * _0x67c381,
    291 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    371 * _0x67c381,
    335.546875 * _0x67c381,
    427 * _0x67c381,
    313.546875 * _0x67c381,
    467 * _0x67c381,
    258.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(269 * _0x67c381, 275.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    343 * _0x67c381,
    356.546875 * _0x67c381,
    355 * _0x67c381,
    407.546875 * _0x67c381,
    323 * _0x67c381,
    472.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    224 * _0x67c381,
    451.546875 * _0x67c381,
    238 * _0x67c381,
    326.546875 * _0x67c381,
    270 * _0x67c381,
    275.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(260 * _0x67c381, 267.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    134 * _0x67c381,
    221.546875 * _0x67c381,
    89 * _0x67c381,
    256.546875 * _0x67c381,
    60 * _0x67c381,
    295.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    116 * _0x67c381,
    357.546875 * _0x67c381,
    242 * _0x67c381,
    344.546875 * _0x67c381,
    260 * _0x67c381,
    267.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[4], _0x267efc[5], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(124 * _0x67c381, 123.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    255 * _0x67c381,
    140.546875 * _0x67c381,
    265 * _0x67c381,
    234.546875 * _0x67c381,
    267 * _0x67c381,
    269.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    159 * _0x67c381,
    283.546875 * _0x67c381,
    127 * _0x67c381,
    192.546875 * _0x67c381,
    124 * _0x67c381,
    124.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(267 * _0x67c381, 268.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    265 * _0x67c381,
    170.546875 * _0x67c381,
    364 * _0x67c381,
    127.546875 * _0x67c381,
    407 * _0x67c381,
    132.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    427 * _0x67c381,
    204.546875 * _0x67c381,
    341 * _0x67c381,
    277.546875 * _0x67c381,
    268 * _0x67c381,
    271.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(270 * _0x67c381, 269.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    370 * _0x67c381,
    251.546875 * _0x67c381,
    410 * _0x67c381,
    328.546875 * _0x67c381,
    420 * _0x67c381,
    399.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    292 * _0x67c381,
    412.546875 * _0x67c381,
    275 * _0x67c381,
    313.546875 * _0x67c381,
    269 * _0x67c381,
    272.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  _0x4cb0e8.beginPath();
  _0x4cb0e8.lineCap = "round";
  _0x4cb0e8.lineJoin = "round";
  _0x4cb0e8.moveTo(273 * _0x67c381, 266.546875 * _0x67c381);
  _0x4cb0e8.bezierCurveTo(
    291 * _0x67c381,
    370.546875 * _0x67c381,
    235 * _0x67c381,
    428.546875 * _0x67c381,
    173 * _0x67c381,
    451.546875 * _0x67c381
  );
  _0x4cb0e8.bezierCurveTo(
    124 * _0x67c381,
    365.546875 * _0x67c381,
    217 * _0x67c381,
    274.546875 * _0x67c381,
    272 * _0x67c381,
    265.546875 * _0x67c381
  );
  _0x4cb0e8.closePath();
  fill_path(_0x4cb0e8, _0x267efc[6], _0x267efc[7], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    266 * _0x67c381,
    251.546875 * _0x67c381,
    19.1049731745428 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    292 * _0x67c381,
    274.546875 * _0x67c381,
    15.556349186104045 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  circle(
    _0x4cb0e8,
    258 * _0x67c381,
    291.546875 * _0x67c381,
    17.029386365926403 * _0x67c381
  );
  fill_path(_0x4cb0e8, _0x267efc[8], _0x267efc[9], 2 * _0x67c381);
  return _0x10baf8;
}
function create_kraken(_0x28613a, _0x5b96e2) {
  var _0x59e3bb = document.createElement("canvas");
  var _0x4d10a0 = _0x59e3bb.getContext("2d");
  _0x59e3bb.width = 376 * _0x28613a;
  _0x59e3bb.height = 371 * _0x28613a;
  _0x4d10a0.globalAlpha = 0.5;
  _0x4d10a0.translate(5 * _0x28613a, 5 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    191.633544921875 * _0x28613a,
    123.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    215.633544921875 * _0x28613a,
    85.98580932617188 * _0x28613a,
    187.633544921875 * _0x28613a,
    71.98580932617188 * _0x28613a,
    202.633544921875 * _0x28613a,
    19.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    231.633544921875 * _0x28613a,
    68.98580932617188 * _0x28613a,
    253.633544921875 * _0x28613a,
    71.98580932617188 * _0x28613a,
    256.633544921875 * _0x28613a,
    93.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    306.633544921875 * _0x28613a,
    64.98580932617188 * _0x28613a,
    319.633544921875 * _0x28613a,
    61.985809326171875 * _0x28613a,
    350.633544921875 * _0x28613a,
    58.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    280.633544921875 * _0x28613a,
    86.98580932617188 * _0x28613a,
    281.633544921875 * _0x28613a,
    106.98580932617188 * _0x28613a,
    268.633544921875 * _0x28613a,
    130.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    295.633544921875 * _0x28613a,
    158.98580932617188 * _0x28613a,
    328.633544921875 * _0x28613a,
    155.98580932617188 * _0x28613a,
    353.633544921875 * _0x28613a,
    90.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    371.633544921875 * _0x28613a,
    158.98580932617188 * _0x28613a,
    337.633544921875 * _0x28613a,
    210.98580932617188 * _0x28613a,
    286.633544921875 * _0x28613a,
    209.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    323.633544921875 * _0x28613a,
    230.98580932617188 * _0x28613a,
    317.633544921875 * _0x28613a,
    274.9858093261719 * _0x28613a,
    356.633544921875 * _0x28613a,
    305.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    288.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a,
    288.633544921875 * _0x28613a,
    265.9858093261719 * _0x28613a,
    275.633544921875 * _0x28613a,
    266.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    280.633544921875 * _0x28613a,
    294.9858093261719 * _0x28613a,
    315.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a,
    336.633544921875 * _0x28613a,
    316.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    295.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    264.633544921875 * _0x28613a,
    302.9858093261719 * _0x28613a,
    254.633544921875 * _0x28613a,
    289.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    252.633544921875 * _0x28613a,
    301.9858093261719 * _0x28613a,
    224.633544921875 * _0x28613a,
    315.9858093261719 * _0x28613a,
    201.633544921875 * _0x28613a,
    356.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.633544921875 * _0x28613a,
    313.9858093261719 * _0x28613a,
    195.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    196.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    197.633544921875 * _0x28613a,
    289.9858093261719 * _0x28613a,
    207.633544921875 * _0x28613a,
    283.9858093261719 * _0x28613a,
    195.633544921875 * _0x28613a,
    258.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    182.633544921875 * _0x28613a,
    282.9858093261719 * _0x28613a,
    190.633544921875 * _0x28613a,
    287.9858093261719 * _0x28613a,
    193.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a,
    191.633544921875 * _0x28613a,
    334.9858093261719 * _0x28613a,
    187.633544921875 * _0x28613a,
    354.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    165.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a,
    138.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a,
    135.633544921875 * _0x28613a,
    288.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    110.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    68.633544921875 * _0x28613a,
    323.9858093261719 * _0x28613a,
    49.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    88.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    108.633544921875 * _0x28613a,
    284.9858093261719 * _0x28613a,
    118.633544921875 * _0x28613a,
    258.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    86.633544921875 * _0x28613a,
    264.9858093261719 * _0x28613a,
    75.633544921875 * _0x28613a,
    310.9858093261719 * _0x28613a,
    19.633544921875 * _0x28613a,
    304.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    54.633544921875 * _0x28613a,
    276.9858093261719 * _0x28613a,
    59.633544921875 * _0x28613a,
    214.98580932617188 * _0x28613a,
    105.633544921875 * _0x28613a,
    205.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    14.633544921875 * _0x28613a,
    201.98580932617188 * _0x28613a,
    24.633544921875 * _0x28613a,
    141.98580932617188 * _0x28613a,
    25.633544921875 * _0x28613a,
    82.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    49.633544921875 * _0x28613a,
    168.98580932617188 * _0x28613a,
    87.633544921875 * _0x28613a,
    141.98580932617188 * _0x28613a,
    112.633544921875 * _0x28613a,
    123.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    95.633544921875 * _0x28613a,
    75.98580932617188 * _0x28613a,
    70.633544921875 * _0x28613a,
    68.98580932617188 * _0x28613a,
    35.633544921875 * _0x28613a,
    50.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    70.633544921875 * _0x28613a,
    53.985809326171875 * _0x28613a,
    102.633544921875 * _0x28613a,
    65.98580932617188 * _0x28613a,
    125.633544921875 * _0x28613a,
    84.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    133.633544921875 * _0x28613a,
    69.98580932617188 * _0x28613a,
    166.633544921875 * _0x28613a,
    42.985809326171875 * _0x28613a,
    176.633544921875 * _0x28613a,
    21.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    185.633544921875 * _0x28613a,
    49.985809326171875 * _0x28613a,
    168.633544921875 * _0x28613a,
    95.98580932617188 * _0x28613a,
    191.633544921875 * _0x28613a,
    121.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[0]);
  _0x4d10a0.globalAlpha = 1;
  _0x4d10a0.translate(-4 * _0x28613a, -5 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    191.633544921875 * _0x28613a,
    123.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    215.633544921875 * _0x28613a,
    85.98580932617188 * _0x28613a,
    187.633544921875 * _0x28613a,
    71.98580932617188 * _0x28613a,
    202.633544921875 * _0x28613a,
    19.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    231.633544921875 * _0x28613a,
    68.98580932617188 * _0x28613a,
    253.633544921875 * _0x28613a,
    71.98580932617188 * _0x28613a,
    256.633544921875 * _0x28613a,
    93.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    306.633544921875 * _0x28613a,
    64.98580932617188 * _0x28613a,
    319.633544921875 * _0x28613a,
    61.985809326171875 * _0x28613a,
    350.633544921875 * _0x28613a,
    58.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    280.633544921875 * _0x28613a,
    86.98580932617188 * _0x28613a,
    281.633544921875 * _0x28613a,
    106.98580932617188 * _0x28613a,
    268.633544921875 * _0x28613a,
    130.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    295.633544921875 * _0x28613a,
    158.98580932617188 * _0x28613a,
    328.633544921875 * _0x28613a,
    155.98580932617188 * _0x28613a,
    353.633544921875 * _0x28613a,
    90.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    371.633544921875 * _0x28613a,
    158.98580932617188 * _0x28613a,
    337.633544921875 * _0x28613a,
    210.98580932617188 * _0x28613a,
    286.633544921875 * _0x28613a,
    209.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    323.633544921875 * _0x28613a,
    230.98580932617188 * _0x28613a,
    317.633544921875 * _0x28613a,
    274.9858093261719 * _0x28613a,
    356.633544921875 * _0x28613a,
    305.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    288.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a,
    288.633544921875 * _0x28613a,
    265.9858093261719 * _0x28613a,
    275.633544921875 * _0x28613a,
    266.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    280.633544921875 * _0x28613a,
    294.9858093261719 * _0x28613a,
    315.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a,
    336.633544921875 * _0x28613a,
    316.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    295.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    264.633544921875 * _0x28613a,
    302.9858093261719 * _0x28613a,
    254.633544921875 * _0x28613a,
    289.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    252.633544921875 * _0x28613a,
    301.9858093261719 * _0x28613a,
    224.633544921875 * _0x28613a,
    315.9858093261719 * _0x28613a,
    201.633544921875 * _0x28613a,
    356.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.633544921875 * _0x28613a,
    313.9858093261719 * _0x28613a,
    195.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    196.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    197.633544921875 * _0x28613a,
    289.9858093261719 * _0x28613a,
    207.633544921875 * _0x28613a,
    283.9858093261719 * _0x28613a,
    195.633544921875 * _0x28613a,
    258.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    182.633544921875 * _0x28613a,
    282.9858093261719 * _0x28613a,
    190.633544921875 * _0x28613a,
    287.9858093261719 * _0x28613a,
    193.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a,
    191.633544921875 * _0x28613a,
    334.9858093261719 * _0x28613a,
    187.633544921875 * _0x28613a,
    354.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    165.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a,
    138.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a,
    135.633544921875 * _0x28613a,
    288.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    110.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    68.633544921875 * _0x28613a,
    323.9858093261719 * _0x28613a,
    49.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    88.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    108.633544921875 * _0x28613a,
    284.9858093261719 * _0x28613a,
    118.633544921875 * _0x28613a,
    258.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    86.633544921875 * _0x28613a,
    264.9858093261719 * _0x28613a,
    75.633544921875 * _0x28613a,
    310.9858093261719 * _0x28613a,
    19.633544921875 * _0x28613a,
    304.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    54.633544921875 * _0x28613a,
    276.9858093261719 * _0x28613a,
    59.633544921875 * _0x28613a,
    214.98580932617188 * _0x28613a,
    105.633544921875 * _0x28613a,
    205.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    14.633544921875 * _0x28613a,
    201.98580932617188 * _0x28613a,
    24.633544921875 * _0x28613a,
    141.98580932617188 * _0x28613a,
    25.633544921875 * _0x28613a,
    82.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    49.633544921875 * _0x28613a,
    168.98580932617188 * _0x28613a,
    87.633544921875 * _0x28613a,
    141.98580932617188 * _0x28613a,
    112.633544921875 * _0x28613a,
    123.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    95.633544921875 * _0x28613a,
    75.98580932617188 * _0x28613a,
    70.633544921875 * _0x28613a,
    68.98580932617188 * _0x28613a,
    35.633544921875 * _0x28613a,
    50.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    70.633544921875 * _0x28613a,
    53.985809326171875 * _0x28613a,
    102.633544921875 * _0x28613a,
    65.98580932617188 * _0x28613a,
    125.633544921875 * _0x28613a,
    84.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    133.633544921875 * _0x28613a,
    69.98580932617188 * _0x28613a,
    166.633544921875 * _0x28613a,
    42.985809326171875 * _0x28613a,
    176.633544921875 * _0x28613a,
    21.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    185.633544921875 * _0x28613a,
    49.985809326171875 * _0x28613a,
    168.633544921875 * _0x28613a,
    95.98580932617188 * _0x28613a,
    191.633544921875 * _0x28613a,
    121.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, undefined, _0x5b96e2[1], 12 * _0x28613a);
  _0x4d10a0.translate(-1 * _0x28613a, 0 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(270.633544921875 * _0x28613a, 88.98580932617188 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    296.633544921875 * _0x28613a,
    65.98580932617188 * _0x28613a,
    318.633544921875 * _0x28613a,
    62.985809326171875 * _0x28613a,
    348.633544921875 * _0x28613a,
    57.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    309.633544921875 * _0x28613a,
    76.98580932617188 * _0x28613a,
    291.633544921875 * _0x28613a,
    88.98580932617188 * _0x28613a,
    280.633544921875 * _0x28613a,
    99.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[4], _0x5b96e2[5], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(275.633544921875 * _0x28613a, 281.9858093261719 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    303.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    321.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    335.633544921875 * _0x28613a,
    315.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    305.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a,
    278.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a,
    264.633544921875 * _0x28613a,
    293.9858093261719 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[4], _0x5b96e2[5], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(124.633544921875 * _0x28613a, 291.9858093261719 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    106.633544921875 * _0x28613a,
    316.9858093261719 * _0x28613a,
    72.633544921875 * _0x28613a,
    325.9858093261719 * _0x28613a,
    53.633544921875 * _0x28613a,
    319.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    83.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    97.633544921875 * _0x28613a,
    298.9858093261719 * _0x28613a,
    112.633544921875 * _0x28613a,
    284.9858093261719 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[4], _0x5b96e2[5], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(113.633544921875 * _0x28613a, 80.98580932617188 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    91.633544921875 * _0x28613a,
    54.985809326171875 * _0x28613a,
    72.633544921875 * _0x28613a,
    56.985809326171875 * _0x28613a,
    36.633544921875 * _0x28613a,
    49.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    87.633544921875 * _0x28613a,
    72.98580932617188 * _0x28613a,
    95.633544921875 * _0x28613a,
    82.98580932617188 * _0x28613a,
    106.633544921875 * _0x28613a,
    96.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[4], _0x5b96e2[5], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    202.633544921875 * _0x28613a,
    20.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    219.633544921875 * _0x28613a,
    49.985809326171875 * _0x28613a,
    259.633544921875 * _0x28613a,
    80.98580932617188 * _0x28613a,
    255.633544921875 * _0x28613a,
    92.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    268.633544921875 * _0x28613a,
    86.98580932617188 * _0x28613a,
    265.633544921875 * _0x28613a,
    87.98580932617188 * _0x28613a,
    275.633544921875 * _0x28613a,
    82.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    283.633544921875 * _0x28613a,
    87.98580932617188 * _0x28613a,
    283.633544921875 * _0x28613a,
    87.98580932617188 * _0x28613a,
    291.633544921875 * _0x28613a,
    92.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    269.633544921875 * _0x28613a,
    116.98580932617188 * _0x28613a,
    270.633544921875 * _0x28613a,
    124.98580932617188 * _0x28613a,
    267.633544921875 * _0x28613a,
    130.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    307.633544921875 * _0x28613a,
    168.98580932617188 * _0x28613a,
    339.633544921875 * _0x28613a,
    132.98580932617188 * _0x28613a,
    352.633544921875 * _0x28613a,
    93.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    366.633544921875 * _0x28613a,
    145.98580932617188 * _0x28613a,
    345.633544921875 * _0x28613a,
    207.98580932617188 * _0x28613a,
    286.633544921875 * _0x28613a,
    208.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    315.633544921875 * _0x28613a,
    223.98580932617188 * _0x28613a,
    327.633544921875 * _0x28613a,
    287.9858093261719 * _0x28613a,
    355.633544921875 * _0x28613a,
    305.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    293.633544921875 * _0x28613a,
    298.9858093261719 * _0x28613a,
    293.633544921875 * _0x28613a,
    275.9858093261719 * _0x28613a,
    276.633544921875 * _0x28613a,
    266.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    274.633544921875 * _0x28613a,
    282.9858093261719 * _0x28613a,
    287.633544921875 * _0x28613a,
    288.9858093261719 * _0x28613a,
    295.633544921875 * _0x28613a,
    296.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    287.133544921875 * _0x28613a,
    302.4858093261719 * _0x28613a,
    287.133544921875 * _0x28613a,
    302.4858093261719 * _0x28613a,
    278.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    261.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a,
    258.633544921875 * _0x28613a,
    293.9858093261719 * _0x28613a,
    255.633544921875 * _0x28613a,
    290.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    249.633544921875 * _0x28613a,
    301.9858093261719 * _0x28613a,
    225.633544921875 * _0x28613a,
    320.9858093261719 * _0x28613a,
    202.633544921875 * _0x28613a,
    354.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    196.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a,
    198.633544921875 * _0x28613a,
    300.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    209.633544921875 * _0x28613a,
    268.9858093261719 * _0x28613a,
    199.633544921875 * _0x28613a,
    266.9858093261719 * _0x28613a,
    195.633544921875 * _0x28613a,
    256.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    183.633544921875 * _0x28613a,
    274.9858093261719 * _0x28613a,
    182.633544921875 * _0x28613a,
    281.9858093261719 * _0x28613a,
    192.633544921875 * _0x28613a,
    305.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    194.633544921875 * _0x28613a,
    317.9858093261719 * _0x28613a,
    191.633544921875 * _0x28613a,
    336.9858093261719 * _0x28613a,
    186.633544921875 * _0x28613a,
    351.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    166.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    141.633544921875 * _0x28613a,
    303.9858093261719 * _0x28613a,
    136.633544921875 * _0x28613a,
    286.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    122.633544921875 * _0x28613a,
    303.9858093261719 * _0x28613a,
    115.633544921875 * _0x28613a,
    305.9858093261719 * _0x28613a,
    109.633544921875 * _0x28613a,
    306.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    101.133544921875 * _0x28613a,
    301.9858093261719 * _0x28613a,
    94.633544921875 * _0x28613a,
    297.9858093261719 * _0x28613a,
    92.633544921875 * _0x28613a,
    296.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    116.633544921875 * _0x28613a,
    277.9858093261719 * _0x28613a,
    116.633544921875 * _0x28613a,
    266.9858093261719 * _0x28613a,
    119.633544921875 * _0x28613a,
    257.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    107.633544921875 * _0x28613a,
    257.9858093261719 * _0x28613a,
    65.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a,
    24.633544921875 * _0x28613a,
    303.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    51.633544921875 * _0x28613a,
    275.9858093261719 * _0x28613a,
    64.633544921875 * _0x28613a,
    220.98580932617188 * _0x28613a,
    108.633544921875 * _0x28613a,
    205.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    14.633544921875 * _0x28613a,
    198.98580932617188 * _0x28613a,
    26.633544921875 * _0x28613a,
    142.98580932617188 * _0x28613a,
    25.633544921875 * _0x28613a,
    86.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    41.633544921875 * _0x28613a,
    155.98580932617188 * _0x28613a,
    81.633544921875 * _0x28613a,
    148.98580932617188 * _0x28613a,
    113.633544921875 * _0x28613a,
    124.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    102.633544921875 * _0x28613a,
    93.98580932617188 * _0x28613a,
    95.633544921875 * _0x28613a,
    88.98580932617188 * _0x28613a,
    89.633544921875 * _0x28613a,
    81.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    97.633544921875 * _0x28613a,
    76.48580932617188 * _0x28613a,
    97.633544921875 * _0x28613a,
    76.48580932617188 * _0x28613a,
    105.633544921875 * _0x28613a,
    70.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    120.633544921875 * _0x28613a,
    78.98580932617188 * _0x28613a,
    121.633544921875 * _0x28613a,
    81.98580932617188 * _0x28613a,
    124.633544921875 * _0x28613a,
    86.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    132.633544921875 * _0x28613a,
    71.98580932617188 * _0x28613a,
    160.633544921875 * _0x28613a,
    56.985809326171875 * _0x28613a,
    175.633544921875 * _0x28613a,
    23.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    182.633544921875 * _0x28613a,
    53.985809326171875 * _0x28613a,
    170.633544921875 * _0x28613a,
    102.98580932617188 * _0x28613a,
    191.633544921875 * _0x28613a,
    125.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    214.633544921875 * _0x28613a,
    89.98580932617188 * _0x28613a,
    192.633544921875 * _0x28613a,
    58.985809326171875 * _0x28613a,
    202.633544921875 * _0x28613a,
    20.985809326171875 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[2], _0x5b96e2[3], 5 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    203.633544921875 * _0x28613a,
    21.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    223.633544921875 * _0x28613a,
    63.985809326171875 * _0x28613a,
    227.633544921875 * _0x28613a,
    72.98580932617188 * _0x28613a,
    235.633544921875 * _0x28613a,
    98.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    241.633544921875 * _0x28613a,
    123.98580932617188 * _0x28613a,
    225.633544921875 * _0x28613a,
    138.98580932617188 * _0x28613a,
    196.633544921875 * _0x28613a,
    122.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    213.633544921875 * _0x28613a,
    93.98580932617188 * _0x28613a,
    199.633544921875 * _0x28613a,
    49.985809326171875 * _0x28613a,
    203.633544921875 * _0x28613a,
    26.985809326171875 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    175.633544921875 * _0x28613a,
    25.985809326171875 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    176.633544921875 * _0x28613a,
    51.985809326171875 * _0x28613a,
    171.633544921875 * _0x28613a,
    88.98580932617188 * _0x28613a,
    186.633544921875 * _0x28613a,
    121.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    156.633544921875 * _0x28613a,
    144.98580932617188 * _0x28613a,
    139.633544921875 * _0x28613a,
    120.98580932617188 * _0x28613a,
    147.633544921875 * _0x28613a,
    97.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    152.633544921875 * _0x28613a,
    77.98580932617188 * _0x28613a,
    162.633544921875 * _0x28613a,
    60.985809326171875 * _0x28613a,
    176.633544921875 * _0x28613a,
    25.985809326171875 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(26.633544921875 * _0x28613a, 96.98580932617188 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    38.633544921875 * _0x28613a,
    151.98580932617188 * _0x28613a,
    61.633544921875 * _0x28613a,
    161.98580932617188 * _0x28613a,
    88.633544921875 * _0x28613a,
    168.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    117.633544921875 * _0x28613a,
    177.98580932617188 * _0x28613a,
    113.633544921875 * _0x28613a,
    185.98580932617188 * _0x28613a,
    106.633544921875 * _0x28613a,
    204.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    32.633544921875 * _0x28613a,
    204.98580932617188 * _0x28613a,
    25.633544921875 * _0x28613a,
    149.98580932617188 * _0x28613a,
    25.633544921875 * _0x28613a,
    97.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(351.633544921875 * _0x28613a, 99.98580932617188 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    365.633544921875 * _0x28613a,
    161.98580932617188 * _0x28613a,
    333.633544921875 * _0x28613a,
    203.98580932617188 * _0x28613a,
    287.633544921875 * _0x28613a,
    207.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    255.633544921875 * _0x28613a,
    208.98580932617188 * _0x28613a,
    266.633544921875 * _0x28613a,
    174.98580932617188 * _0x28613a,
    285.633544921875 * _0x28613a,
    176.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    313.633544921875 * _0x28613a,
    178.98580932617188 * _0x28613a,
    348.633544921875 * _0x28613a,
    135.98580932617188 * _0x28613a,
    353.633544921875 * _0x28613a,
    99.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(350.633544921875 * _0x28613a, 302.9858093261719 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    310.633544921875 * _0x28613a,
    280.9858093261719 * _0x28613a,
    314.633544921875 * _0x28613a,
    244.98580932617188 * _0x28613a,
    292.633544921875 * _0x28613a,
    230.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    272.633544921875 * _0x28613a,
    215.98580932617188 * _0x28613a,
    263.633544921875 * _0x28613a,
    222.98580932617188 * _0x28613a,
    256.633544921875 * _0x28613a,
    236.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    251.633544921875 * _0x28613a,
    249.98580932617188 * _0x28613a,
    264.633544921875 * _0x28613a,
    255.98580932617188 * _0x28613a,
    279.633544921875 * _0x28613a,
    268.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    306.633544921875 * _0x28613a,
    295.9858093261719 * _0x28613a,
    325.633544921875 * _0x28613a,
    299.9858093261719 * _0x28613a,
    349.633544921875 * _0x28613a,
    302.9858093261719 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(95.633544921875 * _0x28613a, 224.98580932617188 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    64.633544921875 * _0x28613a,
    245.98580932617188 * _0x28613a,
    62.633544921875 * _0x28613a,
    280.9858093261719 * _0x28613a,
    32.633544921875 * _0x28613a,
    303.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    59.633544921875 * _0x28613a,
    301.9858093261719 * _0x28613a,
    102.633544921875 * _0x28613a,
    260.9858093261719 * _0x28613a,
    116.633544921875 * _0x28613a,
    255.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    139.633544921875 * _0x28613a,
    229.98580932617188 * _0x28613a,
    108.633544921875 * _0x28613a,
    209.98580932617188 * _0x28613a,
    97.633544921875 * _0x28613a,
    224.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    195.633544921875 * _0x28613a,
    253.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    209.633544921875 * _0x28613a,
    282.9858093261719 * _0x28613a,
    205.633544921875 * _0x28613a,
    278.9858093261719 * _0x28613a,
    199.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    198.633544921875 * _0x28613a,
    332.9858093261719 * _0x28613a,
    201.633544921875 * _0x28613a,
    340.9858093261719 * _0x28613a,
    202.633544921875 * _0x28613a,
    348.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    215.633544921875 * _0x28613a,
    313.9858093261719 * _0x28613a,
    226.633544921875 * _0x28613a,
    291.9858093261719 * _0x28613a,
    235.633544921875 * _0x28613a,
    270.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    243.633544921875 * _0x28613a,
    247.98580932617188 * _0x28613a,
    219.633544921875 * _0x28613a,
    235.98580932617188 * _0x28613a,
    196.633544921875 * _0x28613a,
    252.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    195.633544921875 * _0x28613a,
    251.98580932617188 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    176.633544921875 * _0x28613a,
    275.9858093261719 * _0x28613a,
    182.633544921875 * _0x28613a,
    285.9858093261719 * _0x28613a,
    191.633544921875 * _0x28613a,
    308.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    194.633544921875 * _0x28613a,
    318.9858093261719 * _0x28613a,
    190.633544921875 * _0x28613a,
    334.9858093261719 * _0x28613a,
    186.633544921875 * _0x28613a,
    348.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    175.633544921875 * _0x28613a,
    307.9858093261719 * _0x28613a,
    157.633544921875 * _0x28613a,
    291.9858093261719 * _0x28613a,
    155.633544921875 * _0x28613a,
    272.9858093261719 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    150.633544921875 * _0x28613a,
    243.98580932617188 * _0x28613a,
    170.633544921875 * _0x28613a,
    236.98580932617188 * _0x28613a,
    195.633544921875 * _0x28613a,
    251.98580932617188 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[3]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(316 * _0x28613a, 186.8020782470703 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    315 * _0x28613a,
    173.8020782470703 * _0x28613a,
    298 * _0x28613a,
    177.8020782470703 * _0x28613a,
    293 * _0x28613a,
    183.8020782470703 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    285 * _0x28613a,
    195.8020782470703 * _0x28613a,
    314 * _0x28613a,
    197.8020782470703 * _0x28613a,
    315 * _0x28613a,
    187.8020782470703 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(340 * _0x28613a, 157.8020782470703 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    327 * _0x28613a,
    153.8020782470703 * _0x28613a,
    321 * _0x28613a,
    168.8020782470703 * _0x28613a,
    330 * _0x28613a,
    174.8020782470703 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    341 * _0x28613a,
    178.8020782470703 * _0x28613a,
    347 * _0x28613a,
    161.8020782470703 * _0x28613a,
    341 * _0x28613a,
    157.8020782470703 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(349 * _0x28613a, 136.8020782470703 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    343 * _0x28613a,
    135.8020782470703 * _0x28613a,
    342 * _0x28613a,
    139.8020782470703 * _0x28613a,
    341 * _0x28613a,
    147.8020782470703 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    343 * _0x28613a,
    155.8020782470703 * _0x28613a,
    353 * _0x28613a,
    143.8020782470703 * _0x28613a,
    349 * _0x28613a,
    137.8020782470703 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(278.75 * _0x28613a, 246.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    288.75 * _0x28613a,
    242.4375 * _0x28613a,
    301.75 * _0x28613a,
    248.4375 * _0x28613a,
    298.75 * _0x28613a,
    262.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    293.75 * _0x28613a,
    271.4375 * _0x28613a,
    287.75 * _0x28613a,
    271.4375 * _0x28613a,
    278.75 * _0x28613a,
    262.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    271.75 * _0x28613a,
    255.4375 * _0x28613a,
    274.75 * _0x28613a,
    250.4375 * _0x28613a,
    277.75 * _0x28613a,
    247.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(310.75 * _0x28613a, 277.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    319.75 * _0x28613a,
    280.4375 * _0x28613a,
    322.75 * _0x28613a,
    283.4375 * _0x28613a,
    321.75 * _0x28613a,
    289.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    319.75 * _0x28613a,
    295.4375 * _0x28613a,
    313.75 * _0x28613a,
    291.4375 * _0x28613a,
    308.75 * _0x28613a,
    288.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    301.75 * _0x28613a,
    281.4375 * _0x28613a,
    306.75 * _0x28613a,
    277.4375 * _0x28613a,
    309.75 * _0x28613a,
    277.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(217.75 * _0x28613a, 257.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    227.75 * _0x28613a,
    269.4375 * _0x28613a,
    220.75 * _0x28613a,
    281.4375 * _0x28613a,
    212.75 * _0x28613a,
    280.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.75 * _0x28613a,
    279.4375 * _0x28613a,
    206.75 * _0x28613a,
    269.4375 * _0x28613a,
    204.75 * _0x28613a,
    260.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    204.75 * _0x28613a,
    254.4375 * _0x28613a,
    211.75 * _0x28613a,
    253.4375 * _0x28613a,
    216.75 * _0x28613a,
    256.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(211.75 * _0x28613a, 289.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    219.75 * _0x28613a,
    292.4375 * _0x28613a,
    213.75 * _0x28613a,
    306.4375 * _0x28613a,
    206.75 * _0x28613a,
    307.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    199.75 * _0x28613a,
    303.4375 * _0x28613a,
    209.75 * _0x28613a,
    287.4375 * _0x28613a,
    210.75 * _0x28613a,
    289.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(171.75 * _0x28613a, 256.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    162.75 * _0x28613a,
    273.4375 * _0x28613a,
    166.75 * _0x28613a,
    278.4375 * _0x28613a,
    175.75 * _0x28613a,
    280.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    183.75 * _0x28613a,
    278.4375 * _0x28613a,
    185.75 * _0x28613a,
    257.4375 * _0x28613a,
    182.75 * _0x28613a,
    255.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    176.75 * _0x28613a,
    251.4375 * _0x28613a,
    172.75 * _0x28613a,
    253.4375 * _0x28613a,
    172.75 * _0x28613a,
    256.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(175.75 * _0x28613a, 289.9375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    183.75 * _0x28613a,
    287.9375 * _0x28613a,
    186.75 * _0x28613a,
    301.9375 * _0x28613a,
    182.75 * _0x28613a,
    305.9375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    176.75 * _0x28613a,
    307.9375 * _0x28613a,
    171.75 * _0x28613a,
    292.9375 * _0x28613a,
    174.75 * _0x28613a,
    290.9375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(205.75 * _0x28613a, 314.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    209.75 * _0x28613a,
    316.4375 * _0x28613a,
    210.75 * _0x28613a,
    320.4375 * _0x28613a,
    206.75 * _0x28613a,
    323.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    201.75 * _0x28613a,
    324.4375 * _0x28613a,
    201.75 * _0x28613a,
    314.4375 * _0x28613a,
    204.75 * _0x28613a,
    314.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(186.75 * _0x28613a, 313.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    181.75 * _0x28613a,
    315.4375 * _0x28613a,
    180.75 * _0x28613a,
    321.4375 * _0x28613a,
    185.75 * _0x28613a,
    326.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    190.75 * _0x28613a,
    327.4375 * _0x28613a,
    190.75 * _0x28613a,
    313.4375 * _0x28613a,
    187.75 * _0x28613a,
    314.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(103.75 * _0x28613a, 244.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    96.75 * _0x28613a,
    239.4375 * _0x28613a,
    83.75 * _0x28613a,
    240.4375 * _0x28613a,
    81.75 * _0x28613a,
    255.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    80.75 * _0x28613a,
    264.4375 * _0x28613a,
    89.75 * _0x28613a,
    269.4375 * _0x28613a,
    99.75 * _0x28613a,
    260.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    106.75 * _0x28613a,
    254.4375 * _0x28613a,
    106.75 * _0x28613a,
    250.4375 * _0x28613a,
    104.75 * _0x28613a,
    245.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(86.75 * _0x28613a, 182.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    82.75 * _0x28613a,
    170.4375 * _0x28613a,
    66.75 * _0x28613a,
    169.4375 * _0x28613a,
    61.75 * _0x28613a,
    181.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    58.75 * _0x28613a,
    187.4375 * _0x28613a,
    68.75 * _0x28613a,
    194.4375 * _0x28613a,
    75.75 * _0x28613a,
    192.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    83.75 * _0x28613a,
    192.4375 * _0x28613a,
    86.75 * _0x28613a,
    187.4375 * _0x28613a,
    86.75 * _0x28613a,
    183.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(44.75 * _0x28613a, 152.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    55.75 * _0x28613a,
    159.4375 * _0x28613a,
    54.75 * _0x28613a,
    170.4375 * _0x28613a,
    46.75 * _0x28613a,
    171.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    39.75 * _0x28613a,
    170.4375 * _0x28613a,
    34.75 * _0x28613a,
    151.4375 * _0x28613a,
    43.75 * _0x28613a,
    152.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(31.75 * _0x28613a, 130.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    35.75 * _0x28613a,
    132.4375 * _0x28613a,
    35.75 * _0x28613a,
    131.4375 * _0x28613a,
    37.75 * _0x28613a,
    137.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    36.75 * _0x28613a,
    144.4375 * _0x28613a,
    36.75 * _0x28613a,
    145.4375 * _0x28613a,
    33.75 * _0x28613a,
    144.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    26.75 * _0x28613a,
    137.4375 * _0x28613a,
    29.75 * _0x28613a,
    131.4375 * _0x28613a,
    31.75 * _0x28613a,
    130.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(69.75 * _0x28613a, 274.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    62.75 * _0x28613a,
    272.4375 * _0x28613a,
    59.75 * _0x28613a,
    277.4375 * _0x28613a,
    57.75 * _0x28613a,
    284.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    56.75 * _0x28613a,
    290.4375 * _0x28613a,
    63.75 * _0x28613a,
    289.4375 * _0x28613a,
    71.75 * _0x28613a,
    282.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    75.75 * _0x28613a,
    277.4375 * _0x28613a,
    72.75 * _0x28613a,
    275.4375 * _0x28613a,
    69.75 * _0x28613a,
    274.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(165.75 * _0x28613a, 95.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    177.75 * _0x28613a,
    97.4375 * _0x28613a,
    182.75 * _0x28613a,
    115.4375 * _0x28613a,
    173.75 * _0x28613a,
    121.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    164.75 * _0x28613a,
    126.4375 * _0x28613a,
    149.75 * _0x28613a,
    102.4375 * _0x28613a,
    164.75 * _0x28613a,
    96.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(216.75 * _0x28613a, 94.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    227.75 * _0x28613a,
    99.4375 * _0x28613a,
    223.75 * _0x28613a,
    122.4375 * _0x28613a,
    210.75 * _0x28613a,
    119.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    203.75 * _0x28613a,
    115.4375 * _0x28613a,
    207.75 * _0x28613a,
    93.4375 * _0x28613a,
    216.75 * _0x28613a,
    94.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(211.75 * _0x28613a, 68.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    218.75 * _0x28613a,
    69.4375 * _0x28613a,
    220.75 * _0x28613a,
    77.4375 * _0x28613a,
    216.75 * _0x28613a,
    83.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    208.75 * _0x28613a,
    89.4375 * _0x28613a,
    205.75 * _0x28613a,
    68.4375 * _0x28613a,
    210.75 * _0x28613a,
    68.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(169.75 * _0x28613a, 71.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    162.75 * _0x28613a,
    72.4375 * _0x28613a,
    159.75 * _0x28613a,
    83.4375 * _0x28613a,
    167.75 * _0x28613a,
    88.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    174.75 * _0x28613a,
    90.4375 * _0x28613a,
    174.75 * _0x28613a,
    72.4375 * _0x28613a,
    170.75 * _0x28613a,
    71.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[6], _0x5b96e2[7], 4 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(193.75 * _0x28613a, 160.4375 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    215.75 * _0x28613a,
    168.4375 * _0x28613a,
    224.75 * _0x28613a,
    180.4375 * _0x28613a,
    229.75 * _0x28613a,
    193.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    223.75 * _0x28613a,
    211.4375 * _0x28613a,
    205.75 * _0x28613a,
    225.4375 * _0x28613a,
    193.75 * _0x28613a,
    229.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    167.75 * _0x28613a,
    217.4375 * _0x28613a,
    161.75 * _0x28613a,
    205.4375 * _0x28613a,
    156.75 * _0x28613a,
    192.4375 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    164.75 * _0x28613a,
    175.4375 * _0x28613a,
    176.75 * _0x28613a,
    166.4375 * _0x28613a,
    192.75 * _0x28613a,
    160.4375 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[8], _0x5b96e2[9], 3 * _0x28613a);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    189.1999969482422 * _0x28613a,
    182.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    190.1999969482422 * _0x28613a,
    184.11249923706055 * _0x28613a,
    190.1999969482422 * _0x28613a,
    184.11249923706055 * _0x28613a,
    191.1999969482422 * _0x28613a,
    185.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    192.1999969482422 * _0x28613a,
    180.61249923706055 * _0x28613a,
    192.1999969482422 * _0x28613a,
    180.61249923706055 * _0x28613a,
    193.1999969482422 * _0x28613a,
    175.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    195.6999969482422 * _0x28613a,
    177.11249923706055 * _0x28613a,
    195.6999969482422 * _0x28613a,
    177.11249923706055 * _0x28613a,
    198.1999969482422 * _0x28613a,
    178.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    198.1999969482422 * _0x28613a,
    181.11249923706055 * _0x28613a,
    198.1999969482422 * _0x28613a,
    181.11249923706055 * _0x28613a,
    198.1999969482422 * _0x28613a,
    183.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    201.6999969482422 * _0x28613a,
    181.11249923706055 * _0x28613a,
    201.6999969482422 * _0x28613a,
    181.11249923706055 * _0x28613a,
    205.1999969482422 * _0x28613a,
    178.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.6999969482422 * _0x28613a,
    180.61249923706055 * _0x28613a,
    206.6999969482422 * _0x28613a,
    180.61249923706055 * _0x28613a,
    208.1999969482422 * _0x28613a,
    182.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.1999969482422 * _0x28613a,
    185.61249923706055 * _0x28613a,
    206.1999969482422 * _0x28613a,
    185.61249923706055 * _0x28613a,
    204.1999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    208.6999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a,
    208.6999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a,
    213.1999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    213.1999969482422 * _0x28613a,
    191.11249923706055 * _0x28613a,
    213.1999969482422 * _0x28613a,
    191.11249923706055 * _0x28613a,
    213.1999969482422 * _0x28613a,
    193.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    209.6999969482422 * _0x28613a,
    194.61249923706055 * _0x28613a,
    209.6999969482422 * _0x28613a,
    194.61249923706055 * _0x28613a,
    206.1999969482422 * _0x28613a,
    195.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    210.1999969482422 * _0x28613a,
    198.61249923706055 * _0x28613a,
    210.1999969482422 * _0x28613a,
    198.61249923706055 * _0x28613a,
    214.1999969482422 * _0x28613a,
    201.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    212.1999969482422 * _0x28613a,
    203.61249923706055 * _0x28613a,
    212.1999969482422 * _0x28613a,
    203.61249923706055 * _0x28613a,
    210.1999969482422 * _0x28613a,
    205.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    207.1999969482422 * _0x28613a,
    204.11249923706055 * _0x28613a,
    207.1999969482422 * _0x28613a,
    204.11249923706055 * _0x28613a,
    204.1999969482422 * _0x28613a,
    202.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    205.6999969482422 * _0x28613a,
    207.61249923706055 * _0x28613a,
    205.6999969482422 * _0x28613a,
    207.61249923706055 * _0x28613a,
    207.1999969482422 * _0x28613a,
    212.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    204.6999969482422 * _0x28613a,
    213.61249923706055 * _0x28613a,
    204.6999969482422 * _0x28613a,
    213.61249923706055 * _0x28613a,
    202.1999969482422 * _0x28613a,
    214.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    200.1999969482422 * _0x28613a,
    210.61249923706055 * _0x28613a,
    200.1999969482422 * _0x28613a,
    210.61249923706055 * _0x28613a,
    198.1999969482422 * _0x28613a,
    206.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    196.6999969482422 * _0x28613a,
    211.61249923706055 * _0x28613a,
    196.6999969482422 * _0x28613a,
    211.61249923706055 * _0x28613a,
    195.1999969482422 * _0x28613a,
    216.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    192.6999969482422 * _0x28613a,
    216.11249923706055 * _0x28613a,
    192.6999969482422 * _0x28613a,
    216.11249923706055 * _0x28613a,
    190.1999969482422 * _0x28613a,
    215.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    190.1999969482422 * _0x28613a,
    211.61249923706055 * _0x28613a,
    190.1999969482422 * _0x28613a,
    211.61249923706055 * _0x28613a,
    190.1999969482422 * _0x28613a,
    207.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    186.1999969482422 * _0x28613a,
    210.61249923706055 * _0x28613a,
    186.1999969482422 * _0x28613a,
    210.61249923706055 * _0x28613a,
    182.1999969482422 * _0x28613a,
    213.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    181.1999969482422 * _0x28613a,
    211.11249923706055 * _0x28613a,
    181.1999969482422 * _0x28613a,
    211.11249923706055 * _0x28613a,
    180.1999969482422 * _0x28613a,
    208.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    183.1999969482422 * _0x28613a,
    205.61249923706055 * _0x28613a,
    183.1999969482422 * _0x28613a,
    205.61249923706055 * _0x28613a,
    186.1999969482422 * _0x28613a,
    202.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    180.6999969482422 * _0x28613a,
    203.11249923706055 * _0x28613a,
    180.6999969482422 * _0x28613a,
    203.11249923706055 * _0x28613a,
    175.1999969482422 * _0x28613a,
    203.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    174.6999969482422 * _0x28613a,
    200.11249923706055 * _0x28613a,
    174.6999969482422 * _0x28613a,
    200.11249923706055 * _0x28613a,
    174.1999969482422 * _0x28613a,
    196.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    177.1999969482422 * _0x28613a,
    195.61249923706055 * _0x28613a,
    177.1999969482422 * _0x28613a,
    195.61249923706055 * _0x28613a,
    180.1999969482422 * _0x28613a,
    194.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    177.1999969482422 * _0x28613a,
    191.61249923706055 * _0x28613a,
    177.1999969482422 * _0x28613a,
    191.61249923706055 * _0x28613a,
    174.1999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    175.6999969482422 * _0x28613a,
    187.11249923706055 * _0x28613a,
    175.6999969482422 * _0x28613a,
    187.11249923706055 * _0x28613a,
    177.1999969482422 * _0x28613a,
    185.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    180.6999969482422 * _0x28613a,
    187.11249923706055 * _0x28613a,
    180.6999969482422 * _0x28613a,
    187.11249923706055 * _0x28613a,
    184.1999969482422 * _0x28613a,
    188.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    182.6999969482422 * _0x28613a,
    183.61249923706055 * _0x28613a,
    182.6999969482422 * _0x28613a,
    183.61249923706055 * _0x28613a,
    181.1999969482422 * _0x28613a,
    178.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    183.1999969482422 * _0x28613a,
    177.11249923706055 * _0x28613a,
    183.1999969482422 * _0x28613a,
    177.11249923706055 * _0x28613a,
    185.1999969482422 * _0x28613a,
    175.61249923706055 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[10]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(185.1999969482422 * _0x28613a, 173.8125 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    187.1999969482422 * _0x28613a,
    179.3125 * _0x28613a,
    187.1999969482422 * _0x28613a,
    179.3125 * _0x28613a,
    189.1999969482422 * _0x28613a,
    184.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    184.1999969482422 * _0x28613a,
    181.8125 * _0x28613a,
    184.1999969482422 * _0x28613a,
    181.8125 * _0x28613a,
    179.1999969482422 * _0x28613a,
    178.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    181.1999969482422 * _0x28613a,
    175.8125 * _0x28613a,
    182.1999969482422 * _0x28613a,
    174.8125 * _0x28613a,
    185.1999969482422 * _0x28613a,
    173.8125 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    192.1999969482422 * _0x28613a,
    173.61249542236328 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    194.1999969482422 * _0x28613a,
    172.61249542236328 * _0x28613a,
    196.1999969482422 * _0x28613a,
    171.61249542236328 * _0x28613a,
    199.1999969482422 * _0x28613a,
    173.61249542236328 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    197.6999969482422 * _0x28613a,
    179.61249542236328 * _0x28613a,
    197.6999969482422 * _0x28613a,
    179.61249542236328 * _0x28613a,
    196.1999969482422 * _0x28613a,
    185.61249542236328 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    194.1999969482422 * _0x28613a,
    179.61249542236328 * _0x28613a,
    194.1999969482422 * _0x28613a,
    179.61249542236328 * _0x28613a,
    192.1999969482422 * _0x28613a,
    173.61249542236328 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    205.1999969482422 * _0x28613a,
    176.2125015258789 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    210.1999969482422 * _0x28613a,
    178.2125015258789 * _0x28613a,
    211.1999969482422 * _0x28613a,
    179.2125015258789 * _0x28613a,
    211.1999969482422 * _0x28613a,
    181.2125015258789 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.6999969482422 * _0x28613a,
    184.7125015258789 * _0x28613a,
    206.6999969482422 * _0x28613a,
    184.7125015258789 * _0x28613a,
    202.1999969482422 * _0x28613a,
    188.2125015258789 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    203.6999969482422 * _0x28613a,
    182.2125015258789 * _0x28613a,
    203.6999969482422 * _0x28613a,
    182.2125015258789 * _0x28613a,
    205.1999969482422 * _0x28613a,
    176.2125015258789 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    214.1999969482422 * _0x28613a,
    187.21249985694885 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    216.1999969482422 * _0x28613a,
    191.21249985694885 * _0x28613a,
    216.1999969482422 * _0x28613a,
    192.21249985694885 * _0x28613a,
    215.1999969482422 * _0x28613a,
    195.21249985694885 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.1999969482422 * _0x28613a,
    194.21249985694885 * _0x28613a,
    205.1999969482422 * _0x28613a,
    194.21249985694885 * _0x28613a,
    205.1999969482422 * _0x28613a,
    194.21249985694885 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    209.6999969482422 * _0x28613a,
    190.71249985694885 * _0x28613a,
    209.6999969482422 * _0x28613a,
    190.71249985694885 * _0x28613a,
    214.1999969482422 * _0x28613a,
    187.21249985694885 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(204.1999969482422 * _0x28613a, 201.8125 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    209.1999969482422 * _0x28613a,
    201.3125 * _0x28613a,
    209.1999969482422 * _0x28613a,
    201.3125 * _0x28613a,
    214.1999969482422 * _0x28613a,
    200.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    215.1999969482422 * _0x28613a,
    204.8125 * _0x28613a,
    214.1999969482422 * _0x28613a,
    205.8125 * _0x28613a,
    213.1999969482422 * _0x28613a,
    208.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    208.6999969482422 * _0x28613a,
    205.3125 * _0x28613a,
    208.6999969482422 * _0x28613a,
    205.3125 * _0x28613a,
    204.1999969482422 * _0x28613a,
    201.8125 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    199.1999969482422 * _0x28613a,
    205.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    207.1999969482422 * _0x28613a,
    212.61249923706055 * _0x28613a,
    203.6999969482422 * _0x28613a,
    209.11249923706055 * _0x28613a,
    208.1999969482422 * _0x28613a,
    212.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    206.1999969482422 * _0x28613a,
    215.61249923706055 * _0x28613a,
    204.1999969482422 * _0x28613a,
    217.61249923706055 * _0x28613a,
    203.1999969482422 * _0x28613a,
    216.61249923706055 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    201.1999969482422 * _0x28613a,
    211.11249923706055 * _0x28613a,
    201.1999969482422 * _0x28613a,
    211.11249923706055 * _0x28613a,
    199.1999969482422 * _0x28613a,
    205.61249923706055 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    191.1999969482422 * _0x28613a,
    207.01250076293945 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    194.1999969482422 * _0x28613a,
    213.01250076293945 * _0x28613a,
    194.1999969482422 * _0x28613a,
    216.01250076293945 * _0x28613a,
    196.1999969482422 * _0x28613a,
    218.01250076293945 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    193.1999969482422 * _0x28613a,
    220.01250076293945 * _0x28613a,
    190.1999969482422 * _0x28613a,
    220.01250076293945 * _0x28613a,
    188.1999969482422 * _0x28613a,
    218.01250076293945 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    189.6999969482422 * _0x28613a,
    213.01250076293945 * _0x28613a,
    189.6999969482422 * _0x28613a,
    213.01250076293945 * _0x28613a,
    191.1999969482422 * _0x28613a,
    208.01250076293945 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    186.1999969482422 * _0x28613a,
    203.21249961853027 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    184.1999969482422 * _0x28613a,
    209.21249961853027 * _0x28613a,
    184.1999969482422 * _0x28613a,
    209.21249961853027 * _0x28613a,
    182.1999969482422 * _0x28613a,
    215.21249961853027 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    177.1999969482422 * _0x28613a,
    212.21249961853027 * _0x28613a,
    176.1999969482422 * _0x28613a,
    211.21249961853027 * _0x28613a,
    177.1999969482422 * _0x28613a,
    210.21249961853027 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    181.6999969482422 * _0x28613a,
    206.71249961853027 * _0x28613a,
    181.6999969482422 * _0x28613a,
    206.71249961853027 * _0x28613a,
    186.1999969482422 * _0x28613a,
    203.21249961853027 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(183.1999969482422 * _0x28613a, 196.8125 * _0x28613a);
  _0x4d10a0.bezierCurveTo(
    177.1999969482422 * _0x28613a,
    196.3125 * _0x28613a,
    177.1999969482422 * _0x28613a,
    196.3125 * _0x28613a,
    171.1999969482422 * _0x28613a,
    195.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    171.1999969482422 * _0x28613a,
    199.8125 * _0x28613a,
    171.1999969482422 * _0x28613a,
    202.8125 * _0x28613a,
    174.1999969482422 * _0x28613a,
    204.8125 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    178.6999969482422 * _0x28613a,
    200.8125 * _0x28613a,
    178.6999969482422 * _0x28613a,
    200.8125 * _0x28613a,
    183.1999969482422 * _0x28613a,
    196.8125 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  _0x4d10a0.beginPath();
  _0x4d10a0.lineCap = "round";
  _0x4d10a0.lineJoin = "round";
  _0x4d10a0.moveTo(
    185.1999969482422 * _0x28613a,
    190.21249771118164 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    179.6999969482422 * _0x28613a,
    186.71249771118164 * _0x28613a,
    179.6999969482422 * _0x28613a,
    186.71249771118164 * _0x28613a,
    174.1999969482422 * _0x28613a,
    183.21249771118164 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    172.1999969482422 * _0x28613a,
    186.21249771118164 * _0x28613a,
    172.1999969482422 * _0x28613a,
    187.21249771118164 * _0x28613a,
    172.1999969482422 * _0x28613a,
    190.21249771118164 * _0x28613a
  );
  _0x4d10a0.bezierCurveTo(
    178.1999969482422 * _0x28613a,
    190.21249771118164 * _0x28613a,
    178.1999969482422 * _0x28613a,
    190.21249771118164 * _0x28613a,
    184.1999969482422 * _0x28613a,
    190.21249771118164 * _0x28613a
  );
  _0x4d10a0.closePath();
  fill_path(_0x4d10a0, _0x5b96e2[11]);
  circle(
    _0x4d10a0,
    126.19999694824219 * _0x28613a,
    169.8125 * _0x28613a,
    8.94427190999916 * _0x28613a
  );
  fill_path(_0x4d10a0, _0x5b96e2[12]);
  circle(
    _0x4d10a0,
    123.19999694824219 * _0x28613a,
    164.8125 * _0x28613a,
    2.8284271247461903 * _0x28613a
  );
  fill_path(_0x4d10a0, _0x5b96e2[13]);
  circle(
    _0x4d10a0,
    253.1999969482422 * _0x28613a,
    169.8125 * _0x28613a,
    8.94427190999916 * _0x28613a
  );
  fill_path(_0x4d10a0, _0x5b96e2[12]);
  circle(
    _0x4d10a0,
    255.1999969482422 * _0x28613a,
    164.8125 * _0x28613a,
    2.23606797749979 * _0x28613a
  );
  fill_path(_0x4d10a0, _0x5b96e2[13]);
  return _0x59e3bb;
}
function create_bread(_0x32740e, _0x32fa04, _0x321639) {
  var _0x2f822b = document.createElement("canvas");
  var _0x47269e = _0x2f822b.getContext("2d");
  _0x2f822b.width = 400 * _0x32740e;
  _0x2f822b.height = 400 * _0x32740e;
  _0x47269e.globalAlpha = 1;
  _0x47269e.translate(20 * _0x32740e, 20 * _0x32740e);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(36.5 * _0x32740e, 278.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    67.5 * _0x32740e,
    316.0625 * _0x32740e,
    134.5 * _0x32740e,
    334.0625 * _0x32740e,
    199.5 * _0x32740e,
    319.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    254.5 * _0x32740e,
    304.0625 * _0x32740e,
    346.5 * _0x32740e,
    270.0625 * _0x32740e,
    348.5 * _0x32740e,
    237.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    359.5 * _0x32740e,
    206.0625 * _0x32740e,
    318.5 * _0x32740e,
    129.0625 * _0x32740e,
    262.5 * _0x32740e,
    122.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    213.5 * _0x32740e,
    115.0625 * _0x32740e,
    166.5 * _0x32740e,
    133.0625 * _0x32740e,
    104.5 * _0x32740e,
    166.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    54.5 * _0x32740e,
    194.0625 * _0x32740e,
    23.5 * _0x32740e,
    241.0625 * _0x32740e,
    36.5 * _0x32740e,
    277.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, _0x321639[0]);
  _0x47269e.translate(-20 * _0x32740e, -20 * _0x32740e);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(36.5 * _0x32740e, 278.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    67.5 * _0x32740e,
    316.0625 * _0x32740e,
    134.5 * _0x32740e,
    334.0625 * _0x32740e,
    199.5 * _0x32740e,
    319.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    254.5 * _0x32740e,
    304.0625 * _0x32740e,
    346.5 * _0x32740e,
    270.0625 * _0x32740e,
    348.5 * _0x32740e,
    237.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    359.5 * _0x32740e,
    206.0625 * _0x32740e,
    318.5 * _0x32740e,
    129.0625 * _0x32740e,
    262.5 * _0x32740e,
    122.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    213.5 * _0x32740e,
    115.0625 * _0x32740e,
    166.5 * _0x32740e,
    133.0625 * _0x32740e,
    104.5 * _0x32740e,
    166.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    54.5 * _0x32740e,
    194.0625 * _0x32740e,
    23.5 * _0x32740e,
    241.0625 * _0x32740e,
    36.5 * _0x32740e,
    277.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, _0x321639[1], _0x321639[2], 19 * _0x32740e);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(214.5 * _0x32740e, 124.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    242.5 * _0x32740e,
    125.0625 * _0x32740e,
    272.5 * _0x32740e,
    159.0625 * _0x32740e,
    283.5 * _0x32740e,
    184.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    277.5 * _0x32740e,
    161.0625 * _0x32740e,
    233.5 * _0x32740e,
    128.0625 * _0x32740e,
    219.5 * _0x32740e,
    122.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, undefined, _0x321639[2], 19 * _0x32740e);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(157.5 * _0x32740e, 145.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    176.5 * _0x32740e,
    148.0625 * _0x32740e,
    205.5 * _0x32740e,
    176.0625 * _0x32740e,
    212.5 * _0x32740e,
    197.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    205.5 * _0x32740e,
    178.0625 * _0x32740e,
    177.5 * _0x32740e,
    152.0625 * _0x32740e,
    156.5 * _0x32740e,
    142.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, undefined, _0x321639[2], 19 * _0x32740e);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(103.5 * _0x32740e, 169.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    160.5 * _0x32740e,
    166.0625 * _0x32740e,
    228.5 * _0x32740e,
    312.0625 * _0x32740e,
    162.5 * _0x32740e,
    323.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    128.5 * _0x32740e,
    330.0625 * _0x32740e,
    45.5 * _0x32740e,
    312.0625 * _0x32740e,
    34.5 * _0x32740e,
    268.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    30.5 * _0x32740e,
    238.0625 * _0x32740e,
    44.5 * _0x32740e,
    222.0625 * _0x32740e,
    52.5 * _0x32740e,
    211.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    82.5 * _0x32740e,
    174.0625 * _0x32740e,
    104.5 * _0x32740e,
    166.0625 * _0x32740e,
    119.5 * _0x32740e,
    172.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, _0x321639[3], _0x321639[2], 19 * _0x32740e);
  circle(
    _0x47269e,
    92.5 * _0x32740e,
    216.0625 * _0x32740e,
    13.892443989449804 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    68.5 * _0x32740e,
    227.0625 * _0x32740e,
    8.06225774829855 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    85.5 * _0x32740e,
    240.0625 * _0x32740e,
    6.708203932499369 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    147.5 * _0x32740e,
    294.0625 * _0x32740e,
    17.46424919657298 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    166.5 * _0x32740e,
    273.0625 * _0x32740e,
    6.708203932499369 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    114.5 * _0x32740e,
    294.0625 * _0x32740e,
    12.36931687685298 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    123.5 * _0x32740e,
    220.0625 * _0x32740e,
    5.830951894845301 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    114.5 * _0x32740e,
    259.0625 * _0x32740e,
    4.123105625617661 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    63.5 * _0x32740e,
    265.0625 * _0x32740e,
    5.385164807134504 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  circle(
    _0x47269e,
    148.5 * _0x32740e,
    235.0625 * _0x32740e,
    4.47213595499958 * _0x32740e
  );
  fill_path(_0x47269e, _0x321639[4]);
  _0x47269e.beginPath();
  _0x47269e.lineCap = "round";
  _0x47269e.lineJoin = "round";
  _0x47269e.moveTo(194.5 * _0x32740e, 313.0625 * _0x32740e);
  _0x47269e.bezierCurveTo(
    222.5 * _0x32740e,
    306.0625 * _0x32740e,
    319.5 * _0x32740e,
    271.0625 * _0x32740e,
    337.5 * _0x32740e,
    241.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    274.5 * _0x32740e,
    270.0625 * _0x32740e,
    216.5 * _0x32740e,
    288.0625 * _0x32740e,
    199.5 * _0x32740e,
    287.0625 * _0x32740e
  );
  _0x47269e.bezierCurveTo(
    198.5 * _0x32740e,
    302.0625 * _0x32740e,
    195.5 * _0x32740e,
    311.0625 * _0x32740e,
    193.5 * _0x32740e,
    312.0625 * _0x32740e
  );
  _0x47269e.closePath();
  fill_path(_0x47269e, _0x321639[5]);
  return _0x2f822b;
}
function create_hurt_kraken(_0x44cdf6, _0x2e4071) {
  var _0xa9a444 = document.createElement("canvas");
  var _0x25fdf9 = _0xa9a444.getContext("2d");
  _0xa9a444.width = 376 * _0x44cdf6;
  _0xa9a444.height = 371 * _0x44cdf6;
  _0x25fdf9.globalAlpha = 1;
  _0x25fdf9.beginPath();
  _0x25fdf9.lineCap = "round";
  _0x25fdf9.lineJoin = "round";
  _0x25fdf9.moveTo(
    191.633544921875 * _0x44cdf6,
    123.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    215.633544921875 * _0x44cdf6,
    85.98580932617188 * _0x44cdf6,
    187.633544921875 * _0x44cdf6,
    71.98580932617188 * _0x44cdf6,
    202.633544921875 * _0x44cdf6,
    19.985809326171875 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    231.633544921875 * _0x44cdf6,
    68.98580932617188 * _0x44cdf6,
    253.633544921875 * _0x44cdf6,
    71.98580932617188 * _0x44cdf6,
    256.633544921875 * _0x44cdf6,
    93.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    306.633544921875 * _0x44cdf6,
    64.98580932617188 * _0x44cdf6,
    319.633544921875 * _0x44cdf6,
    61.985809326171875 * _0x44cdf6,
    350.633544921875 * _0x44cdf6,
    58.985809326171875 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    280.633544921875 * _0x44cdf6,
    86.98580932617188 * _0x44cdf6,
    281.633544921875 * _0x44cdf6,
    106.98580932617188 * _0x44cdf6,
    268.633544921875 * _0x44cdf6,
    130.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    295.633544921875 * _0x44cdf6,
    158.98580932617188 * _0x44cdf6,
    328.633544921875 * _0x44cdf6,
    155.98580932617188 * _0x44cdf6,
    353.633544921875 * _0x44cdf6,
    90.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    371.633544921875 * _0x44cdf6,
    158.98580932617188 * _0x44cdf6,
    337.633544921875 * _0x44cdf6,
    210.98580932617188 * _0x44cdf6,
    286.633544921875 * _0x44cdf6,
    209.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    323.633544921875 * _0x44cdf6,
    230.98580932617188 * _0x44cdf6,
    317.633544921875 * _0x44cdf6,
    274.9858093261719 * _0x44cdf6,
    356.633544921875 * _0x44cdf6,
    305.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    288.633544921875 * _0x44cdf6,
    297.9858093261719 * _0x44cdf6,
    288.633544921875 * _0x44cdf6,
    265.9858093261719 * _0x44cdf6,
    275.633544921875 * _0x44cdf6,
    266.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    280.633544921875 * _0x44cdf6,
    294.9858093261719 * _0x44cdf6,
    315.633544921875 * _0x44cdf6,
    306.9858093261719 * _0x44cdf6,
    336.633544921875 * _0x44cdf6,
    316.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    295.633544921875 * _0x44cdf6,
    318.9858093261719 * _0x44cdf6,
    264.633544921875 * _0x44cdf6,
    302.9858093261719 * _0x44cdf6,
    254.633544921875 * _0x44cdf6,
    289.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    252.633544921875 * _0x44cdf6,
    301.9858093261719 * _0x44cdf6,
    224.633544921875 * _0x44cdf6,
    315.9858093261719 * _0x44cdf6,
    201.633544921875 * _0x44cdf6,
    356.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    195.633544921875 * _0x44cdf6,
    313.9858093261719 * _0x44cdf6,
    195.633544921875 * _0x44cdf6,
    308.9858093261719 * _0x44cdf6,
    196.633544921875 * _0x44cdf6,
    307.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    197.633544921875 * _0x44cdf6,
    289.9858093261719 * _0x44cdf6,
    207.633544921875 * _0x44cdf6,
    283.9858093261719 * _0x44cdf6,
    195.633544921875 * _0x44cdf6,
    258.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    182.633544921875 * _0x44cdf6,
    282.9858093261719 * _0x44cdf6,
    190.633544921875 * _0x44cdf6,
    287.9858093261719 * _0x44cdf6,
    193.633544921875 * _0x44cdf6,
    297.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    195.633544921875 * _0x44cdf6,
    306.9858093261719 * _0x44cdf6,
    191.633544921875 * _0x44cdf6,
    334.9858093261719 * _0x44cdf6,
    187.633544921875 * _0x44cdf6,
    354.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    165.633544921875 * _0x44cdf6,
    320.9858093261719 * _0x44cdf6,
    138.633544921875 * _0x44cdf6,
    307.9858093261719 * _0x44cdf6,
    135.633544921875 * _0x44cdf6,
    288.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    110.633544921875 * _0x44cdf6,
    318.9858093261719 * _0x44cdf6,
    68.633544921875 * _0x44cdf6,
    323.9858093261719 * _0x44cdf6,
    49.633544921875 * _0x44cdf6,
    320.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    88.633544921875 * _0x44cdf6,
    308.9858093261719 * _0x44cdf6,
    108.633544921875 * _0x44cdf6,
    284.9858093261719 * _0x44cdf6,
    118.633544921875 * _0x44cdf6,
    258.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    86.633544921875 * _0x44cdf6,
    264.9858093261719 * _0x44cdf6,
    75.633544921875 * _0x44cdf6,
    310.9858093261719 * _0x44cdf6,
    19.633544921875 * _0x44cdf6,
    304.9858093261719 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    54.633544921875 * _0x44cdf6,
    276.9858093261719 * _0x44cdf6,
    59.633544921875 * _0x44cdf6,
    214.98580932617188 * _0x44cdf6,
    105.633544921875 * _0x44cdf6,
    205.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    14.633544921875 * _0x44cdf6,
    201.98580932617188 * _0x44cdf6,
    24.633544921875 * _0x44cdf6,
    141.98580932617188 * _0x44cdf6,
    25.633544921875 * _0x44cdf6,
    82.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    49.633544921875 * _0x44cdf6,
    168.98580932617188 * _0x44cdf6,
    87.633544921875 * _0x44cdf6,
    141.98580932617188 * _0x44cdf6,
    112.633544921875 * _0x44cdf6,
    123.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    95.633544921875 * _0x44cdf6,
    75.98580932617188 * _0x44cdf6,
    70.633544921875 * _0x44cdf6,
    68.98580932617188 * _0x44cdf6,
    35.633544921875 * _0x44cdf6,
    50.985809326171875 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    70.633544921875 * _0x44cdf6,
    53.985809326171875 * _0x44cdf6,
    102.633544921875 * _0x44cdf6,
    65.98580932617188 * _0x44cdf6,
    125.633544921875 * _0x44cdf6,
    84.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    133.633544921875 * _0x44cdf6,
    69.98580932617188 * _0x44cdf6,
    166.633544921875 * _0x44cdf6,
    42.985809326171875 * _0x44cdf6,
    176.633544921875 * _0x44cdf6,
    21.985809326171875 * _0x44cdf6
  );
  _0x25fdf9.bezierCurveTo(
    185.633544921875 * _0x44cdf6,
    49.985809326171875 * _0x44cdf6,
    168.633544921875 * _0x44cdf6,
    95.98580932617188 * _0x44cdf6,
    191.633544921875 * _0x44cdf6,
    121.98580932617188 * _0x44cdf6
  );
  _0x25fdf9.closePath();
  fill_path(_0x25fdf9, _0x2e4071[0], _0x2e4071[0], 12 * _0x44cdf6);
  return _0xa9a444;
}
function create_bread_oven_off(_0x5d103b, _0x2451ff, _0x25642d) {
  var _0x4bbe9b = document.createElement("canvas");
  var _0x3cf2e5 = _0x4bbe9b.getContext("2d");
  _0x4bbe9b.width = 440 * _0x5d103b;
  _0x4bbe9b.height = 388 * _0x5d103b;
  _0x3cf2e5.globalAlpha = _0x2451ff ? 0.5 : 1;
  _0x3cf2e5.translate(5 * _0x5d103b, 5 * _0x5d103b);
  circle(
    _0x3cf2e5,
    220 * _0x5d103b,
    201 * _0x5d103b,
    170.41713528867922 * _0x5d103b
  );
  fill_path(_0x3cf2e5, _0x25642d[0], _0x25642d[0], 6 * _0x5d103b);
  _0x3cf2e5.globalAlpha = 1;
  _0x3cf2e5.translate(-5 * _0x5d103b, -5 * _0x5d103b);
  circle(
    _0x3cf2e5,
    220 * _0x5d103b,
    201 * _0x5d103b,
    170.41713528867922 * _0x5d103b
  );
  fill_path(_0x3cf2e5, _0x25642d[1], _0x25642d[2], 6 * _0x5d103b);
  circle(_0x3cf2e5, 220 * _0x5d103b, 201 * _0x5d103b, 130 * _0x5d103b);
  fill_path(_0x3cf2e5, _0x25642d[11], _0x25642d[2], 6 * _0x5d103b);
  circle(
    _0x3cf2e5,
    222 * _0x5d103b,
    199 * _0x5d103b,
    120.74767078498864 * _0x5d103b
  );
  fill_path(_0x3cf2e5, undefined, _0x25642d[3], 40 * _0x5d103b);
  circle(
    _0x3cf2e5,
    220 * _0x5d103b,
    200 * _0x5d103b,
    95.44108130150245 * _0x5d103b
  );
  fill_path(_0x3cf2e5, undefined, _0x25642d[2], 15 * _0x5d103b);
  _0x3cf2e5.globalAlpha = _0x2451ff ? 0.5 : 1;
  _0x3cf2e5.translate(5 * _0x5d103b, 5 * _0x5d103b);
  circle(
    _0x3cf2e5,
    63 * _0x5d103b,
    136 * _0x5d103b,
    49.193495504995376 * _0x5d103b
  );
  fill_path(_0x3cf2e5, _0x25642d[0], _0x25642d[0], 4 * _0x5d103b);
  _0x3cf2e5.globalAlpha = 1;
  _0x3cf2e5.translate(-5 * _0x5d103b, -5 * _0x5d103b);
  circle(
    _0x3cf2e5,
    63 * _0x5d103b,
    136 * _0x5d103b,
    49.193495504995376 * _0x5d103b
  );
  fill_path(_0x3cf2e5, _0x25642d[8], _0x25642d[2], 4 * _0x5d103b);
  circle(
    _0x3cf2e5,
    63 * _0x5d103b,
    137 * _0x5d103b,
    25.632011235952593 * _0x5d103b
  );
  fill_path(_0x3cf2e5, _0x25642d[7], _0x25642d[2], 4 * _0x5d103b);
  return _0x4bbe9b;
}
function create_bread_oven(_0x133e11, _0x127083, _0x36b1c5) {
  var _0x4bcb0b = document.createElement("canvas");
  var _0x1e7fd3 = _0x4bcb0b.getContext("2d");
  _0x4bcb0b.width = 440 * _0x133e11;
  _0x4bcb0b.height = 388 * _0x133e11;
  _0x1e7fd3.globalAlpha = _0x127083 ? 0.5 : 1;
  _0x1e7fd3.translate(5 * _0x133e11, 5 * _0x133e11);
  circle(
    _0x1e7fd3,
    220 * _0x133e11,
    201 * _0x133e11,
    170.41713528867922 * _0x133e11
  );
  fill_path(_0x1e7fd3, _0x36b1c5[0], _0x36b1c5[0], 6 * _0x133e11);
  _0x1e7fd3.globalAlpha = 1;
  _0x1e7fd3.translate(-5 * _0x133e11, -5 * _0x133e11);
  circle(
    _0x1e7fd3,
    220 * _0x133e11,
    201 * _0x133e11,
    170.41713528867922 * _0x133e11
  );
  fill_path(_0x1e7fd3, _0x36b1c5[1], _0x36b1c5[2], 6 * _0x133e11);
  circle(_0x1e7fd3, 220 * _0x133e11, 201 * _0x133e11, 130 * _0x133e11);
  fill_path(_0x1e7fd3, _0x36b1c5[11], _0x36b1c5[2], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(218 * _0x133e11, 97 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    219 * _0x133e11,
    163 * _0x133e11,
    201 * _0x133e11,
    176 * _0x133e11,
    191 * _0x133e11,
    175 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    176 * _0x133e11,
    177 * _0x133e11,
    168 * _0x133e11,
    167 * _0x133e11,
    160 * _0x133e11,
    115 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(224 * _0x133e11, 181 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    225 * _0x133e11,
    138 * _0x133e11,
    246 * _0x133e11,
    115 * _0x133e11,
    263 * _0x133e11,
    137 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    282 * _0x133e11,
    174 * _0x133e11,
    279 * _0x133e11,
    217 * _0x133e11,
    265 * _0x133e11,
    243 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    253 * _0x133e11,
    264 * _0x133e11,
    240 * _0x133e11,
    256 * _0x133e11,
    233 * _0x133e11,
    238 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    221 * _0x133e11,
    212 * _0x133e11,
    225 * _0x133e11,
    198 * _0x133e11,
    224 * _0x133e11,
    184 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(169 * _0x133e11, 289 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    161 * _0x133e11,
    234 * _0x133e11,
    168 * _0x133e11,
    197 * _0x133e11,
    187 * _0x133e11,
    195 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    219 * _0x133e11,
    189 * _0x133e11,
    222 * _0x133e11,
    256 * _0x133e11,
    216 * _0x133e11,
    307 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(143 * _0x133e11, 146 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    161 * _0x133e11,
    199 * _0x133e11,
    151 * _0x133e11,
    245 * _0x133e11,
    138 * _0x133e11,
    266 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    120.5 * _0x133e11,
    239.5 * _0x133e11,
    120.5 * _0x133e11,
    239.5 * _0x133e11,
    103 * _0x133e11,
    213 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(283 * _0x133e11, 135 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    277 * _0x133e11,
    176 * _0x133e11,
    298 * _0x133e11,
    194 * _0x133e11,
    315 * _0x133e11,
    205 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    323.5 * _0x133e11,
    175 * _0x133e11,
    323.5 * _0x133e11,
    175 * _0x133e11,
    332 * _0x133e11,
    145 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(318 * _0x133e11, 223 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    290 * _0x133e11,
    195 * _0x133e11,
    271 * _0x133e11,
    256 * _0x133e11,
    283 * _0x133e11,
    281 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    303.5 * _0x133e11,
    267 * _0x133e11,
    303.5 * _0x133e11,
    267 * _0x133e11,
    324 * _0x133e11,
    253 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[5], _0x36b1c5[6], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(142 * _0x133e11, 223 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    128 * _0x133e11,
    213 * _0x133e11,
    123 * _0x133e11,
    214 * _0x133e11,
    111 * _0x133e11,
    223 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[10], _0x36b1c5[10], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(251 * _0x133e11, 133 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    269 * _0x133e11,
    188 * _0x133e11,
    262 * _0x133e11,
    229 * _0x133e11,
    251 * _0x133e11,
    253 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    288 * _0x133e11,
    224 * _0x133e11,
    273 * _0x133e11,
    139 * _0x133e11,
    252 * _0x133e11,
    133 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[10], _0x36b1c5[10], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(203 * _0x133e11, 102 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    204 * _0x133e11,
    136 * _0x133e11,
    200 * _0x133e11,
    159 * _0x133e11,
    189 * _0x133e11,
    174 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    223 * _0x133e11,
    164 * _0x133e11,
    219 * _0x133e11,
    87 * _0x133e11,
    205 * _0x133e11,
    83 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[10], _0x36b1c5[10], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(196 * _0x133e11, 324 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    209 * _0x133e11,
    239 * _0x133e11,
    200 * _0x133e11,
    219 * _0x133e11,
    192 * _0x133e11,
    196 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    229 * _0x133e11,
    216 * _0x133e11,
    219 * _0x133e11,
    316 * _0x133e11,
    198 * _0x133e11,
    325 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, _0x36b1c5[10], _0x36b1c5[10], 4 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(266 * _0x133e11, 166 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    249 * _0x133e11,
    154 * _0x133e11,
    243 * _0x133e11,
    161 * _0x133e11,
    233 * _0x133e11,
    167 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(269 * _0x133e11, 192 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    256 * _0x133e11,
    183 * _0x133e11,
    241 * _0x133e11,
    186 * _0x133e11,
    233 * _0x133e11,
    192 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(263 * _0x133e11, 217 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    251 * _0x133e11,
    211 * _0x133e11,
    242 * _0x133e11,
    213 * _0x133e11,
    236 * _0x133e11,
    218 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(204 * _0x133e11, 141 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    191 * _0x133e11,
    131 * _0x133e11,
    187 * _0x133e11,
    133 * _0x133e11,
    176 * _0x133e11,
    141 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(207 * _0x133e11, 230 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    193 * _0x133e11,
    222 * _0x133e11,
    185 * _0x133e11,
    224 * _0x133e11,
    177 * _0x133e11,
    231 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(210 * _0x133e11, 258 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    196 * _0x133e11,
    247 * _0x133e11,
    191 * _0x133e11,
    250 * _0x133e11,
    177 * _0x133e11,
    259 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(145 * _0x133e11, 196 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    130 * _0x133e11,
    186 * _0x133e11,
    124 * _0x133e11,
    187 * _0x133e11,
    114 * _0x133e11,
    195 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(218 * _0x133e11, 97 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    219 * _0x133e11,
    163 * _0x133e11,
    201 * _0x133e11,
    176 * _0x133e11,
    191 * _0x133e11,
    175 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    176 * _0x133e11,
    177 * _0x133e11,
    168 * _0x133e11,
    167 * _0x133e11,
    160 * _0x133e11,
    115 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(224 * _0x133e11, 181 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    225 * _0x133e11,
    138 * _0x133e11,
    246 * _0x133e11,
    115 * _0x133e11,
    263 * _0x133e11,
    137 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    282 * _0x133e11,
    174 * _0x133e11,
    279 * _0x133e11,
    217 * _0x133e11,
    265 * _0x133e11,
    243 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    253 * _0x133e11,
    264 * _0x133e11,
    240 * _0x133e11,
    256 * _0x133e11,
    233 * _0x133e11,
    238 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    221 * _0x133e11,
    212 * _0x133e11,
    225 * _0x133e11,
    198 * _0x133e11,
    224 * _0x133e11,
    184 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(169 * _0x133e11, 289 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    161 * _0x133e11,
    234 * _0x133e11,
    168 * _0x133e11,
    197 * _0x133e11,
    187 * _0x133e11,
    195 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    219 * _0x133e11,
    189 * _0x133e11,
    222 * _0x133e11,
    256 * _0x133e11,
    216 * _0x133e11,
    307 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(143 * _0x133e11, 146 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    161 * _0x133e11,
    199 * _0x133e11,
    151 * _0x133e11,
    245 * _0x133e11,
    138 * _0x133e11,
    266 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    120.5 * _0x133e11,
    239.5 * _0x133e11,
    120.5 * _0x133e11,
    239.5 * _0x133e11,
    103 * _0x133e11,
    213 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(283 * _0x133e11, 135 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    277 * _0x133e11,
    176 * _0x133e11,
    298 * _0x133e11,
    194 * _0x133e11,
    315 * _0x133e11,
    205 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    323.5 * _0x133e11,
    175 * _0x133e11,
    323.5 * _0x133e11,
    175 * _0x133e11,
    332 * _0x133e11,
    145 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  _0x1e7fd3.beginPath();
  _0x1e7fd3.lineCap = "round";
  _0x1e7fd3.lineJoin = "round";
  _0x1e7fd3.moveTo(318 * _0x133e11, 223 * _0x133e11);
  _0x1e7fd3.bezierCurveTo(
    290 * _0x133e11,
    195 * _0x133e11,
    271 * _0x133e11,
    256 * _0x133e11,
    283 * _0x133e11,
    281 * _0x133e11
  );
  _0x1e7fd3.bezierCurveTo(
    303.5 * _0x133e11,
    267 * _0x133e11,
    303.5 * _0x133e11,
    267 * _0x133e11,
    324 * _0x133e11,
    253 * _0x133e11
  );
  _0x1e7fd3.closePath();
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[6], 6 * _0x133e11);
  circle(
    _0x1e7fd3,
    222 * _0x133e11,
    199 * _0x133e11,
    120.74767078498864 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[3], 40 * _0x133e11);
  circle(
    _0x1e7fd3,
    220 * _0x133e11,
    200 * _0x133e11,
    95.44108130150245 * _0x133e11
  );
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[2], 15 * _0x133e11);
  circle(_0x1e7fd3, 220 * _0x133e11, 201 * _0x133e11, 85 * _0x133e11);
  fill_path(_0x1e7fd3, undefined, _0x36b1c5[4], 10 * _0x133e11);
  _0x1e7fd3.globalAlpha = 0.5;
  circle(_0x1e7fd3, 220 * _0x133e11, 201 * _0x133e11, 82 * _0x133e11);
  fill_path(_0x1e7fd3, _0x36b1c5[9]);
  _0x1e7fd3.globalAlpha = _0x127083 ? 0.5 : 1;
  _0x1e7fd3.translate(5 * _0x133e11, 5 * _0x133e11);
  circle(
    _0x1e7fd3,
    63 * _0x133e11,
    136 * _0x133e11,
    49.193495504995376 * _0x133e11
  );
  fill_path(_0x1e7fd3, _0x36b1c5[0], _0x36b1c5[0], 4 * _0x133e11);
  _0x1e7fd3.globalAlpha = 1;
  _0x1e7fd3.translate(-5 * _0x133e11, -5 * _0x133e11);
  circle(
    _0x1e7fd3,
    63 * _0x133e11,
    136 * _0x133e11,
    49.193495504995376 * _0x133e11
  );
  fill_path(_0x1e7fd3, _0x36b1c5[8], _0x36b1c5[2], 4 * _0x133e11);
  circle(
    _0x1e7fd3,
    63 * _0x133e11,
    137 * _0x133e11,
    25.632011235952593 * _0x133e11
  );
  fill_path(_0x1e7fd3, _0x36b1c5[7], _0x36b1c5[2], 4 * _0x133e11);
  return _0x4bcb0b;
}
function create_bread_light_down(_0x3658e6, _0x92c54f) {
  var _0x149a40 = document.createElement("canvas");
  var _0x16150b = _0x149a40.getContext("2d");
  _0x149a40.width = 110 * _0x3658e6;
  _0x149a40.height = 110 * _0x3658e6;
  _0x16150b.globalAlpha = 0.2;
  circle(_0x16150b, 55 * _0x3658e6, 55 * _0x3658e6, 55 * _0x3658e6);
  fill_path(_0x16150b, _0x92c54f[0]);
  return _0x149a40;
}
function create_bread_light_up(_0x420ee3, _0x1c3137) {
  var _0x4ebeb3 = document.createElement("canvas");
  var _0x13f317 = _0x4ebeb3.getContext("2d");
  _0x4ebeb3.width = 110 * _0x420ee3;
  _0x4ebeb3.height = 110 * _0x420ee3;
  _0x13f317.globalAlpha = 0.2;
  circle(_0x13f317, 55 * _0x420ee3, 55 * _0x420ee3, 55 * _0x420ee3);
  fill_path(_0x13f317, _0x1c3137[0]);
  return _0x4ebeb3;
}
function create_bridge(_0x423e23, _0x8f40df, _0x41b7e1) {
  var _0x470837 = document.createElement("canvas");
  var _0x35eaa7 = _0x470837.getContext("2d");
  _0x470837.width = 102 * _0x423e23;
  _0x470837.height = 102 * _0x423e23;
  _0x35eaa7.globalAlpha = _0x8f40df ? 0.5 : 1;
  _0x35eaa7.translate(3, 3);
  round_rect(
    _0x35eaa7,
    24 * _0x423e23,
    26 * _0x423e23,
    70 * _0x423e23,
    9 * _0x423e23,
    10 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[0]);
  round_rect(
    _0x35eaa7,
    26 * _0x423e23,
    70 * _0x423e23,
    70 * _0x423e23,
    9 * _0x423e23,
    10 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[0]);
  round_rect(
    _0x35eaa7,
    5 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[0]);
  round_rect(
    _0x35eaa7,
    40 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[0]);
  round_rect(
    _0x35eaa7,
    75 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[0]);
  _0x35eaa7.globalAlpha = 1;
  _0x35eaa7.translate(-3, -3);
  round_rect(
    _0x35eaa7,
    24 * _0x423e23,
    26 * _0x423e23,
    70 * _0x423e23,
    9 * _0x423e23,
    10 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[1]);
  round_rect(
    _0x35eaa7,
    26 * _0x423e23,
    70 * _0x423e23,
    70 * _0x423e23,
    9 * _0x423e23,
    10 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[1]);
  round_rect(
    _0x35eaa7,
    5 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[2], _0x41b7e1[3], 4 * _0x423e23);
  round_rect(
    _0x35eaa7,
    40 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[2], _0x41b7e1[3], 4 * _0x423e23);
  round_rect(
    _0x35eaa7,
    75 * _0x423e23,
    3 * _0x423e23,
    22 * _0x423e23,
    94 * _0x423e23,
    5 * _0x423e23
  );
  fill_path(_0x35eaa7, _0x41b7e1[2], _0x41b7e1[3], 4 * _0x423e23);
  return _0x470837;
}
function create_well_border(_0x4b489b, _0x3636cf) {
  var _0x3a015a = document.createElement("canvas");
  var _0x13ccd8 = _0x3a015a.getContext("2d");
  _0x3a015a.width = 496 * _0x4b489b;
  _0x3a015a.height = 520 * _0x4b489b;
  _0x13ccd8.globalAlpha = 1;
  _0x13ccd8.translate(0, -10 * _0x4b489b);
  circle(
    _0x13ccd8,
    247.01138305664062 * _0x4b489b,
    250.13068389892578 * _0x4b489b,
    232.81967270830015 * _0x4b489b
  );
  fill_path(_0x13ccd8, _0x3636cf[1], _0x3636cf[2], 14 * _0x4b489b);
  _0x13ccd8.globalCompositeOperation = "destination-out";
  circle(
    _0x13ccd8,
    247.01138305664062 * _0x4b489b,
    249.3125 * _0x4b489b,
    161.4465855941215 * _0x4b489b
  );
  fill_path(_0x13ccd8, _0x3636cf[0], _0x3636cf[0], 14 * _0x4b489b);
  _0x13ccd8.globalCompositeOperation = "source-over";
  return _0x3a015a;
}
function create_well(_0xd5590b, _0x3bf1d4, _0x28fb90) {
  var _0x5b7f16 = document.createElement("canvas");
  var _0x3f3903 = _0x5b7f16.getContext("2d");
  _0x5b7f16.width = 496 * _0xd5590b;
  _0x5b7f16.height = 520 * _0xd5590b;
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 10 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    19.000030517578125 * _0xd5590b,
    256.67613983154297 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    1.000030517578125 * _0xd5590b,
    332.67613983154297 * _0xd5590b,
    23.000030517578125 * _0xd5590b,
    404.67613983154297 * _0xd5590b,
    95.00003051757812 * _0xd5590b,
    463.67613983154297 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    128.00003051757812 * _0xd5590b,
    491.67613983154297 * _0xd5590b,
    165.00003051757812 * _0xd5590b,
    507.67613983154297 * _0xd5590b,
    194.00003051757812 * _0xd5590b,
    512.676139831543 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    280.0000305175781 * _0xd5590b,
    517.676139831543 * _0xd5590b,
    291.0000305175781 * _0xd5590b,
    516.676139831543 * _0xd5590b,
    342.0000305175781 * _0xd5590b,
    497.67613983154297 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    425.0000305175781 * _0xd5590b,
    454.67613983154297 * _0xd5590b,
    469.0000305175781 * _0xd5590b,
    392.67613983154297 * _0xd5590b,
    468.0000305175781 * _0xd5590b,
    300.67613983154297 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    408.5000305175781 * _0xd5590b,
    365.17613983154297 * _0xd5590b,
    408.5000305175781 * _0xd5590b,
    365.17613983154297 * _0xd5590b,
    349.0000305175781 * _0xd5590b,
    429.67613983154297 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    256.0000305175781 * _0xd5590b,
    473.67613983154297 * _0xd5590b,
    167.00003051757812 * _0xd5590b,
    459.67613983154297 * _0xd5590b,
    78.00003051757812 * _0xd5590b,
    384.67613983154297 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0]);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -10 * _0xd5590b);
  circle(
    _0x3f3903,
    247.01138305664062 * _0xd5590b,
    249.3125 * _0xd5590b,
    161.4465855941215 * _0xd5590b
  );
  fill_path(_0x3f3903, _0x28fb90[5], undefined, 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 10 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    65.00003051757812 * _0xd5590b,
    263.4034118652344 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    109.00003051757812 * _0xd5590b,
    160.40341186523438 * _0xd5590b,
    185.00003051757812 * _0xd5590b,
    128.40341186523438 * _0xd5590b,
    222.00003051757812 * _0xd5590b,
    124.40341186523438 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    277.0000305175781 * _0xd5590b,
    116.40341186523438 * _0xd5590b,
    339.0000305175781 * _0xd5590b,
    134.40341186523438 * _0xd5590b,
    379.0000305175781 * _0xd5590b,
    195.40341186523438 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    409.0000305175781 * _0xd5590b,
    242.40341186523438 * _0xd5590b,
    416.0000305175781 * _0xd5590b,
    256.4034118652344 * _0xd5590b,
    428.0000305175781 * _0xd5590b,
    304.4034118652344 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    457.0000305175781 * _0xd5590b,
    203.40341186523438 * _0xd5590b,
    449.0000305175781 * _0xd5590b,
    183.40341186523438 * _0xd5590b,
    438.0000305175781 * _0xd5590b,
    162.40341186523438 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    381.0000305175781 * _0xd5590b,
    73.40341186523438 * _0xd5590b,
    360.0000305175781 * _0xd5590b,
    66.40341186523438 * _0xd5590b,
    257.0000305175781 * _0xd5590b,
    46.403411865234375 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    191.00003051757812 * _0xd5590b,
    45.403411865234375 * _0xd5590b,
    142.00003051757812 * _0xd5590b,
    65.40341186523438 * _0xd5590b,
    101.00003051757812 * _0xd5590b,
    115.40341186523438 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0]);
  _0x3f3903.globalAlpha = 1;
  var _0x543ba8 = create_well_border(_0xd5590b, _0x28fb90);
  _0x3f3903.drawImage(_0x543ba8, 0, 0);
  _0x3f3903.translate(0, -10 * _0xd5590b);
  circle(
    _0x3f3903,
    247.01138305664062 * _0xd5590b,
    249.3125 * _0xd5590b,
    161.4465855941215 * _0xd5590b
  );
  fill_path(_0x3f3903, undefined, _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    325.0113830566406 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    349.5113830566406 * _0xd5590b,
    25.767059326171875 * _0xd5590b,
    349.5113830566406 * _0xd5590b,
    25.767059326171875 * _0xd5590b,
    374.0113830566406 * _0xd5590b,
    37.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    384.0113830566406 * _0xd5590b,
    44.767059326171875 * _0xd5590b,
    383.0113830566406 * _0xd5590b,
    50.767059326171875 * _0xd5590b,
    368.0113830566406 * _0xd5590b,
    68.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    352.5113830566406 * _0xd5590b,
    91.26705932617188 * _0xd5590b,
    352.5113830566406 * _0xd5590b,
    91.26705932617188 * _0xd5590b,
    337.0113830566406 * _0xd5590b,
    113.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    328.0113830566406 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    328.0113830566406 * _0xd5590b,
    121.76705932617188 * _0xd5590b,
    312.0113830566406 * _0xd5590b,
    112.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    303.0113830566406 * _0xd5590b,
    108.26705932617188 * _0xd5590b,
    303.0113830566406 * _0xd5590b,
    108.26705932617188 * _0xd5590b,
    294.0113830566406 * _0xd5590b,
    103.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    287.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    293.0113830566406 * _0xd5590b,
    84.76705932617188 * _0xd5590b,
    297.0113830566406 * _0xd5590b,
    67.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    302.0113830566406 * _0xd5590b,
    47.767059326171875 * _0xd5590b,
    302.0113830566406 * _0xd5590b,
    47.767059326171875 * _0xd5590b,
    307.0113830566406 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    310.0113830566406 * _0xd5590b,
    15.767059326171875 * _0xd5590b,
    317.0113830566406 * _0xd5590b,
    12.767059326171875 * _0xd5590b,
    323.0113830566406 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    325.0113830566406 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    349.5113830566406 * _0xd5590b,
    25.767059326171875 * _0xd5590b,
    349.5113830566406 * _0xd5590b,
    25.767059326171875 * _0xd5590b,
    374.0113830566406 * _0xd5590b,
    37.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    384.0113830566406 * _0xd5590b,
    44.767059326171875 * _0xd5590b,
    383.0113830566406 * _0xd5590b,
    50.767059326171875 * _0xd5590b,
    368.0113830566406 * _0xd5590b,
    68.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    352.5113830566406 * _0xd5590b,
    91.26705932617188 * _0xd5590b,
    352.5113830566406 * _0xd5590b,
    91.26705932617188 * _0xd5590b,
    337.0113830566406 * _0xd5590b,
    113.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    328.0113830566406 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    328.0113830566406 * _0xd5590b,
    121.76705932617188 * _0xd5590b,
    312.0113830566406 * _0xd5590b,
    112.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    303.0113830566406 * _0xd5590b,
    108.26705932617188 * _0xd5590b,
    303.0113830566406 * _0xd5590b,
    108.26705932617188 * _0xd5590b,
    294.0113830566406 * _0xd5590b,
    103.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    287.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    293.0113830566406 * _0xd5590b,
    84.76705932617188 * _0xd5590b,
    297.0113830566406 * _0xd5590b,
    67.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    302.0113830566406 * _0xd5590b,
    47.767059326171875 * _0xd5590b,
    302.0113830566406 * _0xd5590b,
    47.767059326171875 * _0xd5590b,
    307.0113830566406 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    310.0113830566406 * _0xd5590b,
    15.767059326171875 * _0xd5590b,
    317.0113830566406 * _0xd5590b,
    12.767059326171875 * _0xd5590b,
    323.0113830566406 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[3], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    403.0113830566406 * _0xd5590b,
    89.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    413.0113830566406 * _0xd5590b,
    76.76705932617188 * _0xd5590b,
    418.0113830566406 * _0xd5590b,
    79.76705932617188 * _0xd5590b,
    428.0113830566406 * _0xd5590b,
    92.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    435.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    435.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    442.0113830566406 * _0xd5590b,
    106.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    450.0113830566406 * _0xd5590b,
    116.76705932617188 * _0xd5590b,
    445.0113830566406 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    433.0113830566406 * _0xd5590b,
    128.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    408.0113830566406 * _0xd5590b,
    146.26705932617188 * _0xd5590b,
    408.0113830566406 * _0xd5590b,
    146.26705932617188 * _0xd5590b,
    383.0113830566406 * _0xd5590b,
    163.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    376.0113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    377.0113830566406 * _0xd5590b,
    165.76705932617188 * _0xd5590b,
    368.0113830566406 * _0xd5590b,
    156.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    359.0113830566406 * _0xd5590b,
    144.76705932617188 * _0xd5590b,
    359.0113830566406 * _0xd5590b,
    142.76705932617188 * _0xd5590b,
    367.0113830566406 * _0xd5590b,
    133.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    403.0113830566406 * _0xd5590b,
    89.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    413.0113830566406 * _0xd5590b,
    76.76705932617188 * _0xd5590b,
    418.0113830566406 * _0xd5590b,
    79.76705932617188 * _0xd5590b,
    428.0113830566406 * _0xd5590b,
    92.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    435.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    435.0113830566406 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    442.0113830566406 * _0xd5590b,
    106.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    450.0113830566406 * _0xd5590b,
    116.76705932617188 * _0xd5590b,
    445.0113830566406 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    433.0113830566406 * _0xd5590b,
    128.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    408.0113830566406 * _0xd5590b,
    146.26705932617188 * _0xd5590b,
    408.0113830566406 * _0xd5590b,
    146.26705932617188 * _0xd5590b,
    383.0113830566406 * _0xd5590b,
    163.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    376.0113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    377.0113830566406 * _0xd5590b,
    165.76705932617188 * _0xd5590b,
    368.0113830566406 * _0xd5590b,
    156.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    359.0113830566406 * _0xd5590b,
    144.76705932617188 * _0xd5590b,
    359.0113830566406 * _0xd5590b,
    142.76705932617188 * _0xd5590b,
    367.0113830566406 * _0xd5590b,
    133.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    228.01138305664062 * _0xd5590b,
    1.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    246.51138305664062 * _0xd5590b,
    3.267059326171875 * _0xd5590b,
    246.51138305664062 * _0xd5590b,
    3.267059326171875 * _0xd5590b,
    265.0113830566406 * _0xd5590b,
    4.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    273.0113830566406 * _0xd5590b,
    5.767059326171875 * _0xd5590b,
    275.0113830566406 * _0xd5590b,
    11.767059326171875 * _0xd5590b,
    270.0113830566406 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    264.0113830566406 * _0xd5590b,
    54.267059326171875 * _0xd5590b,
    264.0113830566406 * _0xd5590b,
    54.267059326171875 * _0xd5590b,
    258.0113830566406 * _0xd5590b,
    80.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    256.0113830566406 * _0xd5590b,
    92.76705932617188 * _0xd5590b,
    256.0113830566406 * _0xd5590b,
    94.76705932617188 * _0xd5590b,
    242.01138305664062 * _0xd5590b,
    93.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    226.01138305664062 * _0xd5590b,
    95.76705932617188 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    91.76705932617188 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    80.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    223.51138305664062 * _0xd5590b,
    50.267059326171875 * _0xd5590b,
    223.51138305664062 * _0xd5590b,
    50.267059326171875 * _0xd5590b,
    222.01138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    219.01138305664062 * _0xd5590b,
    8.767059326171875 * _0xd5590b,
    224.01138305664062 * _0xd5590b,
    4.767059326171875 * _0xd5590b,
    227.01138305664062 * _0xd5590b,
    2.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    228.01138305664062 * _0xd5590b,
    1.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    246.51138305664062 * _0xd5590b,
    3.267059326171875 * _0xd5590b,
    246.51138305664062 * _0xd5590b,
    3.267059326171875 * _0xd5590b,
    265.0113830566406 * _0xd5590b,
    4.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    273.0113830566406 * _0xd5590b,
    5.767059326171875 * _0xd5590b,
    275.0113830566406 * _0xd5590b,
    11.767059326171875 * _0xd5590b,
    270.0113830566406 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    264.0113830566406 * _0xd5590b,
    54.267059326171875 * _0xd5590b,
    264.0113830566406 * _0xd5590b,
    54.267059326171875 * _0xd5590b,
    258.0113830566406 * _0xd5590b,
    80.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    256.0113830566406 * _0xd5590b,
    92.76705932617188 * _0xd5590b,
    256.0113830566406 * _0xd5590b,
    94.76705932617188 * _0xd5590b,
    242.01138305664062 * _0xd5590b,
    93.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    226.01138305664062 * _0xd5590b,
    95.76705932617188 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    91.76705932617188 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    80.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    223.51138305664062 * _0xd5590b,
    50.267059326171875 * _0xd5590b,
    223.51138305664062 * _0xd5590b,
    50.267059326171875 * _0xd5590b,
    222.01138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    219.01138305664062 * _0xd5590b,
    8.767059326171875 * _0xd5590b,
    224.01138305664062 * _0xd5590b,
    4.767059326171875 * _0xd5590b,
    227.01138305664062 * _0xd5590b,
    2.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    142.01138305664062 * _0xd5590b,
    25.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    158.51138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b,
    158.51138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b,
    175.01138305664062 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    188.01138305664062 * _0xd5590b,
    11.767059326171875 * _0xd5590b,
    188.01138305664062 * _0xd5590b,
    16.767059326171875 * _0xd5590b,
    191.01138305664062 * _0xd5590b,
    29.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    197.01138305664062 * _0xd5590b,
    60.267059326171875 * _0xd5590b,
    197.01138305664062 * _0xd5590b,
    60.267059326171875 * _0xd5590b,
    203.01138305664062 * _0xd5590b,
    90.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    206.01138305664062 * _0xd5590b,
    102.76705932617188 * _0xd5590b,
    196.01138305664062 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    181.01138305664062 * _0xd5590b,
    105.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    175.01138305664062 * _0xd5590b,
    108.76705932617188 * _0xd5590b,
    172.01138305664062 * _0xd5590b,
    104.76705932617188 * _0xd5590b,
    164.01138305664062 * _0xd5590b,
    84.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    152.51138305664062 * _0xd5590b,
    63.267059326171875 * _0xd5590b,
    152.51138305664062 * _0xd5590b,
    63.267059326171875 * _0xd5590b,
    141.01138305664062 * _0xd5590b,
    41.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    138.01138305664062 * _0xd5590b,
    35.767059326171875 * _0xd5590b,
    138.01138305664062 * _0xd5590b,
    29.767059326171875 * _0xd5590b,
    141.01138305664062 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    142.01138305664062 * _0xd5590b,
    25.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    158.51138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b,
    158.51138305664062 * _0xd5590b,
    19.767059326171875 * _0xd5590b,
    175.01138305664062 * _0xd5590b,
    13.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    188.01138305664062 * _0xd5590b,
    11.767059326171875 * _0xd5590b,
    188.01138305664062 * _0xd5590b,
    16.767059326171875 * _0xd5590b,
    191.01138305664062 * _0xd5590b,
    29.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    197.01138305664062 * _0xd5590b,
    60.267059326171875 * _0xd5590b,
    197.01138305664062 * _0xd5590b,
    60.267059326171875 * _0xd5590b,
    203.01138305664062 * _0xd5590b,
    90.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    206.01138305664062 * _0xd5590b,
    102.76705932617188 * _0xd5590b,
    196.01138305664062 * _0xd5590b,
    99.76705932617188 * _0xd5590b,
    181.01138305664062 * _0xd5590b,
    105.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    175.01138305664062 * _0xd5590b,
    108.76705932617188 * _0xd5590b,
    172.01138305664062 * _0xd5590b,
    104.76705932617188 * _0xd5590b,
    164.01138305664062 * _0xd5590b,
    84.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    152.51138305664062 * _0xd5590b,
    63.267059326171875 * _0xd5590b,
    152.51138305664062 * _0xd5590b,
    63.267059326171875 * _0xd5590b,
    141.01138305664062 * _0xd5590b,
    41.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    138.01138305664062 * _0xd5590b,
    35.767059326171875 * _0xd5590b,
    138.01138305664062 * _0xd5590b,
    29.767059326171875 * _0xd5590b,
    141.01138305664062 * _0xd5590b,
    27.767059326171875 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    70.01138305664062 * _0xd5590b,
    76.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    83.01138305664062 * _0xd5590b,
    64.26705932617188 * _0xd5590b,
    83.01138305664062 * _0xd5590b,
    64.26705932617188 * _0xd5590b,
    96.01138305664062 * _0xd5590b,
    51.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    104.01138305664062 * _0xd5590b,
    44.767059326171875 * _0xd5590b,
    110.01138305664062 * _0xd5590b,
    51.767059326171875 * _0xd5590b,
    119.01138305664062 * _0xd5590b,
    66.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    135.01138305664062 * _0xd5590b,
    88.26705932617188 * _0xd5590b,
    135.01138305664062 * _0xd5590b,
    88.26705932617188 * _0xd5590b,
    151.01138305664062 * _0xd5590b,
    109.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    157.01138305664062 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    153.01138305664062 * _0xd5590b,
    122.76705932617188 * _0xd5590b,
    147.01138305664062 * _0xd5590b,
    129.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    138.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    136.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    122.01138305664062 * _0xd5590b,
    127.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    99.51138305664062 * _0xd5590b,
    110.26705932617188 * _0xd5590b,
    99.51138305664062 * _0xd5590b,
    110.26705932617188 * _0xd5590b,
    77.01138305664062 * _0xd5590b,
    92.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    66.01138305664062 * _0xd5590b,
    83.76705932617188 * _0xd5590b,
    66.01138305664062 * _0xd5590b,
    82.76705932617188 * _0xd5590b,
    69.01138305664062 * _0xd5590b,
    78.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    70.01138305664062 * _0xd5590b,
    76.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    83.01138305664062 * _0xd5590b,
    64.26705932617188 * _0xd5590b,
    83.01138305664062 * _0xd5590b,
    64.26705932617188 * _0xd5590b,
    96.01138305664062 * _0xd5590b,
    51.767059326171875 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    104.01138305664062 * _0xd5590b,
    44.767059326171875 * _0xd5590b,
    110.01138305664062 * _0xd5590b,
    51.767059326171875 * _0xd5590b,
    119.01138305664062 * _0xd5590b,
    66.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    135.01138305664062 * _0xd5590b,
    88.26705932617188 * _0xd5590b,
    135.01138305664062 * _0xd5590b,
    88.26705932617188 * _0xd5590b,
    151.01138305664062 * _0xd5590b,
    109.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    157.01138305664062 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    153.01138305664062 * _0xd5590b,
    122.76705932617188 * _0xd5590b,
    147.01138305664062 * _0xd5590b,
    129.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    138.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    136.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    122.01138305664062 * _0xd5590b,
    127.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    99.51138305664062 * _0xd5590b,
    110.26705932617188 * _0xd5590b,
    99.51138305664062 * _0xd5590b,
    110.26705932617188 * _0xd5590b,
    77.01138305664062 * _0xd5590b,
    92.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    66.01138305664062 * _0xd5590b,
    83.76705932617188 * _0xd5590b,
    66.01138305664062 * _0xd5590b,
    82.76705932617188 * _0xd5590b,
    69.01138305664062 * _0xd5590b,
    78.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    33.011383056640625 * _0xd5590b,
    126.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    22.011383056640625 * _0xd5590b,
    149.76705932617188 * _0xd5590b,
    22.011383056640625 * _0xd5590b,
    149.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    172.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    7.011383056640625 * _0xd5590b,
    184.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    189.76705932617188 * _0xd5590b,
    36.011383056640625 * _0xd5590b,
    195.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    61.011383056640625 * _0xd5590b,
    202.26705932617188 * _0xd5590b,
    61.011383056640625 * _0xd5590b,
    202.26705932617188 * _0xd5590b,
    86.01138305664062 * _0xd5590b,
    208.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    100.01138305664062 * _0xd5590b,
    214.76705932617188 * _0xd5590b,
    102.01138305664062 * _0xd5590b,
    203.76705932617188 * _0xd5590b,
    109.01138305664062 * _0xd5590b,
    189.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    117.01138305664062 * _0xd5590b,
    171.76705932617188 * _0xd5590b,
    116.01138305664062 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    97.01138305664062 * _0xd5590b,
    156.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    74.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    74.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    51.011383056640625 * _0xd5590b,
    124.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    42.011383056640625 * _0xd5590b,
    118.76705932617188 * _0xd5590b,
    37.011383056640625 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    33.011383056640625 * _0xd5590b,
    126.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    33.011383056640625 * _0xd5590b,
    126.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    22.011383056640625 * _0xd5590b,
    149.76705932617188 * _0xd5590b,
    22.011383056640625 * _0xd5590b,
    149.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    172.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    7.011383056640625 * _0xd5590b,
    184.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    189.76705932617188 * _0xd5590b,
    36.011383056640625 * _0xd5590b,
    195.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    61.011383056640625 * _0xd5590b,
    202.26705932617188 * _0xd5590b,
    61.011383056640625 * _0xd5590b,
    202.26705932617188 * _0xd5590b,
    86.01138305664062 * _0xd5590b,
    208.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    100.01138305664062 * _0xd5590b,
    214.76705932617188 * _0xd5590b,
    102.01138305664062 * _0xd5590b,
    203.76705932617188 * _0xd5590b,
    109.01138305664062 * _0xd5590b,
    189.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    117.01138305664062 * _0xd5590b,
    171.76705932617188 * _0xd5590b,
    116.01138305664062 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    97.01138305664062 * _0xd5590b,
    156.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    74.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    74.01138305664062 * _0xd5590b,
    140.76705932617188 * _0xd5590b,
    51.011383056640625 * _0xd5590b,
    124.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    42.011383056640625 * _0xd5590b,
    118.76705932617188 * _0xd5590b,
    37.011383056640625 * _0xd5590b,
    119.76705932617188 * _0xd5590b,
    33.011383056640625 * _0xd5590b,
    126.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[3], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    13.011383056640625 * _0xd5590b,
    229.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    45.511383056640625 * _0xd5590b,
    233.76705932617188 * _0xd5590b,
    45.511383056640625 * _0xd5590b,
    233.76705932617188 * _0xd5590b,
    78.01138305664062 * _0xd5590b,
    237.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    92.01138305664062 * _0xd5590b,
    239.76705932617188 * _0xd5590b,
    92.01138305664062 * _0xd5590b,
    246.76705932617188 * _0xd5590b,
    91.01138305664062 * _0xd5590b,
    257.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    92.01138305664062 * _0xd5590b,
    275.7670593261719 * _0xd5590b,
    91.01138305664062 * _0xd5590b,
    274.7670593261719 * _0xd5590b,
    68.01138305664062 * _0xd5590b,
    276.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    42.511383056640625 * _0xd5590b,
    279.7670593261719 * _0xd5590b,
    42.511383056640625 * _0xd5590b,
    279.7670593261719 * _0xd5590b,
    17.011383056640625 * _0xd5590b,
    282.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    2.011383056640625 * _0xd5590b,
    282.7670593261719 * _0xd5590b,
    3.011383056640625 * _0xd5590b,
    276.7670593261719 * _0xd5590b,
    2.011383056640625 * _0xd5590b,
    260.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    2.011383056640625 * _0xd5590b,
    231.76705932617188 * _0xd5590b,
    4.011383056640625 * _0xd5590b,
    232.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    230.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    13.011383056640625 * _0xd5590b,
    229.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    45.511383056640625 * _0xd5590b,
    233.76705932617188 * _0xd5590b,
    45.511383056640625 * _0xd5590b,
    233.76705932617188 * _0xd5590b,
    78.01138305664062 * _0xd5590b,
    237.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    92.01138305664062 * _0xd5590b,
    239.76705932617188 * _0xd5590b,
    92.01138305664062 * _0xd5590b,
    246.76705932617188 * _0xd5590b,
    91.01138305664062 * _0xd5590b,
    257.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    92.01138305664062 * _0xd5590b,
    275.7670593261719 * _0xd5590b,
    91.01138305664062 * _0xd5590b,
    274.7670593261719 * _0xd5590b,
    68.01138305664062 * _0xd5590b,
    276.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    42.511383056640625 * _0xd5590b,
    279.7670593261719 * _0xd5590b,
    42.511383056640625 * _0xd5590b,
    279.7670593261719 * _0xd5590b,
    17.011383056640625 * _0xd5590b,
    282.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    2.011383056640625 * _0xd5590b,
    282.7670593261719 * _0xd5590b,
    3.011383056640625 * _0xd5590b,
    276.7670593261719 * _0xd5590b,
    2.011383056640625 * _0xd5590b,
    260.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    2.011383056640625 * _0xd5590b,
    231.76705932617188 * _0xd5590b,
    4.011383056640625 * _0xd5590b,
    232.76705932617188 * _0xd5590b,
    11.011383056640625 * _0xd5590b,
    230.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    97.01138305664062 * _0xd5590b,
    329.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    68.51138305664062 * _0xd5590b,
    343.7670593261719 * _0xd5590b,
    68.51138305664062 * _0xd5590b,
    343.7670593261719 * _0xd5590b,
    40.011383056640625 * _0xd5590b,
    357.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    29.011383056640625 * _0xd5590b,
    360.7670593261719 * _0xd5590b,
    27.011383056640625 * _0xd5590b,
    361.7670593261719 * _0xd5590b,
    20.011383056640625 * _0xd5590b,
    346.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    16.511383056640625 * _0xd5590b,
    336.2670593261719 * _0xd5590b,
    16.511383056640625 * _0xd5590b,
    336.2670593261719 * _0xd5590b,
    13.011383056640625 * _0xd5590b,
    325.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    10.011383056640625 * _0xd5590b,
    307.7670593261719 * _0xd5590b,
    18.011383056640625 * _0xd5590b,
    312.7670593261719 * _0xd5590b,
    34.011383056640625 * _0xd5590b,
    306.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    59.511383056640625 * _0xd5590b,
    302.2670593261719 * _0xd5590b,
    59.511383056640625 * _0xd5590b,
    302.2670593261719 * _0xd5590b,
    85.01138305664062 * _0xd5590b,
    297.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    97.01138305664062 * _0xd5590b,
    294.7670593261719 * _0xd5590b,
    100.01138305664062 * _0xd5590b,
    297.7670593261719 * _0xd5590b,
    100.01138305664062 * _0xd5590b,
    307.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    105.01138305664062 * _0xd5590b,
    326.7670593261719 * _0xd5590b,
    103.01138305664062 * _0xd5590b,
    325.7670593261719 * _0xd5590b,
    97.01138305664062 * _0xd5590b,
    329.7670593261719 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    97.01138305664062 * _0xd5590b,
    329.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    68.51138305664062 * _0xd5590b,
    343.7670593261719 * _0xd5590b,
    68.51138305664062 * _0xd5590b,
    343.7670593261719 * _0xd5590b,
    40.011383056640625 * _0xd5590b,
    357.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    29.011383056640625 * _0xd5590b,
    360.7670593261719 * _0xd5590b,
    27.011383056640625 * _0xd5590b,
    361.7670593261719 * _0xd5590b,
    20.011383056640625 * _0xd5590b,
    346.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    16.511383056640625 * _0xd5590b,
    336.2670593261719 * _0xd5590b,
    16.511383056640625 * _0xd5590b,
    336.2670593261719 * _0xd5590b,
    13.011383056640625 * _0xd5590b,
    325.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    10.011383056640625 * _0xd5590b,
    307.7670593261719 * _0xd5590b,
    18.011383056640625 * _0xd5590b,
    312.7670593261719 * _0xd5590b,
    34.011383056640625 * _0xd5590b,
    306.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    59.511383056640625 * _0xd5590b,
    302.2670593261719 * _0xd5590b,
    59.511383056640625 * _0xd5590b,
    302.2670593261719 * _0xd5590b,
    85.01138305664062 * _0xd5590b,
    297.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    97.01138305664062 * _0xd5590b,
    294.7670593261719 * _0xd5590b,
    100.01138305664062 * _0xd5590b,
    297.7670593261719 * _0xd5590b,
    100.01138305664062 * _0xd5590b,
    307.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    105.01138305664062 * _0xd5590b,
    326.7670593261719 * _0xd5590b,
    103.01138305664062 * _0xd5590b,
    325.7670593261719 * _0xd5590b,
    97.01138305664062 * _0xd5590b,
    329.7670593261719 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    394.0113830566406 * _0xd5590b,
    181.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    426.5113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    426.5113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    459.0113830566406 * _0xd5590b,
    151.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    469.0113830566406 * _0xd5590b,
    152.76705932617188 * _0xd5590b,
    469.0113830566406 * _0xd5590b,
    155.76705932617188 * _0xd5590b,
    472.0113830566406 * _0xd5590b,
    165.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    476.0113830566406 * _0xd5590b,
    177.26705932617188 * _0xd5590b,
    476.0113830566406 * _0xd5590b,
    177.26705932617188 * _0xd5590b,
    480.0113830566406 * _0xd5590b,
    188.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    483.0113830566406 * _0xd5590b,
    199.76705932617188 * _0xd5590b,
    480.0113830566406 * _0xd5590b,
    200.76705932617188 * _0xd5590b,
    460.0113830566406 * _0xd5590b,
    205.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    433.5113830566406 * _0xd5590b,
    210.26705932617188 * _0xd5590b,
    433.5113830566406 * _0xd5590b,
    210.26705932617188 * _0xd5590b,
    407.0113830566406 * _0xd5590b,
    214.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    395.0113830566406 * _0xd5590b,
    218.76705932617188 * _0xd5590b,
    397.0113830566406 * _0xd5590b,
    211.76705932617188 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    202.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    387.0113830566406 * _0xd5590b,
    188.76705932617188 * _0xd5590b,
    387.0113830566406 * _0xd5590b,
    187.76705932617188 * _0xd5590b,
    394.0113830566406 * _0xd5590b,
    181.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    394.0113830566406 * _0xd5590b,
    181.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    426.5113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    426.5113830566406 * _0xd5590b,
    166.76705932617188 * _0xd5590b,
    459.0113830566406 * _0xd5590b,
    151.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    469.0113830566406 * _0xd5590b,
    152.76705932617188 * _0xd5590b,
    469.0113830566406 * _0xd5590b,
    155.76705932617188 * _0xd5590b,
    472.0113830566406 * _0xd5590b,
    165.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    476.0113830566406 * _0xd5590b,
    177.26705932617188 * _0xd5590b,
    476.0113830566406 * _0xd5590b,
    177.26705932617188 * _0xd5590b,
    480.0113830566406 * _0xd5590b,
    188.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    483.0113830566406 * _0xd5590b,
    199.76705932617188 * _0xd5590b,
    480.0113830566406 * _0xd5590b,
    200.76705932617188 * _0xd5590b,
    460.0113830566406 * _0xd5590b,
    205.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    433.5113830566406 * _0xd5590b,
    210.26705932617188 * _0xd5590b,
    433.5113830566406 * _0xd5590b,
    210.26705932617188 * _0xd5590b,
    407.0113830566406 * _0xd5590b,
    214.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    395.0113830566406 * _0xd5590b,
    218.76705932617188 * _0xd5590b,
    397.0113830566406 * _0xd5590b,
    211.76705932617188 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    202.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    387.0113830566406 * _0xd5590b,
    188.76705932617188 * _0xd5590b,
    387.0113830566406 * _0xd5590b,
    187.76705932617188 * _0xd5590b,
    394.0113830566406 * _0xd5590b,
    181.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    411.0113830566406 * _0xd5590b,
    234.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    446.0113830566406 * _0xd5590b,
    233.26705932617188 * _0xd5590b,
    446.0113830566406 * _0xd5590b,
    233.26705932617188 * _0xd5590b,
    481.0113830566406 * _0xd5590b,
    231.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    491.0113830566406 * _0xd5590b,
    232.76705932617188 * _0xd5590b,
    493.0113830566406 * _0xd5590b,
    239.76705932617188 * _0xd5590b,
    491.0113830566406 * _0xd5590b,
    251.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    490.0113830566406 * _0xd5590b,
    263.7670593261719 * _0xd5590b,
    490.0113830566406 * _0xd5590b,
    263.7670593261719 * _0xd5590b,
    489.0113830566406 * _0xd5590b,
    275.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    487.0113830566406 * _0xd5590b,
    283.7670593261719 * _0xd5590b,
    483.0113830566406 * _0xd5590b,
    284.7670593261719 * _0xd5590b,
    464.0113830566406 * _0xd5590b,
    280.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    437.0113830566406 * _0xd5590b,
    273.7670593261719 * _0xd5590b,
    437.0113830566406 * _0xd5590b,
    273.7670593261719 * _0xd5590b,
    410.0113830566406 * _0xd5590b,
    266.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    400.0113830566406 * _0xd5590b,
    261.7670593261719 * _0xd5590b,
    401.0113830566406 * _0xd5590b,
    259.7670593261719 * _0xd5590b,
    402.0113830566406 * _0xd5590b,
    249.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    401.0113830566406 * _0xd5590b,
    237.76705932617188 * _0xd5590b,
    403.0113830566406 * _0xd5590b,
    235.76705932617188 * _0xd5590b,
    408.0113830566406 * _0xd5590b,
    234.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    411.0113830566406 * _0xd5590b,
    234.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    446.0113830566406 * _0xd5590b,
    233.26705932617188 * _0xd5590b,
    446.0113830566406 * _0xd5590b,
    233.26705932617188 * _0xd5590b,
    481.0113830566406 * _0xd5590b,
    231.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    491.0113830566406 * _0xd5590b,
    232.76705932617188 * _0xd5590b,
    493.0113830566406 * _0xd5590b,
    239.76705932617188 * _0xd5590b,
    491.0113830566406 * _0xd5590b,
    251.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    490.0113830566406 * _0xd5590b,
    263.7670593261719 * _0xd5590b,
    490.0113830566406 * _0xd5590b,
    263.7670593261719 * _0xd5590b,
    489.0113830566406 * _0xd5590b,
    275.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    487.0113830566406 * _0xd5590b,
    283.7670593261719 * _0xd5590b,
    483.0113830566406 * _0xd5590b,
    284.7670593261719 * _0xd5590b,
    464.0113830566406 * _0xd5590b,
    280.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    437.0113830566406 * _0xd5590b,
    273.7670593261719 * _0xd5590b,
    437.0113830566406 * _0xd5590b,
    273.7670593261719 * _0xd5590b,
    410.0113830566406 * _0xd5590b,
    266.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    400.0113830566406 * _0xd5590b,
    261.7670593261719 * _0xd5590b,
    401.0113830566406 * _0xd5590b,
    259.7670593261719 * _0xd5590b,
    402.0113830566406 * _0xd5590b,
    249.76705932617188 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    401.0113830566406 * _0xd5590b,
    237.76705932617188 * _0xd5590b,
    403.0113830566406 * _0xd5590b,
    235.76705932617188 * _0xd5590b,
    408.0113830566406 * _0xd5590b,
    234.76705932617188 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    400.0113830566406 * _0xd5590b,
    290.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    437.0113830566406 * _0xd5590b,
    301.2670593261719 * _0xd5590b,
    437.0113830566406 * _0xd5590b,
    301.2670593261719 * _0xd5590b,
    474.0113830566406 * _0xd5590b,
    311.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    484.0113830566406 * _0xd5590b,
    319.7670593261719 * _0xd5590b,
    481.0113830566406 * _0xd5590b,
    322.7670593261719 * _0xd5590b,
    474.0113830566406 * _0xd5590b,
    335.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    465.5113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    465.5113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    457.0113830566406 * _0xd5590b,
    373.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    449.0113830566406 * _0xd5590b,
    386.7670593261719 * _0xd5590b,
    444.0113830566406 * _0xd5590b,
    384.7670593261719 * _0xd5590b,
    427.0113830566406 * _0xd5590b,
    370.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    403.0113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    403.0113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    379.0113830566406 * _0xd5590b,
    338.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    371.0113830566406 * _0xd5590b,
    327.7670593261719 * _0xd5590b,
    373.0113830566406 * _0xd5590b,
    323.7670593261719 * _0xd5590b,
    377.0113830566406 * _0xd5590b,
    313.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    386.0113830566406 * _0xd5590b,
    292.7670593261719 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    288.7670593261719 * _0xd5590b,
    398.0113830566406 * _0xd5590b,
    291.7670593261719 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    400.0113830566406 * _0xd5590b,
    290.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    437.0113830566406 * _0xd5590b,
    301.2670593261719 * _0xd5590b,
    437.0113830566406 * _0xd5590b,
    301.2670593261719 * _0xd5590b,
    474.0113830566406 * _0xd5590b,
    311.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    484.0113830566406 * _0xd5590b,
    319.7670593261719 * _0xd5590b,
    481.0113830566406 * _0xd5590b,
    322.7670593261719 * _0xd5590b,
    474.0113830566406 * _0xd5590b,
    335.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    465.5113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    465.5113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    457.0113830566406 * _0xd5590b,
    373.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    449.0113830566406 * _0xd5590b,
    386.7670593261719 * _0xd5590b,
    444.0113830566406 * _0xd5590b,
    384.7670593261719 * _0xd5590b,
    427.0113830566406 * _0xd5590b,
    370.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    403.0113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    403.0113830566406 * _0xd5590b,
    354.7670593261719 * _0xd5590b,
    379.0113830566406 * _0xd5590b,
    338.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    371.0113830566406 * _0xd5590b,
    327.7670593261719 * _0xd5590b,
    373.0113830566406 * _0xd5590b,
    323.7670593261719 * _0xd5590b,
    377.0113830566406 * _0xd5590b,
    313.7670593261719 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    386.0113830566406 * _0xd5590b,
    292.7670593261719 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    288.7670593261719 * _0xd5590b,
    398.0113830566406 * _0xd5590b,
    291.7670593261719 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[3], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    366.0113830566406 * _0xd5590b,
    361.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    393.0113830566406 * _0xd5590b,
    383.2216033935547 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    383.2216033935547 * _0xd5590b,
    420.0113830566406 * _0xd5590b,
    405.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    427.0113830566406 * _0xd5590b,
    414.2216033935547 * _0xd5590b,
    425.0113830566406 * _0xd5590b,
    417.2216033935547 * _0xd5590b,
    413.0113830566406 * _0xd5590b,
    428.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    405.5113830566406 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    405.5113830566406 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    398.0113830566406 * _0xd5590b,
    442.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    388.0113830566406 * _0xd5590b,
    451.2216033935547 * _0xd5590b,
    385.0113830566406 * _0xd5590b,
    445.2216033935547 * _0xd5590b,
    373.0113830566406 * _0xd5590b,
    428.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    358.5113830566406 * _0xd5590b,
    408.2216033935547 * _0xd5590b,
    358.5113830566406 * _0xd5590b,
    408.2216033935547 * _0xd5590b,
    344.0113830566406 * _0xd5590b,
    388.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    337.0113830566406 * _0xd5590b,
    378.2216033935547 * _0xd5590b,
    342.0113830566406 * _0xd5590b,
    377.2216033935547 * _0xd5590b,
    347.0113830566406 * _0xd5590b,
    371.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    359.0113830566406 * _0xd5590b,
    359.2216033935547 * _0xd5590b,
    361.0113830566406 * _0xd5590b,
    358.2216033935547 * _0xd5590b,
    364.0113830566406 * _0xd5590b,
    361.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    366.0113830566406 * _0xd5590b,
    361.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    393.0113830566406 * _0xd5590b,
    383.2216033935547 * _0xd5590b,
    393.0113830566406 * _0xd5590b,
    383.2216033935547 * _0xd5590b,
    420.0113830566406 * _0xd5590b,
    405.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    427.0113830566406 * _0xd5590b,
    414.2216033935547 * _0xd5590b,
    425.0113830566406 * _0xd5590b,
    417.2216033935547 * _0xd5590b,
    413.0113830566406 * _0xd5590b,
    428.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    405.5113830566406 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    405.5113830566406 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    398.0113830566406 * _0xd5590b,
    442.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    388.0113830566406 * _0xd5590b,
    451.2216033935547 * _0xd5590b,
    385.0113830566406 * _0xd5590b,
    445.2216033935547 * _0xd5590b,
    373.0113830566406 * _0xd5590b,
    428.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    358.5113830566406 * _0xd5590b,
    408.2216033935547 * _0xd5590b,
    358.5113830566406 * _0xd5590b,
    408.2216033935547 * _0xd5590b,
    344.0113830566406 * _0xd5590b,
    388.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    337.0113830566406 * _0xd5590b,
    378.2216033935547 * _0xd5590b,
    342.0113830566406 * _0xd5590b,
    377.2216033935547 * _0xd5590b,
    347.0113830566406 * _0xd5590b,
    371.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    359.0113830566406 * _0xd5590b,
    359.2216033935547 * _0xd5590b,
    361.0113830566406 * _0xd5590b,
    358.2216033935547 * _0xd5590b,
    364.0113830566406 * _0xd5590b,
    361.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    323.0113830566406 * _0xd5590b,
    393.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    338.0113830566406 * _0xd5590b,
    424.7216033935547 * _0xd5590b,
    338.0113830566406 * _0xd5590b,
    424.7216033935547 * _0xd5590b,
    353.0113830566406 * _0xd5590b,
    456.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    355.0113830566406 * _0xd5590b,
    467.2216033935547 * _0xd5590b,
    354.0113830566406 * _0xd5590b,
    469.2216033935547 * _0xd5590b,
    336.0113830566406 * _0xd5590b,
    475.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    326.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b,
    326.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b,
    316.0113830566406 * _0xd5590b,
    481.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    304.0113830566406 * _0xd5590b,
    484.2216033935547 * _0xd5590b,
    304.0113830566406 * _0xd5590b,
    477.2216033935547 * _0xd5590b,
    301.0113830566406 * _0xd5590b,
    454.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    295.5113830566406 * _0xd5590b,
    429.2216033935547 * _0xd5590b,
    295.5113830566406 * _0xd5590b,
    429.2216033935547 * _0xd5590b,
    290.0113830566406 * _0xd5590b,
    404.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    287.0113830566406 * _0xd5590b,
    396.2216033935547 * _0xd5590b,
    297.0113830566406 * _0xd5590b,
    394.2216033935547 * _0xd5590b,
    303.0113830566406 * _0xd5590b,
    392.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    316.0113830566406 * _0xd5590b,
    387.2216033935547 * _0xd5590b,
    318.0113830566406 * _0xd5590b,
    387.2216033935547 * _0xd5590b,
    323.0113830566406 * _0xd5590b,
    394.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    323.0113830566406 * _0xd5590b,
    393.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    338.0113830566406 * _0xd5590b,
    424.7216033935547 * _0xd5590b,
    338.0113830566406 * _0xd5590b,
    424.7216033935547 * _0xd5590b,
    353.0113830566406 * _0xd5590b,
    456.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    355.0113830566406 * _0xd5590b,
    467.2216033935547 * _0xd5590b,
    354.0113830566406 * _0xd5590b,
    469.2216033935547 * _0xd5590b,
    336.0113830566406 * _0xd5590b,
    475.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    326.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b,
    326.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b,
    316.0113830566406 * _0xd5590b,
    481.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    304.0113830566406 * _0xd5590b,
    484.2216033935547 * _0xd5590b,
    304.0113830566406 * _0xd5590b,
    477.2216033935547 * _0xd5590b,
    301.0113830566406 * _0xd5590b,
    454.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    295.5113830566406 * _0xd5590b,
    429.2216033935547 * _0xd5590b,
    295.5113830566406 * _0xd5590b,
    429.2216033935547 * _0xd5590b,
    290.0113830566406 * _0xd5590b,
    404.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    287.0113830566406 * _0xd5590b,
    396.2216033935547 * _0xd5590b,
    297.0113830566406 * _0xd5590b,
    394.2216033935547 * _0xd5590b,
    303.0113830566406 * _0xd5590b,
    392.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    316.0113830566406 * _0xd5590b,
    387.2216033935547 * _0xd5590b,
    318.0113830566406 * _0xd5590b,
    387.2216033935547 * _0xd5590b,
    323.0113830566406 * _0xd5590b,
    394.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    270.0113830566406 * _0xd5590b,
    413.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    271.0113830566406 * _0xd5590b,
    445.7216033935547 * _0xd5590b,
    271.0113830566406 * _0xd5590b,
    445.7216033935547 * _0xd5590b,
    272.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    273.0113830566406 * _0xd5590b,
    490.2216033935547 * _0xd5590b,
    267.0113830566406 * _0xd5590b,
    493.2216033935547 * _0xd5590b,
    249.01138305664062 * _0xd5590b,
    490.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    222.01138305664062 * _0xd5590b,
    492.2216033935547 * _0xd5590b,
    220.01138305664062 * _0xd5590b,
    485.2216033935547 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    467.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    230.51138305664062 * _0xd5590b,
    440.2216033935547 * _0xd5590b,
    230.51138305664062 * _0xd5590b,
    440.2216033935547 * _0xd5590b,
    236.01138305664062 * _0xd5590b,
    413.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    237.01138305664062 * _0xd5590b,
    405.2216033935547 * _0xd5590b,
    238.01138305664062 * _0xd5590b,
    404.2216033935547 * _0xd5590b,
    253.01138305664062 * _0xd5590b,
    403.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    269.0113830566406 * _0xd5590b,
    405.2216033935547 * _0xd5590b,
    270.0113830566406 * _0xd5590b,
    407.2216033935547 * _0xd5590b,
    269.0113830566406 * _0xd5590b,
    412.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    270.0113830566406 * _0xd5590b,
    413.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    271.0113830566406 * _0xd5590b,
    445.7216033935547 * _0xd5590b,
    271.0113830566406 * _0xd5590b,
    445.7216033935547 * _0xd5590b,
    272.0113830566406 * _0xd5590b,
    478.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    273.0113830566406 * _0xd5590b,
    490.2216033935547 * _0xd5590b,
    267.0113830566406 * _0xd5590b,
    493.2216033935547 * _0xd5590b,
    249.01138305664062 * _0xd5590b,
    490.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    222.01138305664062 * _0xd5590b,
    492.2216033935547 * _0xd5590b,
    220.01138305664062 * _0xd5590b,
    485.2216033935547 * _0xd5590b,
    225.01138305664062 * _0xd5590b,
    467.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    230.51138305664062 * _0xd5590b,
    440.2216033935547 * _0xd5590b,
    230.51138305664062 * _0xd5590b,
    440.2216033935547 * _0xd5590b,
    236.01138305664062 * _0xd5590b,
    413.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    237.01138305664062 * _0xd5590b,
    405.2216033935547 * _0xd5590b,
    238.01138305664062 * _0xd5590b,
    404.2216033935547 * _0xd5590b,
    253.01138305664062 * _0xd5590b,
    403.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    269.0113830566406 * _0xd5590b,
    405.2216033935547 * _0xd5590b,
    270.0113830566406 * _0xd5590b,
    407.2216033935547 * _0xd5590b,
    269.0113830566406 * _0xd5590b,
    412.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    207.01138305664062 * _0xd5590b,
    406.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    197.51138305664062 * _0xd5590b,
    440.7216033935547 * _0xd5590b,
    197.51138305664062 * _0xd5590b,
    440.7216033935547 * _0xd5590b,
    188.01138305664062 * _0xd5590b,
    475.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    184.01138305664062 * _0xd5590b,
    485.2216033935547 * _0xd5590b,
    179.01138305664062 * _0xd5590b,
    491.2216033935547 * _0xd5590b,
    152.01138305664062 * _0xd5590b,
    477.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    136.51138305664062 * _0xd5590b,
    469.7216033935547 * _0xd5590b,
    136.51138305664062 * _0xd5590b,
    469.7216033935547 * _0xd5590b,
    121.01138305664062 * _0xd5590b,
    462.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    109.01138305664062 * _0xd5590b,
    453.2216033935547 * _0xd5590b,
    117.01138305664062 * _0xd5590b,
    447.2216033935547 * _0xd5590b,
    133.01138305664062 * _0xd5590b,
    427.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    146.51138305664062 * _0xd5590b,
    406.7216033935547 * _0xd5590b,
    146.51138305664062 * _0xd5590b,
    406.7216033935547 * _0xd5590b,
    160.01138305664062 * _0xd5590b,
    386.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    163.01138305664062 * _0xd5590b,
    377.2216033935547 * _0xd5590b,
    168.01138305664062 * _0xd5590b,
    378.2216033935547 * _0xd5590b,
    187.01138305664062 * _0xd5590b,
    387.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    206.01138305664062 * _0xd5590b,
    395.2216033935547 * _0xd5590b,
    208.01138305664062 * _0xd5590b,
    398.2216033935547 * _0xd5590b,
    207.01138305664062 * _0xd5590b,
    405.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    207.01138305664062 * _0xd5590b,
    406.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    197.51138305664062 * _0xd5590b,
    440.7216033935547 * _0xd5590b,
    197.51138305664062 * _0xd5590b,
    440.7216033935547 * _0xd5590b,
    188.01138305664062 * _0xd5590b,
    475.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    184.01138305664062 * _0xd5590b,
    485.2216033935547 * _0xd5590b,
    179.01138305664062 * _0xd5590b,
    491.2216033935547 * _0xd5590b,
    152.01138305664062 * _0xd5590b,
    477.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    136.51138305664062 * _0xd5590b,
    469.7216033935547 * _0xd5590b,
    136.51138305664062 * _0xd5590b,
    469.7216033935547 * _0xd5590b,
    121.01138305664062 * _0xd5590b,
    462.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    109.01138305664062 * _0xd5590b,
    453.2216033935547 * _0xd5590b,
    117.01138305664062 * _0xd5590b,
    447.2216033935547 * _0xd5590b,
    133.01138305664062 * _0xd5590b,
    427.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    146.51138305664062 * _0xd5590b,
    406.7216033935547 * _0xd5590b,
    146.51138305664062 * _0xd5590b,
    406.7216033935547 * _0xd5590b,
    160.01138305664062 * _0xd5590b,
    386.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    163.01138305664062 * _0xd5590b,
    377.2216033935547 * _0xd5590b,
    168.01138305664062 * _0xd5590b,
    378.2216033935547 * _0xd5590b,
    187.01138305664062 * _0xd5590b,
    387.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    206.01138305664062 * _0xd5590b,
    395.2216033935547 * _0xd5590b,
    208.01138305664062 * _0xd5590b,
    398.2216033935547 * _0xd5590b,
    207.01138305664062 * _0xd5590b,
    405.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[3], _0x28fb90[2], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = _0x3bf1d4 ? 0.5 : 1;
  _0x3f3903.translate(0, 5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    130.01138305664062 * _0xd5590b,
    375.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    109.51138305664062 * _0xd5590b,
    400.7216033935547 * _0xd5590b,
    109.51138305664062 * _0xd5590b,
    400.7216033935547 * _0xd5590b,
    89.01138305664062 * _0xd5590b,
    426.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    82.01138305664062 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    77.01138305664062 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    62.011383056640625 * _0xd5590b,
    417.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    43.011383056640625 * _0xd5590b,
    397.2216033935547 * _0xd5590b,
    47.011383056640625 * _0xd5590b,
    395.2216033935547 * _0xd5590b,
    62.011383056640625 * _0xd5590b,
    382.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    84.01138305664062 * _0xd5590b,
    366.7216033935547 * _0xd5590b,
    84.01138305664062 * _0xd5590b,
    366.7216033935547 * _0xd5590b,
    106.01138305664062 * _0xd5590b,
    351.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    116.01138305664062 * _0xd5590b,
    344.2216033935547 * _0xd5590b,
    120.01138305664062 * _0xd5590b,
    347.2216033935547 * _0xd5590b,
    127.01138305664062 * _0xd5590b,
    356.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    137.01138305664062 * _0xd5590b,
    366.2216033935547 * _0xd5590b,
    137.01138305664062 * _0xd5590b,
    366.2216033935547 * _0xd5590b,
    131.01138305664062 * _0xd5590b,
    376.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[0], _0x28fb90[0], 12 * _0xd5590b);
  _0x3f3903.globalAlpha = 1;
  _0x3f3903.translate(0, -5 * _0xd5590b);
  _0x3f3903.beginPath();
  _0x3f3903.lineCap = "round";
  _0x3f3903.lineJoin = "round";
  _0x3f3903.moveTo(
    130.01138305664062 * _0xd5590b,
    375.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    109.51138305664062 * _0xd5590b,
    400.7216033935547 * _0xd5590b,
    109.51138305664062 * _0xd5590b,
    400.7216033935547 * _0xd5590b,
    89.01138305664062 * _0xd5590b,
    426.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    82.01138305664062 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    77.01138305664062 * _0xd5590b,
    435.2216033935547 * _0xd5590b,
    62.011383056640625 * _0xd5590b,
    417.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    43.011383056640625 * _0xd5590b,
    397.2216033935547 * _0xd5590b,
    47.011383056640625 * _0xd5590b,
    395.2216033935547 * _0xd5590b,
    62.011383056640625 * _0xd5590b,
    382.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    84.01138305664062 * _0xd5590b,
    366.7216033935547 * _0xd5590b,
    84.01138305664062 * _0xd5590b,
    366.7216033935547 * _0xd5590b,
    106.01138305664062 * _0xd5590b,
    351.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    116.01138305664062 * _0xd5590b,
    344.2216033935547 * _0xd5590b,
    120.01138305664062 * _0xd5590b,
    347.2216033935547 * _0xd5590b,
    127.01138305664062 * _0xd5590b,
    356.2216033935547 * _0xd5590b
  );
  _0x3f3903.bezierCurveTo(
    137.01138305664062 * _0xd5590b,
    366.2216033935547 * _0xd5590b,
    137.01138305664062 * _0xd5590b,
    366.2216033935547 * _0xd5590b,
    131.01138305664062 * _0xd5590b,
    376.2216033935547 * _0xd5590b
  );
  _0x3f3903.closePath();
  fill_path(_0x3f3903, _0x28fb90[4], _0x28fb90[2], 12 * _0xd5590b);
  return _0x5b7f16;
}
function create_sand(_0x1dc95b, _0x23a572, _0x3962f0) {
  var _0x4190ba = document.createElement("canvas");
  var _0x314314 = _0x4190ba.getContext("2d");
  _0x4190ba.width = 218 * _0x1dc95b;
  _0x4190ba.height = 185 * _0x1dc95b;
  _0x314314.beginPath();
  _0x314314.lineCap = "round";
  _0x314314.lineJoin = "round";
  _0x314314.moveTo(64 * _0x1dc95b, 53.135406494140625 * _0x1dc95b);
  _0x314314.bezierCurveTo(
    92 * _0x1dc95b,
    17.135406494140625 * _0x1dc95b,
    116 * _0x1dc95b,
    11.135406494140625 * _0x1dc95b,
    158 * _0x1dc95b,
    53.135406494140625 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    178 * _0x1dc95b,
    74.13540649414062 * _0x1dc95b,
    181 * _0x1dc95b,
    81.13540649414062 * _0x1dc95b,
    196 * _0x1dc95b,
    101.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    214 * _0x1dc95b,
    127.13540649414062 * _0x1dc95b,
    192 * _0x1dc95b,
    138.13540649414062 * _0x1dc95b,
    173 * _0x1dc95b,
    149.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    137 * _0x1dc95b,
    166.13540649414062 * _0x1dc95b,
    74 * _0x1dc95b,
    170.13540649414062 * _0x1dc95b,
    36 * _0x1dc95b,
    141.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    13 * _0x1dc95b,
    127.13540649414062 * _0x1dc95b,
    20 * _0x1dc95b,
    119.13540649414062 * _0x1dc95b,
    30 * _0x1dc95b,
    103.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    48 * _0x1dc95b,
    71.13540649414062 * _0x1dc95b,
    54 * _0x1dc95b,
    67.13540649414062 * _0x1dc95b,
    63 * _0x1dc95b,
    54.135406494140625 * _0x1dc95b
  );
  _0x314314.closePath();
  fill_path(_0x314314, _0x3962f0[0], _0x3962f0[1], 10 * _0x1dc95b);
  _0x314314.beginPath();
  _0x314314.lineCap = "round";
  _0x314314.lineJoin = "round";
  _0x314314.moveTo(107 * _0x1dc95b, 25.135406494140625 * _0x1dc95b);
  _0x314314.bezierCurveTo(
    62 * _0x1dc95b,
    90.13540649414062 * _0x1dc95b,
    54 * _0x1dc95b,
    129.13540649414062 * _0x1dc95b,
    53 * _0x1dc95b,
    151.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    39.5 * _0x1dc95b,
    142.13540649414062 * _0x1dc95b,
    39.5 * _0x1dc95b,
    142.13540649414062 * _0x1dc95b,
    26 * _0x1dc95b,
    133.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    23.5 * _0x1dc95b,
    128.63540649414062 * _0x1dc95b,
    23.5 * _0x1dc95b,
    128.63540649414062 * _0x1dc95b,
    21 * _0x1dc95b,
    124.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    22 * _0x1dc95b,
    113.13540649414062 * _0x1dc95b,
    31 * _0x1dc95b,
    99.13540649414062 * _0x1dc95b,
    40 * _0x1dc95b,
    88.13540649414062 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    54.5 * _0x1dc95b,
    67.13540649414062 * _0x1dc95b,
    54.5 * _0x1dc95b,
    67.13540649414062 * _0x1dc95b,
    69 * _0x1dc95b,
    46.135406494140625 * _0x1dc95b
  );
  _0x314314.bezierCurveTo(
    80.5 * _0x1dc95b,
    36.635406494140625 * _0x1dc95b,
    80.5 * _0x1dc95b,
    36.635406494140625 * _0x1dc95b,
    92 * _0x1dc95b,
    27.135406494140625 * _0x1dc95b
  );
  _0x314314.closePath();
  fill_path(_0x314314, _0x3962f0[1]);
  return _0x4190ba;
}
function create_ice(_0x718037, _0x2b9804, _0x18b031) {
  var _0x40e5f7 = document.createElement("canvas");
  var _0x1c8605 = _0x40e5f7.getContext("2d");
  _0x40e5f7.width = 167 * _0x718037;
  _0x40e5f7.height = 136 * _0x718037;
  _0x1c8605.globalAlpha = 0.5;
  _0x1c8605.save();
  _0x1c8605.translate(
    76.71426391601562 * _0x718037,
    67.85713195800781 * _0x718037
  );
  round_rect(
    _0x1c8605,
    -57.5 * _0x718037,
    -54.5 * _0x718037,
    115 * _0x718037,
    109 * _0x718037,
    15 * _0x718037
  );
  _0x1c8605.restore();
  fill_path(_0x1c8605, _0x18b031[0]);
  _0x1c8605.globalAlpha = 0.8;
  _0x1c8605.save();
  _0x1c8605.translate(
    76.71426391601562 * _0x718037,
    67.85713195800781 * _0x718037
  );
  round_rect(
    _0x1c8605,
    -57.5 * _0x718037,
    -54.5 * _0x718037,
    115 * _0x718037,
    109 * _0x718037,
    15 * _0x718037
  );
  _0x1c8605.restore();
  fill_path(_0x1c8605, undefined, _0x18b031[1], 7 * _0x718037);
  _0x1c8605.globalAlpha = 0.5;
  _0x1c8605.save();
  _0x1c8605.translate(
    91.21426391601562 * _0x718037,
    67.35713195800781 * _0x718037
  );
  round_rect(
    _0x1c8605,
    -56 * _0x718037,
    -55 * _0x718037,
    115 * _0x718037,
    109 * _0x718037,
    15 * _0x718037
  );
  _0x1c8605.restore();
  fill_path(_0x1c8605, _0x18b031[0]);
  _0x1c8605.globalAlpha = 1;
  _0x1c8605.save();
  _0x1c8605.translate(
    91.21426391601562 * _0x718037,
    67.35713195800781 * _0x718037
  );
  round_rect(
    _0x1c8605,
    -56 * _0x718037,
    -55 * _0x718037,
    115 * _0x718037,
    109 * _0x718037,
    15 * _0x718037
  );
  _0x1c8605.restore();
  fill_path(_0x1c8605, undefined, _0x18b031[1], 7 * _0x718037);
  _0x1c8605.beginPath();
  _0x1c8605.lineCap = "round";
  _0x1c8605.lineJoin = "round";
  _0x1c8605.moveTo(
    131.21426391601562 * _0x718037,
    70.35713195800781 * _0x718037
  );
  _0x1c8605.bezierCurveTo(
    133.21426391601562 * _0x718037,
    95.35713195800781 * _0x718037,
    128.21426391601562 * _0x718037,
    109.35713195800781 * _0x718037,
    108.21426391601562 * _0x718037,
    108.35713195800781 * _0x718037
  );
  fill_path(_0x1c8605, undefined, _0x18b031[1], 10 * _0x718037);
  return _0x40e5f7;
}
function create_plot(_0x40b8c2, _0x1fd2c5, _0x3c3b40) {
  var _0xd256ae = document.createElement("canvas");
  var _0x38ddfa = _0xd256ae.getContext("2d");
  _0xd256ae.width = 163 * _0x40b8c2;
  _0xd256ae.height = 163 * _0x40b8c2;
  _0x38ddfa.save();
  _0x38ddfa.translate(82.5 * _0x40b8c2, 81.1015625 * _0x40b8c2);
  _0x38ddfa.rotate(0);
  round_rect(
    _0x38ddfa,
    -65.5 * _0x40b8c2,
    -66 * _0x40b8c2,
    131 * _0x40b8c2,
    131 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[1]);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(80 * _0x40b8c2, 17.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -64 * _0x40b8c2,
    -4.5 * _0x40b8c2,
    129 * _0x40b8c2,
    9 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(80 * _0x40b8c2, 17.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -64 * _0x40b8c2,
    -4.5 * _0x40b8c2,
    129 * _0x40b8c2,
    9 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 83.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -4.5 * _0x40b8c2,
    -61 * _0x40b8c2,
    9 * _0x40b8c2,
    129 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 83.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -4.5 * _0x40b8c2,
    -61 * _0x40b8c2,
    9 * _0x40b8c2,
    129 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17.5 * _0x40b8c2, 82.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -4.5 * _0x40b8c2,
    -65 * _0x40b8c2,
    9 * _0x40b8c2,
    129 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17.5 * _0x40b8c2, 82.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -4.5 * _0x40b8c2,
    -65 * _0x40b8c2,
    9 * _0x40b8c2,
    129 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(80.5 * _0x40b8c2, 145.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -65.5 * _0x40b8c2,
    -4 * _0x40b8c2,
    129 * _0x40b8c2,
    9 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(80.5 * _0x40b8c2, 145.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -65.5 * _0x40b8c2,
    -4 * _0x40b8c2,
    129 * _0x40b8c2,
    9 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17 * _0x40b8c2, 18.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -11 * _0x40b8c2,
    -11.5 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17 * _0x40b8c2, 18.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -11 * _0x40b8c2,
    -11.5 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 16.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -10.5 * _0x40b8c2,
    -11.5 * _0x40b8c2,
    21 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 16.6015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -10.5 * _0x40b8c2,
    -11.5 * _0x40b8c2,
    21 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 144.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -10.5 * _0x40b8c2,
    -11 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(145.5 * _0x40b8c2, 144.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -10.5 * _0x40b8c2,
    -11 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  _0x38ddfa.globalAlpha = _0x1fd2c5 ? 0.5 : 1;
  _0x38ddfa.translate(5 * _0x40b8c2, 5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17.5 * _0x40b8c2, 145.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -11.5 * _0x40b8c2,
    -12 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[0]);
  _0x38ddfa.globalAlpha = 1;
  _0x38ddfa.translate(-5 * _0x40b8c2, -5 * _0x40b8c2);
  _0x38ddfa.save();
  _0x38ddfa.translate(17.5 * _0x40b8c2, 145.1015625 * _0x40b8c2);
  round_rect(
    _0x38ddfa,
    -11.5 * _0x40b8c2,
    -12 * _0x40b8c2,
    22 * _0x40b8c2,
    22 * _0x40b8c2,
    5 * _0x40b8c2
  );
  _0x38ddfa.restore();
  fill_path(_0x38ddfa, _0x3c3b40[2], _0x3c3b40[3], 3 * _0x40b8c2);
  return _0xd256ae;
}
function create_watering_can(_0x3fcbc7, _0x1d39e6, _0x977bdf) {
  var _0xc53ac = document.createElement("canvas");
  var _0x52d860 = _0xc53ac.getContext("2d");
  _0xc53ac.width = 168 * _0x3fcbc7;
  _0xc53ac.height = 100 * _0x3fcbc7;
  _0x52d860.globalAlpha = _0x1d39e6 ? 0.5 : 1;
  _0x52d860.translate(10 * _0x3fcbc7, 5 * _0x3fcbc7);
  _0x52d860.save();
  _0x52d860.translate(24.5 * _0x3fcbc7, 44.30000305175781 * _0x3fcbc7);
  round_rect(
    _0x52d860,
    -19.5 * _0x3fcbc7,
    -8.5 * _0x3fcbc7,
    39 * _0x3fcbc7,
    17 * _0x3fcbc7,
    10 * _0x3fcbc7
  );
  _0x52d860.restore();
  fill_path(_0x52d860, _0x977bdf[0]);
  _0x52d860.beginPath();
  _0x52d860.lineCap = "round";
  _0x52d860.lineJoin = "round";
  _0x52d860.moveTo(115 * _0x3fcbc7, 37.80000305175781 * _0x3fcbc7);
  _0x52d860.bezierCurveTo(
    142 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    140 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    141 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    147 * _0x3fcbc7,
    28.800003051757812 * _0x3fcbc7,
    149 * _0x3fcbc7,
    26.800003051757812 * _0x3fcbc7,
    153 * _0x3fcbc7,
    32.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    160 * _0x3fcbc7,
    42.80000305175781 * _0x3fcbc7,
    157 * _0x3fcbc7,
    50.80000305175781 * _0x3fcbc7,
    153 * _0x3fcbc7,
    58.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    148 * _0x3fcbc7,
    62.80000305175781 * _0x3fcbc7,
    147 * _0x3fcbc7,
    59.80000305175781 * _0x3fcbc7,
    143 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    115 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.closePath();
  fill_path(_0x52d860, _0x977bdf[0]);
  circle(
    _0x52d860,
    78 * _0x3fcbc7,
    44.80000305175781 * _0x3fcbc7,
    39.44616584663204 * _0x3fcbc7
  );
  fill_path(_0x52d860, _0x977bdf[0]);
  _0x52d860.globalAlpha = 1;
  _0x52d860.translate(-10 * _0x3fcbc7, -5 * _0x3fcbc7);
  _0x52d860.save();
  _0x52d860.translate(24.5 * _0x3fcbc7, 44.30000305175781 * _0x3fcbc7);
  round_rect(
    _0x52d860,
    -19.5 * _0x3fcbc7,
    -8.5 * _0x3fcbc7,
    39 * _0x3fcbc7,
    17 * _0x3fcbc7,
    10 * _0x3fcbc7
  );
  _0x52d860.restore();
  fill_path(_0x52d860, undefined, _0x977bdf[3], 6 * _0x3fcbc7);
  _0x52d860.beginPath();
  _0x52d860.lineCap = "round";
  _0x52d860.lineJoin = "round";
  _0x52d860.moveTo(115 * _0x3fcbc7, 37.80000305175781 * _0x3fcbc7);
  _0x52d860.bezierCurveTo(
    142 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    140 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    141 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    147 * _0x3fcbc7,
    28.800003051757812 * _0x3fcbc7,
    149 * _0x3fcbc7,
    26.800003051757812 * _0x3fcbc7,
    153 * _0x3fcbc7,
    32.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    160 * _0x3fcbc7,
    42.80000305175781 * _0x3fcbc7,
    157 * _0x3fcbc7,
    50.80000305175781 * _0x3fcbc7,
    153 * _0x3fcbc7,
    58.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    148 * _0x3fcbc7,
    62.80000305175781 * _0x3fcbc7,
    147 * _0x3fcbc7,
    59.80000305175781 * _0x3fcbc7,
    143 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    115 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.closePath();
  fill_path(_0x52d860, undefined, _0x977bdf[3], 6 * _0x3fcbc7);
  circle(
    _0x52d860,
    78 * _0x3fcbc7,
    44.80000305175781 * _0x3fcbc7,
    42.44616584663204 * _0x3fcbc7
  );
  fill_path(_0x52d860, undefined, _0x977bdf[3], 6 * _0x3fcbc7);
  _0x52d860.save();
  _0x52d860.translate(24.5 * _0x3fcbc7, 44.30000305175781 * _0x3fcbc7);
  round_rect(
    _0x52d860,
    -19.5 * _0x3fcbc7,
    -8.5 * _0x3fcbc7,
    39 * _0x3fcbc7,
    17 * _0x3fcbc7,
    10 * _0x3fcbc7
  );
  _0x52d860.restore();
  fill_path(_0x52d860, _0x977bdf[1]);
  _0x52d860.beginPath();
  _0x52d860.lineCap = "round";
  _0x52d860.lineJoin = "round";
  _0x52d860.moveTo(115 * _0x3fcbc7, 37.80000305175781 * _0x3fcbc7);
  _0x52d860.bezierCurveTo(
    142 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    140 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7,
    141 * _0x3fcbc7,
    37.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    147 * _0x3fcbc7,
    28.800003051757812 * _0x3fcbc7,
    149 * _0x3fcbc7,
    26.800003051757812 * _0x3fcbc7,
    153 * _0x3fcbc7,
    32.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    160 * _0x3fcbc7,
    42.80000305175781 * _0x3fcbc7,
    157 * _0x3fcbc7,
    50.80000305175781 * _0x3fcbc7,
    153 * _0x3fcbc7,
    58.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    148 * _0x3fcbc7,
    62.80000305175781 * _0x3fcbc7,
    147 * _0x3fcbc7,
    59.80000305175781 * _0x3fcbc7,
    143 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.bezierCurveTo(
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    129 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7,
    115 * _0x3fcbc7,
    52.80000305175781 * _0x3fcbc7
  );
  _0x52d860.closePath();
  fill_path(_0x52d860, _0x977bdf[1]);
  circle(
    _0x52d860,
    78 * _0x3fcbc7,
    44.80000305175781 * _0x3fcbc7,
    39.44616584663204 * _0x3fcbc7
  );
  fill_path(_0x52d860, _0x977bdf[2], _0x977bdf[1], 4 * _0x3fcbc7);
  circle(
    _0x52d860,
    78 * _0x3fcbc7,
    44.80000305175781 * _0x3fcbc7,
    29.68164415931166 * _0x3fcbc7
  );
  fill_path(_0x52d860, _0x977bdf[3], _0x977bdf[1], 4 * _0x3fcbc7);
  circle(_0x52d860, 78 * _0x3fcbc7, 44 * _0x3fcbc7, 20 * _0x3fcbc7);
  fill_path(_0x52d860, _0x977bdf[4]);
  return _0xc53ac;
}
function create_pirahna(_0x178486, _0x5b27b2, _0x2af670) {
  var _0x18e945 = document.createElement("canvas");
  var _0x4e9aee = _0x18e945.getContext("2d");
  _0x18e945.width = 158 * _0x178486;
  _0x18e945.height = 201 * _0x178486;
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(96.5 * _0x178486, 76.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    100.5 * _0x178486,
    64.421875 * _0x178486,
    103.5 * _0x178486,
    62.421875 * _0x178486,
    110.5 * _0x178486,
    65.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    116.5 * _0x178486,
    66.421875 * _0x178486,
    117.5 * _0x178486,
    67.421875 * _0x178486,
    112.5 * _0x178486,
    73.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    107 * _0x178486,
    79.921875 * _0x178486,
    107 * _0x178486,
    79.921875 * _0x178486,
    101.5 * _0x178486,
    86.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(61.5 * _0x178486, 78.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    57.5 * _0x178486,
    73.421875 * _0x178486,
    51.5 * _0x178486,
    66.421875 * _0x178486,
    45.5 * _0x178486,
    68.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    32.5 * _0x178486,
    73.421875 * _0x178486,
    38.5 * _0x178486,
    75.421875 * _0x178486,
    46.5 * _0x178486,
    81.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    51.5 * _0x178486,
    84.921875 * _0x178486,
    51.5 * _0x178486,
    84.921875 * _0x178486,
    56.5 * _0x178486,
    88.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(116.5 * _0x178486, 127.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    124.5 * _0x178486,
    108.421875 * _0x178486,
    129.5 * _0x178486,
    104.421875 * _0x178486,
    141.5 * _0x178486,
    107.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    156.5 * _0x178486,
    112.421875 * _0x178486,
    153.5 * _0x178486,
    113.421875 * _0x178486,
    132.5 * _0x178486,
    134.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    123.5 * _0x178486,
    141.921875 * _0x178486,
    123.5 * _0x178486,
    141.921875 * _0x178486,
    114.5 * _0x178486,
    149.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(41.5 * _0x178486, 134.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    30.5 * _0x178486,
    119.421875 * _0x178486,
    25.5 * _0x178486,
    111.421875 * _0x178486,
    12.5 * _0x178486,
    115.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    4.5 * _0x178486,
    120.421875 * _0x178486,
    4.5 * _0x178486,
    121.421875 * _0x178486,
    26.5 * _0x178486,
    142.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    35 * _0x178486,
    149.921875 * _0x178486,
    35 * _0x178486,
    149.921875 * _0x178486,
    43.5 * _0x178486,
    157.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(78.5 * _0x178486, 51.921875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    99.5 * _0x178486,
    75.921875 * _0x178486,
    110.5 * _0x178486,
    96.921875 * _0x178486,
    118.5 * _0x178486,
    120.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    121.5 * _0x178486,
    140.921875 * _0x178486,
    107.5 * _0x178486,
    179.921875 * _0x178486,
    75.5 * _0x178486,
    183.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    30.5 * _0x178486,
    169.921875 * _0x178486,
    37.5 * _0x178486,
    131.921875 * _0x178486,
    34.5 * _0x178486,
    120.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    41.5 * _0x178486,
    89.921875 * _0x178486,
    61.5 * _0x178486,
    67.921875 * _0x178486,
    78.5 * _0x178486,
    51.921875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(72.5 * _0x178486, 72.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    76.5 * _0x178486,
    79.421875 * _0x178486,
    79.5 * _0x178486,
    80.421875 * _0x178486,
    83.5 * _0x178486,
    73.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    80.5 * _0x178486,
    96.921875 * _0x178486,
    79.5 * _0x178486,
    114.421875 * _0x178486,
    77.5 * _0x178486,
    120.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(42.5 * _0x178486, 163.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    62.5 * _0x178486,
    185.421875 * _0x178486,
    86.5 * _0x178486,
    186.421875 * _0x178486,
    111.5 * _0x178486,
    165.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    107.5 * _0x178486,
    176.421875 * _0x178486,
    95.5 * _0x178486,
    187.421875 * _0x178486,
    75.5 * _0x178486,
    188.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    53.5 * _0x178486,
    188.421875 * _0x178486,
    43.5 * _0x178486,
    171.421875 * _0x178486,
    42.5 * _0x178486,
    164.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 8 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(79.5 * _0x178486, 61.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    88.5 * _0x178486,
    31.421875 * _0x178486,
    81.5 * _0x178486,
    16.421875 * _0x178486,
    75.5 * _0x178486,
    7.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    77.5 * _0x178486,
    28.421875 * _0x178486,
    77.5 * _0x178486,
    37.421875 * _0x178486,
    68.5 * _0x178486,
    42.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    79.5 * _0x178486,
    57.421875 * _0x178486,
    79.5 * _0x178486,
    58.421875 * _0x178486,
    80.5 * _0x178486,
    61.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(72.5 * _0x178486, 72.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    76.5 * _0x178486,
    79.421875 * _0x178486,
    79.5 * _0x178486,
    80.421875 * _0x178486,
    83.5 * _0x178486,
    73.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    80.5 * _0x178486,
    96.921875 * _0x178486,
    79.5 * _0x178486,
    114.421875 * _0x178486,
    77.5 * _0x178486,
    120.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[8], _0x2af670[8], 10 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(96.5 * _0x178486, 76.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    100.5 * _0x178486,
    64.421875 * _0x178486,
    103.5 * _0x178486,
    62.421875 * _0x178486,
    110.5 * _0x178486,
    65.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    116.5 * _0x178486,
    66.421875 * _0x178486,
    117.5 * _0x178486,
    67.421875 * _0x178486,
    112.5 * _0x178486,
    73.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    107 * _0x178486,
    79.921875 * _0x178486,
    107 * _0x178486,
    79.921875 * _0x178486,
    101.5 * _0x178486,
    86.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[1], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(61.5 * _0x178486, 78.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    57.5 * _0x178486,
    73.421875 * _0x178486,
    51.5 * _0x178486,
    66.421875 * _0x178486,
    45.5 * _0x178486,
    68.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    32.5 * _0x178486,
    73.421875 * _0x178486,
    38.5 * _0x178486,
    75.421875 * _0x178486,
    46.5 * _0x178486,
    81.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    51.5 * _0x178486,
    84.921875 * _0x178486,
    51.5 * _0x178486,
    84.921875 * _0x178486,
    56.5 * _0x178486,
    88.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[1], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(116.5 * _0x178486, 127.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    124.5 * _0x178486,
    108.421875 * _0x178486,
    129.5 * _0x178486,
    104.421875 * _0x178486,
    141.5 * _0x178486,
    107.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    156.5 * _0x178486,
    112.421875 * _0x178486,
    153.5 * _0x178486,
    113.421875 * _0x178486,
    132.5 * _0x178486,
    134.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    123.5 * _0x178486,
    141.921875 * _0x178486,
    123.5 * _0x178486,
    141.921875 * _0x178486,
    114.5 * _0x178486,
    149.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[1], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(41.5 * _0x178486, 134.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    30.5 * _0x178486,
    119.421875 * _0x178486,
    25.5 * _0x178486,
    111.421875 * _0x178486,
    12.5 * _0x178486,
    115.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    4.5 * _0x178486,
    120.421875 * _0x178486,
    4.5 * _0x178486,
    121.421875 * _0x178486,
    26.5 * _0x178486,
    142.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    35 * _0x178486,
    149.921875 * _0x178486,
    35 * _0x178486,
    149.921875 * _0x178486,
    43.5 * _0x178486,
    157.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[1], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(78.5 * _0x178486, 51.921875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    99.5 * _0x178486,
    75.921875 * _0x178486,
    110.5 * _0x178486,
    96.921875 * _0x178486,
    118.5 * _0x178486,
    120.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    121.5 * _0x178486,
    140.921875 * _0x178486,
    107.5 * _0x178486,
    179.921875 * _0x178486,
    75.5 * _0x178486,
    183.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    30.5 * _0x178486,
    169.921875 * _0x178486,
    37.5 * _0x178486,
    131.921875 * _0x178486,
    34.5 * _0x178486,
    120.921875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    41.5 * _0x178486,
    89.921875 * _0x178486,
    61.5 * _0x178486,
    67.921875 * _0x178486,
    78.5 * _0x178486,
    51.921875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  circle(_0x4e9aee, 108.5 * _0x178486, 148.421875 * _0x178486, 9 * _0x178486);
  fill_path(_0x4e9aee, _0x2af670[5]);
  circle(_0x4e9aee, 106.5 * _0x178486, 144.421875 * _0x178486, 3 * _0x178486);
  fill_path(_0x4e9aee, _0x2af670[6]);
  circle(_0x4e9aee, 46.5 * _0x178486, 148.421875 * _0x178486, 9 * _0x178486);
  fill_path(_0x4e9aee, _0x2af670[5]);
  circle(_0x4e9aee, 44.5 * _0x178486, 144.421875 * _0x178486, 3 * _0x178486);
  fill_path(_0x4e9aee, _0x2af670[6]);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(116.5 * _0x178486, 114.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    121.5 * _0x178486,
    137.421875 * _0x178486,
    118.5 * _0x178486,
    133.421875 * _0x178486,
    108.5 * _0x178486,
    139.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    94.5 * _0x178486,
    146.421875 * _0x178486,
    96.5 * _0x178486,
    148.421875 * _0x178486,
    95.5 * _0x178486,
    152.421875 * _0x178486
  );
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.translate(0, -2 * _0x178486);
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(35.5 * _0x178486, 131.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    36.5 * _0x178486,
    140.421875 * _0x178486,
    39.5 * _0x178486,
    140.421875 * _0x178486,
    49.5 * _0x178486,
    143.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    59.5 * _0x178486,
    149.421875 * _0x178486,
    57.5 * _0x178486,
    151.421875 * _0x178486,
    59.5 * _0x178486,
    155.421875 * _0x178486
  );
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(84.5 * _0x178486, 57.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    101.5 * _0x178486,
    120.421875 * _0x178486,
    92.5 * _0x178486,
    127.421875 * _0x178486,
    78.5 * _0x178486,
    134.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    51.5 * _0x178486,
    131.421875 * _0x178486,
    63.5 * _0x178486,
    102.421875 * _0x178486,
    70.5 * _0x178486,
    59.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    75 * _0x178486,
    55.421875 * _0x178486,
    78.5 * _0x178486,
    52.421875 * _0x178486,
    79.5 * _0x178486,
    51.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[4]);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(79.5 * _0x178486, 61.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    88.5 * _0x178486,
    31.421875 * _0x178486,
    81.5 * _0x178486,
    16.421875 * _0x178486,
    75.5 * _0x178486,
    7.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    77.5 * _0x178486,
    28.421875 * _0x178486,
    77.5 * _0x178486,
    37.421875 * _0x178486,
    68.5 * _0x178486,
    42.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    79.5 * _0x178486,
    57.421875 * _0x178486,
    79.5 * _0x178486,
    58.421875 * _0x178486,
    80.5 * _0x178486,
    61.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(72.5 * _0x178486, 72.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    76.5 * _0x178486,
    79.421875 * _0x178486,
    79.5 * _0x178486,
    80.421875 * _0x178486,
    83.5 * _0x178486,
    73.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    80.5 * _0x178486,
    96.921875 * _0x178486,
    79.5 * _0x178486,
    114.421875 * _0x178486,
    77.5 * _0x178486,
    120.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(87.5 * _0x178486, 154.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    93.5 * _0x178486,
    163.921875 * _0x178486,
    93.5 * _0x178486,
    163.921875 * _0x178486,
    99.5 * _0x178486,
    173.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    95 * _0x178486,
    177.421875 * _0x178486,
    95 * _0x178486,
    177.421875 * _0x178486,
    90.5 * _0x178486,
    181.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    89 * _0x178486,
    167.921875 * _0x178486,
    89 * _0x178486,
    167.921875 * _0x178486,
    87.5 * _0x178486,
    154.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[6], _0x2af670[7], 2 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(81.5 * _0x178486, 164.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    84 * _0x178486,
    172.921875 * _0x178486,
    84 * _0x178486,
    172.921875 * _0x178486,
    86.5 * _0x178486,
    181.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    82.5 * _0x178486,
    182.421875 * _0x178486,
    82.5 * _0x178486,
    182.421875 * _0x178486,
    78.5 * _0x178486,
    183.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[6], _0x2af670[7], 2 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(72.5 * _0x178486, 164.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    73.5 * _0x178486,
    173.921875 * _0x178486,
    73.5 * _0x178486,
    173.921875 * _0x178486,
    74.5 * _0x178486,
    183.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    70.5 * _0x178486,
    182.921875 * _0x178486,
    70.5 * _0x178486,
    182.921875 * _0x178486,
    66.5 * _0x178486,
    182.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[6], _0x2af670[7], 2 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(65.5 * _0x178486, 156.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    65 * _0x178486,
    168.421875 * _0x178486,
    65 * _0x178486,
    168.421875 * _0x178486,
    64.5 * _0x178486,
    180.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    58.5 * _0x178486,
    177.421875 * _0x178486,
    58.5 * _0x178486,
    177.421875 * _0x178486,
    52.5 * _0x178486,
    174.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[6], _0x2af670[7], 2 * _0x178486);
  _0x4e9aee.beginPath();
  _0x4e9aee.lineCap = "round";
  _0x4e9aee.lineJoin = "round";
  _0x4e9aee.moveTo(42.5 * _0x178486, 163.421875 * _0x178486);
  _0x4e9aee.bezierCurveTo(
    62.5 * _0x178486,
    185.421875 * _0x178486,
    86.5 * _0x178486,
    186.421875 * _0x178486,
    111.5 * _0x178486,
    165.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    107.5 * _0x178486,
    176.421875 * _0x178486,
    95.5 * _0x178486,
    187.421875 * _0x178486,
    75.5 * _0x178486,
    188.421875 * _0x178486
  );
  _0x4e9aee.bezierCurveTo(
    53.5 * _0x178486,
    188.421875 * _0x178486,
    43.5 * _0x178486,
    171.421875 * _0x178486,
    42.5 * _0x178486,
    164.421875 * _0x178486
  );
  _0x4e9aee.closePath();
  fill_path(_0x4e9aee, _0x2af670[3], _0x2af670[2], 4 * _0x178486);
  return _0x18e945;
}
function create_hurt_pirahna(_0x4de4e8, _0xfe504c) {
  var _0x48d0ad = document.createElement("canvas");
  var _0x42c723 = _0x48d0ad.getContext("2d");
  _0x48d0ad.width = 158 * _0x4de4e8;
  _0x48d0ad.height = 201 * _0x4de4e8;
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(96.5 * _0x4de4e8, 76.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    100.5 * _0x4de4e8,
    64.421875 * _0x4de4e8,
    103.5 * _0x4de4e8,
    62.421875 * _0x4de4e8,
    110.5 * _0x4de4e8,
    65.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    116.5 * _0x4de4e8,
    66.421875 * _0x4de4e8,
    117.5 * _0x4de4e8,
    67.421875 * _0x4de4e8,
    112.5 * _0x4de4e8,
    73.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    107 * _0x4de4e8,
    79.921875 * _0x4de4e8,
    107 * _0x4de4e8,
    79.921875 * _0x4de4e8,
    101.5 * _0x4de4e8,
    86.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(61.5 * _0x4de4e8, 78.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    57.5 * _0x4de4e8,
    73.421875 * _0x4de4e8,
    51.5 * _0x4de4e8,
    66.421875 * _0x4de4e8,
    45.5 * _0x4de4e8,
    68.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    32.5 * _0x4de4e8,
    73.421875 * _0x4de4e8,
    38.5 * _0x4de4e8,
    75.421875 * _0x4de4e8,
    46.5 * _0x4de4e8,
    81.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    51.5 * _0x4de4e8,
    84.921875 * _0x4de4e8,
    51.5 * _0x4de4e8,
    84.921875 * _0x4de4e8,
    56.5 * _0x4de4e8,
    88.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(116.5 * _0x4de4e8, 127.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    124.5 * _0x4de4e8,
    108.421875 * _0x4de4e8,
    129.5 * _0x4de4e8,
    104.421875 * _0x4de4e8,
    141.5 * _0x4de4e8,
    107.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    156.5 * _0x4de4e8,
    112.421875 * _0x4de4e8,
    153.5 * _0x4de4e8,
    113.421875 * _0x4de4e8,
    132.5 * _0x4de4e8,
    134.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    123.5 * _0x4de4e8,
    141.921875 * _0x4de4e8,
    123.5 * _0x4de4e8,
    141.921875 * _0x4de4e8,
    114.5 * _0x4de4e8,
    149.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(41.5 * _0x4de4e8, 134.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    30.5 * _0x4de4e8,
    119.421875 * _0x4de4e8,
    25.5 * _0x4de4e8,
    111.421875 * _0x4de4e8,
    12.5 * _0x4de4e8,
    115.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    4.5 * _0x4de4e8,
    120.421875 * _0x4de4e8,
    4.5 * _0x4de4e8,
    121.421875 * _0x4de4e8,
    26.5 * _0x4de4e8,
    142.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    35 * _0x4de4e8,
    149.921875 * _0x4de4e8,
    35 * _0x4de4e8,
    149.921875 * _0x4de4e8,
    43.5 * _0x4de4e8,
    157.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(78.5 * _0x4de4e8, 51.921875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    99.5 * _0x4de4e8,
    75.921875 * _0x4de4e8,
    110.5 * _0x4de4e8,
    96.921875 * _0x4de4e8,
    118.5 * _0x4de4e8,
    120.921875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    121.5 * _0x4de4e8,
    140.921875 * _0x4de4e8,
    107.5 * _0x4de4e8,
    179.921875 * _0x4de4e8,
    75.5 * _0x4de4e8,
    183.921875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    30.5 * _0x4de4e8,
    169.921875 * _0x4de4e8,
    37.5 * _0x4de4e8,
    131.921875 * _0x4de4e8,
    34.5 * _0x4de4e8,
    120.921875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    41.5 * _0x4de4e8,
    89.921875 * _0x4de4e8,
    61.5 * _0x4de4e8,
    67.921875 * _0x4de4e8,
    78.5 * _0x4de4e8,
    51.921875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(72.5 * _0x4de4e8, 72.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    76.5 * _0x4de4e8,
    79.421875 * _0x4de4e8,
    79.5 * _0x4de4e8,
    80.421875 * _0x4de4e8,
    83.5 * _0x4de4e8,
    73.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    80.5 * _0x4de4e8,
    96.921875 * _0x4de4e8,
    79.5 * _0x4de4e8,
    114.421875 * _0x4de4e8,
    77.5 * _0x4de4e8,
    120.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(42.5 * _0x4de4e8, 163.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    62.5 * _0x4de4e8,
    185.421875 * _0x4de4e8,
    86.5 * _0x4de4e8,
    186.421875 * _0x4de4e8,
    111.5 * _0x4de4e8,
    165.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    107.5 * _0x4de4e8,
    176.421875 * _0x4de4e8,
    95.5 * _0x4de4e8,
    187.421875 * _0x4de4e8,
    75.5 * _0x4de4e8,
    188.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    53.5 * _0x4de4e8,
    188.421875 * _0x4de4e8,
    43.5 * _0x4de4e8,
    171.421875 * _0x4de4e8,
    42.5 * _0x4de4e8,
    164.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(79.5 * _0x4de4e8, 61.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    88.5 * _0x4de4e8,
    31.421875 * _0x4de4e8,
    81.5 * _0x4de4e8,
    16.421875 * _0x4de4e8,
    75.5 * _0x4de4e8,
    7.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    77.5 * _0x4de4e8,
    28.421875 * _0x4de4e8,
    77.5 * _0x4de4e8,
    37.421875 * _0x4de4e8,
    68.5 * _0x4de4e8,
    42.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    79.5 * _0x4de4e8,
    57.421875 * _0x4de4e8,
    79.5 * _0x4de4e8,
    58.421875 * _0x4de4e8,
    80.5 * _0x4de4e8,
    61.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  _0x42c723.beginPath();
  _0x42c723.lineCap = "round";
  _0x42c723.lineJoin = "round";
  _0x42c723.moveTo(72.5 * _0x4de4e8, 72.421875 * _0x4de4e8);
  _0x42c723.bezierCurveTo(
    76.5 * _0x4de4e8,
    79.421875 * _0x4de4e8,
    79.5 * _0x4de4e8,
    80.421875 * _0x4de4e8,
    83.5 * _0x4de4e8,
    73.421875 * _0x4de4e8
  );
  _0x42c723.bezierCurveTo(
    80.5 * _0x4de4e8,
    96.921875 * _0x4de4e8,
    79.5 * _0x4de4e8,
    114.421875 * _0x4de4e8,
    77.5 * _0x4de4e8,
    120.421875 * _0x4de4e8
  );
  _0x42c723.closePath();
  fill_path(_0x42c723, _0xfe504c[0], _0xfe504c[0], 10 * _0x4de4e8);
  return _0x48d0ad;
}
function create_flour(_0x3dae53, _0x438eb2, _0xcf42ff) {
  var _0x23f82d = document.createElement("canvas");
  var _0x5cea2f = _0x23f82d.getContext("2d");
  _0x23f82d.width = 400 * _0x3dae53;
  _0x23f82d.height = 170 * _0x3dae53;
  _0x5cea2f.translate(0, -170 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(159.5 * _0x3dae53, 322.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    240.5 * _0x3dae53,
    293.0625 * _0x3dae53,
    240.5 * _0x3dae53,
    293.0625 * _0x3dae53,
    321.5 * _0x3dae53,
    264.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    276.5 * _0x3dae53,
    230.0625 * _0x3dae53,
    276.5 * _0x3dae53,
    230.0625 * _0x3dae53,
    231.5 * _0x3dae53,
    196.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    158.5 * _0x3dae53,
    221.5625 * _0x3dae53,
    158.5 * _0x3dae53,
    221.5625 * _0x3dae53,
    85.5 * _0x3dae53,
    247.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, _0xcf42ff[0], _0xcf42ff[1], 12 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(212.5 * _0x3dae53, 270.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    235 * _0x3dae53,
    261.5625 * _0x3dae53,
    235 * _0x3dae53,
    261.5625 * _0x3dae53,
    257.5 * _0x3dae53,
    253.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, undefined, _0xcf42ff[0], 12 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(193.5 * _0x3dae53, 226.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    204.5 * _0x3dae53,
    242.0625 * _0x3dae53,
    242.5 * _0x3dae53,
    237.0625 * _0x3dae53,
    251.5 * _0x3dae53,
    225.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    246.5 * _0x3dae53,
    195.0625 * _0x3dae53,
    205.5 * _0x3dae53,
    190.0625 * _0x3dae53,
    193.5 * _0x3dae53,
    227.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, _0xcf42ff[2], _0xcf42ff[3], 12 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(164.5 * _0x3dae53, 245.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    182.5 * _0x3dae53,
    264.0625 * _0x3dae53,
    252.5 * _0x3dae53,
    258.0625 * _0x3dae53,
    276.5 * _0x3dae53,
    244.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    265.5 * _0x3dae53,
    226.0625 * _0x3dae53,
    244.5 * _0x3dae53,
    231.0625 * _0x3dae53,
    229.5 * _0x3dae53,
    230.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    205.5 * _0x3dae53,
    227.0625 * _0x3dae53,
    175.5 * _0x3dae53,
    202.0625 * _0x3dae53,
    162.5 * _0x3dae53,
    244.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, _0xcf42ff[2], _0xcf42ff[3], 12 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(115.5 * _0x3dae53, 260.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    134.5 * _0x3dae53,
    279.0625 * _0x3dae53,
    170.5 * _0x3dae53,
    275.0625 * _0x3dae53,
    191.5 * _0x3dae53,
    257.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    174.5 * _0x3dae53,
    208.0625 * _0x3dae53,
    142.5 * _0x3dae53,
    197.0625 * _0x3dae53,
    116.5 * _0x3dae53,
    259.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, _0xcf42ff[2], _0xcf42ff[3], 12 * _0x3dae53);
  _0x5cea2f.beginPath();
  _0x5cea2f.lineCap = "round";
  _0x5cea2f.lineJoin = "round";
  _0x5cea2f.moveTo(152.5 * _0x3dae53, 278.0625 * _0x3dae53);
  _0x5cea2f.bezierCurveTo(
    165.5 * _0x3dae53,
    294.0625 * _0x3dae53,
    200.5 * _0x3dae53,
    287.0625 * _0x3dae53,
    216.5 * _0x3dae53,
    278.0625 * _0x3dae53
  );
  _0x5cea2f.bezierCurveTo(
    206.5 * _0x3dae53,
    247.0625 * _0x3dae53,
    173.5 * _0x3dae53,
    233.0625 * _0x3dae53,
    153.5 * _0x3dae53,
    276.0625 * _0x3dae53
  );
  _0x5cea2f.closePath();
  fill_path(_0x5cea2f, _0xcf42ff[2], _0xcf42ff[3], 12 * _0x3dae53);
  return _0x23f82d;
}
function create_leaderboard_mobile(_0x2aea0d) {
  var _0x1ce864 = document.createElement("canvas");
  var _0x394783 = _0x1ce864.getContext("2d");
  var _0x4d1c34 = 200 * _0x2aea0d;
  var _0x488782 = 180 * _0x2aea0d;
  var _0x2ae350 = 8 * _0x2aea0d;
  _0x1ce864.width = _0x4d1c34;
  _0x1ce864.height = _0x488782;
  _0x394783.beginPath();
  round_rect(_0x394783, 0, 0, _0x4d1c34, _0x488782 - _0x2ae350, _0x2ae350);
  _0x394783.globalAlpha = 0.8;
  fill_path(_0x394783, "#1D6055");
  _0x394783.globalAlpha = 1;
  var _0xea7a03 = create_text(_0x2aea0d, "Leaderboard", 25, "#FFF");
  _0x394783.drawImage(
    _0xea7a03,
    (_0x4d1c34 - _0xea7a03.width) / 2,
    _0x2aea0d * 5
  );
  return _0x1ce864;
}
function create_leaderboard(_0x328c78) {
  var _0x39010e = document.createElement("canvas");
  var _0x49c0fc = _0x39010e.getContext("2d");
  var _0x2688e2 = 200 * _0x328c78;
  var _0x54201a = 270 * _0x328c78;
  var _0x142ea6 = 8 * _0x328c78;
  _0x39010e.width = _0x2688e2;
  _0x39010e.height = _0x54201a + 20;
  _0x49c0fc.beginPath();
  round_rect(_0x49c0fc, 0, 0, _0x2688e2, _0x54201a - _0x142ea6, _0x142ea6);
  _0x49c0fc.globalAlpha = 0.5;
  fill_path(_0x49c0fc, "#1D6055");
  _0x49c0fc.globalAlpha = 1;
  var _0x5d0275 = create_text(_0x328c78, "Leaderboard", 25, "#FFF");
  _0x49c0fc.drawImage(
    _0x5d0275,
    (_0x2688e2 - _0x5d0275.width) / 2,
    _0x328c78 * 5
  );
  return _0x39010e;
}
function create_pumpkin(_0x589b23, _0xf2861f, _0x2069af) {
  var _0x1578c8 = document.createElement("canvas");
  var _0xc44a32 = _0x1578c8.getContext("2d");
  _0x1578c8.width = 272 * _0x589b23;
  _0x1578c8.height = 264 * _0x589b23;
  _0xc44a32.translate(0, 20 * _0x589b23);
  _0xc44a32.globalAlpha = _0xf2861f ? 0.5 : 1;
  _0xc44a32.beginPath();
  _0xc44a32.lineCap = "round";
  _0xc44a32.lineJoin = "round";
  _0xc44a32.moveTo(56.999969482421875 * _0x589b23, 84.517333984375 * _0x589b23);
  _0xc44a32.bezierCurveTo(
    61.999969482421875 * _0x589b23,
    58.517333984375 * _0x589b23,
    79.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23,
    102.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    119.99996948242188 * _0x589b23,
    26.517333984375 * _0x589b23,
    137.99996948242188 * _0x589b23,
    32.517333984375 * _0x589b23,
    156.99996948242188 * _0x589b23,
    44.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    187.99996948242188 * _0x589b23,
    42.517333984375 * _0x589b23,
    195.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23,
    202.99996948242188 * _0x589b23,
    77.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    229.99996948242188 * _0x589b23,
    80.517333984375 * _0x589b23,
    231.99996948242188 * _0x589b23,
    96.517333984375 * _0x589b23,
    229.99996948242188 * _0x589b23,
    118.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    241.99996948242188 * _0x589b23,
    147.517333984375 * _0x589b23,
    236.99996948242188 * _0x589b23,
    148.517333984375 * _0x589b23,
    220.99996948242188 * _0x589b23,
    165.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    222.99996948242188 * _0x589b23,
    192.517333984375 * _0x589b23,
    209.99996948242188 * _0x589b23,
    212.517333984375 * _0x589b23,
    177.99996948242188 * _0x589b23,
    213.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    159.99996948242188 * _0x589b23,
    234.517333984375 * _0x589b23,
    141.99996948242188 * _0x589b23,
    234.517333984375 * _0x589b23,
    116.99996948242188 * _0x589b23,
    222.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    72.99996948242188 * _0x589b23,
    226.517333984375 * _0x589b23,
    66.99996948242188 * _0x589b23,
    207.517333984375 * _0x589b23,
    65.99996948242188 * _0x589b23,
    190.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    35.999969482421875 * _0x589b23,
    180.517333984375 * _0x589b23,
    30.999969482421875 * _0x589b23,
    162.517333984375 * _0x589b23,
    39.999969482421875 * _0x589b23,
    135.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    23.999969482421875 * _0x589b23,
    110.517333984375 * _0x589b23,
    43.999969482421875 * _0x589b23,
    90.517333984375 * _0x589b23,
    55.999969482421875 * _0x589b23,
    85.517333984375 * _0x589b23
  );
  _0xc44a32.closePath();
  fill_path(_0xc44a32, _0x2069af[0]);
  _0xc44a32.translate(0, -20 * _0x589b23);
  _0xc44a32.globalAlpha = 1;
  _0xc44a32.beginPath();
  _0xc44a32.lineCap = "round";
  _0xc44a32.lineJoin = "round";
  _0xc44a32.moveTo(56.999969482421875 * _0x589b23, 84.517333984375 * _0x589b23);
  _0xc44a32.bezierCurveTo(
    61.999969482421875 * _0x589b23,
    58.517333984375 * _0x589b23,
    79.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23,
    102.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    119.99996948242188 * _0x589b23,
    26.517333984375 * _0x589b23,
    137.99996948242188 * _0x589b23,
    32.517333984375 * _0x589b23,
    156.99996948242188 * _0x589b23,
    44.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    187.99996948242188 * _0x589b23,
    42.517333984375 * _0x589b23,
    195.99996948242188 * _0x589b23,
    50.517333984375 * _0x589b23,
    202.99996948242188 * _0x589b23,
    77.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    229.99996948242188 * _0x589b23,
    80.517333984375 * _0x589b23,
    231.99996948242188 * _0x589b23,
    96.517333984375 * _0x589b23,
    229.99996948242188 * _0x589b23,
    118.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    241.99996948242188 * _0x589b23,
    147.517333984375 * _0x589b23,
    236.99996948242188 * _0x589b23,
    148.517333984375 * _0x589b23,
    220.99996948242188 * _0x589b23,
    165.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    222.99996948242188 * _0x589b23,
    192.517333984375 * _0x589b23,
    209.99996948242188 * _0x589b23,
    212.517333984375 * _0x589b23,
    177.99996948242188 * _0x589b23,
    213.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    159.99996948242188 * _0x589b23,
    234.517333984375 * _0x589b23,
    141.99996948242188 * _0x589b23,
    234.517333984375 * _0x589b23,
    116.99996948242188 * _0x589b23,
    222.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    72.99996948242188 * _0x589b23,
    226.517333984375 * _0x589b23,
    66.99996948242188 * _0x589b23,
    207.517333984375 * _0x589b23,
    65.99996948242188 * _0x589b23,
    190.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    35.999969482421875 * _0x589b23,
    180.517333984375 * _0x589b23,
    30.999969482421875 * _0x589b23,
    162.517333984375 * _0x589b23,
    39.999969482421875 * _0x589b23,
    135.517333984375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    23.999969482421875 * _0x589b23,
    110.517333984375 * _0x589b23,
    43.999969482421875 * _0x589b23,
    90.517333984375 * _0x589b23,
    55.999969482421875 * _0x589b23,
    85.517333984375 * _0x589b23
  );
  _0xc44a32.closePath();
  fill_path(_0xc44a32, _0x2069af[1], _0x2069af[2], 8 * _0x589b23);
  _0xc44a32.beginPath();
  _0xc44a32.lineCap = "round";
  _0xc44a32.lineJoin = "round";
  _0xc44a32.moveTo(
    123.99996948242188 * _0x589b23,
    116.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    115.99996948242188 * _0x589b23,
    99.18402099609375 * _0x589b23,
    109.99996948242188 * _0x589b23,
    74.18402099609375 * _0x589b23,
    109.99996948242188 * _0x589b23,
    63.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    115.99996948242188 * _0x589b23,
    69.18402099609375 * _0x589b23,
    125.99996948242188 * _0x589b23,
    87.18402099609375 * _0x589b23,
    137.99996948242188 * _0x589b23,
    112.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    142.99996948242188 * _0x589b23,
    84.18402099609375 * _0x589b23,
    143.99996948242188 * _0x589b23,
    76.18402099609375 * _0x589b23,
    153.99996948242188 * _0x589b23,
    62.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    155.99996948242188 * _0x589b23,
    79.18402099609375 * _0x589b23,
    149.99996948242188 * _0x589b23,
    110.18402099609375 * _0x589b23,
    151.99996948242188 * _0x589b23,
    117.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    162.99996948242188 * _0x589b23,
    104.18402099609375 * _0x589b23,
    180.99996948242188 * _0x589b23,
    91.18402099609375 * _0x589b23,
    191.99996948242188 * _0x589b23,
    91.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    185.99996948242188 * _0x589b23,
    102.18402099609375 * _0x589b23,
    180.99996948242188 * _0x589b23,
    106.18402099609375 * _0x589b23,
    160.99996948242188 * _0x589b23,
    124.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    190.99996948242188 * _0x589b23,
    121.18402099609375 * _0x589b23,
    199.99996948242188 * _0x589b23,
    120.18402099609375 * _0x589b23,
    207.99996948242188 * _0x589b23,
    123.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    199.99996948242188 * _0x589b23,
    129.18402099609375 * _0x589b23,
    181.99996948242188 * _0x589b23,
    132.18402099609375 * _0x589b23,
    160.99996948242188 * _0x589b23,
    135.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    179.99996948242188 * _0x589b23,
    142.18402099609375 * _0x589b23,
    193.99996948242188 * _0x589b23,
    151.18402099609375 * _0x589b23,
    196.99996948242188 * _0x589b23,
    156.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    185.99996948242188 * _0x589b23,
    156.18402099609375 * _0x589b23,
    163.99996948242188 * _0x589b23,
    149.18402099609375 * _0x589b23,
    152.99996948242188 * _0x589b23,
    147.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    157.99996948242188 * _0x589b23,
    155.18402099609375 * _0x589b23,
    165.99996948242188 * _0x589b23,
    176.18402099609375 * _0x589b23,
    169.99996948242188 * _0x589b23,
    195.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    162.99996948242188 * _0x589b23,
    190.18402099609375 * _0x589b23,
    147.99996948242188 * _0x589b23,
    167.18402099609375 * _0x589b23,
    139.99996948242188 * _0x589b23,
    153.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    137.99996948242188 * _0x589b23,
    167.18402099609375 * _0x589b23,
    126.99996948242188 * _0x589b23,
    194.18402099609375 * _0x589b23,
    119.99996948242188 * _0x589b23,
    204.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    117.99996948242188 * _0x589b23,
    186.18402099609375 * _0x589b23,
    123.99996948242188 * _0x589b23,
    165.18402099609375 * _0x589b23,
    126.99996948242188 * _0x589b23,
    149.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    110.99996948242188 * _0x589b23,
    163.18402099609375 * _0x589b23,
    103.99996948242188 * _0x589b23,
    170.18402099609375 * _0x589b23,
    82.99996948242188 * _0x589b23,
    177.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    90.99996948242188 * _0x589b23,
    162.18402099609375 * _0x589b23,
    99.99996948242188 * _0x589b23,
    153.18402099609375 * _0x589b23,
    117.99996948242188 * _0x589b23,
    140.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    97.99996948242188 * _0x589b23,
    140.18402099609375 * _0x589b23,
    83.99996948242188 * _0x589b23,
    139.18402099609375 * _0x589b23,
    65.99996948242188 * _0x589b23,
    132.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    77.99996948242188 * _0x589b23,
    127.18402099609375 * _0x589b23,
    95.99996948242188 * _0x589b23,
    127.18402099609375 * _0x589b23,
    115.99996948242188 * _0x589b23,
    127.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    91.99996948242188 * _0x589b23,
    113.18402099609375 * _0x589b23,
    84.99996948242188 * _0x589b23,
    107.18402099609375 * _0x589b23,
    76.99996948242188 * _0x589b23,
    96.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    94.99996948242188 * _0x589b23,
    99.18402099609375 * _0x589b23,
    109.99996948242188 * _0x589b23,
    109.18402099609375 * _0x589b23,
    123.99996948242188 * _0x589b23,
    116.18402099609375 * _0x589b23
  );
  _0xc44a32.closePath();
  fill_path(_0xc44a32, _0x2069af[3]);
  _0xc44a32.beginPath();
  _0xc44a32.lineCap = "round";
  _0xc44a32.lineJoin = "round";
  _0xc44a32.moveTo(
    131.99996948242188 * _0x589b23,
    119.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    141.99996948242188 * _0x589b23,
    119.18402099609375 * _0x589b23,
    145.99996948242188 * _0x589b23,
    116.18402099609375 * _0x589b23,
    147.99996948242188 * _0x589b23,
    109.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    151.99996948242188 * _0x589b23,
    107.18402099609375 * _0x589b23,
    159.99996948242188 * _0x589b23,
    107.18402099609375 * _0x589b23,
    156.99996948242188 * _0x589b23,
    123.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    155.99996948242188 * _0x589b23,
    140.18402099609375 * _0x589b23,
    142.99996948242188 * _0x589b23,
    149.18402099609375 * _0x589b23,
    132.99996948242188 * _0x589b23,
    147.18402099609375 * _0x589b23
  );
  _0xc44a32.bezierCurveTo(
    119.99996948242188 * _0x589b23,
    144.18402099609375 * _0x589b23,
    113.99996948242188 * _0x589b23,
    122.18402099609375 * _0x589b23,
    131.99996948242188 * _0x589b23,
    119.18402099609375 * _0x589b23
  );
  _0xc44a32.closePath();
  fill_path(_0xc44a32, _0x2069af[4], _0x2069af[5], 6 * _0x589b23);
  return _0x1578c8;
}
function create_brambles(_0x135b0c, _0x4ae43b, _0x4dfdf5) {
  var _0x2dd24f = document.createElement("canvas");
  var _0x3f98cc = _0x2dd24f.getContext("2d");
  _0x2dd24f.width = 247 * _0x135b0c;
  _0x2dd24f.height = 247 * _0x135b0c;
  _0x3f98cc.translate(0, 10 * _0x135b0c);
  _0x3f98cc.globalAlpha = _0x4ae43b ? 0.5 : 1;
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(150 * _0x135b0c, 62 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    151.5 * _0x135b0c,
    71.5 * _0x135b0c,
    149 * _0x135b0c,
    70 * _0x135b0c,
    153 * _0x135b0c,
    81 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    158 * _0x135b0c,
    73.5 * _0x135b0c,
    158 * _0x135b0c,
    73.5 * _0x135b0c,
    163 * _0x135b0c,
    66 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[0]);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(164 * _0x135b0c, 171 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    149 * _0x135b0c,
    159 * _0x135b0c,
    156.5 * _0x135b0c,
    165 * _0x135b0c,
    149 * _0x135b0c,
    159 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    149 * _0x135b0c,
    167 * _0x135b0c,
    149 * _0x135b0c,
    170 * _0x135b0c,
    152 * _0x135b0c,
    178 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[0]);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(132 * _0x135b0c, 95 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    154 * _0x135b0c,
    102 * _0x135b0c,
    154 * _0x135b0c,
    126 * _0x135b0c,
    137 * _0x135b0c,
    139 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    113 * _0x135b0c,
    152 * _0x135b0c,
    89 * _0x135b0c,
    136 * _0x135b0c,
    80 * _0x135b0c,
    121 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    57 * _0x135b0c,
    89 * _0x135b0c,
    69 * _0x135b0c,
    63 * _0x135b0c,
    79 * _0x135b0c,
    52 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    110 * _0x135b0c,
    20 * _0x135b0c,
    139 * _0x135b0c,
    21 * _0x135b0c,
    150 * _0x135b0c,
    25 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    197 * _0x135b0c,
    36 * _0x135b0c,
    221 * _0x135b0c,
    67 * _0x135b0c,
    226 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    234 * _0x135b0c,
    134 * _0x135b0c,
    214 * _0x135b0c,
    177 * _0x135b0c,
    195 * _0x135b0c,
    197 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    144 * _0x135b0c,
    242 * _0x135b0c,
    79 * _0x135b0c,
    216 * _0x135b0c,
    58 * _0x135b0c,
    206 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    13 * _0x135b0c,
    174 * _0x135b0c,
    20 * _0x135b0c,
    134 * _0x135b0c,
    23 * _0x135b0c,
    107 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    26 * _0x135b0c,
    78 * _0x135b0c,
    33 * _0x135b0c,
    60 * _0x135b0c,
    38 * _0x135b0c,
    43 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    42 * _0x135b0c,
    32 * _0x135b0c,
    47 * _0x135b0c,
    32 * _0x135b0c,
    50 * _0x135b0c,
    36 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    54 * _0x135b0c,
    37 * _0x135b0c,
    50 * _0x135b0c,
    52 * _0x135b0c,
    44 * _0x135b0c,
    87 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    40 * _0x135b0c,
    115 * _0x135b0c,
    46 * _0x135b0c,
    142 * _0x135b0c,
    57 * _0x135b0c,
    158 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    76 * _0x135b0c,
    189 * _0x135b0c,
    129 * _0x135b0c,
    182 * _0x135b0c,
    152 * _0x135b0c,
    173 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    186 * _0x135b0c,
    156 * _0x135b0c,
    191 * _0x135b0c,
    106 * _0x135b0c,
    176 * _0x135b0c,
    85 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    159 * _0x135b0c,
    61 * _0x135b0c,
    132 * _0x135b0c,
    62 * _0x135b0c,
    122 * _0x135b0c,
    66 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    108 * _0x135b0c,
    74 * _0x135b0c,
    108 * _0x135b0c,
    89 * _0x135b0c,
    116 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    123 * _0x135b0c,
    92 * _0x135b0c,
    130 * _0x135b0c,
    93 * _0x135b0c,
    131 * _0x135b0c,
    94 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[0]);
  _0x3f98cc.translate(0, -10 * _0x135b0c);
  _0x3f98cc.globalAlpha = 1;
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(150 * _0x135b0c, 62 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    151.5 * _0x135b0c,
    71.5 * _0x135b0c,
    149 * _0x135b0c,
    70 * _0x135b0c,
    153 * _0x135b0c,
    81 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    158 * _0x135b0c,
    73.5 * _0x135b0c,
    158 * _0x135b0c,
    73.5 * _0x135b0c,
    163 * _0x135b0c,
    66 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[5]);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(164 * _0x135b0c, 171 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    149 * _0x135b0c,
    159 * _0x135b0c,
    156.5 * _0x135b0c,
    165 * _0x135b0c,
    149 * _0x135b0c,
    159 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    149 * _0x135b0c,
    167 * _0x135b0c,
    149 * _0x135b0c,
    170 * _0x135b0c,
    152 * _0x135b0c,
    178 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[5]);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(132 * _0x135b0c, 95 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    154 * _0x135b0c,
    102 * _0x135b0c,
    154 * _0x135b0c,
    126 * _0x135b0c,
    137 * _0x135b0c,
    139 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    113 * _0x135b0c,
    152 * _0x135b0c,
    89 * _0x135b0c,
    136 * _0x135b0c,
    80 * _0x135b0c,
    121 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    57 * _0x135b0c,
    89 * _0x135b0c,
    69 * _0x135b0c,
    63 * _0x135b0c,
    79 * _0x135b0c,
    52 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    110 * _0x135b0c,
    20 * _0x135b0c,
    139 * _0x135b0c,
    21 * _0x135b0c,
    150 * _0x135b0c,
    25 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    197 * _0x135b0c,
    36 * _0x135b0c,
    221 * _0x135b0c,
    67 * _0x135b0c,
    226 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    234 * _0x135b0c,
    134 * _0x135b0c,
    214 * _0x135b0c,
    177 * _0x135b0c,
    195 * _0x135b0c,
    197 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    144 * _0x135b0c,
    242 * _0x135b0c,
    79 * _0x135b0c,
    216 * _0x135b0c,
    58 * _0x135b0c,
    206 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    13 * _0x135b0c,
    174 * _0x135b0c,
    20 * _0x135b0c,
    134 * _0x135b0c,
    23 * _0x135b0c,
    107 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    26 * _0x135b0c,
    78 * _0x135b0c,
    33 * _0x135b0c,
    60 * _0x135b0c,
    38 * _0x135b0c,
    43 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    42 * _0x135b0c,
    32 * _0x135b0c,
    47 * _0x135b0c,
    32 * _0x135b0c,
    50 * _0x135b0c,
    36 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    54 * _0x135b0c,
    37 * _0x135b0c,
    50 * _0x135b0c,
    52 * _0x135b0c,
    44 * _0x135b0c,
    87 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    40 * _0x135b0c,
    115 * _0x135b0c,
    46 * _0x135b0c,
    142 * _0x135b0c,
    57 * _0x135b0c,
    158 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    76 * _0x135b0c,
    189 * _0x135b0c,
    129 * _0x135b0c,
    182 * _0x135b0c,
    152 * _0x135b0c,
    173 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    186 * _0x135b0c,
    156 * _0x135b0c,
    191 * _0x135b0c,
    106 * _0x135b0c,
    176 * _0x135b0c,
    85 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    159 * _0x135b0c,
    61 * _0x135b0c,
    132 * _0x135b0c,
    62 * _0x135b0c,
    122 * _0x135b0c,
    66 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    108 * _0x135b0c,
    74 * _0x135b0c,
    108 * _0x135b0c,
    89 * _0x135b0c,
    116 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    123 * _0x135b0c,
    92 * _0x135b0c,
    130 * _0x135b0c,
    93 * _0x135b0c,
    131 * _0x135b0c,
    94 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[1], _0x4dfdf5[2], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(137 * _0x135b0c, 137 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    145 * _0x135b0c,
    125 * _0x135b0c,
    138 * _0x135b0c,
    108 * _0x135b0c,
    123 * _0x135b0c,
    104 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    81 * _0x135b0c,
    101 * _0x135b0c,
    88 * _0x135b0c,
    77 * _0x135b0c,
    98 * _0x135b0c,
    65 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    117 * _0x135b0c,
    38 * _0x135b0c,
    138 * _0x135b0c,
    39 * _0x135b0c,
    165 * _0x135b0c,
    52 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    197 * _0x135b0c,
    72 * _0x135b0c,
    207 * _0x135b0c,
    111 * _0x135b0c,
    197 * _0x135b0c,
    140 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    182 * _0x135b0c,
    180 * _0x135b0c,
    161 * _0x135b0c,
    197 * _0x135b0c,
    112 * _0x135b0c,
    194 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    58 * _0x135b0c,
    194 * _0x135b0c,
    37 * _0x135b0c,
    170 * _0x135b0c,
    34 * _0x135b0c,
    142 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    29 * _0x135b0c,
    102 * _0x135b0c,
    40 * _0x135b0c,
    63 * _0x135b0c,
    51 * _0x135b0c,
    45 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    43 * _0x135b0c,
    78 * _0x135b0c,
    41 * _0x135b0c,
    103 * _0x135b0c,
    43 * _0x135b0c,
    122 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    51 * _0x135b0c,
    158 * _0x135b0c,
    63 * _0x135b0c,
    174 * _0x135b0c,
    95 * _0x135b0c,
    179 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    129 * _0x135b0c,
    186 * _0x135b0c,
    169 * _0x135b0c,
    172 * _0x135b0c,
    177 * _0x135b0c,
    144 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    197 * _0x135b0c,
    105 * _0x135b0c,
    172 * _0x135b0c,
    76 * _0x135b0c,
    160 * _0x135b0c,
    71 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    125 * _0x135b0c,
    52 * _0x135b0c,
    111 * _0x135b0c,
    73 * _0x135b0c,
    111 * _0x135b0c,
    81 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    106 * _0x135b0c,
    93 * _0x135b0c,
    140 * _0x135b0c,
    92 * _0x135b0c,
    147 * _0x135b0c,
    107 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    153 * _0x135b0c,
    128 * _0x135b0c,
    140 * _0x135b0c,
    135 * _0x135b0c,
    137 * _0x135b0c,
    139 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[3]);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(132 * _0x135b0c, 95 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    154 * _0x135b0c,
    102 * _0x135b0c,
    154 * _0x135b0c,
    126 * _0x135b0c,
    137 * _0x135b0c,
    139 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    113 * _0x135b0c,
    152 * _0x135b0c,
    89 * _0x135b0c,
    136 * _0x135b0c,
    80 * _0x135b0c,
    121 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    57 * _0x135b0c,
    89 * _0x135b0c,
    69 * _0x135b0c,
    63 * _0x135b0c,
    79 * _0x135b0c,
    52 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    110 * _0x135b0c,
    20 * _0x135b0c,
    139 * _0x135b0c,
    21 * _0x135b0c,
    150 * _0x135b0c,
    25 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    197 * _0x135b0c,
    36 * _0x135b0c,
    221 * _0x135b0c,
    67 * _0x135b0c,
    226 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    234 * _0x135b0c,
    134 * _0x135b0c,
    214 * _0x135b0c,
    177 * _0x135b0c,
    195 * _0x135b0c,
    197 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    144 * _0x135b0c,
    242 * _0x135b0c,
    79 * _0x135b0c,
    216 * _0x135b0c,
    58 * _0x135b0c,
    206 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    13 * _0x135b0c,
    174 * _0x135b0c,
    20 * _0x135b0c,
    134 * _0x135b0c,
    23 * _0x135b0c,
    107 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    26 * _0x135b0c,
    78 * _0x135b0c,
    33 * _0x135b0c,
    60 * _0x135b0c,
    38 * _0x135b0c,
    43 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    42 * _0x135b0c,
    32 * _0x135b0c,
    47 * _0x135b0c,
    32 * _0x135b0c,
    50 * _0x135b0c,
    36 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    54 * _0x135b0c,
    37 * _0x135b0c,
    50 * _0x135b0c,
    52 * _0x135b0c,
    44 * _0x135b0c,
    87 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    40 * _0x135b0c,
    115 * _0x135b0c,
    46 * _0x135b0c,
    142 * _0x135b0c,
    57 * _0x135b0c,
    158 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    76 * _0x135b0c,
    189 * _0x135b0c,
    129 * _0x135b0c,
    182 * _0x135b0c,
    152 * _0x135b0c,
    173 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    186 * _0x135b0c,
    156 * _0x135b0c,
    191 * _0x135b0c,
    106 * _0x135b0c,
    176 * _0x135b0c,
    85 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    159 * _0x135b0c,
    61 * _0x135b0c,
    132 * _0x135b0c,
    62 * _0x135b0c,
    122 * _0x135b0c,
    66 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    108 * _0x135b0c,
    74 * _0x135b0c,
    108 * _0x135b0c,
    89 * _0x135b0c,
    116 * _0x135b0c,
    90 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    123 * _0x135b0c,
    92 * _0x135b0c,
    130 * _0x135b0c,
    93 * _0x135b0c,
    131 * _0x135b0c,
    94 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, undefined, _0x4dfdf5[2], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(82 * _0x135b0c, 63 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    91 * _0x135b0c,
    64 * _0x135b0c,
    96 * _0x135b0c,
    62 * _0x135b0c,
    98 * _0x135b0c,
    53 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    91 * _0x135b0c,
    45 * _0x135b0c,
    85 * _0x135b0c,
    42 * _0x135b0c,
    78 * _0x135b0c,
    41 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    81 * _0x135b0c,
    51 * _0x135b0c,
    82 * _0x135b0c,
    57 * _0x135b0c,
    82 * _0x135b0c,
    63 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(148 * _0x135b0c, 40 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    140 * _0x135b0c,
    52 * _0x135b0c,
    131 * _0x135b0c,
    51 * _0x135b0c,
    123 * _0x135b0c,
    43 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    123 * _0x135b0c,
    25 * _0x135b0c,
    129 * _0x135b0c,
    17 * _0x135b0c,
    134 * _0x135b0c,
    12 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    138 * _0x135b0c,
    35 * _0x135b0c,
    142 * _0x135b0c,
    31 * _0x135b0c,
    148 * _0x135b0c,
    40 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(189 * _0x135b0c, 43 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    191 * _0x135b0c,
    54 * _0x135b0c,
    196 * _0x135b0c,
    58 * _0x135b0c,
    205 * _0x135b0c,
    59 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    211 * _0x135b0c,
    42 * _0x135b0c,
    214 * _0x135b0c,
    37 * _0x135b0c,
    216 * _0x135b0c,
    31 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    202 * _0x135b0c,
    34 * _0x135b0c,
    195 * _0x135b0c,
    39 * _0x135b0c,
    190 * _0x135b0c,
    43 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(216 * _0x135b0c, 98 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    219 * _0x135b0c,
    105 * _0x135b0c,
    225 * _0x135b0c,
    107 * _0x135b0c,
    230 * _0x135b0c,
    109 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    227 * _0x135b0c,
    113 * _0x135b0c,
    221 * _0x135b0c,
    115 * _0x135b0c,
    215 * _0x135b0c,
    115 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    208 * _0x135b0c,
    109 * _0x135b0c,
    211 * _0x135b0c,
    101 * _0x135b0c,
    216 * _0x135b0c,
    98 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(180 * _0x135b0c, 85 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    193 * _0x135b0c,
    86 * _0x135b0c,
    196 * _0x135b0c,
    98 * _0x135b0c,
    191 * _0x135b0c,
    108 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    179 * _0x135b0c,
    112 * _0x135b0c,
    167 * _0x135b0c,
    113 * _0x135b0c,
    155 * _0x135b0c,
    111 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    169 * _0x135b0c,
    100 * _0x135b0c,
    176 * _0x135b0c,
    96 * _0x135b0c,
    180 * _0x135b0c,
    85 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(96 * _0x135b0c, 114 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    102 * _0x135b0c,
    109 * _0x135b0c,
    112 * _0x135b0c,
    110 * _0x135b0c,
    114 * _0x135b0c,
    118 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    111 * _0x135b0c,
    134 * _0x135b0c,
    102 * _0x135b0c,
    143 * _0x135b0c,
    95 * _0x135b0c,
    147 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    98 * _0x135b0c,
    123 * _0x135b0c,
    97 * _0x135b0c,
    119 * _0x135b0c,
    96 * _0x135b0c,
    115 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(79 * _0x135b0c, 92 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    86 * _0x135b0c,
    95 * _0x135b0c,
    89 * _0x135b0c,
    102 * _0x135b0c,
    83 * _0x135b0c,
    111 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    70 * _0x135b0c,
    110 * _0x135b0c,
    61 * _0x135b0c,
    107 * _0x135b0c,
    54 * _0x135b0c,
    100 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    70 * _0x135b0c,
    97 * _0x135b0c,
    70 * _0x135b0c,
    95 * _0x135b0c,
    78 * _0x135b0c,
    92 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(39 * _0x135b0c, 130 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    37 * _0x135b0c,
    141 * _0x135b0c,
    41 * _0x135b0c,
    143 * _0x135b0c,
    48 * _0x135b0c,
    144 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    54 * _0x135b0c,
    134 * _0x135b0c,
    55 * _0x135b0c,
    131 * _0x135b0c,
    56 * _0x135b0c,
    123 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    47 * _0x135b0c,
    129 * _0x135b0c,
    43 * _0x135b0c,
    129 * _0x135b0c,
    39 * _0x135b0c,
    129 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(113 * _0x135b0c, 189 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    119 * _0x135b0c,
    201 * _0x135b0c,
    127 * _0x135b0c,
    198 * _0x135b0c,
    134 * _0x135b0c,
    192 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    128 * _0x135b0c,
    175 * _0x135b0c,
    128 * _0x135b0c,
    173 * _0x135b0c,
    128 * _0x135b0c,
    165 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    117 * _0x135b0c,
    176 * _0x135b0c,
    116 * _0x135b0c,
    182 * _0x135b0c,
    113 * _0x135b0c,
    187 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(74 * _0x135b0c, 154 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    76 * _0x135b0c,
    163 * _0x135b0c,
    76 * _0x135b0c,
    170 * _0x135b0c,
    75 * _0x135b0c,
    177 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    68 * _0x135b0c,
    179 * _0x135b0c,
    66 * _0x135b0c,
    176 * _0x135b0c,
    63 * _0x135b0c,
    171 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    69 * _0x135b0c,
    164 * _0x135b0c,
    72 * _0x135b0c,
    159 * _0x135b0c,
    74 * _0x135b0c,
    154 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(206 * _0x135b0c, 152 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    198 * _0x135b0c,
    158 * _0x135b0c,
    198 * _0x135b0c,
    166 * _0x135b0c,
    201 * _0x135b0c,
    171 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    209 * _0x135b0c,
    170 * _0x135b0c,
    221 * _0x135b0c,
    170 * _0x135b0c,
    226 * _0x135b0c,
    172 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    219 * _0x135b0c,
    159 * _0x135b0c,
    210 * _0x135b0c,
    155 * _0x135b0c,
    207 * _0x135b0c,
    153 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(181 * _0x135b0c, 184 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    170 * _0x135b0c,
    184 * _0x135b0c,
    167 * _0x135b0c,
    187 * _0x135b0c,
    163 * _0x135b0c,
    195 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    171 * _0x135b0c,
    207 * _0x135b0c,
    183 * _0x135b0c,
    214 * _0x135b0c,
    191 * _0x135b0c,
    217 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    183 * _0x135b0c,
    204 * _0x135b0c,
    184 * _0x135b0c,
    196 * _0x135b0c,
    181 * _0x135b0c,
    184 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(66 * _0x135b0c, 199 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    73 * _0x135b0c,
    197 * _0x135b0c,
    78 * _0x135b0c,
    199 * _0x135b0c,
    79 * _0x135b0c,
    206 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    71 * _0x135b0c,
    216 * _0x135b0c,
    67 * _0x135b0c,
    221 * _0x135b0c,
    57 * _0x135b0c,
    223 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(182 * _0x135b0c, 143 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    183 * _0x135b0c,
    146 * _0x135b0c,
    183 * _0x135b0c,
    149 * _0x135b0c,
    179 * _0x135b0c,
    152 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    174 * _0x135b0c,
    146 * _0x135b0c,
    174 * _0x135b0c,
    146 * _0x135b0c,
    169 * _0x135b0c,
    140 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(32 * _0x135b0c, 159 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    45 * _0x135b0c,
    160 * _0x135b0c,
    48 * _0x135b0c,
    164 * _0x135b0c,
    45 * _0x135b0c,
    175 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    28 * _0x135b0c,
    183 * _0x135b0c,
    25 * _0x135b0c,
    184 * _0x135b0c,
    19 * _0x135b0c,
    184 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    30 * _0x135b0c,
    170 * _0x135b0c,
    29 * _0x135b0c,
    164 * _0x135b0c,
    31 * _0x135b0c,
    160 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(110 * _0x135b0c, 214 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    106 * _0x135b0c,
    212 * _0x135b0c,
    104 * _0x135b0c,
    213 * _0x135b0c,
    102 * _0x135b0c,
    218 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    104 * _0x135b0c,
    220 * _0x135b0c,
    107 * _0x135b0c,
    222 * _0x135b0c,
    110 * _0x135b0c,
    224 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    110.5 * _0x135b0c,
    219 * _0x135b0c,
    110.5 * _0x135b0c,
    219 * _0x135b0c,
    111 * _0x135b0c,
    214 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(40 * _0x135b0c, 52 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    41 * _0x135b0c,
    57 * _0x135b0c,
    40 * _0x135b0c,
    61 * _0x135b0c,
    34 * _0x135b0c,
    60 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    31.5 * _0x135b0c,
    55 * _0x135b0c,
    31.5 * _0x135b0c,
    55 * _0x135b0c,
    29 * _0x135b0c,
    50 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    34 * _0x135b0c,
    50.5 * _0x135b0c,
    34 * _0x135b0c,
    50.5 * _0x135b0c,
    39 * _0x135b0c,
    51 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  _0x3f98cc.beginPath();
  _0x3f98cc.lineCap = "round";
  _0x3f98cc.lineJoin = "round";
  _0x3f98cc.moveTo(31 * _0x135b0c, 81 * _0x135b0c);
  _0x3f98cc.bezierCurveTo(
    37 * _0x135b0c,
    84 * _0x135b0c,
    38 * _0x135b0c,
    90 * _0x135b0c,
    34 * _0x135b0c,
    99 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    23 * _0x135b0c,
    97 * _0x135b0c,
    19 * _0x135b0c,
    96 * _0x135b0c,
    16 * _0x135b0c,
    93 * _0x135b0c
  );
  _0x3f98cc.bezierCurveTo(
    24 * _0x135b0c,
    88 * _0x135b0c,
    28 * _0x135b0c,
    85 * _0x135b0c,
    30 * _0x135b0c,
    81 * _0x135b0c
  );
  _0x3f98cc.closePath();
  fill_path(_0x3f98cc, _0x4dfdf5[4], _0x4dfdf5[5], 5 * _0x135b0c);
  return _0x2dd24f;
}
function create_hood(_0x240100, _0x37fd88, _0x479bda) {
  var _0x1fc3cd = document.createElement("canvas");
  var _0x431532 = _0x1fc3cd.getContext("2d");
  _0x1fc3cd.width = 465 * _0x240100;
  _0x1fc3cd.height = 310 * _0x240100;
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(126 * _0x240100, 192 * _0x240100);
  _0x431532.bezierCurveTo(
    198 * _0x240100,
    202 * _0x240100,
    245 * _0x240100,
    203 * _0x240100,
    335 * _0x240100,
    194 * _0x240100
  );
  _0x431532.bezierCurveTo(
    336 * _0x240100,
    232 * _0x240100,
    326 * _0x240100,
    235 * _0x240100,
    232 * _0x240100,
    237 * _0x240100
  );
  _0x431532.bezierCurveTo(
    161 * _0x240100,
    235 * _0x240100,
    122 * _0x240100,
    235 * _0x240100,
    126 * _0x240100,
    193 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, _0x479bda[0], _0x479bda[1], 4 * _0x240100);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(146 * _0x240100, 239 * _0x240100);
  _0x431532.bezierCurveTo(
    174 * _0x240100,
    74 * _0x240100,
    287 * _0x240100,
    88 * _0x240100,
    320 * _0x240100,
    240 * _0x240100
  );
  _0x431532.bezierCurveTo(
    329 * _0x240100,
    231 * _0x240100,
    340 * _0x240100,
    219 * _0x240100,
    332 * _0x240100,
    115 * _0x240100
  );
  _0x431532.bezierCurveTo(
    330 * _0x240100,
    40 * _0x240100,
    144 * _0x240100,
    30 * _0x240100,
    129 * _0x240100,
    116 * _0x240100
  );
  _0x431532.bezierCurveTo(
    124 * _0x240100,
    217 * _0x240100,
    124 * _0x240100,
    228 * _0x240100,
    143 * _0x240100,
    237 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, _0x479bda[0], _0x479bda[1], 4 * _0x240100);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(126 * _0x240100, 193 * _0x240100);
  _0x431532.bezierCurveTo(
    173 * _0x240100,
    94 * _0x240100,
    209 * _0x240100,
    100 * _0x240100,
    228 * _0x240100,
    57 * _0x240100
  );
  _0x431532.bezierCurveTo(
    190 * _0x240100,
    112 * _0x240100,
    165 * _0x240100,
    115 * _0x240100,
    127 * _0x240100,
    184 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, undefined, _0x479bda[1], 4 * _0x240100);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(230 * _0x240100, 57 * _0x240100);
  _0x431532.bezierCurveTo(
    266 * _0x240100,
    117 * _0x240100,
    310 * _0x240100,
    130 * _0x240100,
    332 * _0x240100,
    183 * _0x240100
  );
  _0x431532.bezierCurveTo(
    290 * _0x240100,
    112 * _0x240100,
    262 * _0x240100,
    109 * _0x240100,
    230 * _0x240100,
    56 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, undefined, _0x479bda[1], 4 * _0x240100);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(154 * _0x240100, 212 * _0x240100);
  _0x431532.bezierCurveTo(
    208 * _0x240100,
    224 * _0x240100,
    252 * _0x240100,
    219 * _0x240100,
    305 * _0x240100,
    212 * _0x240100
  );
  _0x431532.bezierCurveTo(
    267 * _0x240100,
    219 * _0x240100,
    204 * _0x240100,
    222 * _0x240100,
    155 * _0x240100,
    212 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, undefined, _0x479bda[1], 4 * _0x240100);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(239 * _0x240100, 59 * _0x240100);
  _0x431532.bezierCurveTo(
    302 * _0x240100,
    72 * _0x240100,
    325 * _0x240100,
    84 * _0x240100,
    326 * _0x240100,
    115 * _0x240100
  );
  _0x431532.bezierCurveTo(
    289 * _0x240100,
    80 * _0x240100,
    270 * _0x240100,
    88 * _0x240100,
    253 * _0x240100,
    78 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, _0x479bda[2]);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(216 * _0x240100, 61 * _0x240100);
  _0x431532.bezierCurveTo(
    209 * _0x240100,
    70 * _0x240100,
    209 * _0x240100,
    70 * _0x240100,
    202 * _0x240100,
    79 * _0x240100
  );
  _0x431532.bezierCurveTo(
    173 * _0x240100,
    87 * _0x240100,
    162 * _0x240100,
    91 * _0x240100,
    137 * _0x240100,
    107 * _0x240100
  );
  _0x431532.bezierCurveTo(
    153 * _0x240100,
    78 * _0x240100,
    174 * _0x240100,
    67 * _0x240100,
    212 * _0x240100,
    62 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, _0x479bda[2]);
  _0x431532.beginPath();
  _0x431532.lineCap = "round";
  _0x431532.lineJoin = "round";
  _0x431532.moveTo(175 * _0x240100, 125 * _0x240100);
  _0x431532.bezierCurveTo(
    218 * _0x240100,
    94 * _0x240100,
    238 * _0x240100,
    90 * _0x240100,
    281 * _0x240100,
    125 * _0x240100
  );
  _0x431532.bezierCurveTo(
    245 * _0x240100,
    89 * _0x240100,
    240 * _0x240100,
    80 * _0x240100,
    228 * _0x240100,
    67 * _0x240100
  );
  _0x431532.bezierCurveTo(
    207 * _0x240100,
    100 * _0x240100,
    192 * _0x240100,
    104 * _0x240100,
    177 * _0x240100,
    123 * _0x240100
  );
  _0x431532.closePath();
  fill_path(_0x431532, _0x479bda[2]);
  return _0x1fc3cd;
}
function create_winter_hood(_0xf58a0e, _0x2d01d3, _0x15d4bb) {
  var _0x3d35e6 = document.createElement("canvas");
  var _0x536bb4 = _0x3d35e6.getContext("2d");
  _0x3d35e6.width = 465 * _0xf58a0e;
  _0x3d35e6.height = 405 * _0xf58a0e;
  _0x536bb4.globalAlpha = 1;
  _0x536bb4.translate(6 * _0xf58a0e, 0 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    39.000030517578125 * _0xf58a0e,
    162.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    125.00003051757812 * _0xf58a0e,
    84.03977966308594 * _0xf58a0e,
    108.50003051757812 * _0xf58a0e,
    115.03977966308594 * _0xf58a0e,
    178.00003051757812 * _0xf58a0e,
    68.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    299.0000305175781 * _0xf58a0e,
    146.53977966308594 * _0xf58a0e,
    299.0000305175781 * _0xf58a0e,
    146.53977966308594 * _0xf58a0e,
    420.0000305175781 * _0xf58a0e,
    225.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    400.0000305175781 * _0xf58a0e,
    288.53977966308594 * _0xf58a0e,
    400.0000305175781 * _0xf58a0e,
    288.53977966308594 * _0xf58a0e,
    380.0000305175781 * _0xf58a0e,
    352.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    216.50003051757812 * _0xf58a0e,
    345.53977966308594 * _0xf58a0e,
    216.50003051757812 * _0xf58a0e,
    345.53977966308594 * _0xf58a0e,
    53.000030517578125 * _0xf58a0e,
    339.03977966308594 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[3]);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    23.000030517578125 * _0xf58a0e,
    306.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    5.000030517578125 * _0xf58a0e,
    275.94886779785156 * _0xf58a0e,
    6.000030517578125 * _0xf58a0e,
    201.94886779785156 * _0xf58a0e,
    14.000030517578125 * _0xf58a0e,
    150.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    40.000030517578125 * _0xf58a0e,
    34.94886779785156 * _0xf58a0e,
    157.00003051757812 * _0xf58a0e,
    14.948867797851562 * _0xf58a0e,
    199.00003051757812 * _0xf58a0e,
    11.948867797851562 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    331.0000305175781 * _0xf58a0e,
    0.9488677978515625 * _0xf58a0e,
    409.0000305175781 * _0xf58a0e,
    61.94886779785156 * _0xf58a0e,
    428.0000305175781 * _0xf58a0e,
    133.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    445.0000305175781 * _0xf58a0e,
    207.94886779785156 * _0xf58a0e,
    439.0000305175781 * _0xf58a0e,
    274.94886779785156 * _0xf58a0e,
    426.0000305175781 * _0xf58a0e,
    342.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    355.0000305175781 * _0xf58a0e,
    207.94886779785156 * _0xf58a0e,
    345.0000305175781 * _0xf58a0e,
    208.94886779785156 * _0xf58a0e,
    333.0000305175781 * _0xf58a0e,
    202.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    262.0000305175781 * _0xf58a0e,
    143.94886779785156 * _0xf58a0e,
    236.00003051757812 * _0xf58a0e,
    148.94886779785156 * _0xf58a0e,
    189.00003051757812 * _0xf58a0e,
    162.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    82.00003051757812 * _0xf58a0e,
    190.94886779785156 * _0xf58a0e,
    78.00003051757812 * _0xf58a0e,
    235.94886779785156 * _0xf58a0e,
    62.000030517578125 * _0xf58a0e,
    279.94886779785156 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[0], _0x15d4bb[1], 20 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    17.000030517578125 * _0xf58a0e,
    149.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    76.00003051757812 * _0xf58a0e,
    67.94886779785156 * _0xf58a0e,
    177.00003051757812 * _0xf58a0e,
    40.94886779785156 * _0xf58a0e,
    232.00003051757812 * _0xf58a0e,
    45.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    316.0000305175781 * _0xf58a0e,
    46.94886779785156 * _0xf58a0e,
    359.0000305175781 * _0xf58a0e,
    74.94886779785156 * _0xf58a0e,
    428.0000305175781 * _0xf58a0e,
    145.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    414.0000305175781 * _0xf58a0e,
    73.94886779785156 * _0xf58a0e,
    386.0000305175781 * _0xf58a0e,
    68.94886779785156 * _0xf58a0e,
    359.0000305175781 * _0xf58a0e,
    43.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    295.0000305175781 * _0xf58a0e,
    5.9488677978515625 * _0xf58a0e,
    239.00003051757812 * _0xf58a0e,
    10.948867797851562 * _0xf58a0e,
    207.00003051757812 * _0xf58a0e,
    10.948867797851562 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    121.00003051757812 * _0xf58a0e,
    20.948867797851562 * _0xf58a0e,
    104.00003051757812 * _0xf58a0e,
    34.94886779785156 * _0xf58a0e,
    45.000030517578125 * _0xf58a0e,
    84.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    14.000030517578125 * _0xf58a0e,
    128.94886779785156 * _0xf58a0e,
    18.000030517578125 * _0xf58a0e,
    142.94886779785156 * _0xf58a0e,
    16.000030517578125 * _0xf58a0e,
    151.94886779785156 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[2]);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    23.000030517578125 * _0xf58a0e,
    306.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    5.000030517578125 * _0xf58a0e,
    275.94886779785156 * _0xf58a0e,
    6.000030517578125 * _0xf58a0e,
    201.94886779785156 * _0xf58a0e,
    14.000030517578125 * _0xf58a0e,
    150.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    40.000030517578125 * _0xf58a0e,
    34.94886779785156 * _0xf58a0e,
    157.00003051757812 * _0xf58a0e,
    14.948867797851562 * _0xf58a0e,
    199.00003051757812 * _0xf58a0e,
    11.948867797851562 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    331.0000305175781 * _0xf58a0e,
    0.9488677978515625 * _0xf58a0e,
    409.0000305175781 * _0xf58a0e,
    61.94886779785156 * _0xf58a0e,
    428.0000305175781 * _0xf58a0e,
    133.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    445.0000305175781 * _0xf58a0e,
    207.94886779785156 * _0xf58a0e,
    439.0000305175781 * _0xf58a0e,
    274.94886779785156 * _0xf58a0e,
    426.0000305175781 * _0xf58a0e,
    342.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    355.0000305175781 * _0xf58a0e,
    207.94886779785156 * _0xf58a0e,
    345.0000305175781 * _0xf58a0e,
    208.94886779785156 * _0xf58a0e,
    333.0000305175781 * _0xf58a0e,
    202.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    262.0000305175781 * _0xf58a0e,
    143.94886779785156 * _0xf58a0e,
    236.00003051757812 * _0xf58a0e,
    148.94886779785156 * _0xf58a0e,
    189.00003051757812 * _0xf58a0e,
    162.94886779785156 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    82.00003051757812 * _0xf58a0e,
    190.94886779785156 * _0xf58a0e,
    78.00003051757812 * _0xf58a0e,
    235.94886779785156 * _0xf58a0e,
    62.000030517578125 * _0xf58a0e,
    279.94886779785156 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, undefined, _0x15d4bb[1], 16 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    60.000030517578125 * _0xf58a0e,
    288.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    183.00003051757812 * _0xf58a0e,
    320.03977966308594 * _0xf58a0e,
    342.0000305175781 * _0xf58a0e,
    306.03977966308594 * _0xf58a0e,
    399.0000305175781 * _0xf58a0e,
    286.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    420.0000305175781 * _0xf58a0e,
    345.03977966308594 * _0xf58a0e,
    410.0000305175781 * _0xf58a0e,
    335.03977966308594 * _0xf58a0e,
    415.0000305175781 * _0xf58a0e,
    362.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    351.0000305175781 * _0xf58a0e,
    384.03977966308594 * _0xf58a0e,
    299.0000305175781 * _0xf58a0e,
    389.03977966308594 * _0xf58a0e,
    215.00003051757812 * _0xf58a0e,
    391.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    128.00003051757812 * _0xf58a0e,
    388.03977966308594 * _0xf58a0e,
    69.00003051757812 * _0xf58a0e,
    373.03977966308594 * _0xf58a0e,
    39.000030517578125 * _0xf58a0e,
    359.03977966308594 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[0], _0x15d4bb[1], 13 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    47.000030517578125 * _0xf58a0e,
    327.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    203.00003051757812 * _0xf58a0e,
    377.03977966308594 * _0xf58a0e,
    331.0000305175781 * _0xf58a0e,
    349.03977966308594 * _0xf58a0e,
    410.0000305175781 * _0xf58a0e,
    330.03977966308594 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[0], _0x15d4bb[1], 20 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    9.000030517578125 * _0xf58a0e,
    339.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    2.000030517578125 * _0xf58a0e,
    280.1306915283203 * _0xf58a0e,
    30.000030517578125 * _0xf58a0e,
    219.1306915283203 * _0xf58a0e,
    85.00003051757812 * _0xf58a0e,
    167.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    174.00003051757812 * _0xf58a0e,
    82.13069152832031 * _0xf58a0e,
    241.00003051757812 * _0xf58a0e,
    101.13069152832031 * _0xf58a0e,
    284.0000305175781 * _0xf58a0e,
    115.13069152832031 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    333.0000305175781 * _0xf58a0e,
    134.1306915283203 * _0xf58a0e,
    376.0000305175781 * _0xf58a0e,
    177.1306915283203 * _0xf58a0e,
    410.0000305175781 * _0xf58a0e,
    247.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    439.0000305175781 * _0xf58a0e,
    300.1306915283203 * _0xf58a0e,
    442.0000305175781 * _0xf58a0e,
    346.1306915283203 * _0xf58a0e,
    430.0000305175781 * _0xf58a0e,
    363.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    418.0000305175781 * _0xf58a0e,
    366.1306915283203 * _0xf58a0e,
    395.0000305175781 * _0xf58a0e,
    295.1306915283203 * _0xf58a0e,
    355.0000305175781 * _0xf58a0e,
    223.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    299.0000305175781 * _0xf58a0e,
    156.1306915283203 * _0xf58a0e,
    262.0000305175781 * _0xf58a0e,
    155.1306915283203 * _0xf58a0e,
    215.00003051757812 * _0xf58a0e,
    159.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    133.00003051757812 * _0xf58a0e,
    171.1306915283203 * _0xf58a0e,
    120.00003051757812 * _0xf58a0e,
    193.1306915283203 * _0xf58a0e,
    96.00003051757812 * _0xf58a0e,
    221.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    49.000030517578125 * _0xf58a0e,
    262.1306915283203 * _0xf58a0e,
    47.000030517578125 * _0xf58a0e,
    306.1306915283203 * _0xf58a0e,
    38.000030517578125 * _0xf58a0e,
    336.1306915283203 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    30.000030517578125 * _0xf58a0e,
    349.1306915283203 * _0xf58a0e,
    30.000030517578125 * _0xf58a0e,
    349.1306915283203 * _0xf58a0e,
    22.000030517578125 * _0xf58a0e,
    362.1306915283203 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[2], _0x15d4bb[1], 20 * _0xf58a0e);
  _0x536bb4.beginPath();
  _0x536bb4.lineCap = "round";
  _0x536bb4.lineJoin = "round";
  _0x536bb4.moveTo(
    228.00003051757812 * _0xf58a0e,
    128.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    315.0000305175781 * _0xf58a0e,
    131.03977966308594 * _0xf58a0e,
    349.0000305175781 * _0xf58a0e,
    178.03977966308594 * _0xf58a0e,
    386.0000305175781 * _0xf58a0e,
    234.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    444.0000305175781 * _0xf58a0e,
    329.03977966308594 * _0xf58a0e,
    446.0000305175781 * _0xf58a0e,
    354.03977966308594 * _0xf58a0e,
    427.0000305175781 * _0xf58a0e,
    373.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    389.0000305175781 * _0xf58a0e,
    389.03977966308594 * _0xf58a0e,
    399.0000305175781 * _0xf58a0e,
    329.03977966308594 * _0xf58a0e,
    361.0000305175781 * _0xf58a0e,
    277.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    306.0000305175781 * _0xf58a0e,
    191.03977966308594 * _0xf58a0e,
    266.0000305175781 * _0xf58a0e,
    183.03977966308594 * _0xf58a0e,
    220.00003051757812 * _0xf58a0e,
    181.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    138.00003051757812 * _0xf58a0e,
    184.03977966308594 * _0xf58a0e,
    123.00003051757812 * _0xf58a0e,
    212.03977966308594 * _0xf58a0e,
    89.00003051757812 * _0xf58a0e,
    271.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    52.000030517578125 * _0xf58a0e,
    349.03977966308594 * _0xf58a0e,
    68.00003051757812 * _0xf58a0e,
    364.03977966308594 * _0xf58a0e,
    33.000030517578125 * _0xf58a0e,
    369.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    6.000030517578125 * _0xf58a0e,
    366.03977966308594 * _0xf58a0e,
    5.000030517578125 * _0xf58a0e,
    341.03977966308594 * _0xf58a0e,
    26.000030517578125 * _0xf58a0e,
    288.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    60.000030517578125 * _0xf58a0e,
    207.03977966308594 * _0xf58a0e,
    100.00003051757812 * _0xf58a0e,
    180.03977966308594 * _0xf58a0e,
    113.00003051757812 * _0xf58a0e,
    170.03977966308594 * _0xf58a0e
  );
  _0x536bb4.bezierCurveTo(
    159.00003051757812 * _0xf58a0e,
    132.03977966308594 * _0xf58a0e,
    196.00003051757812 * _0xf58a0e,
    133.03977966308594 * _0xf58a0e,
    226.00003051757812 * _0xf58a0e,
    129.03977966308594 * _0xf58a0e
  );
  _0x536bb4.closePath();
  fill_path(_0x536bb4, _0x15d4bb[0], _0x15d4bb[1], 20 * _0xf58a0e);
  return _0x3d35e6;
}
function create_peasant(_0x60009, _0x5e74d8, _0xc2f17f, _0x3ebe2) {
  var _0x143b58 = document.createElement("canvas");
  var _0x5ead65 = _0x143b58.getContext("2d");
  _0x143b58.width = 198 * _0x60009;
  _0x143b58.height = 147 * _0x60009;
  _0x5ead65.globalAlpha = _0x5e74d8 ? 0.5 : 1;
  _0x5ead65.translate(0, 6 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(44 * _0x60009, 76 * _0x60009);
  _0x5ead65.bezierCurveTo(
    50 * _0x60009,
    82 * _0x60009,
    50 * _0x60009,
    82 * _0x60009,
    56 * _0x60009,
    88 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    59 * _0x60009,
    82 * _0x60009,
    59 * _0x60009,
    82 * _0x60009,
    62 * _0x60009,
    76 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    59 * _0x60009,
    71 * _0x60009,
    59 * _0x60009,
    71 * _0x60009,
    56 * _0x60009,
    66 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    59 * _0x60009,
    69 * _0x60009,
    59 * _0x60009,
    69 * _0x60009,
    62 * _0x60009,
    72 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    80 * _0x60009,
    48 * _0x60009,
    102 * _0x60009,
    50 * _0x60009,
    120 * _0x60009,
    62 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    127 * _0x60009,
    58 * _0x60009,
    127 * _0x60009,
    58 * _0x60009,
    134 * _0x60009,
    54 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    129 * _0x60009,
    60 * _0x60009,
    129 * _0x60009,
    60 * _0x60009,
    124 * _0x60009,
    66 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    129 * _0x60009,
    73 * _0x60009,
    129 * _0x60009,
    73 * _0x60009,
    134 * _0x60009,
    80 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    140 * _0x60009,
    74 * _0x60009,
    140 * _0x60009,
    74 * _0x60009,
    146 * _0x60009,
    68 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    142 * _0x60009,
    76 * _0x60009,
    142 * _0x60009,
    76 * _0x60009,
    138 * _0x60009,
    84 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    144 * _0x60009,
    90 * _0x60009,
    142 * _0x60009,
    90 * _0x60009,
    144 * _0x60009,
    90 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    136 * _0x60009,
    97 * _0x60009,
    136 * _0x60009,
    97 * _0x60009,
    128 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    154 * _0x60009,
    110 * _0x60009,
    164 * _0x60009,
    90 * _0x60009,
    160 * _0x60009,
    80 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    138 * _0x60009,
    22 * _0x60009,
    148 * _0x60009,
    51 * _0x60009,
    136 * _0x60009,
    22 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    97 * _0x60009,
    24 * _0x60009,
    97 * _0x60009,
    24 * _0x60009,
    58 * _0x60009,
    26 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    47 * _0x60009,
    54 * _0x60009,
    36 * _0x60009,
    80 * _0x60009,
    36 * _0x60009,
    82 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    40 * _0x60009,
    108 * _0x60009,
    54 * _0x60009,
    104 * _0x60009,
    62 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    46 * _0x60009,
    92 * _0x60009,
    54 * _0x60009,
    97 * _0x60009,
    46 * _0x60009,
    90 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[0]);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(36 * _0x60009, 80 * _0x60009);
  _0x5ead65.bezierCurveTo(
    30 * _0x60009,
    84 * _0x60009,
    28 * _0x60009,
    92 * _0x60009,
    34 * _0x60009,
    100 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    41.5 * _0x60009,
    102 * _0x60009,
    41.5 * _0x60009,
    102 * _0x60009,
    49 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    43 * _0x60009,
    105.5 * _0x60009,
    43 * _0x60009,
    105.5 * _0x60009,
    37 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    46 * _0x60009,
    111 * _0x60009,
    60 * _0x60009,
    114 * _0x60009,
    76 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    78 * _0x60009,
    110.5 * _0x60009,
    78 * _0x60009,
    110.5 * _0x60009,
    80 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    81 * _0x60009,
    110.5 * _0x60009,
    81 * _0x60009,
    110.5 * _0x60009,
    82 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    94.5 * _0x60009,
    113.5 * _0x60009,
    94.5 * _0x60009,
    113.5 * _0x60009,
    107 * _0x60009,
    113 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    108.5 * _0x60009,
    110 * _0x60009,
    108.5 * _0x60009,
    110 * _0x60009,
    110 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    111.5 * _0x60009,
    110.5 * _0x60009,
    111.5 * _0x60009,
    110.5 * _0x60009,
    113 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    131 * _0x60009,
    112.5 * _0x60009,
    131 * _0x60009,
    112.5 * _0x60009,
    149 * _0x60009,
    111 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    148.5 * _0x60009,
    107.5 * _0x60009,
    148.5 * _0x60009,
    107.5 * _0x60009,
    148 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    150.5 * _0x60009,
    107 * _0x60009,
    150.5 * _0x60009,
    107 * _0x60009,
    153 * _0x60009,
    110 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    155.5 * _0x60009,
    108.5 * _0x60009,
    155.5 * _0x60009,
    108.5 * _0x60009,
    158 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    156.5 * _0x60009,
    104 * _0x60009,
    156.5 * _0x60009,
    104 * _0x60009,
    155 * _0x60009,
    101 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    158.5 * _0x60009,
    102.5 * _0x60009,
    158.5 * _0x60009,
    102.5 * _0x60009,
    162 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    168 * _0x60009,
    100 * _0x60009,
    170 * _0x60009,
    92 * _0x60009,
    169 * _0x60009,
    85 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    166 * _0x60009,
    86 * _0x60009,
    166 * _0x60009,
    86 * _0x60009,
    163 * _0x60009,
    87 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    165.5 * _0x60009,
    83 * _0x60009,
    165.5 * _0x60009,
    83 * _0x60009,
    168 * _0x60009,
    79 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    165.5 * _0x60009,
    76.5 * _0x60009,
    165.5 * _0x60009,
    76.5 * _0x60009,
    163 * _0x60009,
    74 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    155 * _0x60009,
    82.5 * _0x60009,
    155 * _0x60009,
    82.5 * _0x60009,
    147 * _0x60009,
    91 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    139 * _0x60009,
    95.5 * _0x60009,
    139 * _0x60009,
    95.5 * _0x60009,
    131 * _0x60009,
    100 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    97.5 * _0x60009,
    100.5 * _0x60009,
    97.5 * _0x60009,
    100.5 * _0x60009,
    64 * _0x60009,
    101 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    49 * _0x60009,
    102 * _0x60009,
    43 * _0x60009,
    90 * _0x60009,
    36 * _0x60009,
    80 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[0]);
  _0x5ead65.globalAlpha = 1;
  _0x5ead65.translate(0, -6 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(36 * _0x60009, 80 * _0x60009);
  _0x5ead65.bezierCurveTo(
    30 * _0x60009,
    84 * _0x60009,
    28 * _0x60009,
    92 * _0x60009,
    34 * _0x60009,
    100 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    41.5 * _0x60009,
    102 * _0x60009,
    41.5 * _0x60009,
    102 * _0x60009,
    49 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    43 * _0x60009,
    105.5 * _0x60009,
    43 * _0x60009,
    105.5 * _0x60009,
    37 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    46 * _0x60009,
    111 * _0x60009,
    60 * _0x60009,
    114 * _0x60009,
    76 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    78 * _0x60009,
    110.5 * _0x60009,
    78 * _0x60009,
    110.5 * _0x60009,
    80 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    81 * _0x60009,
    110.5 * _0x60009,
    81 * _0x60009,
    110.5 * _0x60009,
    82 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    94.5 * _0x60009,
    113.5 * _0x60009,
    94.5 * _0x60009,
    113.5 * _0x60009,
    107 * _0x60009,
    113 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    108.5 * _0x60009,
    110 * _0x60009,
    108.5 * _0x60009,
    110 * _0x60009,
    110 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    111.5 * _0x60009,
    110.5 * _0x60009,
    111.5 * _0x60009,
    110.5 * _0x60009,
    113 * _0x60009,
    114 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    131 * _0x60009,
    112.5 * _0x60009,
    131 * _0x60009,
    112.5 * _0x60009,
    149 * _0x60009,
    111 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    148.5 * _0x60009,
    107.5 * _0x60009,
    148.5 * _0x60009,
    107.5 * _0x60009,
    148 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    150.5 * _0x60009,
    107 * _0x60009,
    150.5 * _0x60009,
    107 * _0x60009,
    153 * _0x60009,
    110 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    155.5 * _0x60009,
    108.5 * _0x60009,
    155.5 * _0x60009,
    108.5 * _0x60009,
    158 * _0x60009,
    107 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    156.5 * _0x60009,
    104 * _0x60009,
    156.5 * _0x60009,
    104 * _0x60009,
    155 * _0x60009,
    101 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    158.5 * _0x60009,
    102.5 * _0x60009,
    158.5 * _0x60009,
    102.5 * _0x60009,
    162 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    168 * _0x60009,
    100 * _0x60009,
    170 * _0x60009,
    92 * _0x60009,
    169 * _0x60009,
    85 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    166 * _0x60009,
    86 * _0x60009,
    166 * _0x60009,
    86 * _0x60009,
    163 * _0x60009,
    87 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    165.5 * _0x60009,
    83 * _0x60009,
    165.5 * _0x60009,
    83 * _0x60009,
    168 * _0x60009,
    79 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    165.5 * _0x60009,
    76.5 * _0x60009,
    165.5 * _0x60009,
    76.5 * _0x60009,
    163 * _0x60009,
    74 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    155 * _0x60009,
    82.5 * _0x60009,
    155 * _0x60009,
    82.5 * _0x60009,
    147 * _0x60009,
    91 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    139 * _0x60009,
    95.5 * _0x60009,
    139 * _0x60009,
    95.5 * _0x60009,
    131 * _0x60009,
    100 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    97.5 * _0x60009,
    100.5 * _0x60009,
    97.5 * _0x60009,
    100.5 * _0x60009,
    64 * _0x60009,
    101 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    49 * _0x60009,
    102 * _0x60009,
    43 * _0x60009,
    90 * _0x60009,
    36 * _0x60009,
    80 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[1], _0xc2f17f[2], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(49 * _0x60009, 98 * _0x60009);
  _0x5ead65.bezierCurveTo(
    96.5 * _0x60009,
    98 * _0x60009,
    96.5 * _0x60009,
    98 * _0x60009,
    144 * _0x60009,
    98 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    136.5 * _0x60009,
    102 * _0x60009,
    136.5 * _0x60009,
    102 * _0x60009,
    129 * _0x60009,
    106 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    103 * _0x60009,
    105.5 * _0x60009,
    103 * _0x60009,
    105.5 * _0x60009,
    77 * _0x60009,
    105 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    65 * _0x60009,
    105 * _0x60009,
    65 * _0x60009,
    105 * _0x60009,
    53 * _0x60009,
    105 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[1]);
  _0x5ead65.globalAlpha = 0.5;
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(54 * _0x60009, 98 * _0x60009);
  _0x5ead65.bezierCurveTo(
    97 * _0x60009,
    98 * _0x60009,
    97 * _0x60009,
    98 * _0x60009,
    140 * _0x60009,
    98 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    134 * _0x60009,
    101 * _0x60009,
    134 * _0x60009,
    101 * _0x60009,
    128 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    92 * _0x60009,
    104 * _0x60009,
    92 * _0x60009,
    104 * _0x60009,
    56 * _0x60009,
    104 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[0]);
  _0x5ead65.globalAlpha = 1;
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(118 * _0x60009, 47 * _0x60009);
  _0x5ead65.bezierCurveTo(
    124.5 * _0x60009,
    43.5 * _0x60009,
    124.5 * _0x60009,
    43.5 * _0x60009,
    131 * _0x60009,
    40 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    128 * _0x60009,
    46 * _0x60009,
    128 * _0x60009,
    46 * _0x60009,
    125 * _0x60009,
    52 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    131 * _0x60009,
    57 * _0x60009,
    135 * _0x60009,
    64 * _0x60009,
    139 * _0x60009,
    73 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    142.5 * _0x60009,
    69.5 * _0x60009,
    142.5 * _0x60009,
    69.5 * _0x60009,
    146 * _0x60009,
    66 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    143.5 * _0x60009,
    72.5 * _0x60009,
    143.5 * _0x60009,
    72.5 * _0x60009,
    141 * _0x60009,
    79 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    142 * _0x60009,
    91 * _0x60009,
    141 * _0x60009,
    94 * _0x60009,
    132 * _0x60009,
    98 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    117 * _0x60009,
    102 * _0x60009,
    126 * _0x60009,
    108 * _0x60009,
    142 * _0x60009,
    102 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    159 * _0x60009,
    98 * _0x60009,
    164 * _0x60009,
    80 * _0x60009,
    162 * _0x60009,
    47 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    160 * _0x60009,
    19 * _0x60009,
    150 * _0x60009,
    6 * _0x60009,
    117 * _0x60009,
    4 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    44 * _0x60009,
    0 * _0x60009,
    35 * _0x60009,
    20 * _0x60009,
    33 * _0x60009,
    37 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    29 * _0x60009,
    69 * _0x60009,
    33 * _0x60009,
    88 * _0x60009,
    44 * _0x60009,
    96 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    64 * _0x60009,
    107 * _0x60009,
    70 * _0x60009,
    102 * _0x60009,
    54 * _0x60009,
    93 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    49 * _0x60009,
    88 * _0x60009,
    50 * _0x60009,
    82 * _0x60009,
    53 * _0x60009,
    77 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    51.5 * _0x60009,
    71 * _0x60009,
    51.5 * _0x60009,
    71 * _0x60009,
    50 * _0x60009,
    65 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    53 * _0x60009,
    68.5 * _0x60009,
    53 * _0x60009,
    68.5 * _0x60009,
    56 * _0x60009,
    72 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    59 * _0x60009,
    67.5 * _0x60009,
    59 * _0x60009,
    67.5 * _0x60009,
    62 * _0x60009,
    63 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    60.5 * _0x60009,
    59.5 * _0x60009,
    60.5 * _0x60009,
    59.5 * _0x60009,
    59 * _0x60009,
    56 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    62 * _0x60009,
    57 * _0x60009,
    62 * _0x60009,
    57 * _0x60009,
    65 * _0x60009,
    58 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    78 * _0x60009,
    35 * _0x60009,
    103 * _0x60009,
    36 * _0x60009,
    117 * _0x60009,
    47 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[1], _0xc2f17f[2], 6 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(62 * _0x60009, 21 * _0x60009);
  _0x5ead65.bezierCurveTo(
    63 * _0x60009,
    34 * _0x60009,
    64 * _0x60009,
    37 * _0x60009,
    66 * _0x60009,
    40 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    54 * _0x60009,
    49 * _0x60009,
    53 * _0x60009,
    51 * _0x60009,
    48 * _0x60009,
    58 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    44 * _0x60009,
    51 * _0x60009,
    42 * _0x60009,
    43 * _0x60009,
    40 * _0x60009,
    36 * _0x60009
  );
  _0x5ead65.bezierCurveTo(
    47 * _0x60009,
    28 * _0x60009,
    52 * _0x60009,
    25 * _0x60009,
    61 * _0x60009,
    21 * _0x60009
  );
  _0x5ead65.closePath();
  fill_path(_0x5ead65, _0xc2f17f[4]);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(60 * _0x60009, 29 * _0x60009);
  _0x5ead65.bezierCurveTo(
    62 * _0x60009,
    25 * _0x60009,
    65 * _0x60009,
    24 * _0x60009,
    70 * _0x60009,
    23 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(61 * _0x60009, 37 * _0x60009);
  _0x5ead65.bezierCurveTo(
    63 * _0x60009,
    32 * _0x60009,
    66 * _0x60009,
    32 * _0x60009,
    71 * _0x60009,
    32 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(52 * _0x60009, 31 * _0x60009);
  _0x5ead65.bezierCurveTo(
    50 * _0x60009,
    26 * _0x60009,
    50 * _0x60009,
    25 * _0x60009,
    51 * _0x60009,
    23 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(46 * _0x60009, 35 * _0x60009);
  _0x5ead65.bezierCurveTo(
    44 * _0x60009,
    31 * _0x60009,
    43 * _0x60009,
    29 * _0x60009,
    45 * _0x60009,
    26 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(58 * _0x60009, 44 * _0x60009);
  _0x5ead65.bezierCurveTo(
    57 * _0x60009,
    48 * _0x60009,
    57 * _0x60009,
    50 * _0x60009,
    60 * _0x60009,
    52 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(53 * _0x60009, 48 * _0x60009);
  _0x5ead65.bezierCurveTo(
    52 * _0x60009,
    52 * _0x60009,
    52 * _0x60009,
    54 * _0x60009,
    55 * _0x60009,
    57 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(46 * _0x60009, 41 * _0x60009);
  _0x5ead65.bezierCurveTo(
    41 * _0x60009,
    42 * _0x60009,
    39 * _0x60009,
    45 * _0x60009,
    38 * _0x60009,
    48 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  _0x5ead65.beginPath();
  _0x5ead65.lineCap = "round";
  _0x5ead65.lineJoin = "round";
  _0x5ead65.moveTo(48 * _0x60009, 48 * _0x60009);
  _0x5ead65.bezierCurveTo(
    42 * _0x60009,
    51 * _0x60009,
    42 * _0x60009,
    53 * _0x60009,
    40 * _0x60009,
    55 * _0x60009
  );
  fill_path(_0x5ead65, undefined, _0xc2f17f[3], 4 * _0x60009);
  if (_0x3ebe2 == 0) {
    _0x5ead65.beginPath();
    _0x5ead65.lineCap = "round";
    _0x5ead65.lineJoin = "round";
    _0x5ead65.moveTo(99 * _0x60009, 101 * _0x60009);
    _0x5ead65.bezierCurveTo(
      118.6666259765625 * _0x60009,
      104.33331298828125 * _0x60009,
      124.6666259765625 * _0x60009,
      116.33331298828125 * _0x60009,
      112.6666259765625 * _0x60009,
      114.33331298828125 * _0x60009
    );
    _0x5ead65.bezierCurveTo(
      104.6666259765625 * _0x60009,
      112.33331298828125 * _0x60009,
      100.6666259765625 * _0x60009,
      105.33331298828125 * _0x60009,
      99.6666259765625 * _0x60009,
      101.33331298828125 * _0x60009
    );
    fill_path(_0x5ead65, undefined, _0xc2f17f[5], 6 * _0x60009);
    _0x5ead65.beginPath();
    _0x5ead65.lineCap = "round";
    _0x5ead65.lineJoin = "round";
    _0x5ead65.moveTo(
      97.6666259765625 * _0x60009,
      101.33331298828125 * _0x60009
    );
    _0x5ead65.bezierCurveTo(
      81.6666259765625 * _0x60009,
      106.33331298828125 * _0x60009,
      79.6666259765625 * _0x60009,
      114.33331298828125 * _0x60009,
      89.6666259765625 * _0x60009,
      114.33331298828125 * _0x60009
    );
    _0x5ead65.bezierCurveTo(
      95.6666259765625 * _0x60009,
      111.33331298828125 * _0x60009,
      95.6666259765625 * _0x60009,
      109.33331298828125 * _0x60009,
      98.6666259765625 * _0x60009,
      102.33331298828125 * _0x60009
    );
    fill_path(_0x5ead65, undefined, _0xc2f17f[5], 6 * _0x60009);
  } else {
    _0x5ead65.beginPath();
    _0x5ead65.lineCap = "round";
    _0x5ead65.lineJoin = "round";
    _0x5ead65.moveTo(103 * _0x60009, 100.39999389648438 * _0x60009);
    _0x5ead65.bezierCurveTo(
      120 * _0x60009,
      106.39999389648438 * _0x60009,
      118 * _0x60009,
      107.39999389648438 * _0x60009,
      120 * _0x60009,
      111.39999389648438 * _0x60009
    );
    fill_path(_0x5ead65, undefined, _0xc2f17f[5], 6 * _0x60009);
    _0x5ead65.beginPath();
    _0x5ead65.lineCap = "round";
    _0x5ead65.lineJoin = "round";
    _0x5ead65.moveTo(103 * _0x60009, 100.39999389648438 * _0x60009);
    _0x5ead65.bezierCurveTo(
      90 * _0x60009,
      103.39999389648438 * _0x60009,
      89 * _0x60009,
      106.39999389648438 * _0x60009,
      87 * _0x60009,
      112.39999389648438 * _0x60009
    );
    fill_path(_0x5ead65, undefined, _0xc2f17f[5], 6 * _0x60009);
    circle(
      _0x5ead65,
      86 * _0x60009,
      114.39999389648438 * _0x60009,
      4.5 * _0x60009
    );
    fill_path(_0x5ead65, _0xc2f17f[1], _0xc2f17f[5], 6 * _0x60009);
    circle(
      _0x5ead65,
      121 * _0x60009,
      114.39999389648438 * _0x60009,
      4.5 * _0x60009
    );
    fill_path(_0x5ead65, _0xc2f17f[1], _0xc2f17f[5], 6 * _0x60009);
  }
  return _0x143b58;
}
function create_treasure_chest(_0x12d3e5, _0x390722) {
  var _0x461107 = document.createElement("canvas");
  var _0x113247 = _0x461107.getContext("2d");
  _0x461107.width = 253 * _0x12d3e5;
  _0x461107.height = 192 * _0x12d3e5;
  _0x113247.globalAlpha = 0.5;
  _0x113247.save();
  _0x113247.translate(42 * _0x12d3e5, 99 * _0x12d3e5);
  _0x113247.globalAlpha = 0.5;
  round_rect(
    _0x113247,
    -7 * _0x12d3e5,
    -20 * _0x12d3e5,
    14 * _0x12d3e5,
    39 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[0]);
  _0x113247.globalAlpha = 1;
  _0x113247.save();
  _0x113247.translate(37 * _0x12d3e5, 94 * _0x12d3e5);
  round_rect(
    _0x113247,
    -7 * _0x12d3e5,
    -20 * _0x12d3e5,
    14 * _0x12d3e5,
    37 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[2]);
  _0x113247.globalAlpha = 0.5;
  _0x113247.save();
  _0x113247.translate(136 * _0x12d3e5, 99 * _0x12d3e5);
  _0x113247.globalAlpha = 0.5;
  round_rect(
    _0x113247,
    -84 * _0x12d3e5,
    -67 * _0x12d3e5,
    168 * _0x12d3e5,
    134 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[0], _0x390722[0], 13 * _0x12d3e5);
  _0x113247.globalAlpha = 1;
  _0x113247.save();
  _0x113247.translate(131 * _0x12d3e5, 94 * _0x12d3e5);
  round_rect(
    _0x113247,
    -84 * _0x12d3e5,
    -67 * _0x12d3e5,
    168 * _0x12d3e5,
    134 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[2], _0x390722[2], 13 * _0x12d3e5);
  _0x113247.save();
  _0x113247.translate(131 * _0x12d3e5, 94 * _0x12d3e5);
  round_rect(
    _0x113247,
    -76 * _0x12d3e5,
    -61 * _0x12d3e5,
    152 * _0x12d3e5,
    122 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[3], _0x390722[1], 8 * _0x12d3e5);
  _0x113247.save();
  _0x113247.translate(168.5 * _0x12d3e5, 93.5 * _0x12d3e5);
  round_rect(
    _0x113247,
    -30.5 * _0x12d3e5,
    -58.5 * _0x12d3e5,
    61 * _0x12d3e5,
    117 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[3], _0x390722[4], 6 * _0x12d3e5);
  _0x113247.save();
  _0x113247.translate(93.5 * _0x12d3e5, 95.5 * _0x12d3e5);
  round_rect(
    _0x113247,
    -32 * _0x12d3e5,
    -59.5 * _0x12d3e5,
    59 * _0x12d3e5,
    119 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[3], _0x390722[4], 6 * _0x12d3e5);
  _0x113247.save();
  _0x113247.translate(130.5 * _0x12d3e5, 94 * _0x12d3e5);
  round_rect(
    _0x113247,
    -36 * _0x12d3e5,
    -67 * _0x12d3e5,
    73 * _0x12d3e5,
    134 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[3], _0x390722[2], 8 * _0x12d3e5);
  _0x113247.globalAlpha = 0.5;
  _0x113247.save();
  _0x113247.translate(133 * _0x12d3e5, 97 * _0x12d3e5);
  round_rect(
    _0x113247,
    -83 * _0x12d3e5,
    -12 * _0x12d3e5,
    160 * _0x12d3e5,
    24 * _0x12d3e5,
    0 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[0]);
  _0x113247.globalAlpha = 1;
  _0x113247.save();
  _0x113247.translate(133 * _0x12d3e5, 92 * _0x12d3e5);
  round_rect(
    _0x113247,
    -83 * _0x12d3e5,
    -12 * _0x12d3e5,
    160 * _0x12d3e5,
    24 * _0x12d3e5,
    0 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[2]);
  _0x113247.globalAlpha = 0.5;
  _0x113247.save();
  _0x113247.translate(228 * _0x12d3e5, 99.5 * _0x12d3e5);
  _0x113247.globalAlpha = 0.5;
  round_rect(
    _0x113247,
    -5 * _0x12d3e5,
    -18.5 * _0x12d3e5,
    10 * _0x12d3e5,
    37 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[0]);
  _0x113247.globalAlpha = 1;
  _0x113247.save();
  _0x113247.translate(223 * _0x12d3e5, 94.5 * _0x12d3e5);
  round_rect(
    _0x113247,
    -5 * _0x12d3e5,
    -18.5 * _0x12d3e5,
    10 * _0x12d3e5,
    37 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[2]);
  _0x113247.save();
  _0x113247.translate(133.5 * _0x12d3e5, 175.5 * _0x12d3e5);
  _0x113247.globalAlpha = 0.5;
  round_rect(
    _0x113247,
    -22.5 * _0x12d3e5,
    -6.5 * _0x12d3e5,
    45 * _0x12d3e5,
    13 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[0]);
  _0x113247.globalAlpha = 1;
  _0x113247.save();
  _0x113247.translate(128.5 * _0x12d3e5, 170.5 * _0x12d3e5);
  round_rect(
    _0x113247,
    -22.5 * _0x12d3e5,
    -6.5 * _0x12d3e5,
    45 * _0x12d3e5,
    13 * _0x12d3e5,
    20 * _0x12d3e5
  );
  _0x113247.restore();
  fill_path(_0x113247, _0x390722[2]);
  return _0x461107;
}
function create_hurt_treasure_chest(_0x2ec386, _0x345a0e) {
  var _0x48a851 = document.createElement("canvas");
  var _0x2739be = _0x48a851.getContext("2d");
  _0x48a851.width = 253 * _0x2ec386;
  _0x48a851.height = 192 * _0x2ec386;
  _0x2739be.save();
  _0x2739be.translate(37 * _0x2ec386, 94 * _0x2ec386);
  round_rect(
    _0x2739be,
    -7 * _0x2ec386,
    -20 * _0x2ec386,
    14 * _0x2ec386,
    37 * _0x2ec386,
    20 * _0x2ec386
  );
  _0x2739be.restore();
  fill_path(_0x2739be, _0x345a0e[0]);
  _0x2739be.save();
  _0x2739be.translate(131 * _0x2ec386, 94 * _0x2ec386);
  round_rect(
    _0x2739be,
    -84 * _0x2ec386,
    -67 * _0x2ec386,
    168 * _0x2ec386,
    134 * _0x2ec386,
    20 * _0x2ec386
  );
  _0x2739be.restore();
  fill_path(_0x2739be, _0x345a0e[0], _0x345a0e[0], 13 * _0x2ec386);
  _0x2739be.save();
  _0x2739be.translate(223 * _0x2ec386, 94.5 * _0x2ec386);
  round_rect(
    _0x2739be,
    -5 * _0x2ec386,
    -18.5 * _0x2ec386,
    10 * _0x2ec386,
    37 * _0x2ec386,
    20 * _0x2ec386
  );
  _0x2739be.restore();
  fill_path(_0x2739be, _0x345a0e[0]);
  _0x2739be.save();
  _0x2739be.translate(128.5 * _0x2ec386, 170.5 * _0x2ec386);
  round_rect(
    _0x2739be,
    -22.5 * _0x2ec386,
    -6.5 * _0x2ec386,
    45 * _0x2ec386,
    13 * _0x2ec386,
    20 * _0x2ec386
  );
  _0x2739be.restore();
  fill_path(_0x2739be, _0x345a0e[0]);
  return _0x48a851;
}
function create_bottle(_0x1363e1, _0x102358, _0x25e56d) {
  var _0x184bbc = document.createElement("canvas");
  var _0x50c059 = _0x184bbc.getContext("2d");
  _0x184bbc.width = 316 * _0x1363e1;
  _0x184bbc.height = 365 * _0x1363e1;
  _0x50c059.save();
  _0x50c059.translate(
    156.07142639160156 * _0x1363e1,
    51.81248474121094 * _0x1363e1
  );
  _0x50c059.rotate(0);
  round_rect(
    _0x50c059,
    -21.5 * _0x1363e1,
    -34 * _0x1363e1,
    43 * _0x1363e1,
    68 * _0x1363e1,
    8 * _0x1363e1
  );
  _0x50c059.restore();
  fill_path(_0x50c059, _0x25e56d[1], _0x25e56d[2], 15 * _0x1363e1);
  _0x50c059.beginPath();
  _0x50c059.lineCap = "round";
  _0x50c059.lineJoin = "round";
  _0x50c059.moveTo(
    110.57142639160156 * _0x1363e1,
    197.09820556640625 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    158.07142639160156 * _0x1363e1,
    179.09820556640625 * _0x1363e1,
    158.07142639160156 * _0x1363e1,
    179.09820556640625 * _0x1363e1,
    205.57142639160156 * _0x1363e1,
    161.09820556640625 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    205.57142639160156 * _0x1363e1,
    235.45535278320312 * _0x1363e1,
    205.57142639160156 * _0x1363e1,
    235.45535278320312 * _0x1363e1,
    205.57142639160156 * _0x1363e1,
    309.8125 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    205.57142639160156 * _0x1363e1,
    323.8125 * _0x1363e1,
    200.57142639160156 * _0x1363e1,
    325.8125 * _0x1363e1,
    187.57142639160156 * _0x1363e1,
    326.8125 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    155.57142639160156 * _0x1363e1,
    326.3125 * _0x1363e1,
    155.57142639160156 * _0x1363e1,
    326.3125 * _0x1363e1,
    123.57142639160156 * _0x1363e1,
    325.8125 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    111.57142639160156 * _0x1363e1,
    326.8125 * _0x1363e1,
    109.57142639160156 * _0x1363e1,
    321.8125 * _0x1363e1,
    110.57142639160156 * _0x1363e1,
    312.8125 * _0x1363e1
  );
  _0x50c059.closePath();
  fill_path(_0x50c059, _0x25e56d[3], _0x25e56d[4], 15 * _0x1363e1);
  _0x50c059.beginPath();
  _0x50c059.lineCap = "round";
  _0x50c059.lineJoin = "round";
  _0x50c059.moveTo(
    126.57142639160156 * _0x1363e1,
    67.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    126.57142639160156 * _0x1363e1,
    57.38392639160156 * _0x1363e1,
    132.57142639160156 * _0x1363e1,
    54.38392639160156 * _0x1363e1,
    140.57142639160156 * _0x1363e1,
    54.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    177.57142639160156 * _0x1363e1,
    55.38392639160156 * _0x1363e1,
    158.07142639160156 * _0x1363e1,
    54.38392639160156 * _0x1363e1,
    175.57142639160156 * _0x1363e1,
    54.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    185.57142639160156 * _0x1363e1,
    56.38392639160156 * _0x1363e1,
    185.57142639160156 * _0x1363e1,
    57.38392639160156 * _0x1363e1,
    184.57142639160156 * _0x1363e1,
    66.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    184.57142639160156 * _0x1363e1,
    78.38392639160156 * _0x1363e1,
    184.57142639160156 * _0x1363e1,
    89.38392639160156 * _0x1363e1,
    184.57142639160156 * _0x1363e1,
    90.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    177.57142639160156 * _0x1363e1,
    107.38392639160156 * _0x1363e1,
    180.57142639160156 * _0x1363e1,
    112.38392639160156 * _0x1363e1,
    189.57142639160156 * _0x1363e1,
    116.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    212.57142639160156 * _0x1363e1,
    127.38392639160156 * _0x1363e1,
    212.57142639160156 * _0x1363e1,
    132.38392639160156 * _0x1363e1,
    211.57142639160156 * _0x1363e1,
    150.38392639160156 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    211.57142639160156 * _0x1363e1,
    227.59821128845215 * _0x1363e1,
    211.57142639160156 * _0x1363e1,
    227.59821128845215 * _0x1363e1,
    211.57142639160156 * _0x1363e1,
    304.81249618530273 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    212.57142639160156 * _0x1363e1,
    328.81249618530273 * _0x1363e1,
    209.57142639160156 * _0x1363e1,
    330.81249618530273 * _0x1363e1,
    188.57142639160156 * _0x1363e1,
    333.81249618530273 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    155.07142639160156 * _0x1363e1,
    333.31249618530273 * _0x1363e1,
    155.07142639160156 * _0x1363e1,
    333.31249618530273 * _0x1363e1,
    121.57142639160156 * _0x1363e1,
    332.81249618530273 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    104.57142639160156 * _0x1363e1,
    327.81249618530273 * _0x1363e1,
    105.57142639160156 * _0x1363e1,
    328.81249618530273 * _0x1363e1,
    104.57142639160156 * _0x1363e1,
    312.81249618530273 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    104.57142639160156 * _0x1363e1,
    228.16963958740234 * _0x1363e1,
    104.57142639160156 * _0x1363e1,
    228.16963958740234 * _0x1363e1,
    104.57142639160156 * _0x1363e1,
    143.52678298950195 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    106.57142639160156 * _0x1363e1,
    124.52678298950195 * _0x1363e1,
    110.57142639160156 * _0x1363e1,
    123.52678298950195 * _0x1363e1,
    123.57142639160156 * _0x1363e1,
    116.52678298950195 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    136.57142639160156 * _0x1363e1,
    110.52678298950195 * _0x1363e1,
    130.57142639160156 * _0x1363e1,
    106.52678298950195 * _0x1363e1,
    126.57142639160156 * _0x1363e1,
    98.52678298950195 * _0x1363e1
  );
  _0x50c059.closePath();
  fill_path(_0x50c059, undefined, _0x25e56d[5], 15 * _0x1363e1);
  _0x50c059.beginPath();
  _0x50c059.lineCap = "round";
  _0x50c059.lineJoin = "round";
  _0x50c059.moveTo(
    125.57142639160156 * _0x1363e1,
    156.66963958740234 * _0x1363e1
  );
  _0x50c059.bezierCurveTo(
    125.57142639160156 * _0x1363e1,
    182.66963958740234 * _0x1363e1,
    125.57142639160156 * _0x1363e1,
    182.66963958740234 * _0x1363e1,
    125.57142639160156 * _0x1363e1,
    208.66963958740234 * _0x1363e1
  );
  _0x50c059.closePath();
  fill_path(_0x50c059, undefined, _0x25e56d[6], 15 * _0x1363e1);
  return _0x184bbc;
}
function create_bottle_full(_0x3ee4f2, _0x592b21, _0x358cdc) {
  var _0x404e04 = document.createElement("canvas");
  var _0x2d2b11 = _0x404e04.getContext("2d");
  _0x404e04.width = 316 * _0x3ee4f2;
  _0x404e04.height = 365 * _0x3ee4f2;
  _0x2d2b11.save();
  _0x2d2b11.translate(
    156.07142639160156 * _0x3ee4f2,
    51.81248474121094 * _0x3ee4f2
  );
  _0x2d2b11.rotate(0);
  round_rect(
    _0x2d2b11,
    -21.5 * _0x3ee4f2,
    -34 * _0x3ee4f2,
    43 * _0x3ee4f2,
    68 * _0x3ee4f2,
    8 * _0x3ee4f2
  );
  _0x2d2b11.restore();
  fill_path(_0x2d2b11, _0x358cdc[1], _0x358cdc[2], 15 * _0x3ee4f2);
  _0x2d2b11.beginPath();
  _0x2d2b11.lineCap = "round";
  _0x2d2b11.lineJoin = "round";
  _0x2d2b11.moveTo(
    126.57142639160156 * _0x3ee4f2,
    67.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    126.57142639160156 * _0x3ee4f2,
    57.38392639160156 * _0x3ee4f2,
    132.57142639160156 * _0x3ee4f2,
    54.38392639160156 * _0x3ee4f2,
    140.57142639160156 * _0x3ee4f2,
    54.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    177.57142639160156 * _0x3ee4f2,
    55.38392639160156 * _0x3ee4f2,
    158.07142639160156 * _0x3ee4f2,
    54.38392639160156 * _0x3ee4f2,
    175.57142639160156 * _0x3ee4f2,
    54.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    185.57142639160156 * _0x3ee4f2,
    56.38392639160156 * _0x3ee4f2,
    185.57142639160156 * _0x3ee4f2,
    57.38392639160156 * _0x3ee4f2,
    184.57142639160156 * _0x3ee4f2,
    66.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    184.57142639160156 * _0x3ee4f2,
    78.38392639160156 * _0x3ee4f2,
    184.57142639160156 * _0x3ee4f2,
    89.38392639160156 * _0x3ee4f2,
    184.57142639160156 * _0x3ee4f2,
    90.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    177.57142639160156 * _0x3ee4f2,
    107.38392639160156 * _0x3ee4f2,
    180.57142639160156 * _0x3ee4f2,
    112.38392639160156 * _0x3ee4f2,
    189.57142639160156 * _0x3ee4f2,
    116.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    212.57142639160156 * _0x3ee4f2,
    127.38392639160156 * _0x3ee4f2,
    212.57142639160156 * _0x3ee4f2,
    132.38392639160156 * _0x3ee4f2,
    211.57142639160156 * _0x3ee4f2,
    150.38392639160156 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    211.57142639160156 * _0x3ee4f2,
    227.59821128845215 * _0x3ee4f2,
    211.57142639160156 * _0x3ee4f2,
    227.59821128845215 * _0x3ee4f2,
    211.57142639160156 * _0x3ee4f2,
    304.81249618530273 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    212.57142639160156 * _0x3ee4f2,
    328.81249618530273 * _0x3ee4f2,
    209.57142639160156 * _0x3ee4f2,
    330.81249618530273 * _0x3ee4f2,
    188.57142639160156 * _0x3ee4f2,
    333.81249618530273 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    155.07142639160156 * _0x3ee4f2,
    333.31249618530273 * _0x3ee4f2,
    155.07142639160156 * _0x3ee4f2,
    333.31249618530273 * _0x3ee4f2,
    121.57142639160156 * _0x3ee4f2,
    332.81249618530273 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    104.57142639160156 * _0x3ee4f2,
    327.81249618530273 * _0x3ee4f2,
    105.57142639160156 * _0x3ee4f2,
    328.81249618530273 * _0x3ee4f2,
    104.57142639160156 * _0x3ee4f2,
    312.81249618530273 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    104.57142639160156 * _0x3ee4f2,
    228.16963958740234 * _0x3ee4f2,
    104.57142639160156 * _0x3ee4f2,
    228.16963958740234 * _0x3ee4f2,
    104.57142639160156 * _0x3ee4f2,
    143.52678298950195 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    106.57142639160156 * _0x3ee4f2,
    124.52678298950195 * _0x3ee4f2,
    110.57142639160156 * _0x3ee4f2,
    123.52678298950195 * _0x3ee4f2,
    123.57142639160156 * _0x3ee4f2,
    116.52678298950195 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    136.57142639160156 * _0x3ee4f2,
    110.52678298950195 * _0x3ee4f2,
    130.57142639160156 * _0x3ee4f2,
    106.52678298950195 * _0x3ee4f2,
    126.57142639160156 * _0x3ee4f2,
    98.52678298950195 * _0x3ee4f2
  );
  _0x2d2b11.closePath();
  fill_path(_0x2d2b11, undefined, _0x358cdc[5], 15 * _0x3ee4f2);
  _0x2d2b11.beginPath();
  _0x2d2b11.lineCap = "round";
  _0x2d2b11.lineJoin = "round";
  _0x2d2b11.moveTo(
    125.57142639160156 * _0x3ee4f2,
    156.66963958740234 * _0x3ee4f2
  );
  _0x2d2b11.bezierCurveTo(
    125.57142639160156 * _0x3ee4f2,
    182.66963958740234 * _0x3ee4f2,
    125.57142639160156 * _0x3ee4f2,
    182.66963958740234 * _0x3ee4f2,
    125.57142639160156 * _0x3ee4f2,
    208.66963958740234 * _0x3ee4f2
  );
  _0x2d2b11.closePath();
  fill_path(_0x2d2b11, undefined, _0x358cdc[6], 15 * _0x3ee4f2);
  return _0x404e04;
}
function create_drink_delay(_0x4efb24, _0x17fb8d) {
  var _0x1a3f8e = document.createElement("canvas");
  var _0x5bd11a = _0x1a3f8e.getContext("2d");
  _0x1a3f8e.width = 316 * _0x4efb24;
  _0x1a3f8e.height = 365 * _0x4efb24;
  _0x5bd11a.save();
  _0x5bd11a.translate(
    156.07142639160156 * _0x4efb24,
    51.81248474121094 * _0x4efb24
  );
  _0x5bd11a.rotate(0);
  round_rect(
    _0x5bd11a,
    -21.5 * _0x4efb24,
    -34 * _0x4efb24,
    43 * _0x4efb24,
    68 * _0x4efb24,
    8 * _0x4efb24
  );
  _0x5bd11a.restore();
  fill_path(_0x5bd11a, _0x17fb8d[0], _0x17fb8d[0], 15 * _0x4efb24);
  _0x5bd11a.beginPath();
  _0x5bd11a.lineCap = "round";
  _0x5bd11a.lineJoin = "round";
  _0x5bd11a.moveTo(
    126.57142639160156 * _0x4efb24,
    67.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    126.57142639160156 * _0x4efb24,
    57.38392639160156 * _0x4efb24,
    132.57142639160156 * _0x4efb24,
    54.38392639160156 * _0x4efb24,
    140.57142639160156 * _0x4efb24,
    54.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    177.57142639160156 * _0x4efb24,
    55.38392639160156 * _0x4efb24,
    158.07142639160156 * _0x4efb24,
    54.38392639160156 * _0x4efb24,
    175.57142639160156 * _0x4efb24,
    54.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    185.57142639160156 * _0x4efb24,
    56.38392639160156 * _0x4efb24,
    185.57142639160156 * _0x4efb24,
    57.38392639160156 * _0x4efb24,
    184.57142639160156 * _0x4efb24,
    66.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    184.57142639160156 * _0x4efb24,
    78.38392639160156 * _0x4efb24,
    184.57142639160156 * _0x4efb24,
    89.38392639160156 * _0x4efb24,
    184.57142639160156 * _0x4efb24,
    90.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    177.57142639160156 * _0x4efb24,
    107.38392639160156 * _0x4efb24,
    180.57142639160156 * _0x4efb24,
    112.38392639160156 * _0x4efb24,
    189.57142639160156 * _0x4efb24,
    116.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    212.57142639160156 * _0x4efb24,
    127.38392639160156 * _0x4efb24,
    212.57142639160156 * _0x4efb24,
    132.38392639160156 * _0x4efb24,
    211.57142639160156 * _0x4efb24,
    150.38392639160156 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    211.57142639160156 * _0x4efb24,
    227.59821128845215 * _0x4efb24,
    211.57142639160156 * _0x4efb24,
    227.59821128845215 * _0x4efb24,
    211.57142639160156 * _0x4efb24,
    304.81249618530273 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    212.57142639160156 * _0x4efb24,
    328.81249618530273 * _0x4efb24,
    209.57142639160156 * _0x4efb24,
    330.81249618530273 * _0x4efb24,
    188.57142639160156 * _0x4efb24,
    333.81249618530273 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    155.07142639160156 * _0x4efb24,
    333.31249618530273 * _0x4efb24,
    155.07142639160156 * _0x4efb24,
    333.31249618530273 * _0x4efb24,
    121.57142639160156 * _0x4efb24,
    332.81249618530273 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    104.57142639160156 * _0x4efb24,
    327.81249618530273 * _0x4efb24,
    105.57142639160156 * _0x4efb24,
    328.81249618530273 * _0x4efb24,
    104.57142639160156 * _0x4efb24,
    312.81249618530273 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    104.57142639160156 * _0x4efb24,
    228.16963958740234 * _0x4efb24,
    104.57142639160156 * _0x4efb24,
    228.16963958740234 * _0x4efb24,
    104.57142639160156 * _0x4efb24,
    143.52678298950195 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    106.57142639160156 * _0x4efb24,
    124.52678298950195 * _0x4efb24,
    110.57142639160156 * _0x4efb24,
    123.52678298950195 * _0x4efb24,
    123.57142639160156 * _0x4efb24,
    116.52678298950195 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    136.57142639160156 * _0x4efb24,
    110.52678298950195 * _0x4efb24,
    130.57142639160156 * _0x4efb24,
    106.52678298950195 * _0x4efb24,
    126.57142639160156 * _0x4efb24,
    98.52678298950195 * _0x4efb24
  );
  _0x5bd11a.closePath();
  fill_path(_0x5bd11a, _0x17fb8d[0], _0x17fb8d[0], 15 * _0x4efb24);
  _0x5bd11a.beginPath();
  _0x5bd11a.lineCap = "round";
  _0x5bd11a.lineJoin = "round";
  _0x5bd11a.moveTo(
    125.57142639160156 * _0x4efb24,
    156.66963958740234 * _0x4efb24
  );
  _0x5bd11a.bezierCurveTo(
    125.57142639160156 * _0x4efb24,
    182.66963958740234 * _0x4efb24,
    125.57142639160156 * _0x4efb24,
    182.66963958740234 * _0x4efb24,
    125.57142639160156 * _0x4efb24,
    208.66963958740234 * _0x4efb24
  );
  _0x5bd11a.closePath();
  fill_path(_0x5bd11a, _0x17fb8d[0], _0x17fb8d[0], 15 * _0x4efb24);
  return _0x1a3f8e;
}
function create_bucket_empty(_0x4411bb, _0x59ca23, _0x27e1ec) {
  var _0x54a73c = document.createElement("canvas");
  var _0x1f7f05 = _0x54a73c.getContext("2d");
  _0x54a73c.width = 400 * _0x4411bb;
  _0x54a73c.height = 400 * _0x4411bb;
  _0x1f7f05.translate(0, 15 * _0x4411bb);
  _0x1f7f05.globalAlpha = _0x59ca23 ? 0.5 : 1;
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(102 * _0x4411bb, 154 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    108 * _0x4411bb,
    216.5 * _0x4411bb,
    108 * _0x4411bb,
    216.5 * _0x4411bb,
    114 * _0x4411bb,
    279 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    124 * _0x4411bb,
    300 * _0x4411bb,
    237 * _0x4411bb,
    299 * _0x4411bb,
    251 * _0x4411bb,
    279 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    257 * _0x4411bb,
    217 * _0x4411bb,
    257 * _0x4411bb,
    217 * _0x4411bb,
    263 * _0x4411bb,
    155 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    248 * _0x4411bb,
    194 * _0x4411bb,
    91 * _0x4411bb,
    180 * _0x4411bb,
    103 * _0x4411bb,
    156 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[0]);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(102 * _0x4411bb, 154 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    106 * _0x4411bb,
    53 * _0x4411bb,
    255 * _0x4411bb,
    53 * _0x4411bb,
    263 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    248 * _0x4411bb,
    38 * _0x4411bb,
    99 * _0x4411bb,
    69 * _0x4411bb,
    103 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, undefined, _0x27e1ec[0], 11 * _0x4411bb);
  _0x1f7f05.translate(0, -5 * _0x4411bb);
  _0x1f7f05.globalAlpha = 1;
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(103 * _0x4411bb, 154 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    98 * _0x4411bb,
    119 * _0x4411bb,
    264 * _0x4411bb,
    119 * _0x4411bb,
    264 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    271 * _0x4411bb,
    189 * _0x4411bb,
    94 * _0x4411bb,
    188 * _0x4411bb,
    103 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[3], _0x27e1ec[2], 12 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(102 * _0x4411bb, 154 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    108 * _0x4411bb,
    216.5 * _0x4411bb,
    108 * _0x4411bb,
    216.5 * _0x4411bb,
    114 * _0x4411bb,
    279 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    124 * _0x4411bb,
    300 * _0x4411bb,
    237 * _0x4411bb,
    299 * _0x4411bb,
    251 * _0x4411bb,
    279 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    257 * _0x4411bb,
    217 * _0x4411bb,
    257 * _0x4411bb,
    217 * _0x4411bb,
    263 * _0x4411bb,
    155 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    248 * _0x4411bb,
    194 * _0x4411bb,
    91 * _0x4411bb,
    180 * _0x4411bb,
    103 * _0x4411bb,
    156 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[1], _0x27e1ec[2], 12 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(182 * _0x4411bb, 185 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    182.5 * _0x4411bb,
    237.5 * _0x4411bb,
    182.5 * _0x4411bb,
    237.5 * _0x4411bb,
    183 * _0x4411bb,
    290 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, undefined, _0x27e1ec[2], 12 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(222 * _0x4411bb, 287 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    226 * _0x4411bb,
    233.5 * _0x4411bb,
    226 * _0x4411bb,
    233.5 * _0x4411bb,
    230 * _0x4411bb,
    180 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, undefined, _0x27e1ec[2], 12 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(145 * _0x4411bb, 290 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    140.5 * _0x4411bb,
    237 * _0x4411bb,
    140.5 * _0x4411bb,
    237 * _0x4411bb,
    136 * _0x4411bb,
    184 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[1], _0x27e1ec[2], 11 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(105 * _0x4411bb, 184 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    148 * _0x4411bb,
    205 * _0x4411bb,
    231 * _0x4411bb,
    202 * _0x4411bb,
    260 * _0x4411bb,
    182 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    259 * _0x4411bb,
    195.5 * _0x4411bb,
    259 * _0x4411bb,
    195.5 * _0x4411bb,
    258 * _0x4411bb,
    209 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    217 * _0x4411bb,
    218 * _0x4411bb,
    163 * _0x4411bb,
    225 * _0x4411bb,
    108 * _0x4411bb,
    207 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[4], _0x27e1ec[2], 11 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(251 * _0x4411bb, 276 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    251.5 * _0x4411bb,
    267.5 * _0x4411bb,
    251.5 * _0x4411bb,
    267.5 * _0x4411bb,
    252 * _0x4411bb,
    259 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    212 * _0x4411bb,
    272 * _0x4411bb,
    156 * _0x4411bb,
    275 * _0x4411bb,
    112 * _0x4411bb,
    260 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    112.5 * _0x4411bb,
    269 * _0x4411bb,
    112.5 * _0x4411bb,
    269 * _0x4411bb,
    113 * _0x4411bb,
    278 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    155 * _0x4411bb,
    306 * _0x4411bb,
    253 * _0x4411bb,
    286 * _0x4411bb,
    250 * _0x4411bb,
    276 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, _0x27e1ec[4], _0x27e1ec[2], 11 * _0x4411bb);
  _0x1f7f05.beginPath();
  _0x1f7f05.lineCap = "round";
  _0x1f7f05.lineJoin = "round";
  _0x1f7f05.moveTo(102 * _0x4411bb, 154 * _0x4411bb);
  _0x1f7f05.bezierCurveTo(
    106 * _0x4411bb,
    53 * _0x4411bb,
    255 * _0x4411bb,
    53 * _0x4411bb,
    263 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.bezierCurveTo(
    248 * _0x4411bb,
    38 * _0x4411bb,
    99 * _0x4411bb,
    69 * _0x4411bb,
    103 * _0x4411bb,
    154 * _0x4411bb
  );
  _0x1f7f05.closePath();
  fill_path(_0x1f7f05, undefined, _0x27e1ec[2], 11 * _0x4411bb);
  return _0x54a73c;
}
function create_bucket_full(_0x374479, _0x34207e, _0x1e648d) {
  var _0x95aa96 = document.createElement("canvas");
  var _0x1c2e5c = _0x95aa96.getContext("2d");
  _0x95aa96.width = 400 * _0x374479;
  _0x95aa96.height = 400 * _0x374479;
  _0x1c2e5c.translate(0, 15 * _0x374479);
  _0x1c2e5c.globalAlpha = _0x34207e ? 0.5 : 1;
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(102 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    108 * _0x374479,
    216.5 * _0x374479,
    108 * _0x374479,
    216.5 * _0x374479,
    114 * _0x374479,
    279 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    124 * _0x374479,
    300 * _0x374479,
    237 * _0x374479,
    299 * _0x374479,
    251 * _0x374479,
    279 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    257 * _0x374479,
    217 * _0x374479,
    257 * _0x374479,
    217 * _0x374479,
    263 * _0x374479,
    155 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    248 * _0x374479,
    194 * _0x374479,
    91 * _0x374479,
    180 * _0x374479,
    103 * _0x374479,
    156 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[0]);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(102 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    106 * _0x374479,
    53 * _0x374479,
    255 * _0x374479,
    53 * _0x374479,
    263 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    248 * _0x374479,
    38 * _0x374479,
    99 * _0x374479,
    69 * _0x374479,
    103 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, undefined, _0x1e648d[0], 11 * _0x374479);
  _0x1c2e5c.translate(0, -5 * _0x374479);
  _0x1c2e5c.globalAlpha = 1;
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(103 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    98 * _0x374479,
    119 * _0x374479,
    264 * _0x374479,
    119 * _0x374479,
    264 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    271 * _0x374479,
    189 * _0x374479,
    94 * _0x374479,
    188 * _0x374479,
    103 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[3], _0x1e648d[2], 12 * _0x374479);
  _0x1c2e5c.translate(0, 25 * _0x374479);
  _0x1c2e5c.globalAlpha = 1;
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(103 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    98 * _0x374479,
    119 * _0x374479,
    264 * _0x374479,
    119 * _0x374479,
    264 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    271 * _0x374479,
    189 * _0x374479,
    94 * _0x374479,
    188 * _0x374479,
    103 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[5]);
  _0x1c2e5c.translate(0, -25 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(102 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    108 * _0x374479,
    216.5 * _0x374479,
    108 * _0x374479,
    216.5 * _0x374479,
    114 * _0x374479,
    279 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    124 * _0x374479,
    300 * _0x374479,
    237 * _0x374479,
    299 * _0x374479,
    251 * _0x374479,
    279 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    257 * _0x374479,
    217 * _0x374479,
    257 * _0x374479,
    217 * _0x374479,
    263 * _0x374479,
    155 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    248 * _0x374479,
    194 * _0x374479,
    91 * _0x374479,
    180 * _0x374479,
    103 * _0x374479,
    156 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[1], _0x1e648d[2], 12 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(182 * _0x374479, 185 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    182.5 * _0x374479,
    237.5 * _0x374479,
    182.5 * _0x374479,
    237.5 * _0x374479,
    183 * _0x374479,
    290 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, undefined, _0x1e648d[2], 12 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(222 * _0x374479, 287 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    226 * _0x374479,
    233.5 * _0x374479,
    226 * _0x374479,
    233.5 * _0x374479,
    230 * _0x374479,
    180 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, undefined, _0x1e648d[2], 12 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(145 * _0x374479, 290 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    140.5 * _0x374479,
    237 * _0x374479,
    140.5 * _0x374479,
    237 * _0x374479,
    136 * _0x374479,
    184 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[1], _0x1e648d[2], 11 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(105 * _0x374479, 184 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    148 * _0x374479,
    205 * _0x374479,
    231 * _0x374479,
    202 * _0x374479,
    260 * _0x374479,
    182 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    259 * _0x374479,
    195.5 * _0x374479,
    259 * _0x374479,
    195.5 * _0x374479,
    258 * _0x374479,
    209 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    217 * _0x374479,
    218 * _0x374479,
    163 * _0x374479,
    225 * _0x374479,
    108 * _0x374479,
    207 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[4], _0x1e648d[2], 11 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(251 * _0x374479, 276 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    251.5 * _0x374479,
    267.5 * _0x374479,
    251.5 * _0x374479,
    267.5 * _0x374479,
    252 * _0x374479,
    259 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    212 * _0x374479,
    272 * _0x374479,
    156 * _0x374479,
    275 * _0x374479,
    112 * _0x374479,
    260 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    112.5 * _0x374479,
    269 * _0x374479,
    112.5 * _0x374479,
    269 * _0x374479,
    113 * _0x374479,
    278 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    155 * _0x374479,
    306 * _0x374479,
    253 * _0x374479,
    286 * _0x374479,
    250 * _0x374479,
    276 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, _0x1e648d[4], _0x1e648d[2], 11 * _0x374479);
  _0x1c2e5c.beginPath();
  _0x1c2e5c.lineCap = "round";
  _0x1c2e5c.lineJoin = "round";
  _0x1c2e5c.moveTo(102 * _0x374479, 154 * _0x374479);
  _0x1c2e5c.bezierCurveTo(
    106 * _0x374479,
    53 * _0x374479,
    255 * _0x374479,
    53 * _0x374479,
    263 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.bezierCurveTo(
    248 * _0x374479,
    38 * _0x374479,
    99 * _0x374479,
    69 * _0x374479,
    103 * _0x374479,
    154 * _0x374479
  );
  _0x1c2e5c.closePath();
  fill_path(_0x1c2e5c, undefined, _0x1e648d[2], 11 * _0x374479);
  return _0x95aa96;
}
function create_shovel(_0x1ff45c, _0x12ee9f, _0x423179) {
  var _0x594581 = document.createElement("canvas");
  var _0x32e786 = _0x594581.getContext("2d");
  _0x594581.width = 80 * _0x1ff45c;
  _0x594581.height = 160 * _0x1ff45c;
  _0x32e786.globalAlpha = _0x12ee9f ? 0.5 : 1;
  _0x32e786.translate(5 * _0x1ff45c, 5 * _0x1ff45c);
  _0x32e786.save();
  round_rect(
    _0x32e786,
    33 * _0x1ff45c,
    53 * _0x1ff45c,
    10 * _0x1ff45c,
    98 * _0x1ff45c,
    10 * _0x1ff45c
  );
  fill_path(_0x32e786, _0x423179[0]);
  _0x32e786.beginPath();
  _0x32e786.lineCap = "round";
  _0x32e786.lineJoin = "round";
  _0x32e786.translate(-150 * _0x1ff45c, -100 * _0x1ff45c);
  _0x32e786.moveTo(167.5 * _0x1ff45c, 171.0625 * _0x1ff45c);
  _0x32e786.bezierCurveTo(
    188 * _0x1ff45c,
    171.0625 * _0x1ff45c,
    188 * _0x1ff45c,
    171.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    171.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    208.5 * _0x1ff45c,
    156.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    156.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    141.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    203.5 * _0x1ff45c,
    113.0625 * _0x1ff45c,
    179.5 * _0x1ff45c,
    96.0625 * _0x1ff45c,
    167.5 * _0x1ff45c,
    141.0625 * _0x1ff45c
  );
  _0x32e786.closePath();
  fill_path(_0x32e786, _0x423179[0]);
  _0x32e786.restore();
  _0x32e786.globalAlpha = 1;
  _0x32e786.translate(-5 * _0x1ff45c, -5 * _0x1ff45c);
  _0x32e786.save();
  round_rect(
    _0x32e786,
    33 * _0x1ff45c,
    53 * _0x1ff45c,
    10 * _0x1ff45c,
    98 * _0x1ff45c,
    10 * _0x1ff45c
  );
  fill_path(_0x32e786, _0x423179[1], _0x423179[2], 4 * _0x1ff45c);
  _0x32e786.beginPath();
  _0x32e786.lineCap = "round";
  _0x32e786.lineJoin = "round";
  _0x32e786.translate(-150 * _0x1ff45c, -100 * _0x1ff45c);
  _0x32e786.moveTo(167.5 * _0x1ff45c, 171.0625 * _0x1ff45c);
  _0x32e786.bezierCurveTo(
    188 * _0x1ff45c,
    171.0625 * _0x1ff45c,
    188 * _0x1ff45c,
    171.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    171.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    208.5 * _0x1ff45c,
    156.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    156.0625 * _0x1ff45c,
    208.5 * _0x1ff45c,
    141.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    203.5 * _0x1ff45c,
    113.0625 * _0x1ff45c,
    179.5 * _0x1ff45c,
    96.0625 * _0x1ff45c,
    167.5 * _0x1ff45c,
    141.0625 * _0x1ff45c
  );
  _0x32e786.closePath();
  fill_path(_0x32e786, _0x423179[3], _0x423179[4], 4 * _0x1ff45c);
  _0x32e786.beginPath();
  _0x32e786.lineCap = "round";
  _0x32e786.lineJoin = "round";
  _0x32e786.translate(0 * _0x1ff45c, 1 * _0x1ff45c);
  _0x32e786.moveTo(180.5 * _0x1ff45c, 169.0625 * _0x1ff45c);
  _0x32e786.bezierCurveTo(
    180.5 * _0x1ff45c,
    157.5625 * _0x1ff45c,
    180.5 * _0x1ff45c,
    157.5625 * _0x1ff45c,
    180.5 * _0x1ff45c,
    146.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    181.5 * _0x1ff45c,
    134.0625 * _0x1ff45c,
    193.5 * _0x1ff45c,
    129.0625 * _0x1ff45c,
    196.5 * _0x1ff45c,
    146.0625 * _0x1ff45c
  );
  _0x32e786.bezierCurveTo(
    196.5 * _0x1ff45c,
    157.5625 * _0x1ff45c,
    196.5 * _0x1ff45c,
    157.5625 * _0x1ff45c,
    196.5 * _0x1ff45c,
    169.0625 * _0x1ff45c
  );
  _0x32e786.closePath();
  fill_path(_0x32e786, _0x423179[5]);
  _0x32e786.restore();
  return _0x594581;
}
function create_symbol_hud(_0x3d100c, _0x2264ea, _0x19a232) {
  var _0x407dd5 = document.createElement("canvas");
  var _0x36f2b3 = _0x407dd5.getContext("2d");
  _0x407dd5.width = 109 * _0x3d100c;
  _0x407dd5.height = 110 * _0x3d100c;
  circle(
    _0x36f2b3,
    54.5 * _0x3d100c,
    55 * _0x3d100c,
    48.038209575038294 * _0x3d100c
  );
  fill_path(_0x36f2b3, _0x2264ea[0], _0x2264ea[1], 8 * _0x3d100c);
  if (_0x19a232 == 0) {
    _0x36f2b3.beginPath();
    _0x36f2b3.lineCap = "round";
    _0x36f2b3.lineJoin = "round";
    _0x36f2b3.moveTo(
      54.928558349609375 * _0x3d100c,
      43.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      66.92855834960938 * _0x3d100c,
      31.72320556640625 * _0x3d100c,
      69.92855834960938 * _0x3d100c,
      29.72320556640625 * _0x3d100c,
      74.92855834960938 * _0x3d100c,
      29.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      86.92855834960938 * _0x3d100c,
      28.72320556640625 * _0x3d100c,
      91.92855834960938 * _0x3d100c,
      42.72320556640625 * _0x3d100c,
      89.92855834960938 * _0x3d100c,
      52.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      88.92855834960938 * _0x3d100c,
      63.72320556640625 * _0x3d100c,
      73.92855834960938 * _0x3d100c,
      75.72320556640625 * _0x3d100c,
      55.928558349609375 * _0x3d100c,
      87.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      37.928558349609375 * _0x3d100c,
      78.72320556640625 * _0x3d100c,
      26.928558349609375 * _0x3d100c,
      65.72320556640625 * _0x3d100c,
      19.928558349609375 * _0x3d100c,
      54.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      13.928558349609375 * _0x3d100c,
      42.72320556640625 * _0x3d100c,
      21.928558349609375 * _0x3d100c,
      28.72320556640625 * _0x3d100c,
      35.928558349609375 * _0x3d100c,
      29.72320556640625 * _0x3d100c
    );
    _0x36f2b3.bezierCurveTo(
      45.928558349609375 * _0x3d100c,
      31.72320556640625 * _0x3d100c,
      51.928558349609375 * _0x3d100c,
      40.72320556640625 * _0x3d100c,
      53.928558349609375 * _0x3d100c,
      44.72320556640625 * _0x3d100c
    );
    _0x36f2b3.closePath();
    fill_path(_0x36f2b3, _0x2264ea[2]);
  } else {
    if (_0x19a232 == 1) {
      _0x36f2b3.save();
      _0x36f2b3.translate(55 * _0x3d100c, 39.48748779296875 * _0x3d100c);
      round_rect(
        _0x36f2b3,
        -11.5 * _0x3d100c,
        -36 * _0x3d100c,
        23 * _0x3d100c,
        72 * _0x3d100c,
        10 * _0x3d100c
      );
      _0x36f2b3.restore();
      fill_path(_0x36f2b3, _0x2264ea[2], _0x2264ea[3], 4 * _0x3d100c);
      circle(
        _0x36f2b3,
        54.5 * _0x3d100c,
        78.48748779296875 * _0x3d100c,
        22.02271554554524 * _0x3d100c
      );
      fill_path(_0x36f2b3, _0x2264ea[4], _0x2264ea[3], 4 * _0x3d100c);
      _0x36f2b3.save();
      _0x36f2b3.translate(55.5 * _0x3d100c, 57.287506103515625 * _0x3d100c);
      round_rect(
        _0x36f2b3,
        -9 * _0x3d100c,
        -16 * _0x3d100c,
        18 * _0x3d100c,
        32 * _0x3d100c,
        10 * _0x3d100c
      );
      _0x36f2b3.restore();
      fill_path(_0x36f2b3, _0x2264ea[4]);
      _0x36f2b3.beginPath();
      _0x36f2b3.lineCap = "round";
      _0x36f2b3.lineJoin = "round";
      _0x36f2b3.moveTo(66.5 * _0x3d100c, 25.287506103515625 * _0x3d100c);
      _0x36f2b3.bezierCurveTo(
        60.5 * _0x3d100c,
        25.287506103515625 * _0x3d100c,
        63.5 * _0x3d100c,
        25.287506103515625 * _0x3d100c,
        54.5 * _0x3d100c,
        25.287506103515625 * _0x3d100c
      );
      _0x36f2b3.closePath();
      fill_path(_0x36f2b3, undefined, _0x2264ea[5], 4 * _0x3d100c);
      _0x36f2b3.beginPath();
      _0x36f2b3.lineCap = "round";
      _0x36f2b3.lineJoin = "round";
      _0x36f2b3.moveTo(66.5 * _0x3d100c, 37.287506103515625 * _0x3d100c);
      _0x36f2b3.bezierCurveTo(
        60.5 * _0x3d100c,
        37.287506103515625 * _0x3d100c,
        60.5 * _0x3d100c,
        37.287506103515625 * _0x3d100c,
        54.5 * _0x3d100c,
        37.287506103515625 * _0x3d100c
      );
      _0x36f2b3.closePath();
      fill_path(_0x36f2b3, undefined, _0x2264ea[5], 4 * _0x3d100c);
      _0x36f2b3.beginPath();
      _0x36f2b3.lineCap = "round";
      _0x36f2b3.lineJoin = "round";
      _0x36f2b3.moveTo(66.5 * _0x3d100c, 50.287506103515625 * _0x3d100c);
      _0x36f2b3.bezierCurveTo(
        61 * _0x3d100c,
        50.287506103515625 * _0x3d100c,
        61 * _0x3d100c,
        50.287506103515625 * _0x3d100c,
        55.5 * _0x3d100c,
        50.287506103515625 * _0x3d100c
      );
      _0x36f2b3.closePath();
      fill_path(_0x36f2b3, undefined, _0x2264ea[5], 4 * _0x3d100c);
    } else {
      if (_0x19a232 == 2) {
        _0x36f2b3.beginPath();
        _0x36f2b3.lineCap = "round";
        _0x36f2b3.lineJoin = "round";
        _0x36f2b3.moveTo(
          45.928558349609375 * _0x3d100c,
          55.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          38.928558349609375 * _0x3d100c,
          67.29463195800781 * _0x3d100c,
          38.928558349609375 * _0x3d100c,
          67.29463195800781 * _0x3d100c,
          31.928558349609375 * _0x3d100c,
          79.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          15.928558349609375 * _0x3d100c,
          85.29463195800781 * _0x3d100c,
          17.928558349609375 * _0x3d100c,
          86.29463195800781 * _0x3d100c,
          17.928558349609375 * _0x3d100c,
          90.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          19.928558349609375 * _0x3d100c,
          94.29463195800781 * _0x3d100c,
          21.928558349609375 * _0x3d100c,
          94.29463195800781 * _0x3d100c,
          27.928558349609375 * _0x3d100c,
          92.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          29.928558349609375 * _0x3d100c,
          98.29463195800781 * _0x3d100c,
          30.928558349609375 * _0x3d100c,
          99.29463195800781 * _0x3d100c,
          33.928558349609375 * _0x3d100c,
          99.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          38.928558349609375 * _0x3d100c,
          97.29463195800781 * _0x3d100c,
          38.928558349609375 * _0x3d100c,
          93.29463195800781 * _0x3d100c,
          37.928558349609375 * _0x3d100c,
          86.29463195800781 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          45.428558349609375 * _0x3d100c,
          73.29463195800781 * _0x3d100c,
          51.928558349609375 * _0x3d100c,
          64.29463195800781 * _0x3d100c,
          52.928558349609375 * _0x3d100c,
          60.29463195800781 * _0x3d100c
        );
        _0x36f2b3.closePath();
        fill_path(_0x36f2b3, _0x2264ea[2]);
        _0x36f2b3.beginPath();
        _0x36f2b3.lineCap = "round";
        _0x36f2b3.lineJoin = "round";
        _0x36f2b3.moveTo(
          55.928558349609375 * _0x3d100c,
          8.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          35.928558349609375 * _0x3d100c,
          35.866058349609375 * _0x3d100c,
          37.928558349609375 * _0x3d100c,
          48.866058349609375 * _0x3d100c,
          46.928558349609375 * _0x3d100c,
          62.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          65.92855834960938 * _0x3d100c,
          72.86605834960938 * _0x3d100c,
          80.92855834960938 * _0x3d100c,
          55.866058349609375 * _0x3d100c,
          93.92855834960938 * _0x3d100c,
          36.866058349609375 * _0x3d100c
        );
        _0x36f2b3.closePath();
        fill_path(_0x36f2b3, _0x2264ea[3], _0x2264ea[4], 6 * _0x3d100c);
        _0x36f2b3.beginPath();
        _0x36f2b3.lineCap = "round";
        _0x36f2b3.lineJoin = "round";
        _0x36f2b3.moveTo(
          93.92855834960938 * _0x3d100c,
          36.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          82.92855834960938 * _0x3d100c,
          37.866058349609375 * _0x3d100c,
          77.92855834960938 * _0x3d100c,
          36.866058349609375 * _0x3d100c,
          67.92855834960938 * _0x3d100c,
          28.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          53.928558349609375 * _0x3d100c,
          16.866058349609375 * _0x3d100c,
          53.928558349609375 * _0x3d100c,
          14.866058349609375 * _0x3d100c,
          55.928558349609375 * _0x3d100c,
          7.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          65.92855834960938 * _0x3d100c,
          4.866058349609375 * _0x3d100c,
          71.92855834960938 * _0x3d100c,
          7.866058349609375 * _0x3d100c,
          83.92855834960938 * _0x3d100c,
          13.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          96.92855834960938 * _0x3d100c,
          21.866058349609375 * _0x3d100c,
          95.92855834960938 * _0x3d100c,
          31.866058349609375 * _0x3d100c,
          92.92855834960938 * _0x3d100c,
          36.866058349609375 * _0x3d100c
        );
        _0x36f2b3.closePath();
        fill_path(_0x36f2b3, _0x2264ea[3], _0x2264ea[4], 6 * _0x3d100c);
        _0x36f2b3.beginPath();
        _0x36f2b3.lineCap = "round";
        _0x36f2b3.lineJoin = "round";
        _0x36f2b3.moveTo(
          68.92855834960938 * _0x3d100c,
          16.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          71.92855834960938 * _0x3d100c,
          13.866058349609375 * _0x3d100c,
          76.92855834960938 * _0x3d100c,
          16.866058349609375 * _0x3d100c,
          79.92855834960938 * _0x3d100c,
          21.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          82.92855834960938 * _0x3d100c,
          24.866058349609375 * _0x3d100c,
          81.92855834960938 * _0x3d100c,
          27.866058349609375 * _0x3d100c,
          73.92855834960938 * _0x3d100c,
          24.866058349609375 * _0x3d100c
        );
        _0x36f2b3.bezierCurveTo(
          67.92855834960938 * _0x3d100c,
          20.866058349609375 * _0x3d100c,
          66.92855834960938 * _0x3d100c,
          19.866058349609375 * _0x3d100c,
          67.92855834960938 * _0x3d100c,
          17.866058349609375 * _0x3d100c
        );
        _0x36f2b3.closePath();
        fill_path(_0x36f2b3, _0x2264ea[2]);
      } else {
        if (_0x19a232 == 3) {
          _0x36f2b3.scale(0.9, 0.9);
          _0x36f2b3.translate(6 * _0x3d100c, 0);
          _0x36f2b3.beginPath();
          _0x36f2b3.lineCap = "round";
          _0x36f2b3.lineJoin = "round";
          _0x36f2b3.moveTo(54 * _0x3d100c, 0.421875 * _0x3d100c);
          _0x36f2b3.bezierCurveTo(
            84 * _0x3d100c,
            45.421875 * _0x3d100c,
            89 * _0x3d100c,
            51.421875 * _0x3d100c,
            83 * _0x3d100c,
            74.421875 * _0x3d100c
          );
          _0x36f2b3.bezierCurveTo(
            74 * _0x3d100c,
            95.421875 * _0x3d100c,
            46 * _0x3d100c,
            98.421875 * _0x3d100c,
            30 * _0x3d100c,
            78.421875 * _0x3d100c
          );
          _0x36f2b3.bezierCurveTo(
            22 * _0x3d100c,
            59.421875 * _0x3d100c,
            27 * _0x3d100c,
            49.421875 * _0x3d100c,
            34 * _0x3d100c,
            36.421875 * _0x3d100c
          );
          _0x36f2b3.closePath();
          fill_path(_0x36f2b3, _0x2264ea[2], _0x2264ea[3], 6 * _0x3d100c);
          _0x36f2b3.beginPath();
          _0x36f2b3.lineCap = "round";
          _0x36f2b3.lineJoin = "round";
          _0x36f2b3.moveTo(74 * _0x3d100c, 52.421875 * _0x3d100c);
          _0x36f2b3.bezierCurveTo(
            77 * _0x3d100c,
            73.421875 * _0x3d100c,
            69 * _0x3d100c,
            81.421875 * _0x3d100c,
            58 * _0x3d100c,
            81.421875 * _0x3d100c
          );
          _0x36f2b3.bezierCurveTo(
            66 * _0x3d100c,
            71.421875 * _0x3d100c,
            70 * _0x3d100c,
            66.421875 * _0x3d100c,
            74 * _0x3d100c,
            52.421875 * _0x3d100c
          );
          _0x36f2b3.closePath();
          fill_path(_0x36f2b3, _0x2264ea[3]);
        }
      }
    }
  }
  return _0x407dd5;
}
function create_button_background(_0x46c5ab, _0x317dc3) {
  var _0x43beff = document.createElement("canvas");
  var _0x2d5e25 = _0x43beff.getContext("2d");
  var _0x78f9a5 = _0x46c5ab.w + _0x46c5ab.lw;
  var _0x648c05 = _0x46c5ab.h + _0x46c5ab.lw;
  var _0x1c678e = _0x648c05 * 0.1;
  _0x43beff.width = _0x78f9a5;
  _0x43beff.height = _0x648c05 + _0x1c678e;
  _0x2d5e25.beginPath();
  _0x2d5e25.translate(_0x78f9a5 / 2, _0x648c05 / 2 + _0x1c678e);
  _0x2d5e25.globalAlpha = 0.5;
  round_rect(
    _0x2d5e25,
    -_0x46c5ab.w / 2,
    -_0x46c5ab.h / 2,
    _0x46c5ab.w,
    _0x46c5ab.h,
    _0x46c5ab.r
  );
  fill_path(_0x2d5e25, "#000", "#000", _0x46c5ab.lw);
  _0x2d5e25.globalAlpha = 1;
  _0x2d5e25.beginPath();
  if (!_0x317dc3) {
    _0x2d5e25.translate(0, -_0x1c678e);
  }
  round_rect(
    _0x2d5e25,
    -_0x46c5ab.w / 2,
    -_0x46c5ab.h / 2,
    _0x46c5ab.w,
    _0x46c5ab.h,
    _0x46c5ab.r
  );
  fill_path(_0x2d5e25, _0x46c5ab.bg, _0x46c5ab.fg, _0x46c5ab.lw);
  _0x2d5e25.beginPath();
  _0x2d5e25.fillStyle = _0x46c5ab.color;
  _0x2d5e25.textBaseline = "middle";
  _0x2d5e25.textAlign = "center";
  _0x2d5e25.font = _0x46c5ab.size + "px " + _0x46c5ab.font;
  _0x2d5e25.fillText(_0x46c5ab.text, 0, 0);
  return _0x43beff;
}
function create_button(_0x180483) {
  var _0x55f401 = [];
  for (var _0x4a0387 = 0; _0x4a0387 < _0x180483.length; _0x4a0387++) {
    _0x55f401.push(
      create_button_background(
        _0x180483[_0x4a0387],
        _0x4a0387 == 2 ? true : false
      )
    );
  }
  return _0x55f401;
}
function create_gauges_mobile(_0x5b9f24) {
  var _0xabbeff = document.createElement("canvas");
  var _0x30b7f9 = _0xabbeff.getContext("2d");
  var _0x4fcf7e = 335 * _0x5b9f24;
  var _0x2c3845 = 250 * _0x5b9f24;
  var _0x27716 = 120 * _0x5b9f24;
  var _0x12066e = 20 * _0x5b9f24;
  var _0x562f8b = 35 * _0x5b9f24;
  var _0x376168 = 65 * _0x5b9f24;
  var _0x14c01b = 2 * _0x5b9f24;
  var _0x5b90cd = 4 * _0x5b9f24;
  _0xabbeff.width = _0x4fcf7e;
  _0xabbeff.height = _0x27716;
  _0x30b7f9.beginPath();
  _0x30b7f9.translate(0, 15 * _0x5b9f24);
  round_rect(_0x30b7f9, _0x376168, 0, _0x2c3845, _0x12066e, _0x14c01b);
  fill_path(_0x30b7f9, null, "#69A148", _0x5b90cd);
  _0x30b7f9.translate(0, _0x562f8b);
  round_rect(_0x30b7f9, _0x376168, 0, _0x2c3845, _0x12066e, _0x14c01b);
  fill_path(_0x30b7f9, null, "#AF352A", _0x5b90cd);
  _0x30b7f9.translate(0, _0x562f8b);
  round_rect(_0x30b7f9, _0x376168, 0, _0x2c3845, _0x12066e, _0x14c01b);
  fill_path(_0x30b7f9, null, "#669BB1", _0x5b90cd);
  return _0xabbeff;
}
function create_oxygen_gauges(_0x2168d4) {
  var _0x4d8734 = document.createElement("canvas");
  var _0x48628e = _0x4d8734.getContext("2d");
  var _0x52c7c8 = 600 * _0x2168d4;
  var _0x191711 = 22 * _0x2168d4;
  var _0x45cd07 = 4 * _0x2168d4;
  var _0x3e0da0 = 4 * _0x2168d4;
  _0x4d8734.width = _0x52c7c8;
  _0x4d8734.height = _0x191711;
  round_rect(
    _0x48628e,
    5 * _0x2168d4,
    5 * _0x2168d4,
    _0x52c7c8 - 10 * _0x2168d4,
    _0x191711 - 10 * _0x2168d4,
    _0x45cd07
  );
  fill_path(_0x48628e, null, "#BBE8EF", _0x3e0da0);
  return _0x4d8734;
}
function create_recipe_button(_0x10435d, _0x451959, _0x1e1dea) {
  var _0x5db82b = document.createElement("canvas");
  var _0x345fbc = _0x5db82b.getContext("2d");
  _0x5db82b.width = 573 * _0x10435d;
  _0x5db82b.height = 350 * _0x10435d;
  if (_0x1e1dea == 1) {
    _0x345fbc.beginPath();
    _0x345fbc.lineCap = "round";
    _0x345fbc.lineJoin = "round";
    _0x345fbc.moveTo(336 * _0x10435d, 72 * _0x10435d);
    _0x345fbc.bezierCurveTo(
      366 * _0x10435d,
      15 * _0x10435d,
      426 * _0x10435d,
      36 * _0x10435d,
      497 * _0x10435d,
      83 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      522 * _0x10435d,
      85 * _0x10435d,
      522 * _0x10435d,
      85 * _0x10435d,
      547 * _0x10435d,
      87 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      476.5 * _0x10435d,
      205 * _0x10435d,
      476.5 * _0x10435d,
      205 * _0x10435d,
      406 * _0x10435d,
      323 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      297.5 * _0x10435d,
      319 * _0x10435d,
      297.5 * _0x10435d,
      319 * _0x10435d,
      189 * _0x10435d,
      315 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      105.5 * _0x10435d,
      279 * _0x10435d,
      105.5 * _0x10435d,
      279 * _0x10435d,
      22 * _0x10435d,
      243 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      92 * _0x10435d,
      140 * _0x10435d,
      92 * _0x10435d,
      140 * _0x10435d,
      162 * _0x10435d,
      37 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      173 * _0x10435d,
      39 * _0x10435d,
      173 * _0x10435d,
      39 * _0x10435d,
      184 * _0x10435d,
      41 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      185 * _0x10435d,
      38.5 * _0x10435d,
      185 * _0x10435d,
      38.5 * _0x10435d,
      186 * _0x10435d,
      36 * _0x10435d
    );
    _0x345fbc.bezierCurveTo(
      323 * _0x10435d,
      13 * _0x10435d,
      322 * _0x10435d,
      25 * _0x10435d,
      337 * _0x10435d,
      74 * _0x10435d
    );
    _0x345fbc.closePath();
    fill_path(_0x345fbc, _0x451959[4], _0x451959[4], 35 * _0x10435d);
  }
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(168 * _0x10435d, 42 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    255 * _0x10435d,
    60 * _0x10435d,
    255 * _0x10435d,
    60 * _0x10435d,
    342 * _0x10435d,
    78 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    443 * _0x10435d,
    81.5 * _0x10435d,
    443 * _0x10435d,
    81.5 * _0x10435d,
    544 * _0x10435d,
    85 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    475 * _0x10435d,
    204.5 * _0x10435d,
    475 * _0x10435d,
    204.5 * _0x10435d,
    406 * _0x10435d,
    324 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    297.5 * _0x10435d,
    320 * _0x10435d,
    297.5 * _0x10435d,
    320 * _0x10435d,
    189 * _0x10435d,
    316 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    105.5 * _0x10435d,
    279 * _0x10435d,
    105.5 * _0x10435d,
    279 * _0x10435d,
    22 * _0x10435d,
    242 * _0x10435d
  );
  _0x345fbc.closePath();
  fill_path(_0x345fbc, _0x451959[0], _0x451959[1], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(188 * _0x10435d, 41 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    308 * _0x10435d,
    15 * _0x10435d,
    325 * _0x10435d,
    18 * _0x10435d,
    337 * _0x10435d,
    66 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    191 * _0x10435d,
    305 * _0x10435d,
    196 * _0x10435d,
    286 * _0x10435d,
    184 * _0x10435d,
    307 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    175 * _0x10435d,
    250 * _0x10435d,
    90 * _0x10435d,
    254 * _0x10435d,
    52 * _0x10435d,
    241 * _0x10435d
  );
  _0x345fbc.closePath();
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(336 * _0x10435d, 71 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    375 * _0x10435d,
    8 * _0x10435d,
    429 * _0x10435d,
    50 * _0x10435d,
    518 * _0x10435d,
    92 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    455 * _0x10435d,
    199.5 * _0x10435d,
    455 * _0x10435d,
    199.5 * _0x10435d,
    392 * _0x10435d,
    307 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    227 * _0x10435d,
    301 * _0x10435d,
    261 * _0x10435d,
    255 * _0x10435d,
    188 * _0x10435d,
    308 * _0x10435d
  );
  _0x345fbc.closePath();
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(357 * _0x10435d, 76 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    390 * _0x10435d,
    67 * _0x10435d,
    414 * _0x10435d,
    86 * _0x10435d,
    435 * _0x10435d,
    104 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    417 * _0x10435d,
    135 * _0x10435d,
    417 * _0x10435d,
    135 * _0x10435d,
    399 * _0x10435d,
    166 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    352 * _0x10435d,
    140 * _0x10435d,
    345 * _0x10435d,
    139 * _0x10435d,
    319 * _0x10435d,
    142 * _0x10435d
  );
  _0x345fbc.closePath();
  fill_path(_0x345fbc, _0x451959[3], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(309 * _0x10435d, 168 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    345 * _0x10435d,
    163 * _0x10435d,
    372 * _0x10435d,
    180 * _0x10435d,
    412 * _0x10435d,
    203 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(263 * _0x10435d, 54 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    305 * _0x10435d,
    44 * _0x10435d,
    307 * _0x10435d,
    51 * _0x10435d,
    311 * _0x10435d,
    64 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    270.5 * _0x10435d,
    129.5 * _0x10435d,
    270.5 * _0x10435d,
    129.5 * _0x10435d,
    230 * _0x10435d,
    195 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    221 * _0x10435d,
    175 * _0x10435d,
    203 * _0x10435d,
    171 * _0x10435d,
    186 * _0x10435d,
    172 * _0x10435d
  );
  _0x345fbc.closePath();
  fill_path(_0x345fbc, _0x451959[3], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(292 * _0x10435d, 198 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    328 * _0x10435d,
    191 * _0x10435d,
    364 * _0x10435d,
    211 * _0x10435d,
    401 * _0x10435d,
    237 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(245 * _0x10435d, 68 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    210 * _0x10435d,
    72 * _0x10435d,
    210 * _0x10435d,
    72 * _0x10435d,
    189 * _0x10435d,
    69 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(222 * _0x10435d, 96 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    196 * _0x10435d,
    97 * _0x10435d,
    193 * _0x10435d,
    97 * _0x10435d,
    177 * _0x10435d,
    92 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(207 * _0x10435d, 124 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    179 * _0x10435d,
    123 * _0x10435d,
    177 * _0x10435d,
    124 * _0x10435d,
    161 * _0x10435d,
    119 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(115 * _0x10435d, 183 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    184 * _0x10435d,
    185 * _0x10435d,
    203 * _0x10435d,
    198 * _0x10435d,
    219 * _0x10435d,
    221 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(98 * _0x10435d, 213 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    161 * _0x10435d,
    214 * _0x10435d,
    193 * _0x10435d,
    227 * _0x10435d,
    201 * _0x10435d,
    249 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[2], _0x451959[3], 12 * _0x10435d);
  _0x345fbc.beginPath();
  _0x345fbc.lineCap = "round";
  _0x345fbc.lineJoin = "round";
  _0x345fbc.moveTo(399 * _0x10435d, 257 * _0x10435d);
  _0x345fbc.bezierCurveTo(
    287 * _0x10435d,
    215 * _0x10435d,
    280 * _0x10435d,
    215 * _0x10435d,
    263 * _0x10435d,
    222 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    253 * _0x10435d,
    238 * _0x10435d,
    247 * _0x10435d,
    245 * _0x10435d,
    243 * _0x10435d,
    254 * _0x10435d
  );
  _0x345fbc.bezierCurveTo(
    267 * _0x10435d,
    236 * _0x10435d,
    292 * _0x10435d,
    263 * _0x10435d,
    377 * _0x10435d,
    284 * _0x10435d
  );
  fill_path(_0x345fbc, _0x451959[3], _0x451959[3], 12 * _0x10435d);
  return _0x5db82b;
}
function create_quest_button(_0x315520, _0x36aa52, _0x4d4cda, _0x5c2514) {
  var _0x13d8ba = document.createElement("canvas");
  var _0x18020b = _0x13d8ba.getContext("2d");
  _0x13d8ba.width = 170 * _0x315520;
  _0x13d8ba.height = 200 * _0x315520;
  _0x18020b.translate(5 * _0x315520, 15 * _0x315520);
  if (_0x5c2514 == 1) {
    _0x18020b.translate(0, -5 * _0x315520);
    circle(
      _0x18020b,
      77.00003051757812 * _0x315520,
      104.49432373046875 * _0x315520,
      71.84010022264724 * _0x315520
    );
    fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[5], 20 * _0x315520);
    circle(
      _0x18020b,
      77.00003051757812 * _0x315520,
      104.22160339355469 * _0x315520,
      61.554853586049575 * _0x315520
    );
    fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[5], 20 * _0x315520);
    _0x18020b.save();
    _0x18020b.translate(
      77.00003051757812 * _0x315520,
      31.267044067382812 * _0x315520
    );
    round_rect(
      _0x18020b,
      -6 * _0x315520,
      -12.5 * _0x315520,
      12 * _0x315520,
      25 * _0x315520,
      10 * _0x315520
    );
    _0x18020b.restore();
    fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[5], 20 * _0x315520);
    _0x18020b.save();
    _0x18020b.translate(
      77.00003051757812 * _0x315520,
      13.267044067382812 * _0x315520
    );
    round_rect(
      _0x18020b,
      -15 * _0x315520,
      -10.5 * _0x315520,
      30 * _0x315520,
      21 * _0x315520,
      10 * _0x315520
    );
    _0x18020b.restore();
    fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[5], 20 * _0x315520);
  }
  circle(
    _0x18020b,
    77.00003051757812 * _0x315520,
    104.49432373046875 * _0x315520,
    71.84010022264724 * _0x315520
  );
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 7 * _0x315520);
  circle(
    _0x18020b,
    77.00003051757812 * _0x315520,
    104.22160339355469 * _0x315520,
    61.554853586049575 * _0x315520
  );
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 7 * _0x315520);
  _0x18020b.beginPath();
  _0x18020b.lineCap = "round";
  _0x18020b.lineJoin = "round";
  _0x18020b.moveTo(
    18.000030517578125 * _0x315520,
    105.85795593261719 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    134.00003051757812 * _0x315520,
    104.85795593261719 * _0x315520,
    77.00003051757812 * _0x315520,
    104.85795593261719 * _0x315520,
    136.00003051757812 * _0x315520,
    103.85795593261719 * _0x315520
  );
  _0x18020b.closePath();
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 8 * _0x315520);
  circle(
    _0x18020b,
    77.00003051757812 * _0x315520,
    104.6761474609375 * _0x315520,
    32.55764119219941 * _0x315520
  );
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 8 * _0x315520);
  _0x18020b.beginPath();
  _0x18020b.lineCap = "round";
  _0x18020b.lineJoin = "round";
  _0x18020b.moveTo(
    78.00003051757812 * _0x315520,
    112.03977966308594 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    78.00003051757812 * _0x315520,
    87.03977966308594 * _0x315520,
    78.00003051757812 * _0x315520,
    87.03977966308594 * _0x315520,
    78.00003051757812 * _0x315520,
    62.03977966308594 * _0x315520
  );
  _0x18020b.closePath();
  fill_path(_0x18020b, _0x4d4cda[3], _0x4d4cda[2], 8 * _0x315520);
  _0x18020b.beginPath();
  _0x18020b.lineCap = "round";
  _0x18020b.lineJoin = "round";
  _0x18020b.moveTo(
    78.00003051757812 * _0x315520,
    48.03977966308594 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    82.00003051757812 * _0x315520,
    55.53977966308594 * _0x315520,
    82.00003051757812 * _0x315520,
    55.53977966308594 * _0x315520,
    86.00003051757812 * _0x315520,
    63.03977966308594 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    78.00003051757812 * _0x315520,
    63.03977966308594 * _0x315520,
    78.00003051757812 * _0x315520,
    63.03977966308594 * _0x315520,
    70.00003051757812 * _0x315520,
    63.03977966308594 * _0x315520
  );
  _0x18020b.closePath();
  fill_path(_0x18020b, _0x4d4cda[3], _0x4d4cda[2], 4 * _0x315520);
  _0x18020b.beginPath();
  _0x18020b.lineCap = "round";
  _0x18020b.lineJoin = "round";
  _0x18020b.moveTo(
    80.00003051757812 * _0x315520,
    111.6761474609375 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    95.00003051757812 * _0x315520,
    97.1761474609375 * _0x315520,
    95.00003051757812 * _0x315520,
    97.1761474609375 * _0x315520,
    110.00003051757812 * _0x315520,
    82.6761474609375 * _0x315520
  );
  _0x18020b.closePath();
  fill_path(_0x18020b, _0x4d4cda[3], _0x4d4cda[2], 8 * _0x315520);
  _0x18020b.beginPath();
  _0x18020b.lineCap = "round";
  _0x18020b.lineJoin = "round";
  _0x18020b.moveTo(
    107.00003051757812 * _0x315520,
    76.6761474609375 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    111.50003051757812 * _0x315520,
    82.6761474609375 * _0x315520,
    111.50003051757812 * _0x315520,
    82.6761474609375 * _0x315520,
    116.00003051757812 * _0x315520,
    88.6761474609375 * _0x315520
  );
  _0x18020b.bezierCurveTo(
    118.50003051757812 * _0x315520,
    81.6761474609375 * _0x315520,
    118.50003051757812 * _0x315520,
    81.6761474609375 * _0x315520,
    121.00003051757812 * _0x315520,
    74.6761474609375 * _0x315520
  );
  _0x18020b.closePath();
  fill_path(_0x18020b, _0x4d4cda[3], _0x4d4cda[2], 4 * _0x315520);
  circle(
    _0x18020b,
    77.00003051757812 * _0x315520,
    105.03977966308594 * _0x315520,
    15.556349186104045 * _0x315520
  );
  fill_path(_0x18020b, _0x4d4cda[3], _0x4d4cda[2], 4 * _0x315520);
  _0x18020b.save();
  _0x18020b.translate(
    77.00003051757812 * _0x315520,
    31.267044067382812 * _0x315520
  );
  _0x18020b.rotate(0);
  round_rect(
    _0x18020b,
    -6 * _0x315520,
    -12.5 * _0x315520,
    12 * _0x315520,
    25 * _0x315520,
    10 * _0x315520
  );
  _0x18020b.restore();
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 7 * _0x315520);
  _0x18020b.save();
  _0x18020b.translate(
    77.00003051757812 * _0x315520,
    13.267044067382812 * _0x315520
  );
  _0x18020b.rotate(0);
  round_rect(
    _0x18020b,
    -15 * _0x315520,
    -10.5 * _0x315520,
    30 * _0x315520,
    21 * _0x315520,
    10 * _0x315520
  );
  _0x18020b.restore();
  fill_path(_0x18020b, _0x4d4cda[1], _0x4d4cda[2], 7 * _0x315520);
  return _0x13d8ba;
}
function create_market_button(_0x12795f, _0x599061, _0x382aff) {
  var _0x1d3624 = document.createElement("canvas");
  var _0x2417d7 = _0x1d3624.getContext("2d");
  _0x1d3624.width = 81 * _0x12795f;
  _0x1d3624.height = 77 * _0x12795f;
  _0x2417d7.translate(0, 10 * _0x12795f);
  _0x2417d7.scale(0.2, 0.2);
  _0x2417d7.translate(0, -30 * _0x12795f);
  if (_0x382aff == 1) {
    _0x2417d7.beginPath();
    _0x2417d7.lineCap = "round";
    _0x2417d7.lineJoin = "round";
    _0x2417d7.moveTo(36.5 * _0x12795f, 278.0625 * _0x12795f);
    _0x2417d7.bezierCurveTo(
      67.5 * _0x12795f,
      316.0625 * _0x12795f,
      134.5 * _0x12795f,
      334.0625 * _0x12795f,
      199.5 * _0x12795f,
      319.0625 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      254.5 * _0x12795f,
      304.0625 * _0x12795f,
      346.5 * _0x12795f,
      270.0625 * _0x12795f,
      348.5 * _0x12795f,
      237.0625 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      359.5 * _0x12795f,
      206.0625 * _0x12795f,
      318.5 * _0x12795f,
      129.0625 * _0x12795f,
      262.5 * _0x12795f,
      122.0625 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      213.5 * _0x12795f,
      115.0625 * _0x12795f,
      166.5 * _0x12795f,
      133.0625 * _0x12795f,
      104.5 * _0x12795f,
      166.0625 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      54.5 * _0x12795f,
      194.0625 * _0x12795f,
      23.5 * _0x12795f,
      241.0625 * _0x12795f,
      36.5 * _0x12795f,
      277.0625 * _0x12795f
    );
    _0x2417d7.closePath();
    fill_path(_0x2417d7, _0x599061[0], _0x599061[3], 50 * _0x12795f);
  }
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(36.5 * _0x12795f, 278.0625 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    67.5 * _0x12795f,
    316.0625 * _0x12795f,
    134.5 * _0x12795f,
    334.0625 * _0x12795f,
    199.5 * _0x12795f,
    319.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    254.5 * _0x12795f,
    304.0625 * _0x12795f,
    346.5 * _0x12795f,
    270.0625 * _0x12795f,
    348.5 * _0x12795f,
    237.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    359.5 * _0x12795f,
    206.0625 * _0x12795f,
    318.5 * _0x12795f,
    129.0625 * _0x12795f,
    262.5 * _0x12795f,
    122.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    213.5 * _0x12795f,
    115.0625 * _0x12795f,
    166.5 * _0x12795f,
    133.0625 * _0x12795f,
    104.5 * _0x12795f,
    166.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    54.5 * _0x12795f,
    194.0625 * _0x12795f,
    23.5 * _0x12795f,
    241.0625 * _0x12795f,
    36.5 * _0x12795f,
    277.0625 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[0], _0x599061[1], 19 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(214.5 * _0x12795f, 124.0625 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    242.5 * _0x12795f,
    125.0625 * _0x12795f,
    272.5 * _0x12795f,
    159.0625 * _0x12795f,
    283.5 * _0x12795f,
    184.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    277.5 * _0x12795f,
    161.0625 * _0x12795f,
    233.5 * _0x12795f,
    128.0625 * _0x12795f,
    219.5 * _0x12795f,
    122.0625 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[0], _0x599061[1], 19 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(157.5 * _0x12795f, 145.0625 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    176.5 * _0x12795f,
    148.0625 * _0x12795f,
    205.5 * _0x12795f,
    176.0625 * _0x12795f,
    212.5 * _0x12795f,
    197.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    205.5 * _0x12795f,
    178.0625 * _0x12795f,
    177.5 * _0x12795f,
    152.0625 * _0x12795f,
    156.5 * _0x12795f,
    142.0625 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[0], _0x599061[1], 19 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(103.5 * _0x12795f, 169.0625 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    160.5 * _0x12795f,
    166.0625 * _0x12795f,
    228.5 * _0x12795f,
    312.0625 * _0x12795f,
    162.5 * _0x12795f,
    323.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    128.5 * _0x12795f,
    330.0625 * _0x12795f,
    45.5 * _0x12795f,
    312.0625 * _0x12795f,
    34.5 * _0x12795f,
    268.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    30.5 * _0x12795f,
    238.0625 * _0x12795f,
    44.5 * _0x12795f,
    222.0625 * _0x12795f,
    52.5 * _0x12795f,
    211.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    82.5 * _0x12795f,
    174.0625 * _0x12795f,
    104.5 * _0x12795f,
    166.0625 * _0x12795f,
    119.5 * _0x12795f,
    172.0625 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[2], _0x599061[1], 19 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(194.5 * _0x12795f, 313.0625 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    222.5 * _0x12795f,
    306.0625 * _0x12795f,
    319.5 * _0x12795f,
    271.0625 * _0x12795f,
    337.5 * _0x12795f,
    241.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    274.5 * _0x12795f,
    270.0625 * _0x12795f,
    216.5 * _0x12795f,
    288.0625 * _0x12795f,
    199.5 * _0x12795f,
    287.0625 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    198.5 * _0x12795f,
    302.0625 * _0x12795f,
    195.5 * _0x12795f,
    311.0625 * _0x12795f,
    193.5 * _0x12795f,
    312.0625 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[1]);
  _0x2417d7.scale(3, 3);
  _0x2417d7.translate(15, 10 * _0x12795f);
  if (_0x382aff == 1) {
    _0x2417d7.beginPath();
    _0x2417d7.lineCap = "round";
    _0x2417d7.lineJoin = "round";
    _0x2417d7.moveTo(4 * _0x12795f, 32 * _0x12795f);
    _0x2417d7.bezierCurveTo(
      19 * _0x12795f,
      25 * _0x12795f,
      19 * _0x12795f,
      25 * _0x12795f,
      34 * _0x12795f,
      18 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      41.5 * _0x12795f,
      23.5 * _0x12795f,
      41.5 * _0x12795f,
      23.5 * _0x12795f,
      49 * _0x12795f,
      29 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      59.5 * _0x12795f,
      20 * _0x12795f,
      59.5 * _0x12795f,
      20 * _0x12795f,
      70 * _0x12795f,
      11 * _0x12795f
    );
    fill_path(_0x2417d7, undefined, _0x599061[3], 28 * _0x12795f);
    _0x2417d7.beginPath();
    _0x2417d7.lineCap = "round";
    _0x2417d7.lineJoin = "round";
    _0x2417d7.moveTo(56 * _0x12795f, 6 * _0x12795f);
    _0x2417d7.bezierCurveTo(
      63.5 * _0x12795f,
      13.5 * _0x12795f,
      63.5 * _0x12795f,
      13.5 * _0x12795f,
      71 * _0x12795f,
      21 * _0x12795f
    );
    _0x2417d7.bezierCurveTo(
      74.5 * _0x12795f,
      11.5 * _0x12795f,
      74.5 * _0x12795f,
      11.5 * _0x12795f,
      78 * _0x12795f,
      2 * _0x12795f
    );
    _0x2417d7.closePath();
    fill_path(_0x2417d7, _0x599061[3], _0x599061[3], 28 * _0x12795f);
  }
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(4 * _0x12795f, 32 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    19 * _0x12795f,
    25 * _0x12795f,
    19 * _0x12795f,
    25 * _0x12795f,
    34 * _0x12795f,
    18 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    41.5 * _0x12795f,
    23.5 * _0x12795f,
    41.5 * _0x12795f,
    23.5 * _0x12795f,
    49 * _0x12795f,
    29 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    59.5 * _0x12795f,
    20 * _0x12795f,
    59.5 * _0x12795f,
    20 * _0x12795f,
    70 * _0x12795f,
    11 * _0x12795f
  );
  fill_path(_0x2417d7, undefined, _0x599061[1], 17 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(56 * _0x12795f, 6 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    63.5 * _0x12795f,
    13.5 * _0x12795f,
    63.5 * _0x12795f,
    13.5 * _0x12795f,
    71 * _0x12795f,
    21 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    74.5 * _0x12795f,
    11.5 * _0x12795f,
    74.5 * _0x12795f,
    11.5 * _0x12795f,
    78 * _0x12795f,
    2 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[1], _0x599061[1], 17 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(4 * _0x12795f, 32 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    19 * _0x12795f,
    25 * _0x12795f,
    19 * _0x12795f,
    25 * _0x12795f,
    34 * _0x12795f,
    18 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    41.5 * _0x12795f,
    23.5 * _0x12795f,
    41.5 * _0x12795f,
    23.5 * _0x12795f,
    49 * _0x12795f,
    29 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    59.5 * _0x12795f,
    20 * _0x12795f,
    59.5 * _0x12795f,
    20 * _0x12795f,
    70 * _0x12795f,
    11 * _0x12795f
  );
  fill_path(_0x2417d7, undefined, _0x599061[2], 10 * _0x12795f);
  _0x2417d7.beginPath();
  _0x2417d7.lineCap = "round";
  _0x2417d7.lineJoin = "round";
  _0x2417d7.moveTo(56 * _0x12795f, 6 * _0x12795f);
  _0x2417d7.bezierCurveTo(
    63.5 * _0x12795f,
    13.5 * _0x12795f,
    63.5 * _0x12795f,
    13.5 * _0x12795f,
    71 * _0x12795f,
    21 * _0x12795f
  );
  _0x2417d7.bezierCurveTo(
    74.5 * _0x12795f,
    11.5 * _0x12795f,
    74.5 * _0x12795f,
    11.5 * _0x12795f,
    78 * _0x12795f,
    2 * _0x12795f
  );
  _0x2417d7.closePath();
  fill_path(_0x2417d7, _0x599061[2], _0x599061[2], 10 * _0x12795f);
  return _0x1d3624;
}
function create_spanner(_0x4222b4, _0x44ce43, _0x370ece) {
  var _0x3352ec = document.createElement("canvas");
  var _0xd8e764 = _0x3352ec.getContext("2d");
  _0x3352ec.width = 144 * _0x4222b4;
  _0x3352ec.height = 280 * _0x4222b4;
  _0xd8e764.globalAlpha = _0x44ce43 ? 0.5 : 1;
  _0xd8e764.translate(5 * _0x4222b4, 5 * _0x4222b4);
  _0xd8e764.beginPath();
  _0xd8e764.lineCap = "round";
  _0xd8e764.lineJoin = "round";
  _0xd8e764.moveTo(62 * _0x4222b4, 103.79999542236328 * _0x4222b4);
  _0xd8e764.bezierCurveTo(
    62.5 * _0x4222b4,
    148.79999542236328 * _0x4222b4,
    62.5 * _0x4222b4,
    148.79999542236328 * _0x4222b4,
    63 * _0x4222b4,
    193.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    63 * _0x4222b4,
    219.79999542236328 * _0x4222b4,
    47 * _0x4222b4,
    217.79999542236328 * _0x4222b4,
    51 * _0x4222b4,
    230.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    62 * _0x4222b4,
    255.79999542236328 * _0x4222b4,
    74 * _0x4222b4,
    260.7999954223633 * _0x4222b4,
    72 * _0x4222b4,
    248.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    65 * _0x4222b4,
    226.79999542236328 * _0x4222b4,
    71 * _0x4222b4,
    229.79999542236328 * _0x4222b4,
    76 * _0x4222b4,
    225.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    90 * _0x4222b4,
    224.79999542236328 * _0x4222b4,
    89 * _0x4222b4,
    232.79999542236328 * _0x4222b4,
    90 * _0x4222b4,
    243.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    95 * _0x4222b4,
    253.79999542236328 * _0x4222b4,
    99 * _0x4222b4,
    249.79999542236328 * _0x4222b4,
    100 * _0x4222b4,
    229.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    102 * _0x4222b4,
    213.79999542236328 * _0x4222b4,
    98 * _0x4222b4,
    214.79999542236328 * _0x4222b4,
    90 * _0x4222b4,
    205.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    82 * _0x4222b4,
    201.79999542236328 * _0x4222b4,
    82 * _0x4222b4,
    185.79999542236328 * _0x4222b4,
    82 * _0x4222b4,
    114.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    80 * _0x4222b4,
    73 * _0x4222b4,
    82 * _0x4222b4,
    68 * _0x4222b4,
    93 * _0x4222b4,
    53 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    98 * _0x4222b4,
    37 * _0x4222b4,
    65 * _0x4222b4,
    14 * _0x4222b4,
    74 * _0x4222b4,
    33 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    82 * _0x4222b4,
    56 * _0x4222b4,
    77 * _0x4222b4,
    52 * _0x4222b4,
    69 * _0x4222b4,
    54 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    55 * _0x4222b4,
    57 * _0x4222b4,
    57 * _0x4222b4,
    53 * _0x4222b4,
    54 * _0x4222b4,
    39 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    46 * _0x4222b4,
    20 * _0x4222b4,
    37 * _0x4222b4,
    61 * _0x4222b4,
    50 * _0x4222b4,
    68 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    65 * _0x4222b4,
    81 * _0x4222b4,
    60 * _0x4222b4,
    89 * _0x4222b4,
    62 * _0x4222b4,
    102 * _0x4222b4
  );
  _0xd8e764.closePath();
  fill_path(_0xd8e764, _0x370ece[0]);
  _0xd8e764.globalAlpha = 1;
  _0xd8e764.translate(-5 * _0x4222b4, -5 * _0x4222b4);
  _0xd8e764.beginPath();
  _0xd8e764.lineCap = "round";
  _0xd8e764.lineJoin = "round";
  _0xd8e764.moveTo(62 * _0x4222b4, 103.79999542236328 * _0x4222b4);
  _0xd8e764.bezierCurveTo(
    62.5 * _0x4222b4,
    148.79999542236328 * _0x4222b4,
    62.5 * _0x4222b4,
    148.79999542236328 * _0x4222b4,
    63 * _0x4222b4,
    193.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    63 * _0x4222b4,
    219.79999542236328 * _0x4222b4,
    47 * _0x4222b4,
    217.79999542236328 * _0x4222b4,
    51 * _0x4222b4,
    230.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    62 * _0x4222b4,
    255.79999542236328 * _0x4222b4,
    74 * _0x4222b4,
    260.7999954223633 * _0x4222b4,
    72 * _0x4222b4,
    248.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    65 * _0x4222b4,
    226.79999542236328 * _0x4222b4,
    71 * _0x4222b4,
    229.79999542236328 * _0x4222b4,
    76 * _0x4222b4,
    225.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    90 * _0x4222b4,
    224.79999542236328 * _0x4222b4,
    89 * _0x4222b4,
    232.79999542236328 * _0x4222b4,
    90 * _0x4222b4,
    243.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    95 * _0x4222b4,
    253.79999542236328 * _0x4222b4,
    99 * _0x4222b4,
    249.79999542236328 * _0x4222b4,
    100 * _0x4222b4,
    229.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    102 * _0x4222b4,
    213.79999542236328 * _0x4222b4,
    98 * _0x4222b4,
    214.79999542236328 * _0x4222b4,
    90 * _0x4222b4,
    205.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    82 * _0x4222b4,
    201.79999542236328 * _0x4222b4,
    82 * _0x4222b4,
    185.79999542236328 * _0x4222b4,
    82 * _0x4222b4,
    114.79999542236328 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    80 * _0x4222b4,
    73 * _0x4222b4,
    82 * _0x4222b4,
    68 * _0x4222b4,
    93 * _0x4222b4,
    53 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    98 * _0x4222b4,
    37 * _0x4222b4,
    65 * _0x4222b4,
    14 * _0x4222b4,
    74 * _0x4222b4,
    33 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    82 * _0x4222b4,
    56 * _0x4222b4,
    77 * _0x4222b4,
    52 * _0x4222b4,
    69 * _0x4222b4,
    54 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    55 * _0x4222b4,
    57 * _0x4222b4,
    57 * _0x4222b4,
    53 * _0x4222b4,
    54 * _0x4222b4,
    39 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    46 * _0x4222b4,
    20 * _0x4222b4,
    37 * _0x4222b4,
    61 * _0x4222b4,
    50 * _0x4222b4,
    68 * _0x4222b4
  );
  _0xd8e764.bezierCurveTo(
    65 * _0x4222b4,
    81 * _0x4222b4,
    60 * _0x4222b4,
    89 * _0x4222b4,
    62 * _0x4222b4,
    102 * _0x4222b4
  );
  _0xd8e764.closePath();
  fill_path(_0xd8e764, _0x370ece[1], _0x370ece[2], 6 * _0x4222b4);
  return _0x3352ec;
}
function create_present(_0x301e1e, _0x34493a, _0xe6d7df) {
  var _0x27de32 = document.createElement("canvas");
  var _0x4d368e = _0x27de32.getContext("2d");
  _0x27de32.width = 160 * _0x301e1e;
  _0x27de32.height = 161 * _0x301e1e;
  _0x4d368e.globalAlpha = _0x34493a ? 0.5 : 1;
  _0x4d368e.translate(0, 10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(80.5 * _0x301e1e, 78 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -71.5 * _0x301e1e,
    -71 * _0x301e1e,
    143 * _0x301e1e,
    143 * _0x301e1e,
    10 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.globalAlpha = 1;
  _0x4d368e.translate(0, -10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(80.5 * _0x301e1e, 78 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -71.5 * _0x301e1e,
    -71 * _0x301e1e,
    143 * _0x301e1e,
    143 * _0x301e1e,
    10 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[1], _0xe6d7df[2], 6 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(80 * _0x301e1e, 78.5 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -17 * _0x301e1e,
    -72.5 * _0x301e1e,
    34 * _0x301e1e,
    145 * _0x301e1e,
    10 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.globalAlpha = _0x34493a ? 0.5 : 1;
  _0x4d368e.translate(0, 10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(80 * _0x301e1e, 79.5 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -73 * _0x301e1e,
    -16.5 * _0x301e1e,
    145 * _0x301e1e,
    34 * _0x301e1e,
    10 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.globalAlpha = 1;
  _0x4d368e.translate(0, -10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(80 * _0x301e1e, 79.5 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -73 * _0x301e1e,
    -16.5 * _0x301e1e,
    145 * _0x301e1e,
    34 * _0x301e1e,
    10 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.globalAlpha = _0x34493a ? 0.5 : 1;
  _0x4d368e.translate(0, 10 * _0x301e1e);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(79 * _0x301e1e, 71 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    90 * _0x301e1e,
    42 * _0x301e1e,
    98 * _0x301e1e,
    36 * _0x301e1e,
    109 * _0x301e1e,
    43 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    119 * _0x301e1e,
    47 * _0x301e1e,
    128 * _0x301e1e,
    62 * _0x301e1e,
    107 * _0x301e1e,
    72 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    96 * _0x301e1e,
    78.5 * _0x301e1e,
    96 * _0x301e1e,
    78.5 * _0x301e1e,
    85 * _0x301e1e,
    85 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(84 * _0x301e1e, 78 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    113 * _0x301e1e,
    82 * _0x301e1e,
    123 * _0x301e1e,
    97 * _0x301e1e,
    115 * _0x301e1e,
    108 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    110 * _0x301e1e,
    119 * _0x301e1e,
    98 * _0x301e1e,
    124 * _0x301e1e,
    87 * _0x301e1e,
    107 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    81.5 * _0x301e1e,
    94.5 * _0x301e1e,
    81.5 * _0x301e1e,
    94.5 * _0x301e1e,
    76 * _0x301e1e,
    82 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(80 * _0x301e1e, 73 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    64 * _0x301e1e,
    37 * _0x301e1e,
    55 * _0x301e1e,
    34 * _0x301e1e,
    45 * _0x301e1e,
    42 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    30 * _0x301e1e,
    54 * _0x301e1e,
    36 * _0x301e1e,
    65 * _0x301e1e,
    51 * _0x301e1e,
    72 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    62.5 * _0x301e1e,
    77 * _0x301e1e,
    62.5 * _0x301e1e,
    77 * _0x301e1e,
    74 * _0x301e1e,
    82 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(82 * _0x301e1e, 83 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    73 * _0x301e1e,
    107 * _0x301e1e,
    60 * _0x301e1e,
    123 * _0x301e1e,
    47 * _0x301e1e,
    113 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    33 * _0x301e1e,
    105 * _0x301e1e,
    33 * _0x301e1e,
    92 * _0x301e1e,
    52 * _0x301e1e,
    85 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    74 * _0x301e1e,
    73 * _0x301e1e,
    77 * _0x301e1e,
    76 * _0x301e1e,
    76 * _0x301e1e,
    75 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.globalAlpha = 1;
  _0x4d368e.translate(0, -10 * _0x301e1e);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(79 * _0x301e1e, 71 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    90 * _0x301e1e,
    42 * _0x301e1e,
    98 * _0x301e1e,
    36 * _0x301e1e,
    109 * _0x301e1e,
    43 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    119 * _0x301e1e,
    47 * _0x301e1e,
    128 * _0x301e1e,
    62 * _0x301e1e,
    107 * _0x301e1e,
    72 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    96 * _0x301e1e,
    78.5 * _0x301e1e,
    96 * _0x301e1e,
    78.5 * _0x301e1e,
    85 * _0x301e1e,
    85 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(84 * _0x301e1e, 78 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    113 * _0x301e1e,
    82 * _0x301e1e,
    123 * _0x301e1e,
    97 * _0x301e1e,
    115 * _0x301e1e,
    108 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    110 * _0x301e1e,
    119 * _0x301e1e,
    98 * _0x301e1e,
    124 * _0x301e1e,
    87 * _0x301e1e,
    107 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    81.5 * _0x301e1e,
    94.5 * _0x301e1e,
    81.5 * _0x301e1e,
    94.5 * _0x301e1e,
    76 * _0x301e1e,
    82 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(80 * _0x301e1e, 73 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    64 * _0x301e1e,
    37 * _0x301e1e,
    55 * _0x301e1e,
    34 * _0x301e1e,
    45 * _0x301e1e,
    42 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    30 * _0x301e1e,
    54 * _0x301e1e,
    36 * _0x301e1e,
    65 * _0x301e1e,
    51 * _0x301e1e,
    72 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    62.5 * _0x301e1e,
    77 * _0x301e1e,
    62.5 * _0x301e1e,
    77 * _0x301e1e,
    74 * _0x301e1e,
    82 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.beginPath();
  _0x4d368e.lineCap = "round";
  _0x4d368e.lineJoin = "round";
  _0x4d368e.moveTo(82 * _0x301e1e, 83 * _0x301e1e);
  _0x4d368e.bezierCurveTo(
    73 * _0x301e1e,
    107 * _0x301e1e,
    60 * _0x301e1e,
    123 * _0x301e1e,
    47 * _0x301e1e,
    113 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    33 * _0x301e1e,
    105 * _0x301e1e,
    33 * _0x301e1e,
    92 * _0x301e1e,
    52 * _0x301e1e,
    85 * _0x301e1e
  );
  _0x4d368e.bezierCurveTo(
    74 * _0x301e1e,
    73 * _0x301e1e,
    77 * _0x301e1e,
    76 * _0x301e1e,
    76 * _0x301e1e,
    75 * _0x301e1e
  );
  _0x4d368e.closePath();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  _0x4d368e.globalAlpha = _0x34493a ? 0.5 : 1;
  _0x4d368e.translate(0, 10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(78.5 * _0x301e1e, 78 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -13.5 * _0x301e1e,
    -14 * _0x301e1e,
    27 * _0x301e1e,
    27 * _0x301e1e,
    6 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[0]);
  _0x4d368e.globalAlpha = 1;
  _0x4d368e.translate(0, -10 * _0x301e1e);
  _0x4d368e.save();
  _0x4d368e.translate(78.5 * _0x301e1e, 78 * _0x301e1e);
  round_rect(
    _0x4d368e,
    -13.5 * _0x301e1e,
    -14 * _0x301e1e,
    27 * _0x301e1e,
    27 * _0x301e1e,
    6 * _0x301e1e
  );
  _0x4d368e.restore();
  fill_path(_0x4d368e, _0xe6d7df[3], _0xe6d7df[4], 6 * _0x301e1e);
  return _0x27de32;
}
function create_crown_life(_0x3386c6, _0x58a4e2, _0x1185a2) {
  var _0x37eb56 = document.createElement("canvas");
  var _0x1a4b8b = _0x37eb56.getContext("2d");
  _0x37eb56.width = 372 * _0x3386c6;
  _0x37eb56.height = 358 * _0x3386c6;
  _0x1a4b8b.translate(0 * _0x3386c6, 10 * _0x3386c6);
  _0x1a4b8b.globalAlpha = _0x58a4e2 ? 0.2 : 1;
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    247.00003051757812 * _0x3386c6,
    115.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    305.0000305175781 * _0x3386c6,
    124.76704406738281 * _0x3386c6,
    335.0000305175781 * _0x3386c6,
    112.76704406738281 * _0x3386c6,
    359.0000305175781 * _0x3386c6,
    93.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    359.5000305175781 * _0x3386c6,
    113.26704406738281 * _0x3386c6,
    359.5000305175781 * _0x3386c6,
    113.26704406738281 * _0x3386c6,
    360.0000305175781 * _0x3386c6,
    132.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    339.0000305175781 * _0x3386c6,
    177.7670440673828 * _0x3386c6,
    281.0000305175781 * _0x3386c6,
    178.7670440673828 * _0x3386c6,
    243.00003051757812 * _0x3386c6,
    183.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    214.50003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    214.50003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    186.00003051757812 * _0x3386c6,
    244.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    155.00003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    155.00003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    124.00003051757812 * _0x3386c6,
    183.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    51.000030517578125 * _0x3386c6,
    180.7670440673828 * _0x3386c6,
    21.000030517578125 * _0x3386c6,
    161.7670440673828 * _0x3386c6,
    9.000030517578125 * _0x3386c6,
    129.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    8.500030517578125 * _0x3386c6,
    110.76704406738281 * _0x3386c6,
    8.500030517578125 * _0x3386c6,
    110.76704406738281 * _0x3386c6,
    8.000030517578125 * _0x3386c6,
    91.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    31.000030517578125 * _0x3386c6,
    112.76704406738281 * _0x3386c6,
    87.00003051757812 * _0x3386c6,
    119.76704406738281 * _0x3386c6,
    116.00003051757812 * _0x3386c6,
    117.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    175.00003051757812 * _0x3386c6,
    18.767044067382812 * _0x3386c6,
    170.00003051757812 * _0x3386c6,
    23.767044067382812 * _0x3386c6,
    181.00003051757812 * _0x3386c6,
    14.767044067382812 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    199.00003051757812 * _0x3386c6,
    34.76704406738281 * _0x3386c6,
    203.00003051757812 * _0x3386c6,
    54.76704406738281 * _0x3386c6,
    247.00003051757812 * _0x3386c6,
    115.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[0], _0x1185a2[0], 10 * _0x3386c6);
  _0x1a4b8b.translate(0 * _0x3386c6, -10 * _0x3386c6);
  _0x1a4b8b.globalAlpha = 1;
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    107.00003051757812 * _0x3386c6,
    54.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    106.50003051757812 * _0x3386c6,
    38.63069152832031 * _0x3386c6,
    106.50003051757812 * _0x3386c6,
    38.63069152832031 * _0x3386c6,
    106.00003051757812 * _0x3386c6,
    23.130691528320312 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    121.50003051757812 * _0x3386c6,
    38.13069152832031 * _0x3386c6,
    121.50003051757812 * _0x3386c6,
    38.13069152832031 * _0x3386c6,
    137.00003051757812 * _0x3386c6,
    53.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    233.00003051757812 * _0x3386c6,
    53.6761474609375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    247.00003051757812 * _0x3386c6,
    37.1761474609375 * _0x3386c6,
    247.00003051757812 * _0x3386c6,
    37.1761474609375 * _0x3386c6,
    261.0000305175781 * _0x3386c6,
    20.6761474609375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    261.0000305175781 * _0x3386c6,
    36.1761474609375 * _0x3386c6,
    261.0000305175781 * _0x3386c6,
    36.1761474609375 * _0x3386c6,
    261.0000305175781 * _0x3386c6,
    51.6761474609375 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    293.0000305175781 * _0x3386c6,
    54.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    300.0000305175781 * _0x3386c6,
    49.903411865234375 * _0x3386c6,
    300.0000305175781 * _0x3386c6,
    49.903411865234375 * _0x3386c6,
    307.0000305175781 * _0x3386c6,
    45.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    307.0000305175781 * _0x3386c6,
    49.903411865234375 * _0x3386c6,
    307.0000305175781 * _0x3386c6,
    49.903411865234375 * _0x3386c6,
    307.0000305175781 * _0x3386c6,
    54.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    77.00003051757812 * _0x3386c6,
    54.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    70.00003051757812 * _0x3386c6,
    50.403411865234375 * _0x3386c6,
    70.00003051757812 * _0x3386c6,
    50.403411865234375 * _0x3386c6,
    63.000030517578125 * _0x3386c6,
    46.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    62.500030517578125 * _0x3386c6,
    50.903411865234375 * _0x3386c6,
    62.500030517578125 * _0x3386c6,
    50.903411865234375 * _0x3386c6,
    62.000030517578125 * _0x3386c6,
    55.403411865234375 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(58.000030517578125 * _0x3386c6, 122.3125 * _0x3386c6);
  _0x1a4b8b.bezierCurveTo(
    59.500030517578125 * _0x3386c6,
    97.3125 * _0x3386c6,
    59.500030517578125 * _0x3386c6,
    97.3125 * _0x3386c6,
    61.000030517578125 * _0x3386c6,
    72.3125 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    91.00003051757812 * _0x3386c6,
    89.3125 * _0x3386c6,
    91.00003051757812 * _0x3386c6,
    89.3125 * _0x3386c6,
    121.00003051757812 * _0x3386c6,
    106.3125 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[1], _0x1185a2[1], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(310.0000305175781 * _0x3386c6, 127.3125 * _0x3386c6);
  _0x1a4b8b.bezierCurveTo(
    308.0000305175781 * _0x3386c6,
    98.3125 * _0x3386c6,
    308.0000305175781 * _0x3386c6,
    98.3125 * _0x3386c6,
    306.0000305175781 * _0x3386c6,
    69.3125 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    274.5000305175781 * _0x3386c6,
    88.8125 * _0x3386c6,
    274.5000305175781 * _0x3386c6,
    88.8125 * _0x3386c6,
    243.00003051757812 * _0x3386c6,
    108.3125 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[1], _0x1185a2[1], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    226.00003051757812 * _0x3386c6,
    87.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    243.50003051757812 * _0x3386c6,
    66.85795593261719 * _0x3386c6,
    243.50003051757812 * _0x3386c6,
    66.85795593261719 * _0x3386c6,
    261.0000305175781 * _0x3386c6,
    45.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    265.0000305175781 * _0x3386c6,
    83.85795593261719 * _0x3386c6,
    265.0000305175781 * _0x3386c6,
    83.85795593261719 * _0x3386c6,
    269.0000305175781 * _0x3386c6,
    121.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    235.00003051757812 * _0x3386c6,
    122.85795593261719 * _0x3386c6,
    233.00003051757812 * _0x3386c6,
    107.85795593261719 * _0x3386c6,
    228.00003051757812 * _0x3386c6,
    90.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    105.00003051757812 * _0x3386c6,
    128.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    104.50003051757812 * _0x3386c6,
    87.85795593261719 * _0x3386c6,
    104.50003051757812 * _0x3386c6,
    87.85795593261719 * _0x3386c6,
    104.00003051757812 * _0x3386c6,
    46.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    126.50003051757812 * _0x3386c6,
    69.35795593261719 * _0x3386c6,
    126.50003051757812 * _0x3386c6,
    69.35795593261719 * _0x3386c6,
    149.00003051757812 * _0x3386c6,
    91.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    130.00003051757812 * _0x3386c6,
    123.85795593261719 * _0x3386c6,
    123.00003051757812 * _0x3386c6,
    132.8579559326172 * _0x3386c6,
    107.00003051757812 * _0x3386c6,
    130.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[1], _0x1185a2[1], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    59.000030517578125 * _0x3386c6,
    121.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    59.500030517578125 * _0x3386c6,
    99.35795593261719 * _0x3386c6,
    59.500030517578125 * _0x3386c6,
    99.35795593261719 * _0x3386c6,
    60.000030517578125 * _0x3386c6,
    76.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    84.00003051757812 * _0x3386c6,
    92.35795593261719 * _0x3386c6,
    84.00003051757812 * _0x3386c6,
    92.35795593261719 * _0x3386c6,
    108.00003051757812 * _0x3386c6,
    107.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    106.00003051757812 * _0x3386c6,
    148.8579559326172 * _0x3386c6,
    86.00003051757812 * _0x3386c6,
    148.8579559326172 * _0x3386c6,
    62.000030517578125 * _0x3386c6,
    123.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    105.00003051757812 * _0x3386c6,
    132.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    104.50003051757812 * _0x3386c6,
    93.35795593261719 * _0x3386c6,
    104.50003051757812 * _0x3386c6,
    93.35795593261719 * _0x3386c6,
    104.00003051757812 * _0x3386c6,
    53.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    126.50003051757812 * _0x3386c6,
    75.85795593261719 * _0x3386c6,
    126.50003051757812 * _0x3386c6,
    75.85795593261719 * _0x3386c6,
    149.00003051757812 * _0x3386c6,
    97.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    311.0000305175781 * _0x3386c6,
    126.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    309.0000305175781 * _0x3386c6,
    101.35795593261719 * _0x3386c6,
    309.0000305175781 * _0x3386c6,
    101.35795593261719 * _0x3386c6,
    307.0000305175781 * _0x3386c6,
    75.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    271.0000305175781 * _0x3386c6,
    96.85795593261719 * _0x3386c6,
    271.0000305175781 * _0x3386c6,
    96.85795593261719 * _0x3386c6,
    235.00003051757812 * _0x3386c6,
    117.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    228.00003051757812 * _0x3386c6,
    96.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    244.50003051757812 * _0x3386c6,
    74.85795593261719 * _0x3386c6,
    244.50003051757812 * _0x3386c6,
    74.85795593261719 * _0x3386c6,
    261.0000305175781 * _0x3386c6,
    52.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    265.5000305175781 * _0x3386c6,
    89.85795593261719 * _0x3386c6,
    265.5000305175781 * _0x3386c6,
    89.85795593261719 * _0x3386c6,
    270.0000305175781 * _0x3386c6,
    126.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    12.000030517578125 * _0x3386c6,
    86.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    36.000030517578125 * _0x3386c6,
    113.13069152832031 * _0x3386c6,
    84.00003051757812 * _0x3386c6,
    111.13069152832031 * _0x3386c6,
    116.00003051757812 * _0x3386c6,
    113.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    164.00003051757812 * _0x3386c6,
    23.130691528320312 * _0x3386c6,
    172.00003051757812 * _0x3386c6,
    18.130691528320312 * _0x3386c6,
    181.00003051757812 * _0x3386c6,
    9.130691528320312 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    199.00003051757812 * _0x3386c6,
    29.130691528320312 * _0x3386c6,
    221.00003051757812 * _0x3386c6,
    78.13069152832031 * _0x3386c6,
    247.00003051757812 * _0x3386c6,
    112.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    301.0000305175781 * _0x3386c6,
    122.13069152832031 * _0x3386c6,
    338.0000305175781 * _0x3386c6,
    111.13069152832031 * _0x3386c6,
    359.0000305175781 * _0x3386c6,
    94.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    359.0000305175781 * _0x3386c6,
    113.13069152832031 * _0x3386c6,
    358.5000305175781 * _0x3386c6,
    105.13069152832031 * _0x3386c6,
    358.0000305175781 * _0x3386c6,
    116.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    270.5000305175781 * _0x3386c6,
    130.1306915283203 * _0x3386c6,
    270.5000305175781 * _0x3386c6,
    130.1306915283203 * _0x3386c6,
    183.00003051757812 * _0x3386c6,
    144.1306915283203 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    98.00003051757812 * _0x3386c6,
    128.6306915283203 * _0x3386c6,
    98.00003051757812 * _0x3386c6,
    128.6306915283203 * _0x3386c6,
    13.000030517578125 * _0x3386c6,
    113.13069152832031 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[1], _0x1185a2[1], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    247.00003051757812 * _0x3386c6,
    115.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    305.0000305175781 * _0x3386c6,
    124.76704406738281 * _0x3386c6,
    335.0000305175781 * _0x3386c6,
    112.76704406738281 * _0x3386c6,
    359.0000305175781 * _0x3386c6,
    93.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    359.5000305175781 * _0x3386c6,
    113.26704406738281 * _0x3386c6,
    359.5000305175781 * _0x3386c6,
    113.26704406738281 * _0x3386c6,
    360.0000305175781 * _0x3386c6,
    132.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    339.0000305175781 * _0x3386c6,
    177.7670440673828 * _0x3386c6,
    281.0000305175781 * _0x3386c6,
    178.7670440673828 * _0x3386c6,
    243.00003051757812 * _0x3386c6,
    183.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    214.50003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    214.50003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    186.00003051757812 * _0x3386c6,
    244.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    155.00003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    155.00003051757812 * _0x3386c6,
    214.2670440673828 * _0x3386c6,
    124.00003051757812 * _0x3386c6,
    183.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    51.000030517578125 * _0x3386c6,
    180.7670440673828 * _0x3386c6,
    21.000030517578125 * _0x3386c6,
    161.7670440673828 * _0x3386c6,
    9.000030517578125 * _0x3386c6,
    129.7670440673828 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    8.500030517578125 * _0x3386c6,
    110.76704406738281 * _0x3386c6,
    8.500030517578125 * _0x3386c6,
    110.76704406738281 * _0x3386c6,
    8.000030517578125 * _0x3386c6,
    91.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    31.000030517578125 * _0x3386c6,
    112.76704406738281 * _0x3386c6,
    87.00003051757812 * _0x3386c6,
    119.76704406738281 * _0x3386c6,
    116.00003051757812 * _0x3386c6,
    117.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    175.00003051757812 * _0x3386c6,
    18.767044067382812 * _0x3386c6,
    170.00003051757812 * _0x3386c6,
    23.767044067382812 * _0x3386c6,
    181.00003051757812 * _0x3386c6,
    14.767044067382812 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    199.00003051757812 * _0x3386c6,
    34.76704406738281 * _0x3386c6,
    203.00003051757812 * _0x3386c6,
    54.76704406738281 * _0x3386c6,
    247.00003051757812 * _0x3386c6,
    115.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    27.000030517578125 * _0x3386c6,
    94.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    11.000030517578125 * _0x3386c6,
    81.76704406738281 * _0x3386c6,
    31.000030517578125 * _0x3386c6,
    72.76704406738281 * _0x3386c6,
    44.000030517578125 * _0x3386c6,
    59.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    9.000030517578125 * _0x3386c6,
    65.76704406738281 * _0x3386c6,
    4.000030517578125 * _0x3386c6,
    78.76704406738281 * _0x3386c6,
    9.000030517578125 * _0x3386c6,
    89.76704406738281 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    352.0000305175781 * _0x3386c6,
    100.76705932617188 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    362.0000305175781 * _0x3386c6,
    92.76705932617188 * _0x3386c6,
    352.0000305175781 * _0x3386c6,
    84.76705932617188 * _0x3386c6,
    340.0000305175781 * _0x3386c6,
    68.76705932617188 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    360.0000305175781 * _0x3386c6,
    69.76705932617188 * _0x3386c6,
    364.0000305175781 * _0x3386c6,
    79.76705932617188 * _0x3386c6,
    364.0000305175781 * _0x3386c6,
    94.76705932617188 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[1], _0x1185a2[1], 1 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    25.000030517578125 * _0x3386c6,
    97.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    2.000030517578125 * _0x3386c6,
    76.94886779785156 * _0x3386c6,
    29.000030517578125 * _0x3386c6,
    62.94886779785156 * _0x3386c6,
    44.000030517578125 * _0x3386c6,
    59.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    8.000030517578125 * _0x3386c6,
    59.94886779785156 * _0x3386c6,
    -0.999969482421875 * _0x3386c6,
    81.94886779785156 * _0x3386c6,
    4.000030517578125 * _0x3386c6,
    92.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[3]);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    349.0000305175781 * _0x3386c6,
    100.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    366.0000305175781 * _0x3386c6,
    82.94886779785156 * _0x3386c6,
    353.0000305175781 * _0x3386c6,
    76.94886779785156 * _0x3386c6,
    337.0000305175781 * _0x3386c6,
    67.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    366.0000305175781 * _0x3386c6,
    69.94886779785156 * _0x3386c6,
    366.0000305175781 * _0x3386c6,
    83.94886779785156 * _0x3386c6,
    363.0000305175781 * _0x3386c6,
    101.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[2], _0x1185a2[3], 10 * _0x3386c6);
  circle(
    _0x1a4b8b,
    46.000030517578125 * _0x3386c6,
    137.5852279663086 * _0x3386c6,
    9.219544457292887 * _0x3386c6
  );
  fill_path(_0x1a4b8b, _0x1185a2[4], _0x1185a2[5], 1 * _0x3386c6);
  circle(
    _0x1a4b8b,
    308.0000305175781 * _0x3386c6,
    141.5852279663086 * _0x3386c6,
    8.54400374531753 * _0x3386c6
  );
  fill_path(_0x1a4b8b, _0x1185a2[4], _0x1185a2[5], 1 * _0x3386c6);
  circle(
    _0x1a4b8b,
    92.00003051757812 * _0x3386c6,
    149.58523559570312 * _0x3386c6,
    14.866068747318506 * _0x3386c6
  );
  fill_path(_0x1a4b8b, _0x1185a2[4], _0x1185a2[5], 1 * _0x3386c6);
  circle(
    _0x1a4b8b,
    262.0000305175781 * _0x3386c6,
    148.8579559326172 * _0x3386c6,
    15.620499351813308 * _0x3386c6
  );
  fill_path(_0x1a4b8b, _0x1185a2[4], _0x1185a2[5], 1 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    184.00003051757812 * _0x3386c6,
    68.85795593261719 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    203.00003051757812 * _0x3386c6,
    108.85795593261719 * _0x3386c6,
    203.00003051757812 * _0x3386c6,
    108.85795593261719 * _0x3386c6,
    222.00003051757812 * _0x3386c6,
    148.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    202.50003051757812 * _0x3386c6,
    177.8579559326172 * _0x3386c6,
    202.50003051757812 * _0x3386c6,
    177.8579559326172 * _0x3386c6,
    183.00003051757812 * _0x3386c6,
    206.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    162.00003051757812 * _0x3386c6,
    178.8579559326172 * _0x3386c6,
    162.00003051757812 * _0x3386c6,
    178.8579559326172 * _0x3386c6,
    141.00003051757812 * _0x3386c6,
    150.8579559326172 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[4], _0x1185a2[5], 10 * _0x3386c6);
  _0x1a4b8b.beginPath();
  _0x1a4b8b.lineCap = "round";
  _0x1a4b8b.lineJoin = "round";
  _0x1a4b8b.moveTo(
    183.00003051757812 * _0x3386c6,
    104.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    192.50003051757812 * _0x3386c6,
    125.44886779785156 * _0x3386c6,
    192.50003051757812 * _0x3386c6,
    125.44886779785156 * _0x3386c6,
    202.00003051757812 * _0x3386c6,
    145.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    192.00003051757812 * _0x3386c6,
    163.94886779785156 * _0x3386c6,
    192.00003051757812 * _0x3386c6,
    163.94886779785156 * _0x3386c6,
    182.00003051757812 * _0x3386c6,
    181.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.bezierCurveTo(
    172.50003051757812 * _0x3386c6,
    164.44886779785156 * _0x3386c6,
    172.50003051757812 * _0x3386c6,
    164.44886779785156 * _0x3386c6,
    163.00003051757812 * _0x3386c6,
    146.94886779785156 * _0x3386c6
  );
  _0x1a4b8b.closePath();
  fill_path(_0x1a4b8b, _0x1185a2[6]);
  return _0x37eb56;
}
function create_background_market() {
  var _0x327c7f = document.createElement("canvas");
  var _0x4464f4 = _0x327c7f.getContext("2d");
  _0x327c7f.width = 460;
  _0x327c7f.height = 220;
  _0x4464f4.fillStyle = "#3a2a0d";
  _0x4464f4.fillRect(0, 0, _0x327c7f.width, _0x327c7f.height);
  _0x4464f4.lineWidth = 4;
  _0x4464f4.beginPath();
  _0x4464f4.strokeStyle = "#513810";
  for (var _0x368565 = 20; _0x368565 < 220; _0x368565 += 20) {
    _0x4464f4.moveTo(0, _0x368565);
    _0x4464f4.lineTo(460, _0x368565);
    _0x4464f4.closePath();
    _0x4464f4.stroke();
  }
  return _0x327c7f;
}
function create_gauges(_0x4131e5) {
  var _0x1557b0 = document.createElement("canvas");
  var _0x577ea2 = _0x1557b0.getContext("2d");
  var _0xfa83e2 = 950 * _0x4131e5;
  var _0x46ab47 = 180 * _0x4131e5;
  var _0x5f5ace = 50 * _0x4131e5;
  var _0x24962e = 20 * _0x4131e5;
  var _0x158db7 = 240 * _0x4131e5;
  var _0x10e4be = 35 * _0x4131e5;
  var _0x437471 = 1 * _0x4131e5;
  var _0x22a212 = 4 * _0x4131e5;
  var _0xeee5ca = 4 * _0x4131e5;
  _0x1557b0.width = _0xfa83e2;
  _0x1557b0.height = _0x5f5ace;
  _0x577ea2.translate(0, 15 * _0x4131e5);
  round_rect(_0x577ea2, _0x10e4be, _0x437471, _0x46ab47, _0x24962e, _0x22a212);
  fill_path(_0x577ea2, null, "#69A148", _0xeee5ca);
  var _0x37aed9 = sprite[SPRITE.HEART_SYMBOL_HUD];
  _0x577ea2.drawImage(_0x37aed9, 17, -8);
  _0x577ea2.translate(_0x158db7, 0);
  round_rect(_0x577ea2, _0x10e4be, _0x437471, _0x46ab47, _0x24962e, _0x22a212);
  fill_path(_0x577ea2, null, "#AF352A", _0xeee5ca);
  var _0x37aed9 = sprite[SPRITE.FOOD_SYMBOL_HUD];
  _0x577ea2.drawImage(_0x37aed9, 17, -9);
  _0x577ea2.translate(_0x158db7, 0);
  round_rect(_0x577ea2, _0x10e4be, _0x437471, _0x46ab47, _0x24962e, _0x22a212);
  fill_path(_0x577ea2, null, "#669BB1", _0xeee5ca);
  var _0x37aed9 = sprite[SPRITE.COLD_SYMBOL_HUD];
  _0x577ea2.drawImage(_0x37aed9, 17, -8);
  _0x577ea2.translate(_0x158db7, 0);
  round_rect(_0x577ea2, _0x10e4be, _0x437471, _0x46ab47, _0x24962e, _0x22a212);
  fill_path(_0x577ea2, null, "#074A87", _0xeee5ca);
  var _0x37aed9 = sprite[SPRITE.WATER_SYMBOL_HUD];
  _0x577ea2.drawImage(_0x37aed9, 17, -8);
  return _0x1557b0;
}
// function _load_images() {
//   var t = new Date().getTime();
//   render_cosmetics();
//   function f1(e) {
//     var e = 0;
//     for (var i = 0, j = 0; i < e.length; i++) {
//       var b = e.charAt(i);
//       if (b === "_" || i === 5) {
//         continue;
//       }
//       if (b === "1") {
//         e += Math.pow(2, j);
//       }
//       j++;
//     }
//     return e;
//   }
//   sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN];
//   sprite[SPRITE.REIDITE_SPIKE] = [];
//   sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED;
//   sprite[SPRITE.RIVER_DECO] = [];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = [];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_010_000")] = [
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_010_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_010_000")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_011_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_010_000")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_011_010")] = [
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_011_011")] = [
//     IMAGES.DAY_RIVER_COMPO4,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_110_000")] = [
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_110_010")] = [
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO27,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_110_110")] = [
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO8,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO27,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_111_000")] = [
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_111_111")] = [
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO4,
//     IMAGES.DAY_RIVER_COMPO13,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_010_000")] = [
//     IMAGES.DAY_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_010_010")] = [
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_011_000")] = [
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO26,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_000")] = [
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")] = [
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_011_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_011_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_111_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_111_111")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("000_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_011_000")] = [
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO26,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_011_010")] = [
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_011_011")] = [
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO4,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO15,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_011_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_010")] = [
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("011_111_111")] = [
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO4,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_110_000")] = [
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO12,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_110_010")] = [
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_110_110")] = [
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_000")] = [
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO12,
//     IMAGES.DAY_RIVER_COMPO14,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_110")] = [
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO14,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_111")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_110")] = [
//     IMAGES.DAY_RIVER_COMPO28,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO14,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO1,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_000")] = [
//     IMAGES.DAY_RIVER_COMPO12,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO14,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_111")] = [
//     IMAGES.DAY_RIVER_COMPO1,
//     IMAGES.DAY_RIVER_COMPO2,
//     IMAGES.DAY_RIVER_COMPO3,
//     IMAGES.DAY_RIVER_COMPO4,
//     IMAGES.DAY_RIVER_COMPO5,
//     IMAGES.DAY_RIVER_COMPO6,
//     IMAGES.DAY_RIVER_COMPO7,
//     IMAGES.DAY_RIVER_COMPO9,
//     IMAGES.DAY_RIVER_COMPO10,
//     IMAGES.DAY_RIVER_COMPO11,
//     IMAGES.DAY_RIVER_COMPO13,
//     IMAGES.DAY_RIVER_COMPO15,
//     IMAGES.DAY_RIVER_COMPO16,
//     IMAGES.DAY_RIVER_COMPO17,
//     IMAGES.DAY_RIVER_COMPO18,
//     IMAGES.DAY_RIVER_COMPO19,
//     IMAGES.DAY_RIVER_COMPO20,
//     IMAGES.DAY_RIVER_COMPO21,
//     IMAGES.DAY_RIVER_COMPO22,
//     IMAGES.DAY_RIVER_COMPO23,
//     IMAGES.DAY_RIVER_COMPO24,
//     IMAGES.DAY_RIVER_COMPO25,
//     IMAGES.DAY_RIVER_COMPO26,
//     IMAGES.DAY_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.DAY][f1("111_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = [];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_010_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_010_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_010_000")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_011_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_010_000")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_011_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_011_011")] = [
//     IMAGES.NIGHT_RIVER_COMPO4,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_110_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_110_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO27,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_110_110")] = [
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO8,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO27,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_111_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_111_111")] = [
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO4,
//     IMAGES.NIGHT_RIVER_COMPO13,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_010_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO20,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_010_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_011_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO26,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")] = [
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_011_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_011_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_111_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_111_111")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("000_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("010_110_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_011_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO26,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_011_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_011_011")] = [
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO4,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO15,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_000")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_011_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_110")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_010")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("011_111_111")] = [
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO4,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_110_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO12,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_110_010")] = [
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_110_110")] = [
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO12,
//     IMAGES.NIGHT_RIVER_COMPO14,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_110")] = [
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO14,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_111")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("110_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_110")] = [
//     IMAGES.NIGHT_RIVER_COMPO28,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO14,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO1,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_011")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_110")];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_000")] = [
//     IMAGES.NIGHT_RIVER_COMPO12,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO14,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_111")] = [
//     IMAGES.NIGHT_RIVER_COMPO1,
//     IMAGES.NIGHT_RIVER_COMPO2,
//     IMAGES.NIGHT_RIVER_COMPO3,
//     IMAGES.NIGHT_RIVER_COMPO4,
//     IMAGES.NIGHT_RIVER_COMPO5,
//     IMAGES.NIGHT_RIVER_COMPO6,
//     IMAGES.NIGHT_RIVER_COMPO7,
//     IMAGES.NIGHT_RIVER_COMPO9,
//     IMAGES.NIGHT_RIVER_COMPO10,
//     IMAGES.NIGHT_RIVER_COMPO11,
//     IMAGES.NIGHT_RIVER_COMPO13,
//     IMAGES.NIGHT_RIVER_COMPO15,
//     IMAGES.NIGHT_RIVER_COMPO16,
//     IMAGES.NIGHT_RIVER_COMPO17,
//     IMAGES.NIGHT_RIVER_COMPO18,
//     IMAGES.NIGHT_RIVER_COMPO19,
//     IMAGES.NIGHT_RIVER_COMPO20,
//     IMAGES.NIGHT_RIVER_COMPO21,
//     IMAGES.NIGHT_RIVER_COMPO22,
//     IMAGES.NIGHT_RIVER_COMPO23,
//     IMAGES.NIGHT_RIVER_COMPO24,
//     IMAGES.NIGHT_RIVER_COMPO25,
//     IMAGES.NIGHT_RIVER_COMPO26,
//     IMAGES.NIGHT_RIVER_COMPO28,
//   ];
//   sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_010")] =
//     sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][f1("111_111_110")];
//   sprite[SPRITE.RIVER] = [];
//   sprite[SPRITE.RIVER][SPRITE.DAY] = [];
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_010_000")] =
//     IMAGES.DAY_RIVER_000_010_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_010_010")] =
//     IMAGES.DAY_RIVER_000_010_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_011_000")] =
//     IMAGES.DAY_RIVER_000_011_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_011_010")] =
//     IMAGES.DAY_RIVER_000_011_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_011_011")] =
//     IMAGES.DAY_RIVER_000_011_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_110_000")] =
//     IMAGES.DAY_RIVER_000_110_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_110_010")] =
//     IMAGES.DAY_RIVER_000_110_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_110_110")] =
//     IMAGES.DAY_RIVER_000_110_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_111_000")] =
//     IMAGES.DAY_RIVER_000_111_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_111_010")] =
//     IMAGES.DAY_RIVER_000_111_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_111_011")] =
//     IMAGES.DAY_RIVER_000_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_111_110")] =
//     IMAGES.DAY_RIVER_000_111_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("000_111_111")] =
//     IMAGES.DAY_RIVER_000_111_111;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_010_000")] =
//     IMAGES.DAY_RIVER_010_010_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_010_010")] =
//     IMAGES.DAY_RIVER_010_010_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_011_000")] =
//     IMAGES.DAY_RIVER_010_011_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_011_010")] =
//     IMAGES.DAY_RIVER_010_011_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_011_011")] =
//     IMAGES.DAY_RIVER_010_011_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_110_000")] =
//     IMAGES.DAY_RIVER_010_110_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_110_010")] =
//     IMAGES.DAY_RIVER_010_110_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_110_110")] =
//     IMAGES.DAY_RIVER_010_110_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_111_000")] =
//     IMAGES.DAY_RIVER_010_111_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_111_010")] =
//     IMAGES.DAY_RIVER_010_111_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_111_011")] =
//     IMAGES.DAY_RIVER_010_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_111_110")] =
//     IMAGES.DAY_RIVER_010_111_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("010_111_111")] =
//     IMAGES.DAY_RIVER_010_111_111;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_011_000")] =
//     IMAGES.DAY_RIVER_011_011_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_011_010")] =
//     IMAGES.DAY_RIVER_011_011_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_011_011")] =
//     IMAGES.DAY_RIVER_011_011_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_111_000")] =
//     IMAGES.DAY_RIVER_011_111_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_111_010")] =
//     IMAGES.DAY_RIVER_011_111_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_111_011")] =
//     IMAGES.DAY_RIVER_011_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_111_110")] =
//     IMAGES.DAY_RIVER_011_111_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("011_111_111")] =
//     IMAGES.DAY_RIVER_011_111_111;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_110_000")] =
//     IMAGES.DAY_RIVER_110_110_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_110_010")] =
//     IMAGES.DAY_RIVER_110_110_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_110_110")] =
//     IMAGES.DAY_RIVER_110_110_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_111_000")] =
//     IMAGES.DAY_RIVER_110_111_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_111_010")] =
//     IMAGES.DAY_RIVER_110_111_010;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_111_011")] =
//     IMAGES.DAY_RIVER_110_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_111_110")] =
//     IMAGES.DAY_RIVER_110_111_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("110_111_111")] =
//     IMAGES.DAY_RIVER_110_111_111;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_011")] =
//     IMAGES.DAY_RIVER_111_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_110")] =
//     IMAGES.DAY_RIVER_111_111_110;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_011")] =
//     IMAGES.DAY_RIVER_111_111_011;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_000")] =
//     IMAGES.DAY_RIVER_111_111_000;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_111")] =
//     IMAGES.DAY_RIVER_111_111_111;
//   sprite[SPRITE.RIVER][SPRITE.DAY][f1("111_111_010")] =
//     IMAGES.DAY_RIVER_111_111_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT] = [];
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_010_000")] =
//     IMAGES.NIGHT_RIVER_000_010_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_010_010")] =
//     IMAGES.NIGHT_RIVER_000_010_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_011_000")] =
//     IMAGES.NIGHT_RIVER_000_011_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_011_010")] =
//     IMAGES.NIGHT_RIVER_000_011_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_011_011")] =
//     IMAGES.NIGHT_RIVER_000_011_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_110_000")] =
//     IMAGES.NIGHT_RIVER_000_110_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_110_010")] =
//     IMAGES.NIGHT_RIVER_000_110_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_110_110")] =
//     IMAGES.NIGHT_RIVER_000_110_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_111_000")] =
//     IMAGES.NIGHT_RIVER_000_111_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_111_010")] =
//     IMAGES.NIGHT_RIVER_000_111_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_111_011")] =
//     IMAGES.NIGHT_RIVER_000_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_111_110")] =
//     IMAGES.NIGHT_RIVER_000_111_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("000_111_111")] =
//     IMAGES.NIGHT_RIVER_000_111_111;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_010_000")] =
//     IMAGES.NIGHT_RIVER_010_010_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_010_010")] =
//     IMAGES.NIGHT_RIVER_010_010_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_011_000")] =
//     IMAGES.NIGHT_RIVER_010_011_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_011_010")] =
//     IMAGES.NIGHT_RIVER_010_011_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_011_011")] =
//     IMAGES.NIGHT_RIVER_010_011_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_110_000")] =
//     IMAGES.NIGHT_RIVER_010_110_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_110_010")] =
//     IMAGES.NIGHT_RIVER_010_110_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_110_110")] =
//     IMAGES.NIGHT_RIVER_010_110_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_111_000")] =
//     IMAGES.NIGHT_RIVER_010_111_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_111_010")] =
//     IMAGES.NIGHT_RIVER_010_111_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_111_011")] =
//     IMAGES.NIGHT_RIVER_010_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_111_110")] =
//     IMAGES.NIGHT_RIVER_010_111_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("010_111_111")] =
//     IMAGES.NIGHT_RIVER_010_111_111;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_011_000")] =
//     IMAGES.NIGHT_RIVER_011_011_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_011_010")] =
//     IMAGES.NIGHT_RIVER_011_011_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_011_011")] =
//     IMAGES.NIGHT_RIVER_011_011_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_111_000")] =
//     IMAGES.NIGHT_RIVER_011_111_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_111_010")] =
//     IMAGES.NIGHT_RIVER_011_111_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_111_011")] =
//     IMAGES.NIGHT_RIVER_011_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_111_110")] =
//     IMAGES.NIGHT_RIVER_011_111_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("011_111_111")] =
//     IMAGES.NIGHT_RIVER_011_111_111;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_110_000")] =
//     IMAGES.NIGHT_RIVER_110_110_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_110_010")] =
//     IMAGES.NIGHT_RIVER_110_110_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_110_110")] =
//     IMAGES.NIGHT_RIVER_110_110_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_111_000")] =
//     IMAGES.NIGHT_RIVER_110_111_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_111_010")] =
//     IMAGES.NIGHT_RIVER_110_111_010;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_111_011")] =
//     IMAGES.NIGHT_RIVER_110_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_111_110")] =
//     IMAGES.NIGHT_RIVER_110_111_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("110_111_111")] =
//     IMAGES.NIGHT_RIVER_110_111_111;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_011")] =
//     IMAGES.NIGHT_RIVER_111_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_110")] =
//     IMAGES.NIGHT_RIVER_111_111_110;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_011")] =
//     IMAGES.NIGHT_RIVER_111_111_011;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_000")] =
//     IMAGES.NIGHT_RIVER_111_111_000;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_111")] =
//     IMAGES.NIGHT_RIVER_111_111_111;
//   sprite[SPRITE.RIVER][SPRITE.NIGHT][f1("111_111_010")] =
//     IMAGES.NIGHT_RIVER_111_111_010;
//   sprite[SPRITE.PICK_REIDITE] = [];
//   sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED;
//   sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN;
//   sprite[SPRITE.CARROT] = [];
//   sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD;
//   sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN;
//   sprite[SPRITE.TOMATO_MINI] = [];
//   sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID;
//   sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ;
//   sprite[SPRITE.TOMATO] = [];
//   sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD;
//   sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON;
//   sprite[SPRITE.DRIED_CARROT] = [];
//   sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD;
//   sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN;
//   sprite[SPRITE.DRIED_TOMATO_MINI] = [];
//   sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD;
//   sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN;
//   sprite[SPRITE.WATERMELON] = [];
//   sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND;
//   sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN;
//   sprite[SPRITE.DRIED_WATERMELON] = [];
//   sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND;
//   sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN;
//   sprite[SPRITE.ALOE_VERA_GROWN] = [];
//   sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND;
//   sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN;
//   sprite[SPRITE.DRIED_ALOE_VERA] = [];
//   sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD;
//   sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN;
//   sprite[SPRITE.CACTUS] = [];
//   sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD];
//   sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN];
//   (sprite[SPRITE.REIDITE_WALL] = []),
//     (sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD);
//   sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN;
//   (sprite[SPRITE.REIDITE_SPIKE] = []),
//     (sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_SPIKED);
//   sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_SPIKEN;
//   sprite[SPRITE.REIDITE_DOOR] = [];
//   sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD;
//   sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN;
//   sprite[SPRITE.WOOD_DOOR_SPIKE] = [];
//   sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED;
//   sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN;
//   sprite[SPRITE.STONE_DOOR_SPIKE] = [];
//   sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED;
//   sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN;
//   sprite[SPRITE.GOLD_DOOR_SPIKE] = [];
//   sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED;
//   sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN;
//   sprite[SPRITE.DIAMOND_DOOR_SPIKE] = [];
//   sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED;
//   sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.DIAMOND_DOOR_SPIKEN;
//   sprite[SPRITE.AMETHYST_DOOR_SPIKE] = [];
//   sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] = IMAGES.AMETHYST_DOOR_SPIKED;
//   sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] =
//     IMAGES.AMETHYST_DOOR_SPIKEN;
//   sprite[SPRITE.REIDITE_DOOR_SPIKE] = [];
//   sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED;
//   sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.REIDITE_DOOR_SPIKEN;
//   sprite[SPRITE.GOLDEN_HEN] = [];
//   sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND;
//   sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN;
//   sprite[SPRITE.GOLDEN_CHICKEN] = [];
//   sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND;
//   sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN;
//   sprite[SPRITE.HAMMER_REIDITE] = [];
//   sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED;
//   sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN;
//   sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN;
//   sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN;
//   sprite[SPRITE.FOG] = [];
//   sprite[SPRITE.FOG][SPRITE.DAY] = [];
//   sprite[SPRITE.FOG][SPRITE.NIGHT] = [];
//   sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D);
//   sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D);
//   sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D);
//   sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N);
//   sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N);
//   sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N);
//   sprite[SPRITE.FOD] = [];
//   sprite[SPRITE.FOD][SPRITE.DAY] = [];
//   sprite[SPRITE.FOD][SPRITE.NIGHT] = [];
//   sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D);
//   sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D);
//   sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D);
//   sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N);
//   sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N);
//   sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N);
//   sprite[SPRITE.MARKER] = [];
//   sprite[SPRITE.MARKER][SPRITE.DAY] = [];
//   sprite[SPRITE.MARKER][SPRITE.NIGHT] = [];
//   sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D);
//   sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D);
//   sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D);
//   sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D);
//   sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N);
//   sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N);
//   sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N);
//   sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N);
//   sprite[SPRITE.LAVA_DRAGON] = [];
//   sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND;
//   sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN;
//   sprite[SPRITE.LAVA_WING_LEFT] = [];
//   sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD;
//   sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN;
//   sprite[SPRITE.LAVA_WING_RIGHT] = [];
//   sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD;
//   sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN;
//   sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON;
//   sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT;
//   sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT;
//   sprite[SPRITE.DIAMOND_PROTECTION] = [];
//   sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND;
//   sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] = IMAGES.DIAMOND_PROTECTIONN;
//   sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = [];
//   sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] =
//     IMAGES.HAND_DIAMOND_PROTECTIOND;
//   sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] =
//     IMAGES.HAND_DIAMOND_PROTECTIONN;
//   sprite[SPRITE.AMETHYST_PROTECTION] = [];
//   sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] = IMAGES.AMETHYST_PROTECTIOND;
//   sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] =
//     IMAGES.AMETHYST_PROTECTIONN;
//   sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = [];
//   sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] =
//     IMAGES.HAND_DIAMOND_PROTECTIOND;
//   sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] =
//     IMAGES.HAND_DIAMOND_PROTECTIONN;
//   sprite[SPRITE.REIDITE_HELMET] = [];
//   sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD;
//   sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN;
//   sprite[SPRITE.REIDITE_SWORD] = [];
//   sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD;
//   sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN;
//   sprite[SPRITE.REIDITE_SPEAR] = [];
//   sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD;
//   sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN;
//   sprite[SPRITE.LAVA_SPEAR] = [];
//   sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD;
//   sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN;
//   sprite[SPRITE.LAVA_SWORD] = [];
//   sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD;
//   sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN;
//   sprite[SPRITE.LAVA_HELMET] = [];
//   sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD;
//   sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN;
//   sprite[SPRITE.WITCH] = [];
//   sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD;
//   sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN;
//   sprite[SPRITE.NIMBUS] = [];
//   sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD;
//   sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN;
//   sprite[SPRITE.WOOD_SHIELD] = [];
//   sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD;
//   sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN;
//   sprite[SPRITE.STONE_SHIELD] = [];
//   sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD;
//   sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN;
//   sprite[SPRITE.GOLD_SHIELD] = [];
//   sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD;
//   sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN;
//   sprite[SPRITE.DIAMOND_SHIELD] = [];
//   sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD;
//   sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN;
//   sprite[SPRITE.AMETHYST_SHIELD] = [];
//   sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD;
//   sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN;
//   sprite[SPRITE.REIDITE_SHIELD] = [];
//   sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD;
//   sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN;
//   sprite[SPRITE.WOOD_ARROW] = [];
//   sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD;
//   sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN;
//   sprite[SPRITE.WOOD_BOW] = [];
//   sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD;
//   sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN;
//   sprite[SPRITE.STONE_ARROW] = [];
//   sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD;
//   sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN;
//   sprite[SPRITE.STONE_BOW] = [];
//   sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD;
//   sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN;
//   sprite[SPRITE.GOLD_ARROW] = [];
//   sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD;
//   sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN;
//   sprite[SPRITE.GOLD_BOW] = [];
//   sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD;
//   sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN;
//   sprite[SPRITE.DIAMOND_ARROW] = [];
//   sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD;
//   sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN;
//   sprite[SPRITE.DIAMOND_BOW] = [];
//   sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD;
//   sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN;
//   sprite[SPRITE.AMETHYST_ARROW] = [];
//   sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD;
//   sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN;
//   sprite[SPRITE.AMETHYST_BOW] = [];
//   sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD;
//   sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN;
//   sprite[SPRITE.REIDITE_ARROW] = [];
//   sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD;
//   sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN;
//   sprite[SPRITE.REIDITE_BOW] = [];
//   sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD;
//   sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN;
//   sprite[SPRITE.DRAGON_ARROW] = [];
//   sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD;
//   sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN;
//   sprite[SPRITE.DRAGON_BOW] = [];
//   sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD;
//   sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN;
//   sprite[SPRITE.TURBAN1] = [];
//   sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D;
//   sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N;
//   sprite[SPRITE.TURBAN2] = [];
//   sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D;
//   sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N;
//   sprite[SPRITE.REIDITE_PROTECTION] = [];
//   sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND;
//   sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] = IMAGES.REIDITE_PROTECTIONN;
//   sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = [];
//   sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] =
//     IMAGES.HAND_REIDITE_PROTECTIOND;
//   sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] =
//     IMAGES.HAND_REIDITE_PROTECTIONN;
//   sprite[SPRITE.LAVA_SHINGLE] = [];
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = [];
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D);
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D);
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D);
//   sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N);
//   sprite[SPRITE.LAVA_BUBBLE] = [];
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = [];
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D);
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D);
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D);
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N);
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N);
//   sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N);
//   sprite[SPRITE.PITCHFORK] = [];
//   sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD;
//   sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN;
//   sprite[SPRITE.PITCHFORK2] = [];
//   sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D;
//   sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N;
//   sprite[SPRITE.EMERALD] = [];
//   sprite[SPRITE.EMERALD][SPRITE.DAY] = [];
//   sprite[SPRITE.EMERALD][SPRITE.NIGHT] = [];
//   sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D);
//   sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D);
//   sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D);
//   sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N);
//   sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N);
//   sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N);
//   sprite[SPRITE.REIDITE] = [];
//   sprite[SPRITE.REIDITE][SPRITE.DAY] = [];
//   sprite[SPRITE.REIDITE][SPRITE.NIGHT] = [];
//   sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D);
//   sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D);
//   sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D);
//   sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N);
//   sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N);
//   sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N);
//   sprite[SPRITE.MAGMA] = [];
//   sprite[SPRITE.MAGMA][SPRITE.DAY] = [];
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT] = [];
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D);
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D);
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D);
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D);
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D);
//   sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N);
//   sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N);
//   sprite[SPRITE.LAVA_GROUND] = [];
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = [];
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N);
//   sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N);
//   sprite[SPRITE.FIRE_MOB] = [];
//   sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD;
//   sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN;
//   sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT;
//   sprite[SPRITE.MACHETE] = [];
//   sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED;
//   sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN;
//   sprite[SPRITE.BOAT] = [];
//   sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD;
//   sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN;
//   sprite[SPRITE.SLED] = [];
//   sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD;
//   sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN;
//   sprite[SPRITE.PLANE] = [];
//   sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED;
//   sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN;
//   sprite[SPRITE.PENGUIN] = [];
//   sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND;
//   sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN;
//   sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN;
//   sprite[SPRITE.SAND_WORM1] = [];
//   sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D;
//   sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N;
//   sprite[SPRITE.SAND_WORM2] = [];
//   sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D;
//   sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N;
//   sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0;
//   sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1;
//   sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2;
//   sprite[SPRITE.SCORPION] = [];
//   sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND;
//   sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN;
//   sprite[SPRITE.SCORPION_HAND_LEFT] = [];
//   sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD;
//   sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] = IMAGES.SCORPION_HAND_LEFTN;
//   sprite[SPRITE.SCORPION_HAND_RIGHT] = [];
//   sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] = IMAGES.SCORPION_HAND_RIGHTD;
//   sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] =
//     IMAGES.SCORPION_HAND_RIGHTN;
//   sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION;
//   sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT;
//   sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT;
//   sprite[SPRITE.CRAB_BOSS_ATTACK] = [];
//   sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD;
//   sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN;
//   sprite[SPRITE.CRAB_BOSS_TAMED] = [];
//   sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD;
//   sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN;
//   sprite[SPRITE.CRAB_BOSS] = [];
//   sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD;
//   sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN;
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = [];
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] = IMAGES.CRAB_BOSS_CLAW_LEFTD;
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] =
//     IMAGES.CRAB_BOSS_CLAW_LEFTN;
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = [];
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] =
//     IMAGES.CRAB_BOSS_CLAW_RIGHTD;
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] =
//     IMAGES.CRAB_BOSS_CLAW_RIGHTN;
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = [];
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] =
//     IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD;
//   sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN;
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = [];
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] =
//     IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD;
//   sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN;
//   sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS;
//   sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT;
//   sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT;
//   sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS;
//   sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT;
//   sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT;
//   sprite[SPRITE.BABY_MAMMOTH_ATTACK] = [];
//   sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_ATTACKD;
//   sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] =
//     IMAGES.BABY_MAMMOTH_ATTACKN;
//   sprite[SPRITE.BABY_MAMMOTH] = [];
//   sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD;
//   sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN;
//   sprite[SPRITE.MAMMOTH] = [];
//   sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD;
//   sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN;
//   sprite[SPRITE.BABY_MAMMOTH_TAMED] = [];
//   sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD;
//   sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_TAMEDN;
//   sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH;
//   sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH;
//   sprite[SPRITE.BABY_DRAGON_ATTACK] = [];
//   sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD;
//   sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_ATTACKN;
//   sprite[SPRITE.BABY_DRAGON] = [];
//   sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND;
//   sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN;
//   sprite[SPRITE.BABY_DRAGON_TAMED] = [];
//   sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD;
//   sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_LEFTD;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_LEFTN;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_RIGHTD;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_RIGHTN;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD;
//   sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = [];
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] =
//     IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD;
//   sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] =
//     IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN;
//   sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON;
//   sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] = IMAGES.HURT_BABY_DRAGON_WING_LEFT;
//   sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] =
//     IMAGES.HURT_BABY_DRAGON_WING_RIGHT;
//   sprite[SPRITE.BABY_LAVA_ATTACK] = [];
//   sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD;
//   sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN;
//   sprite[SPRITE.BABY_LAVA] = [];
//   sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD;
//   sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN;
//   sprite[SPRITE.BABY_LAVA_TAMED] = [];
//   sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD;
//   sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT] = [];
//   sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.BABY_LAVA_WING_LEFTD;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_LEFTN;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT] = [];
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] =
//     IMAGES.BABY_LAVA_WING_RIGHTD;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_RIGHTN;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = [];
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] =
//     IMAGES.BABY_LAVA_WING_LEFT_ATTACKD;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_LEFT_ATTACKN;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = [];
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] =
//     IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = [];
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] =
//     IMAGES.BABY_LAVA_WING_LEFT_TAMEDD;
//   sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_LEFT_TAMEDN;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = [];
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] =
//     IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD;
//   sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] =
//     IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN;
//   sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA;
//   sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT;
//   sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT;
//   sprite[SPRITE.HAWK_ATTACK] = [];
//   sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD;
//   sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN;
//   sprite[SPRITE.HAWK] = [];
//   sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD;
//   sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN;
//   sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND;
//   sprite[SPRITE.HAWK_GROUND] = [];
//   sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD;
//   sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN;
//   sprite[SPRITE.HAWK_GROUND_ATTACK] = [];
//   sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD;
//   sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_GROUND_ATTACKN;
//   sprite[SPRITE.HAWK_TAMED] = [];
//   sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD;
//   sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN;
//   sprite[SPRITE.HAWK_WING_LEFT] = [];
//   sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD;
//   sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN;
//   sprite[SPRITE.HAWK_WING_RIGHT] = [];
//   sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD;
//   sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN;
//   sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = [];
//   sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] =
//     IMAGES.HAWK_WING_LEFT_ATTACKD;
//   sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.HAWK_WING_LEFT_ATTACKN;
//   sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = [];
//   sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] =
//     IMAGES.HAWK_WING_RIGHT_ATTACKD;
//   sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.HAWK_WING_RIGHT_ATTACKN;
//   sprite[SPRITE.HAWK_WING_LEFT_TAMED] = [];
//   sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] =
//     IMAGES.HAWK_WING_LEFT_TAMEDD;
//   sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] =
//     IMAGES.HAWK_WING_LEFT_TAMEDN;
//   sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = [];
//   sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] =
//     IMAGES.HAWK_WING_RIGHT_TAMEDD;
//   sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] =
//     IMAGES.HAWK_WING_RIGHT_TAMEDN;
//   sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK;
//   sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT;
//   sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT;
//   sprite[SPRITE.VULTURE_ATTACK] = [];
//   sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD;
//   sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN;
//   sprite[SPRITE.VULTURE] = [];
//   sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED;
//   sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN;
//   sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND;
//   sprite[SPRITE.VULTURE_GROUND] = [];
//   sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD;
//   sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN;
//   sprite[SPRITE.VULTURE_GROUND_ATTACK] = [];
//   sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] =
//     IMAGES.VULTURE_GROUND_ATTACKD;
//   sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] =
//     IMAGES.VULTURE_GROUND_ATTACKN;
//   sprite[SPRITE.VULTURE_TAMED] = [];
//   sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD;
//   sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN;
//   sprite[SPRITE.VULTURE_WING_LEFT] = [];
//   sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD;
//   sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN;
//   sprite[SPRITE.VULTURE_WING_RIGHT] = [];
//   sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD;
//   sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_RIGHTN;
//   sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = [];
//   sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] =
//     IMAGES.VULTURE_WING_LEFT_ATTACKD;
//   sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.VULTURE_WING_LEFT_ATTACKN;
//   sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = [];
//   sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] =
//     IMAGES.VULTURE_WING_RIGHT_ATTACKD;
//   sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
//     IMAGES.VULTURE_WING_RIGHT_ATTACKN;
//   sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = [];
//   sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] =
//     IMAGES.VULTURE_WING_LEFT_TAMEDD;
//   sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] =
//     IMAGES.VULTURE_WING_LEFT_TAMEDN;
//   sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = [];
//   sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] =
//     IMAGES.VULTURE_WING_RIGHT_TAMEDD;
//   sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] =
//     IMAGES.VULTURE_WING_RIGHT_TAMEDN;
//   sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE;
//   sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT;
//   sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT;
//   sprite[SPRITE.BOAR] = [];
//   sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD;
//   sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN;
//   sprite[SPRITE.BOAR_TAMED] = [];
//   sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD;
//   sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN;
//   sprite[SPRITE.BOAR_ATTACK] = [];
//   sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD;
//   sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN;
//   sprite[SPRITE.BOAR_STEP] = [];
//   sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP;
//   sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP;
//   sprite[SPRITE.CRAB_STEP] = [];
//   sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP;
//   sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP;
//   sprite[SPRITE.BABY_MAMMOTH_STEP] = [];
//   sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP;
//   sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP;
//   sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR;
//   sprite[SPRITE.SADDLE] = [];
//   sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED;
//   sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN;
//   sprite[SPRITE.WAND1] = [];
//   sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D;
//   sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N;
//   sprite[SPRITE.SPELL] = [];
//   sprite[SPRITE.SPELL][SPRITE.DAY] = [
//     IMAGES.LIGHT_WAND0D,
//     IMAGES.LIGHT_WAND1D,
//     IMAGES.WOOD_ARROWD,
//     IMAGES.STONE_ARROWD,
//     IMAGES.GOLD_ARROWD,
//     IMAGES.DIAMOND_ARROWD,
//     IMAGES.AMETHYST_ARROWD,
//     IMAGES.REIDITE_ARROWD,
//     IMAGES.DRAGON_ARROWD,
//   ];
//   sprite[SPRITE.SPELL][SPRITE.NIGHT] = [
//     IMAGES.LIGHT_WAND0N,
//     IMAGES.LIGHT_WAND1N,
//     IMAGES.WOOD_ARROWN,
//     IMAGES.STONE_ARROWN,
//     IMAGES.GOLD_ARROWN,
//     IMAGES.DIAMOND_ARROWN,
//     IMAGES.AMETHYST_ARROWN,
//     IMAGES.REIDITE_ARROWD,
//     IMAGES.DRAGON_ARROWN,
//   ];
//   sprite[SPRITE.WAND2] = [];
//   sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D;
//   sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N;
//   sprite[SPRITE.BOAT_WAVE] = [];
//   sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED;
//   sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN;
//   sprite[SPRITE.SLED_WAVE] = [];
//   sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED;
//   sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN;
//   sprite[SPRITE.PIRATE_HAT] = [];
//   sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD;
//   sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN;
//   sprite[SPRITE.FUR_HAT] = [];
//   sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD;
//   sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN;
//   sprite[SPRITE.FLOWER_HAT] = [];
//   sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD;
//   sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN;
//   sprite[SPRITE.PILOT_HELMET] = [];
//   sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD;
//   sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN;
//   sprite[SPRITE.LAKE_EDGE] = [];
//   sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = [];
//   sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE);
//   sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE);
//   sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE);
//   sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE);
//   sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE);
//   sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE);
//   sprite[SPRITE.LAKE_DEEP] = [];
//   sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = [];
//   sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP);
//   sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP);
//   sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP);
//   sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP);
//   sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP);
//   sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP);
//   sprite[SPRITE.LAKE] = [];
//   sprite[SPRITE.LAKE][SPRITE.DAY] = [];
//   sprite[SPRITE.LAKE][SPRITE.NIGHT] = [];
//   sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D);
//   sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D);
//   sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D);
//   sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N);
//   sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N);
//   sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N);
//   MINIMAP_UTILS.g = [];
//   MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1];
//   MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0];
//   MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2];
//   MINIMAP_UTILS.m = [];
//   MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1];
//   MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0];
//   MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2];
//   MINIMAP_UTILS.la = [];
//   MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA];
//   MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0];
//   MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0];
//   MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0];
//   MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0];
//   MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0];
//   MINIMAP_UTILS.s = [];
//   MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1];
//   MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0];
//   MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2];
//   MINIMAP_UTILS.p = [];
//   MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY];
//   MINIMAP_UTILS.a = [];
//   MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST];
//   MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0];
//   MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0];
//   MINIMAP_UTILS.d = [];
//   MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND];
//   MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0];
//   MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0];
//   MINIMAP_UTILS.re = [];
//   MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE];
//   MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0];
//   MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0];
//   MINIMAP_UTILS.f = [];
//   MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE];
//   MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0];
//   MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0];
//   MINIMAP_UTILS.isl = [];
//   MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND];
//   MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0];
//   MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0];
//   MINIMAP_UTILS.c = [];
//   MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS];
//   MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0];
//   MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0];
//   MINIMAP_UTILS.wtb = [];
//   MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER];
//   MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA];
//   MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN];
//   MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX];
//   MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF];
//   MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER];
//   MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR];
//   MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE];
//   MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT];
//   MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST];
//   MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER];
//   MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT];
//   MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA];
//   for (var _0x34d53c in MINIMAP_UTILS) {
//     var _0x2bfc10 = MINIMAP_UTILS[_0x34d53c];
//     for (var _0x30104f = 0; _0x30104f < _0x2bfc10.length; _0x30104f++) {
//       var _0x1e5398 = _0x2bfc10[_0x30104f];
//       if (_0x1e5398.tryLoad !== undefined) {
//         _0x1e5398.tryLoad();
//       } else {
//         if (_0x1e5398.length > 0) {
//           for (var _0x2b49e6 = 0; _0x2b49e6 < _0x1e5398.length; _0x2b49e6++) {
//             if (_0x1e5398[_0x2b49e6].tryLoad !== undefined) {
//               _0x1e5398[_0x2b49e6].tryLoad();
//             }
//           }
//         }
//       }
//     }
//   }
//   console.log("Load images", Date.now() - t);
// }
function _load_images() {
  var e,
    t = new Date().getTime();

  function i(e) {
    for (var t = 0, i = 0, r = 0; i < e.length; i++) {
      var a = e.charAt(i);
      "_" !== a && 5 !== i && ("1" === a && (t += Math.pow(2, r)), r++);
    }
    return t;
  }
  for (e in (render_cosmetics(),
  (sprite[SPRITE.RIVER_WAVE] = [IMAGES.RIVER_WAVED, IMAGES.RIVER_WAVEN]),
  (sprite[SPRITE.RIVER_DECO] = []),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY] = []),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")] = [
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_010_000")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_010")] = [
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_011_011")] = [
    IMAGES.DAY_RIVER_COMPO4,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_000")] = [
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_010")] = [
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO27,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_110_110")] = [
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO8,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO27,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_000")] = [
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_111")] = [
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO4,
    IMAGES.DAY_RIVER_COMPO13,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_010_000")] = [
    IMAGES.DAY_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_010_010")] = [
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_000")] = [
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO26,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_000")] = [
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")] = [
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_011_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_111_111")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("000_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_000")] = [
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO26,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_010")] = [
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_011")] = [
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO4,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO15,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_011_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")] = [
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("011_111_111")] = [
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO4,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_000")] = [
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO12,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_010")] = [
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_110_110")] = [
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_000")] = [
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO12,
    IMAGES.DAY_RIVER_COMPO14,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")] = [
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO14,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_111")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")] = [
    IMAGES.DAY_RIVER_COMPO28,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO14,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO1,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_000")] = [
    IMAGES.DAY_RIVER_COMPO12,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO14,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_111")] = [
    IMAGES.DAY_RIVER_COMPO1,
    IMAGES.DAY_RIVER_COMPO2,
    IMAGES.DAY_RIVER_COMPO3,
    IMAGES.DAY_RIVER_COMPO4,
    IMAGES.DAY_RIVER_COMPO5,
    IMAGES.DAY_RIVER_COMPO6,
    IMAGES.DAY_RIVER_COMPO7,
    IMAGES.DAY_RIVER_COMPO9,
    IMAGES.DAY_RIVER_COMPO10,
    IMAGES.DAY_RIVER_COMPO11,
    IMAGES.DAY_RIVER_COMPO13,
    IMAGES.DAY_RIVER_COMPO15,
    IMAGES.DAY_RIVER_COMPO16,
    IMAGES.DAY_RIVER_COMPO17,
    IMAGES.DAY_RIVER_COMPO18,
    IMAGES.DAY_RIVER_COMPO19,
    IMAGES.DAY_RIVER_COMPO20,
    IMAGES.DAY_RIVER_COMPO21,
    IMAGES.DAY_RIVER_COMPO22,
    IMAGES.DAY_RIVER_COMPO23,
    IMAGES.DAY_RIVER_COMPO24,
    IMAGES.DAY_RIVER_COMPO25,
    IMAGES.DAY_RIVER_COMPO26,
    IMAGES.DAY_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.DAY][i("111_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT] = []),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")] = [
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_010_000")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_010")] = [
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_011_011")] = [
    IMAGES.NIGHT_RIVER_COMPO4,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_000")] = [
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_010")] = [
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO27,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_110_110")] = [
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO8,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO27,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_000")] = [
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_111")] = [
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO4,
    IMAGES.NIGHT_RIVER_COMPO13,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_010_000")] = [
    IMAGES.NIGHT_RIVER_COMPO20,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_010_010")] = [
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_000")] = [
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO26,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_000")] = [
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")] = [
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_011_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_111_111")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("000_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("010_110_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_000")] = [
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO26,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_010")] = [
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_011")] = [
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO4,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO15,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_000")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_011_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")] = [
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_110")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_010")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("011_111_111")] = [
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO4,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_000")] = [
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO12,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_010")] = [
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_110_110")] = [
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_000")] = [
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO12,
    IMAGES.NIGHT_RIVER_COMPO14,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")] = [
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO14,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_111")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("110_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")] = [
    IMAGES.NIGHT_RIVER_COMPO28,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO14,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO1,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_011")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_000")] = [
    IMAGES.NIGHT_RIVER_COMPO12,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO14,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_111")] = [
    IMAGES.NIGHT_RIVER_COMPO1,
    IMAGES.NIGHT_RIVER_COMPO2,
    IMAGES.NIGHT_RIVER_COMPO3,
    IMAGES.NIGHT_RIVER_COMPO4,
    IMAGES.NIGHT_RIVER_COMPO5,
    IMAGES.NIGHT_RIVER_COMPO6,
    IMAGES.NIGHT_RIVER_COMPO7,
    IMAGES.NIGHT_RIVER_COMPO9,
    IMAGES.NIGHT_RIVER_COMPO10,
    IMAGES.NIGHT_RIVER_COMPO11,
    IMAGES.NIGHT_RIVER_COMPO13,
    IMAGES.NIGHT_RIVER_COMPO15,
    IMAGES.NIGHT_RIVER_COMPO16,
    IMAGES.NIGHT_RIVER_COMPO17,
    IMAGES.NIGHT_RIVER_COMPO18,
    IMAGES.NIGHT_RIVER_COMPO19,
    IMAGES.NIGHT_RIVER_COMPO20,
    IMAGES.NIGHT_RIVER_COMPO21,
    IMAGES.NIGHT_RIVER_COMPO22,
    IMAGES.NIGHT_RIVER_COMPO23,
    IMAGES.NIGHT_RIVER_COMPO24,
    IMAGES.NIGHT_RIVER_COMPO25,
    IMAGES.NIGHT_RIVER_COMPO26,
    IMAGES.NIGHT_RIVER_COMPO28,
  ]),
  (sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_010")] =
    sprite[SPRITE.RIVER_DECO][SPRITE.NIGHT][i("111_111_110")]),
  (sprite[SPRITE.RIVER] = []),
  (sprite[SPRITE.RIVER][SPRITE.DAY] = []),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_010_000")] =
    IMAGES.DAY_RIVER_000_010_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_010_010")] =
    IMAGES.DAY_RIVER_000_010_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_000")] =
    IMAGES.DAY_RIVER_000_011_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_010")] =
    IMAGES.DAY_RIVER_000_011_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_011_011")] =
    IMAGES.DAY_RIVER_000_011_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_000")] =
    IMAGES.DAY_RIVER_000_110_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_010")] =
    IMAGES.DAY_RIVER_000_110_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_110_110")] =
    IMAGES.DAY_RIVER_000_110_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_000")] =
    IMAGES.DAY_RIVER_000_111_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_010")] =
    IMAGES.DAY_RIVER_000_111_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_011")] =
    IMAGES.DAY_RIVER_000_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_110")] =
    IMAGES.DAY_RIVER_000_111_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("000_111_111")] =
    IMAGES.DAY_RIVER_000_111_111),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_010_000")] =
    IMAGES.DAY_RIVER_010_010_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_010_010")] =
    IMAGES.DAY_RIVER_010_010_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_000")] =
    IMAGES.DAY_RIVER_010_011_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_010")] =
    IMAGES.DAY_RIVER_010_011_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_011_011")] =
    IMAGES.DAY_RIVER_010_011_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_000")] =
    IMAGES.DAY_RIVER_010_110_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_010")] =
    IMAGES.DAY_RIVER_010_110_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_110_110")] =
    IMAGES.DAY_RIVER_010_110_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_000")] =
    IMAGES.DAY_RIVER_010_111_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_010")] =
    IMAGES.DAY_RIVER_010_111_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_011")] =
    IMAGES.DAY_RIVER_010_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_110")] =
    IMAGES.DAY_RIVER_010_111_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("010_111_111")] =
    IMAGES.DAY_RIVER_010_111_111),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_000")] =
    IMAGES.DAY_RIVER_011_011_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_010")] =
    IMAGES.DAY_RIVER_011_011_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_011_011")] =
    IMAGES.DAY_RIVER_011_011_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_000")] =
    IMAGES.DAY_RIVER_011_111_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_010")] =
    IMAGES.DAY_RIVER_011_111_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_011")] =
    IMAGES.DAY_RIVER_011_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_110")] =
    IMAGES.DAY_RIVER_011_111_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("011_111_111")] =
    IMAGES.DAY_RIVER_011_111_111),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_000")] =
    IMAGES.DAY_RIVER_110_110_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_010")] =
    IMAGES.DAY_RIVER_110_110_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_110_110")] =
    IMAGES.DAY_RIVER_110_110_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_000")] =
    IMAGES.DAY_RIVER_110_111_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_010")] =
    IMAGES.DAY_RIVER_110_111_010),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_011")] =
    IMAGES.DAY_RIVER_110_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_110")] =
    IMAGES.DAY_RIVER_110_111_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("110_111_111")] =
    IMAGES.DAY_RIVER_110_111_111),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_011")] =
    IMAGES.DAY_RIVER_111_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_110")] =
    IMAGES.DAY_RIVER_111_111_110),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_011")] =
    IMAGES.DAY_RIVER_111_111_011),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_000")] =
    IMAGES.DAY_RIVER_111_111_000),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_111")] =
    IMAGES.DAY_RIVER_111_111_111),
  (sprite[SPRITE.RIVER][SPRITE.DAY][i("111_111_010")] =
    IMAGES.DAY_RIVER_111_111_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT] = []),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_010_000")] =
    IMAGES.NIGHT_RIVER_000_010_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_010_010")] =
    IMAGES.NIGHT_RIVER_000_010_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_000")] =
    IMAGES.NIGHT_RIVER_000_011_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_010")] =
    IMAGES.NIGHT_RIVER_000_011_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_011_011")] =
    IMAGES.NIGHT_RIVER_000_011_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_000")] =
    IMAGES.NIGHT_RIVER_000_110_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_010")] =
    IMAGES.NIGHT_RIVER_000_110_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_110_110")] =
    IMAGES.NIGHT_RIVER_000_110_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_000")] =
    IMAGES.NIGHT_RIVER_000_111_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_010")] =
    IMAGES.NIGHT_RIVER_000_111_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_011")] =
    IMAGES.NIGHT_RIVER_000_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_110")] =
    IMAGES.NIGHT_RIVER_000_111_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("000_111_111")] =
    IMAGES.NIGHT_RIVER_000_111_111),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_010_000")] =
    IMAGES.NIGHT_RIVER_010_010_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_010_010")] =
    IMAGES.NIGHT_RIVER_010_010_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_000")] =
    IMAGES.NIGHT_RIVER_010_011_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_010")] =
    IMAGES.NIGHT_RIVER_010_011_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_011_011")] =
    IMAGES.NIGHT_RIVER_010_011_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_000")] =
    IMAGES.NIGHT_RIVER_010_110_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_010")] =
    IMAGES.NIGHT_RIVER_010_110_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_110_110")] =
    IMAGES.NIGHT_RIVER_010_110_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_000")] =
    IMAGES.NIGHT_RIVER_010_111_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_010")] =
    IMAGES.NIGHT_RIVER_010_111_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_011")] =
    IMAGES.NIGHT_RIVER_010_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_110")] =
    IMAGES.NIGHT_RIVER_010_111_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("010_111_111")] =
    IMAGES.NIGHT_RIVER_010_111_111),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_000")] =
    IMAGES.NIGHT_RIVER_011_011_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_010")] =
    IMAGES.NIGHT_RIVER_011_011_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_011_011")] =
    IMAGES.NIGHT_RIVER_011_011_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_000")] =
    IMAGES.NIGHT_RIVER_011_111_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_010")] =
    IMAGES.NIGHT_RIVER_011_111_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_011")] =
    IMAGES.NIGHT_RIVER_011_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_110")] =
    IMAGES.NIGHT_RIVER_011_111_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("011_111_111")] =
    IMAGES.NIGHT_RIVER_011_111_111),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_000")] =
    IMAGES.NIGHT_RIVER_110_110_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_010")] =
    IMAGES.NIGHT_RIVER_110_110_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_110_110")] =
    IMAGES.NIGHT_RIVER_110_110_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_000")] =
    IMAGES.NIGHT_RIVER_110_111_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_010")] =
    IMAGES.NIGHT_RIVER_110_111_010),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_011")] =
    IMAGES.NIGHT_RIVER_110_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_110")] =
    IMAGES.NIGHT_RIVER_110_111_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("110_111_111")] =
    IMAGES.NIGHT_RIVER_110_111_111),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_011")] =
    IMAGES.NIGHT_RIVER_111_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_110")] =
    IMAGES.NIGHT_RIVER_111_111_110),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_011")] =
    IMAGES.NIGHT_RIVER_111_111_011),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_000")] =
    IMAGES.NIGHT_RIVER_111_111_000),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_111")] =
    IMAGES.NIGHT_RIVER_111_111_111),
  (sprite[SPRITE.RIVER][SPRITE.NIGHT][i("111_111_010")] =
    IMAGES.NIGHT_RIVER_111_111_010),
  (sprite[SPRITE.PICK_REIDITE] = []),
  (sprite[SPRITE.PICK_REIDITE][SPRITE.DAY] = IMAGES.PICK_REIDITED),
  (sprite[SPRITE.PICK_REIDITE][SPRITE.NIGHT] = IMAGES.PICK_REIDITEN),
  (sprite[SPRITE.CARROT] = []),
  (sprite[SPRITE.CARROT][SPRITE.DAY] = IMAGES.CARROTD),
  (sprite[SPRITE.CARROT][SPRITE.NIGHT] = IMAGES.CARROTN),
  (sprite[SPRITE.TOMATO_MINI] = []),
  (sprite[SPRITE.TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINID),
  (sprite[SPRITE.TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MININ),
  (sprite[SPRITE.TOMATO] = []),
  (sprite[SPRITE.TOMATO][SPRITE.DAY] = IMAGES.TOMATOD),
  (sprite[SPRITE.TOMATO][SPRITE.NIGHT] = IMAGES.TOMATON),
  (sprite[SPRITE.DRIED_CARROT] = []),
  (sprite[SPRITE.DRIED_CARROT][SPRITE.DAY] = IMAGES.CARROT_DRIEDD),
  (sprite[SPRITE.DRIED_CARROT][SPRITE.NIGHT] = IMAGES.CARROT_DRIEDN),
  (sprite[SPRITE.DRIED_TOMATO_MINI] = []),
  (sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.DAY] = IMAGES.TOMATO_MINI_DRIEDD),
  (sprite[SPRITE.DRIED_TOMATO_MINI][SPRITE.NIGHT] = IMAGES.TOMATO_MINI_DRIEDN),
  (sprite[SPRITE.WATERMELON] = []),
  (sprite[SPRITE.WATERMELON][SPRITE.DAY] = IMAGES.WATERMELOND),
  (sprite[SPRITE.WATERMELON][SPRITE.NIGHT] = IMAGES.WATERMELONN),
  (sprite[SPRITE.DRIED_WATERMELON] = []),
  (sprite[SPRITE.DRIED_WATERMELON][SPRITE.DAY] = IMAGES.DRIED_WATERMELOND),
  (sprite[SPRITE.DRIED_WATERMELON][SPRITE.NIGHT] = IMAGES.DRIED_WATERMELONN),
  (sprite[SPRITE.ALOE_VERA_GROWN] = []),
  (sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.DAY] = IMAGES.ALOE_VERA_GROWND),
  (sprite[SPRITE.ALOE_VERA_GROWN][SPRITE.NIGHT] = IMAGES.ALOE_VERA_GROWNN),
  (sprite[SPRITE.DRIED_ALOE_VERA] = []),
  (sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERA_DRIEDD),
  (sprite[SPRITE.DRIED_ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN_DRIEDN),
  (sprite[SPRITE.CACTUS] = []),
  (sprite[SPRITE.CACTUS][SPRITE.DAY] = [IMAGES.CACTUSD]),
  (sprite[SPRITE.CACTUS][SPRITE.NIGHT] = [IMAGES.CACTUSN]),
  (sprite[SPRITE.REIDITE_WALL] = []),
  (sprite[SPRITE.REIDITE_WALL][SPRITE.DAY] = IMAGES.REIDITE_WALLD),
  (sprite[SPRITE.REIDITE_WALL][SPRITE.NIGHT] = IMAGES.REIDITE_WALLN),
  (sprite[SPRITE.REIDITE_SPIKE] = []),
  (sprite[SPRITE.REIDITE_SPIKE][SPRITE.DAY] = CTI(
    create_spike_diamond(0.8 * scale, true, [
      "#dc5252",
      "#be332e",
      "#9facaa",
      "#c03a29",
      "#9b3422",
      "#db4935",
      "#db4935",
      "#f06351",
      "#f06351",
    ])
  )),
  (sprite[SPRITE.REIDITE_SPIKE][SPRITE.NIGHT] = CTI(
    create_spike_diamond(0.8 * scale, true, [
      "#dc5252",
      "#be332e",
      "#546d77",
      "#c03a29",
      "#9b3422",
      "#db4935",
      "#db4935",
      "#83ddd4",
      "#f06351",
    ])
  )),
  (sprite[SPRITE.REIDITE_SPIKE2] = []),
  (sprite[SPRITE.REIDITE_SPIKE2][SPRITE.DAY] = CTI(
    create_spike_diamond(0.8 * scale, true, [
      "#00c291",
      "#00af6d",
      "#9facaa",
      "#c03a29",
      "#9b3422",
      "#db4935",
      "#db4935",
      "#f06351",
      "#f06351",
    ])
  )),
  (sprite[SPRITE.REIDITE_SPIKE2][SPRITE.NIGHT] = CTI(
    create_spike_diamond(0.8 * scale, true, [
      "#00c291",
      "#00af6d",
      "#546d77",
      "#c03a29",
      "#9b3422",
      "#db4935",
      "#db4935",
      "#f06351",
      "#f06351",
    ])
  )),
  (sprite[SPRITE.REIDITE_DOOR] = []),
  (sprite[SPRITE.REIDITE_DOOR][SPRITE.DAY] = IMAGES.REIDITE_DOORD),
  (sprite[SPRITE.REIDITE_DOOR][SPRITE.NIGHT] = IMAGES.REIDITE_DOORN),
  (sprite[SPRITE.WOOD_DOOR_SPIKE] = []),
  (sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.WOOD_DOOR_SPIKED),
  (sprite[SPRITE.WOOD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.WOOD_DOOR_SPIKEN),
  (sprite[SPRITE.STONE_DOOR_SPIKE] = []),
  (sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.STONE_DOOR_SPIKED),
  (sprite[SPRITE.STONE_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.STONE_DOOR_SPIKEN),
  (sprite[SPRITE.GOLD_DOOR_SPIKE] = []),
  (sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.DAY] = IMAGES.GOLD_DOOR_SPIKED),
  (sprite[SPRITE.GOLD_DOOR_SPIKE][SPRITE.NIGHT] = IMAGES.GOLD_DOOR_SPIKEN),
  (sprite[SPRITE.DIAMOND_DOOR_SPIKE] = []),
  (sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.DAY] = IMAGES.DIAMOND_DOOR_SPIKED),
  (sprite[SPRITE.DIAMOND_DOOR_SPIKE][SPRITE.NIGHT] =
    IMAGES.DIAMOND_DOOR_SPIKEN),
  (sprite[SPRITE.AMETHYST_DOOR_SPIKE] = []),
  (sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.DAY] =
    IMAGES.AMETHYST_DOOR_SPIKED),
  (sprite[SPRITE.AMETHYST_DOOR_SPIKE][SPRITE.NIGHT] =
    IMAGES.AMETHYST_DOOR_SPIKEN),
  (sprite[SPRITE.REIDITE_DOOR_SPIKE] = []),
  (sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.DAY] = IMAGES.REIDITE_DOOR_SPIKED),
  (sprite[SPRITE.REIDITE_DOOR_SPIKE][SPRITE.NIGHT] =
    IMAGES.REIDITE_DOOR_SPIKEN),
  (sprite[SPRITE.GOLDEN_HEN] = []),
  (sprite[SPRITE.GOLDEN_HEN][SPRITE.DAY] = IMAGES.HEND),
  (sprite[SPRITE.GOLDEN_HEN][SPRITE.NIGHT] = IMAGES.HENN),
  (sprite[SPRITE.GOLDEN_CHICKEN] = []),
  (sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.DAY] = IMAGES.CHICKEND),
  (sprite[SPRITE.GOLDEN_CHICKEN][SPRITE.NIGHT] = IMAGES.CHICKENN),
  (sprite[SPRITE.HAMMER_REIDITE] = []),
  (sprite[SPRITE.HAMMER_REIDITE][SPRITE.DAY] = IMAGES.HAMMER_REIDITED),
  (sprite[SPRITE.HAMMER_REIDITE][SPRITE.NIGHT] = IMAGES.HAMMER_REIDITEN),
  (sprite[SPRITE.HURT_GOLDEN_HEN] = IMAGES.HURT_GOLDEN_HEN),
  (sprite[SPRITE.HURT_GOLDEN_CHICKEN] = IMAGES.HURT_GOLDEN_CHICKEN),
  (sprite[SPRITE.FOG] = []),
  (sprite[SPRITE.FOG][SPRITE.DAY] = []),
  (sprite[SPRITE.FOG][SPRITE.NIGHT] = []),
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG0D),
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG1D),
  sprite[SPRITE.FOG][SPRITE.DAY].push(IMAGES.FOG2D),
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG0N),
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG1N),
  sprite[SPRITE.FOG][SPRITE.NIGHT].push(IMAGES.FOG2N),
  (sprite[SPRITE.FOD] = []),
  (sprite[SPRITE.FOD][SPRITE.DAY] = []),
  (sprite[SPRITE.FOD][SPRITE.NIGHT] = []),
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD0D),
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD1D),
  sprite[SPRITE.FOD][SPRITE.DAY].push(IMAGES.FOD2D),
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD0N),
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD1N),
  sprite[SPRITE.FOD][SPRITE.NIGHT].push(IMAGES.FOD2N),
  (sprite[SPRITE.MARKER] = []),
  (sprite[SPRITE.MARKER][SPRITE.DAY] = []),
  (sprite[SPRITE.MARKER][SPRITE.NIGHT] = []),
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER0D),
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER1D),
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER2D),
  sprite[SPRITE.MARKER][SPRITE.DAY].push(IMAGES.MARKER3D),
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER0N),
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER1N),
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER2N),
  sprite[SPRITE.MARKER][SPRITE.NIGHT].push(IMAGES.MARKER3N),
  (sprite[SPRITE.LAVA_DRAGON] = []),
  (sprite[SPRITE.LAVA_DRAGON][SPRITE.DAY] = IMAGES.LAVA_DRAGOND),
  (sprite[SPRITE.LAVA_DRAGON][SPRITE.NIGHT] = IMAGES.LAVA_DRAGONN),
  (sprite[SPRITE.LAVA_WING_LEFT] = []),
  (sprite[SPRITE.LAVA_WING_LEFT][SPRITE.DAY] = IMAGES.LAVA_WING_LEFTD),
  (sprite[SPRITE.LAVA_WING_LEFT][SPRITE.NIGHT] = IMAGES.LAVA_WING_LEFTN),
  (sprite[SPRITE.LAVA_WING_RIGHT] = []),
  (sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.DAY] = IMAGES.LAVA_WING_RIGHTD),
  (sprite[SPRITE.LAVA_WING_RIGHT][SPRITE.NIGHT] = IMAGES.LAVA_WING_RIGHTN),
  (sprite[SPRITE.HURT_LAVA_DRAGON] = IMAGES.HURT_LAVA_DRAGON),
  (sprite[SPRITE.HURT_LAVA_WING_LEFT] = IMAGES.HURT_LAVA_WING_LEFT),
  (sprite[SPRITE.HURT_LAVA_WING_RIGHT] = IMAGES.HURT_LAVA_WING_RIGHT),
  (sprite[SPRITE.DIAMOND_PROTECTION] = []),
  (sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.DAY] = IMAGES.DIAMOND_PROTECTIOND),
  (sprite[SPRITE.DIAMOND_PROTECTION][SPRITE.NIGHT] =
    IMAGES.DIAMOND_PROTECTIONN),
  (sprite[SPRITE.GLOVES_DIAMOND_PROTECTION] = []),
  (sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.DAY] =
    IMAGES.HAND_DIAMOND_PROTECTIOND),
  (sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][SPRITE.NIGHT] =
    IMAGES.HAND_DIAMOND_PROTECTIONN),
  (sprite[SPRITE.AMETHYST_PROTECTION] = []),
  (sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.DAY] =
    IMAGES.AMETHYST_PROTECTIOND),
  (sprite[SPRITE.AMETHYST_PROTECTION][SPRITE.NIGHT] =
    IMAGES.AMETHYST_PROTECTIONN),
  (sprite[SPRITE.GLOVES_AMETHYST_PROTECTION] = []),
  (sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.DAY] =
    IMAGES.HAND_DIAMOND_PROTECTIOND),
  (sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][SPRITE.NIGHT] =
    IMAGES.HAND_DIAMOND_PROTECTIONN),
  (sprite[SPRITE.REIDITE_HELMET] = []),
  (sprite[SPRITE.REIDITE_HELMET][SPRITE.DAY] = IMAGES.REIDITE_HELMETD),
  (sprite[SPRITE.REIDITE_HELMET][SPRITE.NIGHT] = IMAGES.REIDITE_HELMETN),
  (sprite[SPRITE.REIDITE_SWORD] = []),
  (sprite[SPRITE.REIDITE_SWORD][SPRITE.DAY] = IMAGES.REIDITE_SWORDD),
  (sprite[SPRITE.REIDITE_SWORD][SPRITE.NIGHT] = IMAGES.REIDITE_SWORDN),
  (sprite[SPRITE.REIDITE_SPEAR] = []),
  (sprite[SPRITE.REIDITE_SPEAR][SPRITE.DAY] = IMAGES.REIDITE_SPEARD),
  (sprite[SPRITE.REIDITE_SPEAR][SPRITE.NIGHT] = IMAGES.REIDITE_SPEARN),
  (sprite[SPRITE.LAVA_SPEAR] = []),
  (sprite[SPRITE.LAVA_SPEAR][SPRITE.DAY] = IMAGES.LAVA_SPEARD),
  (sprite[SPRITE.LAVA_SPEAR][SPRITE.NIGHT] = IMAGES.LAVA_SPEARN),
  (sprite[SPRITE.LAVA_SWORD] = []),
  (sprite[SPRITE.LAVA_SWORD][SPRITE.DAY] = IMAGES.LAVA_SWORDD),
  (sprite[SPRITE.LAVA_SWORD][SPRITE.NIGHT] = IMAGES.LAVA_SWORDN),
  (sprite[SPRITE.LAVA_HELMET] = []),
  (sprite[SPRITE.LAVA_HELMET][SPRITE.DAY] = IMAGES.LAVA_HELMETD),
  (sprite[SPRITE.LAVA_HELMET][SPRITE.NIGHT] = IMAGES.LAVA_HELMETN),
  (sprite[SPRITE.WITCH] = []),
  (sprite[SPRITE.WITCH][SPRITE.DAY] = IMAGES.WITCHD),
  (sprite[SPRITE.WITCH][SPRITE.NIGHT] = IMAGES.WITCHN),
  (sprite[SPRITE.NIMBUS] = []),
  (sprite[SPRITE.NIMBUS][SPRITE.DAY] = IMAGES.NIMBUSD),
  (sprite[SPRITE.NIMBUS][SPRITE.NIGHT] = IMAGES.NIMBUSN),
  (sprite[SPRITE.WOOD_SHIELD] = []),
  (sprite[SPRITE.WOOD_SHIELD][SPRITE.DAY] = IMAGES.WOOD_SHIELDD),
  (sprite[SPRITE.WOOD_SHIELD][SPRITE.NIGHT] = IMAGES.WOOD_SHIELDN),
  (sprite[SPRITE.STONE_SHIELD] = []),
  (sprite[SPRITE.STONE_SHIELD][SPRITE.DAY] = IMAGES.STONE_SHIELDD),
  (sprite[SPRITE.STONE_SHIELD][SPRITE.NIGHT] = IMAGES.STONE_SHIELDN),
  (sprite[SPRITE.GOLD_SHIELD] = []),
  (sprite[SPRITE.GOLD_SHIELD][SPRITE.DAY] = IMAGES.GOLD_SHIELDD),
  (sprite[SPRITE.GOLD_SHIELD][SPRITE.NIGHT] = IMAGES.GOLD_SHIELDN),
  (sprite[SPRITE.DIAMOND_SHIELD] = []),
  (sprite[SPRITE.DIAMOND_SHIELD][SPRITE.DAY] = IMAGES.DIAMOND_SHIELDD),
  (sprite[SPRITE.DIAMOND_SHIELD][SPRITE.NIGHT] = IMAGES.DIAMOND_SHIELDN),
  (sprite[SPRITE.AMETHYST_SHIELD] = []),
  (sprite[SPRITE.AMETHYST_SHIELD][SPRITE.DAY] = IMAGES.AMETHYST_SHIELDD),
  (sprite[SPRITE.AMETHYST_SHIELD][SPRITE.NIGHT] = IMAGES.AMETHYST_SHIELDN),
  (sprite[SPRITE.REIDITE_SHIELD] = []),
  (sprite[SPRITE.REIDITE_SHIELD][SPRITE.DAY] = IMAGES.REIDITE_SHIELDD),
  (sprite[SPRITE.REIDITE_SHIELD][SPRITE.NIGHT] = IMAGES.REIDITE_SHIELDN),
  (sprite[SPRITE.WOOD_ARROW] = []),
  (sprite[SPRITE.WOOD_ARROW][SPRITE.DAY] = IMAGES.WOOD_ARROWD),
  (sprite[SPRITE.WOOD_ARROW][SPRITE.NIGHT] = IMAGES.WOOD_ARROWN),
  (sprite[SPRITE.WOOD_BOW] = []),
  (sprite[SPRITE.WOOD_BOW][SPRITE.DAY] = IMAGES.WOOD_BOWD),
  (sprite[SPRITE.WOOD_BOW][SPRITE.NIGHT] = IMAGES.WOOD_BOWN),
  (sprite[SPRITE.STONE_ARROW] = []),
  (sprite[SPRITE.STONE_ARROW][SPRITE.DAY] = IMAGES.STONE_ARROWD),
  (sprite[SPRITE.STONE_ARROW][SPRITE.NIGHT] = IMAGES.STONE_ARROWN),
  (sprite[SPRITE.STONE_BOW] = []),
  (sprite[SPRITE.STONE_BOW][SPRITE.DAY] = IMAGES.STONE_BOWD),
  (sprite[SPRITE.STONE_BOW][SPRITE.NIGHT] = IMAGES.STONE_BOWN),
  (sprite[SPRITE.GOLD_ARROW] = []),
  (sprite[SPRITE.GOLD_ARROW][SPRITE.DAY] = IMAGES.GOLD_ARROWD),
  (sprite[SPRITE.GOLD_ARROW][SPRITE.NIGHT] = IMAGES.GOLD_ARROWN),
  (sprite[SPRITE.GOLD_BOW] = []),
  (sprite[SPRITE.GOLD_BOW][SPRITE.DAY] = IMAGES.GOLD_BOWD),
  (sprite[SPRITE.GOLD_BOW][SPRITE.NIGHT] = IMAGES.GOLD_BOWN),
  (sprite[SPRITE.DIAMOND_ARROW] = []),
  (sprite[SPRITE.DIAMOND_ARROW][SPRITE.DAY] = IMAGES.DIAMOND_ARROWD),
  (sprite[SPRITE.DIAMOND_ARROW][SPRITE.NIGHT] = IMAGES.DIAMOND_ARROWN),
  (sprite[SPRITE.DIAMOND_BOW] = []),
  (sprite[SPRITE.DIAMOND_BOW][SPRITE.DAY] = IMAGES.DIAMOND_BOWD),
  (sprite[SPRITE.DIAMOND_BOW][SPRITE.NIGHT] = IMAGES.DIAMOND_BOWN),
  (sprite[SPRITE.AMETHYST_ARROW] = []),
  (sprite[SPRITE.AMETHYST_ARROW][SPRITE.DAY] = IMAGES.AMETHYST_ARROWD),
  (sprite[SPRITE.AMETHYST_ARROW][SPRITE.NIGHT] = IMAGES.AMETHYST_ARROWN),
  (sprite[SPRITE.AMETHYST_BOW] = []),
  (sprite[SPRITE.AMETHYST_BOW][SPRITE.DAY] = IMAGES.AMETHYST_BOWD),
  (sprite[SPRITE.AMETHYST_BOW][SPRITE.NIGHT] = IMAGES.AMETHYST_BOWN),
  (sprite[SPRITE.REIDITE_ARROW] = []),
  (sprite[SPRITE.REIDITE_ARROW][SPRITE.DAY] = IMAGES.REIDITE_ARROWD),
  (sprite[SPRITE.REIDITE_ARROW][SPRITE.NIGHT] = IMAGES.REIDITE_ARROWN),
  (sprite[SPRITE.REIDITE_BOW] = []),
  (sprite[SPRITE.REIDITE_BOW][SPRITE.DAY] = IMAGES.REIDITE_BOWD),
  (sprite[SPRITE.REIDITE_BOW][SPRITE.NIGHT] = IMAGES.REIDITE_BOWN),
  (sprite[SPRITE.DRAGON_ARROW] = []),
  (sprite[SPRITE.DRAGON_ARROW][SPRITE.DAY] = IMAGES.DRAGON_ARROWD),
  (sprite[SPRITE.DRAGON_ARROW][SPRITE.NIGHT] = IMAGES.DRAGON_ARROWN),
  (sprite[SPRITE.DRAGON_BOW] = []),
  (sprite[SPRITE.DRAGON_BOW][SPRITE.DAY] = IMAGES.DRAGON_BOWD),
  (sprite[SPRITE.DRAGON_BOW][SPRITE.NIGHT] = IMAGES.DRAGON_BOWN),
  (sprite[SPRITE.TURBAN1] = []),
  (sprite[SPRITE.TURBAN1][SPRITE.DAY] = IMAGES.TURBAN1D),
  (sprite[SPRITE.TURBAN1][SPRITE.NIGHT] = IMAGES.TURBAN1N),
  (sprite[SPRITE.TURBAN2] = []),
  (sprite[SPRITE.TURBAN2][SPRITE.DAY] = IMAGES.TURBAN2D),
  (sprite[SPRITE.TURBAN2][SPRITE.NIGHT] = IMAGES.TURBAN2N),
  (sprite[SPRITE.REIDITE_PROTECTION] = []),
  (sprite[SPRITE.REIDITE_PROTECTION][SPRITE.DAY] = IMAGES.REIDITE_PROTECTIOND),
  (sprite[SPRITE.REIDITE_PROTECTION][SPRITE.NIGHT] =
    IMAGES.REIDITE_PROTECTIONN),
  (sprite[SPRITE.GLOVES_REIDITE_PROTECTION] = []),
  (sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.DAY] =
    IMAGES.HAND_REIDITE_PROTECTIOND),
  (sprite[SPRITE.GLOVES_REIDITE_PROTECTION][SPRITE.NIGHT] =
    IMAGES.HAND_REIDITE_PROTECTIONN),
  (sprite[SPRITE.LAVA_SHINGLE] = []),
  (sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY] = []),
  (sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES0D),
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.DAY].push(IMAGES.LAVA_SHINGLES1D),
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1D),
  sprite[SPRITE.LAVA_SHINGLE][SPRITE.NIGHT].push(IMAGES.LAVA_SHINGLES1N),
  (sprite[SPRITE.LAVA_BUBBLE] = []),
  (sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY] = []),
  (sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE0D),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE1D),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.DAY].push(IMAGES.LAVA_BUBLE2D),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE0N),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE1N),
  sprite[SPRITE.LAVA_BUBBLE][SPRITE.NIGHT].push(IMAGES.LAVA_BUBLE2N),
  (sprite[SPRITE.PITCHFORK] = []),
  (sprite[SPRITE.PITCHFORK][SPRITE.DAY] = IMAGES.PITCHFORKD),
  (sprite[SPRITE.PITCHFORK][SPRITE.NIGHT] = IMAGES.PITCHFORKN),
  (sprite[SPRITE.PITCHFORK2] = []),
  (sprite[SPRITE.PITCHFORK2][SPRITE.DAY] = IMAGES.PITCHFORK2D),
  (sprite[SPRITE.PITCHFORK2][SPRITE.NIGHT] = IMAGES.PITCHFORK2N),
  (sprite[SPRITE.EMERALD] = []),
  (sprite[SPRITE.EMERALD][SPRITE.DAY] = []),
  (sprite[SPRITE.EMERALD][SPRITE.NIGHT] = []),
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD0D),
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD1D),
  sprite[SPRITE.EMERALD][SPRITE.DAY].push(IMAGES.EMERALD2D),
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD0N),
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD1N),
  sprite[SPRITE.EMERALD][SPRITE.NIGHT].push(IMAGES.EMERALD2N),
  (sprite[SPRITE.REIDITE] = []),
  (sprite[SPRITE.REIDITE][SPRITE.DAY] = []),
  (sprite[SPRITE.REIDITE][SPRITE.NIGHT] = []),
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE0D),
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE1D),
  sprite[SPRITE.REIDITE][SPRITE.DAY].push(IMAGES.REIDITE2D),
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE0N),
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE1N),
  sprite[SPRITE.REIDITE][SPRITE.NIGHT].push(IMAGES.REIDITE2N),
  (sprite[SPRITE.MAGMA] = []),
  (sprite[SPRITE.MAGMA][SPRITE.DAY] = []),
  (sprite[SPRITE.MAGMA][SPRITE.NIGHT] = []),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA1D),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA2D),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA3D),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA4D),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA5D),
  sprite[SPRITE.MAGMA][SPRITE.DAY].push(IMAGES.MAGMA6D),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA1N),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA2N),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA3N),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA4N),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA5N),
  sprite[SPRITE.MAGMA][SPRITE.NIGHT].push(IMAGES.MAGMA6N),
  (sprite[SPRITE.LAVA_GROUND] = []),
  (sprite[SPRITE.LAVA_GROUND][SPRITE.DAY] = []),
  (sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND1D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND2D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND3D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND4D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND5D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.DAY].push(IMAGES.LAVA_GROUND6D),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND1N),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND2N),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND3N),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND4N),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND5N),
  sprite[SPRITE.LAVA_GROUND][SPRITE.NIGHT].push(IMAGES.LAVA_GROUND6N),
  (sprite[SPRITE.FIRE_MOB] = []),
  (sprite[SPRITE.FIRE_MOB][SPRITE.DAY] = IMAGES.FIRE_MOBD),
  (sprite[SPRITE.FIRE_MOB][SPRITE.NIGHT] = IMAGES.FIRE_MOBN),
  (sprite[SPRITE.HURT_FIRE_MOB] = IMAGES.FIRE_MOB_HURT),
  (sprite[SPRITE.MACHETE] = []),
  (sprite[SPRITE.MACHETE][SPRITE.DAY] = IMAGES.MACHETED),
  (sprite[SPRITE.MACHETE][SPRITE.NIGHT] = IMAGES.MACHETEN),
  (sprite[SPRITE.BOAT] = []),
  (sprite[SPRITE.BOAT][SPRITE.DAY] = IMAGES.BOATD),
  (sprite[SPRITE.BOAT][SPRITE.NIGHT] = IMAGES.BOATN),
  (sprite[SPRITE.SLED] = []),
  (sprite[SPRITE.SLED][SPRITE.DAY] = IMAGES.SLEDD),
  (sprite[SPRITE.SLED][SPRITE.NIGHT] = IMAGES.SLEDN),
  (sprite[SPRITE.PLANE] = []),
  (sprite[SPRITE.PLANE][SPRITE.DAY] = IMAGES.PLANED),
  (sprite[SPRITE.PLANE][SPRITE.NIGHT] = IMAGES.PLANEN),
  (sprite[SPRITE.PENGUIN] = []),
  (sprite[SPRITE.PENGUIN][SPRITE.DAY] = IMAGES.PENGUIND),
  (sprite[SPRITE.PENGUIN][SPRITE.NIGHT] = IMAGES.PENGUINN),
  (sprite[SPRITE.HURT_PENGUIN] = IMAGES.HURT_PENGUIN),
  (sprite[SPRITE.SAND_WORM1] = []),
  (sprite[SPRITE.SAND_WORM1][SPRITE.DAY] = IMAGES.SAND_WORM1D),
  (sprite[SPRITE.SAND_WORM1][SPRITE.NIGHT] = IMAGES.SAND_WORM1N),
  (sprite[SPRITE.SAND_WORM2] = []),
  (sprite[SPRITE.SAND_WORM2][SPRITE.DAY] = IMAGES.SAND_WORM2D),
  (sprite[SPRITE.SAND_WORM2][SPRITE.NIGHT] = IMAGES.SAND_WORM2N),
  (sprite[SPRITE.HURT_SAND_WORM0] = IMAGES.HURT_SAND_WORM0),
  (sprite[SPRITE.HURT_SAND_WORM1] = IMAGES.HURT_SAND_WORM1),
  (sprite[SPRITE.HURT_SAND_WORM2] = IMAGES.HURT_SAND_WORM2),
  (sprite[SPRITE.SCORPION] = []),
  (sprite[SPRITE.SCORPION][SPRITE.DAY] = IMAGES.SCORPIOND),
  (sprite[SPRITE.SCORPION][SPRITE.NIGHT] = IMAGES.SCORPIONN),
  (sprite[SPRITE.SCORPION_HAND_LEFT] = []),
  (sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.DAY] = IMAGES.SCORPION_HAND_LEFTD),
  (sprite[SPRITE.SCORPION_HAND_LEFT][SPRITE.NIGHT] =
    IMAGES.SCORPION_HAND_LEFTN),
  (sprite[SPRITE.SCORPION_HAND_RIGHT] = []),
  (sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.DAY] =
    IMAGES.SCORPION_HAND_RIGHTD),
  (sprite[SPRITE.SCORPION_HAND_RIGHT][SPRITE.NIGHT] =
    IMAGES.SCORPION_HAND_RIGHTN),
  (sprite[SPRITE.HURT_SCORPION] = IMAGES.HURT_SCORPION),
  (sprite[SPRITE.HURT_SCORPION_HAND_RIGHT] = IMAGES.HURT_SCORPION_HAND_RIGHT),
  (sprite[SPRITE.HURT_SCORPION_HAND_LEFT] = IMAGES.HURT_SCORPION_HAND_LEFT),
  (sprite[SPRITE.CRAB_BOSS_ATTACK] = []),
  (sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.DAY] = IMAGES.CRAB_BOSS_ATTACKD),
  (sprite[SPRITE.CRAB_BOSS_ATTACK][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_ATTACKN),
  (sprite[SPRITE.CRAB_BOSS_TAMED] = []),
  (sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.DAY] = IMAGES.CRAB_BOSS_TAMEDD),
  (sprite[SPRITE.CRAB_BOSS_TAMED][SPRITE.NIGHT] = IMAGES.CRAB_BOSS_TAMEDN),
  (sprite[SPRITE.CRAB_BOSS] = []),
  (sprite[SPRITE.CRAB_BOSS][SPRITE.DAY] = IMAGES.CRAB_BOSSD),
  (sprite[SPRITE.CRAB_BOSS][SPRITE.NIGHT] = IMAGES.CRAB_BOSSN),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT] = []),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.DAY] =
    IMAGES.CRAB_BOSS_CLAW_LEFTD),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][SPRITE.NIGHT] =
    IMAGES.CRAB_BOSS_CLAW_LEFTN),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT] = []),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.DAY] =
    IMAGES.CRAB_BOSS_CLAW_RIGHTD),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][SPRITE.NIGHT] =
    IMAGES.CRAB_BOSS_CLAW_RIGHTN),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK] = []),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.DAY] =
    IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKD),
  (sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][SPRITE.NIGHT] =
    IMAGES.CRAB_BOSS_CLAW_LEFT_ATTACKN),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK] = []),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.DAY] =
    IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKD),
  (sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] =
    IMAGES.CRAB_BOSS_CLAW_RIGHT_ATTACKN),
  (sprite[SPRITE.HURT_CRAB_BOSS] = IMAGES.HURT_CRAB_BOSS),
  (sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT] = IMAGES.HURT_CRAB_BOSS_CLAW_LEFT),
  (sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HURT_CRAB_BOSS_CLAW_RIGHT),
  (sprite[SPRITE.HEAL_CRAB_BOSS] = IMAGES.HEAL_CRAB_BOSS),
  (sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT] = IMAGES.HEAL_CRAB_BOSS_CLAW_LEFT),
  (sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT] = IMAGES.HEAL_CRAB_BOSS_CLAW_RIGHT),
  (sprite[SPRITE.BABY_MAMMOTH_ATTACK] = []),
  (sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.DAY] =
    IMAGES.BABY_MAMMOTH_ATTACKD),
  (sprite[SPRITE.BABY_MAMMOTH_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_MAMMOTH_ATTACKN),
  (sprite[SPRITE.BABY_MAMMOTH] = []),
  (sprite[SPRITE.BABY_MAMMOTH][SPRITE.DAY] = IMAGES.BABY_MAMMOTHD),
  (sprite[SPRITE.BABY_MAMMOTH][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTHN),
  (sprite[SPRITE.MAMMOTH] = []),
  (sprite[SPRITE.MAMMOTH][SPRITE.DAY] = IMAGES.MAMMOTHD),
  (sprite[SPRITE.MAMMOTH][SPRITE.NIGHT] = IMAGES.MAMMOTHN),
  (sprite[SPRITE.BABY_MAMMOTH_TAMED] = []),
  (sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_TAMEDD),
  (sprite[SPRITE.BABY_MAMMOTH_TAMED][SPRITE.NIGHT] =
    IMAGES.BABY_MAMMOTH_TAMEDN),
  (sprite[SPRITE.HURT_BABY_MAMMOTH] = IMAGES.HURT_BABY_MAMMOTH),
  (sprite[SPRITE.HURT_MAMMOTH] = IMAGES.HURT_MAMMOTH),
  (sprite[SPRITE.BABY_DRAGON_ATTACK] = []),
  (sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.DAY] = IMAGES.BABY_DRAGON_ATTACKD),
  (sprite[SPRITE.BABY_DRAGON_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_ATTACKN),
  (sprite[SPRITE.BABY_DRAGON] = []),
  (sprite[SPRITE.BABY_DRAGON][SPRITE.DAY] = IMAGES.BABY_DRAGOND),
  (sprite[SPRITE.BABY_DRAGON][SPRITE.NIGHT] = IMAGES.BABY_DRAGONN),
  (sprite[SPRITE.BABY_DRAGON_TAMED] = []),
  (sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.DAY] = IMAGES.BABY_DRAGON_TAMEDD),
  (sprite[SPRITE.BABY_DRAGON_TAMED][SPRITE.NIGHT] = IMAGES.BABY_DRAGON_TAMEDN),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_LEFTD),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_LEFTN),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_RIGHTD),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_RIGHTN),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_LEFT_ATTACKD),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_LEFT_ATTACKN),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKD),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_RIGHT_ATTACKN),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_LEFT_TAMEDD),
  (sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_LEFT_TAMEDN),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED] = []),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.DAY] =
    IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDD),
  (sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][SPRITE.NIGHT] =
    IMAGES.BABY_DRAGON_WING_RIGHT_TAMEDN),
  (sprite[SPRITE.HURT_BABY_DRAGON] = IMAGES.HURT_BABY_DRAGON),
  (sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT] =
    IMAGES.HURT_BABY_DRAGON_WING_LEFT),
  (sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT] =
    IMAGES.HURT_BABY_DRAGON_WING_RIGHT),
  (sprite[SPRITE.BABY_LAVA_ATTACK] = []),
  (sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.DAY] = IMAGES.BABY_LAVA_ATTACKD),
  (sprite[SPRITE.BABY_LAVA_ATTACK][SPRITE.NIGHT] = IMAGES.BABY_LAVA_ATTACKN),
  (sprite[SPRITE.BABY_LAVA] = []),
  (sprite[SPRITE.BABY_LAVA][SPRITE.DAY] = IMAGES.BABY_LAVAD),
  (sprite[SPRITE.BABY_LAVA][SPRITE.NIGHT] = IMAGES.BABY_LAVAN),
  (sprite[SPRITE.BABY_LAVA_TAMED] = []),
  (sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.DAY] = IMAGES.BABY_LAVA_TAMEDD),
  (sprite[SPRITE.BABY_LAVA_TAMED][SPRITE.NIGHT] = IMAGES.BABY_LAVA_TAMEDN),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT] = []),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_LEFTD),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_LEFTN),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT] = []),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_RIGHTD),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_RIGHTN),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK] = []),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_LEFT_ATTACKD),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_LEFT_ATTACKN),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK] = []),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_RIGHT_ATTACKD),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_RIGHT_ATTACKN),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED] = []),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_LEFT_TAMEDD),
  (sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_LEFT_TAMEDN),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED] = []),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.DAY] =
    IMAGES.BABY_LAVA_WING_RIGHT_TAMEDD),
  (sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][SPRITE.NIGHT] =
    IMAGES.BABY_LAVA_WING_RIGHT_TAMEDN),
  (sprite[SPRITE.HURT_BABY_LAVA] = IMAGES.HURT_BABY_LAVA),
  (sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT] = IMAGES.HURT_BABY_LAVA_WING_LEFT),
  (sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT] = IMAGES.HURT_BABY_LAVA_WING_RIGHT),
  (sprite[SPRITE.HAWK_ATTACK] = []),
  (sprite[SPRITE.HAWK_ATTACK][SPRITE.DAY] = IMAGES.HAWK_ATTACKD),
  (sprite[SPRITE.HAWK_ATTACK][SPRITE.NIGHT] = IMAGES.HAWK_ATTACKN),
  (sprite[SPRITE.HAWK] = []),
  (sprite[SPRITE.HAWK][SPRITE.DAY] = IMAGES.HAWKD),
  (sprite[SPRITE.HAWK][SPRITE.NIGHT] = IMAGES.HAWKN),
  (sprite[SPRITE.HURT_HAWK_GROUND] = IMAGES.HURT_HAWK_GROUND),
  (sprite[SPRITE.HAWK_GROUND] = []),
  (sprite[SPRITE.HAWK_GROUND][SPRITE.DAY] = IMAGES.HAWK_GROUNDD),
  (sprite[SPRITE.HAWK_GROUND][SPRITE.NIGHT] = IMAGES.HAWK_GROUNDN),
  (sprite[SPRITE.HAWK_GROUND_ATTACK] = []),
  (sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.DAY] = IMAGES.HAWK_GROUND_ATTACKD),
  (sprite[SPRITE.HAWK_GROUND_ATTACK][SPRITE.NIGHT] =
    IMAGES.HAWK_GROUND_ATTACKN),
  (sprite[SPRITE.HAWK_TAMED] = []),
  (sprite[SPRITE.HAWK_TAMED][SPRITE.DAY] = IMAGES.HAWK_TAMEDD),
  (sprite[SPRITE.HAWK_TAMED][SPRITE.NIGHT] = IMAGES.HAWK_TAMEDN),
  (sprite[SPRITE.HAWK_WING_LEFT] = []),
  (sprite[SPRITE.HAWK_WING_LEFT][SPRITE.DAY] = IMAGES.HAWK_WING_LEFTD),
  (sprite[SPRITE.HAWK_WING_LEFT][SPRITE.NIGHT] = IMAGES.HAWK_WING_LEFTN),
  (sprite[SPRITE.HAWK_WING_RIGHT] = []),
  (sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.DAY] = IMAGES.HAWK_WING_RIGHTD),
  (sprite[SPRITE.HAWK_WING_RIGHT][SPRITE.NIGHT] = IMAGES.HAWK_WING_RIGHTN),
  (sprite[SPRITE.HAWK_WING_LEFT_ATTACK] = []),
  (sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.DAY] =
    IMAGES.HAWK_WING_LEFT_ATTACKD),
  (sprite[SPRITE.HAWK_WING_LEFT_ATTACK][SPRITE.NIGHT] =
    IMAGES.HAWK_WING_LEFT_ATTACKN),
  (sprite[SPRITE.HAWK_WING_RIGHT_ATTACK] = []),
  (sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.DAY] =
    IMAGES.HAWK_WING_RIGHT_ATTACKD),
  (sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
    IMAGES.HAWK_WING_RIGHT_ATTACKN),
  (sprite[SPRITE.HAWK_WING_LEFT_TAMED] = []),
  (sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.DAY] =
    IMAGES.HAWK_WING_LEFT_TAMEDD),
  (sprite[SPRITE.HAWK_WING_LEFT_TAMED][SPRITE.NIGHT] =
    IMAGES.HAWK_WING_LEFT_TAMEDN),
  (sprite[SPRITE.HAWK_WING_RIGHT_TAMED] = []),
  (sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.DAY] =
    IMAGES.HAWK_WING_RIGHT_TAMEDD),
  (sprite[SPRITE.HAWK_WING_RIGHT_TAMED][SPRITE.NIGHT] =
    IMAGES.HAWK_WING_RIGHT_TAMEDN),
  (sprite[SPRITE.HURT_HAWK] = IMAGES.HURT_HAWK),
  (sprite[SPRITE.HURT_HAWK_WING_LEFT] = IMAGES.HURT_HAWK_WING_LEFT),
  (sprite[SPRITE.HURT_HAWK_WING_RIGHT] = IMAGES.HURT_HAWK_WING_RIGHT),
  (sprite[SPRITE.VULTURE_ATTACK] = []),
  (sprite[SPRITE.VULTURE_ATTACK][SPRITE.DAY] = IMAGES.VULTURE_ATTACKD),
  (sprite[SPRITE.VULTURE_ATTACK][SPRITE.NIGHT] = IMAGES.VULTURE_ATTACKN),
  (sprite[SPRITE.VULTURE] = []),
  (sprite[SPRITE.VULTURE][SPRITE.DAY] = IMAGES.VULTURED),
  (sprite[SPRITE.VULTURE][SPRITE.NIGHT] = IMAGES.VULTUREN),
  (sprite[SPRITE.HURT_VULTURE_GROUND] = IMAGES.HURT_VULTURE_GROUND),
  (sprite[SPRITE.VULTURE_GROUND] = []),
  (sprite[SPRITE.VULTURE_GROUND][SPRITE.DAY] = IMAGES.VULTURE_GROUNDD),
  (sprite[SPRITE.VULTURE_GROUND][SPRITE.NIGHT] = IMAGES.VULTURE_GROUNDN),
  (sprite[SPRITE.VULTURE_GROUND_ATTACK] = []),
  (sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.DAY] =
    IMAGES.VULTURE_GROUND_ATTACKD),
  (sprite[SPRITE.VULTURE_GROUND_ATTACK][SPRITE.NIGHT] =
    IMAGES.VULTURE_GROUND_ATTACKN),
  (sprite[SPRITE.VULTURE_TAMED] = []),
  (sprite[SPRITE.VULTURE_TAMED][SPRITE.DAY] = IMAGES.VULTURE_TAMEDD),
  (sprite[SPRITE.VULTURE_TAMED][SPRITE.NIGHT] = IMAGES.VULTURE_TAMEDN),
  (sprite[SPRITE.VULTURE_WING_LEFT] = []),
  (sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.DAY] = IMAGES.VULTURE_WING_LEFTD),
  (sprite[SPRITE.VULTURE_WING_LEFT][SPRITE.NIGHT] = IMAGES.VULTURE_WING_LEFTN),
  (sprite[SPRITE.VULTURE_WING_RIGHT] = []),
  (sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.DAY] = IMAGES.VULTURE_WING_RIGHTD),
  (sprite[SPRITE.VULTURE_WING_RIGHT][SPRITE.NIGHT] =
    IMAGES.VULTURE_WING_RIGHTN),
  (sprite[SPRITE.VULTURE_WING_LEFT_ATTACK] = []),
  (sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.DAY] =
    IMAGES.VULTURE_WING_LEFT_ATTACKD),
  (sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][SPRITE.NIGHT] =
    IMAGES.VULTURE_WING_LEFT_ATTACKN),
  (sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK] = []),
  (sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.DAY] =
    IMAGES.VULTURE_WING_RIGHT_ATTACKD),
  (sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][SPRITE.NIGHT] =
    IMAGES.VULTURE_WING_RIGHT_ATTACKN),
  (sprite[SPRITE.VULTURE_WING_LEFT_TAMED] = []),
  (sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.DAY] =
    IMAGES.VULTURE_WING_LEFT_TAMEDD),
  (sprite[SPRITE.VULTURE_WING_LEFT_TAMED][SPRITE.NIGHT] =
    IMAGES.VULTURE_WING_LEFT_TAMEDN),
  (sprite[SPRITE.VULTURE_WING_RIGHT_TAMED] = []),
  (sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.DAY] =
    IMAGES.VULTURE_WING_RIGHT_TAMEDD),
  (sprite[SPRITE.VULTURE_WING_RIGHT_TAMED][SPRITE.NIGHT] =
    IMAGES.VULTURE_WING_RIGHT_TAMEDN),
  (sprite[SPRITE.HURT_VULTURE] = IMAGES.HURT_VULTURE),
  (sprite[SPRITE.HURT_VULTURE_WING_LEFT] = IMAGES.HURT_VULTURE_WING_LEFT),
  (sprite[SPRITE.HURT_VULTURE_WING_RIGHT] = IMAGES.HURT_VULTURE_WING_RIGHT),
  (sprite[SPRITE.BOAR] = []),
  (sprite[SPRITE.BOAR][SPRITE.DAY] = IMAGES.BOARD),
  (sprite[SPRITE.BOAR][SPRITE.NIGHT] = IMAGES.BOARN),
  (sprite[SPRITE.BOAR_TAMED] = []),
  (sprite[SPRITE.BOAR_TAMED][SPRITE.DAY] = IMAGES.BOAR_TAMEDD),
  (sprite[SPRITE.BOAR_TAMED][SPRITE.NIGHT] = IMAGES.BOAR_TAMEDN),
  (sprite[SPRITE.BOAR_ATTACK] = []),
  (sprite[SPRITE.BOAR_ATTACK][SPRITE.DAY] = IMAGES.BOAR_ANGRYD),
  (sprite[SPRITE.BOAR_ATTACK][SPRITE.NIGHT] = IMAGES.BOAR_ANGRYN),
  (sprite[SPRITE.BOAR_STEP] = []),
  (sprite[SPRITE.BOAR_STEP][SPRITE.DAY] = IMAGES.BOAR_STEP),
  (sprite[SPRITE.BOAR_STEP][SPRITE.NIGHT] = IMAGES.BOAR_STEP),
  (sprite[SPRITE.CRAB_STEP] = []),
  (sprite[SPRITE.CRAB_STEP][SPRITE.DAY] = IMAGES.CRAB_STEP),
  (sprite[SPRITE.CRAB_STEP][SPRITE.NIGHT] = IMAGES.CRAB_STEP),
  (sprite[SPRITE.BABY_MAMMOTH_STEP] = []),
  (sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.DAY] = IMAGES.BABY_MAMMOTH_STEP),
  (sprite[SPRITE.BABY_MAMMOTH_STEP][SPRITE.NIGHT] = IMAGES.BABY_MAMMOTH_STEP),
  (sprite[SPRITE.HURT_BOAR] = IMAGES.HURT_BOAR),
  (sprite[SPRITE.SADDLE] = []),
  (sprite[SPRITE.SADDLE][SPRITE.DAY] = IMAGES.SADDLED),
  (sprite[SPRITE.SADDLE][SPRITE.NIGHT] = IMAGES.SADDLEN),
  (sprite[SPRITE.WAND1] = []),
  (sprite[SPRITE.WAND1][SPRITE.DAY] = IMAGES.WAND1D),
  (sprite[SPRITE.WAND1][SPRITE.NIGHT] = IMAGES.WAND1N),
  (sprite[SPRITE.SPELL] = []),
  (sprite[SPRITE.SPELL][SPRITE.DAY] = [
    IMAGES.LIGHT_WAND0D,
    IMAGES.LIGHT_WAND1D,
    IMAGES.WOOD_ARROWD,
    IMAGES.STONE_ARROWD,
    IMAGES.GOLD_ARROWD,
    IMAGES.DIAMOND_ARROWD,
    IMAGES.AMETHYST_ARROWD,
    IMAGES.REIDITE_ARROWD,
    IMAGES.DRAGON_ARROWD,
  ]),
  (sprite[SPRITE.SPELL][SPRITE.NIGHT] = [
    IMAGES.LIGHT_WAND0N,
    IMAGES.LIGHT_WAND1N,
    IMAGES.WOOD_ARROWN,
    IMAGES.STONE_ARROWN,
    IMAGES.GOLD_ARROWN,
    IMAGES.DIAMOND_ARROWN,
    IMAGES.AMETHYST_ARROWN,
    IMAGES.REIDITE_ARROWD,
    IMAGES.DRAGON_ARROWN,
  ]),
  (sprite[SPRITE.WAND2] = []),
  (sprite[SPRITE.WAND2][SPRITE.DAY] = IMAGES.WAND2D),
  (sprite[SPRITE.WAND2][SPRITE.NIGHT] = IMAGES.WAND2N),
  (sprite[SPRITE.BOAT_WAVE] = []),
  (sprite[SPRITE.BOAT_WAVE][SPRITE.DAY] = IMAGES.BOAT_WAVED),
  (sprite[SPRITE.BOAT_WAVE][SPRITE.NIGHT] = IMAGES.BOAT_WAVEN),
  (sprite[SPRITE.SLED_WAVE] = []),
  (sprite[SPRITE.SLED_WAVE][SPRITE.DAY] = IMAGES.SLED_WAVED),
  (sprite[SPRITE.SLED_WAVE][SPRITE.NIGHT] = IMAGES.SLED_WAVEN),
  (sprite[SPRITE.PIRATE_HAT] = []),
  (sprite[SPRITE.PIRATE_HAT][SPRITE.DAY] = IMAGES.PIRATE_HATD),
  (sprite[SPRITE.PIRATE_HAT][SPRITE.NIGHT] = IMAGES.PIRATE_HATN),
  (sprite[SPRITE.FUR_HAT] = []),
  (sprite[SPRITE.FUR_HAT][SPRITE.DAY] = IMAGES.FUR_HATD),
  (sprite[SPRITE.FUR_HAT][SPRITE.NIGHT] = IMAGES.FUR_HATN),
  (sprite[SPRITE.FLOWER_HAT] = []),
  (sprite[SPRITE.FLOWER_HAT][SPRITE.DAY] = IMAGES.FLOWER_HATD),
  (sprite[SPRITE.FLOWER_HAT][SPRITE.NIGHT] = IMAGES.FLOWER_HATN),
  (sprite[SPRITE.PILOT_HELMET] = []),
  (sprite[SPRITE.PILOT_HELMET][SPRITE.DAY] = IMAGES.PILOT_HELMETD),
  (sprite[SPRITE.PILOT_HELMET][SPRITE.NIGHT] = IMAGES.PILOT_HELMETN),
  (sprite[SPRITE.LAKE_EDGE] = []),
  (sprite[SPRITE.LAKE_EDGE][SPRITE.DAY] = []),
  (sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE0D_EDGE),
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE1D_EDGE),
  sprite[SPRITE.LAKE_EDGE][SPRITE.DAY].push(IMAGES.LAKE2D_EDGE),
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE0N_EDGE),
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE1N_EDGE),
  sprite[SPRITE.LAKE_EDGE][SPRITE.NIGHT].push(IMAGES.LAKE2N_EDGE),
  (sprite[SPRITE.LAKE_DEEP] = []),
  (sprite[SPRITE.LAKE_DEEP][SPRITE.DAY] = []),
  (sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE0D_DEEP),
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE1D_DEEP),
  sprite[SPRITE.LAKE_DEEP][SPRITE.DAY].push(IMAGES.LAKE2D_DEEP),
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE0N_DEEP),
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE1N_DEEP),
  sprite[SPRITE.LAKE_DEEP][SPRITE.NIGHT].push(IMAGES.LAKE2N_DEEP),
  (sprite[SPRITE.LAKE] = []),
  (sprite[SPRITE.LAKE][SPRITE.DAY] = []),
  (sprite[SPRITE.LAKE][SPRITE.NIGHT] = []),
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE0D),
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE1D),
  sprite[SPRITE.LAKE][SPRITE.DAY].push(IMAGES.LAKE2D),
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE0N),
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE1N),
  sprite[SPRITE.LAKE][SPRITE.NIGHT].push(IMAGES.LAKE2N),
  (sprite[1e4] = [new Image()]),
  (sprite[10001] = [new Image()]),
  (sprite[10002] = [new Image()]),
  (sprite[10003] = [new Image()]),
  (sprite[10004] = [new Image()]),
  (sprite[10005] = [new Image()]),
  (sprite[10006] = [new Image()]),
  (sprite[10007] = [new Image()]),
  (sprite[10008] = [new Image()]),
  (sprite[10009] = [new Image()]),
  (sprite[10010] = [new Image()]),
  (sprite[10011] = [new Image()]),
  (sprite[10012] = [new Image()]),
  (sprite[10013] = [new Image()]),
  (sprite[10014] = [new Image()]),
  (sprite[10015] = [new Image()]),
  (sprite[10016] = [new Image()]),
  (sprite[10017] = [new Image()]),
  (sprite[10018] = [new Image()]),
  (sprite[10019] = [new Image()]),
  (sprite[10020] = [new Image()]),
  (sprite[10021] = [new Image()]),
  (sprite[10022] = [new Image()]),
  (sprite[10023] = [new Image()]),
  (sprite[10024] = [new Image()]),
  (sprite[10025] = [new Image()]),
  (sprite[10026] = [new Image()]),
  (sprite[10027] = [new Image()]),
  (sprite[10028] = [new Image()]),
  (sprite[10029] = [new Image()]),
  (sprite[10030] = [new Image()]),
  (sprite[10031] = [new Image()]),
  (sprite[10032] = [new Image()]),
  (sprite[10033] = [new Image()]),
  (sprite[10034] = [new Image()]),
  (sprite[10035] = [new Image()]),
  // (sprite[1e4][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509274953420891/42341413241234.png"),
  // (sprite[10001][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608248411336774/spike_reid321ite.png"),
  // (sprite[10002][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509110230536324/spike_rei312312312312dite.png"),
  // (sprite[10003][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608248180658196/spike_reid321231232131231ite.png"),
  // (sprite[10004][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509109970493460/spike_r123123123124123eidite.png"),
  // (sprite[10005][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608247949979688/spike_reid321231ite.png"),
  // (sprite[10006][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509110490579054/spike_reid12312312312ite.png"),
  // (sprite[10007][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608247731879997/4123.png"),
  // (sprite[10008][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509110972928022/spike_reidit123123213123e.png"),
  // (sprite[10009][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608247517954068/spike_12312312312312312.png"),
  // (sprite[10010][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/938509110725447700/spike_reidit2312312312e.png"),
  // (sprite[10011][0].src =
  //   "https://cdn.discordapp.com/attachments/936607946018803835/936608247299854357/2312312312312312312.png"),
  // (sprite[10012][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614994806710342/door_wo213123123123od.png"),
  // (sprite[10013][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614908697665566/door_w3123123123ood.png"),
  // (sprite[10014][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614994534092880/door_3123123123123.png"),
  // (sprite[10015][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614908374687754/23213123123123.png"),
  // (sprite[10016][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614994169184267/312312312.png"),
  // (sprite[10017][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614908131409930/door_123312312312321312.png"),
  // (sprite[10018][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614993858789486/door_diamo312312312nd.png"),
  // (sprite[10019][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614907900735539/door_dia3123123123mond.png"),
  // (sprite[10020][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614993506476052/door_amet2hyst.png"),
  // (sprite[10021][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614907661664276/door_amethy1st.png"),
  // (sprite[10022][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614993187700766/door_43423421414324.png"),
  // (sprite[10023][0].src =
  //   "https://cdn.discordapp.com/attachments/936612174263111681/936614907456151572/door_12312312312321321.png"),
  // (sprite[10024][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612068155596820/spike_amethy12312312st.png"),
  // (sprite[10025][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611884927430686/spike_ameth421341234yst.png"),
  // (sprite[10026][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612067660673064/spike_am2131324ethyst.png"),
  // (sprite[10027][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611884642230312/spike_amethyst.p31231231sd.png"),
  // (sprite[10028][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612067283189770/spike_amet4134123412hyst.png"),
  // (sprite[10029][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611884390563880/spike_ameth123123123yst.png"),
  // (sprite[10030][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612066872139856/spike_3423412342314123.png"),
  // (sprite[10031][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611884180836392/spike_amethyst123123123.png"),
  // (sprite[10032][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612066524037180/312312312amethyst.png"),
  // (sprite[10033][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611883941785631/spike_amet12312312hyst.png"),
  // (sprite[10034][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936612066171695164/spike_ameth12312312312yst.png"),
  // (sprite[10035][0].src =
  //   "https://cdn.discordapp.com/attachments/936609104489771008/936611883715264562/spike_amet1234hyst.png "),
  (sprite[1e4][1] = sprite[1e4][0]),
  (sprite[10001][1] = sprite[10001][0]),
  (sprite[10002][1] = sprite[10002][0]),
  (sprite[10003][1] = sprite[10003][0]),
  (sprite[10004][1] = sprite[10004][0]),
  (sprite[10005][1] = sprite[10005][0]),
  (sprite[10006][1] = sprite[10006][0]),
  (sprite[10007][1] = sprite[10007][0]),
  (sprite[10008][1] = sprite[10008][0]),
  (sprite[10009][1] = sprite[10009][0]),
  (sprite[10010][1] = sprite[10010][0]),
  (sprite[10011][1] = sprite[10011][0]),
  (sprite[10012][1] = sprite[10012][0]),
  (sprite[10013][1] = sprite[10013][0]),
  (sprite[10014][1] = sprite[10014][0]),
  (sprite[10015][1] = sprite[10015][0]),
  (sprite[10016][1] = sprite[10016][0]),
  (sprite[10017][1] = sprite[10017][0]),
  (sprite[10018][1] = sprite[10018][0]),
  (sprite[10019][1] = sprite[10019][0]),
  (sprite[10020][1] = sprite[10020][0]),
  (sprite[10021][1] = sprite[10021][0]),
  (sprite[10022][1] = sprite[10022][0]),
  (sprite[10023][1] = sprite[10023][0]),
  (sprite[10024][1] = sprite[10024][0]),
  (sprite[10025][1] = sprite[10025][0]),
  (sprite[10026][1] = sprite[10026][0]),
  (sprite[10027][1] = sprite[10027][0]),
  (sprite[10028][1] = sprite[10028][0]),
  (sprite[10029][1] = sprite[10029][0]),
  (sprite[10030][1] = sprite[10030][0]),
  (sprite[10031][1] = sprite[10031][0]),
  (sprite[10032][1] = sprite[10032][0]),
  (sprite[10033][1] = sprite[10033][0]),
  (sprite[10034][1] = sprite[10034][0]),
  (sprite[10035][1] = sprite[10035][0]),
  (MINIMAP_UTILS.g = []),
  (MINIMAP_UTILS.g[0] = [IMAGES.MAPDAY_GOLD1, IMAGES.MAPNIGHT_GOLD1]),
  (MINIMAP_UTILS.g[1] = MINIMAP_UTILS.g[0]),
  (MINIMAP_UTILS.g[2] = [IMAGES.MAPDAY_GOLD2, IMAGES.MAPNIGHT_GOLD2]),
  (MINIMAP_UTILS.m = []),
  (MINIMAP_UTILS.m[0] = [IMAGES.MAPDAY_EMERALD1, IMAGES.MAPNIGHT_EMERALD1]),
  (MINIMAP_UTILS.m[1] = MINIMAP_UTILS.m[0]),
  (MINIMAP_UTILS.m[2] = [IMAGES.MAPDAY_EMERALD2, IMAGES.MAPNIGHT_EMERALD2]),
  (MINIMAP_UTILS.la = []),
  (MINIMAP_UTILS.la[0] = [IMAGES.MAPDAY_MAGMA, IMAGES.MAPNIGHT_MAGMA]),
  (MINIMAP_UTILS.la[1] = MINIMAP_UTILS.la[0]),
  (MINIMAP_UTILS.la[2] = MINIMAP_UTILS.la[0]),
  (MINIMAP_UTILS.la[3] = MINIMAP_UTILS.la[0]),
  (MINIMAP_UTILS.la[4] = MINIMAP_UTILS.la[0]),
  (MINIMAP_UTILS.la[5] = MINIMAP_UTILS.la[0]),
  (MINIMAP_UTILS.s = []),
  (MINIMAP_UTILS.s[0] = [IMAGES.MAPDAY_STONE1, IMAGES.MAPNIGHT_STONE1]),
  (MINIMAP_UTILS.s[1] = MINIMAP_UTILS.s[0]),
  (MINIMAP_UTILS.s[2] = [IMAGES.MAPDAY_STONE2, IMAGES.MAPNIGHT_STONE2]),
  (MINIMAP_UTILS.p = []),
  (MINIMAP_UTILS.p[0] = [IMAGES.MAPDAY_BERRY, IMAGES.MAPDAY_BERRY]),
  (MINIMAP_UTILS.a = []),
  (MINIMAP_UTILS.a[0] = [IMAGES.MAPDAY_AMETHYST, IMAGES.MAPNIGHT_AMETHYST]),
  (MINIMAP_UTILS.a[1] = MINIMAP_UTILS.a[0]),
  (MINIMAP_UTILS.a[2] = MINIMAP_UTILS.a[0]),
  (MINIMAP_UTILS.d = []),
  (MINIMAP_UTILS.d[0] = [IMAGES.MAPDAY_DIAMOND, IMAGES.MAPNIGHT_DIAMOND]),
  (MINIMAP_UTILS.d[1] = MINIMAP_UTILS.d[0]),
  (MINIMAP_UTILS.d[2] = MINIMAP_UTILS.d[0]),
  (MINIMAP_UTILS.re = []),
  (MINIMAP_UTILS.re[0] = [IMAGES.MAPDAY_REIDITE, IMAGES.MAPNIGHT_REIDITE]),
  (MINIMAP_UTILS.re[1] = MINIMAP_UTILS.re[0]),
  (MINIMAP_UTILS.re[2] = MINIMAP_UTILS.re[0]),
  (MINIMAP_UTILS.f = []),
  (MINIMAP_UTILS.f[0] = [IMAGES.MAPDAY_FIR_TREE, IMAGES.MAPNIGHT_FIR_TREE]),
  (MINIMAP_UTILS.f[1] = MINIMAP_UTILS.f[0]),
  (MINIMAP_UTILS.f[2] = MINIMAP_UTILS.f[0]),
  (MINIMAP_UTILS.isl = []),
  (MINIMAP_UTILS.isl[0] = [IMAGES.MAPDAY_ISLAND, IMAGES.MAPNIGHT_ISLAND]),
  (MINIMAP_UTILS.isl[1] = MINIMAP_UTILS.isl[0]),
  (MINIMAP_UTILS.isl[2] = MINIMAP_UTILS.isl[0]),
  (MINIMAP_UTILS.c = []),
  (MINIMAP_UTILS.c[0] = [IMAGES.MAPDAY_CACTUS, IMAGES.MAPNIGHT_CACTUS]),
  (MINIMAP_UTILS.c[1] = MINIMAP_UTILS.c[0]),
  (MINIMAP_UTILS.c[2] = MINIMAP_UTILS.c[0]),
  (MINIMAP_UTILS.wtb = []),
  (MINIMAP_UTILS.wtb[0] = [IMAGES.MAPDAY_RIVER, IMAGES.MAPNIGHT_RIVER]),
  (MINIMAP_UTILS.PIRANHA = [IMAGES.MAPDAY_PIRANHA, IMAGES.MAPNIGHT_PIRANHA]),
  (MINIMAP_UTILS.KRAKEN = [IMAGES.MAPDAY_KRAKEN, IMAGES.MAPNIGHT_KRAKEN]),
  (MINIMAP_UTILS.FOX = [IMAGES.MAPDAY_FOX, IMAGES.MAPNIGHT_FOX]),
  (MINIMAP_UTILS.WOLF = [IMAGES.MAPDAY_WOLF, IMAGES.MAPNIGHT_WOLF]),
  (MINIMAP_UTILS.SPIDER = [IMAGES.MAPDAY_SPIDER, IMAGES.MAPNIGHT_SPIDER]),
  (MINIMAP_UTILS.BEAR = [IMAGES.MAPDAY_BEAR, IMAGES.MAPNIGHT_BEAR]),
  (MINIMAP_UTILS.CAVE = [IMAGES.MAPDAY_CAVE, IMAGES.MAPNIGHT_CAVE]),
  (MINIMAP_UTILS.MAP = [IMAGES.BIGDAY, IMAGES.BIGNIGHT]),
  (MINIMAP_UTILS.FOREST = [IMAGES.MAPDAY_FOREST, IMAGES.MAPNIGHT_FOREST]),
  (MINIMAP_UTILS.WINTER = [IMAGES.MAPDAY_WINTER, IMAGES.MAPNIGHT_WINTER]),
  (MINIMAP_UTILS.DESERT = [IMAGES.MAPDAY_DESERT, IMAGES.MAPNIGHT_DESERT]),
  (MINIMAP_UTILS.LAVA = [IMAGES.MAPDAY_LAVA, IMAGES.MAPNIGHT_LAVA]),
  MINIMAP_UTILS))
    for (var r = MINIMAP_UTILS[e], a = 0; a < r.length; a++) {
      var o = r[a];
      if (void 0 !== o.tryLoad) o.tryLoad();
      else if (0 < o.length)
        for (var n = 0; n < o.length; n++)
          void 0 !== o[n].tryLoad && o[n].tryLoad();
    }
  console.log("Load images", Date.now() - t);
}
function create_images() {
  var d = new Date().getTime();
  _load_images();
  render_inventory();
  sprite[SPRITE.BUBBLES] = [];
  sprite[SPRITE.BUBBLES][SPRITE.DAY] = [];
  sprite[SPRITE.BUBBLES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.BUBBLES_SIZES; i++) {
    sprite[SPRITE.BUBBLES][SPRITE.DAY].push(
      CTI(create_flake(1, 4 + i, "#59B8CE"))
    );
    sprite[SPRITE.BUBBLES][SPRITE.NIGHT].push(
      CTI(create_flake(1, 4 + i, "#90DDD9"))
    );
  }
  sprite[SPRITE.FLAKES] = [];
  sprite[SPRITE.FLAKES][SPRITE.DAY] = [];
  sprite[SPRITE.FLAKES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.FLAKES_SIZES; i++) {
    sprite[SPRITE.FLAKES][SPRITE.DAY].push(CTI(create_flake(1, 4 + i, "#fff")));
    sprite[SPRITE.FLAKES][SPRITE.NIGHT].push(
      CTI(create_flake(1, 4 + i, "#fff"))
    );
  }
  sprite[SPRITE.DESERT] = [];
  sprite[SPRITE.DESERT][SPRITE.DAY] = [];
  sprite[SPRITE.DESERT][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.FLAKES_SIZES; i++) {
    sprite[SPRITE.DESERT][SPRITE.DAY].push(
      CTI(create_flake(1, 6 + i, "#DDCD8A"))
    );
    sprite[SPRITE.DESERT][SPRITE.NIGHT].push(
      CTI(create_flake(1, 6 + i, "#155E57"))
    );
  }
  sprite[SPRITE.ASHES] = [];
  sprite[SPRITE.ASHES][SPRITE.DAY] = [];
  sprite[SPRITE.ASHES][SPRITE.NIGHT] = [];
  for (var i = 0; i < SPRITE.ASHES_SIZES; i++) {
    sprite[SPRITE.ASHES][SPRITE.DAY].push(
      CTI(create_flake(1, 4 + i, "#353326"))
    );
    sprite[SPRITE.ASHES][SPRITE.NIGHT].push(
      CTI(create_flake(1, 4 + i, "#1D2526"))
    );
  }
  sprite[SPRITE.GARLAND] = [];
  sprite[SPRITE.GARLAND][SPRITE.DAY] = CTI(
    create_garland(1.5, true, ["#ee71a9"])
  );
  sprite[SPRITE.GARLAND][SPRITE.NIGHT] = CTI(
    create_garland(1.5, true, ["#ee71a9"])
  );
  sprite[SPRITE.GARLANDS] = [sprite[SPRITE.GARLAND]];
  sprite[SPRITE.GARLANDS][1] = [];
  sprite[SPRITE.GARLANDS][2] = [];
  sprite[SPRITE.GARLANDS][3] = [];
  sprite[SPRITE.GARLANDS][4] = [];
  sprite[SPRITE.GARLANDS][1][SPRITE.DAY] = CTI(
    create_garland(1.5, true, ["#e2d63b"])
  );
  sprite[SPRITE.GARLANDS][1][SPRITE.NIGHT] = CTI(
    create_garland(1.5, true, ["#e2d63b"])
  );
  sprite[SPRITE.GARLANDS][2][SPRITE.DAY] = CTI(
    create_garland(1.5, true, ["#309cbd"])
  );
  sprite[SPRITE.GARLANDS][2][SPRITE.NIGHT] = CTI(
    create_garland(1.5, true, ["#309cbd"])
  );
  sprite[SPRITE.GARLANDS][3][SPRITE.DAY] = CTI(
    create_garland(1.5, true, ["#cd232d"])
  );
  sprite[SPRITE.GARLANDS][3][SPRITE.NIGHT] = CTI(
    create_garland(1.5, true, ["#cd232d"])
  );
  sprite[SPRITE.GARLANDS][4][SPRITE.DAY] = CTI(
    create_garland(1.5, true, ["#42b672"])
  );
  sprite[SPRITE.GARLANDS][4][SPRITE.NIGHT] = CTI(
    create_garland(1.5, true, ["#42b672"])
  );
  var _0xa22e34 = Utils.gup("cti", window.location.href);
  if (_0xa22e34) {
    document.getElementById("version").innerHTML += "[CTI]";
  } else {
    CTI = function (_0x1fd522) {
      return (_0x1fd522.loaded = 1), _0x1fd522;
    };
  }
  sprite[SPRITE.MARKET_BGD] = CTI(create_background_market());
  sprite[SPRITE.STONES] = [];
  sprite[SPRITE.STONES][SPRITE.DAY] = [];
  sprite[SPRITE.STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.STONES][SPRITE.DAY].push(
    CTI(create_stone(1.1, false, ["#0a2d18", "#c3d1cb", "#e4efe8"]))
  );
  sprite[SPRITE.STONES][SPRITE.DAY].push(
    CTI(create_stone(0.9, false, ["#0a2d18", "#c3d1cb", "#e4efe8"]))
  );
  sprite[SPRITE.STONES][SPRITE.DAY].push(
    CTI(create_stone(0.6, false, ["#0a2d18", "#c3d1cb", "#e4efe8"]))
  );
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(
    CTI(create_stone(1.1, false, ["#0a2728", "#3c8e88", "#40a39b"]))
  );
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(
    CTI(create_stone(0.9, false, ["#0a2728", "#3c8e88", "#40a39b"]))
  );
  sprite[SPRITE.STONES][SPRITE.NIGHT].push(
    CTI(create_stone(0.6, false, ["#0a2728", "#3c8e88", "#40a39b"]))
  );
  sprite[SPRITE.GOLD] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD][SPRITE.DAY].push(
    CTI(create_gold(1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD][SPRITE.DAY].push(
    CTI(create_gold(1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD][SPRITE.DAY].push(
    CTI(create_gold(1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(
    CTI(create_gold(1.5, false, ["#030d14", "#1b4444", "#16605a"]))
  );
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(
    CTI(create_gold(1.3, false, ["#030d14", "#1b4444", "#16605a"]))
  );
  sprite[SPRITE.GOLD][SPRITE.NIGHT].push(
    CTI(create_gold(1.1, false, ["#030d14", "#1b4444", "#16605a"]))
  );
  sprite[SPRITE.DIAMOND] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(
    CTI(create_diamond(1.1, false, ["#232828", "#3fc9c9", "#74ede6"]))
  );
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(
    CTI(create_diamond(0.9, false, ["#232828", "#3fc9c9", "#74ede6"]))
  );
  sprite[SPRITE.DIAMOND][SPRITE.DAY].push(
    CTI(create_diamond(0.7, false, ["#232828", "#3fc9c9", "#74ede6"]))
  );
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(
    CTI(create_diamond(1.1, false, ["#030d14", "#2b9390", "#57bcb5"]))
  );
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(
    CTI(create_diamond(0.9, false, ["#030d14", "#2b9390", "#57bcb5"]))
  );
  sprite[SPRITE.DIAMOND][SPRITE.NIGHT].push(
    CTI(create_diamond(0.7, false, ["#030d14", "#2b9390", "#57bcb5"]))
  );
  sprite[SPRITE.ALOE_VERA] = [];
  sprite[SPRITE.ALOE_VERA][SPRITE.DAY] = IMAGES.ALOE_VERAD;
  sprite[SPRITE.ALOE_VERA][SPRITE.NIGHT] = IMAGES.ALOE_VERAN;
  sprite[SPRITE.HAND_SHADOW] = [];
  sprite[SPRITE.HAND_SHADOW][SPRITE.DAY] = CTI(
    create_hand_shadow(0.6, ["#0d1b1c"])
  );
  sprite[SPRITE.HAND_SHADOW][SPRITE.NIGHT] = CTI(
    create_hand_shadow(0.6, ["#030d14"])
  );
  sprite[SPRITE.GLOVES_HOOD] = [];
  sprite[SPRITE.GLOVES_HOOD][SPRITE.DAY] = CTI(
    create_hand(0.6, ["#2a2938", "#242330"])
  );
  sprite[SPRITE.GLOVES_HOOD][SPRITE.NIGHT] = CTI(
    create_hand(0.6, ["#1b1e30", "#161921"])
  );
  sprite[SPRITE.ZOMBIE_BODY] = [];
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.DAY] = CTI(
    create_zombie_boss(0.6, true, [
      "#0d1b1c",
      "#759e6e",
      "#55604b",
      "#7d7252",
      "#575043",
    ])
  );
  sprite[SPRITE.ZOMBIE_BODY][SPRITE.NIGHT] = CTI(
    create_zombie_boss(0.6, true, [
      "#030d14",
      "#11635e",
      "#02373e",
      "#0b524d",
      "#07423f",
    ])
  );
  sprite[SPRITE.ZOMBIE_HEAD] = [];
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.DAY] = CTI(
    create_zombie_head(0.6, true, [
      "#0d1b1c",
      "#759e6e",
      "#55604b",
      "#f9ccd4",
      "#891a1e",
      "#da232e",
      "#a52026",
      "#a02d28",
      "#721819",
      "#FFFFFF",
    ])
  );
  sprite[SPRITE.ZOMBIE_HEAD][SPRITE.NIGHT] = CTI(
    create_zombie_head(0.6, true, [
      "#030d14",
      "#11635e",
      "#02373e",
      "#167771",
      "#0c5752",
      "#401d49",
      "#2e1336",
      "#261336",
      "#23163c",
      "#FFFFFF",
    ])
  );
  sprite[SPRITE.ZOMBIE_HAND] = [];
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.DAY] = CTI(
    create_zombie_hand(0.4, ["#0d1b1c", "#759e6e", "#55604b"])
  );
  sprite[SPRITE.ZOMBIE_HAND][SPRITE.NIGHT] = CTI(
    create_zombie_hand(0.4, ["#030d14", "#11635e", "#02373e"])
  );
  sprite[SPRITE.ZOMBIE_HURT] = CTI(create_zombie_hurt(0.6, ["#BB0000"]));
  sprite[SPRITE.ZOMBIE_HUNGER] = CTI(create_zombie_hurt(0.6, ["#DBE71C"]));
  sprite[SPRITE.ZOMBIE_HEAL] = CTI(create_zombie_hurt(0.6, ["#00BB00"]));
  sprite[SPRITE.TREE] = [];
  sprite[SPRITE.TREE][SPRITE.DAY] = [];
  sprite[SPRITE.TREE][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      1.1,
      ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      1.1,
      ["#242503", "#8e7c0c", "#6d5903", "#9e8320", "#f0f4f0", "#FFFFFF"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      0.9,
      ["#242503", "#898e0c", "#757303", "#9e9b20", "#f0f4f0", "#FFFFFF"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      0.9,
      ["#242503", "#963400", "#7c2200", "#a83204", "#f0f4f0", "#FFFFFF"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      0.7,
      ["#242503", "#6d5a09", "#77591a", "#7b5a1f", "#f0f4f0", "#FFFFFF"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY].push(
    create_apricot_tree(
      0.7,
      ["#242503", "#703700", "#813009", "#813009", "#f0f4f0", "#FFFFFF"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      1.1,
      ["#030d14", "#12493d", "#0e3831", "#155247", "#f0f4f0", "#16695f"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      1.1,
      ["#030d14", "#12493d", "#0e3831", "#155247", "#16695f"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      0.9,
      ["#030d14", "#0b3629", "#144437", "#174235", "#16695f"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      0.9,
      ["#030d14", "#0d2522", "#0c2821", "#0d2a28", "#16695f"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      0.7,
      ["#030d14", "#082b1f", "#073328", "#073327", "#16695f"],
      false,
      0
    )
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT].push(
    create_apricot_tree(
      0.7,
      ["#030d14", "#0c2823", "#0b2b23", "#0c2d24", "#16695f"],
      true,
      0
    )
  );
  sprite[SPRITE.TREE_BRANCH] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT] = [];
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          1.1,
          ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"],
          false
        ),
        sprite[SPRITE.TREE][SPRITE.DAY][0]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          1.1,
          ["#242503", "#4d2d14", "#432516", "#756608", "#5b4a02", "#8b731b"],
          true
        ),
        sprite[SPRITE.TREE][SPRITE.DAY][1]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          1.1,
          ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"],
          false
        ),
        sprite[SPRITE.TREE][SPRITE.NIGHT][0]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          1.1,
          ["#030d14", "#031619", "#041c21", "#0e3b31", "#0b2e28", "#10443a"],
          true
        ),
        sprite[SPRITE.TREE][SPRITE.NIGHT][1]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          0.9,
          ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"],
          false
        ),
        sprite[SPRITE.TREE][SPRITE.DAY][2]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.DAY].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          0.9,
          ["#242503", "#4d2d14", "#432516", "#6d6c09", "#686609", "#777310"],
          true
        ),
        sprite[SPRITE.TREE][SPRITE.DAY][2]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          0.9,
          ["#030d14", "#031619", "#041c21", "#0d2522", "#0c2821", "#0d2a28"],
          false
        ),
        sprite[SPRITE.TREE][SPRITE.NIGHT][2]
      )
    )
  );
  sprite[SPRITE.TREE_BRANCH][SPRITE.NIGHT].push(
    CTI(
      create_apricot_forest(
        create_tree_branch(
          0.9,
          ["#030d14", "#031619", "#041c21", "#0c2823", "#0b2b23", "#0c2d24"],
          true
        ),
        sprite[SPRITE.TREE][SPRITE.NIGHT][3]
      )
    )
  );
  sprite[SPRITE.TREE][SPRITE.DAY][5] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][5]);
  sprite[SPRITE.TREE][SPRITE.DAY][4] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][4]);
  sprite[SPRITE.TREE][SPRITE.DAY][3] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][3]);
  sprite[SPRITE.TREE][SPRITE.DAY][2] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][2]);
  sprite[SPRITE.TREE][SPRITE.DAY][1] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][1]);
  sprite[SPRITE.TREE][SPRITE.DAY][0] = CTI(sprite[SPRITE.TREE][SPRITE.DAY][0]);
  sprite[SPRITE.TREE][SPRITE.NIGHT][5] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][5]
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT][4] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][4]
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT][3] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][3]
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT][2] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][2]
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT][1] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][1]
  );
  sprite[SPRITE.TREE][SPRITE.NIGHT][0] = CTI(
    sprite[SPRITE.TREE][SPRITE.NIGHT][0]
  );
  sprite[SPRITE.PICK_WOOD] = [];
  sprite[SPRITE.PICK_WOOD][SPRITE.DAY] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#0d1b1c",
        "#000000",
        "#0d1b1c",
        "#4d2d14",
        "#432516",
        "#4d2d14",
        "#432516",
      ])
    )
  );
  sprite[SPRITE.PICK_WOOD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#030d14",
        "#000000",
        "#030d14",
        "#0d2e33",
        "#0b2326",
        "#0d2e33",
        "#0b2326",
      ])
    )
  );
  sprite[SPRITE.PICK] = [];
  sprite[SPRITE.PICK][SPRITE.DAY] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#0d1b1c",
        "#000000",
        "#0d1b1c",
        "#4d2d14",
        "#432516",
        "#939393",
        "#5f6061",
      ])
    )
  );
  sprite[SPRITE.PICK][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#030d14",
        "#000000",
        "#030d14",
        "#0d2e33",
        "#0b2326",
        "#485e66",
        "#1f343f",
      ])
    )
  );
  sprite[SPRITE.PICK_GOLD] = [];
  sprite[SPRITE.PICK_GOLD][SPRITE.DAY] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#0d1b1c",
        "#000000",
        "#0d1b1c",
        "#493e26",
        "#382e19",
        "#c4bc51",
        "#b29c32",
      ])
    )
  );
  sprite[SPRITE.PICK_GOLD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#030d14",
        "#000000",
        "#030d14",
        "#263947",
        "#263947",
        "#43aa82",
        "#29997c",
      ])
    )
  );
  sprite[SPRITE.PICK_DIAMOND] = [];
  sprite[SPRITE.PICK_DIAMOND][SPRITE.DAY] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#0d1b1c",
        "#000000",
        "#0d1b1c",
        "#262114",
        "#211108",
        "#63c9d6",
        "#29aaa1",
      ])
    )
  );
  sprite[SPRITE.PICK_DIAMOND][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#030d14",
        "#000000",
        "#030d14",
        "#111316",
        "#0a0b0c",
        "#73dde5",
        "#3dc4c0",
      ])
    )
  );
  sprite[SPRITE.PICK_AMETHYST] = [];
  sprite[SPRITE.PICK_AMETHYST][SPRITE.DAY] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#0d1b1c",
        "#000000",
        "#0d1b1c",
        "#262114",
        "#211108",
        "#b864d6",
        "#8c29aa",
      ])
    )
  );
  sprite[SPRITE.PICK_AMETHYST][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      4,
      create_pickaxe(0.75, true, [
        "#030d14",
        "#000000",
        "#030d14",
        "#111316",
        "#0a0b0c",
        "#8359d3",
        "#764eb5",
      ])
    )
  );
  sprite[SPRITE.PIRATE_SWORD] = [];
  sprite[SPRITE.PIRATE_SWORD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_pirate_sword(0.17, true, [
        "#0d1b1c",
        "#4a3a22",
        "#362818",
        "#c7c7c7",
        "#909090",
        "#eceaea",
        "#bbbbbb",
        "#d6d1d1",
      ])
    )
  );
  sprite[SPRITE.PIRATE_SWORD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_pirate_sword(0.17, true, [
        "#0d1b1c",
        "#0d2e33",
        "#0b2326",
        "#59737d",
        "#364f59",
        "#618395",
        "#4d768c",
        "#54859f",
      ])
    )
  );
  sprite[SPRITE.SUGAR_CAN] = [];
  sprite[SPRITE.SUGAR_CAN][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_sugar_can(0.32, true, [
        "#0d1b1c",
        "#ffffff",
        "#5f6061",
        "#eb2933",
        "#57b74e",
        "#42a54d",
        "#ac222a",
        "#e6636a",
      ])
    )
  );
  sprite[SPRITE.SUGAR_CAN][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_sugar_can(0.42, true, [
        "#0d1b1c",
        "#485e66",
        "#1f343f",
        "#0d2e33",
        "#0b2326",
      ])
    )
  );
  sprite[SPRITE.SWORD_WOOD] = [];
  sprite[SPRITE.SWORD_WOOD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_sword_wood(0.4, true, [
        "#0d1b1c",
        "#73583e",
        "#493425",
        "#7d6144",
        "#5e4530",
        "#473221",
        "#745840",
      ])
    )
  );
  sprite[SPRITE.SWORD_WOOD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_sword_wood(0.4, true, [
        "#0d1b1c",
        "#0b3d3a",
        "#092b2a",
        "#144642",
        "#082927",
        "#092b29",
      ])
    )
  );
  sprite[SPRITE.SWORD] = [];
  sprite[SPRITE.SWORD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_stonesword(0.4, true, [
        "#0d1b1c",
        "#939393",
        "#5f6061",
        "#b1afaf",
        "#493d36",
        "#332b28",
      ])
    )
  );
  sprite[SPRITE.SWORD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_stonesword(0.4, true, [
        "#0d1b1c",
        "#485e66",
        "#1f343f",
        "#5d757e",
        "#0d2e33",
        "#0b2326",
      ])
    )
  );
  sprite[SPRITE.SWORD_GOLD] = [];
  sprite[SPRITE.SWORD_GOLD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_goldsword(0.4, true, [
        "#0d1b1c",
        "#c4bc51",
        "#b29c32",
        "#c4bc51",
        "#493e26",
        "#382e19",
      ])
    )
  );
  sprite[SPRITE.SWORD_GOLD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_goldsword(0.4, true, [
        "#0d1b1c",
        "#43aa82",
        "#29997c",
        "#54bf96",
        "#263947",
        "#182935",
      ])
    )
  );
  sprite[SPRITE.SWORD_DIAMOND] = [];
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_diamondsword(0.4, true, [
        "#0d1b1c",
        "#6ad9e8",
        "#29aaa1",
        "#95e9f5",
        "#022320",
        "#011e19",
        "#FFFFFF",
      ])
    )
  );
  sprite[SPRITE.SWORD_DIAMOND][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_diamondsword(0.4, true, [
        "#0d1b1c",
        "#73dde5",
        "#3dc4c0",
        "#93eaf1",
        "#111316",
        "#0a0b0c",
      ])
    )
  );
  sprite[SPRITE.SWORD_AMETHYST] = [];
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_amesword(0.4, true, [
        "#0d1b1c",
        "#b864d6",
        "#8c29aa",
        "#cc81e7",
        "#262114",
        "#211108",
        "#FFFFFF",
      ])
    )
  );
  sprite[SPRITE.SWORD_AMETHYST][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_amesword(0.4, true, [
        "#0d1b1c",
        "#8359d3",
        "#764eb5",
        "#966de6",
        "#111316",
        "#0a0b0c",
      ])
    )
  );
  sprite[SPRITE.HERB] = [];
  sprite[SPRITE.HERB][SPRITE.DAY] = [];
  sprite[SPRITE.HERB][SPRITE.NIGHT] = [];
  sprite[SPRITE.HERB][SPRITE.DAY].push(
    CTI(create_herb(0.9, false, ["#0d4f35"], 0))
  );
  sprite[SPRITE.HERB][SPRITE.DAY].push(
    CTI(create_herb(0.9, false, ["#0d4f35"], 1))
  );
  sprite[SPRITE.HERB][SPRITE.DAY].push(
    CTI(create_herb(0.9, false, ["#0d4f35"], 2))
  );
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(
    CTI(create_herb(0.9, false, ["#053339"], 0))
  );
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(
    CTI(create_herb(0.9, false, ["#053339"], 1))
  );
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(
    CTI(create_herb(0.9, false, ["#053339"], 2))
  );
  sprite[SPRITE.HERB][SPRITE.DAY].push(
    CTI(create_leaf(0.8, ["#241301", "#ba6b0e", "#6d3f04"]))
  );
  sprite[SPRITE.HERB][SPRITE.DAY].push(
    CTI(create_leaf(0.8, ["#292002", "#ba930e", "#6d5704"]))
  );
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(
    CTI(create_leaf(0.9, ["#052919", "#0a4738", "#06321f"]))
  );
  sprite[SPRITE.HERB][SPRITE.NIGHT].push(
    CTI(create_leaf(0.8, ["#052918", "#08491c", "#063417"]))
  );
  sprite[SPRITE.SIGN] = [];
  sprite[SPRITE.SIGN][SPRITE.DAY] = CTI(
    create_rotated_img(
      Math.PI / 2,
      create_sign(0.25, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])
    )
  );
  sprite[SPRITE.SIGN][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      Math.PI / 2,
      create_sign(0.25, true, ["#030d14", "#082b22", "#0a2f2b", "#072824"])
    )
  );
  sprite[SPRITE.SIGN_BUTTON] = [];
  sprite[SPRITE.SIGN_BUTTON].push(
    CTI(create_sign_button(0.25, ["#44301b", "#57442a", "#523e26"], 0))
  );
  sprite[SPRITE.SIGN_BUTTON].push(
    CTI(
      create_sign_button(0.25, ["#4f371e", "#624d30", "#5e472c", "#eda80d"], 1)
    )
  );
  sprite[SPRITE.SIGN_BUTTON].push(
    CTI(
      create_sign_button(0.25, ["#382715", "#4e3c25", "#473620", "#d7990c"], 2)
    )
  );
  sprite[SPRITE.SYMBOLS] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT] = [];
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25"],
          1
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25"],
          1
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#4f9246"],
          2
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#030d14", "#082b22", "#0a2f2b", "#072824", "#4f9246"],
          2
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#ffffff"],
          3
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#ffffff"],
          3
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.DAY].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#0d1b1c", "#44301b", "#57442a", "#523e26", "#9b2b25", "#362513"],
          4
        )
      )
    )
  );
  sprite[SPRITE.SYMBOLS][SPRITE.NIGHT].push(
    CTI(
      create_rotated_img(
        Math.PI / 2,
        create_symbols(
          0.25,
          false,
          ["#030d14", "#082b22", "#0a2f2b", "#072824", "#9b2b25", "#664d2e"],
          4
        )
      )
    )
  );
  sprite[SPRITE.PLANT] = [];
  sprite[SPRITE.PLANT][SPRITE.DAY] = [
    CTI(create_plant(1.2, true, ["#352b10", "#80500b", "#7c4908"])),
  ];
  sprite[SPRITE.PLANT][SPRITE.NIGHT] = [
    CTI(create_plant(1.2, true, ["#030d14", "#0a3429", "#0a2f2b"])),
  ];
  sprite[SPRITE.DRIED_PLANT] = [];
  sprite[SPRITE.DRIED_PLANT][SPRITE.DAY] = CTI(
    create_plant(0.8, true, ["#0e3022", "#68622D", "#665329"])
  );
  sprite[SPRITE.DRIED_PLANT][SPRITE.NIGHT] = CTI(
    create_plant(0.8, true, ["#030d14", "#0F3A24", "#083326"])
  );
  sprite[SPRITE.PUMPKIN] = [];
  sprite[SPRITE.PUMPKIN][SPRITE.DAY] = CTI(
    create_pumpkin(0.5, true, [
      "#1b170c",
      "#c67933",
      "#a6692f",
      "#bd7533",
      "#86683e",
      "#6e502d",
    ])
  );
  sprite[SPRITE.PUMPKIN][SPRITE.NIGHT] = CTI(
    create_pumpkin(0.5, true, [
      "#030d14",
      "#0a3429",
      "#0a2f2b",
      "#082f25",
      "#082925",
      "#0a3630",
    ])
  );
  sprite[SPRITE.GARLIC] = [];
  sprite[SPRITE.GARLIC][SPRITE.DAY] = CTI(
    create_garlic(0.5, true, [
      "#1b170c",
      "#e8e8e8",
      "#d2cfcf",
      "#e0e1e0",
      "#c4c4c4",
    ])
  );
  sprite[SPRITE.GARLIC][SPRITE.NIGHT] = CTI(
    create_garlic(0.5, true, [
      "#030d14",
      "#2b5254",
      "#264a46",
      "#396260",
      "#244743",
    ])
  );
  sprite[SPRITE.THORNBUSH] = [];
  sprite[SPRITE.THORNBUSH][SPRITE.DAY] = CTI(
    create_brambles(0.5, true, [
      "#1b170c",
      "#349970",
      "#245c45",
      "#348361",
      "#e8e8e8",
      "#bbbbbb",
    ])
  );
  sprite[SPRITE.THORNBUSH][SPRITE.NIGHT] = CTI(
    create_brambles(0.5, true, [
      "#030d14",
      "#0d5551",
      "#074440",
      "#0f5c58",
      "#4e8784",
      "#3f7572",
    ])
  );
  sprite[SPRITE.PLANT_MINI] = [];
  sprite[SPRITE.PLANT_MINI][SPRITE.DAY] = CTI(
    create_plant(0.8, true, ["#1b170c", "#0b8052", "#077b49"])
  );
  sprite[SPRITE.PLANT_MINI][SPRITE.NIGHT] = CTI(
    create_plant(0.8, true, ["#030d14", "#084442", "#0a4049"])
  );
  sprite[SPRITE.DRIED_PUMPKIN] = [];
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.DAY] = CTI(
    create_pumpkin(0.5, true, [
      "#1b170c",
      "#68622D",
      "#665329",
      "#5e5823",
      "#86683e",
      "#6e502d",
    ])
  );
  sprite[SPRITE.DRIED_PUMPKIN][SPRITE.NIGHT] = CTI(
    create_pumpkin(0.5, true, [
      "#030d14",
      "#0F3A24",
      "#083326",
      "#0c301e",
      "#062a1f",
      "#083b2b",
    ])
  );
  sprite[SPRITE.DRIED_GARLIC] = [];
  sprite[SPRITE.DRIED_GARLIC][SPRITE.DAY] = CTI(
    create_garlic(0.5, true, [
      "#1b170c",
      "#adbe9e",
      "#7e9178",
      "#84aa84",
      "#527556",
    ])
  );
  sprite[SPRITE.DRIED_GARLIC][SPRITE.NIGHT] = CTI(
    create_garlic(0.5, true, [
      "#030d14",
      "#164a44",
      "#124244",
      "#13373b",
      "#133e3e",
    ])
  );
  sprite[SPRITE.DRIED_THORNBUSH] = [];
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.DAY] = CTI(
    create_brambles(0.5, true, [
      "#1b170c",
      "#7a9160",
      "#4a5e3c",
      "#637e5a",
      "#c5cfc0",
      "#8a9685",
    ])
  );
  sprite[SPRITE.DRIED_THORNBUSH][SPRITE.NIGHT] = CTI(
    create_brambles(0.5, true, [
      "#030d14",
      "#3e5d5b",
      "#2f4442",
      "#354e4c",
      "#637d7c",
      "#556b6a",
    ])
  );
  sprite[SPRITE.GIFT] = [];
  sprite[SPRITE.GIFT][SPRITE.DAY] = CTI(
    create_present(0.45, true, [
      "#0e3022",
      "#ac222a",
      "#98171e",
      "#22a84f",
      "#1f924a",
    ])
  );
  sprite[SPRITE.GIFT][SPRITE.NIGHT] = CTI(
    create_present(0.45, true, [
      "#0e3022",
      "#19386e",
      "#0b2752",
      "#124252",
      "#0d3441",
    ])
  );
  sprite[SPRITE.HURT_GIFT] = CTI(
    create_present(0.65, true, [
      "rgba(14, 48, 34, 0)",
      "#BB0000",
      "#BB0000",
      "#BB0000",
      "#BB0000",
    ])
  );
  sprite[SPRITE.FRUIT] = [];
  sprite[SPRITE.FRUIT][SPRITE.DAY] = CTI(
    create_fruit(1.4, false, ["#3d2a6e", "#8255b5"])
  );
  sprite[SPRITE.FRUIT][SPRITE.NIGHT] = CTI(
    create_fruit(1.4, false, ["#26124f", "#524082"])
  );
  sprite[SPRITE.FIRE] = [];
  sprite[SPRITE.FIRE][SPRITE.DAY] = CTI(
    create_fire(0.9, false, ["#efd435", "#ec8d35", "#e96132"])
  );
  sprite[SPRITE.FIRE][SPRITE.NIGHT] = CTI(
    create_fire(0.9, false, ["#efdb7b", "#efe854", "#e8ef62"])
  );
  sprite[SPRITE.BIG_FIRE_WOOD] = [];
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.DAY] = CTI(
    create_big_fire_wood(0.9, false, ["#4d2d14", "#432516"])
  );
  sprite[SPRITE.BIG_FIRE_WOOD][SPRITE.NIGHT] = CTI(
    create_big_fire_wood(0.9, false, ["#282404", "#0a0a01"])
  );
  sprite[SPRITE.WOOD_FIRE] = [];
  sprite[SPRITE.WOOD_FIRE][SPRITE.DAY] = CTI(
    create_wood_fire(0.9, false, ["#4d2d14", "#432516"])
  );
  sprite[SPRITE.WOOD_FIRE][SPRITE.NIGHT] = CTI(
    create_wood_fire(0.9, false, ["#282404", "#0a0a01"])
  );
  sprite[SPRITE.HALO_FIRE] = [];
  sprite[SPRITE.HALO_FIRE][SPRITE.DAY] = CTI(
    create_halo_fire(0.9, false, ["#efd435"])
  );
  sprite[SPRITE.HALO_FIRE][SPRITE.NIGHT] = CTI(
    create_halo_fire(0.9, false, ["#fffabb"])
  );
  sprite[SPRITE.GROUND_FIRE] = [];
  sprite[SPRITE.GROUND_FIRE][SPRITE.DAY] = CTI(
    create_ground_fire(0.9, false, ["#efd435"])
  );
  sprite[SPRITE.GROUND_FIRE][SPRITE.NIGHT] = CTI(
    create_ground_fire(0.9, false, ["#fffabb"])
  );
  sprite[SPRITE.HALO_FIRE_PUMPKIN] = [];
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.DAY] = CTI(
    create_halo_fire(0.9, false, ["#efd435"])
  );
  sprite[SPRITE.HALO_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(
    create_halo_fire(0.9, false, ["rgba(255, 84, 0, 1)"])
  );
  sprite[SPRITE.GROUND_FIRE_PUMPKIN] = [];
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.DAY] = CTI(
    create_ground_fire(0.9, false, ["#efd435"])
  );
  sprite[SPRITE.GROUND_FIRE_PUMPKIN][SPRITE.NIGHT] = CTI(
    create_ground_fire(0.9, false, ["#ff5704"])
  );
  sprite[SPRITE.GEAR] = CTI(create_gear(1, "#ffffff", 1));
  sprite[SPRITE.GEAR2] = CTI(create_gear(1.5, "#ffffff", 1));
  sprite[SPRITE.YOUR_SCORE] = CTI(create_text(1, "Your score:", 15, "#FFF"));
  sprite[SPRITE.WINDMILL_CASES] = CTI(
    create_windmill_chest(0.9, [
      "#596560",
      "#394841",
      "#543B1C",
      "#694D28",
      "#4D3C1A",
      "#694D28",
      "#DEE2E0",
      "#CDCCCC",
      "#7B5A31",
      "#7E8A85",
    ])
  );
  sprite[SPRITE.EXTRACTOR_CASES] = IMAGES.EXTRACTOR_CASES;
  sprite[SPRITE.WINDMILL] = [];
  sprite[SPRITE.WINDMILL][SPRITE.DAY] = CTI(
    create_windmill(1.5, true, [
      "#0d1b1c",
      "#596560",
      "#394841",
      "#67766F",
      "#46554D",
      "#4C3B19",
      "#674C2A",
      "#7C5A29",
      "#596560",
      "#394841",
    ])
  );
  sprite[SPRITE.WINDMILL][SPRITE.NIGHT] = CTI(
    create_windmill(1.5, true, [
      "#030d14",
      "#163A3A",
      "#214C4B",
      "#1a4545",
      "#225755",
      "#07393D",
      "#07454a",
      "#0c484d",
      "#163A3A",
      "#214C4B",
    ])
  );
  sprite[SPRITE.WINDMILL_WINGS] = [];
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.DAY] = CTI(
    create_windmill_wing(2, true, [
      "#0d1b1c",
      "#596560",
      "#394841",
      "#67766F",
      "#46554D",
      "#4C3B19",
      "#674C2A",
      "#7C5A29",
      "#596560",
      "#394841",
    ])
  );
  sprite[SPRITE.WINDMILL_WINGS][SPRITE.NIGHT] = CTI(
    create_windmill_wing(2, true, [
      "#030d14",
      "#163A3A",
      "#214C4B",
      "#1a4545",
      "#225755",
      "#07393D",
      "#07454a",
      "#0c484d",
      "#163A3A",
      "#214C4B",
    ])
  );
  sprite[SPRITE.WINDMILL_HEAD] = [];
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.DAY] = CTI(
    create_windmill_head(1.5, true, [
      "#0d1b1c",
      "#596560",
      "#394841",
      "#67766F",
      "#46554D",
      "#4C3B19",
      "#674C2A",
      "#7C5A29",
      "#596560",
      "#394841",
    ])
  );
  sprite[SPRITE.WINDMILL_HEAD][SPRITE.NIGHT] = CTI(
    create_windmill_head(1.5, true, [
      "#030d14",
      "#163A3A",
      "#214C4B",
      "#1a4545",
      "#225755",
      "#07393D",
      "#07454a",
      "#0c484d",
      "#163A3A",
      "#214C4B",
    ])
  );
  sprite[SPRITE.WILD_WHEAT] = [];
  sprite[SPRITE.WILD_WHEAT][SPRITE.DAY] = CTI(
    create_wheat(2.2, true, ["#A89F67", "#9E8456"])
  );
  sprite[SPRITE.WILD_WHEAT][SPRITE.NIGHT] = CTI(
    create_wheat(2.2, true, ["#0B4049", "#08383D"])
  );
  sprite[SPRITE.DRIED_WHEAT] = [];
  sprite[SPRITE.DRIED_WHEAT][SPRITE.DAY] = CTI(
    create_wheat(2.2, true, ["#68622D", "#665329"])
  );
  sprite[SPRITE.DRIED_WHEAT][SPRITE.NIGHT] = CTI(
    create_wheat(2.2, true, ["#0F3A24", "#083326"])
  );
  sprite[SPRITE.WHEAT_MOB] = [];
  sprite[SPRITE.WHEAT_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#A89F67", "#9E8456"])
  );
  sprite[SPRITE.WHEAT_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#15514F", "#0F3F3D"])
  );
  sprite[SPRITE.PUMPKIN_SEED_MOB] = [];
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#c67933", "#b17238"])
  );
  sprite[SPRITE.PUMPKIN_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#043c37", "#032b23"])
  );
  sprite[SPRITE.ALOE_VERA_SEED_MOB] = [];
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#3a8214", "#4a9c1e"])
  );
  sprite[SPRITE.ALOE_VERA_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#032d29", "#044640"])
  );
  sprite[SPRITE.GARLIC_SEED_MOB] = [];
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#e8e8e8", "#bbbbbb"])
  );
  sprite[SPRITE.GARLIC_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#1c6161", "#07413f"])
  );
  sprite[SPRITE.THORNBUSH_SEED_MOB] = [];
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#328a56", "#449573"])
  );
  sprite[SPRITE.THORNBUSH_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#043c37", "#032b23"])
  );
  sprite[SPRITE.CARROT_SEED_MOB] = [];
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#c98e2f", "#a36b11"])
  );
  sprite[SPRITE.CARROT_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#043c37", "#032b23"])
  );
  sprite[SPRITE.TOMATO_SEED_MOB] = [];
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#b22419", "#99110e"])
  );
  sprite[SPRITE.TOMATO_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#04323c", "#03222b"])
  );
  sprite[SPRITE.WATERMELON_SEED_MOB] = [];
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.DAY] = CTI(
    create_seed(0.8, true, ["#13a56d", "#098a58"])
  );
  sprite[SPRITE.WATERMELON_SEED_MOB][SPRITE.NIGHT] = CTI(
    create_seed(0.8, true, ["#043c37", "#032b23"])
  );
  sprite[SPRITE.WINDMILL_WHEAT_SEED] = create_craft_button(
    1,
    [
      {
        f: create_wheat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"],
      },
    ],
    1.2,
    ["#d2c77b", "#e7dc8f", "#bfb360"],
    0.7
  );
  sprite[SPRITE.BREAD_OVEN_WOOD] = create_craft_button(
    1,
    [
      {
        f: create_wood_fire,
        x: 0,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#4d2d14", "#432516"],
      },
    ],
    0.3,
    ["#d2c77b", "#e7dc8f", "#bfb360"],
    0.7
  );
  sprite[SPRITE.BREAD_OVEN_BREAD] = create_craft_button(
    1,
    [
      {
        f: create_bread,
        x: 0,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"],
      },
    ],
    0.15,
    ["#d2c77b", "#e7dc8f", "#bfb360"],
    0.7
  );
  sprite[SPRITE.EMPTY_SLOT] = create_craft_button(
    0.9,
    [],
    0.3,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.PLANT_SEED] = [];
  sprite[SPRITE.PLANT_SEED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#7d613e", "#9e7e5a"])
  );
  sprite[SPRITE.PLANT_SEED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#084442", "#125e5a"])
  );
  sprite[SPRITE.WHEAT_SEED] = [];
  sprite[SPRITE.WHEAT_SEED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#9E8456", "#A89F67"])
  );
  sprite[SPRITE.WHEAT_SEED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#1b6f6a", "#0d4e4c"])
  );
  sprite[SPRITE.WHEAT_SEED_DRIED] = [];
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#665329", "#68622D"])
  );
  sprite[SPRITE.WHEAT_SEED_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#083326", "#0F3A24"])
  );
  sprite[SPRITE.PLANT_PUMPKIN] = [];
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#c67933", "#ec952d"])
  );
  sprite[SPRITE.PLANT_PUMPKIN][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#0e6553", "#094437"])
  );
  sprite[SPRITE.PLANT_ALOE_VERA] = [];
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#375809", "#4b770e"])
  );
  sprite[SPRITE.PLANT_ALOE_VERA][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#09542d", "#0d5d2f"])
  );
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED] = [];
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#585809", "#72770e"])
  );
  sprite[SPRITE.PLANT_ALOE_VERA_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#295209", "#305d0d"])
  );
  sprite[SPRITE.PLANT_GARLIC] = [];
  sprite[SPRITE.PLANT_GARLIC][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#b9b094", "#e2d2c0"])
  );
  sprite[SPRITE.PLANT_GARLIC][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#126366", "#0d484b"])
  );
  sprite[SPRITE.PLANT_THORNBUSH] = [];
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#3f8662", "#30915d"])
  );
  sprite[SPRITE.PLANT_THORNBUSH][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#0e6553", "#094437"])
  );
  sprite[SPRITE.PLANT_PUMPKIN_DRIED] = [];
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#c79153", "#dfa868"])
  );
  sprite[SPRITE.PLANT_PUMPKIN_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#073927", "#075040"])
  );
  sprite[SPRITE.PLANT_GARLIC_DRIED] = [];
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#768b5b", "#819984"])
  );
  sprite[SPRITE.PLANT_GARLIC_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#0c4540", "#0e5153"])
  );
  sprite[SPRITE.PLANT_THORNBUSH_DRIED] = [];
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#567465", "#627c6e"])
  );
  sprite[SPRITE.PLANT_THORNBUSH_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#073927", "#075040"])
  );
  sprite[SPRITE.PLANT_CARROT] = [];
  sprite[SPRITE.PLANT_CARROT][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#996b3a", "#bf956b"])
  );
  sprite[SPRITE.PLANT_CARROT][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#0e6553", "#094437"])
  );
  sprite[SPRITE.PLANT_CARROT_DRIED] = [];
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#7a634a", "#a68f77"])
  );
  sprite[SPRITE.PLANT_CARROT_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#1e4d43", "#113c32"])
  );
  sprite[SPRITE.PLANT_TOMATO] = [];
  sprite[SPRITE.PLANT_TOMATO][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#99403c", "#bc796c"])
  );
  sprite[SPRITE.PLANT_TOMATO][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#1e434d", "#11303c"])
  );
  sprite[SPRITE.PLANT_TOMATO_DRIED] = [];
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#88504e", "#b3857c"])
  );
  sprite[SPRITE.PLANT_TOMATO_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#253b41", "#162930"])
  );
  sprite[SPRITE.PLANT_WATERMELON] = [];
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#0f8870", "#23af93"])
  );
  sprite[SPRITE.PLANT_WATERMELON][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#032829", "#083233"])
  );
  sprite[SPRITE.PLANT_WATERMELON_DRIED] = [];
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.DAY] = CTI(
    create_plant_seed(0.9, false, ["#618a20", "#84a74e"])
  );
  sprite[SPRITE.PLANT_WATERMELON_DRIED][SPRITE.NIGHT] = CTI(
    create_plant_seed(0.9, false, ["#1f4632", "#335d47"])
  );
  sprite[SPRITE.WORKBENCH] = [];
  sprite[SPRITE.WORKBENCH][SPRITE.DAY] = CTI(
    create_workbench(1.2, true, [
      "#0d1b1c",
      "#4d2d14",
      "#432516",
      "#756e52",
      "#663f22",
      "#9e9577",
    ])
  );
  sprite[SPRITE.WORKBENCH][SPRITE.NIGHT] = CTI(
    create_workbench(1.2, true, [
      "#030d14",
      "#0d2e33",
      "#072322",
      "#3e706b",
      "#123d3f",
      "#4e827c",
    ])
  );
  sprite[SPRITE.WALL] = [];
  sprite[SPRITE.WALL][SPRITE.DAY] = CTI(
    create_wall(1, true, [
      "#0d1b1c",
      "#4c3a15",
      "#634828",
      "#564021",
      "#634828",
      "#4c3a15",
    ])
  );
  sprite[SPRITE.WALL][SPRITE.NIGHT] = CTI(
    create_wall(1, true, [
      "#030d14",
      "#0d2e33",
      "#184747",
      "#123b3f",
      "#0d2e33",
      "#174444",
    ])
  );
  sprite[SPRITE.DIAMOND_WALL] = [];
  sprite[SPRITE.DIAMOND_WALL][SPRITE.DAY] = CTI(
    create_wall_diamond(1, true, [
      "#0d1b1c",
      "#5cc5ce",
      "#89d1d4",
      "#86d0d1",
      "#95d5d8",
      "#e0f2f6",
      "#b3e0e3",
    ])
  );
  sprite[SPRITE.DIAMOND_WALL][SPRITE.NIGHT] = CTI(
    create_wall_diamond(1, true, [
      "#030d14",
      "#2b9390",
      "#43b5af",
      "#43b5af",
      "#4bbcb4",
      "#83ddd4",
      "#59c9c0",
    ])
  );
  sprite[SPRITE.AMETHYST_WALL] = [];
  sprite[SPRITE.AMETHYST_WALL][SPRITE.DAY] = CTI(
    create_wall_stone(1, true, [
      "#0d1b1c",
      "#b15ecf",
      "#8c29aa",
      "#c26de0",
      "#af59cd",
      "#d588f1",
    ])
  );
  sprite[SPRITE.AMETHYST_WALL][SPRITE.NIGHT] = CTI(
    create_wall_stone(1, true, [
      "#030d14",
      "#8359d3",
      "#764eb5",
      "#8f65de",
      "#7f55cc",
      "#9d77e6",
    ])
  );
  sprite[SPRITE.STONE_WALL] = [];
  sprite[SPRITE.STONE_WALL][SPRITE.DAY] = CTI(
    create_wall_stone(1, true, [
      "#0d1b1c",
      "#6a7570",
      "#939995",
      "#9baaa3",
      "#adbcb5",
      "#8a938e",
    ])
  );
  sprite[SPRITE.STONE_WALL][SPRITE.NIGHT] = CTI(
    create_wall_stone(1, true, [
      "#030d14",
      "#163a3a",
      "#214c4b",
      "#1f4948",
      "#295957",
      "#1f5955",
    ])
  );
  sprite[SPRITE.GOLD_WALL] = [];
  sprite[SPRITE.GOLD_WALL][SPRITE.DAY] = CTI(
    create_wall_gold(1, true, [
      "#0d1b1c",
      "#877d36",
      "#a08f47",
      "#a7983c",
      "#b29e4d",
      "#c1b06b",
    ])
  );
  sprite[SPRITE.GOLD_WALL][SPRITE.NIGHT] = CTI(
    create_wall_gold(1, true, [
      "#030d14",
      "#1f4948",
      "#215e55",
      "#1f6058",
      "#2a7773",
      "#2c7a70",
    ])
  );
  sprite[SPRITE.SPIKE] = [];
  sprite[SPRITE.SPIKE][SPRITE.DAY] = CTI(
    create_spike(0.8, true, [
      "#0d1b1c",
      "#5f6061",
      "#939393",
      "#4c3a15",
      "#634828",
      "#564021",
      "#634828",
      "#4c3a15",
    ])
  );
  sprite[SPRITE.SPIKE][SPRITE.NIGHT] = CTI(
    create_spike(0.8, true, [
      "#030d14",
      "#1f343f",
      "#485e66",
      "#0d2e33",
      "#184747",
      "#123b3f",
      "#0d2e33",
      "#174444",
    ])
  );
  sprite[SPRITE.GOLD_SPIKE] = [];
  sprite[SPRITE.GOLD_SPIKE][SPRITE.DAY] = CTI(
    create_spike_gold(0.8, true, [
      "#0d1b1c",
      "#69685a",
      "#9c9683",
      "#877d36",
      "#a08f47",
      "#a7983c",
      "#b29e4d",
      "#c1b06b",
    ])
  );
  sprite[SPRITE.GOLD_SPIKE][SPRITE.NIGHT] = CTI(
    create_spike_gold(0.8, true, [
      "#030d14",
      "#1a3732",
      "#1e544c",
      "#1f4948",
      "#215e55",
      "#1f6058",
      "#2a7773",
      "#2c7a70",
    ])
  );
  sprite[SPRITE.DIAMOND_SPIKE] = [];
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.DAY] = CTI(
    create_spike_diamond(0.8, true, [
      "#0d1b1c",
      "#7d8b90",
      "#9facaa",
      "#5cc5ce",
      "#89d1d4",
      "#86d0d1",
      "#95d5d8",
      "#e0f2f6",
      "#b3e0e3",
    ])
  );
  sprite[SPRITE.DIAMOND_SPIKE][SPRITE.NIGHT] = CTI(
    create_spike_diamond(0.8, true, [
      "#030d14",
      "#2c4b55",
      "#546d77",
      "#2b9390",
      "#43b5af",
      "#43b5af",
      "#4bbcb4",
      "#83ddd4",
      "#59c9c0",
    ])
  );
  sprite[SPRITE.STONE_SPIKE] = [];
  sprite[SPRITE.STONE_SPIKE][SPRITE.DAY] = CTI(
    create_spike_stone(0.8, true, [
      "#0d1b1c",
      "#6a7570",
      "#939393",
      "#6a7570",
      "#939995",
      "#9baaa3",
      "#adbcb5",
      "#8a938e",
    ])
  );
  sprite[SPRITE.STONE_SPIKE][SPRITE.NIGHT] = CTI(
    create_spike_stone(0.8, true, [
      "#030d14",
      "#1f343f",
      "#485e66",
      "#163a3a",
      "#214c4b",
      "#1f4948",
      "#295957",
      "#1f5955",
    ])
  );
  sprite[SPRITE.AMETHYST_SPIKE] = [];
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.DAY] = CTI(
    create_spike_stone(0.8, true, [
      "#0d1b1c",
      "#6a7570",
      "#939393",
      "#b15ecf",
      "#8c29aa",
      "#c26de0",
      "#af59cd",
      "#d588f1",
    ])
  );
  sprite[SPRITE.AMETHYST_SPIKE][SPRITE.NIGHT] = CTI(
    create_spike_stone(0.8, true, [
      "#030d14",
      "#1f343f",
      "#485e66",
      "#8359d3",
      "#764eb5",
      "#8f65de",
      "#7f55cc",
      "#9d77e6",
    ])
  );
  sprite[SPRITE.DOOR_WOOD_CLOSE] = [];
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.DAY] = CTI(
    create_door_wood(1.5, true, [
      "#0d1b1c",
      "#4c3b19",
      "#574122",
      "#644928",
      "#574122",
      "#735534",
      "#23a54e",
      "#1f934a",
      "#208e48",
      "#b12c2a",
      "#9c2625",
      "#ebd6a4",
      "#cca73f",
    ])
  );
  sprite[SPRITE.DOOR_WOOD_CLOSE][SPRITE.NIGHT] = CTI(
    create_door_wood(1.5, true, [
      "#030d14",
      "#0d2e33",
      "#184747",
      "#123b3f",
      "#0d2e33",
      "#174444",
    ])
  );
  sprite[SPRITE.DOOR_WOOD_OPEN] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.DAY] = CTI(
    create_door_wood(1, false, [
      "#133a2b",
      "#133a2b",
      "#1a4935",
      "#1a4935",
      "#133a2b",
      "#1a4935",
    ])
  );
  sprite[SPRITE.DOOR_WOOD_OPEN][SPRITE.NIGHT] = CTI(
    create_door_wood(1, false, [
      "#042b30",
      "#042b30",
      "#0b342b",
      "#0b342b",
      "#042b30",
      "#0b342b",
    ])
  );
  sprite[SPRITE.DOOR_STONE_CLOSE] = [];
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.DAY] = CTI(
    create_door_stone(1.5, true, [
      "#0d1b1c",
      "#6a7570",
      "#939995",
      "#9baaa3",
      "#8a938e",
      "#adbcb5",
    ])
  );
  sprite[SPRITE.DOOR_STONE_CLOSE][SPRITE.NIGHT] = CTI(
    create_door_stone(1.5, true, [
      "#030d14",
      "#163a3a",
      "#214c4b",
      "#1f4948",
      "#164542",
      "#295957",
    ])
  );
  sprite[SPRITE.DOOR_STONE_OPEN] = [];
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.DAY] = CTI(
    create_door_stone(1, false, [
      "#133a2b",
      "#133a2b",
      "#1a4935",
      "#1a4935",
      "#133a2b",
      "#1a4935",
    ])
  );
  sprite[SPRITE.DOOR_STONE_OPEN][SPRITE.NIGHT] = CTI(
    create_door_stone(1, false, [
      "#032428",
      "#032428",
      "#07393d",
      "#07393d",
      "#032428",
      "#07393d",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_CLOSE] = [];
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.DAY] = CTI(
    create_door_stone(1.5, true, [
      "#0d1b1c",
      "#b15ecf",
      "#8c29aa",
      "#c26de0",
      "#af59cd",
      "#d588f1",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_CLOSE][SPRITE.NIGHT] = CTI(
    create_door_stone(1.5, true, [
      "#030d14",
      "#8359d3",
      "#764eb5",
      "#8f65de",
      "#7f55cc",
      "#9d77e6",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_OPEN] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.DAY] = CTI(
    create_door_stone(1, false, [
      "#133a2b",
      "#133a2b",
      "#1a4935",
      "#1a4935",
      "#133a2b",
      "#1a4935",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_OPEN][SPRITE.NIGHT] = CTI(
    create_door_stone(1, false, [
      "#032428",
      "#032428",
      "#07393d",
      "#07393d",
      "#032428",
      "#07393d",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_CLOSE] = [];
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.DAY] = CTI(
    create_door_gold(1.5, true, [
      "#0d1b1c",
      "#877d36",
      "#a08f47",
      "#a7983c",
      "#9a8636",
      "#c1b06b",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_CLOSE][SPRITE.NIGHT] = CTI(
    create_door_gold(1.5, true, [
      "#030d14",
      "#1f4948",
      "#215e55",
      "#1f6058",
      "#1f605c",
      "#2c7a70",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_OPEN] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.DAY] = CTI(
    create_door_gold(1, false, [
      "#133a2b",
      "#133a2b",
      "#1a4935",
      "#1a4935",
      "#133a2b",
      "#1a4935",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_OPEN][SPRITE.NIGHT] = CTI(
    create_door_gold(1, false, [
      "#032428",
      "#032428",
      "#07393d",
      "#07393d",
      "#032428",
      "#07393d",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_CLOSE] = [];
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.DAY] = CTI(
    create_door_diamond(1.5, true, [
      "#0d1b1c",
      "#5cc5ce",
      "#89d1d4",
      "#86d0d1",
      "#95d5d8",
      "#e0f2f6",
      "#b3e0e3",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_CLOSE][SPRITE.NIGHT] = CTI(
    create_door_diamond(1.5, true, [
      "#030d14",
      "#2b9390",
      "#43b5af",
      "#43b5af",
      "#4bbcb4",
      "#83ddd4",
      "#59c9c0",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_OPEN] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.DAY] = CTI(
    create_door_diamond(1, false, [
      "#133a2b",
      "#133a2b",
      "#1a4935",
      "#1a4935",
      "#133a2b",
      "#1a4935",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_OPEN][SPRITE.NIGHT] = CTI(
    create_door_diamond(1, false, [
      "#032428",
      "#032428",
      "#07393d",
      "#07393d",
      "#032428",
      "#07393d",
    ])
  );
  sprite[SPRITE.CHEST] = [];
  sprite[SPRITE.CHEST][SPRITE.DAY] = CTI(
    create_chest(0.5, true, [
      "#133a2b",
      "#9e8838",
      "#c4a23a",
      "#4c3b19",
      "#614627",
      "#614627",
      "#614627",
      "#c4a23a",
      "#c4a23a",
      "#c4a23a",
    ])
  );
  sprite[SPRITE.CHEST][SPRITE.NIGHT] = CTI(
    create_chest(0.5, true, [
      "#032428",
      "#266161",
      "#2b6664",
      "#123335",
      "#1f5453",
      "#1f5453",
      "#1f5453",
      "#2b6664",
      "#2b6664",
      "#2b6664",
    ])
  );
  sprite[SPRITE.TREASURE_CHEST] = [];
  sprite[SPRITE.TREASURE_CHEST][SPRITE.DAY] = CTI(
    create_treasure_chest(0.5, [
      "#133a2b",
      "#9e8838",
      "#c4a23a",
      "#4c3b19",
      "#614627",
    ])
  );
  sprite[SPRITE.TREASURE_CHEST][SPRITE.NIGHT] = CTI(
    create_treasure_chest(0.5, [
      "#032428",
      "#266161",
      "#2b6664",
      "#123335",
      "#1f5453",
    ])
  );
  sprite[SPRITE.RABBIT] = [];
  sprite[SPRITE.RABBIT][SPRITE.DAY] = CTI(
    create_rabbit(0.9, ["#0e3022", "#ee97bf", "#FFFFFF", "#000000", "#ffffff"])
  );
  sprite[SPRITE.RABBIT][SPRITE.NIGHT] = CTI(
    create_rabbit(0.9, ["#030d14", "#4d1b59", "#5d3f77", "#220e26", "#ffffff"])
  );
  sprite[SPRITE.SPIDER] = [];
  sprite[SPRITE.SPIDER][SPRITE.DAY] = CTI(
    create_rotated_img(
      Math.PI,
      create_spider(0.9, [
        "#000000",
        "#b7252c",
        "#b7252c",
        "#b7252c",
        "#FFFFFF",
        "#000000",
      ])
    )
  );
  sprite[SPRITE.SPIDER][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      Math.PI,
      create_spider(0.9, [
        "#030d14",
        "#401d49",
        "#b7252c",
        "#401d49",
        "#FFFFFF",
        "#000000",
      ])
    )
  );
  sprite[SPRITE.WEB] = CTI(create_web(0.6, ["#FFFFFF"]));
  sprite[SPRITE.WOLF] = [];
  sprite[SPRITE.WOLF][SPRITE.DAY] = CTI(
    create_wolf(1.1, ["#0e3022", "#231f20", "#b7252c", "#7d7679", "#ffffff"])
  );
  sprite[SPRITE.WOLF][SPRITE.NIGHT] = CTI(
    create_wolf(1.1, ["#030d14", "#1e181c", "#462966", "#3e3e4a", "#ffffff"])
  );
  sprite[SPRITE.EARMUFFS] = [];
  sprite[SPRITE.EARMUFFS][SPRITE.DAY] = CTI(
    create_earmuff(0.6, true, ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"])
  );
  sprite[SPRITE.EARMUFFS][SPRITE.NIGHT] = CTI(
    create_earmuff(0.6, true, ["#478e8b", "#327e73", "#073030", "#08403f"])
  );
  sprite[SPRITE.COAT] = [];
  sprite[SPRITE.COAT][SPRITE.DAY] = CTI(
    create_coat(0.6, true, ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"])
  );
  sprite[SPRITE.COAT][SPRITE.NIGHT] = CTI(
    create_coat(0.6, true, ["#073030", "#08403f", "#478e8b", "#327e73"])
  );
  sprite[SPRITE.CAP_SCARF] = [];
  sprite[SPRITE.CAP_SCARF][SPRITE.DAY] = CTI(
    create_cap_scarf(0.63, true, [
      "#171a19",
      "#dee7e7",
      "#b8cccb",
      "#ffffff",
      "#e3e8e8",
    ])
  );
  sprite[SPRITE.CAP_SCARF][SPRITE.NIGHT] = CTI(
    create_cap_scarf(0.63, true, [
      "#073030",
      "#368981",
      "#1c635e",
      "#7bbab4",
      "#469e95",
    ])
  );
  sprite[SPRITE.CHRISTMAS_HAT] = [];
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.DAY] = CTI(
    create_christmas_hat(0.6, true, [
      "#171a19",
      "#c5232c",
      "#84191d",
      "#a72027",
      "#fef4f4",
      "#e9dad9",
    ])
  );
  sprite[SPRITE.CHRISTMAS_HAT][SPRITE.NIGHT] = CTI(
    create_christmas_hat(0.6, true, [
      "#073030",
      "#392966",
      "#2a194f",
      "#433379",
      "#66aaa3",
      "#469e95",
    ])
  );
  sprite[SPRITE.ELF_HAT] = [];
  sprite[SPRITE.ELF_HAT][SPRITE.DAY] = CTI(
    create_elf_hat(0.6, true, [
      "#171a19",
      "#0f964c",
      "#106e3b",
      "#138344",
      "#fef4f4",
      "#e9dad9",
      "#C5232C",
      "#A92D2D",
    ])
  );
  sprite[SPRITE.ELF_HAT][SPRITE.NIGHT] = CTI(
    create_elf_hat(0.6, true, [
      "#073030",
      "#124949",
      "#0e3838",
      "#15514f",
      "#66aaa3",
      "#469e95",
      "#292f66",
      "#202559",
    ])
  );
  sprite[SPRITE.BREAD_OVEN_ON] = [];
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.DAY] = CTI(
    create_bread_oven(0.42, true, [
      "#0d1b1c",
      "#515C57",
      "#3A4942",
      "#68736F",
      "#C1C0C0",
      "#be8d50",
      "#7d5234",
      "#222825",
      "#4D5752",
      "#e48727",
      "#d4a872",
      "#343d39",
    ])
  );
  sprite[SPRITE.BREAD_OVEN_ON][SPRITE.NIGHT] = CTI(
    create_bread_oven(0.42, true, [
      "#0d1b1c",
      "#485E66",
      "#1F343F",
      "#60757D",
      "#C1C0C0",
      "#be8d50",
      "#7d5234",
      "#1F343F",
      "#344B51",
      "#D8E57F",
      "#dfa64e",
      "#192225",
    ])
  );
  sprite[SPRITE.BREAD_LIGHT_UP] = [];
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.DAY] = CTI(
    create_bread_light_up(0.9, ["#e4c027"])
  );
  sprite[SPRITE.BREAD_LIGHT_UP][SPRITE.NIGHT] = CTI(
    create_bread_light_up(0.9, ["#D8E57F"])
  );
  sprite[SPRITE.BREAD_OVEN_OFF] = [];
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.DAY] = CTI(
    create_bread_oven_off(0.42, true, [
      "#0d1b1c",
      "#515C57",
      "#3A4942",
      "#68736F",
      "#C1C0C0",
      "#be8d50",
      "#7d5234",
      "#222825",
      "#4D5752",
      "#e48727",
      "#d4a872",
      "#232a27",
    ])
  );
  sprite[SPRITE.BREAD_OVEN_OFF][SPRITE.NIGHT] = CTI(
    create_bread_oven_off(0.42, true, [
      "#0d1b1c",
      "#485E66",
      "#1F343F",
      "#60757D",
      "#C1C0C0",
      "#be8d50",
      "#7d5234",
      "#1F343F",
      "#344B51",
      "#D8E57F",
      "#dfa64e",
      "#1b2529",
    ])
  );
  sprite[SPRITE.BREAD_OVEN_UI] = CTI(
    create_bread_oven_ui(1, [
      "#596560",
      "#394841",
      "#543B1C",
      "#694D28",
      "#7E8A85",
      "#384740",
      "#525956",
    ])
  );
  sprite[SPRITE.FURNACE_ON] = [];
  sprite[SPRITE.FURNACE_ON][SPRITE.DAY] = CTI(
    create_furnace_on(0.5, true, [
      "#0d1b1c",
      "#939393",
      "#5f6061",
      "#c0c0c0",
      "#ffad22",
      "#fffdd5",
      "#fee764",
    ])
  );
  sprite[SPRITE.FURNACE_ON][SPRITE.NIGHT] = CTI(
    create_furnace_on(0.5, true, [
      "#0d1b1c",
      "#485e66",
      "#1f343f",
      "#60757d",
      "#ffdc73",
      "#fffce2",
      "#fef259",
    ])
  );
  sprite[SPRITE.FURNACE_OFF] = [];
  sprite[SPRITE.FURNACE_OFF][SPRITE.DAY] = CTI(
    create_furnace_off(0.5, true, [
      "#0d1b1c",
      "#939393",
      "#5f6061",
      "#c0c0c0",
      "#4f4f4f",
      "#6c6c6c",
      "#454545",
    ])
  );
  sprite[SPRITE.FURNACE_OFF][SPRITE.NIGHT] = CTI(
    create_furnace_off(0.5, true, [
      "#0d1b1c",
      "#485e66",
      "#1f343f",
      "#60757d",
      "#152229",
      "#0c1113",
      "#0c1113",
    ])
  );
  sprite[SPRITE.FURNACE_SLOT] = CTI(
    create_furnace_slot(0.8, true, ["#5f6061", "#939393"])
  );
  sprite[SPRITE.FURNACE_BUTTON] = create_craft_button(
    1,
    [
      {
        f: create_wood_fire,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"],
      },
    ],
    0.3,
    ["#494949", "#5b5858", "#3d3b3b"],
    1
  );
  sprite[SPRITE.BED] = [];
  sprite[SPRITE.BED][SPRITE.DAY] = CTI(
    create_bed(1, true, [
      "#0d1b1c",
      "#554139",
      "#3f332a",
      "#261912",
      "#eee6c5",
      "#d1c599",
      "#554139",
      "#3f332a",
      "#86509b",
      "#703a99",
    ])
  );
  sprite[SPRITE.BED][SPRITE.NIGHT] = CTI(
    create_bed(1, true, [
      "#0d1b1c",
      "#0b3432",
      "#092b29",
      "#052120",
      "#104d5b",
      "#0b424f",
      "#0b3432",
      "#092b29",
      "#2b0b4a",
      "#23073e",
    ])
  );
  sprite[SPRITE.BED_TOP] = [];
  sprite[SPRITE.BED_TOP][SPRITE.DAY] = CTI(
    create_bed_top(1, true, [
      "#0d1b1c",
      "#554139",
      "#3f332a",
      "#261912",
      "#eee6c5",
      "#d1c599",
      "#554139",
      "#3f332a",
      "#86509b",
      "#703a99",
    ])
  );
  sprite[SPRITE.BED_TOP][SPRITE.NIGHT] = CTI(
    create_bed_top(1, true, [
      "#0d1b1c",
      "#0b3432",
      "#092b29",
      "#052120",
      "#104d5b",
      "#083b37",
      "#0b3432",
      "#092b29",
      "#2b0b4a",
      "#23073e",
    ])
  );
  sprite[SPRITE.CRAB_SPEAR] = [];
  sprite[SPRITE.CRAB_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_crab_spear(0.7, true, [
        "#0d1b1c",
        "#58452b",
        "#47341d",
        "#ee593d",
        "#c04933",
        "#c04933",
        "#a33e2b",
        "#c3be9a",
        "#7f6d52",
      ])
    )
  );
  sprite[SPRITE.CRAB_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_crab_spear(0.7, true, [
        "#0d1b1c",
        "#0b3432",
        "#092b29",
        "#34255d",
        "#281b4e",
        "#2f2157",
        "#281b4e",
        "#104d5b",
        "#083b37",
      ])
    )
  );
  sprite[SPRITE.WOOD_SPEAR] = [];
  sprite[SPRITE.WOOD_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_wood_spear(0.7, true, [
        "#0d1b1c",
        "#58452b",
        "#47341d",
        "#765d42",
        "#c3be9a",
        "#7f6d52",
      ])
    )
  );
  sprite[SPRITE.WOOD_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_wood_spear(0.7, true, [
        "#0d1b1c",
        "#0b3432",
        "#092b29",
        "#0e4d49",
        "#1a6c67",
        "#07322f",
      ])
    )
  );
  sprite[SPRITE.SPEAR] = [];
  sprite[SPRITE.SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_stonespear(0.65, true, [
        "#0d1b1c",
        "#4d2d14",
        "#432516",
        "#c3be9a",
        "#7f6d52",
        "#7a7575",
        "#454749",
        "#8c8787",
        "#939393",
        "#5f6061",
        "#aaa6a6",
      ])
    )
  );
  sprite[SPRITE.SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_stonespear(0.65, true, [
        "#0d1b1c",
        "#0d2e33",
        "#0b2326",
        "#1a6c67",
        "#07322f",
        "#374950",
        "#101f26",
        "#2c3c42",
        "#485e66",
        "#1f343f",
        "#546e78",
      ])
    )
  );
  sprite[SPRITE.GOLD_SPEAR] = [];
  sprite[SPRITE.GOLD_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_goldspear(0.67, true, [
        "#0d1b1c",
        "#493e26",
        "#382e19",
        "#a69e39",
        "#9c8828",
        "#bab143",
        "#c4bc51",
        "#b29c32",
        "#d2ca59",
      ])
    )
  );
  sprite[SPRITE.GOLD_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_goldspear(0.67, true, [
        "#030d14",
        "#263947",
        "#182935",
        "#33916d",
        "#197c62",
        "#3eab81",
        "#43aa82",
        "#29997c",
        "#52be94",
      ])
    )
  );
  sprite[SPRITE.DIAMOND_SPEAR] = [];
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_diamondspear(0.67, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#4ba8b4",
        "#198a82",
        "#6ccad7",
        "#63c9d6",
        "#29aaa1",
        "#7bd9e6",
      ])
    )
  );
  sprite[SPRITE.DIAMOND_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_diamondspear(0.67, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#4bbbc3",
        "#23a19d",
        "#54c5cd",
        "#4ad2ce",
        "#3dc4c0",
        "#73dde5",
      ])
    )
  );
  sprite[SPRITE.AMETHYST_SPEAR] = [];
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_amespear(0.67, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#9443b1",
        "#6f1988",
        "#a752c6",
        "#9e35be",
        "#8c29aa",
        "#b864d6",
      ])
    )
  );
  sprite[SPRITE.AMETHYST_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_amespear(0.67, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#6e43bf",
        "#673fa4",
        "#784bcc",
        "#845bc6",
        "#764eb5",
        "#966be7",
      ])
    )
  );
  sprite[SPRITE.DRAGON_SPEAR] = [];
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_dragon_spear(1, true, [
        "#0d1b1c",
        "#1e2b34",
        "#151c24",
        "#99d7dd",
        "#7dcbd1",
        "#c6e8eb",
        "#aadee8",
        "#b7e2e5",
      ])
    )
  );
  sprite[SPRITE.DRAGON_SPEAR][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_dragon_spear(1, true, [
        "#0d1b1c",
        "#1c2026",
        "#0a0b0c",
        "#7dc6d9",
        "#6cbacf",
        "#87d2e6",
        "#49b2cf",
        "#87d2e6",
      ])
    )
  );
  sprite[SPRITE.HAMMER] = [];
  sprite[SPRITE.HAMMER][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#4d2d14",
        "#432516",
        "#939393",
        "#5f6061",
      ])
    )
  );
  sprite[SPRITE.HAMMER][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#030d14",
        "#263947",
        "#182935",
        "#485e66",
        "#1f343f",
      ])
    )
  );
  sprite[SPRITE.SPANNER] = [];
  sprite[SPRITE.SPANNER][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_spanner(0.5, true, ["#0d1b1c", "#939393", "#5f6061"])
    )
  );
  sprite[SPRITE.SPANNER][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_spanner(0.5, true, ["#030d14", "#485e66", "#1f343f"])
    )
  );
  sprite[SPRITE.SUPER_HAMMER] = [];
  sprite[SPRITE.SUPER_HAMMER][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_superhammer(1, true, [
        "#0d1b1c",
        "#9b5927",
        "#7a3610",
        "#1e0302",
        "#0d825b",
        "#6bd16e",
        "#17915d",
        "#89e5aa",
        "#16935d",
        "#a0efc4",
        "#28b26d",
        "#cdf4cb",
      ])
    )
  );
  sprite[SPRITE.SUPER_HAMMER][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_superhammer(1, true, [
        "#0d1b1c",
        "#2a4f4a",
        "#1e423d",
        "#1e0302",
        "#096b3f",
        "#3db76f",
        "#118254",
        "#40c696",
        "#0c7a50",
        "#59d8a4",
        "#249376",
        "#80d8c7",
      ])
    )
  );
  sprite[SPRITE.HAMMER_GOLD] = [];
  sprite[SPRITE.HAMMER_GOLD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#493e26",
        "#382e19",
        "#c4bc51",
        "#b29c32",
      ])
    )
  );
  sprite[SPRITE.HAMMER_GOLD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#0d2e33",
        "#0b2326",
        "#43aa82",
        "#29997c",
      ])
    )
  );
  sprite[SPRITE.HAMMER_DIAMOND] = [];
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#63c9d6",
        "#29aaa1",
      ])
    )
  );
  sprite[SPRITE.HAMMER_DIAMOND][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#73dde5",
        "#3dc4c0",
      ])
    )
  );
  sprite[SPRITE.HAMMER_AMETHYST] = [];
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#b864d6",
        "#8c29aa",
      ])
    )
  );
  sprite[SPRITE.HAMMER_AMETHYST][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_hammer(1, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#8359d3",
        "#764eb5",
      ])
    )
  );
  sprite[SPRITE.LOCK] = [];
  sprite[SPRITE.LOCK][SPRITE.DAY] = CTI(
    create_lock(0.55, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"])
  );
  sprite[SPRITE.LOCK][SPRITE.NIGHT] = CTI(
    create_lock(0.55, false, ["#080707", "#133d3c", "#2b6664", "#1b2529"])
  );
  sprite[SPRITE.PADLOCK] = [];
  sprite[SPRITE.PADLOCK].push(
    CTI(create_lock(0.8, false, ["#141414", "#816511", "#c4a23a", "#3a3a3a"]))
  );
  sprite[SPRITE.PADLOCK].push(
    CTI(create_lock(0.8, false, ["#141414", "#9f7d17", "#dab33c", "#474545"]))
  );
  sprite[SPRITE.PADLOCK].push(
    CTI(create_lock(0.8, false, ["#141414", "#73590d", "#a88a2c", "#2a2828"]))
  );
  sprite[SPRITE.LOCKED] = [];
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKED].push(sprite[SPRITE.PADLOCK][0]);
  sprite[SPRITE.LOCKPICK] = [];
  sprite[SPRITE.LOCKPICK][SPRITE.DAY] = CTI(
    create_lockpick(0.06, false, ["#141414", "#c4a23a", "#816511"])
  );
  sprite[SPRITE.LOCKPICK][SPRITE.NIGHT] = CTI(
    create_lockpick(0.06, false, ["#030d14", "#2b6664", "#133d3c"])
  );
  sprite[SPRITE.KEY] = [];
  sprite[SPRITE.KEY].push(
    CTI(create_lockpick(0.08, false, ["#141414", "#c4a23a", "#816511"]))
  );
  sprite[SPRITE.KEY].push(
    CTI(create_lockpick(0.08, false, ["#141414", "#e2bd4e", "#a38018"]))
  );
  sprite[SPRITE.KEY].push(
    CTI(create_lockpick(0.08, false, ["#141414", "#b0902e", "#634d09"]))
  );
  sprite[SPRITE.DRAGON_HEART] = create_craft_button(
    1.5,
    [
      {
        f: create_dragon_heart,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"],
      },
    ],
    0.45,
    ["#5bbcc9", "#73d2df", "#4daab6"],
    0.9
  );
  sprite[SPRITE.RESURRECTION_GROUND] = [];
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.DAY] = CTI(
    create_resurrection_ground(0.8, true, ["#347f93", "#54a4ba"])
  );
  sprite[SPRITE.RESURRECTION_GROUND][SPRITE.NIGHT] = CTI(
    create_resurrection_ground(0.8, true, ["#98ede3", "#94f2e7"])
  );
  sprite[SPRITE.RESURRECTION_HOLE] = [];
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.DAY] = CTI(
    create_resurrection_hole(0.8, true, [
      "#a9e4ed",
      "#86d4e0",
      "#418ba5",
      "#59b8ce",
    ])
  );
  sprite[SPRITE.RESURRECTION_HOLE][SPRITE.NIGHT] = CTI(
    create_resurrection_hole(0.8, true, [
      "#59c9c0",
      "#83ddd4",
      "#3fa097",
      "#90ddd9",
    ])
  );
  sprite[SPRITE.RESURRECTION_ROTATE] = [];
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.DAY] = CTI(
    create_resurrection_rotate(0.8, true, ["#a9e4ed", "#86d4e0"])
  );
  sprite[SPRITE.RESURRECTION_ROTATE][SPRITE.NIGHT] = CTI(
    create_resurrection_rotate(0.8, true, ["#83ddd4", "#485e66"])
  );
  sprite[SPRITE.RESURRECTION] = [];
  sprite[SPRITE.RESURRECTION][SPRITE.DAY] = CTI(
    create_resurrection(0.8, true, [
      "#347f93",
      "#54a4ba",
      "#1c2528",
      "#a9e4ed",
      "#86d4e0",
      "#959da0",
      "#697072",
      "#929da0",
      "#afb9bc",
    ])
  );
  sprite[SPRITE.RESURRECTION][SPRITE.NIGHT] = CTI(
    create_resurrection(0.8, true, [
      "#98ede3",
      "#94f2e7",
      "#1f343f",
      "#59c9c0",
      "#83ddd4",
      "#485e66",
      "#2d484f",
      "#546d6d",
      "#597b84",
    ])
  );
  sprite[SPRITE.EMERALD_MACHINE_GROUND] = [];
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.DAY] =
    IMAGES.EMERALD_MACHINE_GROUNDD;
  sprite[SPRITE.EMERALD_MACHINE_GROUND][SPRITE.NIGHT] =
    IMAGES.EMERALD_MACHINE_GROUNDN;
  sprite[SPRITE.EMERALD_MACHINE_HOLE] = [];
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.DAY] =
    IMAGES.EMERALD_MACHINE_HOLED;
  sprite[SPRITE.EMERALD_MACHINE_HOLE][SPRITE.NIGHT] =
    IMAGES.EMERALD_MACHINE_HOLEN;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE] = [];
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.DAY] =
    IMAGES.EMERALD_MACHINE_ROTATED;
  sprite[SPRITE.EMERALD_MACHINE_ROTATE][SPRITE.NIGHT] =
    IMAGES.EMERALD_MACHINE_ROTATEN;
  sprite[SPRITE.EMERALD_MACHINE] = [];
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.DAY] = IMAGES.EMERALD_MACHINED;
  sprite[SPRITE.EMERALD_MACHINE][SPRITE.NIGHT] = IMAGES.EMERALD_MACHINEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE0_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE0_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE_STONED;
  sprite[SPRITE.EXTRACTOR_MACHINE_STONE][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE_STONEN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE0_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE0_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE_GOLDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE_GOLDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE0_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE0_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE_DIAMONDD;
  sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE_DIAMONDN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE0_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE0_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE_AMETHYSTD;
  sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE_AMETHYSTN;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE0_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE0_REIDITEN;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.DAY] =
    IMAGES.EXTRACTOR_MACHINE_REIDITED;
  sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][SPRITE.NIGHT] =
    IMAGES.EXTRACTOR_MACHINE_REIDITEN;
  sprite[SPRITE.FIREFLY] = [];
  sprite[SPRITE.FIREFLY][SPRITE.DAY] = IMAGES.FIREFLYD;
  sprite[SPRITE.FIREFLY][SPRITE.NIGHT] = IMAGES.FIREFLYN;
  sprite[SPRITE.HURT_FIREFLY] = IMAGES.HURT_FIREFLY;
  sprite[SPRITE.TOTEM] = [];
  sprite[SPRITE.TOTEM][SPRITE.DAY] = CTI(
    create_totem(0.75, true, ["#0d1b1c", "#4c3a15", "#634828", "#564021"])
  );
  sprite[SPRITE.TOTEM][SPRITE.NIGHT] = CTI(
    create_totem(0.75, true, ["#030d14", "#0d2e33", "#184747", "#123b3f"])
  );
  sprite[SPRITE.ICON_MEMBER] = CTI(
    create_icon_team(0.3, ["#092813", "#1f773d"], 0)
  );
  sprite[SPRITE.ICON_LEADER] = CTI(
    create_icon_team(0.3, ["#092813", "#1f773d"], 1)
  );
  sprite[SPRITE.VERIFIED] = CTI(create_verified(0.6, ["#092813", "#1f773d"]));
  sprite[SPRITE.TEAM_BUTTON] = [];
  sprite[SPRITE.TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"],
        0
      )
    )
  );
  sprite[SPRITE.TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"],
        0
      )
    )
  );
  sprite[SPRITE.TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"],
        0
      )
    )
  );
  sprite[SPRITE.FULL_TEAM_BUTTON] = [];
  var _0x3457ce = CTI(
    create_team_button(
      0.7,
      ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"],
      0
    )
  );
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0x3457ce);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0x3457ce);
  sprite[SPRITE.FULL_TEAM_BUTTON].push(_0x3457ce);
  sprite[SPRITE.MANAGE_TEAM_BUTTON] = [];
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#092813", "#1f773d", "#165b2b", "#4c3a15", "#1f773d"],
        1
      )
    )
  );
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#0b3719", "#228745", "#1a7034", "#614a1a", "#238845"],
        1
      )
    )
  );
  sprite[SPRITE.MANAGE_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#092a14", "#186733", "#124a23", "#4c3a15", "#1b6735"],
        1
      )
    )
  );
  sprite[SPRITE.DELAY_SPIKE] = CTI(create_spiketimer(0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_WALL] = CTI(create_delay_wall(0.3, ["#FFFFFF"]));
  sprite[SPRITE.DELAY_TEAM] = CTI(
    create_icon_team(0.4, ["rgba(255, 255, 255, 0)", "#FFFFFF"], 0)
  );
  sprite[SPRITE.DELAY_DRINK] = CTI(
    create_rotated_img(Math.PI / 5, create_drink_delay(0.2, ["#FFFFFF"]))
  );
  sprite[SPRITE.AMETHYST_HELMET] = [];
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.DAY] = CTI(
    create_amethyst_helmet(0.85, true, [
      "#0d1b1c",
      "#8c55b7",
      "#652d8e",
      "#79359e",
      "#5eccd1",
      "#4badad",
      "#9e6ac6",
    ])
  );
  sprite[SPRITE.AMETHYST_HELMET][SPRITE.NIGHT] = CTI(
    create_amethyst_helmet(0.85, true, [
      "#0d1b1c",
      "#4e4e93",
      "#393977",
      "#444187",
      "#2b9390",
      "#277a74",
      "#7da8db",
    ])
  );
  sprite[SPRITE.SHOW_TEAM_BUTTON] = [];
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#280e09", "#77371f", "#280e09", "#2e2410", "#77371f"],
        1
      )
    )
  );
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#38130C", "#853D22", "#391402", "#3D3016", "#873E22"],
        1
      )
    )
  );
  sprite[SPRITE.SHOW_TEAM_BUTTON].push(
    CTI(
      create_team_button(
        0.7,
        ["#1C0A06", "#6B3019", "#1D0A06", "#251D0C", "#6A301A"],
        1
      )
    )
  );
  sprite[SPRITE.HOOD] = [];
  sprite[SPRITE.HOOD][SPRITE.DAY] = CTI(
    create_hood(0.37, true, ["#2a2938", "#242330", "#313041"])
  );
  sprite[SPRITE.HOOD][SPRITE.NIGHT] = CTI(
    create_hood(0.37, true, ["#1b1e30", "#161921", "#252f3e"])
  );
  sprite[SPRITE.WINTER_HOOD] = [];
  sprite[SPRITE.WINTER_HOOD][SPRITE.DAY] = CTI(
    create_winter_hood(0.17, true, [
      "#2a2938",
      "#242330",
      "#313041",
      "#1b1a25",
      "#d62c0e",
    ])
  );
  sprite[SPRITE.WINTER_HOOD][SPRITE.NIGHT] = CTI(
    create_winter_hood(0.17, true, [
      "#1b1e30",
      "#161921",
      "#252f3e",
      "#0a0c11",
      "#d62c0e",
    ])
  );
  sprite[SPRITE.WINTER_PEASANT] = [];
  sprite[SPRITE.WINTER_PEASANT][SPRITE.DAY] = CTI(
    create_peasant(
      0.55,
      true,
      ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"],
      1
    )
  );
  sprite[SPRITE.WINTER_PEASANT][SPRITE.NIGHT] = CTI(
    create_peasant(
      0.55,
      true,
      ["#1d1d22", "#216661", "#134945", "#2b8079", "#17504c"],
      1
    )
  );
  sprite[SPRITE.PEASANT] = [];
  sprite[SPRITE.PEASANT][SPRITE.DAY] = CTI(
    create_peasant(
      0.55,
      true,
      ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"],
      0
    )
  );
  sprite[SPRITE.PEASANT][SPRITE.NIGHT] = CTI(
    create_peasant(
      0.55,
      true,
      ["#1d1d22", "#1b5752", "#0e3b37", "#23706a", "#11413e", "#0b322f"],
      0
    )
  );
  sprite[SPRITE.CROWN_GREEN] = [];
  sprite[SPRITE.CROWN_GREEN][SPRITE.DAY] = CTI(
    create_crown_life(0.2, true, [
      "#0d1b1c",
      "#A5A244",
      "#D8DC74",
      "#C0BF55",
      "#49B669",
      "#19994C",
      "#71C187",
    ])
  );
  sprite[SPRITE.CROWN_GREEN][SPRITE.NIGHT] = CTI(
    create_crown_life(0.2, true, [
      "#2b7c57",
      "#114933",
      "#1b6656",
      "#1a7961",
      "#3db76f",
      "#118254",
      "#40c696",
    ])
  );
  sprite[SPRITE.CROWN_ORANGE] = [];
  sprite[SPRITE.CROWN_ORANGE][SPRITE.DAY] = CTI(
    create_crown_life(0.2, true, [
      "#0d1b1c",
      "#A5A244",
      "#D8DC74",
      "#C0BF55",
      "#C45727",
      "#994617",
      "#DB9358",
    ])
  );
  sprite[SPRITE.CROWN_ORANGE][SPRITE.NIGHT] = CTI(
    create_crown_life(0.2, true, [
      "#2b7c57",
      "#114933",
      "#1b6656",
      "#1a7961",
      "#69b681",
      "#509a75",
      "#7ec387",
    ])
  );
  sprite[SPRITE.CROWN_BLUE] = [];
  sprite[SPRITE.CROWN_BLUE][SPRITE.DAY] = CTI(
    create_crown_life(0.2, true, [
      "#0d1b1c",
      "#A5A244",
      "#D8DC74",
      "#C0BF55",
      "#2792C1",
      "#196599",
      "#59C0D8",
    ])
  );
  sprite[SPRITE.CROWN_BLUE][SPRITE.NIGHT] = CTI(
    create_crown_life(0.2, true, [
      "#2b7c57",
      "#114933",
      "#1b6656",
      "#1a7961",
      "#19899e",
      "#16688b",
      "#4ea3c7",
    ])
  );
  sprite[SPRITE.CROWN_CRAB] = [];
  sprite[SPRITE.CROWN_CRAB][SPRITE.DAY] = CTI(
    create_crab_crown(0.24, true, [
      "#000000",
      "#b03431",
      "#94312d",
      "#bd3c33",
      "#e45936",
    ])
  );
  sprite[SPRITE.CROWN_CRAB][SPRITE.NIGHT] = CTI(
    create_crab_crown(0.24, true, [
      "#000000",
      "#1b103e",
      "#190f3b",
      "#261a4e",
      "#34255d",
    ])
  );
  sprite[SPRITE.DRAGON_HELMET] = [];
  sprite[SPRITE.DRAGON_HELMET][SPRITE.DAY] = CTI(
    create_dragon_helmet(0.32, true, [
      "#0d1b1c",
      "#cae9eb",
      "#75bcae",
      "#ffffff",
      "#51736d",
      "#2b4d48",
      "#1b3a3a",
      "#80ccca",
      "#59ada7",
    ])
  );
  sprite[SPRITE.DRAGON_HELMET][SPRITE.NIGHT] = CTI(
    create_dragon_helmet(0.32, true, [
      "#0d1b1c",
      "#70c1d6",
      "#49b2cf",
      "#87cad9",
      "#367c93",
      "#113743",
      "#0c2c36",
      "#51a2b8",
      "#3a8ea4",
    ])
  );
  sprite[SPRITE.DRAGON_SWORD] = [];
  sprite[SPRITE.DRAGON_SWORD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_dragon_sword(0.9, true, [
        "#0d1b1c",
        "#284c4a",
        "#193533",
        "#c8efef",
        "#7eccbb",
      ])
    )
  );
  sprite[SPRITE.DRAGON_SWORD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_dragon_sword(0.9, true, [
        "#0d1b1c",
        "#18332e",
        "#112320",
        "#87d2e6",
        "#49b2cf",
      ])
    )
  );
  sprite[SPRITE.DRAGON_SWORD_HALO] = [];
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_dragon_sword(1, true, [
        undefined,
        undefined,
        undefined,
        "#c8efef",
        "#c8efef",
      ])
    )
  );
  sprite[SPRITE.DRAGON_SWORD_HALO][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_dragon_sword(1, true, [
        undefined,
        undefined,
        undefined,
        "#87d2e6",
        "#87d2e6",
      ])
    )
  );
  sprite[SPRITE.QUEST_BUTTON] = [];
  sprite[SPRITE.QUEST_BUTTON].push(
    CTI(
      create_quest_button(
        0.3,
        true,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"],
        0
      )
    )
  );
  sprite[SPRITE.QUEST_BUTTON].push(
    CTI(
      create_quest_button(
        0.3,
        true,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#eda80d"],
        1
      )
    )
  );
  sprite[SPRITE.QUEST_BUTTON].push(
    CTI(
      create_quest_button(
        0.3,
        true,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#704821", "#654320", "#d7990c"],
        1
      )
    )
  );
  sprite[SPRITE.MARKET_BUTTON] = [];
  sprite[SPRITE.MARKET_BUTTON].push(
    CTI(
      create_market_button(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 0)
    )
  );
  sprite[SPRITE.MARKET_BUTTON].push(
    CTI(
      create_market_button(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)
    )
  );
  sprite[SPRITE.MARKET_BUTTON].push(
    CTI(
      create_market_button(0.7, ["#392C16", "#5E3E1A", "#85592c", "#eda80d"], 1)
    )
  );
  sprite[SPRITE.SOUND_BUTTON_ON] = [];
  sprite[SPRITE.SOUND_BUTTON_ON].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"],
        0,
        1
      )
    )
  );
  sprite[SPRITE.SOUND_BUTTON_ON].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"],
        1,
        1
      )
    )
  );
  sprite[SPRITE.SOUND_BUTTON_ON].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"],
        1,
        1
      )
    )
  );
  sprite[SPRITE.SOUND_BUTTON_OFF] = [];
  sprite[SPRITE.SOUND_BUTTON_OFF].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"],
        0,
        0
      )
    )
  );
  sprite[SPRITE.SOUND_BUTTON_OFF].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#eda80d"],
        1,
        0
      )
    )
  );
  sprite[SPRITE.SOUND_BUTTON_OFF].push(
    CTI(
      create_music_button(
        0.4,
        ["#0d1b1c", "#392C16", "#5E3E1A", "#d7990c"],
        1,
        0
      )
    )
  );
  sprite[SPRITE.SHOVEL] = [];
  sprite[SPRITE.SHOVEL][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#6d5041",
        "#4f3d35",
        "#939393",
        "#5f6061",
        "#757575",
      ])
    )
  );
  sprite[SPRITE.SHOVEL][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#0d2e33",
        "#0b2326",
        "#485e66",
        "#1f343f",
        "#274352",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_GOLD] = [];
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#493e26",
        "#382e19",
        "#c4bc51",
        "#b29c32",
        "#ada437",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_GOLD][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#263947",
        "#182935",
        "#43aa82",
        "#29997c",
        "#32916c",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_DIAMOND] = [];
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#63c9d6",
        "#29aaa1",
        "#42aab8",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_DIAMOND][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#73dde5",
        "#3dc4c0",
        "#49bdc6",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_AMETHYST] = [];
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.DAY] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#262114",
        "#211108",
        "#b864d6",
        "#8c29aa",
        "#9641b5",
      ])
    )
  );
  sprite[SPRITE.SHOVEL_AMETHYST][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3,
      create_shovel(0.7, true, [
        "#0d1b1c",
        "#111316",
        "#0a0b0c",
        "#8359d3",
        "#764eb5",
        "#6f45c2",
      ])
    )
  );
  sprite[SPRITE.SHOP] = [];
  sprite[SPRITE.SHOP].push(
    CTI(create_shop(0.7, ["#3b330d", "#b5a118", "#c8ac16"], 0))
  );
  sprite[SPRITE.SHOP].push(
    CTI(create_shop(0.7, ["#524712", "#c7b11c", "#d9ba18"], 0))
  );
  sprite[SPRITE.SHOP].push(
    CTI(create_shop(0.7, ["#2a2409", "#9f8e14", "#ad9511"], 0))
  );
  sprite[SPRITE.HURT_WOLF] = CTI(create_hurt_wolf(1.1, ["#BB0000"]));
  sprite[SPRITE.HURT_SPIDER] = CTI(
    create_rotated_img(Math.PI, create_hurt_spider(0.9, "#BB0000"))
  );
  sprite[SPRITE.EXPLORER_HAT] = [];
  sprite[SPRITE.EXPLORER_HAT][SPRITE.DAY] = CTI(
    create_explorer_hat(0.55, true, [
      "#c9a65f",
      "#ae863f",
      "#655530",
      "#4a391c",
      "#ebdd79",
      "#4a421c",
    ])
  );
  sprite[SPRITE.EXPLORER_HAT][SPRITE.NIGHT] = CTI(
    create_explorer_hat(0.55, true, [
      "#15514f",
      "#0f3f3d",
      "#123335",
      "#0d2d2b",
      "#2b6664",
      "#070d16",
    ])
  );
  sprite[SPRITE.WOOD_HELMET] = [];
  sprite[SPRITE.WOOD_HELMET][SPRITE.DAY] = CTI(
    create_wooden_helmet(0.55, true, [
      "#252525",
      "#73583e",
      "#573f29",
      "#7d6144",
    ])
  );
  sprite[SPRITE.WOOD_HELMET][SPRITE.NIGHT] = CTI(
    create_wooden_helmet(0.55, true, [
      "#0d3b39",
      "#144642",
      "#0b3230",
      "#154f4b",
    ])
  );
  sprite[SPRITE.STONE_HELMET] = [];
  sprite[SPRITE.STONE_HELMET][SPRITE.DAY] = CTI(
    create_viking_hat(0.6, true, [
      "#252525",
      "#808080",
      "#4a4a4a",
      "#9e9c8b",
      "#615c53",
      "#686969",
      "#8a8776",
      "#555555",
      "#747474",
      "#969696",
      "#454545",
    ])
  );
  sprite[SPRITE.STONE_HELMET][SPRITE.NIGHT] = CTI(
    create_viking_hat(0.6, true, [
      "#030d14",
      "#1c4a4a",
      "#102d2d",
      "#255756",
      "#163d3c",
      "#194544",
      "#1f5252",
      "#184141",
      "#1c4a4a",
      "#255756",
      "#163a3a",
    ])
  );
  sprite[SPRITE.GOLD_HELMET] = [];
  sprite[SPRITE.GOLD_HELMET][SPRITE.DAY] = CTI(
    create_gold_helmet(0.58, true, ["#dbce71", "#b29c32", "#c4bc51"])
  );
  sprite[SPRITE.GOLD_HELMET][SPRITE.NIGHT] = CTI(
    create_gold_helmet(0.58, true, ["#2b7c57", "#15543c", "#1a7961"])
  );
  sprite[SPRITE.DIAMOND_HELMET] = [];
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.DAY] = CTI(
    create_diamond_helmet(0.69, true, [
      "#717171",
      "#485252",
      "#555555",
      "#65c7cd",
      "#4aadad",
      "#358d8b",
      "#c1e6ea",
      "#a6dce4",
    ])
  );
  sprite[SPRITE.DIAMOND_HELMET][SPRITE.NIGHT] = CTI(
    create_diamond_helmet(0.69, true, [
      "#183f3f",
      "#092121",
      "#123335",
      "#2b9390",
      "#277a74",
      "#1f665f",
      "#83ddd4",
      "#59c9c0",
    ])
  );
  sprite[SPRITE.FIR] = [];
  sprite[SPRITE.FIR][SPRITE.DAY] = [];
  sprite[SPRITE.FIR][SPRITE.NIGHT] = [];
  sprite[SPRITE.FIR][SPRITE.DAY].push(
    CTI(
      create_fir_three(1.3, [
        "#0a2d18",
        "#124c34",
        "#227248",
        "#ccedd9",
        "#2d7a55",
        "#3c9660",
        "#afddc1",
        "#bbefd0",
        "#0a2d18",
        "#e4efe8",
      ])
    )
  );
  sprite[SPRITE.FIR][SPRITE.DAY].push(
    CTI(
      create_fir_two(1.5, [
        "#191919",
        "#134d35",
        "#247349",
        "#afddc1",
        "#bbefd0",
        "#e4efe8",
      ])
    )
  );
  sprite[SPRITE.FIR][SPRITE.DAY].push(
    CTI(
      create_fir_one(1.5, [
        "#191919",
        "#134d35",
        "#247349",
        "#cde7d6",
        "#122d1c",
        "#e3eee7",
      ])
    )
  );
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(
    CTI(
      create_fir_three(1.3, [
        "#000000",
        "#0e3638",
        "#174a51",
        "#328587",
        "#174a51",
        "#1d5559",
        "#328587",
        "#48a8aa",
        "#0a2728",
        "#56afac",
      ])
    )
  );
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(
    CTI(
      create_fir_two(1.5, [
        "#000000",
        "#0e3638",
        "#174a51",
        "#328587",
        "#48a8aa",
        "#56afac",
      ])
    )
  );
  sprite[SPRITE.FIR][SPRITE.NIGHT].push(
    CTI(
      create_fir_one(1.5, [
        "#000000",
        "#0e3638",
        "#174a51",
        "#328587",
        "#0a2728",
        "#56afac",
      ])
    )
  );
  sprite[SPRITE.DRAGON] = [];
  sprite[SPRITE.DRAGON][SPRITE.DAY] = CTI(
    create_dragon(1, [
      "#292b2b",
      "#57aba6",
      "#80ccca",
      "#c42333",
      "#a4dad9",
      "#3e8294",
      "#ffffff",
      "#57aba6",
      "#ffffff",
    ])
  );
  sprite[SPRITE.DRAGON][SPRITE.NIGHT] = CTI(
    create_dragon(1, [
      "#050505",
      "#1d3a38",
      "#0b514a",
      "#200333",
      "#327570",
      "#1d3a38",
      "#ffffff",
      "#0b514a",
      "#63afa9",
    ])
  );
  sprite[SPRITE.WING_LEFT] = [];
  sprite[SPRITE.WING_LEFT][SPRITE.DAY] = CTI(
    create_wingleft(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])
  );
  sprite[SPRITE.WING_LEFT][SPRITE.NIGHT] = CTI(
    create_wingleft(1, ["#050505", "#327570", "#021724", "#200333"])
  );
  sprite[SPRITE.WING_RIGHT] = [];
  sprite[SPRITE.WING_RIGHT][SPRITE.DAY] = CTI(
    create_wingright(1, ["#292b2b", "#a4dad9", "#1f3f3f", "#c1233b"])
  );
  sprite[SPRITE.WING_RIGHT][SPRITE.NIGHT] = CTI(
    create_wingright(1, ["#050505", "#327570", "#021724", "#200333"])
  );
  sprite[SPRITE.DECORATION] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [];
  sprite[SPRITE.DECORATION][SPRITE.DAY] = [
    IMAGES.DECORATION_0D,
    IMAGES.DECORATION_1D,
    IMAGES.DECORATION_2D,
    IMAGES.DECORATION_3D,
    IMAGES.DECORATION_4D,
    IMAGES.DECORATION_5D,
    IMAGES.DECORATION_6D,
    IMAGES.DECORATION_7D,
    IMAGES.DECORATION_8D,
    IMAGES.DECORATION_9D,
    IMAGES.DECORATION_10D,
    IMAGES.DECORATION_11D,
    IMAGES.DECORATION_12D,
    IMAGES.DECORATION_13D,
    IMAGES.DECORATION_14D,
    IMAGES.DECORATION_15D,
    IMAGES.DECORATION_16D,
    IMAGES.DECORATION_17D,
    IMAGES.DECORATION_18D,
    IMAGES.DECORATION_19D,
    IMAGES.DECORATION_20D,
    IMAGES.DECORATION_21D,
    IMAGES.DECORATION_22D,
    IMAGES.DECORATION_23D,
    IMAGES.DECORATION_24D,
    IMAGES.DECORATION_25D,
    IMAGES.DECORATION_26D,
    IMAGES.DECORATION_27D,
    IMAGES.DECORATION_28D,
    IMAGES.DECORATION_29D,
    IMAGES.DECORATION_30D,
    IMAGES.DECORATION_31D,
    IMAGES.DECORATION_32D,
    IMAGES.DECORATION_33D,
    IMAGES.DECORATION_34D,
    IMAGES.DECORATION_35D,
    IMAGES.DECORATION_36D,
    IMAGES.DECORATION_37D,
    IMAGES.DECORATION_38D,
    IMAGES.DECORATION_39D,
    IMAGES.DECORATION_40D,
    IMAGES.DECORATION_41D,
    IMAGES.DECORATION_42D,
    IMAGES.DECORATION_43D,
    IMAGES.DECORATION_44D,
    IMAGES.DECORATION_45D,
    IMAGES.DECORATION_46D,
    IMAGES.DECORATION_47D,
    IMAGES.DECORATION_48D,
    IMAGES.DECORATION_49D,
    IMAGES.DECORATION_50D,
    IMAGES.DECORATION_51D,
    IMAGES.DECORATION_52D,
    IMAGES.DECORATION_53D,
    IMAGES.DECORATION_54D,
    IMAGES.DECORATION_55D,
  ];
  sprite[SPRITE.DECORATION][SPRITE.NIGHT] = [
    IMAGES.DECORATION_0N,
    IMAGES.DECORATION_1N,
    IMAGES.DECORATION_2N,
    IMAGES.DECORATION_3N,
    IMAGES.DECORATION_4N,
    IMAGES.DECORATION_5N,
    IMAGES.DECORATION_6N,
    IMAGES.DECORATION_7N,
    IMAGES.DECORATION_8N,
    IMAGES.DECORATION_9N,
    IMAGES.DECORATION_10N,
    IMAGES.DECORATION_11N,
    IMAGES.DECORATION_12N,
    IMAGES.DECORATION_13N,
    IMAGES.DECORATION_14N,
    IMAGES.DECORATION_15N,
    IMAGES.DECORATION_16N,
    IMAGES.DECORATION_17N,
    IMAGES.DECORATION_18N,
    IMAGES.DECORATION_19N,
    IMAGES.DECORATION_20N,
    IMAGES.DECORATION_21N,
    IMAGES.DECORATION_22N,
    IMAGES.DECORATION_23N,
    IMAGES.DECORATION_24N,
    IMAGES.DECORATION_25N,
    IMAGES.DECORATION_26N,
    IMAGES.DECORATION_27N,
    IMAGES.DECORATION_28N,
    IMAGES.DECORATION_29N,
    IMAGES.DECORATION_30N,
    IMAGES.DECORATION_31N,
    IMAGES.DECORATION_32N,
    IMAGES.DECORATION_33N,
    IMAGES.DECORATION_34N,
    IMAGES.DECORATION_35N,
    IMAGES.DECORATION_36N,
    IMAGES.DECORATION_37N,
    IMAGES.DECORATION_38N,
    IMAGES.DECORATION_39N,
    IMAGES.DECORATION_40N,
    IMAGES.DECORATION_41N,
    IMAGES.DECORATION_42N,
    IMAGES.DECORATION_43N,
    IMAGES.DECORATION_44N,
    IMAGES.DECORATION_45N,
    IMAGES.DECORATION_46N,
    IMAGES.DECORATION_47N,
    IMAGES.DECORATION_48N,
    IMAGES.DECORATION_49N,
    IMAGES.DECORATION_50N,
    IMAGES.DECORATION_51N,
    IMAGES.DECORATION_52N,
    IMAGES.DECORATION_53N,
    IMAGES.DECORATION_54N,
    IMAGES.DECORATION_55N,
  ];
  sprite[SPRITE.CAVE_STONES] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(1.1, false, ["#252B28", "#747471", "#83827e"], 0))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(0.9, false, ["#252B28", "#747471", "#83827e"], 1))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(1, false, ["#252B28", "#747471", "#83827e"], 2))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(0.9, false, ["#252B28", "#747471", "#83827e"], 2))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(1.1, false, ["#030d14", "#123335", "#183f3f"], 0))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(0.9, false, ["#030d14", "#123335", "#183f3f"], 1))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(1, false, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(0.9, false, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT] = [];
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(1.1, true, ["#252B28", "#58645F", "#75827D"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(0.9, true, ["#252B28", "#58645F", "#75827D"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(1, true, ["#252B28", "#58645F", "#75827D"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.DAY].push(
    CTI(create_cave_stone(0.9, true, ["#252B28", "#58645F", "#75827D"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(1.1, true, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(0.9, true, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(1, true, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.SHADOW_CAVE_STONES][SPRITE.NIGHT].push(
    CTI(create_cave_stone(0.9, true, ["#030d14", "#123335", "#183f3f"], 2))
  );
  sprite[SPRITE.GOLD_WINTER] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(
    CTI(create_gold(1.5, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(
    CTI(create_gold(1.3, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD_WINTER][SPRITE.DAY].push(
    CTI(create_gold(1.1, false, ["#2b280a", "#ddcf8a", "#f4efc6"]))
  );
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(
    CTI(create_gold(1.5, false, ["#0a2728", "#3e8989", "#50a09c"]))
  );
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(
    CTI(create_gold(1.3, false, ["#0a2728", "#3e8989", "#50a09c"]))
  );
  sprite[SPRITE.GOLD_WINTER][SPRITE.NIGHT].push(
    CTI(create_gold(1.1, false, ["#0a2728", "#3e8989", "#50a09c"]))
  );
  sprite[SPRITE.DIAMOND_WINTER] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT] = [];
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(
    CTI(create_diamond(1.1, false, ["#123d38", "#70e0dd", "#95efea"]))
  );
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(
    CTI(create_diamond(0.9, false, ["#123d38", "#70e0dd", "#95efea"]))
  );
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.DAY].push(
    CTI(create_diamond(0.7, false, ["#123d38", "#70e0dd", "#95efea"]))
  );
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(
    CTI(create_diamond(1.1, false, ["#123d38", "#47b2ac", "#5cccc4"]))
  );
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(
    CTI(create_diamond(0.9, false, ["#123d38", "#47b2ac", "#5cccc4"]))
  );
  sprite[SPRITE.DIAMOND_WINTER][SPRITE.NIGHT].push(
    CTI(create_diamond(0.7, false, ["#123d38", "#47b2ac", "#5cccc4"]))
  );
  sprite[SPRITE.AMETHYST] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY] = [];
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT] = [];
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(
    CTI(create_amethyst(1.7, true, ["#1d051e", "#c27add", "#cd98e5"]))
  );
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(
    CTI(create_amethyst(1.5, true, ["#1d051e", "#c27add", "#cd98e5"]))
  );
  sprite[SPRITE.AMETHYST][SPRITE.DAY].push(
    CTI(create_amethyst(1.3, true, ["#1d051e", "#c27add", "#cd98e5"]))
  );
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(
    CTI(create_amethyst(1.7, true, ["#1d051e", "#41aaa0", "#5cccc4"]))
  );
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(
    CTI(create_amethyst(1.5, true, ["#1d051e", "#41aaa0", "#5cccc4"]))
  );
  sprite[SPRITE.AMETHYST][SPRITE.NIGHT].push(
    CTI(create_amethyst(1.3, true, ["#1d051e", "#41aaa0", "#5cccc4"]))
  );
  sprite[SPRITE.WATERBLOCK] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.WATERBLOCK][SPRITE.DAY].push(
    CTI(create_dragon_ground(1, ["#2d53c4"]))
  );
  sprite[SPRITE.WATERBLOCK][SPRITE.NIGHT].push(
    CTI(create_dragon_ground(1, ["#2d53c4"]))
  );
  sprite[SPRITE.ISLAND_BLOCK] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.DAY].push(
    CTI(create_dragon_ground(1, ["#c4912d"]))
  );
  sprite[SPRITE.ISLAND_BLOCK][SPRITE.NIGHT].push(
    CTI(create_dragon_ground(1, ["#c4912d"]))
  );
  sprite[SPRITE.CAVE_STEP] = [];
  sprite[SPRITE.CAVE_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#414040"]));
  sprite[SPRITE.CAVE_STEP][SPRITE.NIGHT] = CTI(
    create_snow_step(1, ["#153635"])
  );
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.DAY] = CTI(
    create_door_wood(1, false, [
      "#EBF2F0",
      "#EBF2F0",
      "#b2d4d1",
      "#b2d4d1",
      "#EBF2F0",
      "#b2d4d1",
    ])
  );
  sprite[SPRITE.DOOR_WOOD_OPEN_WINTER][SPRITE.NIGHT] = CTI(
    create_door_wood(1, false, [
      "#136167",
      "#136167",
      "#24878f",
      "#24878f",
      "#136167",
      "#24878f",
    ])
  );
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.DAY] = CTI(
    create_door_stone(1, false, [
      "#EBF2F0",
      "#EBF2F0",
      "#b2d4d1",
      "#b2d4d1",
      "#EBF2F0",
      "#b2d4d1",
    ])
  );
  sprite[SPRITE.DOOR_STONE_OPEN_WINTER][SPRITE.NIGHT] = CTI(
    create_door_stone(1, false, [
      "#136167",
      "#136167",
      "#24878f",
      "#24878f",
      "#136167",
      "#24878f",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.DAY] = CTI(
    create_door_stone(1, false, [
      "#EBF2F0",
      "#EBF2F0",
      "#b2d4d1",
      "#b2d4d1",
      "#EBF2F0",
      "#b2d4d1",
    ])
  );
  sprite[SPRITE.DOOR_AMETHYST_OPEN_WINTER][SPRITE.NIGHT] = CTI(
    create_door_stone(1, false, [
      "#136167",
      "#136167",
      "#24878f",
      "#24878f",
      "#136167",
      "#24878f",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.DAY] = CTI(
    create_door_diamond(1, false, [
      "#EBF2F0",
      "#EBF2F0",
      "#b2d4d1",
      "#b2d4d1",
      "#EBF2F0",
      "#b2d4d1",
    ])
  );
  sprite[SPRITE.DOOR_DIAMOND_OPEN_WINTER][SPRITE.NIGHT] = CTI(
    create_door_diamond(1, false, [
      "#136167",
      "#136167",
      "#24878f",
      "#24878f",
      "#136167",
      "#24878f",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER] = [];
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.DAY] = CTI(
    create_door_gold(1, false, [
      "#EBF2F0",
      "#EBF2F0",
      "#b2d4d1",
      "#b2d4d1",
      "#EBF2F0",
      "#b2d4d1",
    ])
  );
  sprite[SPRITE.DOOR_GOLD_OPEN_WINTER][SPRITE.NIGHT] = CTI(
    create_door_gold(1, false, [
      "#136167",
      "#136167",
      "#24878f",
      "#24878f",
      "#136167",
      "#24878f",
    ])
  );
  sprite[SPRITE.FOX] = [];
  sprite[SPRITE.FOX][SPRITE.DAY] = CTI(
    create_winter_fox(0.9, [
      "#1d051e",
      "#ffffff",
      "#c41c50",
      "#2c2e2d",
      "#c63450",
      "#f7e7f0",
    ])
  );
  sprite[SPRITE.FOX][SPRITE.NIGHT] = CTI(
    create_winter_fox(0.9, [
      "#123d38",
      "#1a847f",
      "#200333",
      "#131919",
      "#01333a",
      "#b6f2db",
    ])
  );
  sprite[SPRITE.BEAR] = [];
  sprite[SPRITE.BEAR][SPRITE.DAY] = CTI(
    create_polar_bear(0.9, [
      "#1d051e",
      "#ffffff",
      "#c41c50",
      "#c63450",
      "#ffffff",
      "#f7e7f0",
      "#2b2d2d",
    ])
  );
  sprite[SPRITE.BEAR][SPRITE.NIGHT] = CTI(
    create_polar_bear(0.9, [
      "#123d38",
      "#1a847f",
      "#200333",
      "#01333a",
      "#ffffff",
      "#b6f2db",
      "#2b2d2d",
    ])
  );
  sprite[SPRITE.MINIMAP] = [];
  sprite[SPRITE.MINIMAP_CTX] = [];
  sprite[SPRITE.BIGMAP] = [];
  sprite[SPRITE.BIGMAP_CTX] = [];
  for (var i = 0; i < 2; i++) {
    sprite[SPRITE.MINIMAP][i] = document.createElement("canvas");
    sprite[SPRITE.MINIMAP][i].width = 193;
    sprite[SPRITE.MINIMAP][i].height = 193;
    sprite[SPRITE.MINIMAP_CTX][i] = sprite[SPRITE.MINIMAP][i].getContext("2d");
    sprite[SPRITE.BIGMAP][i] = document.createElement("canvas");
    sprite[SPRITE.BIGMAP][i].width = 600;
    sprite[SPRITE.BIGMAP][i].height = 600;
    sprite[SPRITE.BIGMAP_CTX][i] = sprite[SPRITE.BIGMAP][i].getContext("2d");
  }
  sprite[SPRITE.SNOW_STEP] = [];
  sprite[SPRITE.SNOW_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#c8e0de"]));
  sprite[SPRITE.SNOW_STEP][SPRITE.NIGHT] = CTI(
    create_snow_step(1, ["#147071"])
  );
  sprite[SPRITE.LAVA_STEP] = [];
  sprite[SPRITE.LAVA_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#231912"]));
  sprite[SPRITE.LAVA_STEP][SPRITE.NIGHT] = CTI(
    create_snow_step(1, ["#021719"])
  );
  sprite[SPRITE.HURT_TREASURE_CHEST] = CTI(
    create_hurt_treasure_chest(0.5, ["#BB0000"])
  );
  sprite[SPRITE.HURT_FOX] = CTI(create_hurt_fox_winter(0.9, "#BB0000"));
  sprite[SPRITE.HURT_BEAR] = CTI(create_hurt_polar_bear(0.9, "#BB0000"));
  sprite[SPRITE.HURT_DRAGON] = CTI(create_hurt_dragon(1, ["#BB0000"]));
  sprite[SPRITE.HURT_WING_LEFT] = CTI(create_hurt_wingleft(0.8, "#BB0000"));
  sprite[SPRITE.HURT_WING_RIGHT] = CTI(create_hurt_wingright(0.8, "#BB0000"));
  sprite[SPRITE.HURT_RABBIT] = CTI(create_hurt_rabbit(0.9, "#BB0000"));
  sprite[SPRITE.HURT] = CTI(create_hurt_player(0.6, "#BB0000"));
  sprite[SPRITE.COLD] = CTI(create_hurt_player(0.6, "#1CE7E0"));
  sprite[SPRITE.HUNGER] = CTI(create_hurt_player(0.6, "#DBE71C"));
  sprite[SPRITE.HEAL] = CTI(create_hurt_player(0.6, "#00BB00"));
  sprite[SPRITE.SAND_STEP] = [];
  sprite[SPRITE.SAND_STEP][SPRITE.DAY] = CTI(create_snow_step(1, ["#dac291"]));
  sprite[SPRITE.SAND_STEP][SPRITE.NIGHT] = CTI(
    create_snow_step(1, ["#0D423D"])
  );
  sprite[SPRITE.ISLAND_STEP] = [];
  sprite[SPRITE.ISLAND_STEP][SPRITE.DAY] = CTI(
    create_snow_step(1, ["#dac291"])
  );
  sprite[SPRITE.ISLAND_STEP][SPRITE.NIGHT] = CTI(
    create_snow_step(1, ["#0D423D"])
  );
  sprite[SPRITE.WELL_FULL] = [];
  sprite[SPRITE.WELL_FULL][SPRITE.DAY] = CTI(
    create_well(0.3, true, [
      "#1e2021",
      "#717273",
      "#606162",
      "#a09f9f",
      "#878787",
      "#1a6470",
    ])
  );
  sprite[SPRITE.WELL_FULL][SPRITE.NIGHT] = CTI(
    create_well(0.3, true, [
      "#1e2021",
      "#1a4545",
      "#163a3a",
      "#245d5d",
      "#1f5454",
      "#09373F",
    ])
  );
  sprite[SPRITE.WELL_EMPTY] = [];
  sprite[SPRITE.WELL_EMPTY][SPRITE.DAY] = CTI(
    create_well(0.3, true, [
      "#1e2021",
      "#717273",
      "#606162",
      "#a09f9f",
      "#878787",
      "#454545",
    ])
  );
  sprite[SPRITE.WELL_EMPTY][SPRITE.NIGHT] = CTI(
    create_well(0.3, true, [
      "#1e2021",
      "#1a4545",
      "#163a3a",
      "#245d5d",
      "#1f5454",
      "#0b2121",
    ])
  );
  sprite[SPRITE.BOTTLE_FULL] = [
    CTI(
      create_bottle(1, true, [
        "#C6AF81",
        "#C98435",
        "#B26F31",
        "#53A4D5",
        "#388AC7",
        "#C1C0C0",
        "#EAEAEA",
      ])
    ),
  ];
  sprite[SPRITE.BOTTLE_EMPTY] = [
    CTI(
      create_bottle(1, true, [
        "#C6AF81",
        "#C98435",
        "#B26F31",
        "#53A4D5",
        "#388AC7",
        "#C1C0C0",
        "#EAEAEA",
      ])
    ),
  ];
  sprite[SPRITE.OCEAN] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY] = [];
  sprite[SPRITE.OCEAN][SPRITE.NIGHT] = [];
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_one(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_two(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_three(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_four(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_five(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_six(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.DAY].push(CTI(create_snow_sept(1, ["#0B6A84"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_one(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_two(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(
    CTI(create_snow_three(1, ["#09373F"]))
  );
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(
    CTI(create_snow_four(1, ["#09373F"]))
  );
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(
    CTI(create_snow_five(1, ["#09373F"]))
  );
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(CTI(create_snow_six(1, ["#09373F"])));
  sprite[SPRITE.OCEAN][SPRITE.NIGHT].push(
    CTI(create_snow_sept(1, ["#09373F"]))
  );
  sprite[SPRITE.ISLAND] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY] = [];
  sprite[SPRITE.ISLAND][SPRITE.NIGHT] = [];
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(
    CTI(create_island(1.7, ["#FBEFBC"], 0))
  );
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(
    CTI(create_island(1.9, ["#FBEFBC"], 1))
  );
  sprite[SPRITE.ISLAND][SPRITE.DAY].push(
    CTI(create_island(1.7, ["#FBEFBC"], 2))
  );
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(
    CTI(create_island(1.7, ["#0F4C48"], 0))
  );
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(
    CTI(create_island(1.9, ["#0F4C48"], 1))
  );
  sprite[SPRITE.ISLAND][SPRITE.NIGHT].push(
    CTI(create_island(1.7, ["#0F4C48"], 2))
  );
  sprite[SPRITE.WAVE_ONE] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(
    CTI(create_island(1.8, ["#A9D6D3"], 0))
  );
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(
    CTI(create_island(2, ["#A9D6D3"], 1))
  );
  sprite[SPRITE.WAVE_ONE][SPRITE.DAY].push(
    CTI(create_island(1.8, ["#A9D6D3"], 2))
  );
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(
    CTI(create_island(1.8, ["#115E60"], 0))
  );
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(
    CTI(create_island(2, ["#115E60"], 1))
  );
  sprite[SPRITE.WAVE_ONE][SPRITE.NIGHT].push(
    CTI(create_island(1.8, ["#115E60"], 2))
  );
  sprite[SPRITE.WAVE_TWO] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT] = [];
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(
    CTI(create_island(1.9, ["#2A8B9B"], 0))
  );
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(
    CTI(create_island(2.1, ["#2A8B9B"], 1))
  );
  sprite[SPRITE.WAVE_TWO][SPRITE.DAY].push(
    CTI(create_island(1.9, ["#2A8B9B"], 2))
  );
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(
    CTI(create_island(1.9, ["#0F464C"], 0))
  );
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(
    CTI(create_island(2.1, ["#0F464C"], 1))
  );
  sprite[SPRITE.WAVE_TWO][SPRITE.NIGHT].push(
    CTI(create_island(1.9, ["#0F464C"], 2))
  );
  sprite[SPRITE.PALM] = [];
  sprite[SPRITE.PALM][SPRITE.DAY] = [];
  sprite[SPRITE.PALM][SPRITE.NIGHT] = [];
  sprite[SPRITE.PALM][SPRITE.DAY].push(
    CTI(create_palm(0.8, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))
  );
  sprite[SPRITE.PALM][SPRITE.DAY].push(
    CTI(create_palm(1, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))
  );
  sprite[SPRITE.PALM][SPRITE.DAY].push(
    CTI(create_palm(1.2, ["#231F20", "#0c8e5b", "#037542", "#077b49"]))
  );
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(
    CTI(create_palm(0.8, ["#041e22", "#124949", "#0e3838", "#0a4049"]))
  );
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(
    CTI(create_palm(1, ["#041e22", "#124949", "#0e3838", "#0a4049"]))
  );
  sprite[SPRITE.PALM][SPRITE.NIGHT].push(
    CTI(create_palm(1.2, ["#041e22", "#124949", "#0e3838", "#0a4049"]))
  );
  sprite[SPRITE.KRAKEN] = [];
  sprite[SPRITE.KRAKEN][SPRITE.DAY] = CTI(
    create_kraken(0.8, [
      "#1e2021",
      "#B6222A",
      "#201851",
      "#342C7C",
      "#F4F4F4",
      "#D3D3D3",
      "#6765CE",
      "#593CC6",
      "#433BAD",
      "#342C7C",
      "#052830",
      "#EAEAEA",
      "#B6222A",
      "#FFFFFF",
    ])
  );
  sprite[SPRITE.KRAKEN][SPRITE.NIGHT] = CTI(
    create_kraken(0.8, [
      "#0c0c0d",
      "#462966",
      "#081B2D",
      "#342C7C",
      "#9AAAAD",
      "#72898C",
      "#133556",
      "#296D9B",
      "#25557C",
      "#133556",
      "#0D2A42",
      "#EAEAEA",
      "#462966",
      "#72898C",
    ])
  );
  sprite[SPRITE.HURT_KRAKEN] = CTI(create_hurt_kraken(0.8, ["#B6222A"]));
  sprite[SPRITE.PIRANHA] = [];
  sprite[SPRITE.PIRANHA][SPRITE.DAY] = CTI(
    create_pirahna(0.8, true, [
      "#1e2021",
      "#961B1B",
      "#702727",
      "#C43B3B",
      "#d15151",
      "#B71C1C",
      "#E8E8E8",
      "#752E2E",
      "#891818",
    ])
  );
  sprite[SPRITE.PIRANHA][SPRITE.NIGHT] = CTI(
    create_pirahna(0.8, true, [
      "#0c0c0d",
      "#21112D",
      "#281A49",
      "#462966",
      "#321C56",
      "#1C073D",
      "#FFFFFF",
      "#1C0833",
      "#1B1238",
    ])
  );
  sprite[SPRITE.HURT_PIRANHA] = CTI(create_hurt_pirahna(0.8, ["#B6222A"]));
  sprite[SPRITE.FISH1] = [];
  sprite[SPRITE.FISH1][SPRITE.DAY] = CTI(
    create_fish1(
      0.4,
      true,
      ["#1e2021", "#db6f26", "#ffffff", "#000000", "#833813"],
      0
    )
  );
  sprite[SPRITE.FISH1][SPRITE.NIGHT] = CTI(
    create_fish1(0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)
  );
  sprite[SPRITE.FISH2] = [];
  sprite[SPRITE.FISH2][SPRITE.DAY] = CTI(
    create_fish1(
      0.4,
      true,
      ["#1e2021", "#d35e35", "#ffffff", "#000000", "#000000"],
      1
    )
  );
  sprite[SPRITE.FISH2][SPRITE.NIGHT] = CTI(
    create_fish1(0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 1)
  );
  sprite[SPRITE.FISH3] = [];
  sprite[SPRITE.FISH3][SPRITE.DAY] = CTI(
    create_fish1(
      0.4,
      true,
      [
        "#1e2021",
        "#2973a5",
        "#ffffff",
        "#ffff00",
        "#000000",
        "#03243f",
        "#f2ec30",
        "#162f6d",
      ],
      0
    )
  );
  sprite[SPRITE.FISH3][SPRITE.NIGHT] = CTI(
    create_fish1(0.4, true, ["#0c0c0d", "#21112D", "#281A49", "#462966"], 0)
  );
  sprite[SPRITE.HURT_FISH1] = CTI(create_hurt_fish1(0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH2] = CTI(create_hurt_fish1(0.4, ["#B6222A"]));
  sprite[SPRITE.HURT_FISH3] = CTI(create_hurt_fish1(0.4, ["#B6222A"]));
  sprite[SPRITE.CRAB_LOOT] = CTI(
    create_crab_loot(
      0.35,
      true,
      ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"],
      1
    )
  );
  sprite[SPRITE.CRAB_STICK] = CTI(
    create_crab_stick(
      0.35,
      true,
      ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"],
      1
    )
  );
  sprite[SPRITE.CRAB_ATTACK] = [];
  sprite[SPRITE.CRAB_ATTACK][SPRITE.DAY] = CTI(
    create_crab(
      0.35,
      true,
      ["#1e2021", "#e45936", "#B6222A", "#B6222A", "#FFFFFF"],
      1
    )
  );
  sprite[SPRITE.CRAB_ATTACK][SPRITE.NIGHT] = CTI(
    create_crab(
      0.35,
      true,
      ["#0c0c0d", "#613577", "#462966", "#1C073D", "#FFFFFF"],
      1
    )
  );
  sprite[SPRITE.CRAB] = [];
  sprite[SPRITE.CRAB][SPRITE.DAY] = CTI(
    create_crab(
      0.35,
      true,
      ["#1e2021", "#e45936", "#ffffff", "#181414", "#FFFFFF"],
      0
    )
  );
  sprite[SPRITE.CRAB][SPRITE.NIGHT] = CTI(
    create_crab(
      0.35,
      true,
      ["#0c0c0d", "#34255d", "#563f83", "#180f21", "#FFFFFF"],
      0
    )
  );
  sprite[SPRITE.CRAB_CLAW_LEFT] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.DAY] = CTI(
    create_crab_claw_left(0.35, true, ["#1e2021", "#e45936", "#ffffff"])
  );
  sprite[SPRITE.CRAB_CLAW_LEFT][SPRITE.NIGHT] = CTI(
    create_crab_claw_left(0.35, true, ["#0c0c0d", "#34255d", "#563f83"])
  );
  sprite[SPRITE.CRAB_CLAW_RIGHT] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.DAY] = CTI(
    create_crab_claw_right(0.42, true, ["#1e2021", "#e45936", "#ffffff"])
  );
  sprite[SPRITE.CRAB_CLAW_RIGHT][SPRITE.NIGHT] = CTI(
    create_crab_claw_right(0.42, true, ["#0c0c0d", "#34255d", "#563f83"])
  );
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.DAY] = CTI(
    create_crab_claw_left(0.35, true, ["#1e2021", "#e45936", "#B6222A"])
  );
  sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][SPRITE.NIGHT] = CTI(
    create_crab_claw_left(0.35, true, ["#0c0c0d", "#613577", "#462966"])
  );
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK] = [];
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.DAY] = CTI(
    create_crab_claw_right(0.42, true, ["#1e2021", "#e45936", "#B6222A"])
  );
  sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][SPRITE.NIGHT] = CTI(
    create_crab_claw_right(0.42, true, ["#0c0c0d", "#613577", "#462966"])
  );
  sprite[SPRITE.HURT_CRAB] = CTI(create_hurt_crab(0.35, ["#B6222A"]));
  sprite[SPRITE.HURT_CRAB_CLAW_LEFT] = CTI(
    create_crab_claw_left(0.35, true, [undefined, "#B6222A"])
  );
  sprite[SPRITE.HURT_CRAB_CLAW_RIGHT] = CTI(
    create_crab_claw_right(0.35, true, [undefined, "#B6222A"])
  );
  sprite[SPRITE.HEAL_CRAB] = CTI(create_hurt_crab(0.35, ["#22E066"]));
  sprite[SPRITE.HEAL_CRAB_CLAW_LEFT] = CTI(
    create_crab_claw_left(0.35, true, [undefined, "#22E066"])
  );
  sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT] = CTI(
    create_crab_claw_right(0.35, true, [undefined, "#22E066"])
  );
  sprite[SPRITE.DIVING_MASK] = [];
  sprite[SPRITE.DIVING_MASK][SPRITE.DAY] = CTI(
    create_divingmask(0.3, true, [
      "#1e2021",
      "#65A8B7",
      "#2E85A0",
      "#14275B",
      "#081826",
      "#1A3163",
      "#0C1944",
      "#89C4CE",
      "#2E85A0",
    ])
  );
  sprite[SPRITE.DIVING_MASK][SPRITE.NIGHT] = CTI(
    create_divingmask(0.3, true, [
      "#0c0c0d",
      "#89C9C7",
      "#469E95",
      "#092C38",
      "#072021",
      "#0E343D",
      "#071F2D",
      "#9FD3D3",
      "#135367",
    ])
  );
  sprite[SPRITE.SUPER_DIVING_SUIT] = [];
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.DAY] = CTI(
    create_superdivingsuit(0.45, true, [
      "#C4BC51",
      "#B29C32",
      "#201851",
      "#652D8E",
      "#1e2021",
      "#2E85A0",
    ])
  );
  sprite[SPRITE.SUPER_DIVING_SUIT][SPRITE.NIGHT] = CTI(
    create_superdivingsuit(0.45, true, [
      "#235050",
      "#357472",
      "#081B2D",
      "#342C7C",
      "#0c0c0d",
      "#135367",
    ])
  );
  sprite[SPRITE.PLOT] = [];
  sprite[SPRITE.PLOT][SPRITE.DAY] = CTI(
    create_plot(0.63, true, ["#1e2021", "#352E1E", "#4C3B19", "#574122"])
  );
  sprite[SPRITE.PLOT][SPRITE.NIGHT] = CTI(
    create_plot(0.63, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])
  );
  sprite[SPRITE.BRIDGE] = [];
  sprite[SPRITE.BRIDGE][SPRITE.DAY] = CTI(
    create_bridge(1, true, ["#1e2021", "#332715", "#4C3B19", "#574122"])
  );
  sprite[SPRITE.BRIDGE][SPRITE.NIGHT] = CTI(
    create_bridge(1, true, ["#0c0c0d", "#071f22", "#0d2e33", "#184747"])
  );
  sprite[SPRITE.WOOD_TOWER] = [];
  sprite[SPRITE.WOOD_TOWER][SPRITE.DAY] = IMAGES.WOOD_TOWERD;
  sprite[SPRITE.WOOD_TOWER][SPRITE.NIGHT] = IMAGES.WOOD_TOWERN;
  sprite[SPRITE.ROOF] = [];
  sprite[SPRITE.ROOF][SPRITE.DAY] = CTI(
    create_roof(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])
  );
  sprite[SPRITE.ROOF][SPRITE.NIGHT] = CTI(
    create_roof(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])
  );
  sprite[SPRITE.ROOFS] = [sprite[SPRITE.ROOF]];
  sprite[SPRITE.ROOFS][1] = [];
  sprite[SPRITE.ROOFS][2] = [];
  sprite[SPRITE.ROOFS][1][SPRITE.DAY] = CTI(
    create_roof1(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])
  );
  sprite[SPRITE.ROOFS][1][SPRITE.NIGHT] = CTI(
    create_roof1(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])
  );
  sprite[SPRITE.ROOFS][2][SPRITE.DAY] = CTI(
    create_roof2(0.59, true, ["#0d1b1c", "#44301b", "#57442a", "#523e26"])
  );
  sprite[SPRITE.ROOFS][2][SPRITE.NIGHT] = CTI(
    create_roof2(0.59, true, ["#0c0c0d", "#062124", "#10373d", "#0f3333"])
  );
  sprite[SPRITE.WATERING_CAN_FULL] = [];
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.DAY] = CTI(
    create_rotated_img(
      3 - Math.PI / 2,
      create_watering_can(0.6, true, [
        "#1e2021",
        "#674C2A",
        "#4C3B19",
        "#594225",
        "#1678a2",
      ])
    )
  );
  sprite[SPRITE.WATERING_CAN_FULL][SPRITE.NIGHT] = CTI(
    create_rotated_img(
      3 - Math.PI / 2,
      create_watering_can(0.6, true, [
        "#0c0c0d",
        "#07383c",
        "#0c4e53",
        "#042b2e",
        "#0c5975",
        "#11546c",
      ])
    )
  );
  sprite[SPRITE.DEAD_BOX] = [];
  sprite[SPRITE.DEAD_BOX][SPRITE.DAY] = CTI(
    create_dead_box(
      0.3,
      ["#ad8850", "#714f24", "#9f7d4a", "#b38e59", "#8b1008"],
      0
    )
  );
  sprite[SPRITE.DEAD_BOX][SPRITE.NIGHT] = CTI(
    create_dead_box(
      0.3,
      ["#1F5453", "#123335", "#1D4947", "#1F5453", "#0c2629"],
      0
    )
  );
  sprite[SPRITE.DEAD_BOX_UI] = CTI(
    create_dead_box_ui(0.3, [
      "#ad8850",
      "#714f24",
      "#9f7d4a",
      "#b38e59",
      "#413624",
    ])
  );
  sprite[SPRITE.HURT_DEAD_BOX] = CTI(create_hurt_dead_box(0.3, ["#BB0000"]));
  sprite[SPRITE.WINDMILL_FLOUR] = create_craft_button(
    1,
    [
      {
        f: create_flour,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"],
      },
    ],
    0.25,
    ["#d2c77b", "#e7dc8f", "#bfb360"],
    0.7
  );
  sprite[SPRITE.LAVA_HEART] = create_craft_button(
    1.5,
    [
      {
        f: create_dragon_heart,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#120202", "#750a0a", "#991616", "#120202"],
      },
    ],
    0.45,
    ["#5bbcc9", "#73d2df", "#4daab6"],
    0.9
  );
  sprite[SPRITE.HEART_SYMBOL_HUD] = create_symbol_hud(
    0.35,
    ["#072428", "#67A242", "#67A242"],
    0
  );
  sprite[SPRITE.COLD_SYMBOL_HUD] = create_symbol_hud(
    0.35,
    [
      "#172130",
      "#649BB2",
      "#FFFFFF",
      "#FFFFFF",
      "#90C2D3",
      "#649BB2",
      "#84BDD1",
      "#2F5866",
    ],
    1
  );
  sprite[SPRITE.FOOD_SYMBOL_HUD] = create_symbol_hud(
    0.35,
    ["#3F0B11", "#B13424", "#FFFFFF", "#B13424", "#7e180b"],
    2
  );
  sprite[SPRITE.WATER_SYMBOL_HUD] = create_symbol_hud(
    0.35,
    ["#1B2F4C", "#29488E", "#76c3e8", "#ffffff"],
    3
  );
  if (!mobile) {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard(1));
  } else {
    sprite[SPRITE.LEADERBOARD] = CTI(create_leaderboard_mobile(1));
  }
  if (!mobile) {
    sprite[SPRITE.GAUGES] = CTI(create_gauges(1));
  } else {
    sprite[SPRITE.GAUGES] = CTI(create_gauges_mobile(0.75));
  }
  if (!mobile) {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(1));
  } else {
    sprite[SPRITE.OXYGEN] = CTI(create_oxygen_gauges(0.75));
  }
  sprite[SPRITE.DELAY_HELMET] = CTI(
    create_viking_hat(0.16, true, [
      "rgba(0, 0, 0, 0)",
      "#FFFFFF",
      "#FFFFFF",
      "#FFFFFF",
      "#FFFFFF",
    ])
  );
  sprite[SPRITE.DELAY_WEAPON] = CTI(
    create_rotated_img(
      5.8,
      create_sword(0.15, true, [
        "rgba(0, 0, 0, 0)",
        "#FFFFFF",
        "#FFFFFF",
        "#FFFFFF",
        "#FFFFFF",
      ])
    )
  );
  sprite[SPRITE.COUNTER] = [];
  sprite[SPRITE.SLOT_NUMBER] = [];
  for (var i = 0; i < WORLD.WITH_BAG + 2; i++) {
    sprite[SPRITE.SLOT_NUMBER][i] = create_text(1, "" + (i + 1), 12, "#FFF");
  }
  sprite[SPRITE.RECIPE_BUTTON] = [];
  sprite[SPRITE.RECIPE_BUTTON].push(
    CTI(
      create_recipe_button(0.12, [
        "#442F19",
        "#2C2112",
        "#C09D6F",
        "#A37943",
        "#eda80d",
      ])
    )
  );
  sprite[SPRITE.RECIPE_BUTTON].push(
    CTI(
      create_recipe_button(
        0.12,
        ["#553b20", "#3e2f1a", "#d1ad7d", "#b3864c", "#eda80d"],
        1
      )
    )
  );
  sprite[SPRITE.RECIPE_BUTTON].push(
    CTI(
      create_recipe_button(
        0.12,
        ["#30200f", "#20180c", "#a78559", "#855f2f", "#b37d08"],
        1
      )
    )
  );
  sprite[SPRITE.CLOCK] = [];
  sprite[SPRITE.CLOCK].push(CTI(create_clock_day(0.22)));
  sprite[SPRITE.CLOCK].push(CTI(create_clock_night(0.22)));
  sprite[SPRITE.ARROW_CLOCK] = CTI(create_arrow_clock(0.22));
  sprite[SPRITE.OPTION_BUTTON] = [];
  sprite[SPRITE.OPTION_BUTTON].push(
    CTI(create_gear_option(1.5, ["#795026", "#654320", "#eda80d"], 0))
  );
  sprite[SPRITE.OPTION_BUTTON].push(
    CTI(create_gear_option(1.5, ["#8f5e2c", "#7a5126", "#eda80d"], 1))
  );
  sprite[SPRITE.OPTION_BUTTON].push(
    CTI(create_gear_option(1.5, ["#67441f", "#573819", "#9c6e08"], 1))
  );
  sprite[SPRITE.AUTO_FEED] = IMAGES.AUTO_FEED;
  sprite[SPRITE.BANDAGE_ACTIVATED] = IMAGES.BANDAGE_ACTIVATED;
  sprite[SPRITE.STOP_REGENERATION] = IMAGES.STOP_REGENERATION;
  sprite[SPRITE.STOP_REGENERATION_BLIZZARD] = IMAGES.STOP_REGENERATION_BLIZZARD;
  sprite[SPRITE.SHOW_SPECTATORS] = create_text(
    1,
    "Show spectators",
    25,
    "#FFF",
    undefined,
    undefined,
    "#000",
    5,
    220
  );
  sprite[SPRITE.RECONNECT] = create_text(1, "Reconnecting...", 30, "#FFF");
  console.log("Load canvas", Date.now() - d);
}
function init_fake_world() {
  document.getElementById("game_body").style.backgroundColor =
    SPRITE.GROUND[fake_world.time];
  fake_world.items.push(
    new Item(ITEMS.FIRE, 0, 0, 0, 0, Math.random() * Math.PI * 2, 2, 1)
  );
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
  fake_world.items.push(
    new Item(ITEMS.WORKBENCH, 0, 0, 0, 0, Math.PI / 4, 0, 0)
  );
  fake_world.items.push(new Item(ITEMS.FRUIT, 0, 0, 0, 0, 0, 0, 5));
}
function draw_fake_world() {
  var _0x15c621 = fake_world.time;
  if (sprite[SPRITE.HERB]) {
    ctx.drawImage(sprite[SPRITE.HERB][_0x15c621][1], canw2 + 480, canh2 + 190);
    ctx.drawImage(sprite[SPRITE.HERB][_0x15c621][2], canw2 + 180, canh2 - 430);
    ctx.drawImage(sprite[SPRITE.HERB][_0x15c621][1], canw2 - 855, canh2 + 100);
    ctx.drawImage(sprite[SPRITE.HERB][_0x15c621][0], canw2 - 550, canh2 - 300);
    ctx.drawImage(sprite[SPRITE.HERB][_0x15c621][0], canw2 - 1020, canh2 - 520);
  }
  if (sprite[SPRITE.STONES]) {
    ctx.drawImage(sprite[SPRITE.STONES][_0x15c621][1], canw2 - 80, canh2 - 640);
    ctx.drawImage(sprite[SPRITE.STONES][_0x15c621][1], canw2 + 80, canh2 + 490);
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][2],
      canw2 - 180,
      canh2 - 700
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][0],
      canw2 + 550,
      canh2 + 100
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][1],
      canw2 + 450,
      canh2 + 300
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][1],
      canw2 + 780,
      canh2 + 300
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][2],
      canw2 + 980,
      canh2 + 200
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][2],
      canw2 + 680,
      canh2 + 600
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][2],
      canw2 - 380,
      canh2 + 100
    );
    ctx.drawImage(
      sprite[SPRITE.STONES][_0x15c621][2],
      canw2 + 280,
      canh2 + 250
    );
  }
  sprite[SPRITE.PLANT] &&
    (ctx.drawImage(sprite[SPRITE.PLANT][_0x15c621][0], canw2 - 590, canh2),
    ctx.drawImage(sprite[SPRITE.PLANT][_0x15c621][0], canw2 + 120, canh2 - 390),
    ctx.drawImage(
      sprite[SPRITE.PLANT][_0x15c621][0],
      canw2 - 270,
      canh2 + 340
    ));
  if (sprite[SPRITE.TREE]) {
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][4], canw2 - 700, canh2 - 600);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][2], canw2 - 970, canh2 - 250);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][5], canw2 - 720, canh2 - 200);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][2], canw2 - 1020, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][0], canw2 - 1120, canh2 - 0);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][1], canw2 - 650, canh2 - 330);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][4], canw2 - 495, canh2 - 90);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][3], canw2 - 520, canh2 + 340);
    ctx.drawImage(sprite[SPRITE.TREE][_0x15c621][2], canw2 + 830, canh2 - 520);
  }
  if (sprite[SPRITE.FIR]) {
  }
  if (user && world) {
    var _0x389b1c = user.cam.x;
    var _0x320460 = user.cam.y;
    user.cam.x = canw2;
    user.cam.y = canh2;
    var _0x2c6557 = world.time;
    world.time = fake_world.time;
    var _0x44a9d6 = fake_world.items;
    _0x44a9d6[2].x = 400;
    _0x44a9d6[2].y = 100;
    _0x44a9d6[2].draw(SPRITE.WORKBENCH);
    var _0x507115 = _0x44a9d6[1];
    _0x507115.x = -500;
    _0x507115.y = 100;
    _0x507115.fruits[0].x = _0x507115.x - 20.5;
    _0x507115.fruits[0].y = _0x507115.y - 22.5;
    _0x507115.fruits[1].x = _0x507115.x - 35.5;
    _0x507115.fruits[1].y = _0x507115.y + 7.5;
    _0x507115.fruits[2].x = _0x507115.x + 7.5;
    _0x507115.fruits[2].y = _0x507115.y - 30;
    _0x507115.fruits[3].x = _0x507115.x + 22.5;
    _0x507115.fruits[3].y = _0x507115.y;
    _0x507115.fruits[4].x = _0x507115.x - 7.5;
    _0x507115.fruits[4].y = _0x507115.y + 14.5;
    for (var _0x520121 = 0; _0x520121 < _0x507115.info; _0x520121++) {
      _0x507115.fruits[_0x520121].draw(SPRITE.FRUIT);
    }
    var _0x507115 = _0x44a9d6[3];
    _0x507115.x = 210;
    _0x507115.y = -290;
    _0x507115.fruits[0].x = _0x507115.x - 20.5;
    _0x507115.fruits[0].y = _0x507115.y - 22.5;
    _0x507115.fruits[1].x = _0x507115.x - 35.5;
    _0x507115.fruits[1].y = _0x507115.y + 7.5;
    _0x507115.fruits[2].x = _0x507115.x + 7.5;
    _0x507115.fruits[2].y = _0x507115.y - 30;
    _0x507115.fruits[3].x = _0x507115.x + 22.5;
    _0x507115.fruits[3].y = _0x507115.y;
    _0x507115.fruits[4].x = _0x507115.x - 7.5;
    _0x507115.fruits[4].y = _0x507115.y + 14.5;
    for (var _0x520121 = 0; _0x520121 < _0x507115.info; _0x520121++) {
      _0x507115.fruits[_0x520121].draw(SPRITE.FRUIT);
    }
    _0x44a9d6[0].x = 450;
    _0x44a9d6[0].y = -100;
    _0x44a9d6[0].draw_bg(SPRITE.WOOD_FIRE);
    _0x44a9d6[0].draw_fg();
    user.cam.x = _0x389b1c;
    user.cam.y = _0x320460;
    world.time = _0x2c6557;
  }
}
function render_inventory() {
  sprite[SPRITE.INV_PUMPKIN] = create_craft_button(
    1,
    [
      {
        f: create_pumpkin,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#352b10",
          "#c06937",
          "#cd733b",
          "#b25e34",
          "#244e2b",
          "#214224",
          "#6f4424",
          "#3c3009",
        ],
      },
    ],
    0.2,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_PUMPKIN] = sprite[SPRITE.INV_PUMPKIN];
  sprite[SPRITE.INV_CARROT] = [];
  sprite[SPRITE.INV_CARROT][0] = IMAGES.INV_CARROT_OUT;
  sprite[SPRITE.INV_CARROT][1] = IMAGES.INV_CARROT_IN;
  sprite[SPRITE.INV_CARROT][2] = IMAGES.INV_CARROT_CLICK;
  sprite[SPRITE.CHEST_CARROT] = sprite[SPRITE.INV_CARROT];
  sprite[SPRITE.INV_WATERMELON] = [];
  sprite[SPRITE.INV_WATERMELON][0] = IMAGES.INV_WATERMELON_OUT;
  sprite[SPRITE.INV_WATERMELON][1] = IMAGES.INV_WATERMELON_IN;
  sprite[SPRITE.INV_WATERMELON][2] = IMAGES.INV_WATERMELON_CLICK;
  sprite[SPRITE.CHEST_WATERMELON] = sprite[SPRITE.INV_WATERMELON];
  sprite[SPRITE.INV_ALOE_VERA] = [];
  sprite[SPRITE.INV_ALOE_VERA][0] = IMAGES.INV_ALOE_VERA_OUT;
  sprite[SPRITE.INV_ALOE_VERA][1] = IMAGES.INV_ALOE_VERA_IN;
  sprite[SPRITE.INV_ALOE_VERA][2] = IMAGES.INV_ALOE_VERA_CLICK;
  sprite[SPRITE.CHEST_ALOE_VERA] = sprite[SPRITE.INV_ALOE_VERA];
  sprite[SPRITE.INV_CACTUS] = [];
  sprite[SPRITE.INV_CACTUS][0] = IMAGES.INV_CACTUS_OUT;
  sprite[SPRITE.INV_CACTUS][1] = IMAGES.INV_CACTUS_IN;
  sprite[SPRITE.INV_CACTUS][2] = IMAGES.INV_CACTUS_CLICK;
  sprite[SPRITE.CHEST_CACTUS] = sprite[SPRITE.INV_CACTUS];
  sprite[SPRITE.INV_TOMATO] = [];
  sprite[SPRITE.INV_TOMATO][0] = IMAGES.INV_TOMATO_OUT;
  sprite[SPRITE.INV_TOMATO][1] = IMAGES.INV_TOMATO_IN;
  sprite[SPRITE.INV_TOMATO][2] = IMAGES.INV_TOMATO_CLICK;
  sprite[SPRITE.CHEST_TOMATO] = sprite[SPRITE.INV_TOMATO];
  sprite[SPRITE.INV_BOAT] = [];
  sprite[SPRITE.INV_BOAT][0] = IMAGES.INV_BOAT_OUT;
  sprite[SPRITE.INV_BOAT][1] = IMAGES.INV_BOAT_IN;
  sprite[SPRITE.INV_BOAT][2] = IMAGES.INV_BOAT_CLICK;
  sprite[SPRITE.CHEST_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.CRAFT_BOAT] = sprite[SPRITE.INV_BOAT];
  sprite[SPRITE.INV_MACHETE] = [];
  sprite[SPRITE.INV_MACHETE][0] = IMAGES.INV_MACHETE_OUT;
  sprite[SPRITE.INV_MACHETE][1] = IMAGES.INV_MACHETE_IN;
  sprite[SPRITE.INV_MACHETE][2] = IMAGES.INV_MACHETE_CLICK;
  sprite[SPRITE.CHEST_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.CRAFT_MACHETE] = sprite[SPRITE.INV_MACHETE];
  sprite[SPRITE.INV_SLED] = [];
  sprite[SPRITE.INV_SLED][0] = IMAGES.INV_SLED_OUT;
  sprite[SPRITE.INV_SLED][1] = IMAGES.INV_SLED_IN;
  sprite[SPRITE.INV_SLED][2] = IMAGES.INV_SLED_CLICK;
  sprite[SPRITE.CHEST_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.CRAFT_SLED] = sprite[SPRITE.INV_SLED];
  sprite[SPRITE.INV_PIRATE_HAT] = [];
  sprite[SPRITE.INV_PIRATE_HAT][0] = IMAGES.INV_PIRATE_HAT_OUT;
  sprite[SPRITE.INV_PIRATE_HAT][1] = IMAGES.INV_PIRATE_HAT_IN;
  sprite[SPRITE.INV_PIRATE_HAT][2] = IMAGES.INV_PIRATE_HAT_CLICK;
  sprite[SPRITE.CHEST_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.CRAFT_PIRATE_HAT] = sprite[SPRITE.INV_PIRATE_HAT];
  sprite[SPRITE.INV_FUR_MAMMOTH] = [];
  sprite[SPRITE.INV_FUR_MAMMOTH][0] = IMAGES.INV_FUR_MAMMOTH_OUT;
  sprite[SPRITE.INV_FUR_MAMMOTH][1] = IMAGES.INV_FUR_MAMMOTH_IN;
  sprite[SPRITE.INV_FUR_MAMMOTH][2] = IMAGES.INV_FUR_MAMMOTH_CLICK;
  sprite[SPRITE.CHEST_FUR_MAMMOTH] = sprite[SPRITE.INV_FUR_MAMMOTH];
  sprite[SPRITE.INV_FUR_HAT] = [];
  sprite[SPRITE.INV_FUR_HAT][0] = IMAGES.INV_FUR_HAT_OUT;
  sprite[SPRITE.INV_FUR_HAT][1] = IMAGES.INV_FUR_HAT_IN;
  sprite[SPRITE.INV_FUR_HAT][2] = IMAGES.INV_FUR_HAT_CLICK;
  sprite[SPRITE.CHEST_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.CRAFT_FUR_HAT] = sprite[SPRITE.INV_FUR_HAT];
  sprite[SPRITE.INV_WOOD_BOW] = [];
  sprite[SPRITE.INV_WOOD_BOW][0] = IMAGES.INV_WOOD_BOW_OUT;
  sprite[SPRITE.INV_WOOD_BOW][1] = IMAGES.INV_WOOD_BOW_IN;
  sprite[SPRITE.INV_WOOD_BOW][2] = IMAGES.INV_WOOD_BOW_CLICK;
  sprite[SPRITE.CHEST_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.CRAFT_WOOD_BOW] = sprite[SPRITE.INV_WOOD_BOW];
  sprite[SPRITE.INV_WOOD_ARROW] = [];
  sprite[SPRITE.INV_WOOD_ARROW][0] = IMAGES.INV_WOOD_ARROW_OUT;
  sprite[SPRITE.INV_WOOD_ARROW][1] = IMAGES.INV_WOOD_ARROW_IN;
  sprite[SPRITE.INV_WOOD_ARROW][2] = IMAGES.INV_WOOD_ARROW_CLICK;
  sprite[SPRITE.CHEST_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.CRAFT_WOOD_ARROW] = sprite[SPRITE.INV_WOOD_ARROW];
  sprite[SPRITE.INV_STONE_BOW] = [];
  sprite[SPRITE.INV_STONE_BOW][0] = IMAGES.INV_STONE_BOW_OUT;
  sprite[SPRITE.INV_STONE_BOW][1] = IMAGES.INV_STONE_BOW_IN;
  sprite[SPRITE.INV_STONE_BOW][2] = IMAGES.INV_STONE_BOW_CLICK;
  sprite[SPRITE.CHEST_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.CRAFT_STONE_BOW] = sprite[SPRITE.INV_STONE_BOW];
  sprite[SPRITE.INV_STONE_ARROW] = [];
  sprite[SPRITE.INV_STONE_ARROW][0] = IMAGES.INV_STONE_ARROW_OUT;
  sprite[SPRITE.INV_STONE_ARROW][1] = IMAGES.INV_STONE_ARROW_IN;
  sprite[SPRITE.INV_STONE_ARROW][2] = IMAGES.INV_STONE_ARROW_CLICK;
  sprite[SPRITE.CHEST_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.CRAFT_STONE_ARROW] = sprite[SPRITE.INV_STONE_ARROW];
  sprite[SPRITE.INV_GOLD_BOW] = [];
  sprite[SPRITE.INV_GOLD_BOW][0] = IMAGES.INV_GOLD_BOW_OUT;
  sprite[SPRITE.INV_GOLD_BOW][1] = IMAGES.INV_GOLD_BOW_IN;
  sprite[SPRITE.INV_GOLD_BOW][2] = IMAGES.INV_GOLD_BOW_CLICK;
  sprite[SPRITE.CHEST_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.CRAFT_GOLD_BOW] = sprite[SPRITE.INV_GOLD_BOW];
  sprite[SPRITE.INV_GOLD_ARROW] = [];
  sprite[SPRITE.INV_GOLD_ARROW][0] = IMAGES.INV_GOLD_ARROW_OUT;
  sprite[SPRITE.INV_GOLD_ARROW][1] = IMAGES.INV_GOLD_ARROW_IN;
  sprite[SPRITE.INV_GOLD_ARROW][2] = IMAGES.INV_GOLD_ARROW_CLICK;
  sprite[SPRITE.CHEST_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.CRAFT_GOLD_ARROW] = sprite[SPRITE.INV_GOLD_ARROW];
  sprite[SPRITE.INV_DIAMOND_BOW] = [];
  sprite[SPRITE.INV_DIAMOND_BOW][0] = IMAGES.INV_DIAMOND_BOW_OUT;
  sprite[SPRITE.INV_DIAMOND_BOW][1] = IMAGES.INV_DIAMOND_BOW_IN;
  sprite[SPRITE.INV_DIAMOND_BOW][2] = IMAGES.INV_DIAMOND_BOW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.CRAFT_DIAMOND_BOW] = sprite[SPRITE.INV_DIAMOND_BOW];
  sprite[SPRITE.INV_DIAMOND_ARROW] = [];
  sprite[SPRITE.INV_DIAMOND_ARROW][0] = IMAGES.INV_DIAMOND_ARROW_OUT;
  sprite[SPRITE.INV_DIAMOND_ARROW][1] = IMAGES.INV_DIAMOND_ARROW_IN;
  sprite[SPRITE.INV_DIAMOND_ARROW][2] = IMAGES.INV_DIAMOND_ARROW_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.CRAFT_DIAMOND_ARROW] = sprite[SPRITE.INV_DIAMOND_ARROW];
  sprite[SPRITE.INV_AMETHYST_BOW] = [];
  sprite[SPRITE.INV_AMETHYST_BOW][0] = IMAGES.INV_AMETHYST_BOW_OUT;
  sprite[SPRITE.INV_AMETHYST_BOW][1] = IMAGES.INV_AMETHYST_BOW_IN;
  sprite[SPRITE.INV_AMETHYST_BOW][2] = IMAGES.INV_AMETHYST_BOW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.CRAFT_AMETHYST_BOW] = sprite[SPRITE.INV_AMETHYST_BOW];
  sprite[SPRITE.INV_AMETHYST_ARROW] = [];
  sprite[SPRITE.INV_AMETHYST_ARROW][0] = IMAGES.INV_AMETHYST_ARROW_OUT;
  sprite[SPRITE.INV_AMETHYST_ARROW][1] = IMAGES.INV_AMETHYST_ARROW_IN;
  sprite[SPRITE.INV_AMETHYST_ARROW][2] = IMAGES.INV_AMETHYST_ARROW_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.CRAFT_AMETHYST_ARROW] = sprite[SPRITE.INV_AMETHYST_ARROW];
  sprite[SPRITE.INV_REIDITE_BOW] = [];
  sprite[SPRITE.INV_REIDITE_BOW][0] = IMAGES.INV_REIDITE_BOW_OUT;
  sprite[SPRITE.INV_REIDITE_BOW][1] = IMAGES.INV_REIDITE_BOW_IN;
  sprite[SPRITE.INV_REIDITE_BOW][2] = IMAGES.INV_REIDITE_BOW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.CRAFT_REIDITE_BOW] = sprite[SPRITE.INV_REIDITE_BOW];
  sprite[SPRITE.INV_REIDITE_ARROW] = [];
  sprite[SPRITE.INV_REIDITE_ARROW][0] = IMAGES.INV_REIDITE_ARROW_OUT;
  sprite[SPRITE.INV_REIDITE_ARROW][1] = IMAGES.INV_REIDITE_ARROW_IN;
  sprite[SPRITE.INV_REIDITE_ARROW][2] = IMAGES.INV_REIDITE_ARROW_CLICK;
  sprite[SPRITE.CHEST_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.CRAFT_REIDITE_ARROW] = sprite[SPRITE.INV_REIDITE_ARROW];
  sprite[SPRITE.INV_DRAGON_BOW] = [];
  sprite[SPRITE.INV_DRAGON_BOW][0] = IMAGES.INV_DRAGON_BOW_OUT;
  sprite[SPRITE.INV_DRAGON_BOW][1] = IMAGES.INV_DRAGON_BOW_IN;
  sprite[SPRITE.INV_DRAGON_BOW][2] = IMAGES.INV_DRAGON_BOW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.CRAFT_DRAGON_BOW] = sprite[SPRITE.INV_DRAGON_BOW];
  sprite[SPRITE.INV_DRAGON_ARROW] = [];
  sprite[SPRITE.INV_DRAGON_ARROW][0] = IMAGES.INV_DRAGON_ARROW_OUT;
  sprite[SPRITE.INV_DRAGON_ARROW][1] = IMAGES.INV_DRAGON_ARROW_IN;
  sprite[SPRITE.INV_DRAGON_ARROW][2] = IMAGES.INV_DRAGON_ARROW_CLICK;
  sprite[SPRITE.CHEST_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.CRAFT_DRAGON_ARROW] = sprite[SPRITE.INV_DRAGON_ARROW];
  sprite[SPRITE.INV_WOOD_SHIELD] = [];
  sprite[SPRITE.INV_WOOD_SHIELD][0] = IMAGES.INV_WOOD_SHIELD_OUT;
  sprite[SPRITE.INV_WOOD_SHIELD][1] = IMAGES.INV_WOOD_SHIELD_IN;
  sprite[SPRITE.INV_WOOD_SHIELD][2] = IMAGES.INV_WOOD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.CRAFT_WOOD_SHIELD] = sprite[SPRITE.INV_WOOD_SHIELD];
  sprite[SPRITE.INV_STONE_SHIELD] = [];
  sprite[SPRITE.INV_STONE_SHIELD][0] = IMAGES.INV_STONE_SHIELD_OUT;
  sprite[SPRITE.INV_STONE_SHIELD][1] = IMAGES.INV_STONE_SHIELD_IN;
  sprite[SPRITE.INV_STONE_SHIELD][2] = IMAGES.INV_STONE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.CRAFT_STONE_SHIELD] = sprite[SPRITE.INV_STONE_SHIELD];
  sprite[SPRITE.INV_GOLD_SHIELD] = [];
  sprite[SPRITE.INV_GOLD_SHIELD][0] = IMAGES.INV_GOLD_SHIELD_OUT;
  sprite[SPRITE.INV_GOLD_SHIELD][1] = IMAGES.INV_GOLD_SHIELD_IN;
  sprite[SPRITE.INV_GOLD_SHIELD][2] = IMAGES.INV_GOLD_SHIELD_CLICK;
  sprite[SPRITE.CHEST_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.CRAFT_GOLD_SHIELD] = sprite[SPRITE.INV_GOLD_SHIELD];
  sprite[SPRITE.INV_DIAMOND_SHIELD] = [];
  sprite[SPRITE.INV_DIAMOND_SHIELD][0] = IMAGES.INV_DIAMOND_SHIELD_OUT;
  sprite[SPRITE.INV_DIAMOND_SHIELD][1] = IMAGES.INV_DIAMOND_SHIELD_IN;
  sprite[SPRITE.INV_DIAMOND_SHIELD][2] = IMAGES.INV_DIAMOND_SHIELD_CLICK;
  sprite[SPRITE.CHEST_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.CRAFT_DIAMOND_SHIELD] = sprite[SPRITE.INV_DIAMOND_SHIELD];
  sprite[SPRITE.INV_AMETHYST_SHIELD] = [];
  sprite[SPRITE.INV_AMETHYST_SHIELD][0] = IMAGES.INV_AMETHYST_SHIELD_OUT;
  sprite[SPRITE.INV_AMETHYST_SHIELD][1] = IMAGES.INV_AMETHYST_SHIELD_IN;
  sprite[SPRITE.INV_AMETHYST_SHIELD][2] = IMAGES.INV_AMETHYST_SHIELD_CLICK;
  sprite[SPRITE.CHEST_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.CRAFT_AMETHYST_SHIELD] = sprite[SPRITE.INV_AMETHYST_SHIELD];
  sprite[SPRITE.INV_REIDITE_SHIELD] = [];
  sprite[SPRITE.INV_REIDITE_SHIELD][0] = IMAGES.INV_REIDITE_SHIELD_OUT;
  sprite[SPRITE.INV_REIDITE_SHIELD][1] = IMAGES.INV_REIDITE_SHIELD_IN;
  sprite[SPRITE.INV_REIDITE_SHIELD][2] = IMAGES.INV_REIDITE_SHIELD_CLICK;
  sprite[SPRITE.CHEST_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.CRAFT_REIDITE_SHIELD] = sprite[SPRITE.INV_REIDITE_SHIELD];
  sprite[SPRITE.INV_FLOWER_HAT] = [];
  sprite[SPRITE.INV_FLOWER_HAT][0] = IMAGES.INV_FLOWER_HAT_OUT;
  sprite[SPRITE.INV_FLOWER_HAT][1] = IMAGES.INV_FLOWER_HAT_IN;
  sprite[SPRITE.INV_FLOWER_HAT][2] = IMAGES.INV_FLOWER_HAT_CLICK;
  sprite[SPRITE.CHEST_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.CRAFT_FLOWER_HAT] = sprite[SPRITE.INV_FLOWER_HAT];
  sprite[SPRITE.INV_SANDWORM_JUICE] = [];
  sprite[SPRITE.INV_SANDWORM_JUICE][0] = IMAGES.INV_SANDWORM_JUICE_OUT;
  sprite[SPRITE.INV_SANDWORM_JUICE][1] = IMAGES.INV_SANDWORM_JUICE_IN;
  sprite[SPRITE.INV_SANDWORM_JUICE][2] = IMAGES.INV_SANDWORM_JUICE_CLICK;
  sprite[SPRITE.CHEST_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.CRAFT_SANDWORM_JUICE] = sprite[SPRITE.INV_SANDWORM_JUICE];
  sprite[SPRITE.INV_GARLIC] = create_craft_button(
    1,
    [
      {
        f: create_garlic,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#e8e8e8", "#bbbbbb", "#e0e1e0", "#c4c4c4"],
      },
    ],
    0.22,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_GARLIC] = sprite[SPRITE.INV_GARLIC];
  sprite[SPRITE.INV_THORNBUSH] = create_craft_button(
    1,
    [
      {
        f: create_brambles,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#352b10", "#349970", "#245c45", "#348361", "#e8e8e8", "#bbbbbb"],
      },
    ],
    0.2,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_THORNBUSH] = sprite[SPRITE.INV_THORNBUSH];
  sprite[SPRITE.INV_WINDMILL] = create_craft_button(
    1,
    [
      {
        f: create_windmill,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#596560",
          "#394841",
          "#67766F",
          "#46554D",
          "#4C3B19",
          "#674C2A",
          "#7C5A29",
          "#596560",
          "#394841",
        ],
      },
      {
        f: create_windmill_wing,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#596560",
          "#394841",
          "#67766F",
          "#46554D",
          "#4C3B19",
          "#674C2A",
          "#7C5A29",
          "#596560",
          "#394841",
        ],
      },
      {
        f: create_windmill_head,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#596560",
          "#394841",
          "#67766F",
          "#46554D",
          "#4C3B19",
          "#674C2A",
          "#7C5A29",
          "#596560",
          "#394841",
        ],
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.INV_WILD_WHEAT] = create_craft_button(
    1,
    [
      {
        f: create_wheat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"],
      },
    ],
    1.2,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_SIGN] = create_craft_button(
    1,
    [
      {
        f: create_sign,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#44301b", "#57442a", "#523e26"],
      },
    ],
    0.14,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.INV_WHEAT_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#A89F67", "#9E8456"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.INV_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#493d36", "#332b28"],
      },
    ],
    0.7,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.INV_PUMPKIN_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c67933", "#b17238"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.INV_GARLIC_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e8e8e8", "#bbbbbb"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.INV_THORNBUSH_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#328a56", "#449573"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.INV_CARROT_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c98e2f", "#a36b11"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.CHEST_CARROT_SEED] = sprite[SPRITE.INV_CARROT_SEED];
  sprite[SPRITE.INV_WATERMELON_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#13a56d", "#098a58"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.CHEST_WATERMELON_SEED] = sprite[SPRITE.INV_WATERMELON_SEED];
  sprite[SPRITE.INV_ALOE_VERA_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a8214", "#4a9c1e"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.CHEST_ALOE_VERA_SEED] = sprite[SPRITE.INV_ALOE_VERA_SEED];
  sprite[SPRITE.INV_TOMATO_SEED] = create_craft_button(
    1,
    [
      {
        f: create_seed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#b22419", "#99110e"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.CHEST_TOMATO_SEED] = sprite[SPRITE.INV_TOMATO_SEED];
  sprite[SPRITE.INV_FIRE] = create_craft_button(
    1,
    [
      {
        f: create_wood_fire,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516"],
      },
      {
        f: create_fire,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.INV_BIG_FIRE] = create_craft_button(
    1,
    [
      {
        f: create_big_fire_wood,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#4d2d14", "#432516", "#58645F", "#75827D", "#0c2c2e"],
      },
      {
        f: create_fire,
        x: -2,
        y: -1,
        a: 1,
        r: -Math.PI / 7,
        c: ["#efd435", "#ec8d35", "#e96132"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.INV_PIRATE_SWORD] = create_craft_button(
    1,
    [
      {
        f: create_pirate_sword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#4a3a22",
          "#362818",
          "#c7c7c7",
          "#909090",
          "#eceaea",
          "#bbbbbb",
          "#d6d1d1",
        ],
      },
    ],
    0.1,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SUGAR_CAN] = create_craft_button(
    1,
    [
      {
        f: create_sugar_can,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#ffffff",
          "#5f6061",
          "#eb2933",
          "#57b74e",
          "#42a54d",
          "#ac222a",
          "#e6636a",
        ],
      },
    ],
    0.3,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SWORD_WOOD] = create_craft_button(
    1,
    [
      {
        f: create_sword_wood,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#252525", "#73583e", "#493425", "#7d6144", "#5e4530", "#563e2b"],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SWORD] = create_craft_button(
    1,
    [
      {
        f: create_stonesword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061", "#b1afaf", "#493d36", "#332b28"],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SWORD_GOLD] = create_craft_button(
    1,
    [
      {
        f: create_goldsword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#c4bc51", "#b29c32", "#c4bc51", "#493e26", "#382e19"],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SWORD_DIAMOND] = create_craft_button(
    1,
    [
      {
        f: create_diamondsword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#6ad9e8",
          "#29aaa1",
          "#95e9f5",
          "#022320",
          "#011e19",
          "#FFFFFF",
        ],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_SWORD_AMETHYST] = create_craft_button(
    1,
    [
      {
        f: create_amesword,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#b864d6",
          "#8c29aa",
          "#cc81e7",
          "#262114",
          "#211108",
          "#FFFFFF",
        ],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK_WOOD] = create_craft_button(
    1,
    [
      {
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: [
          "#0d1b1c",
          "#000000",
          "#0d1b1c",
          "#4d2d14",
          "#432516",
          "#4d2d14",
          "#432516",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK] = create_craft_button(
    1,
    [
      {
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: [
          "#0d1b1c",
          "#000000",
          "#0d1b1c",
          "#4d2d14",
          "#432516",
          "#939393",
          "#5f6061",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK_GOLD] = create_craft_button(
    1,
    [
      {
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: [
          "#0d1b1c",
          "#000000",
          "#0d1b1c",
          "#493e26",
          "#382e19",
          "#c4bc51",
          "#b29c32",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK_DIAMOND] = create_craft_button(
    1,
    [
      {
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: [
          "#0d1b1c",
          "#000000",
          "#0d1b1c",
          "#262114",
          "#211108",
          "#63c9d6",
          "#29aaa1",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK_AMETHYST] = create_craft_button(
    1,
    [
      {
        f: create_pickaxe,
        x: -2,
        y: 5,
        a: 1,
        r: -Math.PI / 5,
        c: [
          "#0d1b1c",
          "#000000",
          "#0d1b1c",
          "#262114",
          "#211108",
          "#b864d6",
          "#8c29aa",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_PICK_REIDITE] = [];
  sprite[SPRITE.INV_PICK_REIDITE][0] = IMAGES.INV_PICK_REIDITE_OUT;
  sprite[SPRITE.INV_PICK_REIDITE][1] = IMAGES.INV_PICK_REIDITE_IN;
  sprite[SPRITE.INV_PICK_REIDITE][2] = IMAGES.INV_PICK_REIDITE_CLICK;
  sprite[SPRITE.CRAFT_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.CHEST_PICK_REIDITE] = sprite[SPRITE.INV_PICK_REIDITE];
  sprite[SPRITE.INV_STONE] = create_craft_button(
    1,
    [
      {
        f: create_stone,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#252B28", "#58645F", "#75827D"],
      },
    ],
    0.23,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_GOLD] = create_craft_button(
    1,
    [
      {
        f: create_gold,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#282823", "#877c2d", "#c4bc51"],
      },
    ],
    0.43,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_DIAMOND] = create_craft_button(
    1,
    [
      {
        f: create_diamond,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#232828", "#3fc9c9", "#74ede6"],
      },
    ],
    0.33,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_WOOD] = create_craft_button(
    1,
    [
      {
        f: create_wood_fire,
        x: 0,
        y: -5,
        a: 1,
        r: Math.PI / 2.5,
        c: ["#4d2d14", "#432516"],
      },
    ],
    0.3,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CRAFT_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CRAFT_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CRAFT_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CRAFT_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CRAFT_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CRAFT_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CRAFT_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CRAFT_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CRAFT_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.INV_PLANT] = create_craft_button(
    1,
    [
      {
        f: create_food_plant,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_WORK] = create_craft_button(
    1,
    [
      {
        f: create_workbench,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#756e52", "#663f22", "#9e9577"],
      },
    ],
    0.45,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WORK] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.INV_STONE_WALL] = create_craft_button(
    1,
    [
      {
        f: create_wall_stone,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#adbcb5", "#8a938e"],
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.INV_DIAMOND_WALL] = create_craft_button(
    1,
    [
      {
        f: create_wall_diamond,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5cc5ce",
          "#89d1d4",
          "#86d0d1",
          "#95d5d8",
          "#e0f2f6",
          "#b3e0e3",
        ],
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.INV_AMETHYST_WALL] = create_craft_button(
    1,
    [
      {
        f: create_wall_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"],
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.INV_GOLD_WALL] = create_craft_button(
    1,
    [
      {
        f: create_wall_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#b29e4d", "#c1b06b"],
      },
    ],
    0.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.INV_WALL] = create_craft_button(
    1,
    [
      {
        f: create_wall,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021", "#634828", "#4c3a15"],
      },
    ],
    0.45,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.INV_SPIKE] = create_craft_button(
    1,
    [
      {
        f: create_spike,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5f6061",
          "#939393",
          "#4c3a15",
          "#634828",
          "#564021",
          "#634828",
          "#4c3a15",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.INV_GOLD_SPIKE] = create_craft_button(
    1,
    [
      {
        f: create_spike_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5f6061",
          "#939393",
          "#877d36",
          "#a08f47",
          "#a7983c",
          "#b29e4d",
          "#c1b06b",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.INV_DIAMOND_SPIKE] = create_craft_button(
    1,
    [
      {
        f: create_spike_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#7d8b90",
          "#9facaa",
          "#5cc5ce",
          "#89d1d4",
          "#86d0d1",
          "#95d5d8",
          "#e0f2f6",
          "#b3e0e3",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.INV_STONE_SPIKE] = create_craft_button(
    1,
    [
      {
        f: create_spike_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5f6061",
          "#939393",
          "#6a7570",
          "#939995",
          "#9baaa3",
          "#adbcb5",
          "#8a938e",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.INV_AMETHYST_SPIKE] = create_craft_button(
    1,
    [
      {
        f: create_spike_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5f6061",
          "#939393",
          "#b15ecf",
          "#8c29aa",
          "#c26de0",
          "#af59cd",
          "#d588f1",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.INV_DOOR_WOOD_CLOSE] = create_craft_button(
    1,
    [
      {
        f: create_door_wood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3b19", "#574122", "#644928", "#574122", "#735534"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.INV_DOOR_STONE_CLOSE] = create_craft_button(
    1,
    [
      {
        f: create_door_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#6a7570", "#939995", "#9baaa3", "#8a938e", "#adbcb5"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE] = create_craft_button(
    1,
    [
      {
        f: create_door_stone,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#b15ecf", "#8c29aa", "#c26de0", "#af59cd", "#d588f1"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE] =
    sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.INV_DOOR_GOLD_CLOSE] = create_craft_button(
    1,
    [
      {
        f: create_door_gold,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#877d36", "#a08f47", "#a7983c", "#9a8636", "#c1b06b"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE] = create_craft_button(
    1,
    [
      {
        f: create_door_diamond,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#5cc5ce",
          "#89d1d4",
          "#86d0d1",
          "#95d5d8",
          "#e0f2f6",
          "#b3e0e3",
        ],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE] =
    sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.INV_CHEST] = create_craft_button(
    1,
    [
      {
        f: create_chest,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: [
          "#133a2b",
          "#9e8838",
          "#c4a23a",
          "#4c3b19",
          "#614627",
          "#614627",
          "#614627",
          "#c4a23a",
          "#c4a23a",
          "#c4a23a",
        ],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.INV_MEAT] = create_craft_button(
    1,
    [
      {
        f: create_meat,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#dd5d57", "#ffffff", "#5e5d5e", "#ffffff"],
      },
    ],
    1.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_COOKED_MEAT] = create_craft_button(
    1,
    [
      {
        f: create_meat,
        x: 0,
        y: -3,
        a: 1,
        r: 0,
        c: ["#602920", "#844f49", "#5e5d5e", "#d3ccc7"],
      },
    ],
    1.4,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.INV_CORD] = create_craft_button(
    1,
    [
      {
        f: create_cord,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#cec0c4", "#ffffff", "#6d6768"],
      },
    ],
    0.9,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_BLUE_CORD] = create_craft_button(
    1,
    [
      {
        f: create_cord,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#d4e9ec", "#37b1d7", "#506c71"],
      },
    ],
    0.9,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.INV_FUR] = create_craft_button(
    1,
    [
      {
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ef96be", "#ffffff"],
      },
    ],
    0.5,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_FUR_BOAR] = create_craft_button(
    1,
    [
      {
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#55423e", "#ffffff"],
      },
    ],
    0.5,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_SPECIAL_FUR] = create_craft_button(
    1,
    [
      {
        f: create_special_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#ffffff", "#e7e2e2", "#b35c46", "#a34d37"],
      },
    ],
    0.25,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_SPECIAL_FUR_2] = create_craft_button(
    1,
    [
      {
        f: create_special_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#14151b", "#000000", "#b35c46", "#a34d37"],
      },
    ],
    0.25,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_KRAKEN_SKIN] = create_craft_button(
    1,
    [
      {
        f: create_fur,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#201851", "#b6222a"],
      },
    ],
    0.5,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_FUR_WOLF] = create_craft_button(
    1,
    [
      {
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#231f20", "#b6222a"],
      },
    ],
    0.5,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_FUR_WINTER] = create_craft_button(
    1,
    [
      {
        f: create_fur,
        x: -3,
        y: -3,
        a: 1,
        r: 0,
        c: ["#ffffff", "#b6222a"],
      },
    ],
    0.5,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_EARMUFFS] = create_craft_button(
    1,
    [
      {
        f: create_earmuff,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#f9efeb", "#dfd1cb", "#3e3c25", "#4d4a2e"],
      },
    ],
    0.4,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.INV_COAT] = create_craft_button(
    1,
    [
      {
        f: create_coat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3e3c25", "#4d4a2e", "#f9efeb", "#dfd1cb"],
      },
    ],
    0.4,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.INV_CAP_SCARF] = create_craft_button(
    1,
    [
      {
        f: create_cap_scarf,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#171a19", "#dee7e7", "#b8cccb", "#ffffff", "#e3e8e8"],
      },
    ],
    0.4,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.INV_CHRISTMAS_HAT] = create_craft_button(
    1,
    [
      {
        f: create_christmas_hat,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: ["#171a19", "#c5232c", "#84191d", "#a72027", "#fef4f4", "#e9dad9"],
      },
    ],
    0.35,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CHEST_CHRISTMAS_HAT] = sprite[SPRITE.INV_CHRISTMAS_HAT];
  sprite[SPRITE.INV_ELF_HAT] = create_craft_button(
    1,
    [
      {
        f: create_elf_hat,
        x: 0,
        y: 5,
        a: 1,
        r: 0,
        c: [
          "#171a19",
          "#0f964c",
          "#106e3b",
          "#138344",
          "#fef4f4",
          "#e9dad9",
          "#C5232C",
          "#A92D2D",
        ],
      },
    ],
    0.35,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CHEST_ELF_HAT] = sprite[SPRITE.INV_ELF_HAT];
  sprite[SPRITE.INV_BANDAGE] = create_craft_button(
    1,
    [
      {
        f: create_bandage,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#ffffff", "#cec0c4"],
      },
    ],
    0.35,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.INV_BAG] = [];
  sprite[SPRITE.INV_BAG][0] = IMAGES.INV_BAG_OUT;
  sprite[SPRITE.INV_BAG][1] = IMAGES.INV_BAG_IN;
  sprite[SPRITE.INV_BAG][2] = IMAGES.INV_BAG_CLICK;
  sprite[SPRITE.CRAFT_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.INV_PITCHFORK] = [];
  sprite[SPRITE.INV_PITCHFORK][0] = IMAGES.INV_PITCHFORK_OUT;
  sprite[SPRITE.INV_PITCHFORK][1] = IMAGES.INV_PITCHFORK_IN;
  sprite[SPRITE.INV_PITCHFORK][2] = IMAGES.INV_PITCHFORK_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.CHEST_PITCHFORK] = sprite[SPRITE.INV_PITCHFORK];
  sprite[SPRITE.INV_PITCHFORK2] = [];
  sprite[SPRITE.INV_PITCHFORK2][0] = IMAGES.INV_PITCHFORK2_OUT;
  sprite[SPRITE.INV_PITCHFORK2][1] = IMAGES.INV_PITCHFORK2_IN;
  sprite[SPRITE.INV_PITCHFORK2][2] = IMAGES.INV_PITCHFORK2_CLICK;
  sprite[SPRITE.CRAFT_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.CHEST_PITCHFORK2] = sprite[SPRITE.INV_PITCHFORK2];
  sprite[SPRITE.INV_PITCHFORK_PART] = [];
  sprite[SPRITE.INV_PITCHFORK_PART][0] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][1] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.INV_PITCHFORK_PART][2] = IMAGES.INV_PITCHFORK_PART_CLICK;
  sprite[SPRITE.CHEST_PITCHFORK_PART] = sprite[SPRITE.INV_PITCHFORK_PART];
  sprite[SPRITE.INV_PILOT_HELMET] = [];
  sprite[SPRITE.INV_PILOT_HELMET][0] = IMAGES.INV_PILOT_HELMET_OUT;
  sprite[SPRITE.INV_PILOT_HELMET][1] = IMAGES.INV_PILOT_HELMET_IN;
  sprite[SPRITE.INV_PILOT_HELMET][2] = IMAGES.INV_PILOT_HELMET_CLICK;
  sprite[SPRITE.CRAFT_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.CHEST_PILOT_HELMET] = sprite[SPRITE.INV_PILOT_HELMET];
  sprite[SPRITE.INV_PILOT_GLASSES] = [];
  sprite[SPRITE.INV_PILOT_GLASSES][0] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][1] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.INV_PILOT_GLASSES][2] = IMAGES.INV_PILOT_GLASSES_CLICK;
  sprite[SPRITE.CHEST_PILOT_GLASSES] = sprite[SPRITE.INV_PILOT_GLASSES];
  sprite[SPRITE.INV_WOOD_TOWER] = [];
  sprite[SPRITE.INV_WOOD_TOWER][0] = IMAGES.INV_WOOD_TOWER_OUT;
  sprite[SPRITE.INV_WOOD_TOWER][1] = IMAGES.INV_WOOD_TOWER_IN;
  sprite[SPRITE.INV_WOOD_TOWER][2] = IMAGES.INV_WOOD_TOWER_CLICK;
  sprite[SPRITE.CRAFT_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.CHEST_WOOD_TOWER] = sprite[SPRITE.INV_WOOD_TOWER];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][0] = IMAGES.INV_WOOD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][1] = IMAGES.INV_WOOD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_WOOD_DOOR_SPIKE][2] = IMAGES.INV_WOOD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE] = sprite[SPRITE.INV_WOOD_DOOR_SPIKE];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][0] = IMAGES.INV_STONE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][1] = IMAGES.INV_STONE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_STONE_DOOR_SPIKE][2] = IMAGES.INV_STONE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_STONE_DOOR_SPIKE] = sprite[SPRITE.INV_STONE_DOOR_SPIKE];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][0] = IMAGES.INV_GOLD_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][1] = IMAGES.INV_GOLD_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_GOLD_DOOR_SPIKE][2] = IMAGES.INV_GOLD_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE] = sprite[SPRITE.INV_GOLD_DOOR_SPIKE];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][0] = IMAGES.INV_DIAMOND_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][1] = IMAGES.INV_DIAMOND_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE][2] =
    IMAGES.INV_DIAMOND_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE] =
    sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE] =
    sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][0] =
    IMAGES.INV_AMETHYST_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][1] = IMAGES.INV_AMETHYST_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE][2] =
    IMAGES.INV_AMETHYST_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE] =
    sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE] =
    sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][0] = IMAGES.INV_REIDITE_DOOR_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][1] = IMAGES.INV_REIDITE_DOOR_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_DOOR_SPIKE][2] =
    IMAGES.INV_REIDITE_DOOR_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE] =
    sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE] =
    sprite[SPRITE.INV_REIDITE_DOOR_SPIKE];
  sprite[SPRITE.INV_REIDITE_DOOR] = [];
  sprite[SPRITE.INV_REIDITE_DOOR][0] = IMAGES.INV_REIDITE_DOOR_OUT;
  sprite[SPRITE.INV_REIDITE_DOOR][1] = IMAGES.INV_REIDITE_DOOR_IN;
  sprite[SPRITE.INV_REIDITE_DOOR][2] = IMAGES.INV_REIDITE_DOOR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.CHEST_REIDITE_DOOR] = sprite[SPRITE.INV_REIDITE_DOOR];
  sprite[SPRITE.INV_REIDITE_SPIKE] = [];
  sprite[SPRITE.INV_REIDITE_SPIKE][0] = IMAGES.INV_REIDITE_SPIKE_OUT;
  sprite[SPRITE.INV_REIDITE_SPIKE][1] = IMAGES.INV_REIDITE_SPIKE_IN;
  sprite[SPRITE.INV_REIDITE_SPIKE][2] = IMAGES.INV_REIDITE_SPIKE_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.CHEST_REIDITE_SPIKE] = sprite[SPRITE.INV_REIDITE_SPIKE];
  sprite[SPRITE.INV_REIDITE_WALL] = [];
  sprite[SPRITE.INV_REIDITE_WALL][0] = IMAGES.INV_REIDITE_WALL_OUT;
  sprite[SPRITE.INV_REIDITE_WALL][1] = IMAGES.INV_REIDITE_WALL_IN;
  sprite[SPRITE.INV_REIDITE_WALL][2] = IMAGES.INV_REIDITE_WALL_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.CHEST_REIDITE_WALL] = sprite[SPRITE.INV_REIDITE_WALL];
  sprite[SPRITE.INV_PENGUIN_FEATHER] = [];
  sprite[SPRITE.INV_PENGUIN_FEATHER][0] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][1] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.INV_PENGUIN_FEATHER][2] = IMAGES.INV_PENGUIN_FEATHER;
  sprite[SPRITE.CRAFT_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.CHEST_PENGUIN_FEATHER] = sprite[SPRITE.INV_PENGUIN_FEATHER];
  sprite[SPRITE.INV_HAWK_FEATHER] = [];
  sprite[SPRITE.INV_HAWK_FEATHER][0] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][1] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.INV_HAWK_FEATHER][2] = IMAGES.INV_HAWK_FEATHER;
  sprite[SPRITE.CRAFT_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.CHEST_HAWK_FEATHER] = sprite[SPRITE.INV_HAWK_FEATHER];
  sprite[SPRITE.INV_VULTURE_FEATHER] = [];
  sprite[SPRITE.INV_VULTURE_FEATHER][0] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][1] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.INV_VULTURE_FEATHER][2] = IMAGES.INV_VULTURE_FEATHER;
  sprite[SPRITE.CRAFT_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.CHEST_VULTURE_FEATHER] = sprite[SPRITE.INV_VULTURE_FEATHER];
  sprite[SPRITE.INV_EMERALD] = [];
  sprite[SPRITE.INV_EMERALD][0] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][1] = IMAGES.INV_EMERALD;
  sprite[SPRITE.INV_EMERALD][2] = IMAGES.INV_EMERALD;
  sprite[SPRITE.CHEST_EMERALD] = sprite[SPRITE.INV_EMERALD];
  sprite[SPRITE.INV_SADDLE] = [];
  sprite[SPRITE.INV_SADDLE][0] = IMAGES.INV_SADDLE_OUT;
  sprite[SPRITE.INV_SADDLE][1] = IMAGES.INV_SADDLE_IN;
  sprite[SPRITE.INV_SADDLE][2] = IMAGES.INV_SADDLE_CLICK;
  sprite[SPRITE.CRAFT_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.CHEST_SADDLE] = sprite[SPRITE.INV_SADDLE];
  sprite[SPRITE.INV_WAND1] = [];
  sprite[SPRITE.INV_WAND1][0] = IMAGES.INV_WAND1_OUT;
  sprite[SPRITE.INV_WAND1][1] = IMAGES.INV_WAND1_IN;
  sprite[SPRITE.INV_WAND1][2] = IMAGES.INV_WAND1_CLICK;
  sprite[SPRITE.CRAFT_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.CHEST_WAND1] = sprite[SPRITE.INV_WAND1];
  sprite[SPRITE.INV_WAND2] = [];
  sprite[SPRITE.INV_WAND2][0] = IMAGES.INV_WAND2_OUT;
  sprite[SPRITE.INV_WAND2][1] = IMAGES.INV_WAND2_IN;
  sprite[SPRITE.INV_WAND2][2] = IMAGES.INV_WAND2_CLICK;
  sprite[SPRITE.CRAFT_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.CHEST_WAND2] = sprite[SPRITE.INV_WAND2];
  sprite[SPRITE.INV_MOUNT_BOAR] = [];
  sprite[SPRITE.INV_MOUNT_BOAR][0] = IMAGES.INV_MOUNT_BOAR_OUT;
  sprite[SPRITE.INV_MOUNT_BOAR][1] = IMAGES.INV_MOUNT_BOAR_IN;
  sprite[SPRITE.INV_MOUNT_BOAR][2] = IMAGES.INV_MOUNT_BOAR_CLICK;
  sprite[SPRITE.CRAFT_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.CHEST_MOUNT_BOAR] = sprite[SPRITE.INV_MOUNT_BOAR];
  sprite[SPRITE.INV_CRAB_BOSS] = [];
  sprite[SPRITE.INV_CRAB_BOSS][0] = IMAGES.INV_CRAB_BOSS_OUT;
  sprite[SPRITE.INV_CRAB_BOSS][1] = IMAGES.INV_CRAB_BOSS_IN;
  sprite[SPRITE.INV_CRAB_BOSS][2] = IMAGES.INV_CRAB_BOSS_CLICK;
  sprite[SPRITE.CRAFT_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.CHEST_CRAB_BOSS] = sprite[SPRITE.INV_CRAB_BOSS];
  sprite[SPRITE.INV_HAWK] = [];
  sprite[SPRITE.INV_HAWK][0] = IMAGES.INV_HAWK_OUT;
  sprite[SPRITE.INV_HAWK][1] = IMAGES.INV_HAWK_IN;
  sprite[SPRITE.INV_HAWK][2] = IMAGES.INV_HAWK_CLICK;
  sprite[SPRITE.CRAFT_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.CHEST_HAWK] = sprite[SPRITE.INV_HAWK];
  sprite[SPRITE.INV_VULTURE] = [];
  sprite[SPRITE.INV_VULTURE][0] = IMAGES.INV_VULTURE_OUT;
  sprite[SPRITE.INV_VULTURE][1] = IMAGES.INV_VULTURE_IN;
  sprite[SPRITE.INV_VULTURE][2] = IMAGES.INV_VULTURE_CLICK;
  sprite[SPRITE.CRAFT_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.CHEST_VULTURE] = sprite[SPRITE.INV_VULTURE];
  sprite[SPRITE.INV_TURBAN1] = [];
  sprite[SPRITE.INV_TURBAN1][0] = IMAGES.INV_TURBAN1_OUT;
  sprite[SPRITE.INV_TURBAN1][1] = IMAGES.INV_TURBAN1_IN;
  sprite[SPRITE.INV_TURBAN1][2] = IMAGES.INV_TURBAN1_CLICK;
  sprite[SPRITE.CRAFT_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.CHEST_TURBAN1] = sprite[SPRITE.INV_TURBAN1];
  sprite[SPRITE.INV_TURBAN2] = [];
  sprite[SPRITE.INV_TURBAN2][0] = IMAGES.INV_TURBAN2_OUT;
  sprite[SPRITE.INV_TURBAN2][1] = IMAGES.INV_TURBAN2_IN;
  sprite[SPRITE.INV_TURBAN2][2] = IMAGES.INV_TURBAN2_CLICK;
  sprite[SPRITE.CRAFT_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.CHEST_TURBAN2] = sprite[SPRITE.INV_TURBAN2];
  sprite[SPRITE.INV_PLANE] = [];
  sprite[SPRITE.INV_PLANE][0] = IMAGES.INV_PLANE_OUT;
  sprite[SPRITE.INV_PLANE][1] = IMAGES.INV_PLANE_IN;
  sprite[SPRITE.INV_PLANE][2] = IMAGES.INV_PLANE_CLICK;
  sprite[SPRITE.CRAFT_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.CHEST_PLANE] = sprite[SPRITE.INV_PLANE];
  sprite[SPRITE.INV_BABY_DRAGON] = [];
  sprite[SPRITE.INV_BABY_DRAGON][0] = IMAGES.INV_BABY_DRAGON_OUT;
  sprite[SPRITE.INV_BABY_DRAGON][1] = IMAGES.INV_BABY_DRAGON_IN;
  sprite[SPRITE.INV_BABY_DRAGON][2] = IMAGES.INV_BABY_DRAGON_CLICK;
  sprite[SPRITE.CRAFT_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.CHEST_BABY_DRAGON] = sprite[SPRITE.INV_BABY_DRAGON];
  sprite[SPRITE.INV_BABY_MAMMOTH] = [];
  sprite[SPRITE.INV_BABY_MAMMOTH][0] = IMAGES.INV_BABY_MAMMOTH_OUT;
  sprite[SPRITE.INV_BABY_MAMMOTH][1] = IMAGES.INV_BABY_MAMMOTH_IN;
  sprite[SPRITE.INV_BABY_MAMMOTH][2] = IMAGES.INV_BABY_MAMMOTH_CLICK;
  sprite[SPRITE.CRAFT_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.CHEST_BABY_MAMMOTH] = sprite[SPRITE.INV_BABY_MAMMOTH];
  sprite[SPRITE.INV_BABY_LAVA] = [];
  sprite[SPRITE.INV_BABY_LAVA][0] = IMAGES.INV_BABY_LAVA_OUT;
  sprite[SPRITE.INV_BABY_LAVA][1] = IMAGES.INV_BABY_LAVA_IN;
  sprite[SPRITE.INV_BABY_LAVA][2] = IMAGES.INV_BABY_LAVA_CLICK;
  sprite[SPRITE.CRAFT_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.CHEST_BABY_LAVA] = sprite[SPRITE.INV_BABY_LAVA];
  sprite[SPRITE.INV_BREAD_OVEN] = create_craft_button(
    1,
    [
      {
        f: create_bread_oven,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#515C57",
          "#3A4942",
          "#68736F",
          "#C1C0C0",
          "#be8d50",
          "#7d5234",
          "#222825",
          "#4D5752",
          "#e48727",
          "#d4a872",
          "#232a27",
        ],
      },
      {
        f: create_bread_light_up,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e4c027"],
      },
    ],
    0.14,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.INV_FURNACE] = create_craft_button(
    1,
    [
      {
        f: create_furnace_on,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#939393",
          "#5f6061",
          "#c0c0c0",
          "#ffad22",
          "#fffdd5",
          "#fee764",
        ],
      },
    ],
    0.18,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.INV_BED] = create_craft_button(
    1,
    [
      {
        f: create_bed,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#554139",
          "#3f332a",
          "#261912",
          "#eee6c5",
          "#d1c599",
          "#554139",
          "#3f332a",
          "#86509b",
          "#703a99",
          "#ded4b4",
          "#d6ceab",
          "#c796c2",
          "#bc83b7",
          "#ffffff",
          "#87519c",
          "#703e94",
          "#3eb67f",
          "#218f65",
          "#efe7c5",
          "#d093c4",
        ],
      },
    ],
    0.32,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.CHEST_BED] = sprite[SPRITE.INV_BED];
  sprite[SPRITE.INV_CRAB_LOOT] = create_craft_button(
    1,
    [
      {
        f: create_crab_loot,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#c04933", "#a33e2b", "#ee593d", "#c04933"],
      },
    ],
    0.17,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_CRAB_LOOT] = sprite[SPRITE.INV_CRAB_LOOT];
  sprite[SPRITE.INV_CRAB_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_crab_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#58452b",
          "#47341d",
          "#ee593d",
          "#c04933",
          "#c04933",
          "#a33e2b",
          "#c3be9a",
          "#7f6d52",
        ],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.CHEST_CRAB_SPEAR] = sprite[SPRITE.INV_CRAB_SPEAR];
  sprite[SPRITE.INV_WOOD_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_wood_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#58452b", "#47341d", "#765d42", "#c3be9a", "#7f6d52"],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.INV_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_stonespear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#4d2d14",
          "#432516",
          "#c3be9a",
          "#7f6d52",
          "#7a7575",
          "#454749",
          "#8c8787",
          "#939393",
          "#5f6061",
          "#aaa6a6",
        ],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.INV_GOLD_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_goldspear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#493e26",
          "#382e19",
          "#a69e39",
          "#9c8828",
          "#bab143",
          "#c4bc51",
          "#b29c32",
          "#d2ca59",
        ],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.INV_DIAMOND_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_diamondspear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#262114",
          "#211108",
          "#4ba8b4",
          "#198a82",
          "#6ccad7",
          "#63c9d6",
          "#29aaa1",
          "#7bd9e6",
        ],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.INV_AMETHYST_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_amespear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#262114",
          "#211108",
          "#9443b1",
          "#6f1988",
          "#a752c6",
          "#9e35be",
          "#8c29aa",
          "#b864d6",
        ],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.INV_DRAGON_SPEAR] = create_craft_button(
    1,
    [
      {
        f: create_dragon_spear,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#1e2b34",
          "#151c24",
          "#99d7dd",
          "#7dcbd1",
          "#c6e8eb",
          "#aadee8",
          "#b7e2e5",
        ],
      },
    ],
    0.38,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.INV_HAMMER] = create_craft_button(
    1,
    [
      {
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#4d2d14", "#432516", "#939393", "#5f6061"],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.INV_SPANNER] = create_craft_button(
    1,
    [
      {
        f: create_spanner,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#939393", "#5f6061"],
      },
    ],
    0.3,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.INV_SUPER_HAMMER] = create_craft_button(
    1,
    [
      {
        f: create_superhammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#0d1b1c",
          "#9b5927",
          "#7a3610",
          "#1e0302",
          "#0d825b",
          "#6bd16e",
          "#17915d",
          "#89e5aa",
          "#16935d",
          "#a0efc4",
          "#28b26d",
          "#cdf4cb",
          "#42cc90",
        ],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.INV_HAMMER_GOLD] = create_craft_button(
    1,
    [
      {
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32"],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.INV_HAMMER_DIAMOND] = create_craft_button(
    1,
    [
      {
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1"],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.INV_HAMMER_AMETHYST] = create_craft_button(
    1,
    [
      {
        f: create_hammer,
        x: 2,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa"],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.INV_HAMMER_REIDITE] = [];
  sprite[SPRITE.INV_HAMMER_REIDITE][0] = IMAGES.INV_HAMMER_REIDITE_OUT;
  sprite[SPRITE.INV_HAMMER_REIDITE][1] = IMAGES.INV_HAMMER_REIDITE_IN;
  sprite[SPRITE.INV_HAMMER_REIDITE][2] = IMAGES.INV_HAMMER_REIDITE_CLICK;
  sprite[SPRITE.CHEST_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.CRAFT_HAMMER_REIDITE] = sprite[SPRITE.INV_HAMMER_REIDITE];
  sprite[SPRITE.INV_EMERALD_MACHINE] = [];
  sprite[SPRITE.INV_EMERALD_MACHINE][0] = IMAGES.INV_EMERALD_MACHINE_OUT;
  sprite[SPRITE.INV_EMERALD_MACHINE][1] = IMAGES.INV_EMERALD_MACHINE_IN;
  sprite[SPRITE.INV_EMERALD_MACHINE][2] = IMAGES.INV_EMERALD_MACHINE_CLICK;
  sprite[SPRITE.CHEST_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.CRAFT_EMERALD_MACHINE] = sprite[SPRITE.INV_EMERALD_MACHINE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][0] =
    IMAGES.INV_EXTRACTOR_MACHINE_STONE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][1] =
    IMAGES.INV_EXTRACTOR_MACHINE_STONE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE][2] =
    IMAGES.INV_EXTRACTOR_MACHINE_STONE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][0] =
    IMAGES.INV_EXTRACTOR_MACHINE_GOLD_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][1] =
    IMAGES.INV_EXTRACTOR_MACHINE_GOLD_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD][2] =
    IMAGES.INV_EXTRACTOR_MACHINE_GOLD_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][0] =
    IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][1] =
    IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND][2] =
    IMAGES.INV_EXTRACTOR_MACHINE_DIAMOND_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][0] =
    IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][1] =
    IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST][2] =
    IMAGES.INV_EXTRACTOR_MACHINE_AMETHYST_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE] = [];
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][0] =
    IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_OUT;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][1] =
    IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_IN;
  sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE][2] =
    IMAGES.INV_EXTRACTOR_MACHINE_REIDITE_CLICK;
  sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE] =
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE];
  sprite[SPRITE.INV_LOCK] = create_craft_button(
    1,
    [
      {
        f: create_lock,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#816511", "#c4a23a", "#3a3a3a"],
      },
    ],
    0.8,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.INV_LOCKPICK] = create_craft_button(
    1,
    [
      {
        f: create_lockpick,
        x: -2,
        y: -2,
        a: 1,
        r: -Math.PI / 5,
        c: ["#141414", "#c4a23a", "#816511"],
      },
    ],
    0.08,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.INV_DRAGON_HEART] = create_craft_button(
    1,
    [
      {
        f: create_dragon_heart,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#141414", "#178a99", "#0a6372", "#03282e"],
      },
    ],
    0.3,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.7
  );
  sprite[SPRITE.INV_LAVA_HEART] = create_craft_button(
    1,
    [
      {
        f: create_dragon_heart,
        x: -2,
        y: -2,
        a: 1,
        r: 0,
        c: ["#120202", "#991616", "#750a0a", "#120202"],
      },
    ],
    0.3,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.7
  );
  sprite[SPRITE.INV_RESURRECTION] = create_craft_button(
    1,
    [
      {
        f: create_resurrection_ground,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#347f93", "#54a4ba"],
      },
      {
        f: create_resurrection,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#347f93",
          "#54a4ba",
          "#1c2528",
          "#a9e4ed",
          "#86d4e0",
          "#959da0",
          "#697072",
          "#929da0",
          "#afb9bc",
          "#418ba5",
          "#59b8ce",
        ],
      },
      {
        f: create_resurrection_rotate,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0"],
      },
      {
        f: create_resurrection_hole,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#a9e4ed", "#86d4e0", "#418ba5", "#59b8ce"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.INV_TOTEM] = create_craft_button(
    1,
    [
      {
        f: create_headtotem,
        x: 45,
        y: 70,
        a: 1,
        r: 0,
        c: ["#0d1b1c", "#4c3a15", "#634828", "#564021"],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.INV_AMETHYST_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_amethyst_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#8c55b7",
          "#652d8e",
          "#79359e",
          "#5eccd1",
          "#4badad",
          "#9e6ac6",
        ],
      },
    ],
    0.52,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.INV_WINTER_HOOD] = create_craft_button(
    1,
    [
      {
        f: create_winter_hood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041", "#1b1a25"],
      },
    ],
    0.12,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.INV_HOOD] = create_craft_button(
    1,
    [
      {
        f: create_hood,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#2a2938", "#242330", "#313041"],
      },
    ],
    0.25,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.INV_WINTER_PEASANT] = create_craft_button(
    1,
    [
      {
        f: create_peasant,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#e2e1e1", "#d2cbcb", "#cfcbc8", "#beb5b5", "#ada0a0"],
      },
    ],
    0.39,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.INV_PEASANT] = create_craft_button(
    1,
    [
      {
        f: create_peasant,
        x: 0,
        y: 3,
        a: 1,
        r: 0,
        c: ["#1d1d22", "#8c7654", "#785f4c", "#a88e6c", "#785f4c", "#705845"],
      },
    ],
    0.39,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.INV_CROWN_GREEN] = create_craft_button(
    1,
    [
      {
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#A5A244",
          "#D8DC74",
          "#C0BF55",
          "#49B669",
          "#19994C",
          "#71C187",
        ],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.INV_CROWN_ORANGE] = create_craft_button(
    1,
    [
      {
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#A5A244",
          "#D8DC74",
          "#C0BF55",
          "#C45727",
          "#994617",
          "#DB9358",
        ],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.INV_CROWN_BLUE] = create_craft_button(
    1,
    [
      {
        f: create_crown_life,
        x: 0,
        y: 10,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#A5A244",
          "#D8DC74",
          "#C0BF55",
          "#2792C1",
          "#196599",
          "#59C0D8",
        ],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.INV_CROWN_CRAB] = create_craft_button(
    1,
    [
      {
        f: create_crab_crown,
        x: -1,
        y: 0,
        a: 1,
        r: 0,
        c: ["#000000", "#b03431", "#94312d", "#bd3c33", "#de5445"],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.CHEST_CROWN_CRAB] = sprite[SPRITE.INV_CROWN_CRAB];
  sprite[SPRITE.INV_DRAGON_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_dragon_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#0d1b1c",
          "#cae9eb",
          "#75bcae",
          "#ffffff",
          "#51736d",
          "#2b4d48",
          "#1b3a3a",
          "#80ccca",
          "#59ada7",
        ],
      },
    ],
    0.2,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.INV_DRAGON_SWORD] = create_craft_button(
    1,
    [
      {
        f: create_dragon_sword,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#284c4a", "#193533", "#c7efef", "#7fccca"],
      },
    ],
    0.75,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.INV_DRAGON_CUBE] = create_craft_button(
    1,
    [
      {
        f: create_dragon_cube,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"],
      },
    ],
    0.55,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_DRAGON_ORB] = create_craft_button(
    1,
    [
      {
        f: create_blue_orb,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#44bae0", "#9fdae9", "#7dd1ea", "#c6e8ef"],
      },
    ],
    0.55,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_LAVA_CUBE] = create_craft_button(
    1,
    [
      {
        f: create_dragon_cube,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"],
      },
    ],
    0.55,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_LAVA_ORB] = create_craft_button(
    1,
    [
      {
        f: create_blue_orb,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#e04444", "#e99f9f", "#eb7e7e", "#eec6c6"],
      },
    ],
    0.55,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_GEMME_GREEN] = create_craft_button(
    1,
    [
      {
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#59ba72", "#94d966", "#5aa628", "#0d1b1c", "#38874d"],
      },
    ],
    0.35,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_GEMME_ORANGE] = create_craft_button(
    1,
    [
      {
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#C45727", "#de7d46", "#DB9358", "#0d1b1c", "#994617"],
      },
    ],
    0.35,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_GEMME_BLUE] = create_craft_button(
    1,
    [
      {
        f: create_gemme_green,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#3a9dbd", "#59C0D8", "#48abcb", "#0d1b1c", "#196599"],
      },
    ],
    0.35,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_SHOVEL] = create_craft_button(
    1,
    [
      {
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#6d5041", "#4f3d35", "#939393", "#5f6061", "#757575"],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.INV_SHOVEL_GOLD] = create_craft_button(
    1,
    [
      {
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#493e26", "#382e19", "#c4bc51", "#b29c32", "#b4ac45"],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.INV_SHOVEL_DIAMOND] = create_craft_button(
    1,
    [
      {
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#63c9d6", "#29aaa1", "#42aab8"],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.INV_SHOVEL_AMETHYST] = create_craft_button(
    1,
    [
      {
        f: create_shovel,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: ["#0d1b1c", "#262114", "#211108", "#b864d6", "#8c29aa", "#a853c7"],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.INV_EXPLORER_HAT] = create_craft_button(
    1,
    [
      {
        f: create_explorer_hat,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#c9a65f", "#ae863f", "#655530", "#4a391c", "#ebdd79", "#4a421c"],
      },
    ],
    0.35,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.INV_WOOD_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_wooden_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#252525", "#73583e", "#493425", "#7d6144"],
      },
    ],
    0.35,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
  sprite[SPRITE.INV_STONE_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_viking_hat,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: [
          "#252525",
          "#808080",
          "#4a4a4a",
          "#9e9c8b",
          "#615c53",
          "#686969",
          "#8a8776",
          "#555555",
          "#747474",
          "#969696",
          "#454545",
        ],
      },
    ],
    0.4,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.INV_GOLD_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_gold_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#dbce71", "#b29c32", "#c4bc51"],
      },
    ],
    0.35,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.INV_DIAMOND_HELMET] = create_craft_button(
    1,
    [
      {
        f: create_diamond_helmet,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#717171",
          "#485252",
          "#555555",
          "#65c7cd",
          "#4aadad",
          "#358d8b",
          "#c1e6ea",
          "#a6dce4",
        ],
      },
    ],
    0.45,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.INV_BOOK] = create_craft_button(
    1,
    [
      {
        f: create_book,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#511f00", "#2f1300", "#ffffff", "#d4d4d4", "#5b2400", "#984e21"],
      },
    ],
    0.15,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.INV_PAPER] = create_craft_button(
    1,
    [
      {
        f: create_paper,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#221e1b", "#ffffff", "#f6f0e7"],
      },
    ],
    0.3,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.INV_AMETHYST] = create_craft_button(
    1,
    [
      {
        f: create_amethyst,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#1d051e", "#c27add", "#cd98e5"],
      },
    ],
    0.31,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_SAND] = create_craft_button(
    1,
    [
      {
        f: create_sand,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#D7C393", "#a48c6c"],
      },
    ],
    0.22,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_ICE] = create_craft_button(
    1,
    [
      {
        f: create_ice,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#93CBCE", "#E9F6F6"],
      },
    ],
    0.3,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.INV_GROUND] = create_craft_button(
    1,
    [
      {
        f: create_sand,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#866432", "#6b4f25"],
      },
    ],
    0.22,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_BUCKET_FULL] = create_craft_button(
    1,
    [
      {
        f: create_bucket_full,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"],
      },
    ],
    0.22,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_BUCKET_EMPTY] = create_craft_button(
    1,
    [
      {
        f: create_bucket_empty,
        x: 3,
        y: 2,
        a: 1,
        r: 0,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#2f2211", "#785931", "#1678a2"],
      },
    ],
    0.22,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CRAFT_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.INV_WELL] = create_craft_button(
    1,
    [
      {
        f: create_well,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#717273", "#606162", "#a09f9f", "#878787", "#454545"],
      },
    ],
    0.1,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.INV_BOTTLE_FULL] = create_craft_button(
    1,
    [
      {
        f: create_bottle,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#C6AF81",
          "#C98435",
          "#B26F31",
          "#53A4D5",
          "#388AC7",
          "#C1C0C0",
          "#EAEAEA",
        ],
      },
    ],
    0.18,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_BOTTLE_EMPTY] = create_craft_button(
    1,
    [
      {
        f: create_bottle_full,
        x: 0,
        y: 0,
        a: 1,
        r: Math.PI / 5,
        c: [
          "#C6AF81",
          "#C98435",
          "#B26F31",
          "#53A4D5",
          "#388AC7",
          "#C1C0C0",
          "#EAEAEA",
        ],
      },
    ],
    0.18,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CRAFT_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.INV_COOKIE] = create_craft_button(
    1,
    [
      {
        f: create_cookie,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#eedacc", "#dfbda7", "#dab094", "#63391a", "#523124"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.INV_CANDY] = create_craft_button(
    1,
    [
      {
        f: create_candy,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#1a1011",
          "#e29c2b",
          "#b76413",
          "#d6c418",
          "#e0bf32",
          "#b78a1a",
          "#aa1a17",
          "#cc9f2f",
          "#cc741d",
          "#b51524",
          "#bc1522",
          "#991922",
          "#a01ed5",
          "#d51e81",
        ],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_FERRERO] = create_craft_button(
    1,
    [
      {
        f: create_ferrero_rocher,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#1a1011",
          "#693c2a",
          "#54311f",
          "#9f7a3d",
          "#492d1d",
          "#dbb175",
          "#54311f",
          "#9f7a3d",
          "#604720",
        ],
      },
    ],
    0.6,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_BREAD] = create_craft_button(
    1,
    [
      {
        f: create_bread,
        x: 0,
        y: -2,
        a: 1,
        r: 0,
        c: ["#1d051e", "#bf8d51", "#7d5133", "#e8d6bf", "#e0c8a9", "#ab7a3f"],
      },
    ],
    0.17,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.INV_FOODFISH] = create_craft_button(
    1,
    [
      {
        f: create_fishfood,
        x: -3,
        y: -5,
        a: 1,
        r: 0,
        c: [
          "#1d051e",
          "#63767c",
          "#424f51",
          "#6c8288",
          "#536468",
          "#202020",
          "#ffffff",
          "#806f60",
          "#514942",
          "#756557",
        ],
      },
    ],
    0.23,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.INV_FOODFISH_COOKED] = create_craft_button(
    1,
    [
      {
        f: create_fishfood_cooked,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1d051e", "#42261A", "#281818"],
      },
    ],
    0.23,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.INV_DIVING_MASK] = create_craft_button(
    1,
    [
      {
        f: create_divingmask,
        x: -3,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#1e2021",
          "#65A8B7",
          "#2E85A0",
          "#14275B",
          "#081826",
          "#1A3163",
          "#0C1944",
          "#89C4CE",
          "#2E85A0",
        ],
      },
    ],
    0.2,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.INV_SCALES] = create_craft_button(
    1,
    [
      {
        f: create_scales,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#961B1B", "#702727", "#C43B3B"],
      },
    ],
    0.15,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_SUPER_DIVING_SUIT] = create_craft_button(
    1,
    [
      {
        f: create_superdivingsuit,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#F0D200", "#B09A00", "#79359E", "#652D8E", "#1e2021"],
      },
    ],
    0.3,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.5
  );
  sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.INV_PLOT] = create_craft_button(
    1,
    [
      {
        f: create_plot,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352E1E", "#4C3B19", "#574122"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.INV_GARLAND] = create_craft_button(
    1,
    [
      {
        f: create_garland_inv,
        x: -5,
        y: -5,
        a: 1,
        r: 0,
        c: ["#e2d63b", "#ee71a9", "#42b672"],
      },
    ],
    1,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_GARLAND] = sprite[SPRITE.INV_GARLAND];
  sprite[SPRITE.INV_BRIDGE] = create_craft_button(
    1,
    [
      {
        f: create_bridge,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#332715", "#4C3B19", "#574122"],
      },
    ],
    0.5,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.INV_ROOF] = create_craft_button(
    1,
    [
      {
        f: create_roof,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#352618", "#402b18", "#4c3b19", "#574122", "#52391e"],
      },
    ],
    0.3,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.INV_WATERING_CAN_FULL] = create_craft_button(
    1,
    [
      {
        f: create_watering_can,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#1678a2"],
      },
    ],
    0.4,
    ["#35b1b5", "#46c2c9", "#33b4e4"],
    0.7
  );
  sprite[SPRITE.CRAFT_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.INV_WATERING_CAN] = create_craft_button(
    1,
    [
      {
        f: create_watering_can,
        x: -1,
        y: 0,
        a: 1,
        r: -Math.PI / 5,
        c: ["#1e2021", "#674C2A", "#4C3B19", "#594225", "#3F2D18", "#2D2112"],
      },
    ],
    0.4,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.CRAFT_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.INV_FLOUR] = create_craft_button(
    1,
    [
      {
        f: create_flour,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#B3AA8E", "#817961", "#EBEAE2", "#E0DFD8"],
      },
    ],
    0.25,
    ["#2b5c48", "#2b5c48", "#2b5c48"],
    0.5
  );
  sprite[SPRITE.INV_CRAB_STICK] = create_craft_button(
    1,
    [
      {
        f: create_crab_stick,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: ["#1e2021", "#ed5f4f", "#ce4545", "#ffffff", "#e2dad7"],
      },
    ],
    0.2,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.INV_CAKE] = create_craft_button(
    1,
    [
      {
        f: create_cake,
        x: 0,
        y: 0,
        a: 1,
        r: 0,
        c: [
          "#1e2021",
          "#63391a",
          "#523124",
          "#d2c4b9",
          "#c1aca2",
          "#d8cbc2",
          "#c8b5ac",
          "#ac222a",
          "#e6636a",
        ],
      },
    ],
    0.25,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.INV_SANDWICH] = create_craft_button(
    1,
    [
      {
        f: create_SANDWICH,
        x: -2,
        y: -8,
        a: 1,
        r: 0,
        c: ["#dfd6bc", "#7b5139", "#bf8d50", "#834e49", "#602820", "#d7ccaa"],
      },
    ],
    0.25,
    ["#3ba578", "#4eb687", "#3da34d"],
    0.5
  );
  sprite[SPRITE.CRAFT_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.INV_LAVA_SWORD] = [];
  sprite[SPRITE.INV_LAVA_SWORD][0] = IMAGES.INV_LAVA_SWORD_OUT;
  sprite[SPRITE.INV_LAVA_SWORD][1] = IMAGES.INV_LAVA_SWORD_IN;
  sprite[SPRITE.INV_LAVA_SWORD][2] = IMAGES.INV_LAVA_SWORD_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.CHEST_LAVA_SWORD] = sprite[SPRITE.INV_LAVA_SWORD];
  sprite[SPRITE.INV_LAVA_SPEAR] = [];
  sprite[SPRITE.INV_LAVA_SPEAR][0] = IMAGES.INV_LAVA_SPEAR_OUT;
  sprite[SPRITE.INV_LAVA_SPEAR][1] = IMAGES.INV_LAVA_SPEAR_IN;
  sprite[SPRITE.INV_LAVA_SPEAR][2] = IMAGES.INV_LAVA_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CHEST_LAVA_SPEAR] = sprite[SPRITE.INV_LAVA_SPEAR];
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SWORD] = [];
  sprite[SPRITE.INV_REIDITE_SWORD][0] = IMAGES.INV_REIDITE_SWORD_OUT;
  sprite[SPRITE.INV_REIDITE_SWORD][1] = IMAGES.INV_REIDITE_SWORD_IN;
  sprite[SPRITE.INV_REIDITE_SWORD][2] = IMAGES.INV_REIDITE_SWORD_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.CHEST_REIDITE_SWORD] = sprite[SPRITE.INV_REIDITE_SWORD];
  sprite[SPRITE.INV_REIDITE_SPEAR] = [];
  sprite[SPRITE.INV_REIDITE_SPEAR][0] = IMAGES.INV_REIDITE_SPEAR_OUT;
  sprite[SPRITE.INV_REIDITE_SPEAR][1] = IMAGES.INV_REIDITE_SPEAR_IN;
  sprite[SPRITE.INV_REIDITE_SPEAR][2] = IMAGES.INV_REIDITE_SPEAR_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.CHEST_REIDITE_SPEAR] = sprite[SPRITE.INV_REIDITE_SPEAR];
  sprite[SPRITE.INV_DIAMOND_PROTECTION] = [];
  sprite[SPRITE.INV_DIAMOND_PROTECTION][0] = IMAGES.INV_DIAMOND_PROTECTION_OUT;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][1] = IMAGES.INV_DIAMOND_PROTECTION_IN;
  sprite[SPRITE.INV_DIAMOND_PROTECTION][2] =
    IMAGES.INV_DIAMOND_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_DIAMOND_PROTECTION] =
    sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.CHEST_DIAMOND_PROTECTION] =
    sprite[SPRITE.INV_DIAMOND_PROTECTION];
  sprite[SPRITE.INV_AMETHYST_PROTECTION] = [];
  sprite[SPRITE.INV_AMETHYST_PROTECTION][0] =
    IMAGES.INV_AMETHYST_PROTECTION_OUT;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][1] = IMAGES.INV_AMETHYST_PROTECTION_IN;
  sprite[SPRITE.INV_AMETHYST_PROTECTION][2] =
    IMAGES.INV_AMETHYST_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_AMETHYST_PROTECTION] =
    sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.CHEST_AMETHYST_PROTECTION] =
    sprite[SPRITE.INV_AMETHYST_PROTECTION];
  sprite[SPRITE.INV_REIDITE_PROTECTION] = [];
  sprite[SPRITE.INV_REIDITE_PROTECTION][0] = IMAGES.INV_REIDITE_PROTECTION_OUT;
  sprite[SPRITE.INV_REIDITE_PROTECTION][1] = IMAGES.INV_REIDITE_PROTECTION_IN;
  sprite[SPRITE.INV_REIDITE_PROTECTION][2] =
    IMAGES.INV_REIDITE_PROTECTION_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_PROTECTION] =
    sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.CHEST_REIDITE_PROTECTION] =
    sprite[SPRITE.INV_REIDITE_PROTECTION];
  sprite[SPRITE.INV_REIDITE_HELMET] = [];
  sprite[SPRITE.INV_REIDITE_HELMET][0] = IMAGES.INV_REIDITE_HELMET_OUT;
  sprite[SPRITE.INV_REIDITE_HELMET][1] = IMAGES.INV_REIDITE_HELMET_IN;
  sprite[SPRITE.INV_REIDITE_HELMET][2] = IMAGES.INV_REIDITE_HELMET_CLICK;
  sprite[SPRITE.CRAFT_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.CHEST_REIDITE_HELMET] = sprite[SPRITE.INV_REIDITE_HELMET];
  sprite[SPRITE.INV_LAVA_HELMET] = [];
  sprite[SPRITE.INV_LAVA_HELMET][0] = IMAGES.INV_LAVA_HELMET_OUT;
  sprite[SPRITE.INV_LAVA_HELMET][1] = IMAGES.INV_LAVA_HELMET_IN;
  sprite[SPRITE.INV_LAVA_HELMET][2] = IMAGES.INV_LAVA_HELMET_CLICK;
  sprite[SPRITE.CRAFT_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.CHEST_LAVA_HELMET] = sprite[SPRITE.INV_LAVA_HELMET];
  sprite[SPRITE.INV_FIREFLY] = [];
  sprite[SPRITE.INV_FIREFLY][0] = IMAGES.INV_FIREFLY_OUT;
  sprite[SPRITE.INV_FIREFLY][1] = IMAGES.INV_FIREFLY_IN;
  sprite[SPRITE.INV_FIREFLY][2] = IMAGES.INV_FIREFLY_CLICK;
  sprite[SPRITE.CRAFT_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.CHEST_FIREFLY] = sprite[SPRITE.INV_FIREFLY];
  sprite[SPRITE.INV_WITCH] = [];
  sprite[SPRITE.INV_WITCH][0] = IMAGES.INV_WITCH_OUT;
  sprite[SPRITE.INV_WITCH][1] = IMAGES.INV_WITCH_IN;
  sprite[SPRITE.INV_WITCH][2] = IMAGES.INV_WITCH_CLICK;
  sprite[SPRITE.CRAFT_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.CHEST_WITCH] = sprite[SPRITE.INV_WITCH];
  sprite[SPRITE.INV_NIMBUS] = [];
  sprite[SPRITE.INV_NIMBUS][0] = IMAGES.INV_NIMBUS_OUT;
  sprite[SPRITE.INV_NIMBUS][1] = IMAGES.INV_NIMBUS_IN;
  sprite[SPRITE.INV_NIMBUS][2] = IMAGES.INV_NIMBUS_CLICK;
  sprite[SPRITE.CRAFT_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.CHEST_NIMBUS] = sprite[SPRITE.INV_NIMBUS];
  sprite[SPRITE.INV_REIDITE] = [];
  sprite[SPRITE.INV_REIDITE][0] = IMAGES.INV_REIDITE_OUT;
  sprite[SPRITE.INV_REIDITE][1] = IMAGES.INV_REIDITE_IN;
  sprite[SPRITE.INV_REIDITE][2] = IMAGES.INV_REIDITE_CLICK;
  sprite[SPRITE.CHEST_REIDITE] = sprite[SPRITE.INV_REIDITE];
  sprite[SPRITE.INV_FLAME] = [];
  sprite[SPRITE.INV_FLAME][0] = IMAGES.INV_FLAME_OUT;
  sprite[SPRITE.INV_FLAME][1] = IMAGES.INV_FLAME_IN;
  sprite[SPRITE.INV_FLAME][2] = IMAGES.INV_FLAME_CLICK;
  sprite[SPRITE.CHEST_FLAME] = sprite[SPRITE.INV_FLAME];
  sprite[SPRITE.CHEST_SHOVEL] = sprite[SPRITE.INV_SHOVEL];
  sprite[SPRITE.CHEST_SHOVEL_GOLD] = sprite[SPRITE.INV_SHOVEL_GOLD];
  sprite[SPRITE.CHEST_SHOVEL_DIAMOND] = sprite[SPRITE.INV_SHOVEL_DIAMOND];
  sprite[SPRITE.CHEST_SHOVEL_AMETHYST] = sprite[SPRITE.INV_SHOVEL_AMETHYST];
  sprite[SPRITE.CHEST_SEED] = sprite[SPRITE.INV_SEED];
  sprite[SPRITE.CHEST_WHEAT_SEED] = sprite[SPRITE.INV_WHEAT_SEED];
  sprite[SPRITE.CHEST_WINDMILL] = sprite[SPRITE.INV_WINDMILL];
  sprite[SPRITE.CHEST_WILD_WHEAT] = sprite[SPRITE.INV_WILD_WHEAT];
  sprite[SPRITE.CHEST_FIRE] = sprite[SPRITE.INV_FIRE];
  sprite[SPRITE.CHEST_DRAGON_ORB] = sprite[SPRITE.INV_DRAGON_ORB];
  sprite[SPRITE.CHEST_DRAGON_CUBE] = sprite[SPRITE.INV_DRAGON_CUBE];
  sprite[SPRITE.CHEST_LAVA_ORB] = sprite[SPRITE.INV_LAVA_ORB];
  sprite[SPRITE.CHEST_LAVA_CUBE] = sprite[SPRITE.INV_LAVA_CUBE];
  sprite[SPRITE.CHEST_BIG_FIRE] = sprite[SPRITE.INV_BIG_FIRE];
  sprite[SPRITE.CHEST_SUGAR_CAN] = sprite[SPRITE.INV_SUGAR_CAN];
  sprite[SPRITE.CHEST_PIRATE_SWORD] = sprite[SPRITE.INV_PIRATE_SWORD];
  sprite[SPRITE.CHEST_SWORD_WOOD] = sprite[SPRITE.INV_SWORD_WOOD];
  sprite[SPRITE.CHEST_SWORD] = sprite[SPRITE.INV_SWORD];
  sprite[SPRITE.CHEST_CURSED_SWORD] = sprite[SPRITE.INV_CURSED_SWORD];
  sprite[SPRITE.CHEST_SWORD_GOLD] = sprite[SPRITE.INV_SWORD_GOLD];
  sprite[SPRITE.CHEST_SWORD_DIAMOND] = sprite[SPRITE.INV_SWORD_DIAMOND];
  sprite[SPRITE.CHEST_SWORD_AMETHYST] = sprite[SPRITE.INV_SWORD_AMETHYST];
  sprite[SPRITE.CHEST_PICK_WOOD] = sprite[SPRITE.INV_PICK_WOOD];
  sprite[SPRITE.CHEST_PICK] = sprite[SPRITE.INV_PICK];
  sprite[SPRITE.CHEST_PICK_GOLD] = sprite[SPRITE.INV_PICK_GOLD];
  sprite[SPRITE.CHEST_PICK_DIAMOND] = sprite[SPRITE.INV_PICK_DIAMOND];
  sprite[SPRITE.CHEST_PICK_AMETHYST] = sprite[SPRITE.INV_PICK_AMETHYST];
  sprite[SPRITE.CHEST_STONE] = sprite[SPRITE.INV_STONE];
  sprite[SPRITE.CHEST_GOLD] = sprite[SPRITE.INV_GOLD];
  sprite[SPRITE.CHEST_DIAMOND] = sprite[SPRITE.INV_DIAMOND];
  sprite[SPRITE.CHEST_WOOD] = sprite[SPRITE.INV_WOOD];
  sprite[SPRITE.CHEST_PLANT] = sprite[SPRITE.INV_PLANT];
  sprite[SPRITE.CHEST_WORKBENCH] = sprite[SPRITE.INV_WORK];
  sprite[SPRITE.CHEST_STONE_WALL] = sprite[SPRITE.INV_STONE_WALL];
  sprite[SPRITE.CHEST_DIAMOND_WALL] = sprite[SPRITE.INV_DIAMOND_WALL];
  sprite[SPRITE.CHEST_GOLD_WALL] = sprite[SPRITE.INV_GOLD_WALL];
  sprite[SPRITE.CHEST_AMETHYST_WALL] = sprite[SPRITE.INV_AMETHYST_WALL];
  sprite[SPRITE.CHEST_WALL] = sprite[SPRITE.INV_WALL];
  sprite[SPRITE.CHEST_SPIKE] = sprite[SPRITE.INV_SPIKE];
  sprite[SPRITE.CHEST_MEAT] = sprite[SPRITE.INV_MEAT];
  sprite[SPRITE.CHEST_COOKED_MEAT] = sprite[SPRITE.INV_COOKED_MEAT];
  sprite[SPRITE.CHEST_CORD] = sprite[SPRITE.INV_CORD];
  sprite[SPRITE.CHEST_BLUE_CORD] = sprite[SPRITE.INV_BLUE_CORD];
  sprite[SPRITE.CHEST_BANDAGE] = sprite[SPRITE.INV_BANDAGE];
  sprite[SPRITE.CHEST_LOCK] = sprite[SPRITE.INV_LOCK];
  sprite[SPRITE.CHEST_LOCKPICK] = sprite[SPRITE.INV_LOCKPICK];
  sprite[SPRITE.CHEST_RESURRECTION] = sprite[SPRITE.INV_RESURRECTION];
  sprite[SPRITE.CHEST_DRAGON_HEART] = sprite[SPRITE.INV_DRAGON_HEART];
  sprite[SPRITE.CHEST_LAVA_HEART] = sprite[SPRITE.INV_LAVA_HEART];
  sprite[SPRITE.CHEST_DRAGON_SWORD] = sprite[SPRITE.INV_DRAGON_SWORD];
  sprite[SPRITE.CHEST_TOTEM] = sprite[SPRITE.INV_TOTEM];
  sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE] = sprite[SPRITE.INV_DOOR_WOOD_CLOSE];
  sprite[SPRITE.CHEST_CHEST] = sprite[SPRITE.INV_CHEST];
  sprite[SPRITE.CHEST_SLOT] = CTI(
    create_chest_slot(0.8, true, ["#4c3b19", "#c4a23a", "#c4a23a", "#c4a23a"])
  );
  sprite[SPRITE.CHEST_PLUS] = create_craft_button(
    0.5,
    [
      {
        f: create_plus_chest,
        x: 0,
        y: 2,
        a: 1,
        r: 0,
        c: ["#ffffff"],
      },
    ],
    0.16,
    ["#c4a23a", "#d0ad41", "#b89733"],
    0.9
  );
  sprite[SPRITE.CHEST_STONE_SPIKE] = sprite[SPRITE.INV_STONE_SPIKE];
  sprite[SPRITE.CHEST_GOLD_SPIKE] = sprite[SPRITE.INV_GOLD_SPIKE];
  sprite[SPRITE.CHEST_DIAMOND_SPIKE] = sprite[SPRITE.INV_DIAMOND_SPIKE];
  sprite[SPRITE.CHEST_AMETHYST_SPIKE] = sprite[SPRITE.INV_AMETHYST_SPIKE];
  sprite[SPRITE.CHEST_BAG] = sprite[SPRITE.INV_BAG];
  sprite[SPRITE.CHEST_SPECIAL_FUR] = sprite[SPRITE.INV_SPECIAL_FUR];
  sprite[SPRITE.CHEST_SPECIAL_FUR_2] = sprite[SPRITE.INV_SPECIAL_FUR_2];
  sprite[SPRITE.CHEST_FUR] = sprite[SPRITE.INV_FUR];
  sprite[SPRITE.CHEST_KRAKEN_SKIN] = sprite[SPRITE.INV_KRAKEN_SKIN];
  sprite[SPRITE.CHEST_FUR_WOLF] = sprite[SPRITE.INV_FUR_WOLF];
  sprite[SPRITE.CHEST_FUR_BOAR] = sprite[SPRITE.INV_FUR_BOAR];
  sprite[SPRITE.CHEST_FUR_WINTER] = sprite[SPRITE.INV_FUR_WINTER];
  sprite[SPRITE.CHEST_EARMUFFS] = sprite[SPRITE.INV_EARMUFFS];
  sprite[SPRITE.CHEST_CAP_SCARF] = sprite[SPRITE.INV_CAP_SCARF];
  sprite[SPRITE.CHEST_DOOR_STONE_CLOSE] = sprite[SPRITE.INV_DOOR_STONE_CLOSE];
  sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE] = sprite[SPRITE.INV_DOOR_GOLD_CLOSE];
  sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE] =
    sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE];
  sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE] =
    sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE];
  sprite[SPRITE.CHEST_COAT] = sprite[SPRITE.INV_COAT];
  sprite[SPRITE.CHEST_WOOD_SPEAR] = sprite[SPRITE.INV_WOOD_SPEAR];
  sprite[SPRITE.CHEST_SPEAR] = sprite[SPRITE.INV_SPEAR];
  sprite[SPRITE.CHEST_GOLD_SPEAR] = sprite[SPRITE.INV_GOLD_SPEAR];
  sprite[SPRITE.CHEST_DIAMOND_SPEAR] = sprite[SPRITE.INV_DIAMOND_SPEAR];
  sprite[SPRITE.CHEST_AMETHYST_SPEAR] = sprite[SPRITE.INV_AMETHYST_SPEAR];
  sprite[SPRITE.CHEST_DRAGON_SPEAR] = sprite[SPRITE.INV_DRAGON_SPEAR];
  sprite[SPRITE.CHEST_SUPER_HAMMER] = sprite[SPRITE.INV_SUPER_HAMMER];
  sprite[SPRITE.CHEST_SPANNER] = sprite[SPRITE.INV_SPANNER];
  sprite[SPRITE.CHEST_HAMMER] = sprite[SPRITE.INV_HAMMER];
  sprite[SPRITE.CHEST_HAMMER_GOLD] = sprite[SPRITE.INV_HAMMER_GOLD];
  sprite[SPRITE.CHEST_HAMMER_DIAMOND] = sprite[SPRITE.INV_HAMMER_DIAMOND];
  sprite[SPRITE.CHEST_HAMMER_AMETHYST] = sprite[SPRITE.INV_HAMMER_AMETHYST];
  sprite[SPRITE.CHEST_FURNACE] = sprite[SPRITE.INV_FURNACE];
  sprite[SPRITE.CHEST_BREAD_OVEN] = sprite[SPRITE.INV_BREAD_OVEN];
  sprite[SPRITE.CHEST_EXPLORER_HAT] = sprite[SPRITE.INV_EXPLORER_HAT];
  sprite[SPRITE.CHEST_STONE_HELMET] = sprite[SPRITE.INV_STONE_HELMET];
  sprite[SPRITE.CHEST_GOLD_HELMET] = sprite[SPRITE.INV_GOLD_HELMET];
  sprite[SPRITE.CHEST_DIAMOND_HELMET] = sprite[SPRITE.INV_DIAMOND_HELMET];
  sprite[SPRITE.CHEST_AMETHYST_HELMET] = sprite[SPRITE.INV_AMETHYST_HELMET];
  sprite[SPRITE.CHEST_DRAGON_HELMET] = sprite[SPRITE.INV_DRAGON_HELMET];
  sprite[SPRITE.CHEST_BOOK] = sprite[SPRITE.INV_BOOK];
  sprite[SPRITE.CHEST_PAPER] = sprite[SPRITE.INV_PAPER];
  sprite[SPRITE.CHEST_AMETHYST] = sprite[SPRITE.INV_AMETHYST];
  sprite[SPRITE.CHEST_BRIDGE] = sprite[SPRITE.INV_BRIDGE];
  sprite[SPRITE.CHEST_ROOF] = sprite[SPRITE.INV_ROOF];
  sprite[SPRITE.CHEST_PLOT] = sprite[SPRITE.INV_PLOT];
  sprite[SPRITE.CHEST_SAND] = sprite[SPRITE.INV_SAND];
  sprite[SPRITE.CHEST_BREAD] = sprite[SPRITE.INV_BREAD];
  sprite[SPRITE.CHEST_ICE] = sprite[SPRITE.INV_ICE];
  sprite[SPRITE.CHEST_GROUND] = sprite[SPRITE.INV_GROUND];
  sprite[SPRITE.CHEST_BOTTLE_FULL] = sprite[SPRITE.INV_BOTTLE_FULL];
  sprite[SPRITE.CHEST_BOTTLE_EMPTY] = sprite[SPRITE.INV_BOTTLE_EMPTY];
  sprite[SPRITE.CHEST_WATERING_CAN] = sprite[SPRITE.INV_WATERING_CAN];
  sprite[SPRITE.CHEST_FLOUR] = sprite[SPRITE.INV_FLOUR];
  sprite[SPRITE.CHEST_COOKIE] = sprite[SPRITE.INV_COOKIE];
  sprite[SPRITE.CHEST_CANDY] = sprite[SPRITE.INV_CANDY];
  sprite[SPRITE.CHEST_FERRERO] = sprite[SPRITE.INV_FERRERO];
  sprite[SPRITE.CHEST_SUPER_DIVING_SUIT] = sprite[SPRITE.INV_SUPER_DIVING_SUIT];
  sprite[SPRITE.CHEST_DIVING_MASK] = sprite[SPRITE.INV_DIVING_MASK];
  sprite[SPRITE.CHEST_WATERING_CAN_FULL] = sprite[SPRITE.INV_WATERING_CAN_FULL];
  sprite[SPRITE.CHEST_CAKE] = sprite[SPRITE.INV_CAKE];
  sprite[SPRITE.CHEST_CRAB_STICK] = sprite[SPRITE.INV_CRAB_STICK];
  sprite[SPRITE.CHEST_FOODFISH] = sprite[SPRITE.INV_FOODFISH];
  sprite[SPRITE.CHEST_FOODFISH_COOKED] = sprite[SPRITE.INV_FOODFISH_COOKED];
  sprite[SPRITE.CHEST_SCALES] = sprite[SPRITE.INV_SCALES];
  sprite[SPRITE.CHEST_SANDWICH] = sprite[SPRITE.INV_SANDWICH];
  sprite[SPRITE.CHEST_CROWN_GREEN] = sprite[SPRITE.INV_CROWN_GREEN];
  sprite[SPRITE.CHEST_GEMME_GREEN] = sprite[SPRITE.INV_GEMME_GREEN];
  sprite[SPRITE.CHEST_CROWN_ORANGE] = sprite[SPRITE.INV_CROWN_ORANGE];
  sprite[SPRITE.CHEST_GEMME_ORANGE] = sprite[SPRITE.INV_GEMME_ORANGE];
  sprite[SPRITE.CHEST_CROWN_BLUE] = sprite[SPRITE.INV_CROWN_BLUE];
  sprite[SPRITE.CHEST_GEMME_BLUE] = sprite[SPRITE.INV_GEMME_BLUE];
  sprite[SPRITE.CHEST_HOOD] = sprite[SPRITE.INV_HOOD];
  sprite[SPRITE.CHEST_PEASANT] = sprite[SPRITE.INV_PEASANT];
  sprite[SPRITE.CHEST_WINTER_PEASANT] = sprite[SPRITE.INV_WINTER_PEASANT];
  sprite[SPRITE.CHEST_WINTER_HOOD] = sprite[SPRITE.INV_WINTER_HOOD];
  sprite[SPRITE.CHEST_BUCKET_EMPTY] = sprite[SPRITE.INV_BUCKET_EMPTY];
  sprite[SPRITE.CHEST_BUCKET_FULL] = sprite[SPRITE.INV_BUCKET_FULL];
  sprite[SPRITE.CHEST_WELL] = sprite[SPRITE.INV_WELL];
  sprite[SPRITE.CHEST_SIGN] = sprite[SPRITE.INV_SIGN];
  sprite[SPRITE.CHEST_PUMPKIN_SEED] = sprite[SPRITE.INV_PUMPKIN_SEED];
  sprite[SPRITE.CHEST_GARLIC_SEED] = sprite[SPRITE.INV_GARLIC_SEED];
  sprite[SPRITE.CHEST_THORNBUSH_SEED] = sprite[SPRITE.INV_THORNBUSH_SEED];
  sprite[SPRITE.CHEST_WOOD_HELMET] = sprite[SPRITE.INV_WOOD_HELMET];
}
INFO_BOX = [];
PLAYER_LEVEL = [];
function ctxDrawImage(
  _0x1e9b40,
  _0x491c06,
  _0x394f64,
  _0x3084b3,
  _0x47dfc6,
  _0x2151b6,
  _0x366039,
  _0x1e17e7,
  _0xbb3fd3,
  _0x62ad7c
) {
  if (_0x491c06.tryLoad === undefined || _0x491c06.tryLoad() === 1) {
    if (_0x62ad7c !== undefined) {
      _0x1e9b40.drawImage(
        _0x491c06,
        _0x394f64,
        _0x3084b3,
        Math.max(1, _0x47dfc6),
        Math.max(1, _0x2151b6),
        _0x366039,
        _0x1e17e7,
        _0xbb3fd3,
        _0x62ad7c
      );
    } else {
      if (_0x2151b6 !== undefined) {
        _0x1e9b40.drawImage(
          _0x491c06,
          _0x394f64,
          _0x3084b3,
          _0x47dfc6,
          _0x2151b6
        );
      } else {
        _0x1e9b40.drawImage(_0x491c06, _0x394f64, _0x3084b3);
      }
    }
  }
}
function draw_info_box() {
  var _0x107f9a = game.info_box,
    _0x129c95 = _0x107f9a.id;
  if (_0x107f9a.activated === 1 && _0x107f9a.display === 1) {
    if (INFO_BOX[_0x129c95] === undefined) {
      INFO_BOX[_0x129c95] = create_info_box(_0x129c95);
    }
    if (_0x107f9a.craft === 1) {
      ctxDrawImage(ctx, INFO_BOX[_0x129c95], _0x107f9a.x, _0x107f9a.y);
    } else {
      if (_0x107f9a.x - 80 + INFO_BOX[_0x129c95].width > canw) {
        ctxDrawImage(
          ctx,
          INFO_BOX[_0x129c95],
          canw - INFO_BOX[_0x129c95].width - 10,
          _0x107f9a.y - INFO_BOX[_0x129c95].height - 10
        );
      } else {
        ctxDrawImage(
          ctx,
          INFO_BOX[_0x129c95],
          _0x107f9a.x - 80,
          _0x107f9a.y - INFO_BOX[_0x129c95].height - 10
        );
      }
    }
  }
}
function draw_slot_number(_0x2ff9db, _0x192a3b, _0xd6cc3a) {
  var _0x2e5356 = sprite[SPRITE.SLOT_NUMBER][_0x2ff9db];
  var _0x6b2bed = _0x192a3b.info.translate.x + 5 * scale;
  var _0x3cdb6f = _0x192a3b.info.translate.y + 5 * scale;
  if (_0x192a3b.info.state == BUTTON_CLICK || _0xd6cc3a) {
    _0x3cdb6f += scale * 5;
  }
  ctxDrawImage(ctx, _0x2e5356, _0x6b2bed, _0x3cdb6f);
}
function draw_amount(_0x45c999, _0x5ca7fd) {
  if (!sprite[SPRITE.COUNTER][_0x45c999]) {
    sprite[SPRITE.COUNTER][_0x45c999] = create_text(
      scale,
      "x" + _0x45c999,
      17,
      "#FFF"
    );
  }
  var _0x1b2887 = sprite[SPRITE.COUNTER][_0x45c999];
  var _0x42b22a =
    _0x5ca7fd.info.translate.x +
    _0x5ca7fd.info.img[0].width -
    _0x1b2887.width -
    14 * scale;
  var _0x1790cf =
    _0x5ca7fd.info.translate.y +
    _0x5ca7fd.info.img[0].height -
    _0x1b2887.height -
    19 * scale;
  if (_0x5ca7fd.info.state == BUTTON_CLICK) {
    _0x1790cf += scale * 5;
  }
  ctxDrawImage(ctx, _0x1b2887, _0x42b22a, _0x1790cf);
}
function draw_well_inventory() {
  if (
    user.chest.open ||
    user.furnace.open ||
    user.windmill.open ||
    user.bread_oven.open ||
    user.extractor.open
  ) {
    return;
  }
  user.well.open = false;
  var _0x1be1e2 = world.fast_units[user.uid];
  var _0x362015 = WORLD.DIST_WELL;
  if (!_0x1be1e2) {
    return;
  }
  for (
    var _0x2a80f9 = 0;
    _0x2a80f9 < world.units[ITEMS.WELL].length;
    _0x2a80f9++
  ) {
    var _0x162f2a = world.units[ITEMS.WELL][_0x2a80f9],
      _0xdcaa49 = Utils.dist(_0x162f2a, _0x1be1e2);
    _0xdcaa49 < _0x362015 &&
      ((_0x362015 = _0xdcaa49),
      (user.well.open = true),
      (user.well.pid = _0x162f2a.pid),
      (user.well.iid = _0x162f2a.id));
  }
}
function draw_sign_button() {
  if (
    user.chest.open ||
    user.furnace.open ||
    user.windmill.open ||
    user.bread_oven.open ||
    user.extractor.open
  ) {
    return;
  }
  user.sign.open = false;
  var _0xb68707 = world.fast_units[user.uid];
  var _0x2dd976 = WORLD.DIST_SIGN;
  if (!_0xb68707) {
    return;
  }
  for (
    var _0x5c55a0 = 0;
    _0x5c55a0 < world.units[ITEMS.SIGN].length;
    _0x5c55a0++
  ) {
    var _0x102d34 = world.units[ITEMS.SIGN][_0x5c55a0],
      _0x81414d = Utils.dist(_0x102d34, _0xb68707);
    _0x81414d < _0x2dd976 &&
      _0x102d34.info === 0 &&
      _0x102d34.pid === user.id &&
      ((user.sign.open = true),
      (_0x2dd976 = _0x81414d),
      (user.sign.iid = _0x102d34.id));
  }
  if (_0x2dd976 < WORLD.DIST_SIGN) {
    var _0x21bafc = game.sign.button;
    _0x21bafc.draw(ctx);
  }
}
function draw_bread_oven_inventory() {
  if (
    user.chest.open ||
    user.furnace.open ||
    user.windmill.open ||
    user.extractor.open
  ) {
    return;
  }
  user.bread_oven.open = false;
  var _0x4671c3 = world.fast_units[user.uid];
  var _0x28b714 = WORLD.DIST_BREAD_OVEN;
  if (!_0x4671c3) {
    return;
  }
  for (
    var _0x3cdeeb = 0;
    _0x3cdeeb < world.units[ITEMS.BREAD_OVEN].length;
    _0x3cdeeb++
  ) {
    var _0xec44fa = world.units[ITEMS.BREAD_OVEN][_0x3cdeeb],
      _0x18debd = Utils.dist(_0xec44fa, _0x4671c3);
    if (_0x18debd < _0x28b714) {
      _0x28b714 = _0x18debd;
      user.bread_oven.open = true;
      user.bread_oven.amount_wood = _0xec44fa.info & 31;
      user.bread_oven.amount_flour = (_0xec44fa.info & 992) >> 5;
      user.bread_oven.amount_bread = (_0xec44fa.info & 31744) >> 10;
      user.bread_oven.pid = _0xec44fa.pid;
      user.bread_oven.iid = _0xec44fa.id;
    }
  }
  if (_0x28b714 < WORLD.DIST_BREAD_OVEN) {
    var _0x225143 = sprite[SPRITE.BREAD_OVEN_UI];
    var _0xc1c10e = game.bread_oven_wood_button;
    var _0x788edc = _0xc1c10e.info.translate.x - 32;
    ctxDrawImage(ctx, _0x225143, _0x788edc, 0);
    if (user.bread_oven.amount_wood > 0) {
      _0xc1c10e.draw(ctx);
      var _0x16aea9 = user.bread_oven.amount_wood;
      if (_0x16aea9 > 1) {
        draw_amount(_0x16aea9, _0xc1c10e);
      }
    }
    var _0xc1c10e = game.bread_oven_bread_button;
    if (user.bread_oven.amount_bread > 0) {
      _0xc1c10e.draw(ctx);
      var _0x16aea9 = user.bread_oven.amount_bread;
      if (_0x16aea9 > 1) {
        draw_amount(_0x16aea9, _0xc1c10e);
      }
    }
    var _0xc1c10e = game.bread_oven_flour_button;
    if (user.bread_oven.amount_flour > 0) {
      _0xc1c10e.draw(ctx);
      var _0x16aea9 = user.bread_oven.amount_flour;
      if (_0x16aea9 > 1) {
        draw_amount(_0x16aea9, _0xc1c10e);
      }
    }
  }
}
function draw_extractor_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.extractor.open = false;
  var _0x3a8b9f = world.fast_units[user.uid],
    _0x580ee2 = WORLD.DIST_EXTRACTOR_MACHINE;
  if (!_0x3a8b9f) {
    return;
  }
  for (var _0x3de53d = 0; _0x3de53d < EXTRACTORS.length; _0x3de53d++) {
    var _0x4a7f27 = EXTRACTORS[_0x3de53d][0],
      _0x66d3a9 = EXTRACTORS[_0x3de53d][1];
    for (
      var _0x9fa321 = 0;
      _0x9fa321 < world.units[_0x4a7f27].length;
      _0x9fa321++
    ) {
      var _0x1adf29 = world.units[_0x4a7f27][_0x9fa321],
        _0x2d8322 = Utils.dist(_0x1adf29, _0x3a8b9f);
      if (_0x2d8322 < _0x580ee2) {
        _0x580ee2 = _0x2d8322;
        user.extractor.mineral = _0x66d3a9;
        user.extractor.type = _0x4a7f27;
        user.extractor.open = true;
        user.extractor.amount_wood = _0x1adf29.info & 255;
        user.extractor.amount_mineral = (_0x1adf29.info & 65280) >> 8;
        user.extractor.pid = _0x1adf29.pid;
        user.extractor.iid = _0x1adf29.id;
      }
    }
  }
  if (_0x580ee2 < WORLD.DIST_EXTRACTOR_MACHINE) {
    var _0x373b7d = sprite[SPRITE.EXTRACTOR_CASES],
      _0x2634c2 = game.extractor_wood_button,
      _0x57bc98 = _0x2634c2.info.translate.x - 33;
    ctxDrawImage(ctx, _0x373b7d, _0x57bc98, 0);
    if (user.extractor.amount_wood > 0) {
      _0x2634c2.draw(ctx);
      var _0x317a3c = user.extractor.amount_wood;
      if (_0x317a3c > 1) {
        draw_amount(_0x317a3c, _0x2634c2);
      }
    }
    switch (user.extractor.mineral) {
      case INV.STONE:
        var _0x2634c2 = game.extractor_stone_button;
        break;
      case INV.GOLD:
        var _0x2634c2 = game.extractor_gold_button;
        break;
      case INV.DIAMOND:
        var _0x2634c2 = game.extractor_diamond_button;
        break;
      case INV.AMETHYST:
        var _0x2634c2 = game.extractor_amethyst_button;
        break;
      case INV.REIDITE:
        var _0x2634c2 = game.extractor_reidite_button;
        break;
    }
    if (user.extractor.amount_mineral > 0) {
      _0x2634c2.draw(ctx);
      var _0x317a3c = user.extractor.amount_mineral;
      if (_0x317a3c > 1) {
        draw_amount(_0x317a3c, _0x2634c2);
      }
    }
  }
}
function draw_windmill_inventory() {
  if (user.chest.open || user.furnace.open) {
    return;
  }
  user.windmill.open = false;
  var _0x39623e = world.fast_units[user.uid];
  var _0x526bb9 = WORLD.DIST_WINDMILL;
  if (!_0x39623e) {
    return;
  }
  for (
    var _0x44bd83 = 0;
    _0x44bd83 < world.units[ITEMS.WINDMILL].length;
    _0x44bd83++
  ) {
    var _0x45c40a = world.units[ITEMS.WINDMILL][_0x44bd83],
      _0x1f05c1 = Utils.dist(_0x45c40a, _0x39623e);
    if (_0x1f05c1 < _0x526bb9) {
      _0x526bb9 = _0x1f05c1;
      user.windmill.open = true;
      user.windmill.amount_wheat = _0x45c40a.info & 255;
      user.windmill.amount_flour = (_0x45c40a.info & 65280) >> 8;
      user.windmill.pid = _0x45c40a.pid;
      user.windmill.iid = _0x45c40a.id;
    }
  }
  if (_0x526bb9 < WORLD.DIST_WINDMILL) {
    var _0x5e4dda = sprite[SPRITE.WINDMILL_CASES];
    var _0x35e898 = game.windmill_wheat_button;
    var _0x1f7e94 = _0x35e898.info.translate.x - 33;
    ctxDrawImage(ctx, _0x5e4dda, _0x1f7e94, 0);
    if (user.windmill.amount_wheat > 0) {
      _0x35e898.draw(ctx);
      var _0x172079 = user.windmill.amount_wheat;
      if (_0x172079 > 1) {
        draw_amount(_0x172079, _0x35e898);
      }
    }
    var _0x35e898 = game.windmill_flour_button;
    if (user.windmill.amount_flour > 0) {
      _0x35e898.draw(ctx);
      var _0x172079 = user.windmill.amount_flour;
      if (_0x172079 > 1) {
        draw_amount(_0x172079, _0x35e898);
      }
    }
  }
}
function draw_furnace_inventory() {
  if (user.chest.open) {
    return;
  }
  user.furnace.amount = 0;
  user.furnace.open = false;
  var _0x1dc000 = world.fast_units[user.uid];
  var _0xbd9afc = WORLD.DIST_FURNACE;
  if (!_0x1dc000) {
    return;
  }
  for (
    var _0x5a3b0a = 0;
    _0x5a3b0a < world.units[ITEMS.FURNACE].length;
    _0x5a3b0a++
  ) {
    var _0x269879 = world.units[ITEMS.FURNACE][_0x5a3b0a],
      _0x2fcd88 = Utils.dist(_0x269879, _0x1dc000);
    if (_0x2fcd88 < _0xbd9afc) {
      _0xbd9afc = _0x2fcd88;
      user.furnace.open = true;
      user.furnace.amount = _0x269879.info;
      user.furnace.pid = _0x269879.pid;
      user.furnace.iid = _0x269879.id;
    }
  }
  if (_0xbd9afc < WORLD.DIST_FURNACE) {
    var _0x15dad2 = sprite[SPRITE.FURNACE_SLOT];
    var _0x47c54f = game.furnace_button;
    var _0xa4b8d = Math.floor(
      _0x47c54f.info.translate.x +
        (_0x47c54f.info.img[0].width - _0x15dad2.width) / 2
    );
    var _0x5d701c =
      Math.floor(
        _0x47c54f.info.translate.y +
          (_0x47c54f.info.img[0].height - _0x15dad2.height) / 2
      ) + 3;
    ctxDrawImage(ctx, _0x15dad2, _0xa4b8d, _0x5d701c);
    if (user.furnace.amount > 0) {
      _0x47c54f.draw(ctx);
      var _0x42261a = user.furnace.amount;
      if (_0x42261a > 1) {
        draw_amount(_0x42261a, _0x47c54f);
      }
    }
  }
}
function draw_resurrection_inventory() {
  user.resurrection.open = false;
  var _0xc097c7 = world.fast_units[user.uid];
  var _0x56db7d = WORLD.DIST_RESURRECTION;
  if (!_0xc097c7) {
    return;
  }
  for (
    var _0x16f466 = 0;
    _0x16f466 < world.units[ITEMS.RESURRECTION].length;
    _0x16f466++
  ) {
    var _0x2e8614 = world.units[ITEMS.RESURRECTION][_0x16f466],
      _0x26340b = Utils.dist(_0x2e8614, _0xc097c7);
    _0x26340b < _0x56db7d &&
      ((_0x56db7d = _0x26340b),
      (user.resurrection.open = true),
      (user.resurrection.pid = _0x2e8614.pid),
      (user.resurrection.iid = _0x2e8614.id));
  }
  if (_0x56db7d < WORLD.DIST_RESURRECTION) {
    game.resurrection.draw(ctx);
  }
}
function draw_team_buttons() {
  user.totem.id = -1;
  user.totem.pid = -1;
  if (user.spectator || user.totem.wait || user.zombie) {
    return;
  }
  var _0x316ca4 = world.fast_units[user.uid];
  var _0x408ec7 = WORLD.DIST_TOTEM;
  if (_0x316ca4) {
    for (
      var _0x583596 = 0;
      _0x583596 < world.units[ITEMS.TOTEM].length;
      _0x583596++
    ) {
      var _0x361896 = world.units[ITEMS.TOTEM][_0x583596],
        _0x39ea67 = Utils.dist(_0x361896, _0x316ca4);
      if (_0x39ea67 < _0x408ec7) {
        _0x408ec7 = _0x39ea67;
        user.totem.id = _0x361896.id;
        user.totem.pid = _0x361896.pid;
        user.totem.info = _0x361896.info;
        user.totem.lock = (_0x361896.info & 16) >> 4;
      }
    }
  }
  var _0x140193 = game.team_buttons_id;
  game.team_buttons_id = -1;
  if (
    user.totem.pid != -1 &&
    (user.team.length == 0 || user.id == user.totem.pid)
  ) {
    if (user.team.length == 0 && user.totem.info >= 8) {
      game.team_buttons_id = CLIENT.TEAM_FULL;
    } else {
      if (user.team.length == 0) {
        game.team_buttons_id = CLIENT.TEAM_JOIN;
      } else {
        game.team_buttons_id = CLIENT.TEAM_MANAGE;
      }
    }
  } else {
    if (user.team.length != 0 && user.team[0] != user.id) {
      game.team_buttons_id = CLIENT.TEAM_LEAVE;
    } else {
      if (user.team.length != 0 && user.team[0] == user.id) {
        game.team_buttons_id = CLIENT.TEAM_SHOW;
      } else {
        if (user.team.length != 0) {
          game.team_buttons_id = CLIENT.TEAM_JOIN;
        }
      }
    }
  }
  if (game.team_buttons_id != -1) {
    game.team_buttons[game.team_buttons_id].button.draw(ctx);
  }
  var _0x384bd1 = document.getElementById("team_box").style;
  if (
    game.team_buttons_id != -1 &&
    game.team_buttons_id != _0x140193 &&
    _0x384bd1.display == "inline-block"
  ) {
    game.team_buttons[game.team_buttons_id].action();
  }
}
function draw_chest_inventory() {
  user.chest.id = -1;
  user.chest.lock = false;
  user.chest.locked = false;
  user.chest.lockpick = false;
  user.chest.padlock = false;
  user.chest.open = false;
  var _0x426504 = world.fast_units[user.uid];
  var _0x10a30d = WORLD.DIST_CHEST;
  if (!_0x426504) {
    return;
  }
  for (
    var _0x9e2d35 = 0;
    _0x9e2d35 < world.units[ITEMS.CHEST].length;
    _0x9e2d35++
  ) {
    var _0x384f06 = world.units[ITEMS.CHEST][_0x9e2d35],
      _0x53e22d = Utils.dist(_0x384f06, _0x426504);
    if (_0x53e22d < _0x10a30d) {
      _0x10a30d = _0x53e22d;
      user.chest.open = true;
      user.chest.id =
        _0x384f06.action < 2 ? -1 : Math.floor((_0x384f06.action - 1) / 2);
      user.chest.amount = _0x384f06.info;
      user.chest.pid = _0x384f06.pid;
      user.chest.iid = _0x384f06.id;
      user.chest.locked = _0x384f06.lock;
      user.chest.lock =
        _0x384f06.lock &&
        user.id != _0x384f06.pid &&
        !user.in_team(_0x384f06.pid)
          ? true
          : false;
      user.chest.padlock =
        _0x384f06.pid === user.id &&
        !user.chest.locked &&
        user.inv.find_item(INV.LOCK) != -1
          ? true
          : false;
      if (user.chest.locked && user.inv.find_item(INV.LOCKPICK) != -1) {
        user.chest.lockpick = true;
      }
    }
  }
  if (_0x10a30d < WORLD.DIST_CHEST) {
    var _0x2aaa78 = sprite[SPRITE.CHEST_SLOT];
    var _0x314c08 = game.chest_buttons[0];
    var _0x1c2651 = Math.floor(
      _0x314c08.info.translate.x +
        (_0x314c08.info.img[0].width - _0x2aaa78.width) / 2
    );
    var _0x1cddf0 =
      Math.floor(
        _0x314c08.info.translate.y +
          (_0x314c08.info.img[0].height - _0x2aaa78.height) / 2
      ) + 3;
    ctxDrawImage(ctx, _0x2aaa78, _0x1c2651, _0x1cddf0);
    if (!user.chest.lock || user.chest.pid === user.id) {
      if (user.chest.id >= 0) {
        var _0x314c08 = game.chest_buttons[user.chest.id];
        _0x314c08.draw(ctx);
        var _0x516ce1 = user.chest.amount;
        if (_0x516ce1 > 1) {
          draw_amount(_0x516ce1, _0x314c08);
        }
      }
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        game.chest_padlock.draw(ctx);
      }
    } else {
      game.chest_locked.draw(ctx);
    }
    if (user.chest.lockpick) {
      game.chest_lockpick.draw(ctx);
    }
  }
}
function draw_bigmap() {
  if (!user.bigmap) {
    return;
  }
  ctx.globalAlpha = 0.5;
  ctx.fillStyle = "#000";
  ctx.fillRect(0, 0, canw, canh);
  ctx.globalAlpha = 0.8;
  var _0x3a55c0 = sprite[SPRITE.BIGMAP][world.time];
  var _0x17d994 = canw2 - _0x3a55c0.width / 2;
  var _0x3a661c = canh2 - _0x3a55c0.height / 2;
  ctxDrawImage(ctx, _0x3a55c0, _0x17d994, _0x3a661c);
  ctx.globalAlpha = 1;
  game.minimap.marker.x > -1 &&
    ((ctx.fillStyle = "#660000"),
    circle(
      ctx,
      _0x17d994 + game.minimap.marker.x * 3 * scale,
      _0x3a661c + game.minimap.marker.y * 3 * scale,
      scale * 14
    ),
    ctx.fill());
  var _0x2eb105 = game.minimap.players;
  for (var _0x25d99a = 0; _0x25d99a < _0x2eb105.length; _0x25d99a++) {
    var _0x2ab29f = _0x2eb105[_0x25d99a];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(
      ctx,
      _0x17d994 + 600 * (_0x2ab29f.x / (world.nw * 100)) * scale,
      _0x3a661c + 600 * (_0x2ab29f.y / (world.nh * 100)) * scale,
      scale * 6
    );
    ctx.fill();
  }
  var _0x1b3a4e = world.fast_units[user.uid];
  _0x1b3a4e &&
    ((ctx.fillStyle = !world.time ? "#e39716" : "#fff"),
    circle(
      ctx,
      _0x17d994 + 600 * (_0x1b3a4e.x / (world.nw * 100)) * scale,
      _0x3a661c + 600 * (_0x1b3a4e.y / (world.nh * 100)) * scale,
      scale * 12
    ),
    ctx.fill());
}
function draw_reconnect() {
  if (user.reconnect.enabled) {
    ctx.globalAlpha = 0.9;
    ctx.fillStyle = "#000";
    round_rect(ctx, canw2 - 150, canh2 - 90, 300, 180, 15);
    ctx.fill();
    ctx.globalAlpha = 1;
    var _0x470d54 = sprite[SPRITE.GEAR2];
    ctx.save();
    user.reconnect.rotate = (user.reconnect.rotate + delta * 2) % (Math.PI * 2);
    ctx.translate(canw / 2, canh / 2 - 25);
    ctx.rotate(user.reconnect.rotate);
    ctxDrawImage(ctx, _0x470d54, -_0x470d54.width / 2, -_0x470d54.height / 2);
    ctx.restore();
    var _0x470d54 = sprite[SPRITE.RECONNECT];
    ctxDrawImage(
      ctx,
      _0x470d54,
      (canw - _0x470d54.width) / 2,
      (canh - _0x470d54.height) / 2 + 25
    );
  }
}
function draw_minimap() {
  if (user.inv.can_select.length > 0) {
    var _0x3d89c5 = {
      x: game.minimap.translate.x,
      y: game.minimap.translate.y - 120 * scale,
    };
  } else {
    var _0x3d89c5 = {
      x: game.minimap.translate.x,
      y: game.minimap.translate.y - 50 * scale,
    };
  }
  ctx.globalAlpha = 0.8;
  var _0x1f587d = sprite[SPRITE.MINIMAP][world.time];
  ctxDrawImage(ctx, _0x1f587d, _0x3d89c5.x, _0x3d89c5.y);
  ctx.globalAlpha = 1;
  game.minimap.marker.x > -1 &&
    ((ctx.fillStyle = "#660000"),
    circle(
      ctx,
      _0x3d89c5.x + game.minimap.marker.x * scale,
      _0x3d89c5.y + game.minimap.marker.y * scale,
      scale * 5
    ),
    ctx.fill());
  var _0x4f9dbd = scale;
  var _0x21912d = game.minimap.players;
  for (var _0x21a0eb = 0; _0x21a0eb < _0x21912d.length; _0x21a0eb++) {
    var _0x318945 = _0x21912d[_0x21a0eb];
    ctx.fillStyle = !world.time ? "#ff0000" : "#ff0000";
    circle(
      ctx,
      _0x3d89c5.x + 193 * (_0x318945.x / (world.nw * 100)) * scale,
      _0x3d89c5.y + 193 * (_0x318945.y / (world.nh * 100)) * scale,
      scale * 2
    );
    ctx.fill();
  }
  var _0x4412b3 = world.fast_units[user.uid];
  _0x4412b3 &&
    ((ctx.fillStyle = !world.time ? "#e39716" : "#fff"),
    circle(
      ctx,
      _0x3d89c5.x + 193 * (_0x4412b3.x / (world.nw * 100)) * scale,
      _0x3d89c5.y + 193 * (_0x4412b3.y / (world.nh * 100)) * scale,
      scale * 4
    ),
    ctx.fill());
  scale = _0x4f9dbd;
}
var __BANDAGE__ = [];
function draw_status() {
  var _0x2fd88c = -8;
  if (user.auto_feed.enabled) {
    var _0x30f13d = sprite[SPRITE.AUTO_FEED];
    ctxDrawImage(
      ctx,
      _0x30f13d,
      user.auto_feed.translate.x,
      user.auto_feed.translate.y + _0x2fd88c
    );
    _0x2fd88c += 70;
  }
  if (user.blizzard === 1) {
    var _0x30f13d = sprite[SPRITE.STOP_REGENERATION_BLIZZARD];
    ctxDrawImage(
      ctx,
      _0x30f13d,
      user.auto_feed.translate.x,
      user.auto_feed.translate.y + _0x2fd88c
    );
    _0x2fd88c += 70;
  } else {
    if (
      user.gauges.cold.x < 0.25 ||
      user.gauges.hunger.x < 0.25 ||
      user.gauges.thirst.x < 0.25 ||
      user.gauges.oxygen.x < 0.25 ||
      user.gauges.warm.x < 0.25
    ) {
      var _0x30f13d = sprite[SPRITE.STOP_REGENERATION];
      ctxDrawImage(
        ctx,
        _0x30f13d,
        user.auto_feed.translate.x,
        user.auto_feed.translate.y + _0x2fd88c
      );
      _0x2fd88c += 70;
    }
  }
  if (user.bandage > 0) {
    var _0x30f13d = sprite[SPRITE.BANDAGE_ACTIVATED];
    ctxDrawImage(
      ctx,
      _0x30f13d,
      user.auto_feed.translate.x,
      user.auto_feed.translate.y + _0x2fd88c
    );
    var _0x2b3507 = __BANDAGE__[user.bandage];
    _0x2b3507 === undefined &&
      ((_0x2b3507 = create_text(
        scale,
        user.bandage + "",
        30,
        "#FDFDFD",
        null,
        null,
        null,
        null,
        null,
        "#C8BBBF",
        6
      )),
      (__BANDAGE__[user.bandage] = _0x2b3507));
    if (user.bandage < 9) {
      ctxDrawImage(
        ctx,
        _0x2b3507,
        user.auto_feed.translate.x - 39,
        user.auto_feed.translate.y + _0x2fd88c + 20
      );
    } else {
      ctxDrawImage(
        ctx,
        _0x2b3507,
        user.auto_feed.translate.x - 46,
        user.auto_feed.translate.y + _0x2fd88c + 20
      );
    }
  }
  if (Settings.showFps) {
    ctx.save();
    ctx.font = "30px Baloo Paaji";
    ctx.strokeStyle = "black";
    ctx.lineWidth = 7;
    ctx.strokeText(window.FpsData + " FPS", user.auto_feed.translate.x + -120, user.auto_feed.translate.y + -50);
    ctx.fillStyle = "white";
    ctx.fillText(window.FpsData + " FPS", user.auto_feed.translate.x + -120, user.auto_feed.translate.y + -50);
    ctx.restore();
  }
  if (Settings.showPing) {
    ctx.save();
    ctx.font = "30px Baloo Paaji";
    ctx.strokeStyle = "black";
    ctx.lineWidth = 7;
    ctx.strokeText(PingData + " Ping", user.auto_feed.translate.x + -120, user.auto_feed.translate.y + -20);
    ctx.fillStyle = "white";
    ctx.fillText(PingData + " Ping", user.auto_feed.translate.x + -120, user.auto_feed.translate.y + -20);
    ctx.restore();
  }
}
function draw_leaderboard() {
  var _0x471dd2 = user.ldb,
    _0x2ff4c6 = game.leaderboard;
  if (_0x471dd2.update) {
    _0x471dd2.update = false;
    var _0x10ab5f = _0x471dd2.ids,
      _0x28d0d9 = _0x2ff4c6.can.width,
      _0x21b2d5 = _0x2ff4c6.can.height,
      _0x375f9d = _0x2ff4c6.ctx,
      _0x4a7b82 = world.players,
      _0x52c093 = false;
    _0x375f9d.clearRect(0, 0, _0x28d0d9, _0x21b2d5);
    _0x375f9d.drawImage(_0x2ff4c6.img, 0, 0);
    for (var _0x3c49e1 = 0; _0x3c49e1 < _0x10ab5f.length; _0x3c49e1++) {
      var _0x50e005 = _0x4a7b82[_0x10ab5f[_0x3c49e1]];
      if (
        world.mode === WORLD.MODE_HUNGER_GAMES &&
        _0x50e005.nickname === "spectator"
      ) {
        continue;
      }
      if (
        world.mode === WORLD.MODE_ZOMBIES &&
        _0x50e005.skin === WORLD.ZOMBIE_SKIN
      ) {
        continue;
      }
      if (_0x10ab5f[_0x3c49e1] == user.id) {
        _0x52c093 = true;
        if (
          world.mode === WORLD.MODE_VAMPIRES &&
          _0x50e005.skin === WORLD.VAMPIRE_SKIN
        ) {
          color = "#FF0000";
        } else {
          color = "#FFF";
        }
      } else {
        if (
          world.mode === WORLD.MODE_VAMPIRES &&
          _0x50e005.skin === WORLD.VAMPIRE_SKIN
        ) {
          color = "#990000";
        } else {
          color = "#A1BDCD";
        }
      }
      _0x375f9d.drawImage(
        create_text(scale, "" + (_0x3c49e1 + 1), 15 * scale, color),
        20 * scale,
        (40 + _0x3c49e1 * 22) * scale
      );
      if (!_0x50e005.ldb_label) {
        _0x50e005.ldb_label = create_text(
          scale,
          _0x50e005.nickname,
          15 * scale,
          color,
          undefined,
          undefined,
          undefined,
          undefined,
          110 * scale
        );
      }
      _0x375f9d.drawImage(
        _0x50e005.ldb_label,
        39 * scale,
        (40 + _0x3c49e1 * 22) * scale
      );
      _0x375f9d.drawImage(
        create_text(
          scale,
          Utils.simplify_number(_0x50e005.score),
          15 * scale,
          color
        ),
        156 * scale,
        (40 + _0x3c49e1 * 22) * scale
      );
    }
    !_0x52c093 &&
      (world.mode === WORLD.MODE_PVP ||
        world.mode === WORLD.MODE_VAMPIRES ||
        world.mode === WORLD.MODE_LEGACY ||
        world.mode === WORLD.MODE_BR ||
        world.mode === WORLD.MODE_EXPERIMENTAL ||
        (world.mode === WORLD.MODE_HUNGER_GAMES && !user.spectator) ||
        (world.mode === WORLD.MODE_ZOMBIES && !user.zombie)) &&
      (_0x375f9d.drawImage(
        sprite[SPRITE.YOUR_SCORE],
        15 * scale,
        (46 + _0x3c49e1 * 22) * scale
      ),
      _0x375f9d.drawImage(
        create_text(
          scale,
          Utils.simplify_number(world.players[user.id].score),
          15 * scale,
          "#FFF"
        ),
        100 * scale,
        (46 + _0x3c49e1 * 22) * scale
      ));
  }
  ctxDrawImage(
    ctx,
    _0x2ff4c6.can,
    _0x2ff4c6.translate.x,
    _0x2ff4c6.translate.y
  );
}
function draw_totem_delay() {
  var _0x31187b = user.totem;
  if (_0x31187b.wait) {
    var _0x4a701b = _0x31187b.timeout.update();
    ctx.save();
    var _0x317533 = sprite[SPRITE.DELAY_TEAM];
    var _0x4df17b = sprite[SPRITE.DELAY_WEAPON].height + 25 * scale;
    ctx.translate(
      _0x317533.width,
      game.gauges.translate.y - 188 * scale - _0x4df17b
    );
    var _0x8b751a = -_0x317533.width / 2 - 2;
    var _0x452838 = -_0x317533.height / 2 - 4;
    ctxDrawImage(ctx, _0x317533, _0x8b751a + 2, _0x452838);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(
      0,
      _0x452838 + _0x317533.height / 2,
      25 * scale,
      0,
      Math.PI * 2 * _0x31187b.timeout.v
    );
    ctx.stroke();
    ctx.restore();
    _0x4a701b &&
      ((_0x31187b.wait = false),
      (_0x31187b.timeout.v = 0),
      (_0x31187b.timeout.o = false));
  }
}
function draw_clock() {
  var _0x3abc24 = world.clock;
  var _0x520eda = sprite[SPRITE.CLOCK][world.time];
  ctxDrawImage(ctx, _0x520eda, _0x3abc24.translate.x, _0x3abc24.translate.y);
  ctx.save();
  ctx.translate(
    _0x3abc24.translate.x + _0x520eda.width / 2,
    _0x3abc24.translate.y + _0x520eda.height / 2
  );
  world.clock.now =
    (new Date().getTime() - _0x3abc24.init + _0x3abc24.hour) % WORLD.DAY;
  var _0x1f386d = (Math.PI * 2 * world.clock.now) / WORLD.DAY - Math.PI / 2;
  ctx.rotate(_0x1f386d);
  ctxDrawImage(
    ctx,
    sprite[SPRITE.ARROW_CLOCK],
    -_0x520eda.width / 2,
    -_0x520eda.height / 2
  );
  ctx.restore();
}
function draw_build_delay() {
  var _0x1b754b = user.build;
  if (_0x1b754b.wait) {
    var _0xe69b10 = _0x1b754b.timeout.update();
    ctx.save();
    var _0x147a32 = sprite[SPRITE.DELAY_WALL];
    ctx.translate(
      _0x147a32.width - 12 * scale,
      game.gauges.translate.y - 190 * scale
    );
    var _0x5af2f0 = -_0x147a32.width / 2 + 9;
    var _0x3c532a = -_0x147a32.height / 2 - 4;
    ctxDrawImage(ctx, _0x147a32, _0x5af2f0, _0x3c532a);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(
      9,
      _0x3c532a + _0x147a32.height / 2,
      25 * scale,
      0,
      Math.PI * 2 * _0x1b754b.timeout.v
    );
    ctx.stroke();
    ctx.restore();
    _0xe69b10 &&
      ((_0x1b754b.wait = false),
      (_0x1b754b.timeout.v = 0),
      (_0x1b754b.timeout.o = false));
  }
}
function draw_helmet_switch_delay() {
  var _0x37de1b = user.helmet;
  if (_0x37de1b.wait) {
    var _0xb64dc0 = _0x37de1b.timeout.update();
    ctx.save();
    var _0x5403cb = sprite[SPRITE.DELAY_HELMET];
    ctx.translate(
      _0x5403cb.width - 2 * scale,
      game.gauges.translate.y - 125 * scale
    );
    var _0x33ffe3 = -_0x5403cb.width / 2 + 10;
    var _0x1092eb = -_0x5403cb.height / 2 - 4;
    ctxDrawImage(ctx, _0x5403cb, _0x33ffe3, _0x1092eb);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.HELMET_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(
      9,
      _0x1092eb + _0x5403cb.height / 2,
      25 * scale,
      0,
      Math.PI * 2 * _0x37de1b.timeout.v
    );
    ctx.stroke();
    ctx.restore();
    _0xb64dc0 &&
      ((_0x37de1b.wait = false),
      (_0x37de1b.timeout.v = 0),
      (_0x37de1b.timeout.o = false));
  }
}
function draw_weapon_switch_delay() {
  var _0x10309c = user.weapon;
  if (_0x10309c.wait) {
    var _0x5c3b9c = _0x10309c.timeout.update();
    ctx.save();
    var _0xa9926c = sprite[SPRITE.DELAY_WEAPON];
    ctx.translate(
      _0xa9926c.width - 2 * scale,
      game.gauges.translate.y - 60 * scale
    );
    var _0x49db44 = -_0xa9926c.width / 2 - 2;
    var _0x4390da = -_0xa9926c.height / 2 - 4;
    ctxDrawImage(ctx, _0xa9926c, _0x49db44, _0x4390da);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.WEAPON_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(
      0,
      _0x4390da + _0xa9926c.height / 2,
      25 * scale,
      0,
      Math.PI * 2 * _0x10309c.timeout.v
    );
    ctx.stroke();
    ctx.restore();
    _0x5c3b9c &&
      ((_0x10309c.wait = false),
      (_0x10309c.timeout.v = 0),
      (_0x10309c.timeout.o = false));
  }
}
function draw_ui_gear() {
  var _0x270ae0 = user.craft;
  if (_0x270ae0.crafting) {
    var _0x20f368 = world.fast_units[user.uid];
    ctx.save();
    ctx.translate(user.cam.x + _0x20f368.x, user.cam.y + _0x20f368.y);
    var _0x57bb4a = sprite[SPRITE.GEAR];
    var _0x3ce04d = -_0x57bb4a.width / 2;
    var _0xfa79f = -_0x57bb4a.height / 2 - 125 * scale;
    ctxDrawImage(ctx, _0x57bb4a, _0x3ce04d, _0xfa79f);
    ctx.beginPath();
    ctx.lineWidth = 5 * scale;
    ctx.strokeStyle = SPRITE.CRAFT_LOADING[world.time];
    ctx.lineCap = "round";
    ctx.arc(
      0,
      _0xfa79f + _0x57bb4a.height / 2,
      25 * scale,
      0,
      Math.PI * 2 * _0x270ae0.timeout.v
    );
    ctx.stroke();
    ctx.restore();
  }
}
function draw_ui_crafting() {
  var _0x1a7151 = user.craft;
  if (!_0x1a7151.crafting && _0x1a7151.preview > 0) {
    var _0x436730 = world.fast_units[user.uid];
    if (!_0x436730) {
      return;
    }
    ctx.save();
    if (INV_INFOS[_0x1a7151.preview].grid === 0 && _0x1a7151.mode === 0) {
      ctx.translate(user.cam.x + _0x436730.x, user.cam.y + _0x436730.y);
      ctx.rotate(_0x436730.angle);
      ctx.translate(120, 0);
    } else {
      var _0x5742e3 = Math.floor(_0x436730.x + Math.cos(_0x436730.angle) * 120);
      var _0x54f870 = Math.floor(_0x436730.y + Math.sin(_0x436730.angle) * 120);
      _0x5742e3 = user.cam.x + (_0x5742e3 - (_0x5742e3 % 100) + 50);
      _0x54f870 = user.cam.y + (_0x54f870 - (_0x54f870 % 100) + 50);
      ctx.translate(_0x5742e3, _0x54f870);
    }
    var _0x4e3570 = sprite[_0x1a7151.preview][world.time];
    ctx.globalAlpha = 0.5;
    ctxDrawImage(ctx, _0x4e3570, -_0x4e3570.width / 2, -_0x4e3570.height / 2);
    ctx.globalAlpha = 1;
    ctx.restore();
    if (INV_INFOS[_0x1a7151.preview].grid === 0) {
      if (!_0x1a7151.label[_0x1a7151.mode]) {
        if (_0x1a7151.mode === 0) {
          _0x1a7151.label[0] = create_text(
            scale,
            LANG[TEXT.MODE_FREE],
            20,
            "#e2c340"
          );
        } else {
          _0x1a7151.label[1] = create_text(
            scale,
            LANG[TEXT.MODE_GRID],
            20,
            "#e2c340"
          );
        }
      }
      var _0x4e3570 = _0x1a7151.label[_0x1a7151.mode];
      ctxDrawImage(
        ctx,
        _0x4e3570,
        canw2 + -_0x4e3570.width / 2,
        game.gauges.y - 26
      );
    }
  }
  if (_0x1a7151.crafting) {
    var _0x41d0e8 = _0x1a7151.timeout.update();
    for (
      var _0x52fa81 = 0;
      _0x52fa81 < _0x1a7151.can_craft.length;
      _0x52fa81++
    ) {
      var _0x3a6c06 = _0x1a7151.can_craft[_0x52fa81];
      if (_0x1a7151.id == _0x3a6c06.id) {
        var _0x2256dc = scale * 42;
        var _0x2c4857 = scale * 17;
        round_rect(
          ctx,
          _0x3a6c06.info.translate.x,
          _0x3a6c06.info.translate.y + _0x2256dc * (1 - _0x1a7151.timeout.v),
          _0x3a6c06.info.width,
          _0x2256dc * _0x1a7151.timeout.v + _0x2c4857,
          scale * 10
        );
        ctx.fillStyle = "#55B973";
        ctx.fill();
        ctx.globalAlpha = 0.8;
        _0x3a6c06.draw(ctx);
      } else {
        ctx.globalAlpha = 0.5;
        _0x3a6c06.draw(ctx);
      }
      ctx.globalAlpha = 1;
    }
    return (
      _0x41d0e8 &&
        ((_0x1a7151.crafting = false),
        (_0x1a7151.timeout.v = 0),
        (_0x1a7151.timeout.o = false)),
      true
    );
  } else {
    for (
      var _0x52fa81 = 0;
      _0x52fa81 < _0x1a7151.can_craft.length;
      _0x52fa81++
    ) {
      _0x1a7151.can_craft[_0x52fa81].draw(ctx);
    }
  }
  return false;
}
function draw_ui_chat() {
  var _0xfaef06 = world.units[ITEMS.PLAYERS];
  if (
    world.mode === WORLD.MODE_PVP ||
    world.mode === WORLD.MODE_EXPERIMENTAL ||
    world.mode === WORLD.MODE_ZOMBIES ||
    world.mode === WORLD.MODE_LEGACY ||
    world.mode === WORLD.MODE_BR ||
    world.mode === WORLD.MODE_VAMPIRES
  ) {
    for (var _0x425038 = 0; _0x425038 < _0xfaef06.length; _0x425038++) {
      _0xfaef06[_0x425038].draw_text();
    }
  } else {
    if (world.mode === WORLD.MODE_HUNGER_GAMES) {
      for (var _0x425038 = 0; _0x425038 < _0xfaef06.length; _0x425038++) {
        if (user.spectator || user.show_spectators.enabled) {
          _0xfaef06[_0x425038].draw_text();
        } else {
          if (_0xfaef06[_0x425038].player.nickname !== "spectator") {
            _0xfaef06[_0x425038].draw_text();
          }
        }
      }
    }
  }
}
function draw_ui_inventory() {
  var _0x4644ac = user.inv,
    _0x4614cd = world.fast_units[user.uid];
  for (
    var _0x1b4d60 = 0;
    _0x1b4d60 < _0x4644ac.can_select.length;
    _0x1b4d60++
  ) {
    var _0x50c365 = _0x4644ac.can_select[_0x1b4d60];
    var _0x1b7fff = false;
    var _0x4614cd = world.fast_units[user.uid];
    if (
      _0x4614cd &&
      (_0x4614cd.right == _0x50c365.id ||
        (_0x4614cd.clothe == _0x50c365.id && _0x4614cd.clothe > 0))
    ) {
      _0x1b7fff = true;
      ctxDrawImage(
        ctx,
        _0x50c365.info.img[2],
        _0x50c365.info.translate.x,
        _0x50c365.info.translate.y,
        _0x50c365.info.width,
        _0x50c365.info.height
      );
    } else {
      _0x50c365.draw(ctx);
    }
    var _0x79af4a = user.inv.n[_0x50c365.id];
    if (_0x79af4a > 1) {
      draw_amount(_0x79af4a, _0x50c365);
    }
    if (_0x79af4a > 0) {
      draw_slot_number(_0x1b4d60, _0x50c365, _0x1b7fff);
    }
    var _0x429128 = user.chest;
    if (
      _0x429128.open &&
      (_0x429128.id < 0 || _0x429128.id == _0x50c365.id) &&
      (!_0x429128.lock || _0x429128.pid == user.id)
    ) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
    var _0x323eda = user.furnace;
    if (_0x323eda.open && INV.WOOD == _0x50c365.id) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
    var _0x3278a7 = user.well;
    if (_0x3278a7.open && INV.BUCKET_FULL == _0x50c365.id) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
    var _0x56ed35 = user.windmill;
    if (_0x56ed35.open && INV.WILD_WHEAT == _0x50c365.id) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
    var _0x2fdc3a = user.extractor;
    if (_0x2fdc3a.open && INV.WOOD == _0x50c365.id) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
    var _0x272139 = user.bread_oven;
    if (
      _0x272139.open &&
      (INV.WOOD == _0x50c365.id || INV.FLOUR == _0x50c365.id)
    ) {
      game.plus_buttons[_0x50c365.id].draw(ctx);
    }
  }
  if (_0x50c365 && _0x1b4d60 < _0x4644ac.max) {
    var _0x209a20 = sprite[SPRITE.EMPTY_SLOT][2];
    x = _0x50c365.info.translate.x;
    y = _0x50c365.info.translate.y;
    for (j = 1; _0x1b4d60 < _0x4644ac.max; _0x1b4d60++, j++) {
      ctxDrawImage(ctx, _0x209a20, x + j * (_0x209a20.width + 5), y);
    }
  }
}
function draw_gauges() {
  ctx.save();
  var e = scale;
  if (user.gauges.life.x < 0.25) {
    ctx.globalAlpha = user.gauges.warn_life.v;
  }
  var t = user.inv.can_select.length > 0 ? -70 : 0;
  if (
    user.chest.open ||
    (user.furnace.open && -1 != user.inv.find_item(INV.WOOD)) ||
    (user.windmill.open && -1 != user.inv.find_item(INV.WILD_WHEAT)) ||
    (user.extractor.open && -1 != user.inv.find_item(INV.WOOD)) ||
    (user.well.open && -1 != user.inv.find_item(INV.BUCKET_FULL)) ||
    (user.bread_oven.open &&
      (-1 != user.inv.find_item(INV.WOOD) ||
        -1 != user.inv.find_item(INV.FLOUR)))
  ) {
    t -= 50 * scale;
  }
  ctx.translate((canw - 950 * scale) / 2, t);
  ctx.fillStyle = "#69A148";
  ctx.fillRect(
    this.translate.x + 37 * scale,
    this.translate.y + 17 * scale,
    user.gauges.life.x * 178 * scale,
    18 * scale
  );
  ctx.globalAlpha = 1;
  user.gauges.hunger.x < 0.35 &&
    ((ctx.fillStyle = "#8F050A"),
    (ctx.globalAlpha = user.gauges.warn_hunger.v),
    ctx.fillRect(
      this.translate.x + 277 * scale,
      this.translate.y + 17 * scale,
      178 * scale,
      18 * scale
    ),
    (ctx.globalAlpha = 1));
  ctx.fillStyle = "#AF352A";
  ctx.fillRect(
    this.translate.x + 277 * scale,
    this.translate.y + 17 * scale,
    user.gauges.hunger.x * 178 * scale,
    18 * scale
  );
  user.gauges.cold.x < 0.35 &&
    ((ctx.fillStyle = "#366B91"),
    (ctx.globalAlpha = user.gauges.warn_cold.v),
    ctx.fillRect(
      this.translate.x + 517 * scale,
      this.translate.y + 17 * scale,
      178 * scale,
      18 * scale
    ),
    (ctx.globalAlpha = 1));
  ctx.fillStyle = "#669BB1";
  ctx.fillRect(
    this.translate.x + 517 * scale,
    this.translate.y + 17 * scale,
    user.gauges.cold.x * 178 * scale,
    18 * scale
  );

  if (Settings.Timer) {
    ctx.save();
    ctx.save();
    ctx.font = "34px Baloo Paaji";
    ctx.strokeStyle = "#2b2b2b";
    ctx.lineWidth = 7;
    ctx.strokeText(
      Math.floor(100 * user.gauges.thirst.x) + "%",
      this.translate.x + 800 * scale,
      this.translate.y + 0 * scale
    );
    ctx.strokeText(
      user.gauges.cold.x === 1
        ? 200 - Math.floor(100 * user.gauges.warm.x) + "%"
        : Math.floor(100 * user.gauges.cold.x) + "%",
      this.translate.x + 800 * scale,
      this.translate.y + 0 * scale
    );
    ctx.strokeText(
      Math.floor(100 * user.gauges.hunger.x) + "%",
      this.translate.x + 350 * scale,
      this.translate.y + 0 * scale
    );
    ctx.strokeText(
      Math.floor(200 * user.gauges.life.x) + "hp",
      this.translate.x - 80 * scale,
      this.translate.y + 35 * scale
    );
    ctx.strokeText(
      Math.floor(11 - (Date.now() - TimerTools.HPTimer) / 1e3) + "s",
      this.translate.x + 216 * scale,
      this.translate.y + 35 * scale
    );
    ctx.strokeText(
      Math.floor(6 - (Date.now() - TimerTools.GaugeTimer) / 1e3) + "s",
      this.translate.x + 460 * scale,
      this.translate + 35 * scale
    );
    ctx.fillStyle = "#fff";
    ctx.fillText(
      Math.floor(100 * user.gauges.thirst.x) + "%",
      this.translate.x + 800 * scale,
      this.translate.y + 0 * scale
    );
    ctx.fillText(
      user.gauges.cold.x === 1
        ? 200 - Math.floor(100 * user.gauges.warm.x) + "%"
        : Math.floor(100 * user.gauges.cold.x) + "%",
      this.translate.x + 600 * scale,
      this.translate.y + 0 * scale
    );
    ctx.fillText(
      Math.floor(100 * user.gauges.hunger.x) + "%",
      this.translate.x + 350 * scale,
      this.translate.y + 0 * scale
    );
    ctx.fillText(
      Math.floor(200 * user.gauges.life.x) + "hp",
      this.translate.x - 80 * scale,
      this.translate.y + 35 * scale
    );
    ctx.fillText(
      Math.floor(11 - (Date.now() - TimerTools.HPTimer) / 1e3) + "s",
      this.translate.x + 216 * scale,
      this.translate.y + 35 * scale
    );
    ctx.fillText(
      Math.floor(6 - (Date.now() - TimerTools.GaugeTimer) / 1e3) + "s",
      this.translate.x + 460 * scale,
      this.translate.y + 35 * scale
    );
    ctx.restore();
    ctx.restore();
  }

  user.gauges.cold.x > 0.99 &&
    (user.gauges.warm.x < 0.35 &&
      ((ctx.fillStyle = "#6C4036"),
      (ctx.globalAlpha = user.gauges.warn_warm.v),
      ctx.fillRect(
        this.translate.x + 517 * scale,
        this.translate.y + 17 * scale,
        178 * scale,
        18 * scale
      ),
      (ctx.globalAlpha = 1)),
    (ctx.fillStyle = "#9C4036"),
    ctx.fillRect(
      this.translate.x + 517 * scale,
      this.translate.y + 17 * scale,
      (1 - user.gauges.warm.x) * 178 * scale,
      18 * scale
    ));
  user.gauges.thirst.x < 0.35 &&
    ((ctx.fillStyle = "#001A57"),
    (ctx.globalAlpha = user.gauges.warn_thirst.v),
    ctx.fillRect(
      this.translate.x + 757 * scale,
      this.translate.y + 17 * scale,
      178 * scale,
      18 * scale
    ),
    (ctx.globalAlpha = 1));
  ctx.fillStyle = "#074A87";
  ctx.fillRect(
    this.translate.x + 757 * scale,
    this.translate.y + 17 * scale,
    user.gauges.thirst.x * 178 * scale,
    18 * scale
  );
  scale = e;
  ctxDrawImage(ctx, this.img, this.translate.x, this.translate.y);
  this.y = this.translate.y + t;
  ctx.restore();
  if (user.gauges.oxygen.x < 0.99) {
    var _0x35faf7 = Math.floor(canw2 - sprite[SPRITE.OXYGEN].width / 2);
    t += this.translate.y - sprite[SPRITE.OXYGEN].height - 5 * scale;
    ctx.fillStyle = "#BBE8EF";
    ctx.fillRect(
      _0x35faf7 + 5,
      t + 5 * scale,
      588 * scale * user.gauges.oxygen.x,
      10 * scale
    );
    user.gauges.oxygen.x < 0.35 &&
      ((ctx.fillStyle = "#9BA8AF"),
      (ctx.globalAlpha = user.gauges.warn_oxygen.v),
      ctx.fillRect(_0x35faf7 + 5, t + 5, 588 * scale, 10 * scale),
      (ctx.globalAlpha = 1));
    ctxDrawImage(ctx, sprite[SPRITE.OXYGEN], _0x35faf7, t);
    this.y = t;
  }
}
function draw_door(_0x2ae201) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x234046 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x8059c7 = Math.cos(this.hit.angle - this.angle) * _0x234046,
      _0x4bc3fa = Math.sin(this.hit.angle - this.angle) * _0x234046;
  } else {
    var _0x8059c7 = 0,
      _0x4bc3fa = 0;
  }
  var _0x1ea7cb = sprite[_0x2ae201][world.time];
  w = -_0x1ea7cb.width;
  h = -_0x1ea7cb.height;
  ctxDrawImage(ctx, _0x1ea7cb, -w / 2 + _0x8059c7, -h / 2 + _0x4bc3fa, w, h);
  ctx.restore();
}
function draw_chest() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x340c52 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x35215a = Math.cos(this.hit.angle - this.angle) * _0x340c52,
      _0x417c46 = Math.sin(this.hit.angle - this.angle) * _0x340c52;
  } else {
    var _0x35215a = 0,
      _0x417c46 = 0;
  }
  img = sprite[SPRITE.CHEST][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x35215a, -h / 2 + _0x417c46, w, h);
  this.lock &&
    ((img = sprite[SPRITE.LOCK][world.time]),
    (w = -img.width),
    (h = -img.height),
    ctxDrawImage(
      ctx,
      img,
      -w / 2 + _0x35215a - 1 * scale,
      -h / 2 + _0x417c46,
      w,
      h
    ));
  ctx.restore();
}
function draw_thornbush_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.THORNBUSH_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_garlic_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.GARLIC_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_pumpkin_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.PUMPKIN_SEED_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_aloe_vera_mob() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.ALOE_VERA][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_wheat_seed() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WHEAT_MOB][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_life_small(_0x2c1a44) {
  var _0x2c1a44 = _0x2c1a44 / 100;
  if (_0x2c1a44 > 0.8) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1a9d47 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x259112 = Math.cos(this.hit.angle - this.angle) * _0x1a9d47,
      _0x3d5863 = Math.sin(this.hit.angle - this.angle) * _0x1a9d47;
  } else {
    var _0x259112 = 0,
      _0x3d5863 = 0;
  }
  ctx.globalAlpha = 0.5;
  circle_angle(ctx, _0x259112, _0x3d5863, 18 * scale, _0x2c1a44);
  fill_path(ctx, null, "#000000", 18 * scale);
  ctx.globalAlpha = 1;
  circle_angle(ctx, _0x259112, _0x3d5863, 18 * scale, _0x2c1a44);
  fill_path(ctx, null, SPRITE.BROWN_LIFE[world.time], 6 * scale);
  ctx.restore();
}
function draw_life(_0x1d8065) {
  var _0x1d8065 = _0x1d8065 / 100;
  if (_0x1d8065 > 0.95) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x323825 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x46f9aa = Math.cos(this.hit.angle - this.angle) * _0x323825,
      _0x288cab = Math.sin(this.hit.angle - this.angle) * _0x323825;
  } else {
    var _0x46f9aa = 0,
      _0x288cab = 0;
  }
  ctx.globalAlpha = 0.5;
  circle_angle(ctx, _0x46f9aa, _0x288cab, 28 * scale, _0x1d8065);
  fill_path(ctx, null, "#000000", 18 * scale);
  ctx.globalAlpha = 1;
  circle_angle(ctx, _0x46f9aa, _0x288cab, 28 * scale, _0x1d8065);
  fill_path(ctx, null, SPRITE.CRAFT_LOADING[world.time], 6 * scale);
  ctx.restore();
}
function draw_roof(_0x21b05d) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x520648 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x2dfa12 = Math.cos(this.hit.angle - this.angle) * _0x520648,
      _0x3d45f3 = Math.sin(this.hit.angle - this.angle) * _0x520648;
  } else {
    var _0x2dfa12 = 0,
      _0x3d45f3 = 0;
  }
  var _0xac7ee5 = sprite[SPRITE.ROOFS].length;
  img = sprite[SPRITE.ROOFS][(this.j + (this.i % 2)) % _0xac7ee5][world.time];
  w = -img.width;
  h = -img.height;
  var _0x1623b3 = world.fast_units[user.uid];
  if (_0x1623b3 && (user.id === this.pid || user.in_team(this.pid))) {
    if (Utils.dist(this, _0x1623b3) < 550) {
      this.opacity = Math.max(this.opacity - delta, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + delta, 1);
    }
  } else {
    if (_0x1623b3 && Utils.dist(this, world.fast_units[user.uid]) < 150) {
      this.opacity = Math.max(this.opacity - delta, 0.3);
    } else {
      this.opacity = Math.min(this.opacity + delta, 1);
    }
  }
  var _0x811feb = ctx.globalAlpha;
  ctx.globalAlpha *= this.opacity;
  ctxDrawImage(ctx, img, -w / 2 + _0x2dfa12, -h / 2 + _0x3d45f3, w, h);
  ctx.globalAlpha = _0x811feb;
  ctx.restore();
}
function draw_garland(_0x390a67) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4c6ee7 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x46cf32 = Math.cos(this.hit.angle - this.angle) * _0x4c6ee7,
      _0x191515 = Math.sin(this.hit.angle - this.angle) * _0x4c6ee7;
  } else {
    var _0x46cf32 = 0,
      _0x191515 = 0;
  }
  if (this.halo.update()) {
    this.color += 0.2 + Math.random() * 0.3;
  }
  img =
    sprite[SPRITE.GARLANDS][Math.floor(this.id + this.color) % 5][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2 + _0x46cf32, -h / 2 + _0x191515, w, h);
  ctx.restore();
}
function draw_bed(_0x5258b7) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x93cf0b = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x404533 = Math.cos(this.hit.angle - this.angle) * _0x93cf0b,
      _0x5ca324 = Math.sin(this.hit.angle - this.angle) * _0x93cf0b;
  } else {
    var _0x404533 = 0,
      _0x5ca324 = 0;
  }
  if (_0x5258b7 === SPRITE.BED_TOP && !world.transition) {
    var _0x3fb23c = 0,
      _0x55c8e7 = world.units[ITEMS.PLAYERS];
    for (var _0x464f8c = 0; _0x464f8c < _0x55c8e7.length; _0x464f8c++) {
      var _0x2c2e40 = Utils.dist(_0x55c8e7[_0x464f8c], this);
      if (_0x2c2e40 < 140 && _0x2c2e40 > 35) {
        _0x3fb23c = 0;
        break;
      } else {
        if (_0x2c2e40 <= 35) {
          _0x3fb23c = 1;
        }
      }
    }
    if (_0x3fb23c === 0) {
      this.opacity = Math.max(0.5, this.opacity - delta / 1.5);
    } else {
      this.opacity = Math.min(1, this.opacity + delta / 1.5);
    }
    ctx.globalAlpha = this.opacity;
  }
  img = sprite[_0x5258b7][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x404533, -h / 2 + _0x5ca324, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_item(_0x25c39b) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x500dbd = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x4faa2d = Math.cos(this.hit.angle - this.angle) * _0x500dbd,
      _0x53e770 = Math.sin(this.hit.angle - this.angle) * _0x500dbd;
  } else {
    var _0x4faa2d = 0,
      _0x53e770 = 0;
  }
  img = sprite[_0x25c39b][world.time];
  w = -img.width;
  h = -img.height;
  ctxDrawImage(ctx, img, -w / 2 + _0x4faa2d, -h / 2 + _0x53e770, w, h);
  ctx.restore();
}
var __wave = 0;
function draw_river_tile(e, t, i, r, a, o, n, s, _) {
  if (s === undefined) s = 0;
  for (var T = e; T <= t; T++) {
    for (var E = i; E <= r; E++) {
      var d = MAP.tiles[T][E];
      if (d === undefined || d[o] === undefined) continue;
      d = d[o];
      var I = sprite[a][world.time][d.river];
      ctxDrawImage(
        ctx,
        I,
        user.cam.x + d.x - I.width / (4 * _scale_object),
        user.cam.y + d.y - I.height / (4 * _scale_object),
        I.width / (2 * _scale_object),
        I.height / (2 * _scale_object)
      );
      if (ui.quality) {
        var l =
          ((1103515245 * (T * 1000 + E) + 12345) % 2147483648) / 2147483648;
        if (l < 0.2) {
          l = Math.floor(
            sprite[SPRITE.RIVER_DECO][world.time][d.river].length * (l * 5)
          );
          var I = sprite[SPRITE.RIVER_DECO][world.time][d.river][l];
          ctxDrawImage(
            ctx,
            I,
            user.cam.x + d.x - I.width / (4 * _scale_object),
            user.cam.y + d.y - I.height / (4 * _scale_object),
            I.width / (2 * _scale_object),
            I.height / (2 * _scale_object)
          );
        } else {
          if (d.current !== 0) {
            var I = sprite[SPRITE.RIVER_WAVE][world.time];
            var _0x1b8822 = (__wave + (T % 2) * 30) % 60;
            ctx.globalAlpha =
              _0x1b8822 < 30 ? _0x1b8822 / 30 : 1 - (_0x1b8822 - 30) / 30;
            ctxDrawImage(
              ctx,
              I,
              user.cam.x + d.x - I.width / (4 * _scale_object),
              user.cam.y +
                d.y -
                I.height / (4 * _scale_object) -
                30 +
                _0x1b8822,
              I.width / (2 * _scale_object),
              I.height / (2 * _scale_object)
            );
            ctx.globalAlpha = 1;
          }
        }
      }
    }
  }
}
function draw_sand_worm_ground() {
  if ((this.info & 1) === 1) {
    this.dig = Math.min(this.dig + delta, 2.2);
  } else {
    this.dig = Math.max(this.dig - delta, 0);
    this.groundTimer += delta;
    if (this.groundTimer > 0.1) {
      this.groundTimer = 0;
      var _0x2367c8 = {
        x: this.x + Math.random() * 60 - 30,
        y: this.y + Math.random() * 60 - 30,
        a: 0,
        r: Math.random() * 30 + 30,
      };
      this.ground.push(_0x2367c8);
    }
  }
  for (var _0x42eae5 = 0; _0x42eae5 < this.ground.length; _0x42eae5++) {
    var _0x2367c8 = this.ground[_0x42eae5];
    ctx.save();
    ctx.translate(user.cam.x + _0x2367c8.x, user.cam.y + _0x2367c8.y);
    _0x2367c8.a = Math.min(1, _0x2367c8.a + delta / 2);
    var _0x3b4d30 = _0x2367c8.a;
    if (_0x3b4d30 < 0.2) {
      _0x3b4d30 *= 5;
    } else {
      if (_0x3b4d30 > 0.8) {
        _0x3b4d30 = (1 - _0x3b4d30) * 5;
      } else {
        _0x3b4d30 = 1;
      }
    }
    ctx.globalAlpha = _0x3b4d30 * 0.8;
    circle(ctx, 0, 0, _0x2367c8.r);
    fill_path(ctx, SPRITE.SAND_WORM_GROUND[world.time]);
    ctx.restore();
    _0x2367c8.a === 1 && (this.ground.splice(_0x42eae5, 1), _0x42eae5--);
  }
}
function draw_sand_worm() {
  var _0x2c06d6 = undefined;
  var _0x1a19c6 = undefined;
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  this.rotate.update();
  if (this.dig >= 0.1 && this.dig <= 1.1) {
    var _0x5bd07b = Math.max(0, Math.min(1, this.dig - 0.1));
    if (_0x5bd07b < 0.2) {
      _0x5bd07b *= 5;
    } else {
      if (_0x5bd07b > 0.8) {
        _0x5bd07b = (1 - _0x5bd07b) * 5;
      } else {
        _0x5bd07b = 1;
      }
    }
    var _0x2c06d6 = sprite[SPRITE.SAND_WORM1][world.time];
    w = -_0x2c06d6.width * this.breath.v;
    h = -_0x2c06d6.height * this.breath.v;
    ctx.globalAlpha = _0x5bd07b;
    ctxDrawImage(ctx, _0x2c06d6, -w / 4, -h / 4, w / 2, h / 2);
    var _0x1a19c6 = sprite[SPRITE.HURT_SAND_WORM1];
  }
  if (this.dig >= 0.9) {
    var _0x5bd07b = Math.max(0, Math.min(1, this.dig - 0.9));
    if (_0x5bd07b < 0.2) {
      _0x5bd07b *= 5;
    } else {
      _0x5bd07b = 1;
    }
    var _0x2c06d6 = sprite[SPRITE.SAND_WORM2][world.time];
    w = -_0x2c06d6.width * this.breath.v;
    h = -_0x2c06d6.height * this.breath.v;
    ctx.globalAlpha = _0x5bd07b;
    ctxDrawImage(ctx, _0x2c06d6, -w / 4, -h / 4, w / 2, h / 2);
    var _0x1a19c6 = sprite[SPRITE.HURT_SAND_WORM2];
  }
  if (this.action & STATE.HURT && _0x1a19c6 !== undefined) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * _0x5bd07b;
    w = -_0x1a19c6.width * this.breath.v;
    h = -_0x1a19c6.height * this.breath.v;
    ctxDrawImage(ctx, _0x1a19c6, -w / 4, -h / 4, w / 2, h / 2);
  }
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_vulture() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var _0x3b09db = Utils.dist(this, this.r);
  if (_0x3b09db > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (_0x3b09db < 350) {
    this["_alpha"] = Math.max(0, this["_alpha"] - delta * 2.2);
  } else {
    this["_alpha"] = Math.min(1, this["_alpha"] + delta * 2.2);
  }
  _0x38e48a = sprite[SPRITE.VULTURE_GROUND_ATTACK][world.time];
  w = -_0x38e48a.width * this.breath.v * this.scale;
  h = -_0x38e48a.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this["_alpha"];
  ctxDrawImage(ctx, _0x38e48a, -w / 4, -h / 4, w / 2, h / 2);
  _0x38e48a = sprite[SPRITE.VULTURE_ATTACK][world.time];
  w = -_0x38e48a.width * this.breath.v * this.scale;
  h = -_0x38e48a.height * this.breath.v * this.scale;
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(ctx, _0x38e48a, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this["_alpha"]);
    var _0x38e48a = sprite[SPRITE.HURT_VULTURE_GROUND];
    w = -_0x38e48a.width * this.breath.v * this.scale;
    h = -_0x38e48a.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x38e48a, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x38e48a = sprite[SPRITE.HURT_VULTURE];
    w = -_0x38e48a.width * this.breath.v * this.scale;
    h = -_0x38e48a.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x38e48a, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  _0x38e48a = sprite[SPRITE.VULTURE_WING_LEFT_ATTACK][world.time];
  w = -_0x38e48a.width * this.breath.v * this.scale;
  h = -_0x38e48a.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 80 * scale);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(
    ctx,
    _0x38e48a,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x38e48a = sprite[SPRITE.HURT_VULTURE_WING_LEFT];
    ctxDrawImage(
      ctx,
      _0x38e48a,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0x38e48a = sprite[SPRITE.VULTURE_WING_RIGHT_ATTACK][world.time];
  ctx.save();
  ctx.translate(40 * scale, 80 * scale);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(
    ctx,
    _0x38e48a,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x38e48a = sprite[SPRITE.HURT_VULTURE_WING_RIGHT];
    ctxDrawImage(
      ctx,
      _0x38e48a,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_hawk() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  var _0x384233 = Utils.dist(this, this.r);
  if (_0x384233 > 350) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (_0x384233 < 350) {
    this["_alpha"] = Math.max(0, this["_alpha"] - delta * 2.2);
  } else {
    this["_alpha"] = Math.min(1, this["_alpha"] + delta * 2.2);
  }
  if ((this.info & 1) === 0) {
    _0x1a1005 = sprite[SPRITE.HAWK_GROUND][world.time];
  } else {
    _0x1a1005 = sprite[SPRITE.HAWK_GROUND_ATTACK][world.time];
  }
  w = -_0x1a1005.width * this.breath.v * this.scale;
  h = -_0x1a1005.height * this.breath.v * this.scale;
  ctx.globalAlpha = 1 - this["_alpha"];
  ctxDrawImage(ctx, _0x1a1005, -w / 4, -h / 4, w / 2, h / 2);
  if ((this.info & 1) === 0) {
    _0x1a1005 = sprite[SPRITE.HAWK][world.time];
  } else {
    _0x1a1005 = sprite[SPRITE.HAWK_ATTACK][world.time];
  }
  w = -_0x1a1005.width * this.breath.v * this.scale;
  h = -_0x1a1005.height * this.breath.v * this.scale;
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(ctx, _0x1a1005, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = (0.6 - this.hit.v) * (1 - this["_alpha"]);
    var _0x1a1005 = sprite[SPRITE.HURT_HAWK_GROUND];
    w = -_0x1a1005.width * this.breath.v * this.scale;
    h = -_0x1a1005.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x1a1005, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x1a1005 = sprite[SPRITE.HURT_HAWK];
    w = -_0x1a1005.width * this.breath.v * this.scale;
    h = -_0x1a1005.height * this.breath.v * this.scale;
    ctxDrawImage(ctx, _0x1a1005, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if ((this.info & 1) === 0) {
    _0x1a1005 = sprite[SPRITE.HAWK_WING_LEFT][world.time];
  } else {
    _0x1a1005 = sprite[SPRITE.HAWK_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x1a1005.width * this.breath.v * this.scale;
  h = -_0x1a1005.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-20 * scale, 0 * scale);
  ctx.rotate(this.rotate.v);
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(
    ctx,
    _0x1a1005,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x1a1005 = sprite[SPRITE.HURT_HAWK_WING_LEFT];
    ctxDrawImage(
      ctx,
      _0x1a1005,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if ((this.info & 1) === 0) {
    _0x1a1005 = sprite[SPRITE.HAWK_WING_RIGHT][world.time];
  } else {
    _0x1a1005 = sprite[SPRITE.HAWK_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(20 * scale, 0 * scale);
  ctx.rotate(-this.rotate.v);
  ctx.globalAlpha = this["_alpha"];
  ctxDrawImage(
    ctx,
    _0x1a1005,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = (0.6 - this.hit.v) * this["_alpha"];
    var _0x1a1005 = sprite[SPRITE.HURT_HAWK_WING_RIGHT];
    ctxDrawImage(
      ctx,
      _0x1a1005,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.globalAlpha = 1;
  ctx.restore();
  ctx.restore();
}
function draw_baby_lava() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    _0x52687c = sprite[SPRITE.BABY_LAVA][world.time];
  } else {
    _0x52687c = sprite[SPRITE.BABY_LAVA_ATTACK][world.time];
  }
  w = -_0x52687c.width * this.breath.v * this.scale;
  h = -_0x52687c.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x52687c, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x52687c = sprite[SPRITE.HURT_BABY_LAVA];
    ctxDrawImage(ctx, _0x52687c, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    _0x52687c = sprite[SPRITE.BABY_LAVA_WING_LEFT][world.time];
  } else {
    _0x52687c = sprite[SPRITE.BABY_LAVA_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x52687c.width * this.breath.v * this.scale;
  h = -_0x52687c.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 10 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x52687c,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x52687c = sprite[SPRITE.HURT_BABY_LAVA_WING_LEFT];
    ctxDrawImage(
      ctx,
      _0x52687c,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    _0x52687c = sprite[SPRITE.BABY_LAVA_WING_RIGHT][world.time];
  } else {
    _0x52687c = sprite[SPRITE.BABY_LAVA_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(40 * scale, 10 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x52687c,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x52687c = sprite[SPRITE.HURT_BABY_LAVA_WING_RIGHT];
    ctxDrawImage(
      ctx,
      _0x52687c,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_baby_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  if (this.info === 0) {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON][world.time];
  } else {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON_ATTACK][world.time];
  }
  w = -_0x3e1a01.width * this.breath.v * this.scale;
  h = -_0x3e1a01.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x3e1a01, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3e1a01 = sprite[SPRITE.HURT_BABY_DRAGON];
    ctxDrawImage(ctx, _0x3e1a01, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  if (this.info === 0) {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON_WING_LEFT][world.time];
  } else {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON_WING_LEFT_ATTACK][world.time];
  }
  w = -_0x3e1a01.width * this.breath.v * this.scale;
  h = -_0x3e1a01.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-40 * scale, 10 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x3e1a01,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3e1a01 = sprite[SPRITE.HURT_BABY_DRAGON_WING_LEFT];
    ctxDrawImage(
      ctx,
      _0x3e1a01,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  if (this.info === 0) {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON_WING_RIGHT][world.time];
  } else {
    _0x3e1a01 = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_ATTACK][world.time];
  }
  ctx.save();
  ctx.translate(40 * scale, 10 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x3e1a01,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3e1a01 = sprite[SPRITE.HURT_BABY_DRAGON_WING_RIGHT];
    ctxDrawImage(
      ctx,
      _0x3e1a01,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_lava_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  _0x44124d = sprite[SPRITE.LAVA_DRAGON][world.time];
  w = -_0x44124d.width * this.breath.v * this.scale;
  h = -_0x44124d.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x44124d, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x44124d = sprite[SPRITE.HURT_LAVA_DRAGON];
    ctxDrawImage(ctx, _0x44124d, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  _0x44124d = sprite[SPRITE.LAVA_WING_LEFT][world.time];
  w = -_0x44124d.width * this.breath.v * this.scale;
  h = -_0x44124d.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-60 * scale, 20 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x44124d,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x44124d = sprite[SPRITE.HURT_LAVA_WING_LEFT];
    ctxDrawImage(
      ctx,
      _0x44124d,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0x44124d = sprite[SPRITE.LAVA_WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(60 * scale, 20 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(
    ctx,
    _0x44124d,
    (-w * scale) / 4,
    (-h * scale) / 4,
    w / 2,
    h / 2
  );
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x44124d = sprite[SPRITE.HURT_LAVA_WING_RIGHT];
    ctxDrawImage(
      ctx,
      _0x44124d,
      (-w * scale) / 4,
      (-h * scale) / 4,
      w / 2,
      h / 2
    );
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_dragon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (Utils.dist(this, this.r) > 300) {
    this.scale = Math.min(this.scale + delta / 2, 1.8);
  } else {
    this.scale = Math.max(this.scale - delta, 1);
  }
  this.breath.update();
  this.rotate.update();
  _0x273eaa = sprite[SPRITE.DRAGON][world.time];
  w = -_0x273eaa.width * this.breath.v * this.scale;
  h = -_0x273eaa.height * this.breath.v * this.scale;
  ctxDrawImage(ctx, _0x273eaa, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x273eaa = sprite[SPRITE.HURT_DRAGON];
    ctxDrawImage(ctx, _0x273eaa, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  _0x273eaa = sprite[SPRITE.WING_LEFT][world.time];
  w = -_0x273eaa.width * this.breath.v * this.scale;
  h = -_0x273eaa.height * this.breath.v * this.scale;
  ctx.save();
  ctx.translate(-30 * scale, 70 * scale);
  ctx.rotate(this.rotate.v);
  ctxDrawImage(ctx, _0x273eaa, -10 * scale, -40 * scale, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x273eaa = sprite[SPRITE.HURT_WING_LEFT];
    ctxDrawImage(ctx, _0x273eaa, -10 * scale, -40 * scale, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  _0x273eaa = sprite[SPRITE.WING_RIGHT][world.time];
  ctx.save();
  ctx.translate(30 * scale, 70 * scale);
  ctx.rotate(-this.rotate.v);
  ctxDrawImage(ctx, _0x273eaa, 10 * scale - w, -40 * scale, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x273eaa = sprite[SPRITE.HURT_WING_RIGHT];
    ctxDrawImage(ctx, _0x273eaa, 10 * scale - w, -40 * scale, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.restore();
}
function draw_crate(_0xa72222, _0x288e1a) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  _0xa72222 === SPRITE.GIFT && ((_0xa72222 = SPRITE.CRATE), (this.info = 36));
  img = sprite[_0xa72222][this.info][world.time];
  w = -img.width / 2;
  h = -img.height / 2;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x3b6713 = get_image_effect(this.info, img, __EFFECT_BOX__);
    ctxDrawImage(ctx, _0x3b6713, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_2(_0x1eb364, _0x45ebef) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  _0x1e651c = sprite[_0x1eb364][world.time];
  w = -_0x1e651c.width;
  h = -_0x1e651c.height;
  ctxDrawImage(ctx, _0x1e651c, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x1e651c = sprite[_0x45ebef];
    ctxDrawImage(ctx, _0x1e651c, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_baby_mammoth() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x1ea2b1 = sprite[SPRITE.BABY_MAMMOTH][world.time];
  } else {
    _0x1ea2b1 = sprite[SPRITE.BABY_MAMMOTH_ATTACK][world.time];
  }
  w = -_0x1ea2b1.width * this.breath.v;
  h = -_0x1ea2b1.height * this.breath.v;
  ctxDrawImage(ctx, _0x1ea2b1, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x1ea2b1 = sprite[SPRITE.HURT_BABY_MAMMOTH];
    ctxDrawImage(ctx, _0x1ea2b1, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_boar() {
  this.breath.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x217f26 = sprite[SPRITE.BOAR][world.time];
  } else {
    _0x217f26 = sprite[SPRITE.BOAR_ATTACK][world.time];
  }
  w = -_0x217f26.width * this.breath.v;
  h = -_0x217f26.height * this.breath.v;
  ctxDrawImage(ctx, _0x217f26, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x217f26 = sprite[SPRITE.HURT_BOAR];
    ctxDrawImage(ctx, _0x217f26, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab_boss() {
  var _0x22e5f2 = Math.PI / 2;
  var _0x21edea = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS][world.time];
  } else {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS_ATTACK][world.time];
  }
  w = -_0x2938c9.width * this.breath.v;
  h = -_0x2938c9.height * this.breath.v;
  ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2938c9 = sprite[SPRITE.HURT_CRAB_BOSS];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2938c9 = sprite[SPRITE.HEAL_CRAB_BOSS];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x21edea);
  ctx.translate(100, 0);
  ctx.rotate(_0x22e5f2);
  if (this.info === 0) {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
  } else {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT_ATTACK][world.time];
  }
  w = -_0x2938c9.width * this.breathl.v;
  h = -_0x2938c9.height * this.breathl.v;
  ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2938c9 = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2938c9 = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_LEFT];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x22e5f2 + _0x21edea);
  ctx.translate(100, 0);
  ctx.rotate(_0x22e5f2);
  if (this.info === 0) {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
  } else {
    _0x2938c9 = sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -_0x2938c9.width * this.breathr.v;
  h = -_0x2938c9.height * this.breathr.v;
  ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2938c9 = sprite[SPRITE.HURT_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0x2938c9 = sprite[SPRITE.HEAL_CRAB_BOSS_CLAW_RIGHT];
    ctxDrawImage(ctx, _0x2938c9, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_crab() {
  var _0x405442 = Math.PI / 2;
  var _0x2d6612 = Math.PI / 4;
  this.breath.update();
  this.breathl.update();
  this.breathr.update();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.info === 0) {
    _0xa0b732 = sprite[SPRITE.CRAB][world.time];
  } else {
    _0xa0b732 = sprite[SPRITE.CRAB_ATTACK][world.time];
  }
  w = -_0xa0b732.width * this.breath.v;
  h = -_0xa0b732.height * this.breath.v;
  ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0xa0b732 = sprite[SPRITE.HURT_CRAB];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0xa0b732 = sprite[SPRITE.HEAL_CRAB];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x2d6612);
  ctx.translate(55, 0);
  ctx.rotate(_0x405442);
  if (this.info === 0) {
    _0xa0b732 = sprite[SPRITE.CRAB_CLAW_LEFT][world.time];
  } else {
    _0xa0b732 = sprite[SPRITE.CRAB_CLAW_LEFT_ATTACK][world.time];
  }
  w = -_0xa0b732.width * this.breathl.v;
  h = -_0xa0b732.height * this.breathl.v;
  ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0xa0b732 = sprite[SPRITE.HURT_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0xa0b732 = sprite[SPRITE.HEAL_CRAB_CLAW_LEFT];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle + _0x405442 + _0x2d6612);
  ctx.translate(55, 0);
  ctx.rotate(_0x405442);
  if (this.info === 0) {
    _0xa0b732 = sprite[SPRITE.CRAB_CLAW_RIGHT][world.time];
  } else {
    _0xa0b732 = sprite[SPRITE.CRAB_CLAW_RIGHT_ATTACK][world.time];
  }
  w = -_0xa0b732.width * this.breathr.v;
  h = -_0xa0b732.height * this.breathr.v;
  ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0xa0b732 = sprite[SPRITE.HURT_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    ctx.globalAlpha = 0.6 - this.heal.v;
    var _0xa0b732 = sprite[SPRITE.HEAL_CRAB_CLAW_RIGHT];
    ctxDrawImage(ctx, _0xa0b732, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_spell() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.born = Math.min(1, this.born + delta * 2);
  ctx.globalAlpha =
    Math.min(1, Math.max(0, Utils.dist(this, this.r) / 80)) * this.born;
  this.breath.update();
  img = sprite[SPRITE.SPELL][world.time][this.spell];
  this.spell < 2
    ? ((w = -img.width * this.breath.v), (h = -img.height * this.breath.v))
    : this.fly === 0
    ? ((w = -img.width), (h = -img.height))
    : ((w = -img.width * 1.35), (h = -img.height * 1.35));
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_simple_mobs(_0x390cbf, _0x1cc388) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  _0x2d535a = sprite[_0x390cbf][world.time];
  w = -_0x2d535a.width * this.breath.v;
  h = -_0x2d535a.height * this.breath.v;
  ctxDrawImage(ctx, _0x2d535a, -w / 2, -h / 2, w, h);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x2d535a = sprite[_0x1cc388];
    ctxDrawImage(ctx, _0x2d535a, -w / 2, -h / 2, w, h);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_simple_mobs_hd(_0x645ece, _0x3175e8) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  _0x115fab = sprite[_0x645ece][world.time];
  w = -_0x115fab.width * this.breath.v;
  h = -_0x115fab.height * this.breath.v;
  ctxDrawImage(ctx, _0x115fab, -w / 4, -h / 4, w / 2, h / 2);
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    var _0x115fab = sprite[_0x3175e8];
    ctxDrawImage(ctx, _0x115fab, -w / 4, -h / 4, w / 2, h / 2);
    ctx.globalAlpha = 1;
  }
  ctx.restore();
}
function draw_breath_2(_0x405ccb, _0x2c825a, _0x3572cf) {
  ctx.save();
  ctx.translate(user.cam.x + _0x2c825a, user.cam.y + _0x3572cf);
  ctx.rotate(this.angle);
  ctx.translate(this.x - _0x2c825a, this.y - _0x3572cf);
  this.breath.update();
  img = sprite[_0x405ccb][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_breath(_0x5333d7) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.breath.update();
  img = sprite[_0x5333d7][world.time];
  w = -img.width * this.breath.v;
  h = -img.height * this.breath.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_thornbush() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x3dcfd8 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x236611 = Math.cos(this.hit.angle - this.angle) * _0x3dcfd8,
      _0x2bc520 = Math.sin(this.hit.angle - this.angle) * _0x3dcfd8;
  } else {
    var _0x236611 = 0,
      _0x2bc520 = 0;
  }
  var _0xef70af = this.info & 15;
  if (this.info === 10 || _0xef70af === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x12e5c8 = sprite[SPRITE.PLANT_THORNBUSH_DRIED][world.time];
    } else {
      var _0x12e5c8 = sprite[SPRITE.PLANT_THORNBUSH][world.time];
    }
    var _0x20387c = -_0x12e5c8.width * this.ground.v;
    var _0x4a870d = -_0x12e5c8.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x12e5c8,
      -_0x20387c / 2 + _0x236611,
      -_0x4a870d / 2 + _0x2bc520,
      _0x20387c,
      _0x4a870d
    );
  } else {
    if (this.info & 16) {
      var _0x12e5c8 = sprite[SPRITE.DRIED_THORNBUSH][world.time];
    } else {
      var _0x12e5c8 = sprite[SPRITE.THORNBUSH][world.time];
    }
    ctx.translate(0, _0x12e5c8.height / 2);
    ctxDrawImage(
      ctx,
      _0x12e5c8,
      _0x236611 - _0x12e5c8.width / 2,
      -_0x12e5c8.height + _0x2bc520
    );
  }
  ctx.restore();
}
function draw_garlic() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2f7fc1 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x3272ce = Math.cos(this.hit.angle - this.angle) * _0x2f7fc1,
      _0x683d79 = Math.sin(this.hit.angle - this.angle) * _0x2f7fc1;
  } else {
    var _0x3272ce = 0,
      _0x683d79 = 0;
  }
  var _0x2282a2 = this.info & 15;
  if (this.info === 10 || _0x2282a2 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x3e06db = sprite[SPRITE.PLANT_GARLIC_DRIED][world.time];
    } else {
      var _0x3e06db = sprite[SPRITE.PLANT_GARLIC][world.time];
    }
    var _0x338276 = -_0x3e06db.width * this.ground.v;
    var _0x14c07e = -_0x3e06db.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x3e06db,
      -_0x338276 / 2 + _0x3272ce,
      -_0x14c07e / 2 + _0x683d79,
      _0x338276,
      _0x14c07e
    );
  } else {
    if (this.info & 16) {
      var _0x3e06db = sprite[SPRITE.DRIED_GARLIC][world.time];
    } else {
      var _0x3e06db = sprite[SPRITE.GARLIC][world.time];
    }
    ctx.translate(0, _0x3e06db.height / 2);
    ctxDrawImage(
      ctx,
      _0x3e06db,
      _0x3272ce - _0x3e06db.width / 2,
      -_0x3e06db.height + _0x683d79
    );
  }
  ctx.restore();
}
function draw_aloe_vera() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4605fd = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x5accb3 = Math.cos(this.hit.angle - this.angle) * _0x4605fd,
      _0x5badfe = Math.sin(this.hit.angle - this.angle) * _0x4605fd;
  } else {
    var _0x5accb3 = 0,
      _0x5badfe = 0;
  }
  var _0xe95252 = this.info & 15;
  if (this.info === 10 || _0xe95252 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x259c09 = sprite[SPRITE.PLANT_ALOE_VERA_DRIED][world.time];
    } else {
      var _0x259c09 = sprite[SPRITE.PLANT_ALOE_VERA][world.time];
    }
    var _0x195b65 = -_0x259c09.width * this.ground.v;
    var _0x4da47d = -_0x259c09.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x259c09,
      -_0x195b65 / 2 + _0x5accb3,
      -_0x4da47d / 2 + _0x5badfe,
      _0x195b65,
      _0x4da47d
    );
  } else {
    if (this.info & 16) {
      var _0x259c09 = sprite[SPRITE.DRIED_ALOE_VERA][world.time];
    } else {
      var _0x259c09 = sprite[SPRITE.ALOE_VERA_GROWN][world.time];
    }
    ctx.translate(0, _0x259c09.height / 2);
    ctxDrawImage(
      ctx,
      _0x259c09,
      _0x5accb3 - _0x259c09.width / 2,
      -_0x259c09.height + _0x5badfe
    );
  }
  ctx.restore();
}
function draw_watermelon() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x49a71d = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x1746fc = Math.cos(this.hit.angle - this.angle) * _0x49a71d,
      _0x226a45 = Math.sin(this.hit.angle - this.angle) * _0x49a71d;
  } else {
    var _0x1746fc = 0,
      _0x226a45 = 0;
  }
  var _0x50cd4c = this.info & 15;
  if (this.info === 10 || _0x50cd4c === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x2e1949 = sprite[SPRITE.PLANT_WATERMELON_DRIED][world.time];
    } else {
      var _0x2e1949 = sprite[SPRITE.PLANT_WATERMELON][world.time];
    }
    var _0x28308b = -_0x2e1949.width * this.ground.v;
    var _0x1e644 = -_0x2e1949.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x2e1949,
      -_0x28308b / 2 + _0x1746fc,
      -_0x1e644 / 2 + _0x226a45,
      _0x28308b,
      _0x1e644
    );
  } else {
    if (this.info & 16) {
      var _0x2e1949 = sprite[SPRITE.DRIED_WATERMELON][world.time];
    } else {
      var _0x2e1949 = sprite[SPRITE.WATERMELON][world.time];
    }
    ctx.translate(0, _0x2e1949.height / 2);
    ctxDrawImage(
      ctx,
      _0x2e1949,
      _0x1746fc - _0x2e1949.width / 2,
      -_0x2e1949.height + _0x226a45
    );
  }
  ctx.restore();
}
function draw_carrot() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x3d244 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x363969 = Math.cos(this.hit.angle - this.angle) * _0x3d244,
      _0x10ab4e = Math.sin(this.hit.angle - this.angle) * _0x3d244;
  } else {
    var _0x363969 = 0,
      _0x10ab4e = 0;
  }
  var _0x5219a2 = this.info & 15;
  if (this.info === 10 || _0x5219a2 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x4c24ae = sprite[SPRITE.PLANT_CARROT_DRIED][world.time];
    } else {
      var _0x4c24ae = sprite[SPRITE.PLANT_CARROT][world.time];
    }
    var _0x1f8bc7 = -_0x4c24ae.width * this.ground.v;
    var _0x3e690e = -_0x4c24ae.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x4c24ae,
      -_0x1f8bc7 / 2 + _0x363969,
      -_0x3e690e / 2 + _0x10ab4e,
      _0x1f8bc7,
      _0x3e690e
    );
  } else {
    if (this.info & 16) {
      var _0x4c24ae = sprite[SPRITE.DRIED_CARROT][world.time];
    } else {
      var _0x4c24ae = sprite[SPRITE.CARROT][world.time];
    }
    ctx.translate(0, _0x4c24ae.height / 2);
    ctxDrawImage(
      ctx,
      _0x4c24ae,
      _0x363969 - _0x4c24ae.width / 2,
      -_0x4c24ae.height + _0x10ab4e
    );
  }
  ctx.restore();
}
function draw_pumpkin() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x28dca8 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x1844d0 = Math.cos(this.hit.angle - this.angle) * _0x28dca8,
      _0x4f4467 = Math.sin(this.hit.angle - this.angle) * _0x28dca8;
  } else {
    var _0x1844d0 = 0,
      _0x4f4467 = 0;
  }
  var _0x2201b0 = this.info & 15;
  if (this.info === 10 || _0x2201b0 === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x393be8 = sprite[SPRITE.PLANT_PUMPKIN_DRIED][world.time];
    } else {
      var _0x393be8 = sprite[SPRITE.PLANT_PUMPKIN][world.time];
    }
    var _0x5c056a = -_0x393be8.width * this.ground.v;
    var _0x37bf23 = -_0x393be8.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x393be8,
      -_0x5c056a / 2 + _0x1844d0,
      -_0x37bf23 / 2 + _0x4f4467,
      _0x5c056a,
      _0x37bf23
    );
  } else {
    if (this.info & 16) {
      var _0x393be8 = sprite[SPRITE.DRIED_PUMPKIN][world.time];
    } else {
      var _0x393be8 = sprite[SPRITE.PUMPKIN][world.time];
    }
    ctx.translate(0, _0x393be8.height / 2);
    ctxDrawImage(
      ctx,
      _0x393be8,
      _0x1844d0 - _0x393be8.width / 2,
      -_0x393be8.height + _0x4f4467
    );
  }
  ctx.restore();
}
function draw_wheat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2154f5 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x25f01a = Math.cos(this.hit.angle - this.angle) * _0x2154f5,
      _0x27564b = Math.sin(this.hit.angle - this.angle) * _0x2154f5;
  } else {
    var _0x25f01a = 0,
      _0x27564b = 0;
  }
  var _0x439cee = this.info & 15;
  if (this.info === 10 || _0x439cee === 0) {
    ctx.rotate(this.angle);
    this.ground.update();
    if (this.info & 16) {
      var _0x341aa6 = sprite[SPRITE.WHEAT_SEED_DRIED][world.time];
    } else {
      var _0x341aa6 = sprite[SPRITE.WHEAT_SEED][world.time];
    }
    var _0x2b4afc = -_0x341aa6.width * this.ground.v;
    var _0xdae838 = -_0x341aa6.height * this.ground.v;
    ctxDrawImage(
      ctx,
      _0x341aa6,
      -_0x2b4afc / 2 + _0x25f01a,
      -_0xdae838 / 2 + _0x27564b,
      _0x2b4afc,
      _0xdae838
    );
  } else {
    this.wind.update();
    if (this.info & 16) {
      var _0x341aa6 = sprite[SPRITE.DRIED_WHEAT][world.time];
    } else {
      var _0x341aa6 = sprite[SPRITE.WILD_WHEAT][world.time];
    }
    ctx.translate(0, _0x341aa6.height / 2);
    ctx.rotate(this.wind.v);
    ctxDrawImage(
      ctx,
      _0x341aa6,
      _0x25f01a - _0x341aa6.width / 2,
      -_0x341aa6.height + _0x27564b
    );
  }
  ctx.restore();
}
function draw_seed() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1cc0e9 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0xd229b2 = Math.cos(this.hit.angle - this.angle) * _0x1cc0e9,
      _0x5185aa = Math.sin(this.hit.angle - this.angle) * _0x1cc0e9;
  } else {
    var _0xd229b2 = 0,
      _0x5185aa = 0;
  }
  this.ground.update();
  var _0x4b95fd = sprite[SPRITE.PLANT_SEED][world.time];
  var _0x4060d4 = -_0x4b95fd.width * this.ground.v;
  var _0x189673 = -_0x4b95fd.height * this.ground.v;
  ctxDrawImage(
    ctx,
    _0x4b95fd,
    -_0x4060d4 / 2 + _0xd229b2,
    -_0x189673 / 2 + _0x5185aa,
    _0x4060d4,
    _0x189673
  );
  ctx.restore();
}
function draw_plant() {
  if (this.info === 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x14d7e3 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0xc328f1 = Math.cos(this.hit.angle - this.angle) * _0x14d7e3,
      _0x3386ff = Math.sin(this.hit.angle - this.angle) * _0x14d7e3;
  } else {
    var _0xc328f1 = 0,
      _0x3386ff = 0;
  }
  if (this.info & 16) {
    var _0x5951e1 = sprite[SPRITE.DRIED_PLANT][world.time];
  } else {
    var _0x5951e1 = sprite[SPRITE.PLANT_MINI][world.time];
  }
  ctxDrawImage(
    ctx,
    _0x5951e1,
    -_0x5951e1.width / 2 + _0xc328f1,
    -_0x5951e1.width / 2 + _0x3386ff
  );
  ctx.restore();
  var _0x41fc4c = this.info & 15;
  for (var _0x427ba7 = 0; _0x427ba7 < _0x41fc4c; _0x427ba7++) {
    this.fruits[_0x427ba7].draw(SPRITE.FRUIT);
  }
}
function draw_tomato() {
  if (this.info < 10) {
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x182993 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x151e03 = Math.cos(this.hit.angle - this.angle) * _0x182993,
      _0x52d27a = Math.sin(this.hit.angle - this.angle) * _0x182993;
  } else {
    var _0x151e03 = 0,
      _0x52d27a = 0;
  }
  this.ground.update();
  var _0x5d75bf = sprite[SPRITE.PLANT_TOMATO][world.time];
  var _0x2b55b3 = -_0x5d75bf.width * this.ground.v;
  var _0x2f6a82 = -_0x5d75bf.height * this.ground.v;
  ctxDrawImage(
    ctx,
    _0x5d75bf,
    -_0x2b55b3 / 2 + _0x151e03,
    -_0x2f6a82 / 2 + _0x52d27a,
    _0x2b55b3,
    _0x2f6a82
  );
  ctx.restore();
}
function draw_tomato_fruit() {
  if (this.info === 10) {
    return;
  }
  var _0x35890d = this.info & 15;
  for (var _0x291891 = 0; _0x291891 < _0x35890d; _0x291891++) {
    this.fruits[_0x291891].draw(SPRITE.TOMATO, this.x, this.y);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x229824 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x400797 = Math.cos(this.hit.angle - this.angle) * _0x229824,
      _0x23f4d3 = Math.sin(this.hit.angle - this.angle) * _0x229824;
  } else {
    var _0x400797 = 0,
      _0x23f4d3 = 0;
  }
  if (this.info & 16) {
    var _0x262a2b = sprite[SPRITE.DRIED_TOMATO_MINI][world.time];
  } else {
    var _0x262a2b = sprite[SPRITE.TOMATO_MINI][world.time];
  }
  ctxDrawImage(
    ctx,
    _0x262a2b,
    -_0x262a2b.width / 2 + _0x400797,
    -_0x262a2b.width / 2 + _0x23f4d3
  );
  ctx.restore();
}
function draw_furnace() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x32488d = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x3494ea = Math.cos(this.hit.angle - this.angle) * _0x32488d,
      _0x3f18fa = Math.sin(this.hit.angle - this.angle) * _0x32488d;
  } else {
    var _0x3494ea = 0,
      _0x3f18fa = 0;
  }
  if (this.action == 2) {
    img = sprite[SPRITE.FURNACE_ON][world.time];
  } else {
    img = sprite[SPRITE.FURNACE_OFF][world.time];
  }
  ctxDrawImage(
    ctx,
    img,
    -img.width / 2 + _0x3494ea,
    -img.height / 2 + _0x3f18fa
  );
  ctx.restore();
}
function draw_furnace_ground() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = 0.3;
  var _0x44a4b8 = sprite[SPRITE.GROUND_FIRE][world.time];
  var _0xb7a028 = -_0x44a4b8.width * this.ground.v;
  var _0x53459c = -_0x44a4b8.height * this.ground.v;
  ctxDrawImage(
    ctx,
    _0x44a4b8,
    -_0xb7a028 / 2,
    -_0x53459c / 2,
    _0xb7a028,
    _0x53459c
  );
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_bread_oven_smog() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (
    this.info & 31 &&
    this.info & 992 &&
    (this.info & 31744) != 31744 &&
    (this.smog.length == 0 ||
      this.smog[this.smog.length - 1] <= SPRITE.SMOG_PUSH)
  ) {
    this.smog.push(SPRITE.SMOG);
  }
  for (var _0xf23581 = 0; _0xf23581 < this.smog.length; _0xf23581++) {
    this.smog[_0xf23581] = Math.max(
      0,
      this.smog[_0xf23581] - delta * SPRITE.SMOG_SPEED
    );
    ctx.globalAlpha = this.smog[_0xf23581] / 1.3;
    var _0x146c3a = (1 - this.smog[_0xf23581]) * 40;
    var _0x160ed7 = (1 - this.smog[_0xf23581]) * 35 + 10;
    circle(
      ctx,
      -68 * scale + Math.cos(-this.angle - Math.PI / 2) * _0x146c3a,
      -20 * scale + Math.sin(-this.angle - Math.PI / 2) * _0x146c3a,
      _0x160ed7
    );
    fill_path(ctx, "#333333");
  }
  ctx.globalAlpha = 1;
  if (this.smog.length > 0 && this.smog[0] === 0) {
    this.smog.shift();
  }
  ctx.restore();
}
function draw_fire_ground(_0x48478d) {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.ground.update();
  ctx.globalAlpha = 0.3;
  var _0x32ac09 = sprite[SPRITE.GROUND_FIRE][world.time];
  var _0x5e177b = -_0x32ac09.width * this.ground.v;
  var _0x5806c3 = -_0x32ac09.height * this.ground.v;
  ctxDrawImage(
    ctx,
    _0x32ac09,
    -_0x5e177b / 2,
    -_0x5806c3 / 2,
    _0x5e177b,
    _0x5806c3
  );
  ctx.globalAlpha = 1;
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x17050c = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x1aa83e = Math.cos(this.hit.angle - this.angle) * _0x17050c,
      _0x128381 = Math.sin(this.hit.angle - this.angle) * _0x17050c;
  } else {
    var _0x1aa83e = 0,
      _0x128381 = 0;
  }
  _0x32ac09 = sprite[_0x48478d][world.time];
  ctxDrawImage(
    ctx,
    _0x32ac09,
    -_0x32ac09.width / 2 + _0x1aa83e,
    -_0x32ac09.height / 2 + _0x128381
  );
  ctx.restore();
}
function draw_sign() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x12be4b = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x1b3b6e = Math.cos(this.hit.angle - this.angle) * _0x12be4b,
      _0x4df7a4 = Math.sin(this.hit.angle - this.angle) * _0x12be4b;
  } else {
    var _0x1b3b6e = 0,
      _0x4df7a4 = 0;
  }
  if (this.info === 0) {
    img = sprite[SPRITE.SIGN][world.time];
  } else {
    img = sprite[SPRITE.SYMBOLS][world.time][this.info - 1];
  }
  ctxDrawImage(
    ctx,
    img,
    -img.width / 2 + _0x1b3b6e,
    -img.height / 2 + _0x4df7a4
  );
  ctx.restore();
}
function draw_bread_oven() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x21e068 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x339df5 = Math.cos(this.hit.angle - this.angle) * _0x21e068,
      _0x105507 = Math.sin(this.hit.angle - this.angle) * _0x21e068;
  } else {
    var _0x339df5 = 0,
      _0x105507 = 0;
  }
  if (this.info & 31 && this.info & 992 && (this.info & 31744) != 31744) {
    _0x36f912 = sprite[SPRITE.BREAD_OVEN_ON][world.time];
    ctxDrawImage(
      ctx,
      _0x36f912,
      -_0x36f912.width / 2 + _0x339df5,
      -_0x36f912.height / 2 + _0x105507
    );
    this.up.update();
    var _0x36f912 = sprite[SPRITE.BREAD_LIGHT_UP][world.time];
    var _0x64cbec = -_0x36f912.width * this.up.v;
    var _0x1faf1b = -_0x36f912.height * this.up.v;
    ctxDrawImage(
      ctx,
      _0x36f912,
      -_0x64cbec / 2 + 1 * scale,
      -_0x1faf1b / 2 + 3 * scale,
      _0x64cbec,
      _0x1faf1b
    );
  } else {
    _0x36f912 = sprite[SPRITE.BREAD_OVEN_OFF][world.time];
    ctxDrawImage(
      ctx,
      _0x36f912,
      -_0x36f912.width / 2 + _0x339df5,
      -_0x36f912.height / 2 + _0x105507
    );
  }
  ctx.restore();
}
function draw_windmill_wings() {
  if (this.hit.update) {
    var _0x479ec2 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x46467c = Math.cos(this.hit.angle - this.angle) * _0x479ec2,
      _0x1e72c2 = Math.sin(this.hit.angle - this.angle) * _0x479ec2;
  } else {
    var _0x46467c = 0,
      _0x1e72c2 = 0;
  }
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 0.5) % (Math.PI * 2);
  }
  ctx.save();
  ctx.translate(
    user.cam.x + this.x + _0x46467c,
    user.cam.y + this.y + _0x1e72c2
  );
  ctx.save();
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.WINDMILL_WINGS][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.angl);
  img = sprite[SPRITE.WINDMILL_HEAD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_extractor_stone() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x1faf01 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x6b7ce5 = Math.cos(this.hit.angle - this.angle) * _0x1faf01,
      _0x16a482 = Math.sin(this.hit.angle - this.angle) * _0x1faf01;
  } else {
    var _0x6b7ce5 = 0,
      _0x16a482 = 0;
  }
  ctx.save();
  this.info & 255 &&
    (this.info & 65280) != 65280 &&
    ((_0x6b7ce5 += Math.random() * 2 - 1),
    (_0x16a482 += Math.random() * 2 - 1));
  ctx.translate(
    user.cam.x + this.x + _0x6b7ce5,
    user.cam.y + this.y + _0x16a482
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_STONE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_gold() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x46f4a0 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x466a1f = Math.cos(this.hit.angle - this.angle) * _0x46f4a0,
      _0x49f5d9 = Math.sin(this.hit.angle - this.angle) * _0x46f4a0;
  } else {
    var _0x466a1f = 0,
      _0x49f5d9 = 0;
  }
  ctx.save();
  this.info & 255 &&
    (this.info & 65280) != 65280 &&
    ((_0x466a1f += Math.random() * 2 - 1),
    (_0x49f5d9 += Math.random() * 2 - 1));
  ctx.translate(
    user.cam.x + this.x + _0x466a1f,
    user.cam.y + this.y + _0x49f5d9
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_GOLD][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_diamond() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0xa1319e = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x1e5d27 = Math.cos(this.hit.angle - this.angle) * _0xa1319e,
      _0x110b2a = Math.sin(this.hit.angle - this.angle) * _0xa1319e;
  } else {
    var _0x1e5d27 = 0,
      _0x110b2a = 0;
  }
  ctx.save();
  this.info & 255 &&
    (this.info & 65280) != 65280 &&
    ((_0x1e5d27 += Math.random() * 2 - 1),
    (_0x110b2a += Math.random() * 2 - 1));
  ctx.translate(
    user.cam.x + this.x + _0x1e5d27,
    user.cam.y + this.y + _0x110b2a
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_DIAMOND][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_amethyst() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x5e28a4 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x17e2ed = Math.cos(this.hit.angle - this.angle) * _0x5e28a4,
      _0x9d1499 = Math.sin(this.hit.angle - this.angle) * _0x5e28a4;
  } else {
    var _0x17e2ed = 0,
      _0x9d1499 = 0;
  }
  ctx.save();
  this.info & 255 &&
    (this.info & 65280) != 65280 &&
    ((_0x17e2ed += Math.random() * 2 - 1),
    (_0x9d1499 += Math.random() * 2 - 1));
  ctx.translate(
    user.cam.x + this.x + _0x17e2ed,
    user.cam.y + this.y + _0x9d1499
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_AMETHYST][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_extractor_reidite() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0xd7c63 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x316269 = Math.cos(this.hit.angle - this.angle) * _0xd7c63,
      _0x137d5f = Math.sin(this.hit.angle - this.angle) * _0xd7c63;
  } else {
    var _0x316269 = 0,
      _0x137d5f = 0;
  }
  ctx.save();
  this.info & 255 &&
    (this.info & 65280) != 65280 &&
    ((_0x316269 += Math.random() * 2 - 1),
    (_0x137d5f += Math.random() * 2 - 1));
  ctx.translate(
    user.cam.x + this.x + _0x316269,
    user.cam.y + this.y + _0x137d5f
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EXTRACTOR_MACHINE_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  if (this.info & 255 && (this.info & 65280) != 65280) {
    this.rotate = (this.rotate + delta * 3) % (Math.PI * 2);
  }
  ctx.rotate(this.rotate);
  img = sprite[SPRITE.EXTRACTOR_MACHINE0_REIDITE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_windmill_head() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x549d53 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x37b20d = Math.cos(this.hit.angle - this.angle) * _0x549d53,
      _0x3215e5 = Math.sin(this.hit.angle - this.angle) * _0x549d53;
  } else {
    var _0x37b20d = 0,
      _0x3215e5 = 0;
  }
  ctx.save();
  ctx.translate(
    user.cam.x + this.x + _0x37b20d,
    user.cam.y + this.y + _0x3215e5
  );
  ctx.rotate(this.angle);
  img = sprite[SPRITE.WINDMILL][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
}
function draw_emerald_machine() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x2ff173 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x58a54e = Math.cos(this.hit.angle - this.angle) * _0x2ff173,
      _0x52b1fd = Math.sin(this.hit.angle - this.angle) * _0x2ff173;
  } else {
    var _0x58a54e = 0,
      _0x52b1fd = 0;
  }
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(
    user.cam.x + this.x + _0x58a54e,
    user.cam.y + this.y + _0x52b1fd
  );
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.EMERALD_MACHINE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.EMERALD_MACHINE_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.EMERALD_MACHINE_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_resurrection() {
  if (this.hit.update) {
    if (this.hit.anim.update() && this.hit.anim.o == false) {
      this.hit.update = false;
    }
    var _0x4a9522 = (1 - this.hit.anim.v) * delta * 600 * scale,
      _0x378792 = Math.cos(this.hit.angle - this.angle) * _0x4a9522,
      _0x494b9f = Math.sin(this.hit.angle - this.angle) * _0x4a9522;
  } else {
    var _0x378792 = 0,
      _0x494b9f = 0;
  }
  this.rotate1 = (this.rotate1 + delta * 3) % (Math.PI * 2);
  this.rotate2 = (this.rotate2 - delta * 3) % (Math.PI * 2);
  ctx.save();
  ctx.translate(
    user.cam.x + this.x + _0x378792,
    user.cam.y + this.y + _0x494b9f
  );
  ctx.save();
  ctx.rotate(this.angle);
  img = sprite[SPRITE.RESURRECTION][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate1);
  img = sprite[SPRITE.RESURRECTION_ROTATE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.save();
  ctx.rotate(this.rotate2);
  img = sprite[SPRITE.RESURRECTION_HOLE][world.time];
  ctxDrawImage(ctx, img, -img.width / 2, -img.height / 2);
  ctx.restore();
  ctx.restore();
}
function draw_emerald_machine_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.EMERALD_MACHINE_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_resurrection_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.RESURRECTION_GROUND][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_furnace_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_fire_halo() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.angle);
  this.fire.update();
  img = sprite[SPRITE.FIRE][world.time];
  w = -img.width * this.fire.v;
  h = -img.height * this.fire.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  this.halo.update();
  img = sprite[SPRITE.HALO_FIRE][world.time];
  w = -img.width * this.halo.v;
  h = -img.height * this.halo.v;
  ctxDrawImage(ctx, img, -w / 2, -h / 2, w, h);
  ctx.restore();
}
function draw_player_effect(_0x58d191) {
  if (_0x58d191.right >= 0) {
    switch (_0x58d191.right) {
      case SPRITE.WATERING_CAN_FULL:
        ctx.save();
        var _0x4dd9cd = (-3 * _0x58d191.attack.v) / Math.PI;
        if (_0x58d191.attack.o) {
          var _0x542fd4 = -Math.PI / 3 - (Math.PI / 3 + _0x58d191.attack.v) / 3;
        } else {
          var _0x542fd4 = _0x58d191.attack.v;
        }
        ctx.rotate(_0x58d191.angle - Math.PI / 2 + _0x542fd4),
          (ctx.globalAlpha = _0x4dd9cd / 1.2),
          circle(ctx, -40 * scale, 90 * scale, 5 * scale),
          fill_path(ctx, "#0B6A84"),
          (ctx.globalAlpha = _0x4dd9cd / 1.2),
          circle(ctx, -52 * scale, 100 * scale, 8 * scale),
          fill_path(ctx, "#0B6A84"),
          (ctx.globalAlpha = _0x4dd9cd / 1.2),
          circle(ctx, -30 * scale, 95 * scale, 4 * scale),
          fill_path(ctx, "#0B6A84"),
          (ctx.globalAlpha = 1),
          ctx.restore();
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        if (_0x58d191.fly === 1) {
          break;
        }
        if (_0x58d191.dist_winter > 0) {
          var _0x1bb1f4 = SPRITE.ICE_SHOVEL_CO[world.time];
        } else {
          if (_0x58d191.dist_sand > 0 || _0x58d191.dist_desert > 0) {
            var _0x1bb1f4 = SPRITE.SAND_SHOVEL_CO[world.time];
          } else {
            var _0x1bb1f4 = SPRITE.GRD_SHOVEL_CO[world.time];
          }
        }
        var _0x4dd9cd = (-3 * _0x58d191.attack.v) / Math.PI;
        if (_0x58d191.attack.o) {
          var _0x542fd4 = Math.max(0.5 - _0x4dd9cd / 2 + 0.5, 0);
        } else {
          var _0x542fd4 = Math.max(_0x4dd9cd / 2, 0);
        }
        if (_0x542fd4 === 0) {
          _0x58d191.angle_init = _0x58d191.angle;
        }
        ctx.save(),
          ctx.rotate(_0x58d191.angle_init - Math.PI / 2),
          (ctx.globalAlpha = _0x4dd9cd);
        var _0x1c66ee = 25 * scale + _0x542fd4 * 25;
        circle(ctx, _0x1c66ee, 80 * scale, 15 * scale),
          fill_path(ctx, _0x1bb1f4),
          circle(ctx, -_0x1c66ee, 80 * scale, 15 * scale),
          fill_path(ctx, _0x1bb1f4),
          (ctx.globalAlpha = 1),
          ctx.restore();
        break;
    }
  }
}
function draw_player_right_stuff_after(_0x1ad10d, _0x2d0ead, _0x133382) {
  if (_0x1ad10d >= 0) {
    img = sprite[_0x1ad10d][world.time];
    switch (_0x1ad10d) {
      case SPRITE.WOOD_SHIELD:
      case SPRITE.STONE_SHIELD:
      case SPRITE.GOLD_SHIELD:
        draw_image_transition_hd(
          _0x1ad10d,
          img,
          -img.width / 4 - scale * (0 + _0x2d0ead),
          -img.height / 4 + scale * (_0x133382 + 35)
        );
        break;
      case SPRITE.DIAMOND_SHIELD:
        draw_image_transition_hd(
          _0x1ad10d,
          img,
          -img.width / 4 - scale * (1 + _0x2d0ead),
          -img.height / 4 + scale * (_0x133382 + 45)
        );
        break;
      case SPRITE.AMETHYST_SHIELD:
      case SPRITE.REIDITE_SHIELD:
        draw_image_transition_hd(
          _0x1ad10d,
          img,
          -img.width / 4 - scale * (1 + _0x2d0ead),
          -img.height / 4 + scale * (_0x133382 + 40)
        );
        break;
    }
  }
}
function draw_player_right_stuff(_0x4fe573, _0xfea850, _0xd78d54) {
  if (_0x4fe573 >= 0) {
    img = sprite[_0x4fe573][world.time];
    switch (_0x4fe573) {
      case SPRITE.PICK:
      case SPRITE.PICK_GOLD:
      case SPRITE.PICK_DIAMOND:
      case SPRITE.PICK_WOOD:
      case SPRITE.PICK_AMETHYST:
      case SPRITE.PICK_REIDITE:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (45 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 22)
        );
        break;
      case SPRITE.SWORD_WOOD:
      case SPRITE.SWORD:
      case SPRITE.SWORD_GOLD:
      case SPRITE.SWORD_DIAMOND:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 45)
        );
        break;
      case SPRITE.SWORD_AMETHYST:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (52 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 45)
        );
        break;
      case SPRITE.REIDITE_SWORD:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 44)
        );
        break;
      case SPRITE.PIRATE_SWORD:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (47 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 44)
        );
        break;
      case SPRITE.DRAGON_SWORD:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (40 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 65)
        );
        break;
      case SPRITE.WOOD_SPEAR:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (37 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 85)
        );
        break;
      case SPRITE.REIDITE_SPEAR:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (37 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 85)
        );
        break;
      case SPRITE.PITCHFORK2:
      case SPRITE.PITCHFORK:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (26 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 77)
        );
        break;
      case SPRITE.LAVA_SPEAR:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (37 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 85)
        );
        break;
      case SPRITE.LAVA_SWORD:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 44)
        );
        break;
      case SPRITE.WOOD_BOW:
      case SPRITE.STONE_BOW:
      case SPRITE.GOLD_BOW:
      case SPRITE.DIAMOND_BOW:
      case SPRITE.AMETHYST_BOW:
      case SPRITE.REIDITE_BOW:
      case SPRITE.DRAGON_BOW:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (37 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 30)
        );
        break;
      case SPRITE.MACHETE:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 35)
        );
        break;
      case SPRITE.WAND1:
      case SPRITE.WAND2:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 40)
        );
        break;
      case SPRITE.SADDLE:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (47 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 34)
        );
        break;
      case SPRITE.SPEAR:
      case SPRITE.GOLD_SPEAR:
      case SPRITE.DIAMOND_SPEAR:
      case SPRITE.AMETHYST_SPEAR:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (37 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 90)
        );
        break;
      case SPRITE.CRAB_SPEAR:
        draw_image_transition_hd(
          _0x4fe573,
          img,
          -img.width / 4 - scale * (40 + _0xfea850),
          -img.height / 4 + scale * (_0xd78d54 + 85)
        );
        break;
      case SPRITE.DRAGON_SPEAR:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (39 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 90)
        );
        break;
      case SPRITE.HAMMER:
      case SPRITE.HAMMER_GOLD:
      case SPRITE.HAMMER_DIAMOND:
      case SPRITE.HAMMER_AMETHYST:
      case SPRITE.HAMMER_REIDITE:
      case SPRITE.SUPER_HAMMER:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (46 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 35)
        );
        break;
      case SPRITE.WATERING_CAN_FULL:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (47 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 54)
        );
        break;
      case SPRITE.SHOVEL:
      case SPRITE.SHOVEL_GOLD:
      case SPRITE.SHOVEL_DIAMOND:
      case SPRITE.SHOVEL_AMETHYST:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (46 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 35)
        );
        break;
      case SPRITE.SPANNER:
        draw_image_transition(
          _0x4fe573,
          img,
          -img.width / 2 - scale * (47 + _0xfea850),
          -img.height / 2 + scale * (_0xd78d54 + 20)
        );
        break;
    }
  }
}
var draw_player_clothe = function (_0x4a4c0f) {
  if (_0x4a4c0f > 0) {
    var _0x86e74 = sprite[_0x4a4c0f][world.time];
    switch (_0x4a4c0f) {
      case SPRITE.WOOD_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 + 2 * scale,
          -_0x86e74.height / 2 - scale * 5
        );
        break;
      case SPRITE.EARMUFFS:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 18
        );
        break;
      case SPRITE.COAT:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 10
        );
        break;
      case SPRITE.EXPLORER_HAT:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 19
        );
        break;
      case SPRITE.PIRATE_HAT:
        draw_image_transition_hd(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 4,
          -_0x86e74.height / 4 - 20 * scale
        );
        break;
      case SPRITE.STONE_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 - 1 * scale,
          -_0x86e74.height / 2 - scale * 23
        );
        break;
      case SPRITE.GOLD_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 5
        );
        break;
      case SPRITE.DIAMOND_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 2
        );
        break;
      case SPRITE.AMETHYST_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 + 1.5 * scale,
          -_0x86e74.height / 2 - 1 * scale
        );
        break;
      case SPRITE.REIDITE_HELMET:
      case SPRITE.DIAMOND_PROTECTION:
      case SPRITE.AMETHYST_PROTECTION:
      case SPRITE.REIDITE_PROTECTION:
      case SPRITE.TURBAN1:
      case SPRITE.TURBAN2:
      case SPRITE.PILOT_HELMET:
      case SPRITE.LAVA_HELMET:
      case SPRITE.WITCH:
      case SPRITE.FUR_HAT:
      case SPRITE.FLOWER_HAT:
        draw_image_transition_hd(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 4,
          -_0x86e74.height / 4 + 2 * scale
        );
        break;
      case SPRITE.CHRISTMAS_HAT:
      case SPRITE.ELF_HAT:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 - 5 * scale,
          -_0x86e74.height / 2 - scale * 2
        );
        break;
      case SPRITE.CAP_SCARF:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 2
        );
        break;
      case SPRITE.WINTER_HOOD:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 2
        );
        break;
      case SPRITE.DIVING_MASK:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - scale * 2
        );
        break;
      case SPRITE.SUPER_DIVING_SUIT:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 + 2 * scale,
          -_0x86e74.height / 2
        );
        break;
      case SPRITE.DRAGON_HELMET:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - 5 * scale
        );
        break;
      case SPRITE.CROWN_GREEN:
      case SPRITE.CROWN_ORANGE:
      case SPRITE.CROWN_BLUE:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2 - 1 * scale,
          -_0x86e74.height / 2
        );
        break;
      case SPRITE.HOOD:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 + 2 * scale
        );
        break;
      case SPRITE.PEASANT:
      case SPRITE.WINTER_PEASANT:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 + 8 * scale
        );
        break;
      case SPRITE.CROWN_CRAB:
        draw_image_transition(
          _0x4a4c0f,
          _0x86e74,
          -_0x86e74.width / 2,
          -_0x86e74.height / 2 - 4 * scale
        );
        break;
    }
  }
};
function draw_vehicle() {
  if (this.ghost || this.vehicle === 0) {
    return;
  }
  if (this.x != this.r.x || this.y != this.r.y) {
    var _0x41851a =
      (Utils.get_angle_2(this.x, this.y, this.r.x, this.r.y) + Math.PI / 2) %
      (Math.PI * 2);
    this.vehicle_fx2 = Utils.reduceAngle(_0x41851a, this.vehicle_fx2);
    this.vehicle_fx2 = Utils.lerp(this.vehicle_fx2, _0x41851a, 0.018);
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  ctx.rotate(this.vehicle_fx2);
  if (this.vehicle === INV.BOAT) {
    if (this.speed > 50 || this.vehicle_fx1 > 0) {
      if (this.speed > 50) {
        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta);
      } else {
        this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
      }
      ctx.globalAlpha = this.vehicle_fx1;
      var _0xbbde7 = sprite[SPRITE.BOAT_WAVE][world.time];
      draw_image_transition_hd(
        SPRITE.BOAT_WAVE,
        _0xbbde7,
        -_0xbbde7.width / 4,
        -_0xbbde7.height / 4
      );
      ctx.globalAlpha = 1;
    }
    var _0xbbde7 = sprite[SPRITE.BOAT][world.time];
    draw_image_transition_hd(
      SPRITE.BOAT,
      _0xbbde7,
      -_0xbbde7.width / 4,
      -_0xbbde7.height / 4
    );
  } else {
    if (this.vehicle === INV.HAWK) {
      this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
      this.vehicle_fx4.update();
      if (this.speed > 85) {
        this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
      } else {
        this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
      }
      var _0xbbde7 = sprite[SPRITE.HAWK_TAMED][world.time];
      draw_image_transition_hd(
        SPRITE.HAWK_TAMED,
        _0xbbde7,
        -_0xbbde7.width / 4,
        -_0xbbde7.height / 4
      );
      _0xbbde7 = sprite[SPRITE.HAWK_WING_LEFT_TAMED][world.time];
      w = -_0xbbde7.width;
      h = -_0xbbde7.height;
      ctx.save();
      ctx.translate(-20 * scale, -20 * scale);
      ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
      ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
      ctx.restore();
      _0xbbde7 = sprite[SPRITE.HAWK_WING_RIGHT_TAMED][world.time];
      ctx.save();
      ctx.translate(20 * scale, -20 * scale);
      ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
      ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
      ctx.restore();
    } else {
      if (this.vehicle === INV.BABY_LAVA) {
        this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
        this.vehicle_fx4.update();
        if (this.speed > 85) {
          this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
        } else {
          this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
        }
        var _0xbbde7 = sprite[SPRITE.BABY_LAVA_TAMED][world.time];
        draw_image_transition_hd(
          SPRITE.BABY_LAVA_TAMED,
          _0xbbde7,
          -_0xbbde7.width / 4,
          -_0xbbde7.height / 4
        );
        _0xbbde7 = sprite[SPRITE.BABY_LAVA_WING_LEFT_TAMED][world.time];
        w = -_0xbbde7.width;
        h = -_0xbbde7.height;
        ctx.save();
        ctx.translate(-40 * scale, -45 * scale);
        ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
        ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
        ctx.restore();
        _0xbbde7 = sprite[SPRITE.BABY_LAVA_WING_RIGHT_TAMED][world.time];
        ctx.save();
        ctx.translate(40 * scale, -45 * scale);
        ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
        ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
        ctx.restore();
      } else {
        if (this.vehicle === INV.BABY_DRAGON) {
          this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
          this.vehicle_fx4.update();
          if (this.speed > 85) {
            this.vehicle_fx1 = Math.min(1, this.vehicle_fx1 + delta / 4);
          } else {
            this.vehicle_fx1 = Math.max(0.1, this.vehicle_fx1 - delta);
          }
          var _0xbbde7 = sprite[SPRITE.BABY_DRAGON_TAMED][world.time];
          draw_image_transition_hd(
            SPRITE.BABY_DRAGON_TAMED,
            _0xbbde7,
            -_0xbbde7.width / 4,
            -_0xbbde7.height / 4
          );
          _0xbbde7 = sprite[SPRITE.BABY_DRAGON_WING_LEFT_TAMED][world.time];
          w = -_0xbbde7.width;
          h = -_0xbbde7.height;
          ctx.save();
          ctx.translate(-40 * scale, -45 * scale);
          ctx.rotate(this.vehicle_fx4.v * this.vehicle_fx1);
          ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
          ctx.restore();
          _0xbbde7 = sprite[SPRITE.BABY_DRAGON_WING_RIGHT_TAMED][world.time];
          ctx.save();
          ctx.translate(40 * scale, -45 * scale);
          ctx.rotate(-this.vehicle_fx4.v * this.vehicle_fx1);
          ctxDrawImage(ctx, _0xbbde7, -w / 4, -h / 4, w / 2, h / 2);
          ctx.restore();
        } else {
          if (this.vehicle === INV.NIMBUS) {
            this.vehicle_fx5 = Utils.lerp(this.vehicle_fx5, this.speed, 0.018);
            var _0xbbde7 = sprite[SPRITE.NIMBUS][world.time];
            draw_image_transition_hd(
              SPRITE.NIMBUS,
              _0xbbde7,
              -_0xbbde7.width / 4,
              -_0xbbde7.height / 4
            );
          } else {
            if (this.vehicle === INV.PLANE) {
              this.vehicle_fx5 = Utils.lerp(
                this.vehicle_fx5,
                this.speed,
                0.018
              );
              var _0xbbde7 = sprite[SPRITE.PLANE][world.time];
              draw_image_transition_hd(
                SPRITE.PLANE,
                _0xbbde7,
                -_0xbbde7.width / 4,
                -_0xbbde7.height / 4
              );
            } else {
              if (this.vehicle === INV.SLED) {
                var _0xbbde7 = sprite[SPRITE.SLED][world.time];
                draw_image_transition_hd(
                  SPRITE.SLED,
                  _0xbbde7,
                  -_0xbbde7.width / 4,
                  -_0xbbde7.height / 4
                );
              } else {
                if (this.vehicle === INV.BABY_MAMMOTH) {
                  var _0xbbde7 = sprite[SPRITE.BABY_MAMMOTH_TAMED][world.time];
                  if (this.speed > 85) {
                    this.vehicle_fx1 = Math.min(
                      1,
                      this.vehicle_fx1 + delta / 4
                    );
                  } else {
                    this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                  }
                  this.vehicle_fx3 += delta * 60;
                  if (this.vehicle_fx3 > 60) {
                    this.vehicle_fx3 -= 60;
                  }
                  var _0x48cc17 =
                    this.vehicle_fx1 *
                    (-6 +
                      12 *
                        (this.vehicle_fx3 < 30
                          ? this.vehicle_fx3 / 30
                          : 1 - (this.vehicle_fx3 - 30) / 30));
                  draw_image_transition_hd(
                    SPRITE.BABY_MAMMOTH_TAMED,
                    _0xbbde7,
                    -_0xbbde7.width / 4,
                    -_0xbbde7.height / 4 + _0x48cc17
                  );
                } else {
                  if (this.vehicle === INV.MOUNT_BOAR) {
                    var _0xbbde7 = sprite[SPRITE.BOAR_TAMED][world.time];
                    if (this.speed > 85) {
                      this.vehicle_fx1 = Math.min(
                        1,
                        this.vehicle_fx1 + delta / 4
                      );
                    } else {
                      this.vehicle_fx1 = Math.max(0, this.vehicle_fx1 - delta);
                    }
                    this.vehicle_fx3 += delta * 60;
                    if (this.vehicle_fx3 > 60) {
                      this.vehicle_fx3 -= 60;
                    }
                    var _0x48cc17 =
                      this.vehicle_fx1 *
                      (-6 +
                        12 *
                          (this.vehicle_fx3 < 30
                            ? this.vehicle_fx3 / 30
                            : 1 - (this.vehicle_fx3 - 30) / 30));
                    draw_image_transition_hd(
                      SPRITE.BOAR_TAMED,
                      _0xbbde7,
                      -_0xbbde7.width / 4,
                      -_0xbbde7.height / 4 + _0x48cc17
                    );
                  } else {
                    if (this.vehicle === INV.CRAB_BOSS) {
                      var _0x46e1b7 = Math.PI / 2;
                      var _0x27613b = Math.PI / 4;
                      var _0xbbde7 = sprite[SPRITE.CRAB_BOSS_TAMED][world.time];
                      if (this.speed > 85) {
                        this.vehicle_fx1 = Math.min(
                          1,
                          this.vehicle_fx1 + delta / 4
                        );
                      } else {
                        this.vehicle_fx1 = Math.max(
                          0,
                          this.vehicle_fx1 - delta
                        );
                      }
                      this.vehicle_fx3 += delta * 60;
                      if (this.vehicle_fx3 > 60) {
                        this.vehicle_fx3 -= 60;
                      }
                      var _0x48cc17 =
                        this.vehicle_fx1 *
                        (-6 +
                          12 *
                            (this.vehicle_fx3 < 30
                              ? this.vehicle_fx3 / 30
                              : 1 - (this.vehicle_fx3 - 30) / 30));
                      draw_image_transition_hd(
                        SPRITE.CRAB_BOSS_TAMED,
                        _0xbbde7,
                        -_0xbbde7.width / 4 + _0x48cc17,
                        -_0xbbde7.height / 4
                      );
                      ctx.restore();
                      ctx.save();
                      ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
                      ctx.rotate(Math.PI + this.vehicle_fx2 + _0x27613b);
                      ctx.translate(120, _0x48cc17);
                      ctx.rotate(_0x46e1b7);
                      _0xbbde7 = sprite[SPRITE.CRAB_BOSS_CLAW_LEFT][world.time];
                      w = -_0xbbde7.width;
                      h = -_0xbbde7.height;
                      ctxDrawImage(ctx, _0xbbde7, -w / 2, -h / 2, w, h);
                      ctx.restore();
                      ctx.save();
                      ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
                      ctx.rotate(
                        Math.PI + this.vehicle_fx2 + _0x46e1b7 + _0x27613b
                      );
                      ctx.translate(120, _0x48cc17);
                      ctx.rotate(_0x46e1b7);
                      _0xbbde7 =
                        sprite[SPRITE.CRAB_BOSS_CLAW_RIGHT][world.time];
                      w = -_0xbbde7.width;
                      h = -_0xbbde7.height;
                      ctxDrawImage(ctx, _0xbbde7, -w / 2, -h / 2, w, h);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ctx.restore();
}
__EFFECT_HURT__ = 0;
__EFFECT_HEAL__ = 1;
__EFFECT_COLD__ = 2;
__EFFECT_HUNGER__ = 3;
__EFFECT_BOX__ = 4;
__IMAGE_EFFECT__ = [[], [], [], [], []];
__IMAGE_EFFECT_COLOR__ = [
  "#BB0000",
  "#00BB00",
  "#1CE7E0",
  "#DBE71C",
  "#BB0000",
];
function get_image_effect(_0x1623b6, _0x3937ef, _0x263a5e) {
  if (_0x3937ef.tryLoad() !== 1) {
    return _0x3937ef;
  }
  var _0x2b52c7 = __IMAGE_EFFECT__[_0x263a5e][_0x1623b6];
  if (_0x2b52c7 === undefined) {
    _0x2b52c7 = document.createElement("canvas");
    var _0x597fbb = _0x2b52c7.getContext("2d");
    var _0x2e854f = _0x3937ef.width;
    var _0x5b5d74 = _0x3937ef.height;
    _0x2b52c7.width = _0x2e854f;
    _0x2b52c7.height = _0x5b5d74;
    _0x597fbb.drawImage(_0x3937ef, 0, 0);
    _0x597fbb.globalCompositeOperation = "source-in";
    _0x597fbb.fillStyle = __IMAGE_EFFECT_COLOR__[_0x263a5e];
    _0x597fbb.fillRect(0, 0, _0x2e854f, _0x5b5d74);
    __IMAGE_EFFECT__[_0x263a5e][_0x1623b6] = _0x2b52c7;
  }
  return _0x2b52c7;
}
function draw_player() {
  var _0x34758f = 0;
  switch (this.right) {
    case SPRITE.WOOD_SHIELD:
    case SPRITE.STONE_SHIELD:
    case SPRITE.GOLD_SHIELD:
    case SPRITE.DIAMOND_SHIELD:
    case SPRITE.AMETHYST_SHIELD:
    case SPRITE.REIDITE_SHIELD:
      var _0x34758f = 1;
      break;
  }
  if (this.ghost) {
    for (var _0x1a8207 = 0; _0x1a8207 < this.bubbles.length; _0x1a8207++) {
      var _0x39fcbb = this.bubbles[_0x1a8207];
      if (_0x39fcbb.life > 0.5) {
        var _0x375787 = 1 - (_0x39fcbb.life - 0.5) * 2;
      } else {
        var _0x375787 = _0x39fcbb.life * 2;
      }
      ctx.globalAlpha = _0x375787;
      var _0x1cc29b = sprite[SPRITE.BUBBLES][world.time][_0x39fcbb.id];
      ctxDrawImage(
        ctx,
        _0x1cc29b,
        user.cam.x + _0x39fcbb.x - _0x1cc29b.width / 2,
        user.cam.y + _0x39fcbb.y - _0x1cc29b.height / 2
      );
      ctx.globalAlpha = 1;
    }
    return;
  }
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  world.dist_from_biomes(this);
  this.action & STATE.ATTACK && draw_player_effect(this);
  ctx.save();
  ctx.rotate(this.angle - Math.PI / 2);
  if (!(this.action & STATE.ATTACK)) {
    if (this.action & STATE.IDLE || this.vehicle !== 0) {
      this.idle.update();
    } else {
      this.action & STATE.WALK && this.walk.update();
    }
  }
  var _0x39fa41 = this.idle.v,
    _0x6ad9ca = this.walk.v,
    _0x4da41c;
  if (this.clothe === SPRITE.WINTER_HOOD) {
    _0x1cc29b = sprite[SPRITE.GLOVES_HOOD][world.time];
    _0x4da41c = SPRITE.GLOVES_HOOD;
  } else {
    if (this.clothe === SPRITE.DIAMOND_PROTECTION) {
      _0x1cc29b = sprite[SPRITE.GLOVES_DIAMOND_PROTECTION][world.time];
      _0x4da41c = SPRITE.GLOVES_DIAMOND_PROTECTION;
    } else {
      if (this.clothe === SPRITE.AMETHYST_PROTECTION) {
        _0x1cc29b = sprite[SPRITE.GLOVES_AMETHYST_PROTECTION][world.time];
        _0x4da41c = SPRITE.GLOVES_AMETHYST_PROTECTION;
      } else {
        if (this.clothe === SPRITE.REIDITE_PROTECTION) {
          _0x1cc29b = sprite[SPRITE.GLOVES_REIDITE_PROTECTION][world.time];
          _0x4da41c = SPRITE.GLOVES_REIDITE_PROTECTION;
        } else {
          this.superzombie
            ? ((_0x1cc29b = sprite[SPRITE.ZOMBIE_HAND][world.time]),
              (_0x4da41c = SPRITE.ZOMBIE_HAND))
            : ((_0x1cc29b = sprite[SPRITE.HAND][this.skin][world.time]),
              (_0x4da41c = SPRITE.HAND));
        }
      }
    }
  }
  shadow = sprite[SPRITE.HAND_SHADOW][world.time];
  var _0x39f3b8 = _0x1cc29b,
    _0x1d43b3 = _0x4da41c;
  if (this.action & STATE.ATTACK) {
    if (this.attack.update() && this.attack.o == false) {
      this.hand = !this.hand;
      this.action -= STATE.ATTACK;
      if (this.uid == user.uid) {
        user.control.mouse = 0;
      }
    }
    if (this.right >= 0) {
      this.hand = true;
    }
    var _0x2f8bf7 = this.hand ? this.attack.v : -this.attack.v / 3;
    var _0x429b9b = this.hand ? this.attack.v / 3 : -this.attack.v;
    if (this.superzombie) {
      ctx.save();
      ctx.rotate(_0x2f8bf7);
      draw_image_transition(
        _0x4da41c,
        _0x1cc29b,
        -_0x1cc29b.width / 2 - scale * (66 + _0x39fa41),
        -_0x1cc29b.height / 2 + (5 + _0x6ad9ca) * scale
      );
      ctx.restore();
      ctx.save();
      ctx.rotate(_0x429b9b);
      draw_image_transition(
        _0x4da41c,
        _0x1cc29b,
        -_0x1cc29b.width / 2 + scale * (66 + _0x39fa41),
        -_0x1cc29b.height / 2 + (5 + _0x6ad9ca) * scale
      );
      ctx.restore();
    } else {
      if (_0x34758f === 0) {
        if (this.right === SPRITE.WOOD_BOW) {
          _0x2f8bf7 = -Utils.ease_out_quad(-_0x2f8bf7);
        }
        ctx.save();
        ctx.rotate(_0x2f8bf7);
        draw_image_transition(
          SPRITE.HAND_SHADOW,
          shadow,
          -shadow.width / 2 - scale * (49 + _0x39fa41),
          -shadow.height / 2 + (15 + _0x6ad9ca) * scale
        );
        if (this.right === SPRITE.BOOK) {
          var _0x253e34 = sprite[this.right][this.book][world.time];
          draw_image_transition_hd_2(
            this.right,
            this.book,
            _0x253e34,
            -_0x253e34.width / 4 - scale * (62 + _0x39fa41),
            -_0x253e34.height / 4 + scale * (_0x6ad9ca + 18)
          );
        } else {
          draw_player_right_stuff(this.right, _0x39fa41, _0x6ad9ca);
        }
        if (_0x4da41c >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(
            _0x4da41c,
            _0x1cc29b,
            -_0x1cc29b.width / 4 - scale * (49 + _0x39fa41),
            -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
          );
        } else {
          if (_0x4da41c !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(
              _0x4da41c,
              this.skin,
              _0x1cc29b,
              -_0x1cc29b.width / 4 - scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
            );
          } else {
            draw_image_transition(
              _0x4da41c,
              _0x1cc29b,
              -_0x1cc29b.width / 2 - scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 2 + (11 + _0x6ad9ca) * scale
            );
          }
        }
        ctx.restore();
        ctx.save();
        ctx.rotate(_0x429b9b);
        draw_image_transition(
          SPRITE.HAND_SHADOW,
          shadow,
          -shadow.width / 2 + scale * (49 + _0x39fa41),
          -shadow.height / 2 + (15 + _0x6ad9ca) * scale
        );
        if (_0x4da41c >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(
            _0x4da41c,
            _0x1cc29b,
            -_0x1cc29b.width / 4 + scale * (49 + _0x39fa41),
            -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
          );
        } else {
          if (_0x4da41c !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(
              _0x4da41c,
              this.skin,
              _0x1cc29b,
              -_0x1cc29b.width / 4 + scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
            );
          } else {
            draw_image_transition(
              _0x4da41c,
              _0x1cc29b,
              -_0x1cc29b.width / 2 + scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 2 + (11 + _0x6ad9ca) * scale
            );
          }
        }
        ctx.restore();
      }
    }
  } else {
    if (this.superzombie) {
      draw_image_transition(
        _0x4da41c,
        _0x1cc29b,
        -_0x1cc29b.width / 2 - scale * (66 + _0x39fa41),
        -_0x1cc29b.height / 2 + (5 + _0x6ad9ca) * scale
      );
      draw_image_transition(
        _0x4da41c,
        _0x1cc29b,
        -_0x1cc29b.width / 2 + scale * (66 + _0x39fa41),
        -_0x1cc29b.height / 2 + (5 + _0x6ad9ca) * scale
      );
    } else {
      if (_0x34758f === 0) {
        draw_image_transition(
          SPRITE.HAND_SHADOW,
          shadow,
          -shadow.width / 2 - scale * (49 + _0x39fa41),
          -shadow.height / 2 + (15 + _0x6ad9ca) * scale
        );
        if (this.right === SPRITE.BOOK) {
          var _0x253e34 = sprite[this.right][this.book][world.time];
          draw_image_transition_hd_2(
            this.right,
            this.book,
            _0x253e34,
            -_0x253e34.width / 4 - scale * (62 + _0x39fa41),
            -_0x253e34.height / 4 + scale * (_0x6ad9ca + 18)
          );
        } else {
          draw_player_right_stuff(this.right, _0x39fa41, _0x6ad9ca);
        }
        if (_0x4da41c >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(
            _0x4da41c,
            _0x1cc29b,
            -_0x1cc29b.width / 4 - scale * (49 + _0x39fa41),
            -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
          );
        } else {
          if (_0x4da41c !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(
              _0x4da41c,
              this.skin,
              _0x1cc29b,
              -_0x1cc29b.width / 4 - scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
            );
          } else {
            draw_image_transition(
              _0x4da41c,
              _0x1cc29b,
              -_0x1cc29b.width / 2 - scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 2 + (11 + _0x6ad9ca) * scale
            );
          }
        }
        draw_image_transition(
          SPRITE.HAND_SHADOW,
          shadow,
          -shadow.width / 2 + scale * (49 + _0x39fa41),
          -shadow.height / 2 + (15 + _0x6ad9ca) * scale
        );
        if (_0x4da41c >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
          draw_image_transition_hd(
            _0x4da41c,
            _0x1cc29b,
            -_0x1cc29b.width / 4 + scale * (49 + _0x39fa41),
            -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
          );
        } else {
          if (_0x4da41c !== SPRITE.GLOVES_HOOD) {
            draw_image_transition_hd_2(
              _0x4da41c,
              this.skin,
              _0x1cc29b,
              -_0x1cc29b.width / 4 + scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 4 + (11 + _0x6ad9ca) * scale
            );
          } else {
            draw_image_transition(
              _0x4da41c,
              _0x1cc29b,
              -_0x1cc29b.width / 2 + scale * (49 + _0x39fa41),
              -_0x1cc29b.height / 2 + (11 + _0x6ad9ca) * scale
            );
          }
        }
      }
    }
  }
  if (this.bag && this.clothe < 1) {
    var _0x1cc29b = sprite[SPRITE.BAG][this.baglook][world.time];
    draw_image_transition_hd_2(
      SPRITE.BAG,
      this.baglook,
      _0x1cc29b,
      -_0x1cc29b.width / 4,
      -_0x1cc29b.height / 4 - 39 * scale
    );
  }
  if (this.superzombie) {
    var _0x1cc29b = sprite[SPRITE.ZOMBIE_BODY][world.time];
    draw_image_transition(
      SPRITE.ZOMBIE_BODY,
      _0x1cc29b,
      -_0x1cc29b.width / 2,
      -_0x1cc29b.height / 2
    );
    this.move_head.update();
    _0x1cc29b = sprite[SPRITE.ZOMBIE_HEAD][world.time];
    draw_image_transition(
      SPRITE.ZOMBIE_HEAD,
      _0x1cc29b,
      -_0x1cc29b.width / 2,
      -_0x1cc29b.height / 2 + this.move_head.v
    );
  } else {
    var _0x1cc29b = sprite[SPRITE.BODY][this.skin][world.time];
    if (this.clothe !== SPRITE.WINTER_HOOD) {
      draw_image_transition_hd_2(
        SPRITE.BODY,
        this.skin,
        _0x1cc29b,
        -_0x1cc29b.width / 4,
        -_0x1cc29b.height / 4
      );
      if (this.accessory > 0) {
        var _0x1cc29b = sprite[SPRITE.ACCESSORY][this.accessory][world.time];
        draw_image_transition_hd_2(
          SPRITE.ACCESSORY,
          this.accessory,
          _0x1cc29b,
          -_0x1cc29b.width / 4,
          -_0x1cc29b.height / 4
        );
      }
    }
  }
  if (this.action & STATE.HEAL) {
    if (this.heal.update() && this.heal.o == false) {
      this.action -= STATE.HEAL;
    }
    ctx.globalAlpha = 0.6 - this.heal.v;
    if (this.superzombie) {
      var _0x1cc29b = sprite[SPRITE.ZOMBIE_HEAL];
      ctxDrawImage(ctx, _0x1cc29b, -_0x1cc29b.width / 2, -_0x1cc29b.height / 2);
    } else {
      var _0x1cc29b = get_image_effect(
        this.skin,
        sprite[SPRITE.BODY][this.skin][0],
        __EFFECT_HEAL__
      );
      ctxDrawImage(
        ctx,
        _0x1cc29b,
        _0x1cc29b.width / 4,
        _0x1cc29b.height / 4,
        -_0x1cc29b.width / 2,
        -_0x1cc29b.height / 2
      );
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.WEB) {
    if (this.web.update() && this.web.o == false) {
      this.action -= STATE.WEB;
    }
    ctx.globalAlpha = 0.6 - this.web.v;
    var _0x1cc29b = sprite[SPRITE.WEB];
    ctxDrawImage(ctx, _0x1cc29b, -_0x1cc29b.width / 2, -_0x1cc29b.height / 2);
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HURT) {
    if (this.hit.update() && this.hit.o == false) {
      this.action -= STATE.HURT;
    }
    ctx.globalAlpha = 0.6 - this.hit.v;
    if (this.superzombie) {
      var _0x1cc29b = sprite[SPRITE.ZOMBIE_HURT];
      ctxDrawImage(ctx, _0x1cc29b, -_0x1cc29b.width / 2, -_0x1cc29b.height / 2);
    } else {
      var _0x1cc29b = get_image_effect(
        this.skin,
        sprite[SPRITE.BODY][this.skin][0],
        __EFFECT_HURT__
      );
      ctxDrawImage(
        ctx,
        _0x1cc29b,
        _0x1cc29b.width / 4,
        _0x1cc29b.height / 4,
        -_0x1cc29b.width / 2,
        -_0x1cc29b.height / 2
      );
    }
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.COLD) {
    if (this.freeze.update() && this.freeze.o == false) {
      this.action -= STATE.COLD;
    }
    ctx.globalAlpha = 0.6 - this.freeze.v;
    var _0x1cc29b = get_image_effect(
      this.skin,
      sprite[SPRITE.BODY][this.skin][0],
      __EFFECT_COLD__
    );
    ctxDrawImage(
      ctx,
      _0x1cc29b,
      _0x1cc29b.width / 4,
      _0x1cc29b.height / 4,
      -_0x1cc29b.width / 2,
      -_0x1cc29b.height / 2
    );
    ctx.globalAlpha = 1;
  }
  if (this.action & STATE.HUNGER) {
    if (this.starve.update() && this.starve.o == false) {
      this.action -= STATE.HUNGER;
    }
    ctx.globalAlpha = 0.6 - this.starve.v;
    if (this.superzombie) {
      var _0x1cc29b = sprite[SPRITE.ZOMBIE_HUNGER];
      ctxDrawImage(ctx, _0x1cc29b, -_0x1cc29b.width / 2, -_0x1cc29b.height / 2);
    } else {
      var _0x1cc29b = get_image_effect(
        this.skin,
        sprite[SPRITE.BODY][this.skin][0],
        __EFFECT_HUNGER__
      );
      ctxDrawImage(
        ctx,
        _0x1cc29b,
        _0x1cc29b.width / 4,
        _0x1cc29b.height / 4,
        -_0x1cc29b.width / 2,
        -_0x1cc29b.height / 2
      );
    }
    ctx.globalAlpha = 1;
  }
  draw_player_clothe(this.clothe);
  if (_0x34758f === 1) {
    if (this.action & STATE.ATTACK) {
      _0x39fa41 += this.attack.v * 15;
    }
    draw_image_transition(
      SPRITE.HAND_SHADOW,
      shadow,
      -shadow.width / 2 - scale * 26,
      -shadow.height / 2 + (31 + _0x6ad9ca + _0x39fa41) * scale
    );
    if (_0x1d43b3 >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(
        _0x1d43b3,
        _0x39f3b8,
        -_0x39f3b8.width / 4 - scale * 26,
        -_0x39f3b8.height / 4 + (27 + _0x6ad9ca + _0x39fa41) * scale
      );
    } else {
      if (_0x1d43b3 !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(
          _0x1d43b3,
          this.skin,
          _0x39f3b8,
          -_0x39f3b8.width / 4 - scale * 26,
          -_0x39f3b8.height / 4 + (27 + _0x6ad9ca + _0x39fa41) * scale
        );
      } else {
        draw_image_transition(
          _0x1d43b3,
          _0x39f3b8,
          -_0x39f3b8.width / 2 - scale * 26,
          -_0x39f3b8.height / 2 + (27 + _0x6ad9ca + _0x39fa41) * scale
        );
      }
    }
    draw_image_transition(
      SPRITE.HAND_SHADOW,
      shadow,
      -shadow.width / 2 + scale * 26,
      -shadow.height / 2 + (31 + _0x6ad9ca + _0x39fa41) * scale
    );
    if (_0x1d43b3 >= SPRITE.GLOVES_DIAMOND_PROTECTION) {
      draw_image_transition_hd(
        _0x1d43b3,
        _0x39f3b8,
        -_0x39f3b8.width / 4 + scale * 26,
        -_0x39f3b8.height / 4 + (27 + _0x6ad9ca + _0x39fa41) * scale
      );
    } else {
      if (_0x1d43b3 !== SPRITE.GLOVES_HOOD) {
        draw_image_transition_hd_2(
          _0x1d43b3,
          this.skin,
          _0x39f3b8,
          -_0x39f3b8.width / 4 + scale * 26,
          -_0x39f3b8.height / 4 + (27 + _0x6ad9ca + _0x39fa41) * scale
        );
      } else {
        draw_image_transition(
          _0x1d43b3,
          _0x39f3b8,
          -_0x39f3b8.width / 2 + scale * 26,
          -_0x39f3b8.height / 2 + (27 + _0x6ad9ca + _0x39fa41) * scale
        );
      }
    }
    draw_player_right_stuff_after(this.right, 0, _0x6ad9ca + _0x39fa41);
  }
  ctx.restore();
  if (this.clothe !== SPRITE.HOOD && this.clothe !== SPRITE.WINTER_HOOD) {
    if (this.dist_winter > 0) {
      if (!this.player.label_winter) {
        this.player.label_winter = create_text(
          scale,
          this.player.nickname,
          20,
          "#187484",
          "#000",
          2,
          null,
          null,
          300 * scale
        );
      }
      var _0x1cc29b = this.player.label_winter;
    } else {
      if (!this.player.label) {
        this.player.label = create_text(
          scale,
          this.player.nickname,
          20,
          "#FFF",
          "#000",
          2,
          null,
          null,
          300 * scale
        );
      }
      var _0x1cc29b = this.player.label;
    }
    if (world.day == SPRITE.NIGHT) {
      ctx.globalAlpha = 0.5;
    }
    var _0x39fa41 = Math.floor(-_0x1cc29b.width / 2);
    var _0x6ad9ca = Math.floor(-_0x1cc29b.height / 2 - 70 * scale);
    ctxDrawImage(ctx, _0x1cc29b, _0x39fa41, _0x6ad9ca);
    if (this.player.level > 0) {
      var _0x4675f8 = _0x39fa41 + _0x1cc29b.width + 5;
      _0x1cc29b = sprite[SPRITE.VERIFIED];
      if (PLAYER_LEVEL[this.player.level] === undefined) {
        PLAYER_LEVEL[this.player.level] = create_text(
          scale,
          "[" + this.player.level + "]",
          20,
          "#F9E8A2",
          "#000",
          2,
          null,
          null,
          50 * scale
        );
      }
      ctxDrawImage(ctx, PLAYER_LEVEL[this.player.level], _0x4675f8, _0x6ad9ca);
    }
    ctx.globalAlpha = 1;
  } else {
    var _0x6ad9ca = Math.floor(-70 * scale),
      _0x39fa41 = Math.floor(sprite[SPRITE.ICON_MEMBER].width / 1.5);
  }
  if (user.in_team(this.pid)) {
    if (this.pid == user.team[0]) {
      var _0x1cc29b = sprite[SPRITE.ICON_LEADER];
    } else {
      var _0x1cc29b = sprite[SPRITE.ICON_MEMBER];
    }
    ctxDrawImage(
      ctx,
      _0x1cc29b,
      _0x39fa41 - _0x1cc29b.width - 5,
      _0x6ad9ca - 6
    );
  }
  ctx.restore();
}
function draw_alert_ghost() {
  if (this.enabled && this.delay >= 0) {
    var _0xe6fc52 = new Date().getTime();
    var _0x36bc23 = _0xe6fc52 - this.delay;
    var _0x57f297 = (_0x36bc23 % 1000) / 1000;
    if (_0x57f297 > 0.5) {
      _0x57f297 = 1 - (_0x57f297 - 0.5) * 2;
    } else {
      _0x57f297 *= 2;
    }
    _0x36bc23 = Math.floor(_0x36bc23 / 1000);
    if (_0x36bc23 < WORLD.GHOST_DELAY) {
      _0x36bc23 = WORLD.GHOST_DELAY - _0x36bc23;
      !this.label &&
        (this.label = create_text(
          scale,
          " seconds before you die",
          40,
          "#660000",
          null,
          null,
          null,
          null,
          null,
          "#000",
          10
        ));
      (this.now != _0x36bc23 || !this.sec) &&
        ((this.now = _0x36bc23),
        (this.sec = create_text(
          scale,
          "" + _0x36bc23,
          40,
          "#660000",
          null,
          null,
          null,
          null,
          null,
          "#000",
          10
        )));
      ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 100 * scale);
      ctx.globalAlpha = _0x57f297;
      ctxDrawImage(
        ctx,
        this.sec,
        (canw - this.label.width) / 2 - this.sec.width + 15 * scale,
        100 * scale
      );
      ctx.globalAlpha = 1;
    }
  }
}
function draw_welcome_message() {
  if (this.message !== undefined) {
    var _0x3b23d5 = user.inv.can_select.length > 0 ? -95 : 0;
    ctxDrawImage(ctx, this.message, 0, canh - this.message.height + _0x3b23d5);
  }
}
function draw_alert(_0x40b714, _0x49faf9) {
  if (this.text) {
    if (!this.timeout.o) {
      ctx.globalAlpha = 1;
    } else {
      ctx.globalAlpha = 1 - this.timeout.v;
    }
    if (!this.label) {
      this.label = create_text(
        scale,
        this.text,
        40,
        _0x40b714,
        null,
        null,
        null,
        null,
        null,
        _0x49faf9,
        10
      );
    }
    ctxDrawImage(ctx, this.label, (canw - this.label.width) / 2, 50 * scale);
    ctx.globalAlpha = 1;
    this.timeout.update() &&
      this.timeout.o == false &&
      ((this.text = this.list.shift()), (this.label = null));
  }
}
function draw_chat() {
  ctx.save();
  ctx.translate(user.cam.x + this.x, user.cam.y + this.y);
  if (this.text.length > 0) {
    for (
      var _0x29b189 = 0;
      _0x29b189 < this.text.length && _0x29b189 < 2;
      _0x29b189++
    ) {
      !this.label[_0x29b189] &&
        ((this.label[_0x29b189] = create_message(scale, this.text[_0x29b189])),
        (this.text_effect[_0x29b189] = 0),
        (this.text_move[_0x29b189] = 0));
      if (_0x29b189 === 1) {
        this.text_move[0] = Utils.ease_in_out_quad(this.text_ease) * 30;
      }
    }
    this.text_effect[0] += delta;
    if (this.text.length > 1) {
      this.text_ease = Math.min(this.text_ease + delta, 1);
      if (this.text_effect[0] > 1 && this.text_ease > 0.5) {
        this.text_effect[1] += delta;
      }
    }
    for (
      var _0x29b189 = 0;
      _0x29b189 < this.text.length && _0x29b189 < 2;
      _0x29b189++
    ) {
      var _0x1a3765 = this.text_effect[_0x29b189];
      if (_0x1a3765 > 0) {
        if (_0x1a3765 < 0.25) {
          ctx.globalAlpha = _0x1a3765 * 4;
        } else {
          if (_0x1a3765 > 3.75) {
            ctx.globalAlpha = Math.max((4 - _0x1a3765) * 4, 0);
          } else {
            ctx.globalAlpha = 1;
          }
        }
        ctxDrawImage(
          ctx,
          this.label[_0x29b189],
          -this.label[_0x29b189].width / 2,
          -this.text_move[_0x29b189] +
            -this.label[_0x29b189].height / 2 -
            110 * scale
        );
      }
    }
    if (this.text_effect[0] > 4) {
      this.text_effect.shift();
      this.text.shift();
      this.text_move.shift();
      this.label.shift();
      this.text_ease = 0;
    }
  }
  ctx.restore();
}
var __effect = 0;
function draw_objects_effect(
  _0x362a45,
  _0x3b3ef5,
  _0x361123,
  _0x3ec9b8,
  _0x3763d2,
  _0x30c7ed,
  _0x2fcc0d,
  _0x38c2e7
) {
  if (_0x38c2e7 === undefined) {
    _0x38c2e7 = 0;
  }
  for (var _0x8aa613 = _0x2fcc0d; _0x8aa613 >= _0x38c2e7; _0x8aa613--) {
    for (var _0x124ac2 = _0x362a45; _0x124ac2 <= _0x3b3ef5; _0x124ac2++) {
      for (var _0x4b8fa3 = _0x361123; _0x4b8fa3 <= _0x3ec9b8; _0x4b8fa3++) {
        var _0x512d79 = MAP.tiles[_0x124ac2][_0x4b8fa3];
        if (!_0x512d79 || !_0x512d79[_0x30c7ed]) {
          continue;
        }
        var _0x54fb23 = _0x512d79[_0x30c7ed][_0x8aa613];
        if (_0x54fb23 === undefined) {
          continue;
        }
        for (var _0x933bb1 = 0; _0x933bb1 < _0x54fb23.length; _0x933bb1++) {
          var _0x4a4c97 = _0x54fb23[_0x933bb1];
          var _0x11aa48 = sprite[_0x3763d2][world.time][_0x8aa613];
          var _0x1a5f7c = (__effect + (_0x124ac2 + _0x4b8fa3) * 3) % 60;
          var _0x2115e1 =
            _0x1a5f7c < 30 ? _0x1a5f7c / 30 : 1 - (_0x1a5f7c - 30) / 30;
          var _0x59764a = -_0x11aa48.width * (1 + (0.9 * _0x2115e1) / 30);
          var _0x4808b4 = -_0x11aa48.height * (1 + (0.9 * _0x2115e1) / 30);
          _0x1a5f7c = (__effect + (_0x124ac2 + _0x4b8fa3) * 7) % 60;
          _0x2115e1 =
            _0x1a5f7c < 30 ? _0x1a5f7c / 30 : 1 - (_0x1a5f7c - 30) / 30;
          var _0x4797e7 = ctx.globalAlpha;
          ctx.globalAlpha = (0.9 + _0x2115e1 * 0.1) * _0x4797e7;
          ctxDrawImage(
            ctx,
            _0x11aa48,
            user.cam.x + _0x4a4c97.x - _0x59764a / 2,
            user.cam.y + _0x4a4c97.y - _0x4808b4 / 2,
            _0x59764a,
            _0x4808b4
          );
          ctx.globalAlpha = _0x4797e7;
        }
      }
    }
  }
}
function draw_breath_objects(
  _0x50801e,
  _0xe2b7e,
  _0x19ec93,
  _0x18acd3,
  _0x16468e,
  _0x6b000e,
  _0x3419ab,
  _0x1acd06
) {
  if (_0x1acd06 === undefined) {
    _0x1acd06 = 0;
  }
  world.breath[_0x16468e].update();
  for (var _0x405ac3 = _0x3419ab; _0x405ac3 >= _0x1acd06; _0x405ac3--) {
    for (var _0x5c6b69 = _0x50801e; _0x5c6b69 <= _0xe2b7e; _0x5c6b69++) {
      for (var _0x1daaae = _0x19ec93; _0x1daaae <= _0x18acd3; _0x1daaae++) {
        var _0x3910fe = MAP.tiles[_0x5c6b69][_0x1daaae];
        if (!_0x3910fe || !_0x3910fe[_0x6b000e]) {
          continue;
        }
        var _0x564836 = _0x3910fe[_0x6b000e][_0x405ac3];
        if (_0x564836 === undefined) {
          continue;
        }
        for (var _0x2ba27c = 0; _0x2ba27c < _0x564836.length; _0x2ba27c++) {
          var _0x1ef361 = _0x564836[_0x2ba27c];
          if (_0x1ef361.update) {
            _0x1ef361.hit.update() &&
              _0x1ef361.hit.o == false &&
              (_0x1ef361.update = false);
            var _0x272373 = (1 - _0x1ef361.hit.v) * delta * 600 * scale,
              _0x14f659 = Math.cos(_0x1ef361.angle) * _0x272373,
              _0x32cab5 = Math.sin(_0x1ef361.angle) * _0x272373;
          } else {
            var _0x14f659 = 0,
              _0x32cab5 = 0;
          }
          var _0x25f032 = sprite[_0x16468e][world.time][_0x405ac3];
          var _0x2ba651 = -_0x25f032.width * world.breath[_0x16468e].v;
          var _0x5232f7 = -_0x25f032.height * world.breath[_0x16468e].v;
          ctxDrawImage(
            ctx,
            _0x25f032,
            user.cam.x + _0x1ef361.x - _0x2ba651 / 2 + _0x14f659,
            user.cam.y + _0x1ef361.y - _0x5232f7 / 2 + _0x32cab5,
            _0x2ba651,
            _0x5232f7
          );
        }
      }
    }
  }
}
var randweb = [];
for (var i = 0; i < 100; i++) {
  var r = 1;
  if (Math.random() < 0.25) {
    r = 0;
  }
  randweb.push(r);
}
_scale_object = 1;
function draw_map_objects(
  _0x2042cf,
  _0x3cf228,
  _0x3f399f,
  _0x3707d0,
  _0x3c5b1f,
  _0x200811,
  _0x2611c9,
  _0x2ce195,
  _0x4a9379
) {
  if (_0x2ce195 === undefined) {
    _0x2ce195 = 0;
  }
  for (var _0x4660f6 = _0x2611c9; _0x4660f6 >= _0x2ce195; _0x4660f6--) {
    for (var _0x3a8716 = _0x2042cf; _0x3a8716 <= _0x3cf228; _0x3a8716++) {
      for (var _0xb13290 = _0x3f399f; _0xb13290 <= _0x3707d0; _0xb13290++) {
        if (
          _0x4a9379 > 0 &&
          randweb[(_0x3a8716 + _0xb13290 * _0x4a9379) % randweb.length] === 1
        ) {
          continue;
        }
        var _0x102295 = MAP.tiles[_0x3a8716][_0xb13290];
        if (_0x102295 === undefined || _0x102295[_0x200811] === undefined) {
          continue;
        }
        var _0x2acd20 = _0x102295[_0x200811][_0x4660f6];
        if (_0x2acd20 === undefined) {
          continue;
        }
        for (var _0x4d25c4 = 0; _0x4d25c4 < _0x2acd20.length; _0x4d25c4++) {
          var _0x4fa51b = _0x2acd20[_0x4d25c4];
          if (_0x4fa51b.update) {
            _0x4fa51b.hit.update() &&
              _0x4fa51b.hit.o == false &&
              (_0x4fa51b.update = false);
            var _0x54aa25 = (1 - _0x4fa51b.hit.v) * delta * 600 * scale,
              _0x536449 = Math.cos(_0x4fa51b.angle) * _0x54aa25,
              _0x18dc76 = Math.sin(_0x4fa51b.angle) * _0x54aa25;
          } else {
            var _0x536449 = 0,
              _0x18dc76 = 0;
          }
          var _0x2bf1c3 = sprite[_0x3c5b1f][world.time][_0x4660f6];
          ctxDrawImage(
            ctx,
            _0x2bf1c3,
            user.cam.x +
              _0x4fa51b.x -
              _0x2bf1c3.width / (2 * _scale_object) +
              _0x536449,
            user.cam.y +
              _0x4fa51b.y -
              _0x2bf1c3.height / (2 * _scale_object) +
              _0x18dc76,
            _0x2bf1c3.width / _scale_object,
            _0x2bf1c3.height / _scale_object
          );
        }
      }
    }
  }
}
function draw_map_decorations(
  _0x1e3fd2,
  _0x2c9b9a,
  _0x20be16,
  _0x4368a2,
  _0x1c1887,
  _0xe6164b,
  _0x432ab9,
  _0x1a7f57,
  _0x8028e1
) {
  if (_0x1a7f57 === undefined) {
    _0x1a7f57 = 0;
  }
  for (var _0xa6aefb = _0x1e3fd2; _0xa6aefb <= _0x2c9b9a; _0xa6aefb++) {
    for (var _0x159683 = _0x20be16; _0x159683 <= _0x4368a2; _0x159683++) {
      var _0x1f45c6 = MAP.tiles[_0xa6aefb][_0x159683];
      if (_0x1f45c6 === undefined || _0x1f45c6[_0xe6164b] === undefined) {
        continue;
      }
      var _0x14699b = _0x1f45c6[_0xe6164b];
      if (_0x14699b === undefined) {
        continue;
      }
      if (_0x14699b.scale === 1) {
        var _0x59ba6b = sprite[_0x1c1887][world.time][_0x14699b["_id"]];
        ctx.save();
        ctx.translate(user.cam.x + _0x14699b.x, user.cam.y + _0x14699b.y);
        ctx.rotate(_0x14699b.angle);
        ctxDrawImage(
          ctx,
          _0x59ba6b,
          -_0x59ba6b.width / 4,
          -_0x59ba6b.height / 4,
          _0x59ba6b.width / 2,
          _0x59ba6b.height / 2
        );
        ctx.restore();
      } else {
        if (_0x14699b.scale === 3) {
          for (var _0x5a0c81 = 0; _0x5a0c81 < _0x14699b.p.length; _0x5a0c81++) {
            ctx.save();
            ctx.translate(user.cam.x + _0x14699b.x, user.cam.y + _0x14699b.y);
            ctx.rotate(_0x14699b.p[_0x5a0c81].angle);
            var _0x59ba6b =
              sprite[_0x1c1887][world.time][_0x14699b.p[_0x5a0c81]["_id"]];
            ctxDrawImage(
              ctx,
              _0x59ba6b,
              -_0x59ba6b.width / 3 + _0x14699b.p[_0x5a0c81].x,
              -_0x59ba6b.height / 3 + _0x14699b.p[_0x5a0c81].y,
              _0x59ba6b.width / 1.5,
              _0x59ba6b.height / 1.5
            );
            ctx.restore();
          }
        } else {
          var _0x59ba6b = sprite[_0x1c1887][world.time][_0x14699b["_id"]];
          ctx.save();
          ctx.translate(user.cam.x + _0x14699b.x, user.cam.y + _0x14699b.y);
          ctx.rotate(_0x14699b.angle);
          ctxDrawImage(
            ctx,
            _0x59ba6b,
            -_0x59ba6b.width / 2,
            -_0x59ba6b.height / 2,
            _0x59ba6b.width,
            _0x59ba6b.height
          );
          ctx.restore();
        }
      }
    }
  }
}
function draw_lava_effect(
  _0x33e274,
  _0x1585c6,
  _0x521380,
  _0x771548,
  _0x2e55e4,
  _0x5a2eb9,
  _0x3b445f,
  _0x181e68,
  _0x44277b
) {
  if (_0x181e68 === undefined) {
    _0x181e68 = 0;
  }
  for (var _0x4b3019 = _0x3b445f; _0x4b3019 >= _0x181e68; _0x4b3019--) {
    for (var _0x3430f8 = _0x33e274; _0x3430f8 <= _0x1585c6; _0x3430f8++) {
      for (var _0x34b8da = _0x521380; _0x34b8da <= _0x771548; _0x34b8da++) {
        var _0x6d1b1 = MAP.tiles[_0x3430f8][_0x34b8da];
        if (_0x6d1b1 === undefined || _0x6d1b1[_0x5a2eb9] === undefined) {
          continue;
        }
        var _0x3ba47b = _0x6d1b1[_0x5a2eb9][_0x4b3019];
        if (_0x3ba47b === undefined) {
          continue;
        }
        for (var _0x144938 = 0; _0x144938 < _0x3ba47b.length; _0x144938++) {
          var _0x5f591a = _0x3ba47b[_0x144938];
          if (_0x5f591a.update) {
            _0x5f591a.hit.update() &&
              _0x5f591a.hit.o == false &&
              (_0x5f591a.update = false);
            var _0x4d9d2a = (1 - _0x5f591a.hit.v) * delta * 600 * scale,
              _0x47cbdc = Math.cos(_0x5f591a.angle) * _0x4d9d2a,
              _0x206565 = Math.sin(_0x5f591a.angle) * _0x4d9d2a;
          } else {
            var _0x47cbdc = 0,
              _0x206565 = 0;
          }
          for (
            var _0x4cfe29 = 0;
            _0x4cfe29 < _bubble[_0x4b3019].amount;
            _0x4cfe29++
          ) {
            world.lava[_0x4cfe29].last !== old_timestamp &&
              (world.lava[_0x4cfe29].update(),
              (world.lava[_0x4cfe29].last = old_timestamp));
            var _0x1cd3d3 =
              sprite[SPRITE.LAVA_BUBBLE][world.time][
                _bubble[_0x4b3019].pos[_0x4cfe29].t
              ];
            var _0x1381b2 = -_0x1cd3d3.width * world.lava[_0x4cfe29].v;
            var _0x5dad0a = -_0x1cd3d3.height * world.lava[_0x4cfe29].v;
            ctxDrawImage(
              ctx,
              _0x1cd3d3,
              user.cam.x +
                _0x5f591a.x -
                _0x1381b2 / 4 +
                _0x47cbdc +
                _bubble[_0x4b3019].pos[_0x4cfe29].x,
              user.cam.y +
                _0x5f591a.y -
                _0x5dad0a / 4 +
                _0x206565 +
                _bubble[_0x4b3019].pos[_0x4cfe29].y,
              _0x1381b2 / 2,
              _0x5dad0a / 2
            );
          }
        }
      }
    }
  }
}
_bubble = [
  {
    amount: 10,
    pos: [
      {
        x: -128,
        y: -20,
        t: 0,
      },
      {
        x: -86,
        y: -4,
        t: 1,
      },
      {
        x: -60,
        y: -74,
        t: 2,
      },
      {
        x: -22,
        y: -144,
        t: 0,
      },
      {
        x: -58,
        y: 86,
        t: 0,
      },
      {
        x: 3,
        y: -30,
        t: 0,
      },
      {
        x: 65,
        y: -115,
        t: 1,
      },
      {
        x: 118,
        y: -50,
        t: 0,
      },
      {
        x: 73,
        y: 15,
        t: 1,
      },
      {
        x: 67,
        y: 79,
        t: 0,
      },
    ],
  },
  {
    amount: 5,
    pos: [
      {
        x: -45,
        y: -26,
        t: 0,
      },
      {
        x: -45,
        y: 20,
        t: 2,
      },
      {
        x: 10,
        y: -60,
        t: 1,
      },
      {
        x: 52,
        y: -17,
        t: 1,
      },
      {
        x: 14,
        y: 45,
        t: 0,
      },
    ],
  },
  {
    amount: 3,
    pos: [
      {
        x: -30,
        y: 3,
        t: 2,
      },
      {
        x: 7,
        y: -38,
        t: 2,
      },
      {
        x: 37,
        y: 5,
        t: 2,
      },
    ],
  },
  {
    amount: 11,
    pos: [
      {
        x: -74,
        y: -87,
        t: 2,
      },
      {
        x: -11,
        y: -10,
        t: 1,
      },
      {
        x: -99,
        y: 17,
        t: 1,
      },
      {
        x: -66,
        y: 84,
        t: 0,
      },
      {
        x: -55,
        y: 123,
        t: 1,
      },
      {
        x: 10,
        y: 81,
        t: 2,
      },
      {
        x: 52,
        y: 50,
        t: 0,
      },
      {
        x: 138,
        y: 9,
        t: 1,
      },
      {
        x: 104,
        y: -28,
        t: 0,
      },
      {
        x: 67,
        y: -56,
        t: 2,
      },
      {
        x: 5,
        y: -112,
        t: 0,
      },
    ],
  },
  {
    amount: 6,
    pos: [
      {
        x: -33,
        y: -66,
        t: 2,
      },
      {
        x: -58,
        y: 10,
        t: 0,
      },
      {
        x: -19,
        y: 44,
        t: 1,
      },
      {
        x: 44,
        y: 20,
        t: 0,
      },
      {
        x: 53,
        y: -36,
        t: 2,
      },
      {
        x: 7,
        y: -62,
        t: 0,
      },
    ],
  },
  {
    amount: 3,
    pos: [
      {
        x: -19,
        y: -25,
        t: 1,
      },
      {
        x: -29,
        y: 13,
        t: 2,
      },
      {
        x: 12,
        y: 12,
        t: 0,
      },
    ],
  },
];
var _js = 0,
  _je = 0,
  _is = 0,
  _ie = 0;
function draw_world() {
  var _0x3d07b6 = _js;
  var _0x5ec69b = _je;
  var _0x17b53a = _is;
  var _0x597c2d = _ie;
  if (ui.quality) {
    draw_map_transition(
      draw_map_objects,
      _0x17b53a,
      _0x597c2d,
      _0x3d07b6,
      _0x5ec69b,
      SPRITE.LAKE_EDGE,
      "l",
      2
    );
  }
  if (ui.quality) {
    draw_map_transition(
      draw_map_objects,
      _0x17b53a,
      _0x597c2d,
      _0x3d07b6,
      _0x5ec69b,
      SPRITE.LAVA_GROUND,
      "la",
      5
    );
  }
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.MAGMA,
    "la",
    5
  );
  draw_map_transition(
    draw_breath_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.LAKE,
    "l",
    2
  );
  ui.quality &&
    (draw_map_transition(
      draw_lava_effect,
      _0x17b53a,
      _0x597c2d,
      _0x3d07b6,
      _0x5ec69b,
      SPRITE.MAGMA,
      "la",
      5
    ),
    draw_map_transition(
      draw_breath_objects,
      _0x17b53a,
      _0x597c2d,
      _0x3d07b6,
      _0x5ec69b,
      SPRITE.LAKE_DEEP,
      "l",
      2
    ));
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.MARKER,
    "ma",
    3
  );
  var _0x100714 = world.units[ITEMS.SAND_WORM];
  for (var _0x3dedf = 0; _0x3dedf < _0x100714.length; _0x3dedf++) {
    _0x100714[_0x3dedf].draw_ground();
  }
  var _0x270927 = world.units[ITEMS.PLAYERS];
  for (var _0x3dedf = 0; _0x3dedf < _0x270927.length; _0x3dedf++) {
    var _0x1800c7 = _0x270927[_0x3dedf];
    for (var _0x1f0bb9 = 0; _0x1f0bb9 < _0x1800c7.swim.length; _0x1f0bb9++) {
      draw_swim(_0x1800c7.swim[_0x1f0bb9]);
    }
  }
  var _0x10817b = world.units[ITEMS.BRIDGE];
  for (var _0x3dedf = 0; _0x3dedf < _0x10817b.length; _0x3dedf++) {
    draw_transition(_0x10817b[_0x3dedf], SPRITE.BRIDGE);
    _0x10817b[_0x3dedf].draw_life(_0x10817b[_0x3dedf].info);
  }
  var _0xd4b76d = world.units[ITEMS.FURNACE];
  for (var _0x3dedf = 0; _0x3dedf < _0xd4b76d.length; _0x3dedf++) {
    if (_0xd4b76d[_0x3dedf].action == 2) {
      draw_bg_transition(_0xd4b76d[_0x3dedf]);
    }
  }
  var _0x16f6af = world.units[ITEMS.FIRE];
  for (var _0x3dedf = 0; _0x3dedf < _0x16f6af.length; _0x3dedf++) {
    draw_bg_transition(_0x16f6af[_0x3dedf], SPRITE.WOOD_FIRE);
  }
  var _0x255b28 = world.units[ITEMS.RESURRECTION];
  for (var _0x3dedf = 0; _0x3dedf < _0x255b28.length; _0x3dedf++) {
    draw_bg_transition(_0x255b28[_0x3dedf]);
  }
  var _0x285987 = world.units[ITEMS.EMERALD_MACHINE];
  for (var _0x3dedf = 0; _0x3dedf < _0x285987.length; _0x3dedf++) {
    draw_bg_transition(_0x285987[_0x3dedf]);
  }
  var _0x447295 = world.units[ITEMS.BIG_FIRE];
  for (var _0x3dedf = 0; _0x3dedf < _0x447295.length; _0x3dedf++) {
    draw_bg_transition(_0x447295[_0x3dedf], SPRITE.BIG_FIRE_WOOD);
  }
  var _0x15dadd = world.units[ITEMS.SIGN];
  for (var _0x3dedf = 0; _0x3dedf < _0x15dadd.length; _0x3dedf++) {
    draw_transition(_0x15dadd[_0x3dedf]);
  }
  var _0x1b2d45 = world.units[ITEMS.PLOT];
  for (var _0x3dedf = 0; _0x3dedf < _0x1b2d45.length; _0x3dedf++) {
    draw_transition(_0x1b2d45[_0x3dedf], SPRITE.PLOT);
  }
  var _0x3b367d = world.units[ITEMS.SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3b367d.length; _0x3dedf++) {
    draw_bg_transition(_0x3b367d[_0x3dedf]);
  }
  var _0x3b367d = world.units[ITEMS.TOMATO_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3b367d.length; _0x3dedf++) {
    draw_bg_transition(_0x3b367d[_0x3dedf]);
  }
  var _0x3b367d = world.units[ITEMS.SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3b367d.length; _0x3dedf++) {
    draw_fg_transition(_0x3b367d[_0x3dedf]);
  }
  var _0x1999b9 = world.units[ITEMS.CARROT_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x1999b9.length; _0x3dedf++) {
    if (
      (_0x1999b9[_0x3dedf].info & 15) === 0 ||
      _0x1999b9[_0x3dedf].info === 10
    ) {
      draw_transition(_0x1999b9[_0x3dedf]);
    }
  }
  var _0x538252 = world.units[ITEMS.WATERMELON_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x538252.length; _0x3dedf++) {
    if (
      (_0x538252[_0x3dedf].info & 15) === 0 ||
      _0x538252[_0x3dedf].info === 10
    ) {
      draw_transition(_0x538252[_0x3dedf]);
    }
  }
  var _0x2c4c78 = world.units[ITEMS.ALOE_VERA_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x2c4c78.length; _0x3dedf++) {
    if (
      (_0x2c4c78[_0x3dedf].info & 15) === 0 ||
      _0x2c4c78[_0x3dedf].info === 10
    ) {
      draw_transition(_0x2c4c78[_0x3dedf]);
    }
  }
  var _0x5d4cd3 = world.units[ITEMS.WHEAT_MOB];
  for (var _0x3dedf = 0; _0x3dedf < _0x5d4cd3.length; _0x3dedf++) {
    draw_transition(_0x5d4cd3[_0x3dedf], SPRITE.WHEAT_SEED);
  }
  var _0x59ab43 = world.units[ITEMS.GARLIC_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x59ab43.length; _0x3dedf++) {
    if (
      (_0x59ab43[_0x3dedf].info & 15) === 0 ||
      _0x59ab43[_0x3dedf].info === 10
    ) {
      draw_transition(_0x59ab43[_0x3dedf]);
    }
  }
  var _0x3553d8 = world.units[ITEMS.THORNBUSH_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3553d8.length; _0x3dedf++) {
    if (
      (_0x3553d8[_0x3dedf].info & 15) === 0 ||
      _0x3553d8[_0x3dedf].info === 10
    ) {
      draw_transition(_0x3553d8[_0x3dedf]);
    }
  }
  var _0x39d130 = world.units[ITEMS.PUMPKIN_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x39d130.length; _0x3dedf++) {
    if (
      (_0x39d130[_0x3dedf].info & 15) === 0 ||
      _0x39d130[_0x3dedf].info === 10
    ) {
      draw_transition(_0x39d130[_0x3dedf]);
    }
  }
  var _0x5d4cd3 = world.units[ITEMS.WHEAT_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x5d4cd3.length; _0x3dedf++) {
    draw_transition(_0x5d4cd3[_0x3dedf]);
  }
  var _0x3a97ad = world.units[ITEMS.CRATE];
  for (var _0x3dedf = 0; _0x3dedf < _0x3a97ad.length; _0x3dedf++) {
    draw_transition(_0x3a97ad[_0x3dedf], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var _0x2a9011 = world.units[ITEMS.DEAD_BOX];
  for (var _0x3dedf = 0; _0x3dedf < _0x2a9011.length; _0x3dedf++) {
    draw_transition(_0x2a9011[_0x3dedf], SPRITE.CRATE, SPRITE.HURT_DEAD_BOX);
  }
  var _0x1ed228 = world.units[ITEMS.GIFT];
  for (var _0x3dedf = 0; _0x3dedf < _0x1ed228.length; _0x3dedf++) {
    draw_transition(_0x1ed228[_0x3dedf], SPRITE.GIFT, SPRITE.HURT_GIFT);
  }
  var _0x17fbd4 = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info & 1) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info & 1) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.WOOD_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info & 1) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_WOOD_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.STONE_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info & 1) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_STONE_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.GOLD_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.DIAMOND_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_DIAMOND_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.AMETHYST_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_AMETHYST_OPEN);
    }
  }
  var _0x17fbd4 = world.units[ITEMS.REIDITE_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (_0x17fbd4[_0x3dedf].info) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_GOLD_OPEN);
    }
  }
  var _0x212aa8 = world.units[ITEMS.RABBIT];
  for (var _0x3dedf = 0; _0x3dedf < _0x212aa8.length; _0x3dedf++) {
    draw_transition(_0x212aa8[_0x3dedf], SPRITE.RABBIT, SPRITE.HURT_RABBIT);
  }
  var _0x169935 = world.units[ITEMS.BED];
  for (var _0x3dedf = 0; _0x3dedf < _0x169935.length; _0x3dedf++) {
    draw_transition(_0x169935[_0x3dedf], SPRITE.BED);
  }
  var _0x100714 = world.units[ITEMS.SAND_WORM];
  for (var _0x3dedf = 0; _0x3dedf < _0x100714.length; _0x3dedf++) {
    draw_transition(
      _0x100714[_0x3dedf],
      SPRITE.SAND_WORM,
      SPRITE.HURT_SAND_WORM
    );
  }
  var _0x380615 = world.units[ITEMS.SPELL];
  for (var _0x3dedf = 0; _0x3dedf < _0x380615.length; _0x3dedf++) {
    if (_0x380615[_0x3dedf].fly === 0) {
      draw_transition(_0x380615[_0x3dedf]);
    }
  }
  var _0x270927 = world.units[ITEMS.PLAYERS];
  for (var _0x3dedf = 0; _0x3dedf < _0x270927.length; _0x3dedf++) {
    var _0x1800c7 = _0x270927[_0x3dedf];
    if (
      _0x270927[_0x3dedf].vehicle !== INV.BABY_DRAGON &&
      _0x270927[_0x3dedf].vehicle !== INV.BABY_LAVA &&
      _0x270927[_0x3dedf].vehicle !== INV.HAWK &&
      _0x270927[_0x3dedf].vehicle !== INV.PLANE &&
      _0x270927[_0x3dedf].vehicle !== INV.NIMBUS
    ) {
      if (_0x1800c7.tower === 0) {
        if (_0x1800c7.tower_fx > 0.001) {
          _0x1800c7.tower_fx = Utils.lerp(_0x1800c7.tower_fx, 0, 0.018);
          var _0x3a96d9 =
            1 + 0.18 * Math.min(1, Math.max(_0x1800c7.tower_fx, 0) / 100);
          ctx.save();
          ctx.scale(_0x3a96d9, _0x3a96d9);
          user.cam.x /= _0x3a96d9;
          user.cam.y /= _0x3a96d9;
          _0x1800c7.x /= _0x3a96d9;
          _0x1800c7.y /= _0x3a96d9;
          _0x1800c7.r.x /= _0x3a96d9;
          _0x1800c7.r.y /= _0x3a96d9;
          _0x1800c7.draw_vehicle();
          _0x1800c7.draw();
          user.cam.x *= _0x3a96d9;
          user.cam.y *= _0x3a96d9;
          _0x1800c7.x *= _0x3a96d9;
          _0x1800c7.y *= _0x3a96d9;
          _0x1800c7.r.x *= _0x3a96d9;
          _0x1800c7.r.y *= _0x3a96d9;
          ctx.restore();
        } else {
          _0x1800c7.fly = 0;
          _0x1800c7.draw_vehicle();
          _0x1800c7.draw();
        }
      }
    } else {
      if (_0x1800c7.speed <= 180) {
        ctx.save();
        var _0x3a96d9 =
          1 + 0.35 * Math.min(1, Math.max(_0x1800c7.vehicle_fx5 - 30, 0) / 180);
        ctx.scale(_0x3a96d9, _0x3a96d9);
        user.cam.x /= _0x3a96d9;
        user.cam.y /= _0x3a96d9;
        _0x1800c7.x /= _0x3a96d9;
        _0x1800c7.y /= _0x3a96d9;
        _0x1800c7.r.x /= _0x3a96d9;
        _0x1800c7.r.y /= _0x3a96d9;
        _0x1800c7.fly = 0;
        _0x1800c7.draw_vehicle();
        _0x1800c7.draw();
        user.cam.x *= _0x3a96d9;
        user.cam.y *= _0x3a96d9;
        _0x1800c7.x *= _0x3a96d9;
        _0x1800c7.y *= _0x3a96d9;
        _0x1800c7.r.x *= _0x3a96d9;
        _0x1800c7.r.y *= _0x3a96d9;
        ctx.restore();
      }
    }
  }
  var _0x169935 = world.units[ITEMS.BED];
  for (var _0x3dedf = 0; _0x3dedf < _0x169935.length; _0x3dedf++) {
    draw_transition(_0x169935[_0x3dedf], SPRITE.BED_TOP);
  }
  var _0x1ac871 = world.units[ITEMS.CRAB];
  for (var _0x3dedf = 0; _0x3dedf < _0x1ac871.length; _0x3dedf++) {
    draw_transition(_0x1ac871[_0x3dedf]);
  }
  var _0x8a7c5e = world.units[ITEMS.FOX];
  for (var _0x3dedf = 0; _0x3dedf < _0x8a7c5e.length; _0x3dedf++) {
    draw_transition(_0x8a7c5e[_0x3dedf], SPRITE.FOX, SPRITE.HURT_FOX);
  }
  var _0x5a44ec = world.units[ITEMS.BOAR];
  for (var _0x3dedf = 0; _0x3dedf < _0x5a44ec.length; _0x3dedf++) {
    draw_transition(_0x5a44ec[_0x3dedf]);
  }
  var _0x5b010f = world.units[ITEMS.WOLF];
  for (var _0x3dedf = 0; _0x3dedf < _0x5b010f.length; _0x3dedf++) {
    draw_transition(_0x5b010f[_0x3dedf], SPRITE.WOLF, SPRITE.HURT_WOLF);
  }
  var _0x499d7c = world.units[ITEMS.BABY_DRAGON];
  for (var _0x3dedf = 0; _0x3dedf < _0x499d7c.length; _0x3dedf++) {
    draw_transition(
      _0x499d7c[_0x3dedf],
      SPRITE.BABY_DRAGON,
      SPRITE.HURT_BABY_DRAGON
    );
  }
  var _0x2c442c = world.units[ITEMS.BABY_LAVA];
  for (var _0x3dedf = 0; _0x3dedf < _0x2c442c.length; _0x3dedf++) {
    draw_transition(
      _0x2c442c[_0x3dedf],
      SPRITE.BABY_LAVA,
      SPRITE.HURT_BABY_LAVA
    );
  }
  var _0x1999b9 = world.units[ITEMS.CARROT_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x1999b9.length; _0x3dedf++) {
    if (
      (_0x1999b9[_0x3dedf].info & 15) !== 0 &&
      _0x1999b9[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x1999b9[_0x3dedf]);
    }
  }
  var _0x538252 = world.units[ITEMS.WATERMELON_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x538252.length; _0x3dedf++) {
    if (
      (_0x538252[_0x3dedf].info & 15) !== 0 &&
      _0x538252[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x538252[_0x3dedf]);
    }
  }
  var _0x2c4c78 = world.units[ITEMS.ALOE_VERA_MOB];
  for (var _0x3dedf = 0; _0x3dedf < _0x2c4c78.length; _0x3dedf++) {
    draw_transition(_0x2c4c78[_0x3dedf], SPRITE.ALOE_VERA);
  }
  var _0x2c4c78 = world.units[ITEMS.ALOE_VERA_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x2c4c78.length; _0x3dedf++) {
    if (
      (_0x2c4c78[_0x3dedf].info & 15) !== 0 &&
      _0x2c4c78[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x2c4c78[_0x3dedf]);
    }
  }
  var _0x3b367d = world.units[ITEMS.TOMATO_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3b367d.length; _0x3dedf++) {
    draw_fg_transition(_0x3b367d[_0x3dedf]);
  }
  var _0x59ab43 = world.units[ITEMS.GARLIC_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x59ab43.length; _0x3dedf++) {
    if (
      (_0x59ab43[_0x3dedf].info & 15) !== 0 &&
      _0x59ab43[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x59ab43[_0x3dedf]);
    }
  }
  var _0x3553d8 = world.units[ITEMS.THORNBUSH_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x3553d8.length; _0x3dedf++) {
    if (
      (_0x3553d8[_0x3dedf].info & 15) !== 0 &&
      _0x3553d8[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x3553d8[_0x3dedf]);
    }
  }
  var _0x39d130 = world.units[ITEMS.PUMPKIN_SEED];
  for (var _0x3dedf = 0; _0x3dedf < _0x39d130.length; _0x3dedf++) {
    if (
      (_0x39d130[_0x3dedf].info & 15) !== 0 &&
      _0x39d130[_0x3dedf].info !== 10
    ) {
      draw_transition(_0x39d130[_0x3dedf]);
    }
  }
  var _0x399c98 = world.units[ITEMS.TREASURE_CHEST];
  for (var _0x3dedf = 0; _0x3dedf < _0x399c98.length; _0x3dedf++) {
    draw_transition(
      _0x399c98[_0x3dedf],
      SPRITE.TREASURE_CHEST,
      SPRITE.HURT_TREASURE_CHEST
    );
  }
  var _0x4bbdfd = world.units[ITEMS.KRAKEN];
  for (var _0x3dedf = 0; _0x3dedf < _0x4bbdfd.length; _0x3dedf++) {
    draw_transition(_0x4bbdfd[_0x3dedf], SPRITE.KRAKEN, SPRITE.HURT_KRAKEN);
  }
  var _0x17000b = world.units[ITEMS.PIRANHA];
  for (var _0x3dedf = 0; _0x3dedf < _0x17000b.length; _0x3dedf++) {
    draw_transition(_0x17000b[_0x3dedf], SPRITE.PIRANHA, SPRITE.HURT_PIRANHA);
  }
  var _0x18c5c4 = world.units[ITEMS.SPIDER];
  for (var _0x3dedf = 0; _0x3dedf < _0x18c5c4.length; _0x3dedf++) {
    draw_transition(_0x18c5c4[_0x3dedf], SPRITE.SPIDER, SPRITE.HURT_SPIDER);
  }
  var _0x4bbdf3 = world.units[ITEMS.PENGUIN];
  for (var _0x3dedf = 0; _0x3dedf < _0x4bbdf3.length; _0x3dedf++) {
    draw_transition(_0x4bbdf3[_0x3dedf], SPRITE.PENGUIN, SPRITE.HURT_PENGUIN);
  }
  var _0x148e9d = world.units[ITEMS.BEAR];
  for (var _0x3dedf = 0; _0x3dedf < _0x148e9d.length; _0x3dedf++) {
    draw_transition(_0x148e9d[_0x3dedf], SPRITE.BEAR, SPRITE.HURT_BEAR);
  }
  var _0x3b7456 = world.units[ITEMS.BABY_MAMMOTH];
  for (var _0x3dedf = 0; _0x3dedf < _0x3b7456.length; _0x3dedf++) {
    draw_transition(_0x3b7456[_0x3dedf]);
  }
  var _0xa38d51 = world.units[ITEMS.FLAME];
  for (var _0x3dedf = 0; _0x3dedf < _0xa38d51.length; _0x3dedf++) {
    draw_transition(_0xa38d51[_0x3dedf], SPRITE.FIRE_MOB, SPRITE.HURT_FIRE_MOB);
  }
  var _0x2d715d = world.units[ITEMS.CRAB_BOSS];
  for (var _0x3dedf = 0; _0x3dedf < _0x2d715d.length; _0x3dedf++) {
    draw_transition(_0x2d715d[_0x3dedf]);
  }
  var _0x1f3b57 = world.units[ITEMS.MAMMOTH];
  for (var _0x3dedf = 0; _0x3dedf < _0x1f3b57.length; _0x3dedf++) {
    draw_transition(_0x1f3b57[_0x3dedf], SPRITE.MAMMOTH, SPRITE.HURT_MAMMOTH);
  }
  var _0x2cc1be = world.units[ITEMS.DRAGON];
  for (var _0x3dedf = 0; _0x3dedf < _0x2cc1be.length; _0x3dedf++) {
    if (_0x2cc1be[_0x3dedf].scale === 1) {
      draw_transition(_0x2cc1be[_0x3dedf], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var _0x2cc1be = world.units[ITEMS.LAVA_DRAGON];
  for (var _0x3dedf = 0; _0x3dedf < _0x2cc1be.length; _0x3dedf++) {
    if (_0x2cc1be[_0x3dedf].scale === 1) {
      draw_transition(
        _0x2cc1be[_0x3dedf],
        SPRITE.LAVA_DRAGON,
        SPRITE.HURT_LAVA_DRAGON
      );
    }
  }
  var _0x40fffb = world.units[ITEMS.CHEST];
  for (var _0x3dedf = 0; _0x3dedf < _0x40fffb.length; _0x3dedf++) {
    draw_transition(_0x40fffb[_0x3dedf]);
  }
  var _0xa0944 = world.units[ITEMS.WORKBENCH];
  for (var _0x3dedf = 0; _0x3dedf < _0xa0944.length; _0x3dedf++) {
    draw_transition(_0xa0944[_0x3dedf], SPRITE.WORKBENCH);
  }
  var _0xd4b76d = world.units[ITEMS.FURNACE];
  for (var _0x3dedf = 0; _0x3dedf < _0xd4b76d.length; _0x3dedf++) {
    draw_transition(_0xd4b76d[_0x3dedf]);
  }
  var _0x17712e = world.units[ITEMS.BREAD_OVEN];
  for (var _0x3dedf = 0; _0x3dedf < _0x17712e.length; _0x3dedf++) {
    draw_transition(_0x17712e[_0x3dedf]);
  }
  var _0x17fbd4 = world.units[ITEMS.WOOD_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_WOOD_CLOSE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.STONE_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_STONE_CLOSE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.GOLD_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_GOLD_CLOSE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.DIAMOND_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_DIAMOND_CLOSE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.AMETHYST_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DOOR_AMETHYST_CLOSE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.REIDITE_DOOR];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.REIDITE_DOOR);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.WOOD_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.WOOD_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.STONE_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.STONE_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.GOLD_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.GOLD_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.DIAMOND_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.DIAMOND_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.AMETHYST_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.AMETHYST_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x17fbd4 = world.units[ITEMS.REIDITE_DOOR_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x17fbd4.length; _0x3dedf++) {
    if (!(_0x17fbd4[_0x3dedf].info & 1)) {
      draw_transition(_0x17fbd4[_0x3dedf], SPRITE.REIDITE_DOOR_SPIKE);
    }
    _0x17fbd4[_0x3dedf].draw_life(_0x17fbd4[_0x3dedf].info >> 1);
  }
  var _0x34f028 = world.units[ITEMS.WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x34f028 = world.units[ITEMS.STONE_WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.STONE_WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x34f028 = world.units[ITEMS.GOLD_WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.GOLD_WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x34f028 = world.units[ITEMS.DIAMOND_WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.DIAMOND_WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x34f028 = world.units[ITEMS.AMETHYST_WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.AMETHYST_WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x34f028 = world.units[ITEMS.REIDITE_WALL];
  for (var _0x3dedf = 0; _0x3dedf < _0x34f028.length; _0x3dedf++) {
    draw_transition(_0x34f028[_0x3dedf], SPRITE.REIDITE_WALL);
    _0x34f028[_0x3dedf].draw_life(_0x34f028[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.STONE_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.STONE_SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.GOLD_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.GOLD_SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.DIAMOND_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.DIAMOND_SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.AMETHYST_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.AMETHYST_SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x248acb = world.units[ITEMS.REIDITE_SPIKE];
  for (var _0x3dedf = 0; _0x3dedf < _0x248acb.length; _0x3dedf++) {
    draw_transition(_0x248acb[_0x3dedf], SPRITE.REIDITE_SPIKE);
    _0x248acb[_0x3dedf].draw_life(_0x248acb[_0x3dedf].info);
  }
  var _0x35641e = world.units[ITEMS.WELL];
  for (var _0x3dedf = 0; _0x3dedf < _0x35641e.length; _0x3dedf++) {
    var _0x3845a8 = _0x35641e[_0x3dedf];
    if (_0x3845a8.info > 0) {
      draw_transition(_0x3845a8, SPRITE.WELL_FULL);
    } else {
      draw_transition(_0x3845a8, SPRITE.WELL_EMPTY);
    }
  }
  var _0x384b98 = world.units[ITEMS.TOTEM];
  for (var _0x3dedf = 0; _0x3dedf < _0x384b98.length; _0x3dedf++) {
    draw_transition(_0x384b98[_0x3dedf], SPRITE.TOTEM);
  }
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.GOLD,
    "g",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.GOLD_WINTER,
    "gw",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.DIAMOND,
    "d",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.DIAMOND_WINTER,
    "dw",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.PLANT,
    "p",
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.EMERALD,
    "m",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.AMETHYST,
    "a",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.REIDITE,
    "re",
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.SHADOW_CAVE_STONES,
    "cs",
    3,
    3
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.SHADOW_CAVE_STONES,
    "cs",
    2,
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.SHADOW_CAVE_STONES,
    "cs",
    1,
    1
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.SHADOW_CAVE_STONES,
    "cs",
    0,
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.CAVE_STONES,
    "cs",
    3,
    3
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.CAVE_STONES,
    "cs",
    2,
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.CAVE_STONES,
    "cs",
    1,
    1
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.CAVE_STONES,
    "cs",
    0,
    0
  );
  var _0x5d4219 = world.units[ITEMS.FRUIT];
  for (var _0x3dedf = 0; _0x3dedf < _0x5d4219.length; _0x3dedf++) {
    for (var _0x1f0bb9 = 0; _0x1f0bb9 < _0x5d4219[_0x3dedf].info; _0x1f0bb9++) {
      draw_transition(_0x5d4219[_0x3dedf].fruits[_0x1f0bb9], SPRITE.FRUIT);
    }
  }
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.STONES,
    "s",
    2
  );
  var _0xd0259a = world.units[ITEMS.EXTRACTOR_MACHINE_STONE];
  for (var _0x3dedf = 0; _0x3dedf < _0xd0259a.length; _0x3dedf++) {
    draw_transition(_0xd0259a[_0x3dedf]);
  }
  var _0xd0259a = world.units[ITEMS.EXTRACTOR_MACHINE_GOLD];
  for (var _0x3dedf = 0; _0x3dedf < _0xd0259a.length; _0x3dedf++) {
    draw_transition(_0xd0259a[_0x3dedf]);
  }
  var _0xd0259a = world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND];
  for (var _0x3dedf = 0; _0x3dedf < _0xd0259a.length; _0x3dedf++) {
    draw_transition(_0xd0259a[_0x3dedf]);
  }
  var _0xd0259a = world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST];
  for (var _0x3dedf = 0; _0x3dedf < _0xd0259a.length; _0x3dedf++) {
    draw_transition(_0xd0259a[_0x3dedf]);
  }
  var _0xd0259a = world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE];
  for (var _0x3dedf = 0; _0x3dedf < _0xd0259a.length; _0x3dedf++) {
    draw_transition(_0xd0259a[_0x3dedf]);
  }
  var _0x4e433d = world.units[ITEMS.WINDMILL];
  for (var _0x3dedf = 0; _0x3dedf < _0x4e433d.length; _0x3dedf++) {
    draw_bg_transition(_0x4e433d[_0x3dedf]);
  }
  var _0x16f6af = world.units[ITEMS.FIRE];
  for (var _0x3dedf = 0; _0x3dedf < _0x16f6af.length; _0x3dedf++) {
    draw_fg_transition(_0x16f6af[_0x3dedf]);
  }
  var _0x16f6af = world.units[ITEMS.BIG_FIRE];
  for (var _0x3dedf = 0; _0x3dedf < _0x16f6af.length; _0x3dedf++) {
    draw_fg_transition(_0x16f6af[_0x3dedf]);
  }
  var _0xd4b76d = world.units[ITEMS.FURNACE];
  for (var _0x3dedf = 0; _0x3dedf < _0xd4b76d.length; _0x3dedf++) {
    if (_0xd4b76d[_0x3dedf].action == 2) {
      draw_fg_transition(_0xd4b76d[_0x3dedf]);
    }
  }
  var _0x17712e = world.units[ITEMS.BREAD_OVEN];
  for (var _0x3dedf = 0; _0x3dedf < _0x17712e.length; _0x3dedf++) {
    draw_fg_transition(_0x17712e[_0x3dedf]);
  }
  var _0x255b28 = world.units[ITEMS.RESURRECTION];
  for (var _0x3dedf = 0; _0x3dedf < _0x255b28.length; _0x3dedf++) {
    draw_fg_transition(_0x255b28[_0x3dedf]);
  }
  var _0x285987 = world.units[ITEMS.EMERALD_MACHINE];
  for (var _0x3dedf = 0; _0x3dedf < _0x285987.length; _0x3dedf++) {
    draw_fg_transition(_0x285987[_0x3dedf]);
    _0x285987[_0x3dedf].draw_life(_0x285987[_0x3dedf].info);
  }
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.CACTUS,
    "c",
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.TREE,
    "t",
    5,
    4
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.FIR,
    "f",
    2,
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.PALM,
    "plm",
    0,
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.TREE_BRANCH,
    "b",
    3,
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.TREE,
    "t",
    3,
    2
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.TREE_BRANCH,
    "b",
    1,
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.FIR,
    "f",
    1,
    1
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.PALM,
    "plm",
    1,
    1
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.TREE,
    "t",
    1,
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.FIR,
    "f",
    0,
    0
  );
  draw_map_transition(
    draw_map_objects,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.PALM,
    "plm",
    2,
    2
  );
  var _0x4e433d = world.units[ITEMS.WINDMILL];
  for (var _0x3dedf = 0; _0x3dedf < _0x4e433d.length; _0x3dedf++) {
    draw_fg_transition(_0x4e433d[_0x3dedf]);
  }
  var _0xd48395 = world.units[ITEMS.WOOD_TOWER];
  for (var _0x3dedf = 0; _0x3dedf < _0xd48395.length; _0x3dedf++) {
    draw_transition(_0xd48395[_0x3dedf], SPRITE.WOOD_TOWER);
  }
  var _0x270927 = world.units[ITEMS.PLAYERS];
  for (var _0x3dedf = 0; _0x3dedf < _0x270927.length; _0x3dedf++) {
    var _0x1800c7 = _0x270927[_0x3dedf];
    if (
      _0x1800c7.tower === 1 &&
      (_0x1800c7.speed < 180 ||
        (_0x1800c7.vehicle !== INV.BABY_DRAGON &&
          _0x1800c7.vehicle !== INV.BABY_LAVA &&
          _0x1800c7.vehicle !== INV.NIMBUS &&
          _0x1800c7.vehicle !== INV.HAWK &&
          _0x1800c7.vehicle !== INV.PLANE))
    ) {
      _0x1800c7.tower_fx = Utils.lerp(_0x1800c7.tower_fx, 100, 0.018);
      var _0x3a96d9 =
        1 + 0.18 * Math.min(1, Math.max(_0x1800c7.tower_fx, 0) / 100);
      ctx.save();
      ctx.scale(_0x3a96d9, _0x3a96d9);
      user.cam.x /= _0x3a96d9;
      user.cam.y /= _0x3a96d9;
      _0x1800c7.x /= _0x3a96d9;
      _0x1800c7.y /= _0x3a96d9;
      _0x1800c7.r.x /= _0x3a96d9;
      _0x1800c7.r.y /= _0x3a96d9;
      _0x1800c7.draw_vehicle();
      _0x1800c7.draw();
      user.cam.x *= _0x3a96d9;
      user.cam.y *= _0x3a96d9;
      _0x1800c7.x *= _0x3a96d9;
      _0x1800c7.y *= _0x3a96d9;
      _0x1800c7.r.x *= _0x3a96d9;
      _0x1800c7.r.y *= _0x3a96d9;
      ctx.restore();
    }
  }
  var _0x296aaa = world.units[ITEMS.ROOF];
  for (var _0x3dedf = 0; _0x3dedf < _0x296aaa.length; _0x3dedf++) {
    draw_transition(_0x296aaa[_0x3dedf], SPRITE.ROOF);
    _0x296aaa[_0x3dedf].draw_life(_0x296aaa[_0x3dedf].info);
  }
  var _0x2e3010 = world.units[ITEMS.FIREFLY];
  for (var _0x3dedf = 0; _0x3dedf < _0x2e3010.length; _0x3dedf++) {
    draw_transition(_0x2e3010[_0x3dedf], SPRITE.FIREFLY, SPRITE.HURT_FIREFLY);
  }
  var _0x2d2519 = world.units[ITEMS.GARLAND];
  for (var _0x3dedf = 0; _0x3dedf < _0x2d2519.length; _0x3dedf++) {
    draw_transition(_0x2d2519[_0x3dedf], SPRITE.GARLAND);
  }
  var _0x270927 = world.units[ITEMS.PLAYERS];
  for (var _0x3dedf = 0; _0x3dedf < _0x270927.length; _0x3dedf++) {
    var _0x1800c7 = _0x270927[_0x3dedf];
    if (
      (_0x1800c7.vehicle === INV.BABY_DRAGON ||
        _0x1800c7.vehicle === INV.BABY_LAVA ||
        _0x1800c7.vehicle === INV.NIMBUS ||
        _0x1800c7.vehicle === INV.HAWK ||
        _0x1800c7.vehicle === INV.PLANE) &&
      _0x1800c7.speed > 180
    ) {
      _0x1800c7.fly = 1;
      ctx.save();
      var _0x3a96d9 =
        1 + 0.35 * Math.min(1, Math.max(_0x1800c7.vehicle_fx5 - 30, 0) / 180);
      ctx.scale(_0x3a96d9, _0x3a96d9);
      user.cam.x /= _0x3a96d9;
      user.cam.y /= _0x3a96d9;
      _0x1800c7.x /= _0x3a96d9;
      _0x1800c7.y /= _0x3a96d9;
      _0x1800c7.r.x /= _0x3a96d9;
      _0x1800c7.r.y /= _0x3a96d9;
      _0x1800c7.draw_vehicle();
      _0x1800c7.draw();
      user.cam.x *= _0x3a96d9;
      user.cam.y *= _0x3a96d9;
      _0x1800c7.x *= _0x3a96d9;
      _0x1800c7.y *= _0x3a96d9;
      _0x1800c7.r.x *= _0x3a96d9;
      _0x1800c7.r.y *= _0x3a96d9;
      ctx.restore();
    }
  }
  var _0x380615 = world.units[ITEMS.SPELL];
  for (var _0x3dedf = 0; _0x3dedf < _0x380615.length; _0x3dedf++) {
    if (_0x380615[_0x3dedf].fly === 1) {
      draw_transition(_0x380615[_0x3dedf]);
    }
  }
  var _0x2cc1be = world.units[ITEMS.DRAGON];
  for (var _0x3dedf = 0; _0x3dedf < _0x2cc1be.length; _0x3dedf++) {
    if (_0x2cc1be[_0x3dedf].scale > 1) {
      draw_transition(_0x2cc1be[_0x3dedf], SPRITE.DRAGON, SPRITE.HURT_DRAGON);
    }
  }
  var _0x2cc1be = world.units[ITEMS.LAVA_DRAGON];
  for (var _0x3dedf = 0; _0x3dedf < _0x2cc1be.length; _0x3dedf++) {
    if (_0x2cc1be[_0x3dedf].scale > 1) {
      draw_transition(
        _0x2cc1be[_0x3dedf],
        SPRITE.LAVA_DRAGON,
        SPRITE.HURT_LAVA_DRAGON
      );
    }
  }
  var _0x4537c9 = world.units[ITEMS.HAWK];
  for (var _0x3dedf = 0; _0x3dedf < _0x4537c9.length; _0x3dedf++) {
    draw_transition(_0x4537c9[_0x3dedf], SPRITE.HAWK, SPRITE.HURT_HAWK);
  }
  var _0xe2edcc = world.units[ITEMS.VULTURE];
  for (var _0x3dedf = 0; _0x3dedf < _0xe2edcc.length; _0x3dedf++) {
    draw_transition(_0xe2edcc[_0x3dedf], SPRITE.VULTURE, SPRITE.HURT_VULTURE);
  }
  __effect += delta * 15;
  if (__effect > 60) {
    __effect -= 60;
  }
  draw_map_transition(
    draw_objects_effect,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.FOG,
    "fo",
    2
  );
  draw_map_transition(
    draw_objects_effect,
    _0x17b53a,
    _0x597c2d,
    _0x3d07b6,
    _0x5ec69b,
    SPRITE.FOD,
    "fod",
    2
  );

  if (Settings.JoinLeave) {
    let e = 400;
    if (JoinLeave.toggle11) {
      ctx.save();
      ctx.font = "18px Baloo Paaji";
      ctx.strokeStyle = "black";
      ctx.lineWidth = 7;
      ctx.fillStyle = "green";
      for (o = 0; o < JoinLeave.Join.length; o++) {
        ctx.strokeText(JoinLeave.Join[o], 0, e);
        ctx.fillText(JoinLeave.Join[o], 0, e);
        e += 20;
      }
      ctx.restore();
    }
    if (JoinLeave.toggle22) {
      ctx.save();
      ctx.font = "18px Baloo Paaji";
      ctx.strokeStyle = "black";
      ctx.lineWidth = 7;
      ctx.fillStyle = "red";
      for (o = 0; o < JoinLeave.Leave.length; o++) {
        ctx.strokeText(JoinLeave.Leave[o], 0, e);
        ctx.fillText(JoinLeave.Leave[o], 0, e);
        e += 20;
      }
      ctx.restore();
    }
  }
}
function draw_bg_transition(_0x5925ed, _0x1c61ae) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x5925ed.draw_bg(_0x1c61ae);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x5925ed.draw_bg(_0x1c61ae);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x5925ed.draw_bg(_0x1c61ae);
  }
}
function draw_fg_transition(_0x170564, _0x23f8bc) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x170564.draw_fg(_0x23f8bc);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x170564.draw_fg(_0x23f8bc);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x170564.draw_fg(_0x23f8bc);
  }
}
function draw_image_transition_2(
  _0x543a70,
  _0x542a62,
  _0x57ff03,
  _0x10fc1b,
  _0xebbaf0
) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(
      ctx,
      sprite[_0x543a70][_0x542a62][world.time],
      _0x10fc1b,
      _0xebbaf0
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(
      ctx,
      sprite[_0x543a70][_0x542a62][world.time],
      _0x10fc1b,
      _0xebbaf0
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, _0x57ff03, _0x10fc1b, _0xebbaf0);
  }
}
function draw_image_transition(_0x589b82, _0x563f98, _0x400896, _0x53e3ea) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(ctx, sprite[_0x589b82][world.time], _0x400896, _0x53e3ea);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(ctx, sprite[_0x589b82][world.time], _0x400896, _0x53e3ea);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(ctx, _0x563f98, _0x400896, _0x53e3ea);
  }
}
function draw_image_transition_hd_2(
  _0x39a46b,
  _0x4cf61d,
  _0x2001d0,
  _0x3bdbe3,
  _0x14880b
) {
  var _0x2e7491 = _0x2001d0.width;
  var _0x2749eb = _0x2001d0.height;
  var _0xba25d7 = Math.floor(_0x2e7491 / 2);
  var _0x57e845 = Math.floor(_0x2749eb / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(
      ctx,
      sprite[_0x39a46b][_0x4cf61d][world.time],
      0,
      0,
      _0x2e7491,
      _0x2749eb,
      _0x3bdbe3,
      _0x14880b,
      _0xba25d7,
      _0x57e845
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(
      ctx,
      sprite[_0x39a46b][_0x4cf61d][world.time],
      0,
      0,
      _0x2e7491,
      _0x2749eb,
      _0x3bdbe3,
      _0x14880b,
      _0xba25d7,
      _0x57e845
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(
      ctx,
      sprite[_0x39a46b][_0x4cf61d][world.time],
      0,
      0,
      _0x2e7491,
      _0x2749eb,
      _0x3bdbe3,
      _0x14880b,
      _0xba25d7,
      _0x57e845
    );
  }
}
function draw_image_transition_hd(_0x552e0f, _0xb02931, _0x3bcf97, _0x1b4073) {
  var _0x4eec16 = _0xb02931.width;
  var _0x3fb58e = _0xb02931.height;
  var _0x387b97 = Math.floor(_0x4eec16 / 2);
  var _0x59a9a1 = Math.floor(_0x3fb58e / 2);
  if (world.transition) {
    ctx.globalAlpha = 1;
    ctxDrawImage(
      ctx,
      sprite[_0x552e0f][world.time],
      0,
      0,
      _0x4eec16,
      _0x3fb58e,
      _0x3bcf97,
      _0x1b4073,
      _0x387b97,
      _0x59a9a1
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(
      ctx,
      sprite[_0x552e0f][world.time],
      0,
      0,
      _0x4eec16,
      _0x3fb58e,
      _0x3bcf97,
      _0x1b4073,
      _0x387b97,
      _0x59a9a1
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctxDrawImage(
      ctx,
      _0xb02931,
      0,
      0,
      _0x4eec16,
      _0x3fb58e,
      _0x3bcf97,
      _0x1b4073,
      _0x387b97,
      _0x59a9a1
    );
  }
}
function draw_swim(_0x30bbf8) {
  ctx.globalAlpha = _0x30bbf8.alpha;
  circle(ctx, _0x30bbf8.x + user.cam.x, _0x30bbf8.y + user.cam.y, _0x30bbf8.r);
  fill_path(ctx, SPRITE.SWIM_COLOR[world.time]);
  ctx.globalAlpha = 1;
}
function draw_foot(_0x1cc55c) {
  ctx.save();
  ctx.translate(user.cam.x + _0x1cc55c.x, user.cam.y + _0x1cc55c.y);
  ctx.rotate(_0x1cc55c.angle);
  ctx.globalAlpha = _0x1cc55c.alpha;
  var _0x4d6213 = sprite[_0x1cc55c.id][world.time];
  ctxDrawImage(ctx, _0x4d6213, -_0x4d6213.width / 2, -_0x4d6213.height / 2);
  ctx.globalAlpha = 1;
  ctx.restore();
}
function draw_imgs_transition(
  _0x35d7df,
  _0x34e524,
  _0x1b1f00,
  _0x4dd3e2,
  _0x366417
) {
  if (world.transition && _0x366417 == 1) {
    ctx.globalAlpha = 1;
    ctxDrawImage(
      ctx,
      sprite[_0x35d7df][world.time][_0x34e524],
      _0x1b1f00,
      _0x4dd3e2
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    ctxDrawImage(
      ctx,
      sprite[_0x35d7df][world.time][_0x34e524],
      _0x1b1f00,
      _0x4dd3e2
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    ctx.globalAlpha = _0x366417;
    ctxDrawImage(
      ctx,
      sprite[_0x35d7df][world.time][_0x34e524],
      _0x1b1f00,
      _0x4dd3e2
    );
    ctx.globalAlpha = 1;
  }
}
function draw_transition(_0x57aebd, _0x4f0964, _0x56c92f) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x57aebd.draw(_0x4f0964, _0x56c92f);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x57aebd.draw(_0x4f0964, _0x56c92f);
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x57aebd.draw(_0x4f0964, _0x56c92f);
  }
}
function draw_map_transition(
  _0x48b3da,
  _0x40e2ba,
  _0xd9866a,
  _0x5db7ea,
  _0x22c840,
  _0x33b93d,
  _0x3f6f57,
  _0x4ba990,
  _0x4f36fb,
  _0x5ac143
) {
  if (world.transition) {
    ctx.globalAlpha = 1;
    _0x48b3da(
      _0x40e2ba,
      _0xd9866a,
      _0x5db7ea,
      _0x22c840,
      _0x33b93d,
      _0x3f6f57,
      _0x4ba990,
      _0x4f36fb,
      _0x5ac143
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1 - world.shade.v;
    _0x48b3da(
      _0x40e2ba,
      _0xd9866a,
      _0x5db7ea,
      _0x22c840,
      _0x33b93d,
      _0x3f6f57,
      _0x4ba990,
      _0x4f36fb,
      _0x5ac143
    );
    world.time = world.time ? 0 : 1;
    ctx.globalAlpha = 1;
  } else {
    _0x48b3da(
      _0x40e2ba,
      _0xd9866a,
      _0x5db7ea,
      _0x22c840,
      _0x33b93d,
      _0x3f6f57,
      _0x4ba990,
      _0x4f36fb,
      _0x5ac143
    );
  }
}
function get_color_transition(
  _0x370627,
  _0xf67e1,
  _0x22d83b,
  _0x297465,
  _0x577286,
  _0x42cc73,
  _0x5985cc
) {
  var _0x34472e = "#";
  var _0x385a5f = Math.floor(
    _0x297465 * _0x5985cc + (1 - _0x5985cc) * _0x370627
  );
  _0x34472e +=
    _0x385a5f < 16 ? "0" + _0x385a5f.toString(16) : _0x385a5f.toString(16);
  var _0x385a5f = Math.floor(
    _0x577286 * _0x5985cc + (1 - _0x5985cc) * _0xf67e1
  );
  _0x34472e +=
    _0x385a5f < 16 ? "0" + _0x385a5f.toString(16) : _0x385a5f.toString(16);
  var _0x385a5f = Math.floor(
    _0x42cc73 * _0x5985cc + (1 - _0x5985cc) * _0x22d83b
  );
  _0x34472e +=
    _0x385a5f < 16 ? "0" + _0x385a5f.toString(16) : _0x385a5f.toString(16);
  return _0x34472e;
}
function draw_simple_ground() {
  if (world.transition) {
    var _0x136f38 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(4, 43, 48, 19, 58, 43, _0x136f38);
  } else {
    ctx.fillStyle = SPRITE.GROUND[world.time];
  }
  ctx.fillRect(0, 0, canw, canh);
}
function draw_ground() {
  for (var _0x145da4 = world.biomes.length - 1; _0x145da4 >= 0; _0x145da4--) {
    var _0x4474bd = world.biomes[_0x145da4];
    if (_0x4474bd.t === world.BIOME_SEA) {
      var _0xaf826c = world.BIOME[_0x4474bd.t];
      if (
        -user.cam.x >= _0x4474bd.x1 - 230 - canw &&
        -user.cam.x <= _0x4474bd.x2 + 330 &&
        -user.cam.y >= _0x4474bd.y1 - canh &&
        -user.cam.y <= _0x4474bd.y2 + 100
      ) {
        var _0x1f4f65 = _0x4474bd.x2;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          _0x1f4f65 -= 610;
        }
        var _0x1f7ed1 = _0x4474bd.x1;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          _0x1f7ed1 += 610;
        }
        var _0x329b73 = _0x4474bd.y2;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          _0x329b73 -= 610;
        }
        var _0x2f3a01 = _0x4474bd.y1;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          _0x2f3a01 += 610;
        }
        if (world.transition) {
          var _0x59fb09 = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(
            _0xaf826c.night[0],
            _0xaf826c.night[1],
            _0xaf826c.night[2],
            _0xaf826c.day[0],
            _0xaf826c.day[1],
            _0xaf826c.day[1],
            _0x59fb09
          );
        } else {
          ctx.fillStyle = _0xaf826c["_color"][world.time];
        }
        var _0x48a2e9 = Math.max(user.cam.x + _0x1f7ed1 - 2 - 230, 0);
        var _0x100348 = Math.max(-user.cam.x + canw - _0x1f4f65 - 330 - 2, 0);
        var _0x30c40f = Math.max(user.cam.y + _0x2f3a01 - 2, 0);
        var _0x4e914d = Math.max(-user.cam.y + canh - _0x329b73 - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(
          _0x48a2e9,
          _0x30c40f,
          canw - _0x100348 - _0x48a2e9,
          canh - _0x30c40f - _0x4e914d
        );
      }
    }
  }
  for (var _0x145da4 = world.biomes.length - 1; _0x145da4 >= 0; _0x145da4--) {
    var _0x4474bd = world.biomes[_0x145da4];
    if (_0x4474bd.t !== world.BIOME_SEA) {
      var _0x1f4f65 = _0x4474bd.x2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f4f65 -= 400;
      }
      var _0x1f7ed1 = _0x4474bd.x1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f7ed1 += 400;
      }
      var _0x329b73 = _0x4474bd.y2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x329b73 -= 300;
      }
      var _0x2f3a01 = _0x4474bd.y1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x2f3a01 += 300;
      }
      (_0x4474bd.v & WORLD.RIGHT) === 0 &&
        -user.cam.x >= _0x1f4f65 - canw + 120 &&
        -user.cam.x <= _0x1f4f65 + 820 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50 &&
        (draw_beach_sand_right(
          _0x1f4f65,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[0],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.RIGHT
        ),
        draw_beach_right(
          _0x1f4f65,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[0],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.RIGHT
        ));
      (_0x4474bd.v & WORLD.LEFT) === 0 &&
        -user.cam.x >= _0x1f7ed1 - canw - 700 &&
        -user.cam.x <= _0x1f7ed1 - 20 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50 &&
        (draw_beach_sand_left(
          _0x1f7ed1,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[1],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.LEFT
        ),
        draw_beach_left(
          _0x1f7ed1,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[1],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.LEFT
        ));
      (_0x4474bd.v & WORLD.BOTTOM) === 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x329b73 - canh - 275 &&
        -user.cam.y <= _0x329b73 + 490 &&
        (draw_beach_sand_bottom(
          _0x329b73 - 230,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[2],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.BOTTOM
        ),
        draw_beach_bottom(
          _0x329b73 - 230,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[2],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.BOTTOM
        ));
      (_0x4474bd.v & WORLD.TOP) === 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x2f3a01 - canh - 390 &&
        -user.cam.y <= _0x2f3a01 + 315 &&
        (draw_beach_sand_top(
          _0x2f3a01 + 310,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[3],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.TOP
        ),
        draw_beach_top(
          _0x2f3a01 + 310,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[3],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.TOP
        ));
    }
  }
  for (var _0x145da4 = world.biomes.length - 1; _0x145da4 >= 0; _0x145da4--) {
    var _0x4474bd = world.biomes[_0x145da4];
    if (_0x4474bd.t !== world.BIOME_SEA) {
      var _0x1f4f65 = _0x4474bd.x2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f4f65 -= 400;
      }
      var _0x1f7ed1 = _0x4474bd.x1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f7ed1 += 400;
      }
      var _0x329b73 = _0x4474bd.y2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x329b73 -= 300;
      }
      var _0x2f3a01 = _0x4474bd.y1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x2f3a01 += 300;
      }
      (_0x4474bd.v & WORLD.RIGHT) !== 0 &&
        -user.cam.x >= _0x1f4f65 - canw + 120 &&
        -user.cam.x <= _0x1f4f65 + 820 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50 &&
        draw_beach_sand_right(
          _0x1f4f65,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[0],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.RIGHT
        );
      (_0x4474bd.v & WORLD.LEFT) !== 0 &&
        -user.cam.x >= _0x1f7ed1 - canw - 700 &&
        -user.cam.x <= _0x1f7ed1 - 20 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50 &&
        draw_beach_sand_left(
          _0x1f7ed1,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[1],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.LEFT
        );
      (_0x4474bd.v & WORLD.BOTTOM) !== 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x329b73 - canh - 275 &&
        -user.cam.y <= _0x329b73 + 490 &&
        draw_beach_sand_bottom(
          _0x329b73 - 230,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[2],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.BOTTOM
        );
      (_0x4474bd.v & WORLD.TOP) !== 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x2f3a01 - canh - 390 &&
        -user.cam.y <= _0x2f3a01 + 315 &&
        draw_beach_sand_top(
          _0x2f3a01 + 310,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[3],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.TOP
        );
    }
  }
  for (var _0x145da4 = world.biomes.length - 1; _0x145da4 >= 0; _0x145da4--) {
    var _0x4474bd = world.biomes[_0x145da4];
    if (_0x4474bd.t !== world.BIOME_SEA) {
      var _0xaf826c = world.BIOME[_0x4474bd.t];
      if (
        -user.cam.x >= _0x4474bd.x1 - 230 - canw &&
        -user.cam.x <= _0x4474bd.x2 + 330 &&
        -user.cam.y >= _0x4474bd.y1 - canh &&
        -user.cam.y <= _0x4474bd.y2 + 100
      ) {
        var _0x1f4f65 = _0x4474bd.x2;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          if ((_0x4474bd.v & WORLD.RIGHT) === 0) {
            _0x1f4f65 -= 414;
          } else {
            _0x1f4f65 -= 610;
          }
        }
        var _0x1f7ed1 = _0x4474bd.x1;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          if ((_0x4474bd.v & WORLD.LEFT) === 0) {
            _0x1f7ed1 += 414;
          } else {
            _0x1f7ed1 += 610;
          }
        }
        var _0x329b73 = _0x4474bd.y2;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          if ((_0x4474bd.v & WORLD.BOTTOM) === 0) {
            _0x329b73 -= 414;
          } else {
            _0x329b73 -= 610;
          }
        }
        var _0x2f3a01 = _0x4474bd.y1;
        if (_0x4474bd.t !== world.BIOME_SEA) {
          if ((_0x4474bd.v & WORLD.TOP) === 0) {
            _0x2f3a01 += 414;
          } else {
            _0x2f3a01 += 610;
          }
        }
        if (world.transition) {
          var _0x59fb09 = world.time ? 1 - world.shade.v : world.shade.v;
          ctx.fillStyle = get_color_transition(
            _0xaf826c.night[0],
            _0xaf826c.night[1],
            _0xaf826c.night[2],
            _0xaf826c.day[0],
            _0xaf826c.day[1],
            _0xaf826c.day[2],
            _0x59fb09
          );
        } else {
          ctx.fillStyle = _0xaf826c["_color"][world.time];
        }
        var _0x48a2e9 = Math.max(user.cam.x + _0x1f7ed1 - 2 - 230, 0);
        var _0x100348 = Math.max(-user.cam.x + canw - _0x1f4f65 - 330 - 2, 0);
        var _0x30c40f = Math.max(user.cam.y + _0x2f3a01 - 2, 0);
        var _0x4e914d = Math.max(-user.cam.y + canh - _0x329b73 - 100 - 2, 0);
        ctx.beginPath();
        ctx.fillRect(
          _0x48a2e9,
          _0x30c40f,
          canw - _0x100348 - _0x48a2e9,
          canh - _0x30c40f - _0x4e914d
        );
      }
    }
  }
  ui.quality &&
    (draw_map_transition(
      draw_breath_objects,
      _is,
      _ie,
      _js,
      _je,
      SPRITE.WAVE_TWO,
      "isl",
      2
    ),
    draw_map_transition(
      draw_breath_objects,
      _is,
      _ie,
      _js,
      _je,
      SPRITE.WAVE_ONE,
      "isl",
      2
    ));
  draw_map_transition(
    draw_map_objects,
    _is,
    _ie,
    _js,
    _je,
    SPRITE.ISLAND,
    "isl",
    2
  );
  if (ui.quality) {
    draw_map_transition(
      draw_map_decorations,
      _is,
      _ie,
      _js,
      _je,
      SPRITE.DECORATION,
      "de"
    );
  }
  var _0x5b3bfb = world.units[ITEMS.PLAYERS];
  for (var _0x145da4 = 0; _0x145da4 < _0x5b3bfb.length; _0x145da4++) {
    var _0x5ecbe2 = _0x5b3bfb[_0x145da4];
    for (var _0x17a4f0 = 0; _0x17a4f0 < _0x5ecbe2.foot.length; _0x17a4f0++) {
      draw_foot(_0x5ecbe2.foot[_0x17a4f0]);
    }
  }
  __wave += delta * 40;
  if (__wave > 60) {
    __wave -= 60;
  }
  draw_map_transition(
    draw_river_tile,
    _is,
    _ie,
    _js,
    _je,
    SPRITE.RIVER,
    "r",
    0
  );
  for (var _0x145da4 = 0; _0x145da4 < world.biomes.length; _0x145da4++) {
    var _0x4474bd = world.biomes[_0x145da4];
    if (_0x4474bd.t !== world.BIOME_SEA) {
      var _0x1f4f65 = _0x4474bd.x2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f4f65 -= 400;
      }
      var _0x1f7ed1 = _0x4474bd.x1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x1f7ed1 += 400;
      }
      var _0x329b73 = _0x4474bd.y2;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x329b73 -= 300;
      }
      var _0x2f3a01 = _0x4474bd.y1;
      if (_0x4474bd.t !== world.BIOME_SEA) {
        _0x2f3a01 += 300;
      }
      if (
        (_0x4474bd.v & WORLD.RIGHT) > 0 &&
        -user.cam.x >= _0x1f4f65 - canw + 120 &&
        -user.cam.x <= _0x1f4f65 + 820 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50
      ) {
        draw_beach_right(
          _0x1f4f65,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[0],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.RIGHT
        );
      }
      if (
        (_0x4474bd.v & WORLD.LEFT) > 0 &&
        -user.cam.x >= _0x1f7ed1 - canw - 700 &&
        -user.cam.x <= _0x1f7ed1 - 20 &&
        -user.cam.y >= _0x2f3a01 + 88 - canh &&
        -user.cam.y <= _0x329b73 + 50
      ) {
        draw_beach_left(
          _0x1f7ed1,
          _0x2f3a01 + 88,
          _0x329b73 - 88,
          user.beach[1],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.LEFT
        );
      }
      if (
        (_0x4474bd.v & WORLD.BOTTOM) > 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x329b73 - canh - 275 &&
        -user.cam.y <= _0x329b73 + 490
      ) {
        draw_beach_bottom(
          _0x329b73 - 230,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[2],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.BOTTOM
        );
      }
      if (
        (_0x4474bd.v & WORLD.TOP) > 0 &&
        -user.cam.x >= _0x1f7ed1 - 235 - canw &&
        -user.cam.x <= _0x1f4f65 + 350 &&
        -user.cam.y >= _0x2f3a01 - canh - 390 &&
        -user.cam.y <= _0x2f3a01 + 315
      ) {
        draw_beach_top(
          _0x2f3a01 + 310,
          _0x1f7ed1 - 230,
          _0x1f4f65 + 230,
          user.beach[3],
          world.BIOME[_0x4474bd.t],
          _0x4474bd.v & WORLD.TOP
        );
      }
    }
  }
}
function draw_ash() {
  var _0x4e682f = user.ash;
  var _0x2d9a1b = _0x4e682f.flakes;
  for (var _0x5ef627 = 0; _0x5ef627 < _0x2d9a1b.length; _0x5ef627++) {
    var _0x3feb22 = _0x2d9a1b[_0x5ef627];
    _0x4e682f.update(_0x3feb22);
    draw_imgs_transition(
      SPRITE.ASHES,
      _0x3feb22.id,
      user.cam.x + _0x3feb22.x,
      user.cam.y + _0x3feb22.y,
      _0x3feb22.alpha
    );
  }
  for (var _0x5ef627 = 0; _0x5ef627 < _0x2d9a1b.length; _0x5ef627++) {
    var _0x3feb22 = _0x2d9a1b[_0x5ef627];
    if (
      _0x3feb22.life <= 0 ||
      _0x3feb22.x > -user.cam.x + canw ||
      _0x3feb22.x < -user.cam.x ||
      _0x3feb22.y > -user.cam.y + canh
    ) {
      _0x2d9a1b.splice(_0x5ef627, 1);
    }
  }
  var _0x22dd8f = -user.cam.y;
  if (world.dist_lava > -1000) {
    _0x4e682f.add(_0x22dd8f);
  }
}
function draw_winter() {
  var _0x4b82a0 = user.winter;
  if (_0x4b82a0.tempest === 0) {
    _0x4b82a0.tempest_speed = Math.max(0, _0x4b82a0.tempest_speed - delta / 10);
  } else {
    _0x4b82a0.tempest_speed = Math.min(1, _0x4b82a0.tempest_speed + delta / 10);
  }
  var _0x508d07 = _0x4b82a0.flakes;
  for (var _0x1722b3 = 0; _0x1722b3 < _0x508d07.length; _0x1722b3++) {
    var _0x1377af = _0x508d07[_0x1722b3];
    _0x4b82a0.update(_0x1377af);
    draw_imgs_transition(
      SPRITE.FLAKES,
      _0x1377af.id,
      user.cam.x + _0x1377af.x,
      user.cam.y + _0x1377af.y,
      _0x1377af.alpha
    );
  }
  for (var _0x1722b3 = 0; _0x1722b3 < _0x508d07.length; _0x1722b3++) {
    var _0x1377af = _0x508d07[_0x1722b3];
    if (
      _0x1377af.life <= 0 ||
      _0x1377af.x > -user.cam.x + canw ||
      _0x1377af.x < -user.cam.x ||
      _0x1377af.y > -user.cam.y + canh
    ) {
      _0x508d07.splice(_0x1722b3, 1);
    }
  }
  var _0x3a03a3 = -user.cam.y;
  if (world.dist_winter > -1000) {
    _0x4b82a0.add(_0x3a03a3);
  }
}
function draw_desert() {
  var _0x3f8462 = user.desert;
  if (_0x3f8462.tempest === 0) {
    _0x3f8462.tempest_speed = Math.max(0, _0x3f8462.tempest_speed - delta / 10);
  } else {
    _0x3f8462.tempest_speed = Math.min(1, _0x3f8462.tempest_speed + delta / 10);
  }
  var _0xadee22 = _0x3f8462.flakes;
  for (var _0x16a5b2 = 0; _0x16a5b2 < _0xadee22.length; _0x16a5b2++) {
    var _0x108673 = _0xadee22[_0x16a5b2];
    _0x3f8462.update(_0x108673);
    draw_imgs_transition(
      SPRITE.DESERT,
      _0x108673.id,
      user.cam.x + _0x108673.x,
      user.cam.y + _0x108673.y,
      _0x108673.alpha
    );
  }
  for (var _0x16a5b2 = 0; _0x16a5b2 < _0xadee22.length; _0x16a5b2++) {
    var _0x108673 = _0xadee22[_0x16a5b2];
    if (
      _0x108673.life <= 0 ||
      _0x108673.x > -user.cam.x + canw ||
      _0x108673.x < -user.cam.x - user.cam.w / 2 ||
      _0x108673.y > -user.cam.y + canh
    ) {
      _0xadee22.splice(_0x16a5b2, 1);
    }
  }
  var _0x2cc194 = -user.cam.y;
  if (world.dist_desert > -1000) {
    _0x3f8462.add(_0x2cc194);
  }
}
function draw_beach_sand_left(
  _0x26e50d,
  _0x13b083,
  _0x2be8f5,
  _0xe7e493,
  _0x159579,
  _0x3a7210
) {
  var _0x2c6080 = _0xe7e493.w1;
  var _0x3d0f11 = _0xe7e493.w2;
  var _0x457fec = _0xe7e493.w3;
  var _0x5583c5 = user.cam.x + _0x26e50d - 700;
  var _0x1bf28a = Math.max(user.cam.y + _0x13b083, 0);
  var _0x133d35 = Math.max(-user.cam.y + canh - _0x2be8f5 - 100, 0);
  var _0x48be26 = _0x1bf28a;
  var _0x3972b5 = canh - _0x1bf28a - _0x133d35;
  if (_0x3a7210) {
    var _0x532c65 = _0xe7e493.t(_0x2c6080).x;
  } else {
    var _0x532c65 = _0x2c6080.r.x;
  }
  var _0xe9b653 = _0x5583c5 + WORLD.LW1SX;
  var _0x26461b = _0xe9b653,
    _0x240c24 = _0x48be26,
    _0x4dec7f = _0x532c65 + WORLD.W1SX,
    _0x332e55 = _0x3972b5;
  _0xe9b653 += _0x532c65 + WORLD.W1SX - 2;
  var _0x372e96 = _0xe9b653;
  if (_0x3a7210) {
    var _0x532c65 = _0xe7e493.t(_0x3d0f11).x;
  } else {
    var _0x532c65 = _0x3d0f11.r.x;
  }
  var _0x358bc0 = _0x5583c5 + WORLD.LW2SX - _0xe9b653 + _0x532c65;
  var _0x59195f = _0xe9b653,
    _0x3d9d2e = _0x48be26,
    _0x5cbef8 = _0x358bc0,
    _0x1963c1 = _0x3972b5;
  _0xe9b653 += _0x358bc0 - 2;
  var _0x98a97d = _0xe9b653 - 2;
  if (_0x3a7210) {
    var _0x532c65 = _0xe7e493.t(_0x457fec).x;
  } else {
    var _0x532c65 = _0x457fec.r.x;
  }
  _0x358bc0 = _0x5583c5 + WORLD.LW3SX - _0xe9b653 + _0x532c65;
  if (_0x98a97d < _0xe9b653 + _0x358bc0 - 3) {
    var _0x32e738 = true,
      _0x4dab43 = _0xe9b653,
      _0x4a2bef = _0x48be26,
      _0x41ace5 = _0x358bc0,
      _0x2052e3 = _0x3972b5;
    _0xe9b653 += _0x358bc0 - 2;
    var _0x438b52 = _0xe9b653;
  } else {
    var _0x32e738 = false;
    _0xe9b653 = _0x98a97d;
    var _0x438b52 = -1;
  }
  _0x358bc0 = _0x5583c5 + WORLD.LSANDX - _0xe9b653;
  if (_0x3a7210 > 0 && _0x159579.isSand === 1) {
    if (world.transition) {
      var _0x586404 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        15,
        77,
        72,
        252,
        239,
        187,
        _0x586404
      );
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0xe9b653, _0x48be26, _0x358bc0, _0x3972b5);
  } else {
    if (world.transition) {
      var _0x586404 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        _0x159579.night[0],
        _0x159579.night[1],
        _0x159579.night[2],
        _0x159579.day[0],
        _0x159579.day[1],
        _0x159579.day[2],
        _0x586404
      );
    } else {
      ctx.fillStyle = _0x159579["_color"][world.time];
    }
    ctx.fillRect(_0xe9b653, _0x48be26, _0x358bc0, _0x3972b5);
  }
}
function draw_beach_left(
  _0x1b5baa,
  _0x545e16,
  _0x556ae1,
  _0x44f68c,
  _0x2bc522,
  _0x251859
) {
  var _0x4e6a93 = _0x44f68c.w1;
  var _0x3c3a19 = _0x44f68c.w2;
  var _0x4f77fb = _0x44f68c.w3;
  var _0x5ca048 = user.cam.x + _0x1b5baa - 700;
  var _0x414c40 = Math.max(user.cam.y + _0x545e16, 0);
  var _0x5a2f27 = Math.max(-user.cam.y + canh - _0x556ae1 - 100, 0);
  var _0x11f785 = _0x414c40;
  var _0x5be3bb = canh - _0x414c40 - _0x5a2f27;
  if (_0x251859) {
    var _0x4223bd = _0x44f68c.t(_0x4e6a93);
  } else {
    var _0x4223bd = _0x4e6a93.r;
  }
  var _0x3a98ab = _0x5ca048 + WORLD.LW1SX;
  var _0x105046 = _0x3a98ab,
    _0xe03431 = _0x11f785,
    _0x325449 = _0x4223bd.x + WORLD.W1SX,
    _0x307129 = _0x5be3bb;
  _0x3a98ab += _0x4223bd.x + WORLD.W1SX - 2;
  var _0x37937e = _0x3a98ab;
  if (_0x251859) {
    var _0x4223bd = _0x44f68c.t(_0x3c3a19);
  } else {
    var _0x4223bd = _0x3c3a19.r;
  }
  var _0x1356c3 = _0x5ca048 + WORLD.LW2SX - _0x3a98ab + _0x4223bd.x;
  var _0x2bff6a = _0x3a98ab,
    _0x262e59 = _0x11f785,
    _0x1b9b61 = _0x1356c3,
    _0x43f5c0 = _0x5be3bb;
  _0x3a98ab += _0x1356c3 - 2;
  var _0x41d932 = _0x3a98ab - 2;
  if (_0x251859) {
    var _0x4223bd = _0x44f68c.t(_0x4f77fb);
  } else {
    var _0x4223bd = _0x4f77fb.r;
  }
  _0x1356c3 = _0x5ca048 + WORLD.LW3SX - _0x3a98ab + _0x4223bd.x;
  if (_0x41d932 < _0x3a98ab + _0x1356c3 - 3) {
    var _0x3aab10 = true,
      _0x111871 = _0x3a98ab,
      _0x1e2b2a = _0x11f785,
      _0x2dacc9 = _0x1356c3,
      _0x10b8cd = _0x5be3bb;
    _0x3a98ab += _0x1356c3 - 2;
    var _0x412769 = _0x3a98ab;
  } else {
    var _0x3aab10 = false;
    _0x3a98ab = _0x41d932;
    var _0x412769 = -1;
  }
  _0x1356c3 = _0x5ca048 + WORLD.LSANDX - _0x3a98ab;
  if (world.transition) {
    var _0x539f06 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x539f06);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x105046, _0xe03431, _0x325449, _0x307129);
  if (_0x251859) {
    if (world.transition) {
      var _0x539f06 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x539f06);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var _0x539f06 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x539f06);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(_0x2bff6a, _0x262e59, _0x1b9b61, _0x43f5c0);
  if (_0x3aab10) {
    if (_0x251859) {
      if (world.transition) {
        var _0x539f06 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          17,
          94,
          96,
          169,
          214,
          211,
          _0x539f06
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var _0x539f06 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          9,
          55,
          63,
          11,
          106,
          132,
          _0x539f06
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(_0x111871, _0x1e2b2a, _0x2dacc9, _0x10b8cd);
  }
  if (ui.quality && _0x251859) {
    _0x44f68c.draw_foams_left(
      _0x41d932,
      _0x412769,
      _0x37937e,
      _0x5ca048,
      -user.cam.y + _0xe03431,
      -user.cam.y + _0xe03431 + _0x307129
    );
  }
}
function draw_beach_sand_top(
  _0x168b6a,
  _0x46f8a0,
  _0x30740e,
  _0x3c6d1a,
  _0x20185f,
  _0x23ac6c
) {
  var _0x477a44 = _0x3c6d1a.w1;
  var _0x2a0a29 = _0x3c6d1a.w2;
  var _0x1ffd63 = _0x3c6d1a.w3;
  var _0x4c8310 = user.cam.y + _0x168b6a - 700;
  var _0x35de7a = Math.max(user.cam.x + _0x46f8a0, 0);
  var _0x2621c7 = Math.max(-user.cam.x + canw - _0x30740e - 100, 0);
  var _0x46192d = _0x35de7a;
  var _0x5a38c1 = canw - _0x35de7a - _0x2621c7;
  if (_0x23ac6c) {
    var _0x1d9148 = _0x3c6d1a.t(_0x477a44).x;
  } else {
    var _0x1d9148 = _0x477a44.r.x;
  }
  var _0x3c7d36 = _0x4c8310 + WORLD.LW1SX;
  var _0x445406 = _0x46192d,
    _0x4f9fb7 = _0x3c7d36,
    _0x35750f = _0x1d9148 + WORLD.W1SX,
    _0x261f1d = _0x5a38c1;
  _0x3c7d36 += _0x1d9148 + WORLD.W1SX - 2;
  var _0x2e9980 = _0x3c7d36;
  if (_0x23ac6c) {
    var _0x1d9148 = _0x3c6d1a.t(_0x2a0a29).x;
  } else {
    var _0x1d9148 = _0x2a0a29.r.x;
  }
  var _0x379bf5 = _0x4c8310 + WORLD.LW2SX - _0x3c7d36 + _0x1d9148;
  var _0x11f603 = _0x3c7d36,
    _0xcb2e4c = _0x46192d,
    _0x925f0f = _0x379bf5,
    _0xff0ae2 = _0x5a38c1;
  _0x3c7d36 += _0x379bf5 - 2;
  var _0x18991a = _0x3c7d36 - 2;
  if (_0x23ac6c) {
    var _0x1d9148 = _0x3c6d1a.t(_0x1ffd63).x;
  } else {
    var _0x1d9148 = _0x1ffd63.r.x;
  }
  _0x379bf5 = _0x4c8310 + WORLD.LW3SX - _0x3c7d36 + _0x1d9148;
  if (_0x18991a < _0x3c7d36 + _0x379bf5 - 3) {
    var _0xc8942b = true,
      _0x356df0 = _0x3c7d36,
      _0x4db789 = _0x46192d,
      _0x38e27d = _0x379bf5,
      _0x3c561d = _0x5a38c1;
    _0x3c7d36 += _0x379bf5 - 2;
    var _0x512a77 = _0x3c7d36;
  } else {
    var _0xc8942b = false;
    _0x3c7d36 = _0x18991a;
    var _0x512a77 = -1;
  }
  _0x379bf5 = _0x4c8310 + WORLD.LSANDX - _0x3c7d36;
  if (_0x23ac6c > 0 && _0x20185f.isSand === 1) {
    if (world.transition) {
      var _0x4e8f42 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        15,
        77,
        72,
        252,
        239,
        187,
        _0x4e8f42
      );
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x46192d, _0x3c7d36, _0x5a38c1, _0x379bf5);
  } else {
    if (world.transition) {
      var _0x4e8f42 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        _0x20185f.night[0],
        _0x20185f.night[1],
        _0x20185f.night[2],
        _0x20185f.day[0],
        _0x20185f.day[1],
        _0x20185f.day[2],
        _0x4e8f42
      );
    } else {
      ctx.fillStyle = _0x20185f["_color"][world.time];
    }
    ctx.fillRect(_0x46192d, _0x3c7d36, _0x5a38c1, _0x379bf5);
  }
}
function draw_beach_top(
  _0x11a00e,
  _0x5c4f4d,
  _0x25cbc5,
  _0x1287ff,
  _0x1a1d75,
  _0x137d26
) {
  var _0x31d930 = _0x1287ff.w1;
  var _0x3d2432 = _0x1287ff.w2;
  var _0xefdecd = _0x1287ff.w3;
  var _0x2f843b = user.cam.y + _0x11a00e - 700;
  var _0xb3453a = Math.max(user.cam.x + _0x5c4f4d, 0);
  var _0x5cf621 = Math.max(-user.cam.x + canw - _0x25cbc5 - 100, 0);
  var _0x32b281 = _0xb3453a;
  var _0x3bd617 = canw - _0xb3453a - _0x5cf621;
  if (_0x137d26) {
    var _0xf14a87 = _0x1287ff.t(_0x31d930);
  } else {
    var _0xf14a87 = _0x31d930.r;
  }
  var _0x8a72f2 = _0x2f843b + WORLD.LW1SX;
  var _0x3ae527 = _0x32b281,
    _0x20e3dc = _0x8a72f2,
    _0x53e2df = _0xf14a87.x + WORLD.W1SX,
    _0x41f90b = _0x3bd617;
  _0x8a72f2 += _0xf14a87.x + WORLD.W1SX - 2;
  var _0xd7ff72 = _0x8a72f2;
  if (_0x137d26) {
    var _0xf14a87 = _0x1287ff.t(_0x3d2432);
  } else {
    var _0xf14a87 = _0x3d2432.r;
  }
  var _0x470e97 = _0x2f843b + WORLD.LW2SX - _0x8a72f2 + _0xf14a87.x;
  var _0x5ceeb7 = _0x8a72f2,
    _0x4ed1f2 = _0x32b281,
    _0x139b21 = _0x470e97,
    _0x19fac9 = _0x3bd617;
  _0x8a72f2 += _0x470e97 - 2;
  var _0x169920 = _0x8a72f2 - 2;
  if (_0x137d26) {
    var _0xf14a87 = _0x1287ff.t(_0xefdecd);
  } else {
    var _0xf14a87 = _0xefdecd.r;
  }
  _0x470e97 = _0x2f843b + WORLD.LW3SX - _0x8a72f2 + _0xf14a87.x;
  if (_0x169920 < _0x8a72f2 + _0x470e97 - 3) {
    var _0x114a2b = true,
      _0x4465fd = _0x8a72f2,
      _0x488df3 = _0x32b281,
      _0x3ecadc = _0x470e97,
      _0x5e3e86 = _0x3bd617;
    _0x8a72f2 += _0x470e97 - 2;
    var _0x47324b = _0x8a72f2;
  } else {
    var _0x114a2b = false;
    _0x8a72f2 = _0x169920;
    var _0x47324b = -1;
  }
  _0x470e97 = _0x2f843b + WORLD.LSANDX - _0x8a72f2;
  if (world.transition) {
    var _0xed6ac5 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0xed6ac5);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x3ae527, _0x20e3dc, _0x41f90b, _0x53e2df);
  if (_0x137d26) {
    if (world.transition) {
      var _0xed6ac5 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0xed6ac5);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var _0xed6ac5 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0xed6ac5);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(_0x4ed1f2, _0x5ceeb7, _0x19fac9, _0x139b21);
  if (_0x114a2b) {
    if (_0x137d26) {
      if (world.transition) {
        var _0xed6ac5 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          17,
          94,
          96,
          169,
          214,
          211,
          _0xed6ac5
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var _0xed6ac5 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          9,
          55,
          63,
          11,
          106,
          132,
          _0xed6ac5
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(_0x488df3, _0x4465fd, _0x5e3e86, _0x3ecadc);
  }
  if (ui.quality && _0x137d26) {
    _0x1287ff.draw_foams_top(
      _0x169920,
      _0x47324b,
      _0xd7ff72,
      _0x2f843b,
      -user.cam.x + _0x3ae527,
      -user.cam.x + _0x3ae527 + _0x41f90b
    );
  }
}
function draw_beach_sand_right(
  _0x5bc5b5,
  _0x1f265d,
  _0x187d9a,
  _0x12fc15,
  _0x517a04,
  _0x1dffe6
) {
  var _0x1c46f1 = _0x12fc15.w1;
  var _0x5e7112 = _0x12fc15.w2;
  var _0x57bbbe = _0x12fc15.w3;
  var _0x1c4c06 = user.cam.x + _0x5bc5b5 + 820;
  var _0x2a3c92 = Math.max(user.cam.y + _0x1f265d, 0);
  var _0x42024c = Math.max(-user.cam.y + canh - _0x187d9a - 100, 0);
  var _0x19db82 = _0x2a3c92;
  var _0x3c4d61 = canh - _0x2a3c92 - _0x42024c;
  if (_0x1dffe6) {
    var _0x22244b = _0x12fc15.t(_0x1c46f1).x;
  } else {
    var _0x22244b = _0x1c46f1.r.x;
  }
  var _0x2bec08 = _0x1c4c06 + WORLD.LW1SX;
  var _0x35c829 = _0x2bec08,
    _0x58cc6c = _0x19db82,
    _0x51ba89 = -_0x22244b + WORLD.W1SX,
    _0x11e25c = _0x3c4d61;
  _0x2bec08 += -_0x22244b + WORLD.W1SX + 2;
  var _0x3b60e7 = _0x2bec08;
  if (_0x1dffe6) {
    var _0x22244b = _0x12fc15.t(_0x5e7112).x;
  } else {
    var _0x22244b = _0x5e7112.r.x;
  }
  var _0x6fa6bf = _0x1c4c06 - WORLD.LW2SX - _0x2bec08 - _0x22244b;
  var _0x7641ab = _0x2bec08,
    _0x1b8b3b = _0x19db82,
    _0x3f2692 = _0x6fa6bf,
    _0x571ace = _0x3c4d61;
  _0x2bec08 += _0x6fa6bf + 2;
  var _0xa65c85 = _0x2bec08 - 2;
  if (_0x1dffe6) {
    var _0x22244b = _0x12fc15.t(_0x57bbbe).x;
  } else {
    var _0x22244b = _0x57bbbe.r.x;
  }
  _0x6fa6bf = _0x1c4c06 - WORLD.LW3SX - _0x2bec08 - _0x22244b;
  if (_0xa65c85 > _0x2bec08 + _0x6fa6bf) {
    var _0xdd6018 = true,
      _0x1ec617 = _0x2bec08,
      _0x3b1676 = _0x19db82,
      _0x41376c = _0x6fa6bf,
      _0x21f440 = _0x3c4d61;
    _0x2bec08 += _0x6fa6bf + 2;
    var _0x20132d = _0x2bec08;
  } else {
    var _0xdd6018 = false;
    _0x2bec08 = _0xa65c85;
    var _0x20132d = -1;
  }
  _0x6fa6bf = _0x1c4c06 - WORLD.LSANDX - _0x2bec08;
  if (_0x1dffe6 > 0 && _0x517a04.isSand === 1) {
    if (world.transition) {
      var _0x2a35ec = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        15,
        77,
        72,
        252,
        239,
        187,
        _0x2a35ec
      );
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x2bec08, _0x19db82, _0x6fa6bf, _0x3c4d61);
  } else {
    if (world.transition) {
      var _0x2a35ec = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        _0x517a04.night[0],
        _0x517a04.night[1],
        _0x517a04.night[2],
        _0x517a04.day[0],
        _0x517a04.day[1],
        _0x517a04.day[2],
        _0x2a35ec
      );
    } else {
      ctx.fillStyle = _0x517a04["_color"][world.time];
    }
    ctx.fillRect(_0x2bec08, _0x19db82, _0x6fa6bf, _0x3c4d61);
  }
}
function draw_beach_right(
  _0x55e5b2,
  _0x3e197f,
  _0x3271c7,
  _0x456202,
  _0x54bce2,
  _0x11c3cc
) {
  var _0x56022a = _0x456202.w1;
  var _0x11456d = _0x456202.w2;
  var _0x5d6544 = _0x456202.w3;
  var _0x4c9509 = user.cam.x + _0x55e5b2 + 820;
  var _0x576ef3 = Math.max(user.cam.y + _0x3e197f, 0);
  var _0x45b4ba = Math.max(-user.cam.y + canh - _0x3271c7 - 100, 0);
  var _0xdd0204 = _0x576ef3;
  var _0x4875fe = canh - _0x576ef3 - _0x45b4ba;
  if (_0x11c3cc) {
    var _0x50507d = _0x456202.t(_0x56022a);
  } else {
    var _0x50507d = _0x56022a.r;
  }
  var _0x3b8fd7 = _0x4c9509 + WORLD.LW1SX;
  var _0x2068b5 = _0x3b8fd7,
    _0x28600 = _0xdd0204,
    _0x39caae = -_0x50507d.x + WORLD.W1SX,
    _0x3dbd4e = _0x4875fe;
  _0x3b8fd7 += -_0x50507d.x + WORLD.W1SX + 2;
  var _0x5c4903 = _0x3b8fd7;
  if (_0x11c3cc) {
    var _0x50507d = _0x456202.t(_0x11456d);
  } else {
    var _0x50507d = _0x11456d.r;
  }
  var _0x3bc0d8 = _0x4c9509 - WORLD.LW2SX - _0x3b8fd7 - _0x50507d.x;
  var _0x14ef22 = _0x3b8fd7,
    _0x5de063 = _0xdd0204,
    _0x4aa37b = _0x3bc0d8,
    _0x2e6ba8 = _0x4875fe;
  _0x3b8fd7 += _0x3bc0d8 + 2;
  var _0x1b1fcf = _0x3b8fd7 - 2;
  if (_0x11c3cc) {
    var _0x50507d = _0x456202.t(_0x5d6544);
  } else {
    var _0x50507d = _0x5d6544.r;
  }
  _0x3bc0d8 = _0x4c9509 - WORLD.LW3SX - _0x3b8fd7 - _0x50507d.x;
  if (_0x1b1fcf > _0x3b8fd7 + _0x3bc0d8) {
    var _0x48b87f = true,
      _0x16a91a = _0x3b8fd7,
      _0x35f74f = _0xdd0204,
      _0x2aafef = _0x3bc0d8,
      _0x2a4b0d = _0x4875fe;
    _0x3b8fd7 += _0x3bc0d8 + 2;
    var _0x4e21cf = _0x3b8fd7;
  } else {
    var _0x48b87f = false;
    _0x3b8fd7 = _0x1b1fcf;
    var _0x4e21cf = -1;
  }
  _0x3bc0d8 = _0x4c9509 - WORLD.LSANDX - _0x3b8fd7;
  if (world.transition) {
    var _0x45b41f = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x45b41f);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x2068b5, _0x28600, _0x39caae, _0x3dbd4e);
  if (_0x11c3cc) {
    if (world.transition) {
      var _0x45b41f = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x45b41f);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var _0x45b41f = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x45b41f);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(_0x14ef22, _0x5de063, _0x4aa37b, _0x2e6ba8);
  if (_0x48b87f) {
    if (_0x11c3cc) {
      if (world.transition) {
        var _0x45b41f = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          17,
          94,
          96,
          169,
          214,
          211,
          _0x45b41f
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var _0x45b41f = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          9,
          55,
          63,
          11,
          106,
          132,
          _0x45b41f
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(_0x16a91a, _0x35f74f, _0x2aafef, _0x2a4b0d);
  }
  if (ui.quality && _0x11c3cc) {
    _0x456202.draw_foams_right(
      _0x1b1fcf,
      _0x4e21cf,
      _0x5c4903,
      _0x4c9509,
      -user.cam.y + _0x28600,
      -user.cam.y + _0x28600 + _0x3dbd4e
    );
  }
}
function draw_beach_sand_bottom(
  _0x59f2bf,
  _0x1b494c,
  _0x579d07,
  _0x5c3da0,
  _0x1e95ae,
  _0x33a84e
) {
  var _0x3ceee5 = _0x5c3da0.w1;
  var _0x4e70c8 = _0x5c3da0.w2;
  var _0x4a83cf = _0x5c3da0.w3;
  var _0x385ec8 = user.cam.y + _0x59f2bf + 710;
  var _0x551758 = Math.max(user.cam.x + _0x1b494c, 0);
  var _0x1e22af = Math.max(-user.cam.x + canw - _0x579d07 - 100, 0);
  var _0x2d2a82 = _0x551758;
  var _0x1c04f3 = canw - _0x551758 - _0x1e22af;
  if (_0x33a84e) {
    var _0x5e504e = _0x5c3da0.t(_0x3ceee5).x;
  } else {
    var _0x5e504e = _0x3ceee5.r.x;
  }
  var _0x2efc4d = _0x385ec8 + WORLD.LW1SX;
  var _0x5ae17d = _0x2efc4d,
    _0x146297 = _0x2d2a82,
    _0x1fe663 = -_0x5e504e + WORLD.W1SX,
    _0x1bc8f0 = _0x1c04f3;
  _0x2efc4d += -_0x5e504e + WORLD.W1SX + 2;
  var _0x41c34c = _0x2efc4d;
  if (_0x33a84e) {
    var _0x5e504e = _0x5c3da0.t(_0x4e70c8).x;
  } else {
    var _0x5e504e = _0x4e70c8.r.x;
  }
  var _0x517337 = _0x385ec8 - WORLD.LW2SX - _0x2efc4d - _0x5e504e;
  var _0x582a64 = _0x2efc4d,
    _0x3245ca = _0x2d2a82,
    _0x4fdb88 = _0x517337,
    _0xeb88d = _0x1c04f3;
  _0x2efc4d += _0x517337 + 2;
  var _0xc806b8 = _0x2efc4d - 2;
  if (_0x33a84e) {
    var _0x5e504e = _0x5c3da0.t(_0x4a83cf).x;
  } else {
    var _0x5e504e = _0x4a83cf.r.x;
  }
  _0x517337 = _0x385ec8 - WORLD.LW3SX - _0x2efc4d - _0x5e504e;
  if (_0xc806b8 > _0x2efc4d + _0x517337) {
    var _0x1139c5 = true,
      _0x41c3b7 = _0x2efc4d,
      _0x432b86 = _0x2d2a82,
      _0x456e24 = _0x517337,
      _0x281993 = _0x1c04f3;
    _0x2efc4d += _0x517337 + 2;
    var _0x1b7747 = _0x2efc4d;
  } else {
    var _0x1139c5 = false;
    _0x2efc4d = _0xc806b8;
    var _0x1b7747 = -1;
  }
  _0x517337 = _0x385ec8 - WORLD.LSANDX - _0x2efc4d;
  if (_0x33a84e > 0 && _0x1e95ae.isSand === 1) {
    if (world.transition) {
      var _0x4d1256 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        15,
        77,
        72,
        252,
        239,
        187,
        _0x4d1256
      );
    } else {
      ctx.fillStyle = SPRITE.SAND_COLOR[world.time];
    }
    ctx.fillRect(_0x2d2a82, _0x2efc4d, _0x1c04f3, _0x517337);
  } else {
    if (world.transition) {
      var _0x4d1256 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(
        _0x1e95ae.night[0],
        _0x1e95ae.night[1],
        _0x1e95ae.night[2],
        _0x1e95ae.day[0],
        _0x1e95ae.day[1],
        _0x1e95ae.day[2],
        _0x4d1256
      );
    } else {
      ctx.fillStyle = _0x1e95ae["_color"][world.time];
    }
    ctx.fillRect(_0x2d2a82, _0x2efc4d, _0x1c04f3, _0x517337);
  }
}
function draw_beach_bottom(
  _0xdb50d,
  _0x47851f,
  _0x40dec1,
  _0x11eb4f,
  _0x1ad321,
  _0x4c4806
) {
  var _0x5cba71 = _0x11eb4f.w1;
  var _0xb6cb4 = _0x11eb4f.w2;
  var _0x91b57f = _0x11eb4f.w3;
  var _0x1a1e3b = user.cam.y + _0xdb50d + 710;
  var _0x23c694 = Math.max(user.cam.x + _0x47851f, 0);
  var _0x1d23c7 = Math.max(-user.cam.x + canw - _0x40dec1 - 100, 0);
  var _0x198a52 = _0x23c694;
  var _0x366046 = canw - _0x23c694 - _0x1d23c7;
  if (_0x4c4806) {
    var _0x2937b9 = _0x11eb4f.t(_0x5cba71);
  } else {
    var _0x2937b9 = _0x5cba71.r;
  }
  var _0x38c40d = _0x1a1e3b + WORLD.LW1SX;
  var _0x375ad2 = _0x38c40d,
    _0x10dd06 = _0x198a52,
    _0x828b3 = -_0x2937b9.x + WORLD.W1SX,
    _0x11d04a = _0x366046;
  _0x38c40d += -_0x2937b9.x + WORLD.W1SX + 2;
  var _0xcd01c = _0x38c40d;
  if (_0x4c4806) {
    var _0x2937b9 = _0x11eb4f.t(_0xb6cb4);
  } else {
    var _0x2937b9 = _0xb6cb4.r;
  }
  var _0x41ff75 = _0x1a1e3b - WORLD.LW2SX - _0x38c40d - _0x2937b9.x;
  var _0x2408e3 = _0x38c40d,
    _0x329993 = _0x198a52,
    _0x4ee31d = _0x41ff75,
    _0x215a1f = _0x366046;
  _0x38c40d += _0x41ff75 + 2;
  var _0x34fabb = _0x38c40d - 2;
  if (_0x4c4806) {
    var _0x2937b9 = _0x11eb4f.t(_0x91b57f);
  } else {
    var _0x2937b9 = _0x91b57f.r;
  }
  _0x41ff75 = _0x1a1e3b - WORLD.LW3SX - _0x38c40d - _0x2937b9.x;
  if (_0x34fabb > _0x38c40d + _0x41ff75) {
    var _0x394393 = true,
      _0xf18a42 = _0x38c40d,
      _0x5ab1d8 = _0x198a52,
      _0x3bb576 = _0x41ff75,
      _0x536f90 = _0x366046;
    _0x38c40d += _0x41ff75 + 2;
    var _0x149456 = _0x38c40d;
  } else {
    var _0x394393 = false;
    _0x38c40d = _0x34fabb;
    var _0x149456 = -1;
  }
  _0x41ff75 = _0x1a1e3b - WORLD.LSANDX - _0x38c40d;
  if (world.transition) {
    var _0x488f35 = world.time ? 1 - world.shade.v : world.shade.v;
    ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x488f35);
  } else {
    ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
  }
  ctx.fillRect(_0x10dd06, _0x375ad2, _0x11d04a, _0x828b3);
  if (_0x4c4806) {
    if (world.transition) {
      var _0x488f35 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(15, 70, 76, 42, 139, 155, _0x488f35);
    } else {
      ctx.fillStyle = SPRITE.WATER_2_COLOR[world.time];
    }
  } else {
    if (world.transition) {
      var _0x488f35 = world.time ? 1 - world.shade.v : world.shade.v;
      ctx.fillStyle = get_color_transition(9, 55, 63, 11, 106, 132, _0x488f35);
    } else {
      ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
    }
  }
  ctx.fillRect(_0x329993, _0x2408e3, _0x215a1f, _0x4ee31d);
  if (_0x394393) {
    if (_0x4c4806) {
      if (world.transition) {
        var _0x488f35 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          17,
          94,
          96,
          169,
          214,
          211,
          _0x488f35
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_1_COLOR[world.time];
      }
    } else {
      if (world.transition) {
        var _0x488f35 = world.time ? 1 - world.shade.v : world.shade.v;
        ctx.fillStyle = get_color_transition(
          9,
          55,
          63,
          11,
          106,
          132,
          _0x488f35
        );
      } else {
        ctx.fillStyle = SPRITE.WATER_3_COLOR[world.time];
      }
    }
    ctx.fillRect(_0x5ab1d8, _0xf18a42, _0x536f90, _0x3bb576);
  }
  if (ui.quality && _0x4c4806) {
    _0x11eb4f.draw_foams_bottom(
      _0x34fabb,
      _0x149456,
      _0xcd01c,
      _0x1a1e3b,
      -user.cam.x + _0x10dd06,
      -user.cam.x + _0x10dd06 + _0x11d04a
    );
  }
}
function draw_world_with_effect() {
  ctx.globalAlpha = 1;
  if (world.transition) {
    var _0x1776e9 = world.shade.update();
  }
  world.update_dist_from_biomes(-user.cam.x, -user.cam.y);
  _js = Math.max(Math.floor(-user.cam.x / world.dw) - 5, 0);
  _je = Math.min(
    Math.floor((-user.cam.x + user.cam.w) / world.dw) + 4,
    world.nw - 1
  );
  _is = Math.max(Math.floor(-user.cam.y / world.dh) - 3, 0);
  _ie = Math.min(
    Math.floor((-user.cam.y + user.cam.h) / world.dh) + 3,
    world.nh - 1
  );
  draw_ground();
  draw_world();
  ui.quality &&
    world.mode !== WORLD.MODE_ZOMBIES &&
    world.mode !== WORLD.MODE_LEGACY &&
    world.mode !== WORLD.MODE_BR &&
    (draw_desert(), draw_winter(), draw_ash());
  world.transition &&
    _0x1776e9 &&
    ((world.transition = false), (world.shade.v = 0), (world.shade.o = false));
}
var ANIMATION_STOP = 0,
  ANIMATION_RUN = 1,
  FOCUS_OUT = 0,
  FOCUS_IN = 1,
  ALIGN_CENTER = 0,
  ALIGN_LEFT = 1,
  STYLE_RETRO = 0,
  STYLE_FLAT = 1,
  KEYDOWN = 0,
  KEYPRESS = 1,
  GET_KEY_OUT = 0,
  GET_KEY_IN = 1,
  MOUSE_MOVE = 0,
  MOUSE_DOWN = 1,
  MOUSE_UP = 2,
  BUTTON_OUT = 0,
  BUTTON_IN = 1,
  BUTTON_CLICK = 2;
function gui_disable_antialiasing(e) {
  e.imageSmoothingEnabled = false;
  e.webkitImageSmoothingEnabled = false;
  e.mozImageSmoothingEnabled = false;
  e.msImageSmoothingEnabled = false;
  e.oImageSmoothingEnabled = false;
}
function get_mouse_pos(_0xf1d9fa, _0x6a8e9e) {
  var _0x2a1a9c = _0xf1d9fa.getBoundingClientRect();
  return {
    x: _0x6a8e9e.clientX - _0x2a1a9c.left,
    y: _0x6a8e9e.clientY - _0x2a1a9c.top,
  };
}
function gui_render_text(
  _0x3b9a82,
  _0x5041d1,
  _0xf6843d,
  _0x528ad1,
  _0x565e53,
  _0x42ca09,
  _0x26067d,
  _0x281d34,
  _0x347cd3,
  _0x52ba9e,
  _0x37f3aa,
  _0x16e14f,
  _0x3940a1,
  _0x2645f8,
  _0x5b1fe4
) {
  if (_0x3b9a82.length === 0) {
    _0x3b9a82 = " ";
  }
  if (_0x26067d === undefined) {
    _0x26067d = 0;
  }
  if (_0x281d34 === undefined) {
    _0x281d34 = 0;
  }
  if (_0x347cd3 === undefined) {
    _0x347cd3 = 0;
  }
  if (_0x2645f8 === undefined) {
    _0x2645f8 = 0;
  }
  var _0x4be99f = document.createElement("canvas");
  var _0x132dcd = _0x4be99f.getContext("2d");
  _0x132dcd.textBaseline = "middle";
  _0x132dcd.font =
    (_0x5b1fe4 !== undefined ? _0x5b1fe4 + " " : "") +
    _0x528ad1 +
    "px " +
    _0x5041d1;
  if (_0x565e53 !== undefined) {
    _0x565e53 = Math.min(_0x132dcd.measureText(_0x3b9a82).width, _0x565e53);
  } else {
    _0x565e53 = _0x132dcd.measureText(_0x3b9a82).width;
  }
  _0x4be99f.width = _0x565e53 + _0x26067d;
  _0x4be99f.height = _0x528ad1 + _0x281d34;
  if (_0x42ca09 !== undefined) {
    if (_0x37f3aa !== undefined) {
      _0x132dcd.globalAlpha = _0x37f3aa;
    }
    _0x132dcd.fillStyle = _0x42ca09;
    if (_0x16e14f !== undefined) {
      roundRect(
        _0x132dcd,
        _0x347cd3 + 2,
        _0x347cd3,
        _0x565e53 + _0x26067d - _0x347cd3 * 2 - 4,
        _0x528ad1 + _0x281d34 - _0x347cd3 * 2,
        _0x16e14f
      );
      _0x132dcd.fill();
    } else {
      _0x132dcd.fillRect(
        _0x347cd3,
        _0x347cd3,
        _0x565e53 + _0x26067d - _0x347cd3 * 2,
        _0x528ad1 + _0x281d34 - _0x347cd3 * 2
      );
    }
    _0x132dcd.globalAlpha = 1;
    _0x347cd3 !== 0 &&
      ((_0x132dcd.lineWidth = _0x347cd3),
      (_0x132dcd.strokeStyle = _0x52ba9e),
      _0x132dcd.stroke());
  }
  _0x132dcd.textBaseline = "middle";
  _0x132dcd.font =
    (_0x5b1fe4 !== undefined ? _0x5b1fe4 + " " : "") +
    _0x528ad1 +
    "px " +
    _0x5041d1;
  if (_0x3940a1 !== undefined) {
    _0x132dcd.strokeStyle = _0x3940a1;
    _0x132dcd.lineWidth = _0x2645f8;
    _0x132dcd.lineJoin = "miter";
    _0x132dcd.miterLimit = 2;
    _0x132dcd.strokeText(
      _0x3b9a82,
      Math.floor(_0x26067d / 2),
      Math.floor(_0x281d34 / 2) + Math.floor(_0x528ad1 / 2),
      _0x565e53
    );
  }
  _0x132dcd.fillStyle = _0xf6843d;
  _0x132dcd.fillText(
    _0x3b9a82,
    Math.floor(_0x26067d / 2),
    Math.floor(_0x281d34 / 2) + Math.floor(_0x528ad1 / 2),
    _0x565e53
  );
  _0x4be99f.w2 = _0x4be99f.width / 2;
  _0x4be99f.h2 = _0x4be99f.height / 2;
  return _0x4be99f;
}
function gui_create_button(
  _0x1e3330,
  _0x50d53e,
  _0x4d3d9f,
  _0x536a8b,
  _0x3e97c5,
  _0x955b11,
  _0x2a1596,
  _0x2cf9aa,
  _0x3c7822,
  _0x30c775,
  _0x52772f
) {
  if (_0x3c7822 === undefined) {
    _0x3c7822 = 0;
  }
  if (_0x2cf9aa === undefined) {
    _0x2cf9aa = 0;
  }
  if (_0x30c775 === undefined) {
    _0x30c775 = 0;
  }
  if (_0x52772f === undefined) {
    _0x52772f = 1;
  }
  _0x3e97c5 = _0x3e97c5 === 3 ? 3 : _0x3e97c5 === 1 ? 2 : 1;
  if (_0x955b11 !== 1) {
    _0x955b11 = 0;
  }
  if (_0x536a8b) {
    var _0x15dd00 = _0x536a8b;
  }
  var _0x54919c = {
    width: _0x1e3330,
    height: _0x50d53e,
    img: _0x15dd00,
    state: BUTTON_OUT,
    translate: {
      x: _0x2cf9aa,
      y: _0x3c7822,
      _x: _0x2cf9aa,
      _y: _0x3c7822,
    },
    enable_breath: _0x955b11,
    breath: 0,
    callback: _0x2a1596,
    position: _0x30c775,
    active: _0x52772f,
  };
  var _0x16a1cd = function () {
    return _0x54919c.img[_0x54919c.state];
  };
  var _0xd93e8b = function (_0x1dfe68) {
    var _0x22fa7a = _0x54919c.translate;
    return (
      (_0x54919c.width === 0 || _0x54919c.height === 0) &&
        ((_0x54919c.width = _0x54919c.img[0].width),
        (_0x54919c.height = _0x54919c.img[0].height)),
      _0x1dfe68.x > _0x22fa7a.x &&
        _0x1dfe68.x < _0x22fa7a.x + _0x54919c.width / _0x3e97c5 &&
        _0x1dfe68.y > _0x22fa7a.y &&
        _0x1dfe68.y < _0x22fa7a.y + _0x54919c.height / _0x3e97c5
    );
  };
  var _0x1b0686 = function (_0x40ea7a, _0x120b70, _0x2eac69) {
    if (_0xd93e8b(_0x120b70)) {
      if (_0x2eac69 == MOUSE_DOWN) {
        _0x54919c.state = BUTTON_CLICK;
      } else {
        if (_0x2eac69 == MOUSE_UP) {
          _0x54919c.state = BUTTON_IN;
        } else {
          if (_0x2eac69 == MOUSE_MOVE && _0x54919c.state != BUTTON_CLICK) {
            _0x54919c.state = BUTTON_IN;
          }
        }
      }
      return true;
    }
    return (_0x54919c.state = BUTTON_OUT), false;
  };
  var _0x955b11 = function () {
    var _0x6e334a = 0;
    if (_0x54919c.enable_breath === 1) {
      if (_0x54919c.state === BUTTON_IN || _0x54919c.state === BUTTON_CLICK) {
        _0x54919c.breath = (_0x54919c.breath + delta * 1000) % 1000;
      } else {
        if (_0x54919c.breath > 0) {
          _0x54919c.breath =
            _0x54919c.breath > 500
              ? _0x54919c.breath + delta * 1000
              : _0x54919c.breath - delta * 1000;
          if (_0x54919c.breath < 0 || _0x54919c.breath > 1000) {
            _0x54919c.breath = 0;
          }
        }
      }
      _0x6e334a =
        0.2 *
        Utils.ease_in_out_quad(
          _0x54919c.breath > 500
            ? (1000 - _0x54919c.breath) / 500
            : _0x54919c.breath / 500
        );
    }
    return _0x6e334a;
  };
  var _0x497957;
  if (_0x3e97c5 === 2) {
    _0x497957 = function (_0x2b72ea) {
      var _0x344bc0 = 1 + _0x955b11();
      var _0x493442 = _0x16a1cd();
      var _0xe9a102 = (_0x54919c.width * _0x344bc0) / 2;
      var _0x53c206 = (_0x54919c.height * _0x344bc0) / 2;
      var _0x4f6bee = (_0xe9a102 - _0x54919c.width / 2) / 2;
      var _0x47acb8 = (_0x53c206 - _0x54919c.height / 2) / 2;
      ctxDrawImage(
        _0x2b72ea,
        _0x493442,
        _0x54919c.translate.x - _0x4f6bee,
        _0x54919c.translate.y - _0x47acb8,
        _0xe9a102,
        _0x53c206
      );
    };
  } else {
    _0x3e97c5 === 3
      ? ((_0x497957 = function (_0x1d53ae) {
          var _0x462505 = _0x16a1cd();
          var _0x64b360 = _0x54919c.width;
          var _0x68277c = _0x54919c.height;
          var _0x3a71df = (_0x64b360 - _0x54919c.width) / 2;
          var _0x2f0cef = (_0x68277c - _0x54919c.height) / 2;
          ctxDrawImage(
            _0x1d53ae,
            _0x462505,
            _0x54919c.translate.x - _0x3a71df,
            _0x54919c.translate.y - _0x2f0cef,
            _0x64b360,
            _0x68277c
          );
        }),
        (_0x3e97c5 = 1))
      : (_0x497957 = function (_0x2f11f3) {
          var _0x42ac7d = _0x16a1cd();
          ctxDrawImage(
            _0x2f11f3,
            _0x42ac7d,
            _0x54919c.translate.x,
            _0x54919c.translate.y
          );
        });
  }
  return {
    info: _0x54919c,
    trigger: _0x1b0686,
    draw: _0x497957,
    in_button: _0xd93e8b,
  };
}
function gui_create_image_hd(
  _0x37de24,
  _0x420901,
  _0x3b94e5,
  _0x3c7675,
  _0x2f4c4b
) {
  var _0x43a6cc = {
      x: _0x3b94e5,
      y: _0x3c7675,
      _x: _0x3b94e5,
      _y: _0x3c7675,
    },
    _0x3290ce = function (_0x5cbd61) {
      ctxDrawImage(
        _0x5cbd61,
        _0x37de24,
        _0x43a6cc.x,
        _0x43a6cc.y,
        _0x37de24.width / 2,
        _0x37de24.height / 2
      );
    };
  return {
    translate: _0x43a6cc,
    draw: _0x3290ce,
    active: _0x420901,
    position: _0x2f4c4b,
  };
}
function gui_create_image(_0x532d86) {
  var _0x205eb6 = function (_0x57e5c0) {
    ctxDrawImage(_0x57e5c0, _0x532d86, 0, 0);
  };
  return {
    img: _0x532d86,
    translate: _0x5d11ab,
    draw: _0x205eb6,
  };
}
function gui_create_animation(_0x1614e7, _0x5f097b) {
  if (_0x5f097b === undefined) {
    _0x5f097b = 0.033;
  }
  var _0x1d46cf = 0;
  var _0x5531b4 = 0;
  var _0x3455ac = function () {
    return (
      (_0x5531b4 += delta),
      _0x5531b4 > _0x5f097b &&
        ((_0x1d46cf = (_0x1d46cf + 1) % _0x1614e7.length),
        (_0x5531b4 -= _0x5f097b)),
      _0x1614e7[_0x1d46cf]
    );
  };
  var _0xdefa6b = function (_0x1b88cf) {
    ctxDrawImage(_0x1b88cf, _0x3455ac(), 0, 0);
  };
  return {
    img: _0x1614e7,
    translate: _0x3f050b,
    draw: _0xdefa6b,
  };
}
function gui_add_breath_effect(
  _0x5e9090,
  _0x3df454,
  _0x199d90,
  _0x26be5a,
  _0x32facc,
  _0x494224,
  _0x35b6e5
) {
  _0x5e9090.end = _0x3df454;
  _0x5e9090.start = _0x199d90;
  _0x5e9090.speed_start = _0x26be5a;
  _0x5e9090.speed_end = _0x32facc;
  _0x5e9090.width = _0x5e9090.img.width;
  _0x5e9090.height = _0x5e9090.img.height;
  _0x5e9090.scale = (_0x3df454 + _0x199d90) / 2;
  _0x5e9090.breath = false;
  _0x5e9090.draw = function (_0x411964) {
    _0x5e9090.translate.x = canw2 - _0x5e9090.width / 2;
    ctxDrawImage(
      _0x411964,
      _0x5e9090.img,
      0,
      0,
      _0x5e9090.img.width,
      _0x5e9090.img.height,
      _0x5e9090.translate.x,
      _0x5e9090.translate.y,
      _0x5e9090.width,
      _0x5e9090.height
    );
  };
}
function gui_breath_effect(_0x16997b) {
  _0x16997b.scale += _0x16997b.breath
    ? delta / _0x16997b.speed_start
    : -delta / _0x16997b.speed_end;
  if (_0x16997b.scale > _0x16997b.end) {
    _0x16997b.breath = false;
  } else {
    if (_0x16997b.scale < _0x16997b.start) {
      _0x16997b.breath = true;
    }
  }
}
var SENDWORD = "send",
  SHOW_ID = Utils.getURLData("id") === "1" ? 1 : 0,
  PASSWORD = Utils.getURLData("password"),
  RIVET_API = "https://matchmaker.api.rivet.gg/v1",
  STATE = {
    DELETE: 1,
    HURT: 2,
    COLD: 4,
    HUNGER: 8,
    ATTACK: 16,
    WALK: 32,
    IDLE: 64,
    HEAL: 128,
    WEB: 256,
  },
  KIT = [
    {
      price: 1000,
      items: [
        [2, INV.FIRE],
        [1, INV.COOKED_MEAT],
        [8, INV.PLANT],
        [1, INV.BREAD],
      ],
    },
    {
      price: 2000,
      items: [
        [2, INV.BIG_FIRE],
        [1, INV.PICK_WOOD],
        [2, INV.COOKED_MEAT],
        [16, INV.PLANT],
        [2, INV.BREAD],
      ],
    },
    {
      price: 4000,
      items: [
        [3, INV.BIG_FIRE],
        [1, INV.PICK],
        [4, INV.COOKED_MEAT],
        [20, INV.PLANT],
        [4, INV.BREAD],
        [1, INV.WORKBENCH],
        [80, INV.STONE],
        [140, INV.WOOD],
      ],
    },
    {
      price: 8000,
      items: [
        [1, INV.BAG],
        [4, INV.BIG_FIRE],
        [1, INV.PICK_GOLD],
        [6, INV.COOKED_MEAT],
        [30, INV.PLANT],
        [6, INV.BREAD],
        [1, INV.WORKBENCH],
        [150, INV.STONE],
        [200, INV.WOOD],
        [60, INV.GOLD],
        [2, INV.BOTTLE_FULL],
      ],
    },
    {
      price: 16000,
      items: [
        [1, INV.BAG],
        [1, INV.PICK_DIAMOND],
        [1, INV.BED],
        [7, INV.CAKE],
        [2, INV.BOTTLE_FULL],
        [2, INV.BIG_FIRE],
        [1, INV.FURNACE],
        [15, INV.STONE_WALL],
        [2, INV.STONE_DOOR],
        [1, INV.TOTEM],
        [1, INV.SPANNER],
        [200, INV.STONE],
        [300, INV.WOOD],
      ],
    },
    {
      price: 16000,
      items: [
        [1, INV.BAG],
        [1, INV.COAT],
        [1, INV.SHOVEL_GOLD],
        [1, INV.PICK_GOLD],
        [10, INV.CAKE],
        [4, INV.BOTTLE_FULL],
        [6, INV.BIG_FIRE],
        [3, INV.BANDAGE],
        [1, INV.BOOK],
        [200, INV.STONE],
        [300, INV.WOOD],
      ],
    },
    {
      price: 16000,
      items: [
        [1, INV.BAG],
        [1, INV.HOOD],
        [1, INV.HAMMER_GOLD],
        [3, INV.BANDAGE],
        [1, 0],
        [1, INV.PICK_GOLD],
        [7, INV.CAKE],
        [2, INV.BOTTLE_FULL],
        [4, INV.BIG_FIRE],
        [150, INV.STONE],
        [200, INV.WOOD],
        [1, INV.LOCKPICK],
      ],
    },
    {
      price: 16000,
      items: [
        [1, INV.BAG],
        [1, INV.PEASANT],
        [1, INV.PICK_GOLD],
        [7, INV.CAKE],
        [2, INV.BOTTLE_FULL],
        [4, INV.BIG_FIRE],
        [2, INV.WINDMILL],
        [4, INV.BREAD_OVEN],
        [10, INV.PLOT],
        [6, INV.WHEAT_SEED],
        [4, INV.SEED],
        [1, INV.WATERING_CAN_FULL],
        [500, INV.WOOD],
      ],
    },
    {
      price: 16000,
      items: [
        [1, INV.BAG],
        [1, INV.PICK_GOLD],
        [16, INV.FOODFISH_COOKED],
        [1, INV.BOTTLE_FULL],
        [6, INV.BIG_FIRE],
        [3, INV.BANDAGE],
        [1, INV.DIVING_MASK],
        [1, INV.SWORD],
        [16, INV.BRIDGE],
        [150, INV.STONE],
        [200, INV.WOOD],
      ],
    },
    {
      price: 20000,
      items: [
        [1, INV.BAG],
        [1, INV.PICK_GOLD],
        [1, INV.CAKE],
        [1, INV.BOTTLE_FULL],
        [3, INV.BIG_FIRE],
        [3, INV.BANDAGE],
        [1, INV.GOLD_HELMET],
        [1, INV.SWORD_GOLD],
        [1, INV.DIAMOND_SPEAR],
        [2, INV.GOLD_SPIKE],
        [50, INV.STONE],
        [100, INV.WOOD],
      ],
    },
  ],
  CLIENT = {
    VERSION_NUMBER: 52,
    TIMEOUT_TIME: 2000,
    TIMEOUT_NUMBER: 3,
    PING: "[13]",
    PING_DELAY: 60000,
    ROTATE: 0.2,
    ATTACK: 0.2,
    SLOW_ATTACK: 0.58,
    CAM_DELAY: 50,
    MUTE_DELAY: 125000,
    TIMEOUT_SERVER: 600000,
    WAITING_FOR_SERVER: 8000,
    DELAY_CONNECTION_UPDATE: 5,
    LAG_DISTANCE: 200,
    LOOSE_FOCUS: 15,
    TOKEN_LEN: 14,
    TEAM_MANAGE: 0,
    TEAM_SHOW: 1,
    TEAM_LEAVE: 2,
    TEAM_JOIN: 3,
    TEAM_FULL: 4,
    SKIN_MAX: 20,
    ACCESSORY_MAX: 14,
    SYMBOL_MAX: 4,
  };
function NetworkClient() {
  var _ = this;
  this.socket = null;
  this["_current_id"] = 0;
  this.server_list = [];
  this.mode_list = [[], [], [], [], [], [], [], [], []];
  this.selected_server = [-1, -1, -1, -1, -1, -1, -1, -1, -1];
  this.current_mode = 0;
  this.privateServer = 0;
  this.get_rivet_token = async function () {
    if (environment == environments.DEV) {
      let _0x5571c7 = await fetch(DB + "rivet-token");
      return await _0x5571c7.text();
    } else {
      return null;
    }
  };
  this.fetch_server_list = async function () {
    let e = await this.get_rivet_token(),
      //h = { Authorization: "Bearer " + e };
      h = {};
    if (e) {
    }
    let sl = await fetch(RIVET_API + "/lobbies/list", {
      method: "GET",
      headers: h,
    });
    if (!sl.ok) {
      console.error("Failed to list lobbies");
      throw "Failed to list lobbies";
    }
    let _0x1dd028 = await sl.json();
    console.log("Lobbies", _0x1dd028);
    this.server_list = [];
    let _0x3d84bb = {};
    for (let i of _0x1dd028.game_modes) {
      this.server_list.push({
        a: "Auto Select",
        gm: i.game_mode_id,
        m: 100,
        nu: 0,
        auto: true,
      });
    }
    for (let i of _0x1dd028.lobbies) {
      let _0x131e00 = i.game_mode_id,
        _0x4b4b9d;
      _0x131e00 in _0x3d84bb
        ? (_0x4b4b9d = ++_0x3d84bb[_0x131e00])
        : (_0x4b4b9d = _0x3d84bb[_0x131e00] = 1);
      let _0x3ba8fd = _0x1dd028.regions.find(
        (_0x32a90e) => _0x32a90e.region_id == i.region_id
      );
      this.server_list.push({
        a: _0x3ba8fd.region_display_name + " " + _0x4b4b9d,
        gm: i.game_mode_id,
        idx: _0x4b4b9d,
        m: i.max_players_normal,
        nu: i.total_player_count,
        id: i.lobby_id,
      });
    }
  };
  this.geolocate_server = function (_0x5aefdd) {
    var _0x49431e = [];
    for (var _0x3d42a2 = 0; _0x3d42a2 < _0x5aefdd.length; _0x3d42a2++) {
      if (_0x5aefdd[_0x3d42a2].a.indexOf(TZ) !== -1) {
        _0x49431e.push(_0x3d42a2);
      }
    }
    if (_0x49431e.length === 0) {
      return 0;
    }
    return _0x49431e[Math.floor(Math.random() * _0x49431e.length)];
  };
  this.set_server_list = function (_0x14f02f) {
    var _0x10e7e7 = 0;
    for (var _0x3fff45 = 0; _0x3fff45 < _0x14f02f.length; _0x3fff45++) {
      _0x10e7e7 += _0x14f02f[_0x3fff45].nu;
    }
    var _0x3077ed = document.getElementById("servselect");
    if (client.selected_server[client.current_mode] === -1) {
      client.selected_server[client.current_mode] = _0x3077ed.selectedIndex =
        client.geolocate_server(_0x14f02f);
    } else {
      _0x3077ed.selectedIndex = client.selected_server[client.current_mode];
    }
    var _0x5a8791 =
      '<label for="ul-id"><button type="button" class="ng-binding">' +
      _0x14f02f[_0x3077ed.selectedIndex].a +
      (_0x14f02f[_0x3077ed.selectedIndex].nu > 0
        ? " [" +
          _0x14f02f[_0x3077ed.selectedIndex].nu +
          " " +
          LANG[TEXT.PLAYERS] +
          "]"
        : "") +
      "</button></label>" +
      '<ul role="listbox" id="ul-id" class="md-whiteframe-z1" name="ul-id">' +
      '<li role="option" id="selectDisabled">' +
      LANG[TEXT.CHOOSE] +
      " (" +
      this.total_players +
      ") " +
      LANG[TEXT.TOTAL_PLAYERS] +
      "</li>";
    for (var _0x3fff45 = 0; _0x3fff45 < _0x14f02f.length; _0x3fff45++) {
      _0x5a8791 += '<li role="option">' + _0x14f02f[_0x3fff45].a;
      _0x5a8791 +=
        " [" + _0x14f02f[_0x3fff45].nu + " " + LANG[TEXT.PLAYERS] + "]";
      _0x5a8791 += "</li>\n";
    }
    _0x5a8791 +=
      '<li role="option" id="selectDisabled">(' +
      _0x10e7e7 +
      ") " +
      LANG[TEXT.TOTAL_MODE] +
      "</li>";
    _0x5a8791 += "</div>";
    _0x3077ed.innerHTML = _0x5a8791;
    $(".md-select").on("click", function () {
      $(this).toggleClass("active");
    });
    $(".md-select ul li").on("click", function () {
      var _0x4b860e = $(this).text(),
        _0x48759e = -1,
        _0x44a8d9 = client.mode_list[client.current_mode];
      for (var _0x434b85 = 0; _0x434b85 < _0x44a8d9.length; _0x434b85++) {
        if (
          _0x44a8d9[_0x434b85].a +
            " [" +
            _0x44a8d9[_0x434b85].nu +
            " " +
            LANG[TEXT.PLAYERS] +
            "]" ===
          _0x4b860e
        ) {
          _0x48759e = _0x434b85;
          break;
        }
      }
      if (_0x48759e === -1) {
        return;
      }
      document.getElementById("servselect").selectedIndex = _0x48759e;
      client.selected_server[client.current_mode] = _0x48759e;
      $(".md-select ul li").removeClass("active");
      $(this).addClass("active");
      $(".md-select label button").text(_0x4b860e);
    });
  };
  this.total_players = 0;
  this.update_server_list = function () {
    this.total_players = 0;
    for (
      var _0x115bd5 = 0;
      _0x115bd5 < client.server_list.length;
      _0x115bd5++
    ) {
      if (this.server_list[_0x115bd5].gm == "experimental") {
        this.mode_list[WORLD.MODE_EXPERIMENTAL].push(
          this.server_list[_0x115bd5]
        );
      } else {
        if (this.server_list[_0x115bd5].gm == "zombies") {
          this.mode_list[WORLD.MODE_ZOMBIES].push(this.server_list[_0x115bd5]);
        } else {
          if (this.server_list[_0x115bd5].gm == "forest") {
            this.mode_list[WORLD.MODE_LEGACY].push(this.server_list[_0x115bd5]);
          } else {
            if (this.server_list[_0x115bd5].gm == "battle-royale") {
              this.mode_list[WORLD.MODE_BR].push(this.server_list[_0x115bd5]);
            } else {
              if (this.server_list[_0x115bd5].gm == "vampires") {
                this.mode_list[WORLD.MODE_VAMPIRES].push(
                  this.server_list[_0x115bd5]
                );
              } else {
                this.mode_list[WORLD.MODE_PVP].push(
                  this.server_list[_0x115bd5]
                );
              }
            }
          }
        }
      }
      this.total_players += this.server_list[_0x115bd5].nu;
    }
    for (_0x115bd5 = 0; _0x115bd5 < this.mode_list.length; _0x115bd5++) {
      if (this.mode_list[_0x115bd5].length === 0) {
        this.mode_list[_0x115bd5].push({
          a: LANG[TEXT.COMMING_SOON],
          nu: 0,
          i: "127.0.0.1",
          p: 80,
        });
      }
    }
    this.set_server_list(this.mode_list[0]);
    this.select_gamemode = function (_0x53b7d5) {
      client.current_mode = _0x53b7d5;
      client.set_server_list(client.mode_list[client.current_mode]);
      client.set_server_list(client.mode_list[client.current_mode]);
      document.getElementById("servselect").selectedIndex = client.current_mode;
    };
  };
  this.timeout_server = 0;
  this.timeout_number = 0;
  this.timeout_handler = null;
  this.timeout = function () {
    _.timeout_number++;
    _.socket.close();
    CurrentlyPlaying = false;
    if (_.timeout_number > CLIENT.TIMEOUT_NUMBER) {
      ___adsvid = 1;
      ui.error_level = CLIENT.ERROR_REFUSED;
      _.new_alert(LANG[TEXT.YOU_CANNOT_JOIN]);
      ui.waiting = false;
      user.reconnect.enabled && game.quit(ui.run);
    } else {
      _.connect_timeout();
    }
  };
  this.kick = function (_0x29d3f1) {
    if (this["_current_id"] != this.socket["_current_id"]) {
      return;
    }
    this["_current_id"]++;
    this.new_alert(LANG[TEXT.KICKED] + _0x29d3f1);
    game.quit(ui.run);
  };
  this.mute = function () {
    this.new_alert("You speak too much");
  };
  this.already_used_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.KEY_ALREADY]);
    ui.waiting = false;
  };
  this.hide_shop_kit = function () {
    user.shop.open = false;
  };
  this.hide_recipe_book = function () {
    game.show_recipe_book = 0;
  };
  this.hide_clock = function () {
    game.show_clock = 0;
  };
  this.sand_tempest = function (_0x1d47ed) {
    user.desert.tempest = _0x1d47ed;
    if (world.dist_desert > -300) {
      if (_0x1d47ed === 0) {
        this.new_alert(LANG[TEXT.TEMPEST_OFF]);
      } else {
        this.new_alert(LANG[TEXT.TEMPEST_ON]);
      }
    }
  };
  this.bandage = function (_0x39bc5d) {
    user.bandage = _0x39bc5d;
  };
  this.blizzard_status = function (_0x53d499) {
    user.blizzard = _0x53d499;
  };
  this.blizzard = function (_0x59153f) {
    user.winter.tempest = _0x59153f;
    if (world.dist_winter > -300) {
      if (_0x59153f === 0) {
        this.new_alert(LANG[TEXT.BLIZZARD_OFF]);
      } else {
        this.new_alert(LANG[TEXT.BLIZZARD_ON]);
      }
    }
  };
  this.explorer_quest = function (_0x4d00b7) {
    if (_0x4d00b7 === 0) {
      document.getElementById("exploreForest").src = "img/forest-leaf-ok.png";
    } else {
      if (_0x4d00b7 === 1) {
        document.getElementById("exploreWinter").src =
          "img/winter-flake-ok.png";
      } else {
        if (_0x4d00b7 === 2) {
          document.getElementById("exploreLava").src =
            "img/lava-volcano-ok.png";
        } else {
          if (_0x4d00b7 === 3) {
            document.getElementById("exploreDesert").src =
              "img/desert-cactus-ok.png";
          }
        }
      }
    }
  };
  this.hide_market = function () {
    game.show_market = 0;
  };
  this.hide_quest = function () {
    game.show_quest = 0;
  };
  this.clean_inventory = function () {
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.id = -1;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  };
  this.wrong_key = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert();
    ui.waiting = false;
  };
  this.commands = function (_0x23486a) {
    for (var _0x443594 = 0; _0x443594 < _0x23486a.length; _0x443594++) {
      if (typeof _0x23486a[_0x443594] === "string") {
        _0x23486a[_0x443594] = Utils.escape_html(_0x23486a[_0x443594]);
      }
    }
    user.terminal.write_command(
      _0x23486a[1],
      _0x23486a[2],
      _0x23486a[3],
      _0x23486a[4]
    );
  };
  this.message = function (_0x4d03ca) {
    this.new_alert(_0x4d03ca);
  };
  this.wrong_password = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.WRONG_PASSWORD]);
    ui.waiting = false;
  };
  this.new_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.NEW_VERSION]);
    ui.waiting = false;
  };
  this.old_version = function () {
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.OLD_VERSION]);
    ui.waiting = false;
  };
  this.get_bag = function () {
    user.inv.update_bag_size(1, 0);
    game.update_inv_buttons();
  };
  this.verified_account = function (_0x2d8f34) {
    var _0x149e68 = _0x2d8f34[1];
    var _0x5b8863 = world.players[_0x149e68];
    _0x5b8863.skin = _0x2d8f34[2];
    _0x5b8863.accessory = _0x2d8f34[3];
    _0x5b8863.baglook = _0x2d8f34[4];
    _0x5b8863.book = _0x2d8f34[5];
    _0x5b8863.crate = _0x2d8f34[6];
    _0x5b8863.dead = _0x2d8f34[7];
    _0x5b8863.level = _0x2d8f34[8];
    var _0x23b1f6 = world.fast_units[_0x149e68 * world.max_units];
    _0x23b1f6 &&
      ((_0x23b1f6.skin = _0x2d8f34[2]),
      (_0x23b1f6.accessory = _0x2d8f34[3]),
      (_0x23b1f6.baglook = _0x2d8f34[4]),
      (_0x23b1f6.book = _0x2d8f34[5]));
  };
  this.build_stop = function (_0x3e6b51) {
    if (_0x3e6b51 === INV.BAG) {
      user.inv.update_bag_size(1, 0);
      game.update_inv_buttons();
    } else {
      this.gather([0, _0x3e6b51, 1]);
    }
    user.craft.restart();
  };
  this.recycle_ok = function (_0x373d45) {
    user.auto_feed.delay = 0;
    user.craft.do_recycle(_0x373d45);
  };
  this.recycle_stop = function (_0x4c815a) {
    var _0x3b2206 = RECIPES[_0x4c815a].r;
    for (var _0x1b9e83 = 0; _0x1b9e83 < _0x3b2206.length; _0x1b9e83++) {
      if (
        user.inv.max > user.inv.can_select.length ||
        user.inv.n[_0x3b2206[_0x1b9e83][0]] > 0
      ) {
        var _0x4096d7 = Math.floor(_0x3b2206[_0x1b9e83][1] * 0.8);
        if (!_0x4096d7) {
          continue;
        }
        this.gather([0, _0x3b2206[_0x1b9e83][0], _0x4096d7]);
      }
    }
    user.craft.restart();
  };
  this.build_ok = function (_0x2380c9) {
    user.auto_feed.delay = 0;
    user.craft.do_craft(_0x2380c9);
  };
  this.new_alert = function (_0x109c48) {
    if (!user.alert.text) {
      user.alert.text = _0x109c48;
    } else {
      if (
        _0x109c48 !== user.alert.text &&
        _0x109c48 !== user.alert.list[user.alert.list.length - 1]
      ) {
        user.alert.list.push(_0x109c48);
      }
    }
  };
  this.no_resources = function () {
    this.new_alert(LANG[TEXT.NO_MORE_RESOURCES]);
  };
  this.survive = function () {
    var _0x155689;
    if (user.day == 0) {
      _0x155689 = LANG[TEXT.SURVIVED_1DAY];
    } else {
      _0x155689 = LANG[TEXT.SURVIVED] + (user.day + 1) + LANG[TEXT.DAYS];
    }
    this.new_alert(_0x155689);
    user.day++;
  };
  this.fail_restore = function () {
    clearTimeout(_.timeout_handler);
    user.reconnect.enabled = false;
    user.alive = false;
    this.new_alert(LANG[TEXT.DEAD_SAD]);
    game.quit(ui.run);
    this.socket.close();
    CurrentlyPlaying = false;
  };
  this.blocked = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME]);
    ui.waiting = false;
  };
  this.full = function () {
    ___adsvid = 1;
    clearTimeout(this.timeout_handler);
    this.new_alert(LANG[TEXT.SPAM_ME2]);
    ui.waiting = false;
  };
  this.new_player = function (np) {
    var e = np[1];
    var p = world.players;
    p[e].nickname = np[2];
    p[e].skin = np[3];
    p[e].accessory = np[4];
    p[e].baglook = np[5];
    p[e].book = np[6];
    p[e].crate = np[7];
    p[e].dead = np[8];
    p[e].level = np[9];
    p[e].score = 0;
    p[e].ldb_label = null;
    p[e].label = null;
    p[e].label_winter = null;
    p[e].alive = true;
    if (SHOW_ID === 1) {
      p[e].nickname += "|" + e;
    }
    setTimeout(() => {
      JoinLeave.Join.unshift(np[2]);
      if (JoinLeave.Join.length > 5) {
        JoinLeave.Join.pop();
      }
    }, 750);
    JoinLeave.toggle11 = true;
    clearTimeout(JoinLeave.toggle1);
    JoinLeave.toggle1 = setTimeout(() => {
      JoinLeave.toggle11 = false;
    }, 10e3);
  };
  this.get_focus = function () {
    this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([11]));
  };
  this.empty_res = function () {
    this.new_alert(LANG[TEXT.EMPTY]);
  };
  this.inv_full = function () {
    this.new_alert(LANG[TEXT.INV_FULL]);
  };
  this.choose_kit = function (_0x34a24d) {
    this.socket[SENDWORD](WINDOW3[JSONWORD7].stringify([21, _0x34a24d]));
    user.shop.open = false;
  };
  this.kit_ok = function (_0x56d71c) {
    var _0x58c12c = KIT[_0x56d71c - 1].items;
    for (
      var _0x35ec6d = 0;
      _0x35ec6d < _0x58c12c.length && user.inv.max > user.inv.can_select.length;
      _0x35ec6d++
    ) {
      var _0x382ad8 = _0x58c12c[_0x35ec6d][1],
        _0x40fb2e = _0x58c12c[_0x35ec6d][0];
      if (_0x58c12c[_0x35ec6d][1] === INV.BAG) {
        user.inv.update_bag_size(1, 0);
      } else {
        this.gather([0, _0x382ad8, _0x40fb2e]);
      }
    }
  };
  this.gather = function (e) {
    var len = e.length,
      invUser = user.inv;
    for (var i = 1; i < len; i += 2) {
      var temp = e[i],
        tempp = e[i + 1];
      for (
        var _0x54c542 = 0;
        _0x54c542 < invUser.can_select.length;
        _0x54c542++
      ) {
        if (invUser.can_select[_0x54c542].id == temp) {
          invUser.n[temp] += tempp;
          break;
        }
      }
      _0x54c542 == invUser.can_select.length &&
        ((invUser.n[temp] = tempp),
        invUser.can_select.push(game.inv_buttons[temp]),
        game.update_inv_buttons());
    }
    user.craft.update();
  };
  this.gauges = function (l, h, c, t, o, wa, bandage) {
    if (
      Math.floor(11 - (Date.now() - TimerTools.HPTimer) / 1e3) < 5 ||
      l / 100 > user.gauges.l
    ) {
      TimerTools.HPTimer = new Date().getTime();
    }
    TimerTools.GaugeTimer = new Date().getTime();
    user.gauges.l = l / 100;
    user.gauges.realhp = 2 * l;
    user.gauges.h = h / 100;
    user.gauges.c = c / 100;
    user.gauges.t = t / 100;
    user.gauges.o = o / 100;
    user.gauges.wa = wa / 100;
    user.bandage = bandage;
  };
  this.succeed_quest = function (e) {
    game.quests.modify(e, 2);
  };
  this.fail_quest = function (_0x2d344a) {
    game.quests.modify(_0x2d344a, 0);
  };
  this.claimed = function (_0x49f46b) {
    game.quests.modify(_0x49f46b, 3);
  };
  this.gauges_life = function (l, bandage) {
    user.gauges.l = l / 100;
    user.bandage = bandage;
  };
  this.gauges_water = function (t) {
    user.gauges.t = t / 100;
  };
  this.gauges_food = function (h) {
    user.gauges.h = h / 100;
  };
  this.gauges_warm = function (wa) {
    user.gauges.wa = wa / 100;
  };
  this.gauges_cold = function (c) {
    user.gauges.c = c / 100;
  };
  this.get_time = function (time) {
    world.time = time;
    world.transition = true;
    audio.transition = 1;
  };
  this.change_ground = function () {
    document.getElementById("game_body").style.backgroundColor =
      SPRITE.GROUND[world.time];
  };
  this.kill_player = function (e) {
    if (
      world.mode == WORLD.MODE_HUNGER_GAMES &&
      world.players[e].nickname !== "spectator"
    ) {
      this.new_alert(world.players[e].nickname + LANG[TEXT.DEAD]);
    }
    world.players[e].alive = false;
    JoinLeave.Leave.unshift(world.players[e].nickname);
    if (5 < JoinLeave.Leave.length) {
      JoinLeave.Leave.pop();
    }
    JoinLeave.toggle22 = true;
    clearTimeout(JoinLeave.toggle2);
    JoinLeave.toggle2 = setTimeout(() => {
      JoinLeave.toggle22 = false;
    }, 10e3);
  };
  this.set_cam = function (e) {
    var _0x1a1533 = new Uint16Array(e);
    player.cam.change(_0x1a1533[1], _0x1a1533[2]);
  };
  this.recover_focus = function (e) {
    var _0x4adb46 = new Uint16Array(e);
    user.cam.change(_0x4adb46[1], _0x4adb46[2]);
  };
  this.hitten_other = function (e, t) {
    var _0x1eec46 = new Uint16Array(t),
      _0x1ce805 = (e.length - 2) / 4;
    for (var _0x2bc550 = 0; _0x2bc550 < _0x1ce805; _0x2bc550++) {
      var _0x5c9424 = _0x1eec46[1 + 2 * _0x2bc550];
      var _0x57dc23 = e[4 + 4 * _0x2bc550];
      var _0xd59d52 = ((e[5 + 4 * _0x2bc550] >> 1) / 127) * Math.PI * 2;
      var _0x59c0dd = world.fast_units[_0x57dc23 * world.max_units + _0x5c9424];
      if (_0x59c0dd && _0x59c0dd.hit) {
        if (audio.loaded && audio.run) {
          audio.hit(
            e[5 + 4 * _0x2bc550] & 1,
            SOUND_BUILD[_0x59c0dd.type],
            _0x59c0dd.x,
            _0x59c0dd.y
          );
        }
        _0x59c0dd.hit.angle = _0xd59d52;
        _0x59c0dd.hit.update = _0xd59d52;
      }
    }
  };
  this.hitten = function (e) {
    var _0x3e35b9 = new Uint16Array(e),
      _0x22ebd6 = (_0x3e35b9.length - 1) / 4;
    for (var _0x4519ba = 0; _0x4519ba < _0x22ebd6; _0x4519ba++) {
      var _0x4ee47f = _0x4519ba * 4,
        _0x2a0c87 = _0x3e35b9[1 + _0x4ee47f],
        _0x39b232 = _0x3e35b9[2 + _0x4ee47f],
        _0x3ab866 = ((_0x3e35b9[3 + _0x4ee47f] >> 1) / 127) * Math.PI * 2,
        _0x480820 = _0x3e35b9[4 + _0x4ee47f],
        _0x484d7d = MAP.tiles[_0x39b232][_0x2a0c87],
        _0x422de6;
      switch (_0x480820) {
        case 0:
          (_0x422de6 = _0x484d7d.p[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 1:
          (_0x422de6 = _0x484d7d.s[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 2:
          (_0x422de6 = _0x484d7d.s[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 3:
          (_0x422de6 = _0x484d7d.s[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 4:
          (_0x422de6 = _0x484d7d.t[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 5:
          (_0x422de6 = _0x484d7d.t[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 6:
          (_0x422de6 = _0x484d7d.t[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 7:
          (_0x422de6 = _0x484d7d.t[3][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 8:
          (_0x422de6 = _0x484d7d.t[4][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 9:
          (_0x422de6 = _0x484d7d.t[5][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 10:
          (_0x422de6 = _0x484d7d.g[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 11:
          (_0x422de6 = _0x484d7d.g[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 12:
          (_0x422de6 = _0x484d7d.g[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 13:
          (_0x422de6 = _0x484d7d.d[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 14:
          (_0x422de6 = _0x484d7d.d[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 15:
          (_0x422de6 = _0x484d7d.d[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 16:
          (_0x422de6 = _0x484d7d.b[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 17:
          (_0x422de6 = _0x484d7d.b[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 18:
          (_0x422de6 = _0x484d7d.b[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 19:
          (_0x422de6 = _0x484d7d.b[3][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 20:
          (_0x422de6 = _0x484d7d.f[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 21:
          (_0x422de6 = _0x484d7d.f[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 22:
          (_0x422de6 = _0x484d7d.f[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 23:
          (_0x422de6 = _0x484d7d.sw[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 24:
          (_0x422de6 = _0x484d7d.sw[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 25:
          (_0x422de6 = _0x484d7d.sw[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 26:
          (_0x422de6 = _0x484d7d.gw[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 27:
          (_0x422de6 = _0x484d7d.gw[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 28:
          (_0x422de6 = _0x484d7d.gw[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 29:
          (_0x422de6 = _0x484d7d.dw[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 30:
          (_0x422de6 = _0x484d7d.dw[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 31:
          (_0x422de6 = _0x484d7d.dw[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 32:
          (_0x422de6 = _0x484d7d.a[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 33:
          (_0x422de6 = _0x484d7d.a[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 34:
          (_0x422de6 = _0x484d7d.a[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 35:
          (_0x422de6 = _0x484d7d.cs[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 36:
          (_0x422de6 = _0x484d7d.cs[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 37:
          (_0x422de6 = _0x484d7d.cs[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 38:
          (_0x422de6 = _0x484d7d.cs[3][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 40:
          (_0x422de6 = _0x484d7d.plm[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 41:
          (_0x422de6 = _0x484d7d.plm[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 42:
          (_0x422de6 = _0x484d7d.plm[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 50:
          (_0x422de6 = _0x484d7d.re[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 51:
          (_0x422de6 = _0x484d7d.re[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 52:
          (_0x422de6 = _0x484d7d.re[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 55:
          (_0x422de6 = _0x484d7d.c[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 56:
          (_0x422de6 = _0x484d7d.m[0][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 57:
          (_0x422de6 = _0x484d7d.m[1][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
        case 58:
          (_0x422de6 = _0x484d7d.m[2][0]),
            (_0x422de6.angle = _0x3ab866),
            (_0x422de6.update = true);
          break;
      }
      if (audio.loaded && audio.run && _0x422de6) {
        audio.hit(
          _0x3e35b9[3 + _0x4ee47f] & 1,
          SOUND_NATURE[_0x480820],
          _0x422de6.x,
          _0x422de6.y
        );
      }
    }
  };
  this.resurrection = function () {
    this.socket[SENDWORD](
      WINDOW2[JSONWORD2].stringify([
        17,
        user.resurrection.pid,
        user.resurrection.iid,
      ])
    );
  };
  this.give_wheat = function (_0x76441f, _0x43640c) {
    this.socket[SENDWORD](
      WINDOW2[JSONWORD4].stringify([
        22,
        _0x43640c,
        _0x76441f.pid,
        _0x76441f.iid,
      ])
    );
  };
  this.give_bread_oven = function (_0x4d3e52, _0xa50439, _0x463d8e) {
    if (_0xa50439) {
      this.socket[SENDWORD](
        WINDOW2[JSONWORD4].stringify([
          25,
          _0xa50439,
          _0x4d3e52.pid,
          _0x4d3e52.iid,
        ])
      );
    } else {
      this.socket[SENDWORD](
        WINDOW2[JSONWORD3].stringify([
          24,
          _0x463d8e,
          _0x4d3e52.pid,
          _0x4d3e52.iid,
        ])
      );
    }
  };
  this.take_bread = function (_0x804494) {
    this.socket[SENDWORD](
      WINDOW5[JSONWORD5].stringify([26, _0x804494.pid, _0x804494.iid])
    );
  };
  this.claim_quest_reward = function (_0x16470b) {
    this.socket[SENDWORD](WINDOW5[JSONWORD8].stringify([27, _0x16470b]));
  };
  this.give_well = function (_0x5b11d9) {
    this.socket[SENDWORD](
      WINDOW4[JSONWORD2].stringify([30, _0x5b11d9.pid, _0x5b11d9.iid])
    );
  };
  this.give_wood_extractor = function (_0x189ff6, _0x184977) {
    this.socket[SENDWORD](
      WINDOW3[JSONWORD5].stringify([
        38,
        _0x184977,
        _0x189ff6.pid,
        _0x189ff6.iid,
        _0x189ff6.type,
      ])
    );
  };
  this.give_wood = function (_0x3b4528, _0x55f807) {
    this.socket[SENDWORD](
      WINDOW3[JSONWORD5].stringify([
        12,
        _0x55f807,
        _0x3b4528.pid,
        _0x3b4528.iid,
      ])
    );
  };
  this.give_item = function (_0x50e16b, _0x264914, _0x574007) {
    this.socket[SENDWORD](
      WINDOW4[JSONWORD4].stringify([
        8,
        _0x264914,
        _0x574007,
        _0x50e16b.pid,
        _0x50e16b.iid,
      ])
    );
  };
  this.take_extractor = function (e) {
    this.socket[SENDWORD](
      WINDOW5[JSONWORD5].stringify([37, e.pid, e.iid, e.type])
    );
  };
  this.take_flour = function (_0x1f0a3d) {
    this.socket[SENDWORD](
      WINDOW5[JSONWORD5].stringify([23, _0x1f0a3d.pid, _0x1f0a3d.iid])
    );
  };
  this.take_chest = function (e) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([9, e.pid, e.iid]));
  };
  this.unlock_chest = function (e) {
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([15, e.pid, e.iid]));
  };
  this.lock_chest = function (e) {
    this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([16, e.iid]));
  };
  this.kick_team = function (_0x1eee1e) {
    _.socket[SENDWORD](
      WINDOW8[JSONWORD8].stringify([20, user.totem.id, user.team[_0x1eee1e]])
    );
  };
  this.join_team = function () {
    _.socket[SENDWORD](
      WINDOW9[JSONWORD9].stringify([18, user.totem.pid, user.totem.id])
    );
  };
  this.leave_team = function () {
    _.socket[SENDWORD](WINDOW10[JSONWORD10].stringify([19]));
  };
  this.lock_team = function () {
    _.socket[SENDWORD](WINDOW10[JSONWORD8].stringify([35, user.totem.id]));
    document.getElementById("lock_team").innerHTML == "LOCK"
      ? ((user.totem.lock = 1),
        (document.getElementById("lock_team").innerHTML = "UNLOCK"))
      : ((user.totem.lock = 0),
        (document.getElementById("lock_team").innerHTML = "LOCK"));
  };
  this.units = function (_0x44e3b3, _0x1e57e5, _0x14602a) {
    var _0x3f8b22 = new Uint16Array(_0x44e3b3);
    if (_0x14602a) {
      world.delete_all_units();
    }
    var _0x849af8 = (_0x1e57e5.length - 2) / 18;
    for (var _0x138916 = 0; _0x138916 < _0x849af8; _0x138916++) {
      var _0x32a4d3 = 2 + _0x138916 * 18,
        _0x4f302e = 1 + _0x138916 * 9,
        _0x4e46a9 = _0x1e57e5[_0x32a4d3],
        _0x249081 = _0x3f8b22[_0x4f302e + 1],
        _0x598abe = _0x3f8b22[_0x4f302e + 5],
        _0x408ba1 = _0x4e46a9 * world.max_units + _0x598abe;
      if (_0x249081 & STATE.DELETE) {
        world.delete_units(_0x408ba1);
        continue;
      }
      var _0x394b7e = _0x3f8b22[_0x4f302e + 2],
        _0x348e11 = _0x3f8b22[_0x4f302e + 3],
        _0x51c6b3 = _0x3f8b22[_0x4f302e + 4],
        _0x24d531 = _0x3f8b22[_0x4f302e + 6],
        _0x5455e7 = _0x3f8b22[_0x4f302e + 7],
        _0x373834 = _0x3f8b22[_0x4f302e + 8],
        _0x26c6f3 = (_0x1e57e5[_0x32a4d3 + 1] / 255) * Math.PI * 2;
      if (!world.fast_units[_0x408ba1]) {
        var _0x1c34be = new Item(
          _0x394b7e,
          _0x4e46a9,
          _0x598abe,
          _0x348e11,
          _0x51c6b3,
          _0x26c6f3,
          _0x249081,
          _0x24d531,
          _0x5455e7,
          _0x373834
        );
        world.fast_units[_0x408ba1] = _0x1c34be;
        world.units[_0x394b7e].push(_0x1c34be);
        continue;
      }
      var _0x2b2651 = world.fast_units[_0x408ba1];
      _0x2b2651.r.x = _0x348e11;
      _0x2b2651.r.y = _0x51c6b3;
      _0x4e46a9 != 0 &&
        Utils.dist(_0x2b2651, _0x2b2651.r) > CLIENT.LAG_DISTANCE &&
        ((_0x2b2651.x = _0x348e11), (_0x2b2651.y = _0x51c6b3));
      if (_0x2b2651.id !== user.id || _0x4e46a9 === 0) {
        _0x2b2651.nangle = _0x26c6f3;
      }
      _0x2b2651.action |= _0x249081;
      _0x2b2651.info = _0x24d531;
      _0x2b2651.speed = _0x5455e7;
      _0x2b2651.extra = _0x373834;
      if (_0x2b2651.update) {
        _0x2b2651.update(_0x249081);
      }
    }
  };
  this.leaderboard = function (e) {
    this.timeout_server = old_timestamp;
    var _0x3174ec = new Uint16Array(e);
    user.ldb.init(_0x3174ec);
  };
  this.new_recipes = function (e) {
    if (OLD_RECIPES !== undefined) {
      RECIPES = OLD_RECIPES;
    }
    if (e.length > 0) {
      OLD_RECIPES = JSON.parse(JSON.stringify(RECIPES));
      for (var _0xe8cd57 = 0; _0xe8cd57 < e.length; _0xe8cd57++) {
        var _0x33d1cb = e[_0xe8cd57],
          _0x39ac67 = RECIPES[_0x33d1cb.item];
        if (_0x39ac67 === undefined) {
          continue;
        }
        _0x39ac67.r = _0x33d1cb.recipe;
        _0x39ac67.w = _0x33d1cb.workbench;
        _0x39ac67.f = _0x33d1cb.fire;
        _0x39ac67.o = _0x33d1cb.water;
        _0x39ac67.e = _0x33d1cb.well;
        _0x39ac67.time = 1 / _0x33d1cb.time;
      }
    }
  };
  this.welcome = function (e) {
    if (!e || e.length === 0) {
      user.welcome.message = undefined;
    } else {
      user.welcome.message = create_welcome_text(e);
    }
  };
  this.chat = function (e) {
    var t = world.fast_units[e[1] * world.max_units];
    if (t) {
      if (world.mode === WORLD.MODE_ZOMBIES && t.skin === WORLD.ZOMBIE_SKIN) {
        if (!user.zombie) {
          t.text.push(
            ZOMBIE_GRUMBLES[Math.floor(Math.random() * ZOMBIE_GRUMBLES.length)]
          );
        } else {
          if (Math.random() > 0.5) {
            t.text.push(e[2] + " ..." + ZOMBIE_GRUMBLE);
          } else {
            t.text.push(ZOMBIE_GRUMBLE + "... " + e[2]);
          }
        }
      } else {
        t.text.push(e[2]);
      }
    }
  };
  this.select_craft = function (e) {
    if (
      user.inv.max === user.inv.can_select.length &&
      RECIPES[e].id2 !== INV.BAG &&
      user.inv.find_item(RECIPES[e].id2) == -1 &&
      !user.inv.free_place(RECIPES[e].r)
    ) {
      return this.inv_full(), 0;
    }
    window.LastCrafted = e;
    this.socket.send(JSON.stringify([5, 28]));
    return this.socket[SENDWORD](WINDOW1[JSONWORD1].stringify([7, e])), 1;
  };
  this.workbench = function (e) {
    user.craft.set_workbench(e);
  };
  this.well = function (e) {
    user.craft.well = e;
    user.craft.update();
  };
  this.fire = function (e) {
    user.craft.fire = e;
    user.craft.update();
  };
  this.water = function (e) {
    user.craft.water = e;
    user.craft.update();
  };
  this.dont_harvest = function (_0x50539e) {
    this.new_alert(LANG[TEXT.WRONG_TOOL]);
  };
  this.cancel_craft = function () {
    user.craft.restart();
  };
  this.minimap = function (e) {
    game.minimap.players = [];
    var _0x47a04c = world.fast_units[user.uid],
      _0x396699 = 0;
    for (var _0x157b91 = 1; _0x157b91 < e.length; _0x157b91 += 2) {
      var _0x3771b4 = {
        x: Math.floor((e[_0x157b91] * world.w) / 250),
        y: Math.floor((e[_0x157b91 + 1] * world.h) / 250),
      };
      if (
        _0x47a04c &&
        !_0x396699 &&
        !user.spectator &&
        Utils.dist(_0x3771b4, _0x47a04c) < 250
      ) {
        _0x396699 += 1;
        continue;
      }
      game.minimap.players.push(_0x3771b4);
    }
  };
  this.reborn = function () {
    user.resurrection.open = false;
    user.ghost.enabled = false;
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.sec = null;
    user.ghost.now = -1;
  };
  this.ghost = function (e) {
    WORLD.GHOST_DELAY = e;
    user.ghost.enabled = true;
    user.ghost.delay = new Date().getTime();
    user.ghost.label = null;
    user.ghost.now = -1;
    var deletedItems = [
      INV.SUPER_HAMMER,
      INV.DRAGON_HEART,
      INV.SWORD_WOOD,
      INV.SWORD,
      INV.SWORD_GOLD,
      INV.SWORD_DIAMOND,
      INV.SWORD_AMETHYST,
      INV.REIDITE_SWORD,
      INV.DRAGON_SWORD,
      INV.LAVA_SWORD,
      INV.PIRATE_SWORD,
      INV.SPEAR,
      INV.WOOD_SPEAR,
      INV.GOLD_SPEAR,
      INV.DIAMOND_SPEAR,
      INV.AMETHYST_SPEAR,
      INV.REIDITE_SPEAR,
      INV.DRAGON_SPEAR,
      INV.LAVA_SPEAR,
      INV.CRAB_SPEAR,
      INV.WOOD_BOW,
      INV.STONE_BOW,
      INV.GOLD_BOW,
      INV.DIAMOND_BOW,
      INV.AMETHYST_BOW,
      INV.REIDITE_BOW,
      INV.DRAGON_BOW,
      INV.WOOD_SHIELD,
      INV.STONE_SHIELD,
      INV.GOLD_SHIELD,
      INV.DIAMOND_SHIELD,
      INV.AMETHYST_SHIELD,
      INV.REIDITE_SHIELD,
      INV.WAND1,
      INV.WAND2,
      INV.PICK_WOOD,
      INV.PICK,
      INV.PICK_GOLD,
      INV.PICK_DIAMOND,
      INV.PICK_AMETHYST,
      INV.PICK_REIDITE,
      INV.SPANNER,
      INV.PITCHFORK,
      INV.PITCHFORK2,
    ];
    for (var i = 0; i < deletedItems.length; i++) {
      var deletedItem = user.inv.find_item(deletedItems[i]);
      if (deletedItem != -1) {
        user.inv.delete_item(deletedItems.length[i], deletedItem);
      }
    }
    user.craft.restart();
  };
  this.decrease_item2 = function (e, t, i) {
    this.decrease_item(e, t * 256 + i);
  };
  this.decrease_item = function (e, t) {
    user.craft.preview = -1;
    user.inv.decrease(e, t, user.inv.find_item(e));
    user.craft.update();
  };
  this.accept_build = function (e) {
    user.craft.preview = -1;
    user.build.wait = true;
    var i = user.inv.find_item(e);
    user.inv.decrease(e, 1, i);
    if (i >= 0 && !user.inv.n[e]) {
      user.craft.update();
    }
    if (e == INV.TOTEM) {
      user.team = [user.id];
    }
  };
  this.cancel_crafting = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([31]));
  };
  this.buy_market = function (e) {
    this.socket[SENDWORD](WINDOW3[JSONWORD3].stringify([32, e.val, e.id]));
  };
  this.update_sign = function (e, t) {
    this.socket[SENDWORD](WINDOW3[JSONWORD5].stringify([33, e, t]));
  };
  this.send_build = function () {
    var _0x5cba77 = world.fast_units[user.uid];
    if (_0x5cba77) {
      var _0x530b48 = Math.PI * 2;
      this.socket[SENDWORD](
        WINDOW3[JSONWORD3].stringify([
          10,
          user.craft.preview,
          Math.floor(
            (((_0x5cba77.angle + _0x530b48) % _0x530b48) * 255) / _0x530b48
          ),
          user.craft.mode,
        ])
      );
    }
  };
  this.select_inv = function (invItem, _0x5ced36) {
    switch (invItem) {
      case INV.BANDAGE:
      case INV.PLANT:
      case INV.MEAT:
      case INV.COOKED_MEAT:
      case INV.SANDWICH:
      case INV.BOTTLE_FULL:
      case INV.COOKIE:
      case INV.CAKE:
      case INV.ICE:
      case INV.BREAD:
      case INV.PUMPKIN:
      case INV.TOMATO:
      case INV.CACTUS:
      case INV.CARROT:
      case INV.WATERMELON:
      case INV.ALOE_VERA:
      case INV.GARLIC:
      case INV.FOODFISH:
      case INV.FOODFISH_COOKED:
      case INV.CRAB_STICK:
      case INV.CRAB_LOOT:
      case INV.CANDY:
      case INV.SUGAR_CAN:
        (user.craft.preview = -1),
          this.socket[SENDWORD](WINDOW4[JSONWORD4].stringify([5, invItem]));
        break;
      case INV.WORKBENCH:
      case INV.SPIKE:
      case INV.SEED:
      case INV.WHEAT_SEED:
      case INV.PUMPKIN_SEED:
      case INV.TOMATO_SEED:
      case INV.CARROT_SEED:
      case INV.GARLIC_SEED:
      case INV.THORNBUSH_SEED:
      case INV.WATERMELON_SEED:
      case INV.ALOE_VERA_SEED:
      case INV.FIRE:
      case INV.WALL:
      case INV.STONE_WALL:
      case INV.GOLD_WALL:
      case INV.DIAMOND_WALL:
      case INV.BIG_FIRE:
      case INV.CHEST:
      case INV.RESURRECTION:
      case INV.EMERALD_MACHINE:
      case INV.WOOD_DOOR:
      case INV.STONE_DOOR:
      case INV.GOLD_DOOR:
      case INV.DIAMOND_DOOR:
      case INV.AMETHYST_DOOR:
      case INV.REIDITE_DOOR:
      case INV.WOOD_DOOR_SPIKE:
      case INV.STONE_DOOR_SPIKE:
      case INV.GOLD_DOOR_SPIKE:
      case INV.DIAMOND_DOOR_SPIKE:
      case INV.AMETHYST_DOOR_SPIKE:
      case INV.REIDITE_DOOR_SPIKE:
      case INV.STONE_SPIKE:
      case INV.GOLD_SPIKE:
      case INV.DIAMOND_SPIKE:
      case INV.FURNACE:
      case INV.AMETHYST_WALL:
      case INV.AMETHYST_SPIKE:
      case INV.REIDITE_WALL:
      case INV.REIDITE_SPIKE:
      case INV.BRIDGE:
      case INV.ROOF:
      case INV.PLOT:
      case INV.WINDMILL:
      case INV.EXTRACTOR_MACHINE_STONE:
      case INV.EXTRACTOR_MACHINE_GOLD:
      case INV.EXTRACTOR_MACHINE_DIAMOND:
      case INV.EXTRACTOR_MACHINE_AMETHYST:
      case INV.EXTRACTOR_MACHINE_REIDITE:
      case INV.BED:
      case INV.GARLAND:
      case INV.WELL:
      case INV.SIGN:
      case INV.BREAD_OVEN:
      case INV.TOTEM:
      case INV.WOOD_TOWER:
        if (!user.zombie) {
          if (user.craft.preview === invItem) {
            user.craft.preview = -1;
          } else {
            user.craft.preview = invItem;
          }
        }
        break;
      case INV.SWORD:
      case INV.SWORD_WOOD:
      case INV.SWORD_GOLD:
      case INV.SWORD_DIAMOND:
      case INV.SWORD_AMETHYST:
      case INV.REIDITE_SWORD:
      case INV.PIRATE_SWORD:
      case INV.DRAGON_SWORD:
      case INV.LAVA_SWORD:
      case INV.WOOD_BOW:
      case INV.STONE_BOW:
      case INV.GOLD_BOW:
      case INV.DIAMOND_BOW:
      case INV.AMETHYST_BOW:
      case INV.REIDITE_BOW:
      case INV.DRAGON_BOW:
      case INV.WAND1:
      case INV.WAND2:
      case INV.WOOD_SPEAR:
      case INV.SPEAR:
      case INV.GOLD_SPEAR:
      case INV.DIAMOND_SPEAR:
      case INV.AMETHYST_SPEAR:
      case INV.AMETHYST_REIDITE:
      case INV.DRAGON_SPEAR:
      case INV.LAVA_SPEAR:
      case INV.REIDITE_SPEAR:
      case INV.CRAB_SPEAR:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x252697 = world.fast_units[user.uid];
          if (_0x252697 && _0x252697.right === invItem) {
            this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([5, INV.HAND]));
          } else {
            user.weapon.wait = true;
            this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify([5, invItem]));
          }
        }
        break;
      case INV.PICK:
      case INV.PICK_WOOD:
      case INV.PICK_GOLD:
      case INV.PICK_DIAMOND:
      case INV.HAMMER:
      case INV.HAMMER_GOLD:
      case INV.HAMMER_DIAMOND:
      case INV.BOOK:
      case INV.HAMMER_AMETHYST:
      case INV.HAMMER_REIDITE:
      case INV.PICK_AMETHYST:
      case INV.PICK_REIDITE:
      case INV.SUPER_HAMMER:
      case INV.SHOVEL:
      case INV.SHOVEL_GOLD:
      case INV.SHOVEL_DIAMOND:
      case INV.SHOVEL_AMETHYST:
      case INV.SPANNER:
      case INV.MACHETE:
      case INV.PITCHFORK:
      case INV.PITCHFORK2:
      case INV.SADDLE:
      case INV.WATERING_CAN_FULL:
      case INV.WOOD_SHIELD:
      case INV.STONE_SHIELD:
      case INV.GOLD_SHIELD:
      case INV.DIAMOND_SHIELD:
      case INV.AMETHYST_SHIELD:
      case INV.REIDITE_SHIELD:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x252697 = world.fast_units[user.uid];
          if (_0x252697 && _0x252697.right === invItem) {
            this.socket[SENDWORD](WINDOW7[JSONWORD7].stringify([5, INV.HAND]));
          } else {
            this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, invItem]));
          }
        }
        break;
      case INV.BOAT:
      case INV.SLED:
      case INV.MOUNT_BOAR:
      case INV.BABY_MAMMOTH:
      case INV.CRAB_BOSS:
      case INV.BABY_DRAGON:
      case INV.BABY_LAVA:
      case INV.HAWK:
      case INV.PLANE:
      case INV.NIMBUS:
        if (!user.zombie) {
          user.craft.preview = -1;
          var _0x252697 = world.fast_units[user.uid];
          this.socket[SENDWORD](WINDOW8[JSONWORD8].stringify([5, invItem]));
        }
        break;
      case INV.CROWN_GREEN:
      case INV.CROWN_ORANGE:
      case INV.CROWN_BLUE:
      case INV.WOOD_HELMET:
      case INV.STONE_HELMET:
      case INV.GOLD_HELMET:
      case INV.DIAMOND_HELMET:
      case INV.AMETHYST_HELMET:
      case INV.REIDITE_HELMET:
      case INV.DIAMOND_PROTECTION:
      case INV.AMETHYST_PROTECTION:
      case INV.REIDITE_PROTECTION:
      case INV.DRAGON_HELMET:
      case INV.LAVA_HELMET:
      case INV.WITCH:
      case INV.CROWN_CRAB:
      case INV.SUPER_DIVING_SUIT:
        var _0x252697 = world.fast_units[user.uid];
        if (_0x252697 && _0x252697.clothe !== invItem) {
          user.helmet.wait = true;
        }
        this.socket[SENDWORD](WINDOW4[JSONWORD5].stringify([5, invItem]));
        break;
      case INV.EARMUFFS:
      case INV.HOOD:
      case INV.PEASANT:
      case INV.WINTER_PEASANT:
      case INV.COAT:
      case INV.CAP_SCARF:
      case INV.FUR_HAT:
      case INV.PILOT_HELMET:
      case INV.TURBAN1:
      case INV.TURBAN2:
      case INV.CHRISTMAS_HAT:
      case INV.ELF_HAT:
      case INV.WINTER_HOOD:
      case INV.EXPLORER_HAT:
      case INV.PIRATE_HAT:
      case INV.DIVING_MASK:
        this.socket[SENDWORD](WINDOW9[JSONWORD9].stringify([5, invItem]));
        break;
    }
  };
  this.delete_inv = function (e) {
    this.socket[SENDWORD](WINDOW3[JSONWORD1].stringify([6, e]));
  };
  this.delete_inv_ok = function (e) {
    user.build.wait = true;
    var t = user.inv.find_item(e);
    user.inv.delete_item(e, t);
    user.craft.update();
  };
  this.recycle_inv = function (e, _0x26e0b5) {
    this.socket[SENDWORD](WINDOW1[JSONWORD7].stringify([29, e]));
    window.LastRecycled = e;
  };
  this.delete_one_inv = function (e, _0xcc297e) {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([28, e]));
  };
  this.delete_one_inv_ok = function (e) {
    user.build.wait = true;
    var _0x48f3b5 = user.inv.find_item(e);
    user.inv.decrease(e, 1, _0x48f3b5);
    user.craft.update();
  };
  this.delete_single_inv = function (e) {
    var _0x126c8c = e[1];
    var _0x4ecd7d = e[2];
    user.build.wait = true;
    var _0x6a46b2 = user.inv.find_item(_0x126c8c);
    user.inv.decrease(_0x126c8c, _0x4ecd7d, _0x6a46b2);
    user.craft.update();
  };
  this.stop_attack = function () {
    this.socket[SENDWORD](WINDOW2[JSONWORD2].stringify([14]));
  };
  this.send_attack = function (e) {
    var _0x39729b = Math.PI * 2;
    this.socket[SENDWORD](
      WINDOW3[JSONWORD3].stringify([
        4,
        Math.floor((((e + _0x39729b) % _0x39729b) * 255) / _0x39729b),
      ])
    );
  };
  this.send_angle = function (e) {
    var _0x3d4c97 = Math.PI * 2;
    this.socket[SENDWORD](
      WINDOW3[JSONWORD3].stringify([
        3,
        Math.floor((((e + _0x3d4c97) % _0x3d4c97) * 255) / _0x3d4c97),
      ])
    );
  };
  this.send_move = function (e) {
    this.socket[SENDWORD](WINDOW12[JSONWORD12].stringify([2, e]));
  };
  this.send_command = function (e) {
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([36, e]));
  };
  this.send_chat = function (e) {
    var _0x484444 = world.fast_units[user.uid];
    if (user.zombie) {
      if (Math.random() > 0.5) {
        _0x484444.text.push(e.substring(0, 25) + " ..." + ZOMBIE_GRUMBLE);
      } else {
        _0x484444.text.push(ZOMBIE_GRUMBLE + "... " + e.substring(0, 25));
      }
    } else {
      _0x484444.text.push(e);
    }
    this.socket[SENDWORD](WINDOW5[JSONWORD5].stringify([0, e]));
  };
  this.move_units = function (e) {
    var _0x25bebd = player.select.units;
    if (_0x25bebd.length == 0) {
      return;
    }
    var _0x156d2f = [2];
    var _0x59d65b = [];
    Utils.sub_vector(e, {
      x: player.cam.rx,
      y: player.cam.ry,
    });
    _0x156d2f.push(e.x);
    _0x156d2f.push(e.y);
    for (var _0x54d8ea = 0; _0x54d8ea < _0x25bebd.length; _0x54d8ea++) {
      _0x59d65b.push(_0x25bebd[_0x54d8ea].oid);
    }
    _0x156d2f.push(_0x59d65b);
    this.socket[SENDWORD](WINDOW6[JSONWORD6].stringify(_0x156d2f));
  };
  this.cam_delay = 0;
  this.last_cam = {
    i: 0,
    j: 0,
  };
  this.update_cam = function () {
    if (old_timestamp - this.cam_delay > CLIENT.CAM_DELAY) {
      this.cam_delay = old_timestamp;
      var _0x1dcc73 = user.cam;
      var _0x2097a8 = Math.floor(_0x1dcc73.x / 100);
      var _0x11d705 = Math.floor(_0x1dcc73.y / 100);
      (this.last_cam.i != _0x2097a8 || this.last_cam.j != _0x11d705) &&
        (this.socket[SENDWORD](
          WINDOW8[JSONWORD7].stringify([
            1,
            Math.floor(-_0x1dcc73.x),
            Math.floor(-_0x1dcc73.y),
          ])
        ),
        (this.last_cam.i = _0x2097a8),
        (this.last_cam.j = _0x11d705));
    }
  };
  this.ping_delay = 0;
  this.try_ping = function () {
    old_timestamp - this.ping_delay > CLIENT.PING_DELAY &&
      ((this.ping_delay = old_timestamp), this.ping());
  };
  this.lost = function () {
    user.reconnect.enabled = true;
    if (this["_current_id"] != this.socket["_current_id"]) {
      return;
    }
    this["_current_id"]++;
    this.socket.close();
    CurrentlyPlaying = false;
    client.connect();
  };
  this.join_new_team = function (_0x1f5d7e) {
    this.new_alert(LANG[TEXT.JOIN_TEAM]);
    for (var _0x5d0270 = 1; _0x5d0270 < _0x1f5d7e.length; _0x5d0270++) {
      user.team.push(_0x1f5d7e[_0x5d0270]);
    }
  };
  this.new_member_team = function (_0x3aa9b8) {
    this.new_alert(world.players[_0x3aa9b8].nickname + LANG[TEXT.JOINED_TEAM]);
    user.team.push(_0x3aa9b8);
    var _0xee178d = document.getElementById("team_box");
    if (
      game.team_buttons_id != -1 &&
      _0xee178d.style.display == "inline-block"
    ) {
      game.team_buttons[game.team_buttons_id].action();
    }
  };
  this.destroy_team = function () {
    this.new_alert(LANG[TEXT.TEAM_DESTROYED]);
    user.totem.wait = true;
    user.team = [];
    document.getElementById("team_box").style.display = "none";
  };
  this.exclude_team = function (_0x5aaebf) {
    if (_0x5aaebf == user.id) {
      this.new_alert(LANG[TEXT.LEFT_TEAM]);
      user.totem.wait = true;
      user.team = [];
      document.getElementById("team_box").style.display = "none";
    } else {
      this.new_alert(world.players[_0x5aaebf].nickname + LANG[TEXT.LEFT_TEAM2]);
      for (var _0x4ffbe1 = 0; _0x4ffbe1 < user.team.length; _0x4ffbe1++) {
        if (user.team[_0x4ffbe1] == _0x5aaebf) {
          user.team.splice(_0x4ffbe1, 1);
          break;
        }
      }
      var _0x42c857 = document.getElementById("team_box");
      if (
        game.team_buttons_id != -1 &&
        _0x42c857.style.display == "inline-block"
      ) {
        game.team_buttons[game.team_buttons_id].action();
      }
    }
  };
  this.steal_token = function (_0x5e2122) {
    user.alive = false;
    this.new_alert(LANG[TEXT.TOKEN]);
    if (this["_current_id"] != this.socket["_current_id"]) {
      return;
    }
    this["_current_id"]++;
    game.quit(ui.run);
    this.socket.close();
    CurrentlyPlaying = false;
  };
  this.killed = function (_0x5101c1, _0x34e640) {
    user.alive = false;
    var _0x20784f = new Uint16Array(_0x34e640);
    var _0xa623a7 = new Uint32Array(_0x34e640);
    user.die.howdie =
      DIE[_0x5101c1][Math.floor(Math.random() * DIE[_0x5101c1].length)];
    user.die.score = Utils.simplify_number(world.players[user.id].score);
    user.die.bank = Utils.simplify_number(_0xa623a7[1]);
    user.die.kill = _0x20784f[1];
    this.new_alert(LANG[TEXT.YOU_DEAD]);
    if (this["_current_id"] != this.socket["_current_id"]) {
      return;
    }
    this["_current_id"]++;
    game.quit(scoreboard.run);
    this.socket.close();
    CurrentlyPlaying = false;
    window.aiptag.cmd.display.push(function () {
      window.aipDisplayTag.display("MFN_starve-io_300x250");
    });
  };
  this.ping = function () {
    this.socket[SENDWORD](CLIENT.PING);
  };
  this.check_state = function () {
    this.socket.readyState == 3 &&
      (this.timeout_server -= CLIENT.TIMEOUT_SERVER);
  };
  this.check_pong = function () {
    if (delta > CLIENT.LOOSE_FOCUS) {
      this.timeout_server = old_timestamp;
    }
    old_timestamp - this.timeout_server > CLIENT.TIMEOUT_SERVER &&
      ((this.timeout_server = old_timestamp), this.lost());
  };
  this.handshake = function (e) {
    //___adsvid++;
    clearTimeout(this.timeout_handler);
    document.getElementById("commandMainBoxName").innerHTML =
      this.mode_list[this.current_mode][
        this.selected_server[this.current_mode]
      ].a;
    document.getElementById("exploreForest").src = "img/forest-leaf.png";
    document.getElementById("exploreWinter").src = "img/winter-flake.png";
    document.getElementById("exploreDesert").src = "img/desert-cactus.png";
    document.getElementById("exploreLava").src = "img/lava-volcano.png";
    this.timeout_server = old_timestamp;
    user.gauges.cold.ed = user.gauges.cold.em;
    user.gauges.hunger.ed = user.gauges.hunger.em;
    user.gauges.thirst.ed = user.gauges.thirst.em;
    user.gauges.oxygen.ed = user.gauges.oxygen.em;
    user.gauges.warm.ed = user.gauges.warm.em;
    user.gauges.l = 1;
    user.gauges.c = 1;
    user.gauges.h = 1;
    user.gauges.t = 1;
    user.gauges.o = 1;
    user.gauges.wa = 1;
    user.bigmap = false;
    game.info_box.display = 0;
    user.inv.can_select = [];
    user.inv.n = [];
    user.inv.max = WORLD.WITHOUT_BAG;
    user.inv.bonus = 0;
    user.inv.bag = 0;
    user.inv.id = -1;
    game.show_recipe_book = 1;
    game.show_clock = 1;
    game.show_quest = 1;
    game.show_market = 1;
    user.alive = true;
    user.inv.drag.stop();
    user.craft.can_craft = [];
    user.craft.crafting = false;
    user.craft.can_build = false;
    user.craft.preview = -1;
    user.craft.id = -1;
    user.craft.workbench = false;
    user.craft.well = false;
    user.craft.fire = false;
    user.craft.water = false;
    user.craft.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.weapon.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 0.1, 1);
    user.weapon.wait = false;
    user.helmet.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 0.2, 1);
    user.helmet.wait = false;
    user.build.timeout = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
    user.build.wait = false;
    user.totem.id = -1;
    user.totem.pid = -1;
    user.totem.wait = false;
    user.totem.timeout = new Utils.LinearAnimation(
      false,
      0,
      1,
      0,
      0.03333333333333333,
      1
    );
    game.minimap.marker.x = -1;
    game.minimap.marker.y = -1;
    game.craft_list.open = false;
    game.minimap.players = [];
    user.show_spectators.enabled = false;
    world.mode = e[1];
    e[20] !== undefined &&
      e[21] !== undefined &&
      ((world.nw = e[20]),
      (world.nh = e[21]),
      (world.w = world.nw * world.dw),
      (world.h = world.nh * world.dh));
    world.islands = e[22];
    world.custom_map = e[23];
    _.welcome(e[24]);
    _.new_recipes(e[25]);
    user.desert.tempest = e[26];
    user.blizzard = 0;
    user.winter.tempest = e[27];
    world.generate_world(e[19]);
    world.time = e[5];
    world.clock.hour = e[15];
    world.clock.init = new Date().getTime();
    game.quests.born = e[16];
    world.transition = false;
    user.day = e[2];
    game.quests.reset();
    user.team = e[8];
    world.units[ITEMS.PLAYERS] = [];
    world.units[ITEMS.FRUIT] = [];
    world.units[ITEMS.WORKBENCH] = [];
    world.units[ITEMS.FIRE] = [];
    world.units[ITEMS.BIG_FIRE] = [];
    world.units[ITEMS.SEED] = [];
    world.units[ITEMS.WHEAT_SEED] = [];
    world.units[ITEMS.PUMPKIN_SEED] = [];
    world.units[ITEMS.TOMATO_SEED] = [];
    world.units[ITEMS.CARROT_SEED] = [];
    world.units[ITEMS.GARLIC_SEED] = [];
    world.units[ITEMS.THORNBUSH_SEED] = [];
    world.units[ITEMS.WATERMELON_SEED] = [];
    world.units[ITEMS.ALOE_VERA_SEED] = [];
    world.units[ITEMS.WALL] = [];
    world.units[ITEMS.STONE_WALL] = [];
    world.units[ITEMS.GOLD_WALL] = [];
    world.units[ITEMS.DIAMOND_WALL] = [];
    world.units[ITEMS.WOOD_DOOR] = [];
    world.units[ITEMS.STONE_DOOR] = [];
    world.units[ITEMS.GOLD_DOOR] = [];
    world.units[ITEMS.DIAMOND_DOOR] = [];
    world.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    world.units[ITEMS.STONE_DOOR_SPIKE] = [];
    world.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    world.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    world.units[ITEMS.CHEST] = [];
    world.units[ITEMS.RESURRECTION] = [];
    world.units[ITEMS.EMERALD_MACHINE] = [];
    world.units[ITEMS.SPIKE] = [];
    world.units[ITEMS.STONE_SPIKE] = [];
    world.units[ITEMS.GOLD_SPIKE] = [];
    world.units[ITEMS.DIAMOND_SPIKE] = [];
    world.units[ITEMS.WOLF] = [];
    world.units[ITEMS.BOAR] = [];
    world.units[ITEMS.CRAB_BOSS] = [];
    world.units[ITEMS.BABY_DRAGON] = [];
    world.units[ITEMS.BABY_LAVA] = [];
    world.units[ITEMS.HAWK] = [];
    world.units[ITEMS.TREASURE_CHEST] = [];
    world.units[ITEMS.DEAD_BOX] = [];
    world.units[ITEMS.GIFT] = [];
    world.units[ITEMS.CRATE] = [];
    world.units[ITEMS.BREAD_OVEN] = [];
    world.units[ITEMS.PIRANHA] = [];
    world.units[ITEMS.KRAKEN] = [];
    world.units[ITEMS.CRAB] = [];
    world.units[ITEMS.FOX] = [];
    world.units[ITEMS.BEAR] = [];
    world.units[ITEMS.MAMMOTH] = [];
    world.units[ITEMS.BABY_MAMMOTH] = [];
    world.units[ITEMS.VULTURE] = [];
    world.units[ITEMS.SAND_WORM] = [];
    world.units[ITEMS.DRAGON] = [];
    world.units[ITEMS.LAVA_DRAGON] = [];
    world.units[ITEMS.FLAME] = [];
    world.units[ITEMS.WHEAT_MOB] = [];
    world.units[ITEMS.ALOE_VERA_MOB] = [];
    world.units[ITEMS.PUMPKIN_MOB] = [];
    world.units[ITEMS.GARLIC_MOB] = [];
    world.units[ITEMS.THORNBUSH_MOB] = [];
    world.units[ITEMS.RABBIT] = [];
    world.units[ITEMS.PENGUIN] = [];
    world.units[ITEMS.SPELL] = [];
    world.units[ITEMS.FIREFLY] = [];
    world.units[ITEMS.SPIDER] = [];
    world.units[ITEMS.FURNACE] = [];
    world.units[ITEMS.AMETHYST_WALL] = [];
    world.units[ITEMS.AMETHYST_SPIKE] = [];
    world.units[ITEMS.AMETHYST_DOOR] = [];
    world.units[ITEMS.REIDITE_WALL] = [];
    world.units[ITEMS.REIDITE_SPIKE] = [];
    world.units[ITEMS.REIDITE_DOOR] = [];
    world.units[ITEMS.TOTEM] = [];
    world.units[ITEMS.WOOD_TOWER] = [];
    world.units[ITEMS.BRIDGE] = [];
    world.units[ITEMS.ROOF] = [];
    world.units[ITEMS.PLOT] = [];
    world.units[ITEMS.WINDMILL] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    world.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    world.units[ITEMS.GARLAND] = [];
    world.units[ITEMS.BED] = [];
    world.units[ITEMS.WELL] = [];
    world.units[ITEMS.SIGN] = [];
    world.fast_units = [];
    world.max_units = e[7];
    user.id = e[9];
    user.uid = user.id * world.max_units;
    audio.loaded &&
      ((audio.players[0].uid = user.uid), (audio.players[0].free = 0));
    keyboard.clear_directionnal();
    user.cam.change(e[3], e[10]);
    world.players = [];
    var p = world.players;
    for (var i = 0; i < e[11]; i++) {
      p.push(new Player());
    }
    for (var i = 0, _0xba323c = e[4]; i < _0xba323c.length; i++) {
      var _0x4b4044 = p[_0xba323c[i].i];
      _0x4b4044.nickname = _0xba323c[i].n;
      _0x4b4044.skin = _0xba323c[i].s;
      _0x4b4044.accessory = _0xba323c[i].a;
      _0x4b4044.crate = _0xba323c[i].c;
      _0x4b4044.book = _0xba323c[i].b;
      _0x4b4044.dead = _0xba323c[i].d;
      _0x4b4044.baglook = _0xba323c[i].g;
      _0x4b4044.level = _0xba323c[i].l;
      _0x4b4044.score = Utils.restore_number(_0xba323c[i].p);
      _0x4b4044.alive = true;
      if (SHOW_ID === 1) {
        _0x4b4044.nickname += "|" + _0xba323c[i].i;
      }
    }
    user.ldb.sort();
    if (
      world.mode === WORLD.MODE_HUNGER_GAMES &&
      world.players[user.id].nickname === "spectator"
    ) {
      user.spectator = true;
    } else {
      user.spectator = false;
    }
    if (
      world.mode === WORLD.MODE_ZOMBIES &&
      world.players[user.id].skin === WORLD.ZOMBIE_SKIN
    ) {
      user.zombie = true;
    } else {
      user.zombie = false;
    }
    if (
      world.mode === WORLD.MODE_VAMPIRES &&
      world.players[user.id].skin === WORLD.VAMPIRE_SKIN
    ) {
      user.vampire = true;
    } else {
      user.vampire = false;
    }
    Cookies.set("starve_token", user.token);
    if (e[12] === 0) {
      user.shop.delay = 0;
      game.quests.restore(e[17]);
      var _0x2a6a6b = e[14];
      if (_0x2a6a6b[INV.BAG]) {
        user.inv.update_bag_size(1, 0);
      }
      for (var i = 0; i < _0x2a6a6b.length; i++) {
        if (_0x2a6a6b[i]) {
          if (i == INV.BAG) {
            continue;
          } else {
            if (i == INV.HAND) {
              continue;
            } else {
              this.gather([0, i, _0x2a6a6b[i]]);
            }
          }
        }
      }
      user.shop.open = false;
    } else {
      if (world.mode === WORLD.MODE_LEGACY) {
        this.gather([0, INV.SANDWORM_JUICE, 1]);
      } else {
        if (world.mode === WORLD.MODE_VAMPIRES) {
          if (user.vampire) {
            this.gather([0, INV.ROOF, 4]);
          } else {
            this.gather([0, INV.GARLIC_SEED, 3]);
          }
        }
      }
      world.mode === WORLD.MODE_PVP ||
      world.mode === WORLD.MODE_VAMPIRES ||
      world.mode === WORLD.MODE_EXPERIMENTAL ||
      world.mode === WORLD.MODE_LEGACY
        ? ((user.shop.delay = new Date().getTime()),
          (user.shop.open = true),
          (user.shop.value = e[13]),
          game.shop.init())
        : ((user.shop.delay = 0),
          (user.shop.open = false),
          (user.shop.value = 0));
      user.token_id = e[12].toString();
    }
    user.ghost.enabled = e[6];
    user.ghost.delay = -1;
    user.ghost.label = null;
    user.ghost.now = -1;
    Cookies.set("starve_token_id", user.token_id);
    if (user.reconnect.enabled) {
      user.reconnect.rotate = 0;
      user.reconnect.enabled = false;
    } else {
      ui.quit(game.run);
      if (ga) {
        ga("send", "event", "Game", "play", "S" + ui.skin + "A" + ui.accessory);
      }
    }
    TimerTools.HPTimer = new Date().getTime();
    TimerTools.GaugeTimer = new Date().getTime();
  };
  this.connect = function () {
    this.timeout_number = 0;
    this.connect_timeout();
  };
  this.connect_timeout = async function () {
    console.log("Connect inner");
    var e = await this.get_rivet_token(),
      gm = WORLD.RIVET_GAME_MODES[this.current_mode];
    console.log("Current game mode", gm, this.current_mode);
    let ss = this.selected_server[this.current_mode],
      r,
      a;
    if (ss == 0) {
      r = RIVET_API + "/lobbies/find";
      a = { game_modes: [gm] };
    } else {
      console.log(
        "Selecting server",
        this.server_list,
        this.selected_server,
        this.current_mode
      );
      let sf = this.server_list.find((e) => e.gm == gm && e.idx == ss);
      console.log("Selected server", sf);
      r = RIVET_API + "/lobbies/join";
      a = { lobby_id: sf.id };
    }
    let h = {};
    if (e) h = { Authorization: "Bearer " + e };
    let _0x317630 = await fetch(r, {
      method: "POST",
      headers: h,
      body: JSON.stringify(a),
    });
    if (!_0x317630.ok) {
      alert("Failed to join lobby");
      return;
    }
    let _0x4bd4ca = await _0x317630.json();
    console.log("Lobby", _0x4bd4ca);
    let _0x41f4c5 = _0x4bd4ca.lobby.ports.default,
      _0x330ac4 = _0x41f4c5.host,
      _0x2f0a95 = _0x41f4c5.is_tls,
      _0x283d87 = _0x4bd4ca.lobby.player.token,
      _0x5e9ba7 =
        "ws" +
        (_0x2f0a95 ? "s" : "") +
        "://" +
        _0x330ac4 +
        "?token=" +
        _0x283d87;
    console.log("Socket address", _0x5e9ba7);
    this.socket = new window.WebSocket(_0x5e9ba7);
    this.socket.binaryType = "arraybuffer";
    this.socket["_current_id"] = this["_current_id"];
    this.socket.onmessage = function (e) {
      if (this["_current_id"] != _["_current_id"]) {
        return;
      }
      if (typeof e.data == "string") {
        var _0x2814fa = JSON.parse(e.data);
        switch (_0x2814fa[0]) {
          case 0:
            _.chat(_0x2814fa);
            break;
          case 1:
            _.kick(_0x2814fa[1]);
            break;
          case 2:
            _.new_player(_0x2814fa);
            break;
          case 3:
            _.handshake(_0x2814fa);
            CurrentlyPlaying = true;
            break;
          case 4:
            _.message(_0x2814fa[1]);
            break;
          case 5:
            _.commands(_0x2814fa);
            break;
          case 6:
            _.welcome(_0x2814fa[1]);
            break;
        }
      } else {
        var dataReceived = new Uint8Array(e.data);
        switch (dataReceived[0]) {
          case 0:
            _.units(e.data, dataReceived, false);
            break;
          case 1:
            _.units(e.data, dataReceived, true);
            break;
          case 2:
            _.cancel_craft();
            break;
          case 3:
            _.gather(new Uint16Array(e.data));
            break;
          case 4:
            _.old_version();
            break;
          case 5:
            _.full();
            break;
          case 6:
            _.dont_harvest();
            break;
          case 7:
            _.hitten(e.data);
            break;
          case 8:
            _.build_stop(dataReceived[1]);
            break;
          case 9:
            _.build_ok(dataReceived[1]);
            break;
          case 10:
            _.inv_full();
            break;
          case 11:
            _.decrease_item(dataReceived[1], dataReceived[2]);
            break;
          case 12:
            _.workbench(dataReceived[1]);
            break;
          case 13:
            _.hitten_other(dataReceived, e.data);
            break;
          case 14:
            _.mute();
            break;
          case 15:
            _.kill_player(dataReceived[1]);
            break;
          case 16:
            _.gauges(
              dataReceived[1],
              dataReceived[2],
              dataReceived[3],
              dataReceived[4],
              dataReceived[5],
              dataReceived[6],
              dataReceived[7]
            );
            break;
          case 17:
            if (Settings.showPing && world.fast_units[user.uid]) {
              i = Date.now() - iea;
              PingData = i;
            } else {
              _.recover_focus(e.data);
            }
            break;
          case 18:
            _.empty_res();
            break;
          case 19:
            _.fire(dataReceived[1]);
            break;
          case 20:
            _.survive();
            break;
          case 21:
            _.leaderboard(e.data);
            break;
          case 22:
            _.get_time(dataReceived[1]);
            break;
          case 23:
            _.set_cam(e.data);
            break;
          case 24:
            _.accept_build(dataReceived[1]);
            break;
          case 25:
            _.killed(dataReceived[1], e.data);
            break;
          case 26:
            _.minimap(dataReceived);
            break;
          case 27:
            _.fail_restore();
            break;
          case 28:
            _.ghost(dataReceived[1]);
            break;
          case 29:
            _.reborn();
            break;
          case 30:
            _.steal_token();
            break;
          case 31:
            _.join_new_team(dataReceived);
            break;
          case 32:
            _.exclude_team(dataReceived[1]);
            break;
          case 33:
            _.new_member_team(dataReceived[1]);
            break;
          case 34:
            _.destroy_team();
            break;
          case 35:
            _.kit_ok(dataReceived[1]);
            break;
          case 36:
            _.water(dataReceived[1]);
            break;
          case 37:
            _.gauges_life(dataReceived[1], dataReceived[2]);
            break;
          case 38:
            _.gauges_food(dataReceived[1]);
            break;
          case 39:
            _.gauges_water(dataReceived[1]);
            break;
          case 40:
            _.get_bag();
            break;
          case 41:
            _.verified_account(dataReceived);
            break;
          case 42:
            _.succeed_quest(dataReceived[1]);
            break;
          case 43:
            _.fail_quest(dataReceived[1]);
            break;
          case 44:
            _.claimed(dataReceived[1]);
            break;
          case 45:
            _.recycle_ok(dataReceived[1]);
            break;
          case 46:
            _.recycle_stop(dataReceived[1]);
            break;
          case 47:
            _.well(dataReceived[1]);
            break;
          case 48:
            _.no_resources();
            break;
          case 50:
            _.decrease_item2(dataReceived[1], dataReceived[2], dataReceived[3]);
            break;
          case 51:
            _.blocked();
            break;
          case 52:
            _.delete_inv_ok(dataReceived[1]);
            break;
          case 53:
            _.delete_one_inv_ok(dataReceived[1]);
            break;
          case 54:
            _.account_ok();
            break;
          case 55:
            _.gauges_warm(dataReceived[1]);
            break;
          case 56:
            _.gauges_cold(dataReceived[1]);
            break;
          case 57:
            _.new_version();
            break;
          case 58:
            _.wrong_password();
            break;
          case 59:
            _.clean_inventory();
            break;
          case 60:
            _.hide_shop_kit();
            break;
          case 61:
            (user.cam.forcedDelay = 0.2), (user.cam.delay = 3);
            break;
          case 62:
            _.delete_single_inv(new Uint16Array(e.data));
            break;
          case 63:
            _.hide_clock();
            break;
          case 64:
            _.hide_recipe_book();
            break;
          case 65:
            _.hide_quest();
            break;
          case 66:
            _.hide_market();
            break;
          case 67:
            _.explorer_quest(dataReceived[1]);
            break;
          case 68:
            _.sand_tempest(dataReceived[1]);
            break;
          case 69:
            _.blizzard(dataReceived[1]);
            break;
          case 70:
            _.blizzard_status(dataReceived[1]);
            break;
          case 71:
            _.bandage(dataReceived[1]);
            break;
        }
      }
    };
    this.socket.onopen = function () {
      clearTimeout(_.timeout_handler);
      user.newToken = user.newToken || Utils.getURLData("token");
      Utils.get_recaptcha_token().then((e) => {
        _.socket[SENDWORD](
          WINDOW10[JSONWORD9].stringify([
            ui.nickname.input.value,
            screen.width + 200,
            screen.height + 200,
            CLIENT.VERSION_NUMBER,
            user.token,
            user.token_id,
            user.reconnect.enabled ? 1 : 0,
            ui.skin,
            ui.accessory,
            ui.bag,
            ui.book,
            ui.crate,
            ui.dead,
            userId === undefined ? 0 : userId,
            userToken === undefined
              ? 0
              : userToken.substring(userToken.length - 50),
            PASSWORD,
            "❤",
            e,
          ])
        );
        user.newToken = undefined;
        _.timeout_handler = setTimeout(_.timeout, CLIENT.TIMEOUT_TIME);
        clearTimeout(_.timeout_handler);
      });
    };
  };
}
var WORLD = {
    DAY: 480000,
    WITHOUT_BAG: 10,
    WITH_BAG: 16,
    BAG_SIZE: 6,
    GHOST_DELAY: 60,
    TOP: 1,
    BOTTOM: 2,
    LEFT: 4,
    RIGHT: 8,
    ROTATE: 10,
    DIST_CHEST: 100,
    DIST_FURNACE: 100,
    DIST_WINDMILL: 100,
    DIST_WELL: 100,
    DIST_BREAD_OVEN: 100,
    DIST_SIGN: 100,
    DIST_TOTEM: 100,
    DIST_SIGN: 100,
    DIST_RESURRECTION: 100,
    DIST_EXTRACTOR_MACHINE: 100,
    MODE_PVP: 0,
    MODE_HUNGER_GAMES: 1,
    MODE_ZOMBIES: 2,
    MODE_VAMPIRES: 3,
    MODE_LEGACY: 4,
    MODE_BR: 5,
    MODE_COMMUNITY: 6,
    MODE_EXPERIMENTAL: 7,
    RIVET_GAME_MODES: {
      0: "normal",
      2: "zombies",
      3: "vampires",
      4: "forest",
      7: "experimental",
    },
    ZOMBIE_SKIN: 0,
    VAMPIRE_SKIN: 0,
    ROBOT_SKIN: 30,
    GHOST: 2,
    GHOST_DELAY: 60000,
    WT1SY: 0,
    LWT1SY: 0,
    WT1EY: 50,
    WT2SY: 0,
    LWT2SY: 40,
    WT2EY: 39,
    LWT2: 830,
    FLOAM_X: 25,
    FLOAM_Y: 8,
    W1SX: 0,
    LW1SX: 0,
    W1EX: 200,
    W2SX: 0,
    LW2SX: 250,
    W2EX: 150,
    W3SX: 0,
    LW3SX: 350,
    W3EX: 100,
    LSANDX: 700,
    SEED: 39879,
  },
  SLOW_DOWN = [];
for (var i = 0; i < 500; i++) {
  SLOW_DOWN[i] = 0;
}
SLOW_DOWN[SPRITE.SUPER_DIVING_SUIT] = 1;
SLOW_DOWN[SPRITE.SWORD_WOOD] = 1;
SLOW_DOWN[SPRITE.SWORD] = 1;
SLOW_DOWN[SPRITE.SWORD_GOLD] = 1;
SLOW_DOWN[SPRITE.SWORD_DIAMOND] = 1;
SLOW_DOWN[SPRITE.SWORD_AMETHYST] = 1;
SLOW_DOWN[SPRITE.REIDITE_SWORD] = 1;
SLOW_DOWN[SPRITE.PIRATE_SWORD] = 1;
SLOW_DOWN[SPRITE.DRAGON_SWORD] = 1;
SLOW_DOWN[SPRITE.LAVA_SWORD] = 1;
SLOW_DOWN[SPRITE.SPEAR] = 1;
SLOW_DOWN[SPRITE.GOLD_SPEAR] = 1;
SLOW_DOWN[SPRITE.DIAMOND_SPEAR] = 1;
SLOW_DOWN[SPRITE.AMETHYST_SPEAR] = 1;
SLOW_DOWN[SPRITE.REIDITE_SPEAR] = 1;
SLOW_DOWN[SPRITE.DRAGON_SPEAR] = 1;
SLOW_DOWN[SPRITE.LAVA_SPEAR] = 1;
SLOW_DOWN[SPRITE.WOOD_SPEAR] = 1;
SLOW_DOWN[SPRITE.CRAB_SPEAR] = 1;

var QUESTS = [
    { time: 2880000 },
    { time: 1440000 },
    { time: 1920000 },
    { time: 1440000 },
    { time: 2880000 },
    { time: 2400000 },
    { time: 2400000 },
    { time: 4800000 },
    { time: 2880000 },
    { time: 3360000 },
    { time: 2880000 },
    { time: 3840000 },
    { time: 3360000 },
  ],
  ITEMS = {
    PLAYERS: 0,
    FIRE: 1,
    WORKBENCH: 2,
    SEED: 3,
    WALL: 4,
    SPIKE: 5,
    BIG_FIRE: 6,
    STONE_WALL: 7,
    GOLD_WALL: 8,
    DIAMOND_WALL: 9,
    WOOD_DOOR: 10,
    CHEST: 11,
    STONE_SPIKE: 12,
    GOLD_SPIKE: 13,
    DIAMOND_SPIKE: 14,
    STONE_DOOR: 15,
    GOLD_DOOR: 16,
    DIAMOND_DOOR: 17,
    FURNACE: 18,
    AMETHYST_WALL: 19,
    AMETHYST_SPIKE: 20,
    AMETHYST_DOOR: 21,
    RESURRECTION: 22,
    EMERALD_MACHINE: 23,
    EXTRACTOR_MACHINE_STONE: 24,
    EXTRACTOR_MACHINE_GOLD: 25,
    EXTRACTOR_MACHINE_DIAMOND: 26,
    EXTRACTOR_MACHINE_AMETHYST: 27,
    EXTRACTOR_MACHINE_REIDITE: 28,
    TOTEM: 29,
    BRIDGE: 30,
    WHEAT_SEED: 31,
    WINDMILL: 32,
    PLOT: 33,
    BREAD_OVEN: 34,
    WELL: 35,
    SIGN: 36,
    PUMPKIN_SEED: 37,
    ROOF: 38,
    GARLIC_SEED: 39,
    THORNBUSH_SEED: 40,
    BED: 41,
    GARLAND: 42,
    TOMATO_SEED: 43,
    CARROT_SEED: 44,
    WOOD_DOOR_SPIKE: 45,
    STONE_DOOR_SPIKE: 46,
    GOLD_DOOR_SPIKE: 47,
    DIAMOND_DOOR_SPIKE: 48,
    AMETHYST_DOOR_SPIKE: 49,
    REIDITE_WALL: 50,
    REIDITE_DOOR: 51,
    REIDITE_SPIKE: 52,
    REIDITE_DOOR_SPIKE: 53,
    WATERMELON_SEED: 54,
    ALOE_VERA_SEED: 55,
    WOOD_TOWER: 56,
    WOLF: 60,
    SPIDER: 61,
    FOX: 62,
    BEAR: 63,
    DRAGON: 64,
    PIRANHA: 65,
    KRAKEN: 66,
    CRAB: 67,
    FLAME: 68,
    LAVA_DRAGON: 69,
    BOAR: 70,
    CRAB_BOSS: 71,
    BABY_DRAGON: 72,
    BABY_LAVA: 73,
    HAWK: 74,
    VULTURE: 75,
    SAND_WORM: 76,
    BABY_MAMMOTH: 77,
    MAMMOTH: 78,
    WHEAT_MOB: 79,
    RABBIT: 80,
    TREASURE_CHEST: 81,
    DEAD_BOX: 82,
    PUMPKIN_MOB: 83,
    GARLIC_MOB: 84,
    THORNBUSH_MOB: 85,
    CRATE: 86,
    GIFT: 87,
    PENGUIN: 88,
    ALOE_VERA_MOB: 89,
    FIREFLY: 90,
    SPELL: 91,
    FRUIT: 100,
  },
  EXTRACTORS = [
    [ITEMS.EXTRACTOR_MACHINE_STONE, INV.STONE],
    [ITEMS.EXTRACTOR_MACHINE_GOLD, INV.GOLD],
    [ITEMS.EXTRACTOR_MACHINE_DIAMOND, INV.DIAMOND],
    [ITEMS.EXTRACTOR_MACHINE_AMETHYST, INV.AMETHYST],
    [ITEMS.EXTRACTOR_MACHINE_REIDITE, INV.REIDITE],
  ];

function Player() {
  this.nickname = "";
  this.skin = 0;
  this.accessory = 0;
  this.bag = 0;
  this.baglook = 0;
  this.book = 0;
  this.crate = 0;
  this.dead = 0;
  this.level = 0;
  this.label = null;
  this.label_winter = null;
  this.ldb_label = null;
  this.alive = false;
  this.score = 0;
}

function Item(type, pid, id, x, y, angle, action, info, speed, extra) {
  this.type = type;
  this.pid = pid;
  this.id = id;
  this.x = x;
  this.y = y;
  this.angle = angle;
  this.nangle = angle;
  this.action = action;
  this.info = info;
  this.extra = extra;
  this.r = {
    x: x,
    y: y,
  };
  this.speed = speed;
  if (world) {
    this.uid = pid * world.max_units + id;
  }
  switch (type) {
    case ITEMS.PLAYERS:
      this.player = world.players[this.pid];
      this.skin = this.player.skin;
      this.baglook = this.player.baglook;
      this.book = this.player.book;
      this.accessory = this.player.accessory;
      this.dist_forest = -1000000;
      this.dist_lava = -1000000;
      this.dist_winter = -1000000;
      this.dist_desert = -1000000;
      this.dist_water = -1000000;
      this.dist_sand = -1000000;
      this.dist_dragon = -1000000;
      this.zombie = !!(world.mode === WORLD.MODE_ZOMBIES && this.skin === WORLD.ZOMBIE_SKIN);
      this.vampire = !!(world.mode === WORLD.MODE_VAMPIRES && this.skin === WORLD.VAMPIRE_SKIN);
      this.superzombie = !!(this.zombie && this.player.nickname === "  ");
      this.foot = [];
      this.tower = 0;
      this.move_effect = true;
      this.id_foot = 0;
      this.fly = 0;
      this.swim = [];
      this.r = {
        x: x,
        y: y
      };
      this.draw = draw_player;
      this.draw_vehicle = draw_vehicle;
      this.vehicle_fx1 = 0;
      this.vehicle_fx2 = 0;
      this.vehicle_fx3 = 0;
      this.vehicle_fx4 = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.vehicle_fx5 = 0;
      this.tower_fx = 0;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.freeze = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.starve = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.idle = new Utils.LinearAnimation(true, 0, 2.25, -1.5, 3.75, 7.5);
      this.walk = new Utils.LinearAnimation(true, 0, 7.5, -3, 22.5, 33.75);
      this.attack = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 3, 6, 9);
      this.slow_attack = 0;
      this.web = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 1, 3);
      this.move_head = this.superzombie ? new Utils.LinearAnimation(true, 0, 2.25, -1.5, 2.75, 5.5) : 0;
      this.angle_init = 0;
      this.text_ease = 0;
      this.text_effect = [];
      this.text_move = [];
      this.text = [];
      this.label = [];
      this.draw_text = draw_chat;
      this.hand = true;
      this.right = -1;
      this.vehicle = -1;
      this.action = STATE.IDLE;
      this.collide = false;
      this.clothe = 0;
      this.ghost = false;
      this.bubbles = [];
      this.bag = 0;
      this.sid = -1;
      this.update = function (_0x1703af) {
        if (this.info & 32768) {
          this.collide = true;
          this.info = -32769 & this.info;
        } else {
          this.collide = false;
        }
        if (this.info & 16384) {
          this.info = -16385 & this.info;
          this.bag = 1;
        } else {
          this.bag = 0;
        }
        this.clothe = Math.floor(this.info / 128);
        this.info -= 128 * this.clothe;
        if (this.info === INV.HAND || this.superzombie) {
          this.right = -1;
        } else {
          this.right = this.info;
        }
        this.tower = world.find_tower(Math.floor(this.r.y / 100), Math.floor(this.r.x / 100));
        this.vehicle = this.extra & 255;
        if (this.right === WORLD.GHOST) {
          this.ghost = true;
        } else {
          this.ghost = false;
        }
        if (SLOW_DOWN[this.right]) {
          this.weapon = true;
        } else {
          this.weapon = false;
        }
        if (_0x1703af & STATE.WEB) {
          this.web.o = false;
          this.web.v = 0.6;
        } else {
          if (_0x1703af & STATE.COLD) {
            this.freeze.o = false;
            this.freeze.v = 0.6;
          } else if (_0x1703af & STATE.HEAL) {
            this.heal.o = false;
            this.heal.v = 0.6;
          }
        }
        if (_0x1703af & STATE.HUNGER) {
          this.starve.o = false;
          this.starve.v = 0.6;
        }
        if (_0x1703af & STATE.HURT) {
          this.hit.o = false;
          this.hit.v = 0.6;
        }
        if (_0x1703af & STATE.ATTACK) {
          this.slow_attack = CLIENT.SLOW_ATTACK;
          if (audio.run && this.sid !== -1) {
            audio.players[this.sid].swing(SOUND[this.right]);
          }
        }
      };
      this.update();
      break;
    case ITEMS.EMERALD_MACHINE:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_bg = draw_emerald_machine_halo;
      this.draw_fg = draw_emerald_machine;
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.rotate1 = 0;
      this.rotate2 = 0;
      this.draw_life = draw_life;
      break;
    case ITEMS.RESURRECTION:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_bg = draw_resurrection_halo;
      this.draw_fg = draw_resurrection;
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.rotate1 = 0;
      this.rotate2 = 0;
      break;
    case ITEMS.FIRE:
    case ITEMS.BIG_FIRE:
      this.draw_bg = draw_fire_ground;
      this.draw_fg = draw_fire_halo;
      this.fire = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.3, 0.3);
      this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.01, 0.01);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.TOMATO_SEED:
      this.draw_bg = draw_tomato;
      this.draw_fg = draw_tomato_fruit;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.fruits = [];
      for (var _0xde15fc = 0; _0xde15fc < 3; _0xde15fc++) {
        this.fruits.push({
          draw: draw_breath_2,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      this.fruits[0].x = this.x - 16.5;
      this.fruits[0].y = this.y - 15.5;
      this.fruits[0].angle = this.angle;
      this.fruits[1].x = this.x + 36;
      this.fruits[1].y = this.y + 17;
      this.fruits[1].angle = this.angle;
      this.fruits[2].x = this.x - 18.5;
      this.fruits[2].y = this.y + 39;
      this.fruits[2].angle = this.angle;
      break;
    case ITEMS.SEED:
      this.draw_bg = draw_seed;
      this.draw_fg = draw_plant;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.fruits = [];
      for (var _0xde15fc = 0; _0xde15fc < 3; _0xde15fc++) {
        this.fruits.push({
          draw: draw_breath,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      this.fruits[0].x = this.x - 16.5;
      this.fruits[0].y = this.y - 15.5;
      this.fruits[1].x = this.x - 5.5;
      this.fruits[1].y = this.y + 7.5;
      this.fruits[2].x = this.x + 18;
      this.fruits[2].y = this.y - 5;
      break;
    case ITEMS.BABY_MAMMOTH:
      this.draw = draw_baby_mammoth;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BOAR:
      this.draw = draw_boar;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.CRAB_BOSS:
      this.draw = draw_crab_boss;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.CRAB:
      this.draw = draw_crab;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathl = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.breathr = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      this.heal = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FLAME:
      this.draw = draw_simple_mobs_hd;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FIREFLY:
      this.draw = draw_simple_mobs;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.5, 0.5);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SPELL:
      this.spell = this.info & 15;
      this.fly = this.extra & 1;
      this.born = 0;
      this.x = this.info;
      this.y = this.extra;
      this.draw = draw_spell;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.6, 0.6);
      break;
    case ITEMS.RABBIT:
    case ITEMS.WOLF:
    case ITEMS.SPIDER:
    case ITEMS.FOX:
    case ITEMS.BEAR:
    case ITEMS.MAMMOTH:
    case ITEMS.PIRANHA:
    case ITEMS.KRAKEN:
    case ITEMS.PENGUIN:
      this.draw = draw_simple_mobs;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SIGN:
      this.draw = draw_sign;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.BREAD_OVEN:
      this.draw_fg = draw_bread_oven_smog;
      this.draw = draw_bread_oven;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.up = new Utils.LinearAnimation(false, 1, 1.03, 0.98, 0.1, 0.1);
      this.smog = [];
      break;
    case ITEMS.GIFT:
      this.angle = Math.random() * Math.PI / 2;
    case ITEMS.CRATE:
    case ITEMS.DEAD_BOX:
      this.draw = draw_crate;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.TREASURE_CHEST:
      this.draw = draw_simple_mobs_2;
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.LAVA_DRAGON:
      this.scale = 1;
      this.draw = draw_lava_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.SAND_WORM:
      this.dig = 0;
      this.ground = [];
      this.groundTimer = 0;
      this.draw_ground = draw_sand_worm_ground;
      this.draw = draw_sand_worm;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.VULTURE:
      this.x = this.info;
      this.y = this.extra;
      this.scale = 1;
      this._alpha = 0;
      this.draw = draw_vulture;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.HAWK:
      this.x = this.info;
      this.y = this.extra;
      this.scale = 1;
      this._alpha = 0;
      this.draw = draw_hawk;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BABY_LAVA:
      this.scale = 1;
      this.draw = draw_baby_lava;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.BABY_DRAGON:
      this.scale = 1;
      this.draw = draw_baby_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.DRAGON:
      this.scale = 1;
      this.draw = draw_dragon;
      this.breath = new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2);
      this.rotate = new Utils.LinearAnimation(false, 0, 0, -Math.PI / 6, 0.5, 1);
      this.hit = new Utils.LinearAnimation(false, 0.6, 0.6, 0, 5, 3);
      break;
    case ITEMS.FRUIT:
      this.fruits = [];
      for (var _0xde15fc = 0; _0xde15fc < 5; _0xde15fc++) {
        this.fruits.push({
          draw: draw_breath,
          breath: new Utils.LinearAnimation(false, 0.9 + Math.random() * 0.15, 1.05, 0.9, 0.2, 0.2)
        });
      }
      switch (this.id % 3) {
        case 0:
          this.fruits[0].x = this.x - 20.5;
          this.fruits[0].y = this.y - 22.5;
          this.fruits[1].x = this.x - 35.5;
          this.fruits[1].y = this.y + 7.5;
          this.fruits[2].x = this.x + 7.5;
          this.fruits[2].y = this.y - 30;
          this.fruits[3].x = this.x + 22.5;
          this.fruits[3].y = this.y;
          this.fruits[4].x = this.x - 7.5;
          this.fruits[4].y = this.y + 14.5;
          break;
        case 1:
          this.fruits[0].x = this.x - 30.5;
          this.fruits[0].y = this.y - 22.5;
          this.fruits[1].x = this.x - 15.5;
          this.fruits[1].y = this.y + 7.5;
          this.fruits[2].x = this.x + 15.5;
          this.fruits[2].y = this.y - 30;
          this.fruits[3].x = this.x + 12.5;
          this.fruits[3].y = this.y + 5;
          this.fruits[4].x = this.x - 40.5;
          this.fruits[4].y = this.y + 14.5;
          break;
        case 2:
          this.fruits[0].x = this.x - 20.5;
          this.fruits[0].y = this.y - 20.5;
          this.fruits[1].x = this.x - 35.5;
          this.fruits[1].y = this.y + 15.5;
          this.fruits[2].x = this.x + 7.5;
          this.fruits[2].y = this.y - 17;
          this.fruits[3].x = this.x + 22.5;
          this.fruits[3].y = this.y + 5;
          this.fruits[4].x = this.x - 7.5;
          this.fruits[4].y = this.y + 1.5;
          break;
      }
      break;
    case ITEMS.WHEAT_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_wheat;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      this.wind = new Utils.LinearAnimation(false, 0, Math.PI / 30, -Math.PI / 30, 0.06, 0.06);
      break;
    case ITEMS.THORNBUSH_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_thornbush;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.GARLIC_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_garlic;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.CARROT_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_carrot;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.ALOE_VERA_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_aloe_vera;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.WATERMELON_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_watermelon;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.PUMPKIN_SEED:
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw = draw_pumpkin;
      this.ground = new Utils.LinearAnimation(false, 0.9, 1.05, 0.9, 0.2, 0.2);
      break;
    case ITEMS.EXTRACTOR_MACHINE_STONE:
      this.draw = draw_extractor_stone;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_GOLD:
      this.draw = draw_extractor_gold;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
      this.draw = draw_extractor_diamond;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
      this.draw = draw_extractor_amethyst;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.EXTRACTOR_MACHINE_REIDITE:
      this.draw = draw_extractor_reidite;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.WINDMILL:
      this.draw_bg = draw_windmill_head;
      this.draw_fg = draw_windmill_wings;
      this.rotate = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.ROOF:
      this.draw = draw_roof;
      this.j = Math.floor(this.x / 100);
      this.i = Math.floor(this.y / 100);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.opacity = 1;
      this.draw_life = draw_life_small;
      break;
    case ITEMS.GARLAND:
      this.draw = draw_garland;
      this.halo = new Utils.LinearAnimation(false, 1, 1.15, 1, 0.3, 0.3);
      this.color = 0;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.PLOT:
    case ITEMS.WORKBENCH:
    case ITEMS.WOOD_TOWER:
    case ITEMS.WELL:
    case ITEMS.TOTEM:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      break;
    case ITEMS.BRIDGE:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life_small;
      break;
    case ITEMS.WALL:
    case ITEMS.STONE_WALL:
    case ITEMS.GOLD_WALL:
    case ITEMS.DIAMOND_WALL:
    case ITEMS.AMETHYST_WALL:
    case ITEMS.REIDITE_WALL:
    case ITEMS.SPIKE:
    case ITEMS.STONE_SPIKE:
    case ITEMS.GOLD_SPIKE:
    case ITEMS.DIAMOND_SPIKE:
    case ITEMS.AMETHYST_SPIKE:
    case ITEMS.REIDITE_SPIKE:
      this.draw = draw_simple_item;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life;
      break;
    case ITEMS.BED:
      this.draw = draw_bed;
      this.opacity = 1;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      var _0xff7680 = this.angle % (Math.PI / 2);
      if (_0xff7680 < Math.PI / 4) {
        this.angle -= _0xff7680;
      } else {
        this.angle += Math.PI / 2 - _0xff7680;
      }
      break;
    case ITEMS.WHEAT_MOB:
      this.draw = draw_wheat_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.ALOE_VERA_MOB:
      this.draw = draw_aloe_vera_mob;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.PUMPKIN_MOB:
      this.draw = draw_pumpkin_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.GARLIC_MOB:
      this.draw = draw_garlic_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.THORNBUSH_MOB:
      this.draw = draw_thornbush_seed;
      this.angle = Math.random() * Math.PI * 2;
      break;
    case ITEMS.CHEST:
      this.update = function (_0x2e4171) {
        this.lock = this.info & 8192 ? 1 : 0;
        this.info = this.info & 8191;
        this.action = _0x2e4171;
      };
      this.draw = draw_chest;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.lock = 0;
      this.update(this.action);
      break;
    case ITEMS.WOOD_DOOR_SPIKE:
    case ITEMS.STONE_DOOR_SPIKE:
    case ITEMS.GOLD_DOOR_SPIKE:
    case ITEMS.DIAMOND_DOOR_SPIKE:
    case ITEMS.AMETHYST_DOOR_SPIKE:
    case ITEMS.REIDITE_DOOR_SPIKE:
    case ITEMS.WOOD_DOOR:
    case ITEMS.STONE_DOOR:
    case ITEMS.GOLD_DOOR:
    case ITEMS.DIAMOND_DOOR:
    case ITEMS.AMETHYST_DOOR:
    case ITEMS.REIDITE_DOOR:
      this.draw = draw_door;
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.draw_life = draw_life;
      break;
    case ITEMS.FURNACE:
      this.draw_bg = draw_furnace_ground;
      this.draw = draw_furnace;
      this.draw_fg = draw_furnace_halo;
      this.ground = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.02, 0.02);
      this.halo = new Utils.LinearAnimation(false, 1, 1.23, 1.18, 0.04, 0.04);
      this.hit = {
        anim: new Utils.LinearAnimation(false, 1, 1, 0, 10, 10),
        update: false,
        angle: 0
      };
      this.update = function (_0x577026) {
        this.action = _0x577026;
      };
      break;
  }
}
function World(e) {
  this.mode = WORLD.MODE_PVP;
  this.max_units = e;
  this.custom_map = 0;
  this.islands = 6;
  this.players = [];
  this.units = [];
  this.units[ITEMS.PLAYERS] = [];
  this.units[ITEMS.FRUIT] = [];
  this.units[ITEMS.RABBIT] = [];
  this.units[ITEMS.WOLF] = [];
  this.units[ITEMS.CRAB] = [];
  this.units[ITEMS.BOAR] = [];
  this.units[ITEMS.BABY_MAMMOTH] = [];
  this.units[ITEMS.CRAB_BOSS] = [];
  this.units[ITEMS.BABY_DRAGON] = [];
  this.units[ITEMS.BABY_LAVA] = [];
  this.units[ITEMS.HAWK] = [];
  this.units[ITEMS.PIRANHA] = [];
  this.units[ITEMS.KRAKEN] = [];
  this.units[ITEMS.FOX] = [];
  this.units[ITEMS.PENGUIN] = [];
  this.units[ITEMS.SPELL] = [];
  this.units[ITEMS.FIREFLY] = [];
  this.units[ITEMS.BEAR] = [];
  this.units[ITEMS.MAMMOTH] = [];
  this.units[ITEMS.DRAGON] = [];
  this.units[ITEMS.LAVA_DRAGON] = [];
  this.units[ITEMS.FLAME] = [];
  this.units[ITEMS.WHEAT_MOB] = [];
  this.units[ITEMS.ALOE_VERA_MOB] = [];
  this.units[ITEMS.PUMPKIN_MOB] = [];
  this.units[ITEMS.GARLIC_MOB] = [];
  this.units[ITEMS.THORNBUSH_MOB] = [];
  this.units[ITEMS.TREASURE_CHEST] = [];
  this.units[ITEMS.DEAD_BOX] = [];
  this.units[ITEMS.CRATE] = [];
  this.units[ITEMS.BREAD_OVEN] = [];
  this.units[ITEMS.SIGN] = [];
  this.units[ITEMS.SPIDER] = [];
  this.units[ITEMS.WORKBENCH] = [];
  this.units[ITEMS.FIRE] = [];
  this.units[ITEMS.BIG_FIRE] = [];
  this.units[ITEMS.SEED] = [];
  this.units[ITEMS.SPIKE] = [];
  this.units[ITEMS.STONE_SPIKE] = [];
  this.units[ITEMS.GOLD_SPIKE] = [];
  this.units[ITEMS.DIAMOND_SPIKE] = [];
  this.units[ITEMS.AMETHYST_SPIKE] = [];
  this.units[ITEMS.REIDITE_SPIKE] = [];
  this.units[ITEMS.WALL] = [];
  this.units[ITEMS.STONE_WALL] = [];
  this.units[ITEMS.GOLD_WALL] = [];
  this.units[ITEMS.DIAMOND_WALL] = [];
  this.units[ITEMS.AMETHYST_WALL] = [];
  this.units[ITEMS.REIDITE_WALL] = [];
  this.units[ITEMS.BED] = [];
  this.units[ITEMS.WOOD_DOOR] = [];
  this.units[ITEMS.STONE_DOOR] = [];
  this.units[ITEMS.GOLD_DOOR] = [];
  this.units[ITEMS.DIAMOND_DOOR] = [];
  this.units[ITEMS.AMETHYST_DOOR] = [];
  this.units[ITEMS.REIDITE_DOOR] = [];
  this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
  this.units[ITEMS.STONE_DOOR_SPIKE] = [];
  this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
  this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
  this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
  this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
  this.units[ITEMS.FURNACE] = [];
  this.units[ITEMS.TOTEM] = [];
  this.units[ITEMS.WOOD_TOWER] = [];
  this.units[ITEMS.CHEST] = [];
  this.units[ITEMS.RESURRECTION] = [];
  this.units[ITEMS.EMERALD_MACHINE] = [];
  this.units[ITEMS.BRIDGE] = [];
  this.units[ITEMS.ROOF] = [];
  this.units[ITEMS.PLOT] = [];
  this.units[ITEMS.WHEAT_SEED] = [];
  this.units[ITEMS.ALOE_VERA_SEED] = [];
  this.units[ITEMS.PUMPKIN_SEED] = [];
  this.units[ITEMS.TOMATO_SEED] = [];
  this.units[ITEMS.CARROT_SEED] = [];
  this.units[ITEMS.WATERMELON_SEED] = [];
  this.units[ITEMS.GARLIC_SEED] = [];
  this.units[ITEMS.THORNBUSH_SEED] = [];
  this.units[ITEMS.WINDMILL] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
  this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
  this.units[ITEMS.WELL] = [];
  this.units[ITEMS.GIFT] = [];
  this.units[ITEMS.GARLAND] = [];
  this.fast_units = [];
  this.nw = 260;
  this.nh = 260;
  this.dw = 100;
  this.dh = 100;
  this.w = this.nw * this.dw;
  this.h = this.nh * this.dh;
  this.RNG = new RNG.Random();
  this.biomes = [];
  this.shade = new Utils.LinearAnimation(false, 0, 1, 0, 1, 1);
  this.transition = false;
  this.BIOME = [];
  this.BIOME_FOREST = 0;
  this.BIOME_WINTER = 1;
  this.BIOME_LAVA = 2;
  this.BIOME_DRAGON = 3;
  this.BIOME_SEA = 4;
  this.BIOME_DESERT = 10;
  this.BIOME[this.BIOME_FOREST] = {
    isSand: 1,
    day: [19, 58, 43],
    night: [4, 43, 48],
    _color: ["#133a2b", "#042b30"],
  };
  this.BIOME[this.BIOME_SEA] = {
    isSand: 0,
    day: [11, 106, 132],
    night: [9, 55, 63],
    _color: ["#0B6A84", "#09373F"],
  };
  this.BIOME[this.BIOME_WINTER] = {
    isSand: 0,
    day: [235, 242, 240],
    night: [19, 97, 103],
    _color: ["#EBF2F0", "#136167"],
  };
  this.BIOME[this.BIOME_LAVA] = {
    isSand: 0,
    day: [45, 32, 23],
    night: [3, 28, 30],
    _color: ["#2D2017", "#031C1E"],
  };
  this.BIOME[this.BIOME_DRAGON] = {
    isSand: 0,
    day: [74, 74, 74],
    night: [24, 61, 60],
    _color: ["#4A4A4A", "#183D3C"],
  };
  this.BIOME[this.BIOME_DESERT] = {
    isSand: 0,
    day: [235, 216, 166],
    night: [9, 61, 56],
    _color: ["#EBD8A6", "#093D38"],
  };
  this.Biome = function (
    _0x53cf69,
    _0x263e0c,
    _0x5ca740,
    _0x3d5652,
    _0x3961c8,
    _0x428034
  ) {
    this.x1 = _0x263e0c * 100;
    this.y1 = _0x5ca740 * 100;
    this.w = _0x3d5652 * 100;
    this.h = _0x3961c8 * 100;
    this.x2 = (_0x263e0c + _0x3d5652) * 100;
    this.y2 = (_0x5ca740 + _0x3961c8) * 100;
    this.t = _0x53cf69;
    if (_0x428034 === undefined) {
      this.v = 15;
    } else {
      this.v = _0x428034;
    }
  };
  function _0x468329(_0xcbff5d, _0x4c05f8, _0x822cd8, _0x144290, _0x4252d8) {
    var _0x1b171c = _0x4c05f8 + Math.floor(world.RNG.get() * _0x144290);
    var _0x2608c7 = _0x822cd8 + Math.floor(world.RNG.get() * _0x144290);
    var _0x1554d7 =
      10 + Math.floor(world.RNG.get() * (world.nw - _0x1b171c - 20));
    var _0x4bac1b =
      10 + Math.floor(world.RNG.get() * (world.nh - _0x2608c7 - 20));
    var _0x964ddd = _0x1554d7 + _0x1b171c;
    var _0x120911 = _0x4bac1b + _0x2608c7;
    for (var _0x9ad6cf = 0; _0x9ad6cf < world.biomes.length; _0x9ad6cf++) {
      var _0x1461ac = world.biomes[_0x9ad6cf];
      if (
        Utils.intersect_aabb(
          _0x1554d7,
          _0x964ddd,
          _0x4bac1b,
          _0x120911,
          _0x1461ac.x1 / 100 - _0x4252d8,
          _0x1461ac.x2 / 100 + _0x4252d8,
          _0x1461ac.y1 / 100 - _0x4252d8,
          _0x1461ac.y2 / 100 + _0x4252d8
        ) === 1
      ) {
        return 0;
      }
    }
    world.biomes.push(
      new world.Biome(_0xcbff5d, _0x1554d7, _0x4bac1b, _0x1b171c, _0x2608c7, 15)
    );
    return 1;
  }
  function _0x497452(_0x3b0577, _0xf07522, _0x17fdb6) {
    var _0x46b459 = _0xf07522;
    for (var _0x34d247 = _0x17fdb6; _0x34d247 < world.nh; _0x34d247++) {
      for (var _0x570072 = _0xf07522; _0x570072 < world.nw; _0x570072++) {
        if (_0x34d247 === _0x17fdb6) {
          _0x46b459 = Math.max(_0x570072, _0x46b459);
        }
        if (_0x570072 > _0x46b459) {
          break;
        }
        if (_0x3b0577[_0x34d247][_0x570072] === 1) {
          break;
        }
        _0x3b0577[_0x34d247][_0x570072] = 1;
      }
      if (_0x570072 < _0x46b459) {
        break;
      }
    }
    world.biomes.push(
      new world.Biome(
        world.BIOME_SEA,
        _0xf07522,
        _0x17fdb6,
        _0x46b459 - _0xf07522 + 1,
        _0x34d247 - _0x17fdb6,
        15
      )
    );
  }
  function _0xd5d4f0(_0x4efff5, _0x10c91e, _0xfdb0e0, _0xa7e0ee, _0x426468) {
    for (var _0x15914b = 0; _0x15914b < _0x426468; _0x15914b++) {
      if (_0x468329(_0x4efff5, _0x10c91e, _0xfdb0e0, _0xa7e0ee, 8) === 1) {
        break;
      }
    }
    if (_0x15914b === _0x426468) {
      return 0;
    }
    return 1;
  }
  this.MAX_DIST = -1000000;
  this.dist_winter = this.MAX_DIST;
  this.dist_desert = this.MAX_DIST;
  this.dist_lava = this.MAX_DIST;
  this.dist_forest = this.MAX_DIST;
  this.dist_water = this.MAX_DIST;
  this.dist_dragon = this.MAX_DIST;
  this.dist_from_biomes = function (_0x4fe074) {
    var _0x13392a = _0x4fe074.r.x;
    var _0x16e1e2 = _0x4fe074.r.y;
    var _0x3f8658 = Math.floor(_0x16e1e2 / 100);
    var _0x5c4016 = Math.floor(_0x13392a / 100);
    _0x4fe074.dist_winter = world.MAX_DIST;
    _0x4fe074.dist_desert = world.MAX_DIST;
    _0x4fe074.dist_lava = world.MAX_DIST;
    _0x4fe074.dist_forest = world.MAX_DIST;
    _0x4fe074.dist_dragon = world.MAX_DIST;
    _0x4fe074.dist_sand = world.MAX_DIST;
    for (
      var _0xb47485 = 0;
      world.biomes[_0xb47485].t !== world.BIOME_SEA;
      _0xb47485++
    ) {
      if (world.biomes[_0xb47485].t === world.BIOME_FOREST) {
        var _0x2093fc = world.dist_from_biome(_0xb47485, _0x13392a, _0x16e1e2);
        _0x4fe074.dist_forest = Math.max(_0x4fe074.dist_forest, _0x2093fc);
        if (
          _0x2093fc > 0 &&
          world.dist_from_sand(_0xb47485, _0x13392a, _0x16e1e2) === 1
        ) {
          _0x4fe074.dist_sand = 1;
        }
      } else {
        if (world.biomes[_0xb47485].t === world.BIOME_WINTER) {
          _0x4fe074.dist_winter = Math.max(
            _0x4fe074.dist_winter,
            world.dist_from_biome(_0xb47485, _0x13392a, _0x16e1e2)
          );
        } else {
          if (world.biomes[_0xb47485].t === world.BIOME_DESERT) {
            _0x4fe074.dist_desert = Math.max(
              _0x4fe074.dist_desert,
              world.dist_from_biome(_0xb47485, _0x13392a, _0x16e1e2)
            );
          } else {
            if (world.biomes[_0xb47485].t === world.BIOME_LAVA) {
              _0x4fe074.dist_lava = Math.max(
                _0x4fe074.dist_lava,
                world.dist_from_biome(_0xb47485, _0x13392a, _0x16e1e2)
              );
            } else {
              world.biomes[_0xb47485].t === world.BIOME_DRAGON &&
                (_0x4fe074.dist_dragon = Math.max(
                  _0x4fe074.dist_dragon,
                  world.dist_from_biome(_0xb47485, _0x13392a, _0x16e1e2)
                ));
            }
          }
        }
      }
    }
    if (MAP.tiles[_0x3f8658][_0x5c4016].iblk) {
      _0x4fe074.dist_sand = 1;
    }
    if (world.find_bridge(_0x5c4016, _0x3f8658)) {
      _0x4fe074.dist_water = _0x4fe074.MAX_DIST;
    } else {
      if (
        MAP.tiles[_0x3f8658][_0x5c4016].wtb ||
        (_0x4fe074.dist_winter < 0 &&
          _0x4fe074.dist_lava < 0 &&
          _0x4fe074.dist_forest < 0 &&
          _0x4fe074.dist_sand < 0 &&
          _0x4fe074.dist_dragon < 0 &&
          _0x4fe074.dist_desert < 0)
      ) {
        _0x4fe074.dist_water = 1;
      } else {
        _0x4fe074.dist_water = _0x4fe074.MAX_DIST;
      }
    }
  };
  this.update_dist_from_biomes = function (_0x4493b4, _0x34df51) {
    world.dist_winter = world.MAX_DIST;
    world.dist_desert = world.MAX_DIST;
    world.dist_lava = world.MAX_DIST;
    world.dist_dragon = world.MAX_DIST;
    world.dist_forest = world.MAX_DIST;
    for (
      var _0x4a391e = 0;
      world.biomes[_0x4a391e].t !== world.BIOME_SEA;
      _0x4a391e++
    ) {
      if (world.biomes[_0x4a391e].t === world.BIOME_FOREST) {
        world.dist_forest = Math.max(
          world.dist_forest,
          world.dist_from_biome(_0x4a391e, _0x4493b4, _0x34df51)
        );
      } else {
        if (world.biomes[_0x4a391e].t === world.BIOME_WINTER) {
          world.dist_winter = Math.max(
            world.dist_winter,
            world.dist_from_biome(_0x4a391e, _0x4493b4, _0x34df51)
          );
        } else {
          if (world.biomes[_0x4a391e].t === world.BIOME_DESERT) {
            world.dist_desert = Math.max(
              world.dist_desert,
              world.dist_from_biome(_0x4a391e, _0x4493b4, _0x34df51)
            );
          } else {
            if (world.biomes[_0x4a391e].t === world.BIOME_LAVA) {
              world.dist_lava = Math.max(
                world.dist_lava,
                world.dist_from_biome(_0x4a391e, _0x4493b4, _0x34df51)
              );
            } else {
              if (world.biomes[_0x4a391e].t === world.BIOME_DRAGON) {
                world.dist_dragon = Math.max(
                  world.dist_dragon,
                  world.dist_from_biome(_0x4a391e, _0x4493b4, _0x34df51)
                );
              }
            }
          }
        }
      }
    }
    if (
      world.dist_winter < 0 &&
      world.dist_dragon < 0 &&
      world.dist_forest < 0 &&
      world.dist_dragon < 0 &&
      world.dist_desert < 0
    ) {
      world.dist_water = 1;
    } else {
      world.dist_water = world.MAX_DIST;
    }
  };
  this.dist_from_sand = function (_0x33d645, _0x2aa2cf, _0x4a2dce) {
    var _0x54ad68 = world.biomes[_0x33d645];
    var _0x577b5b = 0;
    x1 = _0x54ad68.x1 + 30 + ((_0x54ad68.v & WORLD.LEFT) === 0 ? 150 : 0);
    var _0xe64289 = _0x2aa2cf - x1;
    if ((_0x54ad68.v & WORLD.LEFT) > 0 && _0xe64289 > 0 && _0xe64289 < 320) {
      _0x577b5b = 1;
    }
    y1 = _0x54ad68.y1 + 250 + ((_0x54ad68.v & WORLD.TOP) === 0 ? 150 : 0);
    _0xe64289 = _0x4a2dce - y1;
    if ((_0x54ad68.v & WORLD.TOP) > 0 && _0xe64289 > 0 && _0xe64289 < 320) {
      _0x577b5b = 1;
    }
    x2 = _0x54ad68.x2 + 80 + ((_0x54ad68.v & WORLD.RIGHT) === 0 ? -200 : 0);
    _0xe64289 = x2 - _0x2aa2cf;
    if ((_0x54ad68.v & WORLD.RIGHT) > 0 && _0xe64289 > 0 && _0xe64289 < 320) {
      _0x577b5b = 1;
    }
    y2 = _0x54ad68.y2 - 200 + ((_0x54ad68.v & WORLD.BOTTOM) === 0 ? -200 : 0);
    _0xe64289 = y2 - _0x4a2dce;
    if ((_0x54ad68.v & WORLD.BOTTOM) > 0 && _0xe64289 > 0 && _0xe64289 < 320) {
      _0x577b5b = 1;
    }
    if (
      _0x2aa2cf >= x1 &&
      _0x2aa2cf <= x2 &&
      _0x4a2dce >= y1 &&
      _0x4a2dce <= y2
    ) {
      return _0x577b5b;
    }
    return 0;
  };
  this.dist_from_biome = function (_0x4b607b, _0xbbb1cd, _0x18ab8b) {
    var _0x4ce75e = world.biomes[_0x4b607b];
    x1 = _0x4ce75e.x1 + 30;
    y1 = _0x4ce75e.y1 + 250;
    x2 = _0x4ce75e.x2 + 80;
    y2 = _0x4ce75e.y2 - 200;
    if (
      _0xbbb1cd >= x1 &&
      _0xbbb1cd <= x2 &&
      _0x18ab8b >= y1 &&
      _0x18ab8b <= y2
    ) {
      return Math.min(
        _0xbbb1cd - x1,
        x2 - _0xbbb1cd,
        _0x18ab8b - y1,
        y2 - _0x18ab8b
      );
    }
    var _0x59c97b = -1000000;
    if (_0xbbb1cd - x1 < 0) {
      _0x59c97b = Math.max(_0x59c97b, _0xbbb1cd - x1);
    } else {
      if (x2 - _0xbbb1cd < 0) {
        _0x59c97b = Math.max(_0x59c97b, x2 - _0xbbb1cd);
      }
    }
    distY = -1000000;
    if (_0x18ab8b < y1 || _0x18ab8b > y2) {
      if (_0x18ab8b - y1 < 0) {
        distY = Math.max(distY, _0x18ab8b - y1);
      } else {
        distY = Math.max(distY, y2 - _0x18ab8b);
      }
      if (_0x59c97b !== -1000000 && distY !== -1000000) {
        _0x59c97b = Math.min(_0x59c97b, distY);
      } else {
        _0x59c97b = distY;
      }
    }
    return _0x59c97b;
  };
  function _0x36df08(_0x592232, _0xcd62b8) {
    var _0x7ac349 = world.biomes[_0xcd62b8];
    for (
      var _0x32113a = 0, _0x3dcaad = 0;
      _0x32113a < _0x592232 && _0x3dcaad < 10000;
      _0x3dcaad++
    ) {
      var _0x115859 = _0x7ac349.y1 + world.RNG.get() * _0x7ac349.h,
        _0x1686aa = _0x7ac349.x1 + world.RNG.get() * _0x7ac349.w,
        _0x1fd55c = Math.floor(_0x115859 / 100),
        _0x193aef = Math.floor(_0x1686aa / 100),
        _0x13e339 = world.dist_from_biome(
          _0xcd62b8,
          _0x193aef * 100 + 50,
          _0x1fd55c * 100 + 50
        );
      if (_0x13e339 < 600) {
        continue;
      }
      var _0x5b2a34 = 1;
      for (
        var _0xc675b = _0x1fd55c - 4;
        _0x5b2a34 === 1 && _0xc675b <= _0x1fd55c + 4;
        _0xc675b++
      ) {
        for (
          var _0x69f7e2 = _0x193aef - 4;
          _0x5b2a34 === 1 && _0x69f7e2 <= _0x193aef + 4;
          _0x69f7e2++
        ) {
          if (MAP.tiles[_0xc675b][_0x69f7e2] !== undefined) {
            _0x5b2a34 = 0;
          }
        }
      }
      if (_0x5b2a34 === 0) {
        continue;
      }
      _0x2e8c0b(_0x1fd55c, _0x193aef, "la", _0x32113a % 6, 0);
      _0x32113a++;
    }
  }
  function _0x25ea23(
    _0x305649,
    _0x1e6002,
    _0x43784f,
    _0x3f1e40,
    _0x59ce0c,
    _0x3e462a,
    _0xcc8a24,
    _0x18f58e
  ) {
    var _0x353d78 = Math.floor(_0xcc8a24 / 2);
    var _0x4aebfd = Math.max(1, Math.floor(_0xcc8a24 / 2));
    var _0xd92551 = Math.floor(_0x18f58e / 2);
    var _0x3fbe9d = Math.max(1, Math.floor(_0x18f58e / 2));
    for (var _0x5c9f23 = 0; _0x5c9f23 < _0x43784f; _0x5c9f23++) {
      for (
        var _0x483ea8 = _0x305649 - _0xd92551;
        _0x483ea8 < _0x305649 + _0x3fbe9d;
        _0x483ea8++
      ) {
        for (
          var _0x1a49da = _0x1e6002 - _0x353d78;
          _0x1a49da < _0x1e6002 + _0x4aebfd;
          _0x1a49da++
        ) {
          if (_0x2e8c0b(_0x483ea8, _0x1a49da, "wtb", 0, 1) === 1) {
            _0x3e462a.push([_0x483ea8, _0x1a49da, 1]);
          }
        }
      }
      _0x305649 += _0x3f1e40;
      _0x1e6002 += _0x59ce0c;
    }
  }
  function _0x50b426(_0x391845, _0x8974a9) {
    var _0x5485ea = world.biomes[_0x391845];
    var _0x46a014 = Math.floor(_0x5485ea.y1 / 100);
    var _0x501afb = Math.floor(_0x5485ea.x1 / 100);
    var _0x2a16ab = Math.floor(_0x5485ea.h / 100);
    var _0x272a8b = Math.floor(_0x5485ea.w / 100);
    var _0x9abd89 = _0x46a014 + Math.floor(_0x2a16ab / 2);
    var _0x351d22 = _0x501afb + Math.floor(_0x272a8b / 2);
    for (var _0x1eff87 = 0; _0x1eff87 < 3; _0x1eff87++) {
      var _0x329f1e = Math.floor(_0x9abd89 - 3 + world.RNG.get() * 6),
        _0x39ac87 = Math.floor(_0x351d22 - 3 + world.RNG.get() * 6);
      _0x2e8c0b(_0x329f1e, _0x39ac87, "plm", _0x1eff87, 1);
    }
    for (var _0x1eff87 = 0; _0x1eff87 < 80; _0x1eff87++) {
      var _0x329f1e = Math.floor(_0x9abd89 - 3 + world.RNG.get() * 6),
        _0x39ac87 = Math.floor(_0x351d22 - 3 + world.RNG.get() * 6);
      if (_0x2e8c0b(_0x329f1e, _0x39ac87, "wtb", 0, 1) === 1) {
        _0x8974a9.push([_0x329f1e, _0x39ac87, 0]);
      }
    }
  }
  function _0x9860b9(_0x1734e6, _0x59c9a0) {
    var _0x28dd9a = world.biomes[_0x1734e6];
    var _0x324ec4 = Math.floor(_0x28dd9a.y1 / 100);
    var _0x28bc2a = Math.floor(_0x28dd9a.x1 / 100);
    var _0x4ff0d1 = Math.floor(_0x28dd9a.h / 100);
    var _0x2dc36b = Math.floor(_0x28dd9a.w / 100);
    var _0xbecbb5 = _0x324ec4 + _0x4ff0d1;
    var _0x3852e1 = _0x28bc2a + _0x2dc36b;
    var _0x4fd8e7 = 2;
    var _0x1160fb = _0x4ff0d1;
    var _0x78bf0b = _0x324ec4;
    var _0x54c10c =
      _0x28bc2a + 10 + Math.floor((_0x2dc36b - 20) * world.RNG.get());
    for (
      var _0x2956d6 = _0x54c10c - 4;
      _0x2956d6 < _0x54c10c + 4;
      _0x2956d6++
    ) {
      _0x2e8c0b(_0x324ec4 - 1, _0x2956d6, "wtb", 0, 1);
    }
    while (_0x1160fb > 0) {
      if (_0x4fd8e7 === 2) {
        for (var _0x434c22 = 10; _0x434c22 > 1; _0x434c22--) {
          _0x25ea23(_0x78bf0b, _0x54c10c, 1, 1, 0, _0x59c9a0, _0x434c22, 1);
          _0x1160fb -= 1;
          _0x78bf0b += 1;
        }
        _0x4fd8e7 = 0;
        continue;
      }
      if (_0x1160fb < 10) {
        for (var _0x434c22 = 1; _0x1160fb > 0; _0x434c22++) {
          _0x25ea23(_0x78bf0b, _0x54c10c, 1, 1, 0, _0x59c9a0, _0x434c22, 1);
          _0x1160fb -= 1;
          _0x78bf0b += 1;
        }
        continue;
      }
      if (_0x4fd8e7 === 1) {
        var _0xb1475 = Math.min(_0x1160fb, Math.floor(1 + 4 * world.RNG.get())),
          _0x2dc36b = 1 + Math.floor(world.RNG.get() * 4);
        _0x25ea23(
          _0x78bf0b,
          _0x54c10c,
          _0xb1475,
          1,
          0,
          _0x59c9a0,
          _0x2dc36b,
          _0x2dc36b
        );
        _0x4fd8e7 = 0;
        _0x1160fb -= _0xb1475;
        _0x78bf0b += _0xb1475;
        continue;
      }
      _0x4fd8e7 = 1;
      var _0x315f19 = Math.floor(1 + 2 * world.RNG.get()),
        _0x2f72d8 = 1 + Math.floor(world.RNG.get() * 4);
      if (_0x54c10c < _0x28bc2a + 16) {
        _0x25ea23(
          _0x78bf0b,
          _0x54c10c,
          _0x315f19,
          0,
          1,
          _0x59c9a0,
          _0x2f72d8,
          _0x2f72d8
        );
        _0x54c10c += _0x315f19;
      } else {
        if (_0x54c10c > _0x3852e1 - 16) {
          _0x25ea23(
            _0x78bf0b,
            _0x54c10c,
            _0x315f19,
            0,
            -1,
            _0x59c9a0,
            _0x2f72d8,
            _0x2f72d8
          );
          _0x54c10c -= _0x315f19;
        } else {
          world.RNG.get() > 0.5
            ? (_0x25ea23(
                _0x78bf0b,
                _0x54c10c,
                _0x315f19,
                0,
                1,
                _0x59c9a0,
                _0x2f72d8,
                _0x2f72d8
              ),
              (_0x54c10c += _0x315f19))
            : (_0x25ea23(
                _0x78bf0b,
                _0x54c10c,
                _0x315f19,
                0,
                -1,
                _0x59c9a0,
                _0x2f72d8,
                _0x2f72d8
              ),
              (_0x54c10c -= _0x315f19));
        }
      }
    }
    for (
      var _0x2956d6 = _0x54c10c - 1;
      _0x2956d6 < _0x54c10c + 2;
      _0x2956d6++
    ) {
      _0x2e8c0b(_0x78bf0b, _0x2956d6, "wtb", 0, 1);
    }
  }
  function _0x104633(_0x4e58bf, _0x220fbf) {
    for (var _0x171548 = 0; _0x171548 < _0x220fbf.length; _0x171548++) {
      var _0x522d28 = _0x220fbf[_0x171548][0],
        _0x123375 = _0x220fbf[_0x171548][1],
        _0x47150b = _0x220fbf[_0x171548][2];
      _0x498e0c(_0x522d28, _0x123375, _0x4e58bf, _0x47150b);
    }
  }
  this.add_island = function (_0x5b2922, _0x41e52f, _0x32b056) {
    var _0x25e9d0 = _0x32b056;
    var _0x452bf5 = _0x41e52f;
    _0x2e8c0b(_0x25e9d0, _0x452bf5, "isl", _0x5b2922, 1);
    for (var _0x601cf3 = 0; _0x601cf3 < 4; _0x601cf3++) {
      for (var _0x17ebcb = 0; _0x17ebcb < 3; _0x17ebcb++) {
        _0x2e8c0b(_0x25e9d0 - _0x17ebcb, _0x452bf5 - _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + _0x17ebcb, _0x452bf5 - _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + _0x17ebcb, _0x452bf5 + _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 - _0x17ebcb, _0x452bf5 + _0x601cf3, "iblk", 0);
      }
    }
    if (_0x5b2922 === 0) {
      for (var _0x601cf3 = 0; _0x601cf3 < 2; _0x601cf3++) {
        _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 - 4, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 - 4, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 + 4, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 + 4, "iblk", 0);
      }
      for (var _0x601cf3 = 0; _0x601cf3 < 3; _0x601cf3++) {
        _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 + _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 + _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 - _0x601cf3, "iblk", 0);
        _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 - _0x601cf3, "iblk", 0);
      }
      _0x2e8c0b(_0x25e9d0 - 2, _0x452bf5 - 4, "iblk", 0);
      _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 - 3, "iblk", 0);
      _0x2e8c0b(_0x25e9d0 + 2, _0x452bf5 + 4, "iblk", 0);
      _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 + 3, "iblk", 0);
    } else {
      if (_0x5b2922 === 1) {
        for (var _0x601cf3 = 0; _0x601cf3 < 3; _0x601cf3++) {
          _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 - 4, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 - 4, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 + 4, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 + 4, "iblk", 0);
        }
        for (var _0x601cf3 = 0; _0x601cf3 < 4; _0x601cf3++) {
          _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 + _0x601cf3, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 + _0x601cf3, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 - _0x601cf3, "iblk", 0);
          _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 - _0x601cf3, "iblk", 0);
        }
      } else {
        if (_0x5b2922 === 2) {
          for (var _0x601cf3 = 0; _0x601cf3 < 2; _0x601cf3++) {
            _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 - 4, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 - 4, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 - _0x601cf3, _0x452bf5 + 4, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 + _0x601cf3, _0x452bf5 + 4, "iblk", 0);
          }
          for (var _0x601cf3 = 0; _0x601cf3 < 3; _0x601cf3++) {
            _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 + _0x601cf3, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 + _0x601cf3, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 - 3, _0x452bf5 - _0x601cf3, "iblk", 0);
            _0x2e8c0b(_0x25e9d0 + 3, _0x452bf5 - _0x601cf3, "iblk", 0);
          }
        }
      }
    }
  };
  this.add_islands = function (_0x1e2fdb) {
    for (
      var _0x449f4b = 0;
      _0x449f4b < world.biomes.length && _0x1e2fdb > 0;
      _0x449f4b++
    ) {
      var _0x1e3aca = world.biomes[_0x449f4b];
      if (_0x1e3aca.t !== world.BIOME_SEA) {
        continue;
      }
      if (_0x1e3aca.w > 1800 && _0x1e3aca.h > 1000) {
        var _0x2178ec = Math.floor((_0x1e3aca.x1 + _0x1e3aca.w / 2) / 100);
        var _0x499bba = Math.floor((_0x1e3aca.y1 + _0x1e3aca.h / 2) / 100);
        world.add_island(_0x1e2fdb % 3, _0x2178ec, _0x499bba);
        for (var _0x4bde7f = 0; _0x4bde7f < 3; _0x4bde7f++) {
          var _0x43f73c = _0x499bba - 2 + Math.floor(world.RNG.get() * 4);
          var _0x4f1e97 = _0x2178ec - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[_0x43f73c][_0x4f1e97].s === undefined) {
            _0x2e8c0b(_0x43f73c, _0x4f1e97, "plm", _0x4bde7f);
          }
          var _0x43f73c = _0x499bba - 2 + Math.floor(world.RNG.get() * 4);
          var _0x4f1e97 = _0x2178ec - 3 + Math.floor(world.RNG.get() * 6);
          if (MAP.tiles[_0x43f73c][_0x4f1e97].plm === undefined) {
            _0x2e8c0b(_0x43f73c, _0x4f1e97, "s", _0x4bde7f);
          }
        }
        var _0x43f73c = _0x499bba - 2 + Math.floor(world.RNG.get() * 4);
        var _0x4f1e97 = _0x2178ec - 3 + Math.floor(world.RNG.get() * 6);
        if (
          MAP.tiles[_0x43f73c][_0x4f1e97].plm === undefined &&
          MAP.tiles[_0x43f73c][_0x4f1e97].s === undefined
        ) {
          _0x2e8c0b(_0x43f73c, _0x4f1e97, "p", 0, 1);
        }
        _0x1e2fdb--;
      }
    }
  };
  this.generate_world = function (_0x48e22a) {
    world.RNG.init(_0x48e22a);
    var _0x2ecd9b = 0;
    while (1) {
      _0x2ecd9b++;
      if (_0x2ecd9b > 10000) {
        return;
      }
      world.biomes = [];
      if (
        world.custom_map === 0 &&
        (world.mode === WORLD.MODE_VAMPIRES ||
          world.mode === WORLD.MODE_EXPERIMENTAL ||
          world.mode === WORLD.MODE_PVP)
      ) {
        world.custom_map = ___MAP___;
      }
      if (world.mode === WORLD.MODE_ZOMBIES) {
        world.biomes.push(
          new world.Biome(world.BIOME_FOREST, 2, 2, 80, 80, 15)
        );
      } else {
        if (world.mode === WORLD.MODE_LEGACY) {
          world.biomes.push(
            new world.Biome(world.BIOME_FOREST, 2, 2, 150, 150, 15)
          );
        } else {
          if (
            world.custom_map !== 0 &&
            world.custom_map.length > 0 &&
            world.custom_map[0].length > 3
          ) {
            for (
              var _0x3efea4 = 0;
              _0x3efea4 < world.custom_map.length;
              _0x3efea4++
            ) {
              var _0x3b3068 = world.custom_map[_0x3efea4];
              if (_0x3b3068[0] === 0) {
                var _0x10765d = WORLD.BIOME_FOREST;
                switch (_0x3b3068[1]) {
                  case "FOREST":
                    _0x10765d = world.BIOME_FOREST;
                    break;
                  case "WINTER":
                    _0x10765d = world.BIOME_WINTER;
                    break;
                  case "DESERT":
                    _0x10765d = world.BIOME_DESERT;
                    break;
                  case "LAVA":
                    _0x10765d = world.BIOME_LAVA;
                    break;
                  case "DRAGON":
                    _0x10765d = world.BIOME_DRAGON;
                    break;
                }
                world.biomes.push(
                  new world.Biome(
                    _0x10765d,
                    _0x3b3068[2],
                    _0x3b3068[3],
                    _0x3b3068[4],
                    _0x3b3068[5],
                    _0x3b3068[6],
                    _0x3b3068[7]
                  )
                );
                continue;
              } else {
                break;
              }
            }
          } else {
            if (world.custom_map !== 0) {
              for (
                var _0x3efea4 = 0;
                _0x3efea4 < world.custom_map.length;
                _0x3efea4++
              ) {
                var _0x36bc5c = world.custom_map[_0x3efea4],
                  _0x10765d = WORLD.BIOME_FOREST;
                switch (_0x36bc5c[0]) {
                  case "FOREST":
                    _0x10765d = world.BIOME_FOREST;
                    break;
                  case "WINTER":
                    _0x10765d = world.BIOME_WINTER;
                    break;
                  case "DESERT":
                    _0x10765d = world.BIOME_DESERT;
                    break;
                  case "LAVA":
                    _0x10765d = world.BIOME_LAVA;
                    break;
                  case "DRAGON":
                    _0x10765d = world.BIOME_DRAGON;
                    break;
                }
                if (
                  _0xd5d4f0(
                    _0x10765d,
                    _0x36bc5c[1],
                    _0x36bc5c[2],
                    0,
                    (_0x3efea4 + 1) * 10
                  ) === 0
                ) {
                  break;
                }
              }
              if (_0x3efea4 !== world.custom_map.length) {
                continue;
              }
            }
          }
        }
      }
      break;
    }
    render_minimap();
    var _0x1c71a4 = [];
    for (var _0x4cf48a = 0; _0x4cf48a < world.nh; _0x4cf48a++) {
      _0x1c71a4[_0x4cf48a] = new Array(world.nw);
      for (var _0x5916e5 = 0; _0x5916e5 < world.nw; _0x5916e5++) {
        _0x1c71a4[_0x4cf48a][_0x5916e5] = 0;
      }
    }
    for (var _0x4cf48a = 0; _0x4cf48a < world.biomes.length; _0x4cf48a++) {
      var _0x36bc5c = world.biomes[_0x4cf48a],
        _0x415773 = _0x36bc5c.x2 / 100,
        _0x4b9613 = _0x36bc5c.y2 / 100;
      for (
        var _0x2f6a72 = _0x36bc5c.x1 / 100;
        _0x2f6a72 <= _0x415773;
        _0x2f6a72++
      ) {
        for (
          var _0x10c51f = _0x36bc5c.y1 / 100;
          _0x10c51f <= _0x4b9613;
          _0x10c51f++
        ) {
          _0x1c71a4[_0x10c51f][_0x2f6a72] = 1;
        }
      }
    }
    for (var _0x10c51f = 0; _0x10c51f < world.nh; _0x10c51f++) {
      for (var _0x2f6a72 = 0; _0x2f6a72 < world.nw; _0x2f6a72++) {
        if (_0x1c71a4[_0x10c51f][_0x2f6a72] === 0) {
          _0x497452(_0x1c71a4, _0x2f6a72, _0x10c51f);
        }
      }
    }
    MAP = {
      w: world.nw,
      h: world.nh,
      tiles: [],
    };
    for (var _0x4cf48a = 0; _0x4cf48a < world.nh; _0x4cf48a++) {
      MAP.tiles[_0x4cf48a] = [];
    }
    if (
      world.custom_map !== 0 &&
      world.custom_map.length > 0 &&
      world.custom_map[0].length > 3
    ) {
      for (
        var _0x3efea4 = 0;
        _0x3efea4 < world.custom_map.length;
        _0x3efea4++
      ) {
        var _0x3b3068 = world.custom_map[_0x3efea4];
        if (_0x3b3068[1] === "isl") {
          world.add_island(_0x3b3068[2], _0x3b3068[3], _0x3b3068[4]);
        }
      }
    } else {
      world.add_islands(world.islands);
    }
    if (
      world.custom_map !== 0 &&
      world.custom_map.length > 0 &&
      world.custom_map[0].length > 3
    ) {
      var _0x4110b3 = [];
      for (
        var _0x3efea4 = 0;
        _0x3efea4 < world.custom_map.length;
        _0x3efea4++
      ) {
        var _0x3b3068 = world.custom_map[_0x3efea4];
        if (_0x3b3068[0] !== 1) {
          continue;
        }
        if (_0x3b3068[1] === "r") {
          _0x2e8c0b(_0x3b3068[3], _0x3b3068[2], "wtb", 0, 1);
          _0x4110b3.push([_0x3b3068[3], _0x3b3068[2], _0x3b3068[4]]);
        } else {
          _0x2e8c0b(
            _0x3b3068[4],
            _0x3b3068[3],
            _0x3b3068[1],
            _0x3b3068[2],
            _0x3b3068[5]
          );
        }
      }
      _0x104633(0, _0x4110b3);
      _0x4110b3 = [];
    } else {
      for (var _0x4cf48a = 0; _0x4cf48a < world.biomes.length; _0x4cf48a++) {
        var _0x36bc5c = world.biomes[_0x4cf48a];
        if (world.mode === WORLD.MODE_LEGACY) {
          if (_0x36bc5c.t === world.BIOME_FOREST) {
            _0x5d4ded(_0x4cf48a, _0x36bc5c.w / 10000);
          }
        } else {
          if (_0x36bc5c.t === world.BIOME_FOREST) {
            _0x2ed7b6(_0x4cf48a, _0x36bc5c.w / 10000);
          }
          if (_0x36bc5c.t === world.BIOME_LAVA) {
            _0x46b5ac(_0x4cf48a, _0x36bc5c.w / 10000);
          }
          if (_0x36bc5c.t === world.BIOME_WINTER) {
            _0x10897e(_0x4cf48a, _0x36bc5c.w / 10000);
          }
          if (_0x36bc5c.t === world.BIOME_DESERT) {
            _0x57f992(_0x4cf48a, _0x36bc5c.w / 10000);
          }
          if (_0x36bc5c.t === world.BIOME_DRAGON) {
            _0x3a7686(_0x4cf48a);
          }
        }
      }
    }
    render_all_resources_minimap();
    world.map_wrapper(MAP);
  };
  function _0x3a7686(_0x19df9f) {
    for (var _0xada7d5 = 0; _0xada7d5 < 3; _0xada7d5++) {
      _0x1423c3(_0x19df9f, "s", _0xada7d5, 15);
    }
    for (var _0xada7d5 = 0; _0xada7d5 < 3; _0xada7d5++) {
      _0x1423c3(_0x19df9f, "a", _0xada7d5, 1);
    }
    for (var _0xada7d5 = 0; _0xada7d5 < 3; _0xada7d5++) {
      _0x1423c3(_0x19df9f, "d", _0xada7d5, 1);
    }
    _0x3c9865(_0x19df9f);
  }
  function _0x10897e(_0x46cadb, _0x32959a) {
    for (var _0x383a5d = 0; _0x383a5d < 3; _0x383a5d++) {
      _0x1423c3(_0x46cadb, "s", _0x383a5d, Math.floor(18 * _0x32959a));
    }
    for (var _0x383a5d = 0; _0x383a5d < 3; _0x383a5d++) {
      _0x1423c3(_0x46cadb, "f", _0x383a5d, Math.floor(24 * _0x32959a));
    }
    for (var _0x383a5d = 0; _0x383a5d < 3; _0x383a5d++) {
      _0x1423c3(
        _0x46cadb,
        "d",
        _0x383a5d,
        Math.max(1, Math.floor(2 * _0x32959a)),
        0.3
      );
    }
    for (var _0x383a5d = 0; _0x383a5d < 3; _0x383a5d++) {
      _0x1423c3(_0x46cadb, "g", _0x383a5d, Math.floor(6 * _0x32959a));
    }
    _0x3c9865(_0x46cadb);
  }
  function _0x57f992(_0x3a1bea, _0x8253a4) {
    for (var _0x498536 = 0; _0x498536 < 3; _0x498536++) {
      _0x1423c3(_0x3a1bea, "s", _0x498536, Math.floor(12 * _0x8253a4));
    }
    for (var _0x498536 = 0; _0x498536 < 3; _0x498536++) {
      _0x1423c3(
        _0x3a1bea,
        "m",
        _0x498536,
        Math.max(1, Math.floor(1 * _0x8253a4)),
        0.2
      );
    }
    _0x1423c3(_0x3a1bea, "c", 0, Math.floor(36 * _0x8253a4));
    var _0x347cac = [];
    _0x50b426(_0x3a1bea, _0x347cac);
    _0x104633(_0x3a1bea, _0x347cac);
    _0x347cac = [];
  }
  function _0x46b5ac(_0x137193, _0x37970b) {
    _0x36df08(80 * _0x37970b, _0x137193);
    for (var _0x35dc07 = 0; _0x35dc07 < 3; _0x35dc07++) {
      _0x1423c3(_0x137193, "s", _0x35dc07, Math.floor(12 * _0x37970b));
    }
    for (var _0x35dc07 = 0; _0x35dc07 < 3; _0x35dc07++) {
      _0x1423c3(_0x137193, "g", _0x35dc07, Math.floor(6 * _0x37970b));
    }
    for (var _0x35dc07 = 0; _0x35dc07 < 3; _0x35dc07++) {
      _0x1423c3(
        _0x137193,
        "re",
        _0x35dc07,
        Math.max(1, Math.floor(1 * _0x37970b)),
        0.2
      );
    }
    for (var _0x35dc07 = 0; _0x35dc07 < 3; _0x35dc07++) {
      _0x1423c3(
        _0x137193,
        "a",
        _0x35dc07,
        Math.max(1, Math.floor(2 * _0x37970b))
      );
    }
    _0x3c9865(_0x137193);
  }
  function _0x5d4ded(_0x3de628, _0x4f3638) {
    for (var _0x210b79 = 0; _0x210b79 < 6; _0x210b79++) {
      _0x1423c3(_0x3de628, "t", _0x210b79, Math.floor(80 * _0x4f3638));
    }
    for (var _0x210b79 = 0; _0x210b79 < 4; _0x210b79++) {
      _0x1423c3(_0x3de628, "b", _0x210b79, Math.floor(80 * _0x4f3638));
    }
    for (var _0x210b79 = 0; _0x210b79 < 3; _0x210b79++) {
      _0x1423c3(_0x3de628, "s", _0x210b79, Math.floor(50 * _0x4f3638));
    }
    var _0x26cb7e = [];
    for (var _0x210b79 = 0; _0x210b79 < 6; _0x210b79++) {
      _0x9860b9(_0x3de628, _0x26cb7e);
    }
    _0x104633(_0x3de628, _0x26cb7e);
    _0x26cb7e = [];
    _0x1423c3(_0x3de628, "p", 0, Math.floor(28 * _0x4f3638));
    for (var _0x210b79 = 0; _0x210b79 < 3; _0x210b79++) {
      _0x1423c3(_0x3de628, "g", _0x210b79, Math.floor(7 * _0x4f3638));
    }
    for (var _0x210b79 = 0; _0x210b79 < 3; _0x210b79++) {
      _0x1423c3(_0x3de628, "d", _0x210b79, Math.floor(2 * _0x4f3638));
    }
    for (var _0x210b79 = 0; _0x210b79 < 3; _0x210b79++) {
      _0x1423c3(_0x3de628, "a", _0x210b79, Math.floor(1 * _0x4f3638));
    }
    for (var _0x210b79 = 0; _0x210b79 < 3; _0x210b79++) {
      _0x1423c3(_0x3de628, "m", _0x210b79, Math.floor(1 * _0x4f3638));
    }
    _0x1423c3(_0x3de628, "a", 0, Math.floor(1 * _0x4f3638));
    _0x3c9865(_0x3de628);
  }
  function _0x2ed7b6(_0x477fc7, _0x24cb6e) {
    for (var _0x31b5bf = 0; _0x31b5bf < 6; _0x31b5bf++) {
      _0x1423c3(_0x477fc7, "t", _0x31b5bf, Math.floor(20 * _0x24cb6e));
    }
    for (var _0x31b5bf = 0; _0x31b5bf < 4; _0x31b5bf++) {
      _0x1423c3(_0x477fc7, "b", _0x31b5bf, Math.floor(20 * _0x24cb6e));
    }
    for (var _0x31b5bf = 0; _0x31b5bf < 3; _0x31b5bf++) {
      _0x1423c3(_0x477fc7, "s", _0x31b5bf, Math.floor(20 * _0x24cb6e));
    }
    var _0x2c7ff9 = [];
    _0x9860b9(_0x477fc7, _0x2c7ff9);
    _0x104633(_0x477fc7, _0x2c7ff9);
    _0x2c7ff9 = [];
    _0x1423c3(_0x477fc7, "p", 0, Math.floor(24 * _0x24cb6e));
    for (var _0x31b5bf = 0; _0x31b5bf < 3; _0x31b5bf++) {
      _0x1423c3(_0x477fc7, "g", _0x31b5bf, Math.floor(5 * _0x24cb6e));
    }
    if (world.mode === WORLD.MODE_ZOMBIES) {
      for (var _0x31b5bf = 0; _0x31b5bf < 3; _0x31b5bf++) {
        _0x1423c3(_0x477fc7, "d", _0x31b5bf, Math.floor(3 * _0x24cb6e));
      }
      for (var _0x31b5bf = 0; _0x31b5bf < 3; _0x31b5bf++) {
        _0x1423c3(_0x477fc7, "a", _0x31b5bf, Math.floor(2 * _0x24cb6e));
      }
    }
    _0x3c9865(_0x477fc7);
  }
  function _0x3c9865(_0x573723) {
    var _0xf8e3c = world.biomes[_0x573723];
    _0x2e8c0b(
      -3 + Math.floor(_0xf8e3c.y2 / 100),
      -1 + Math.floor(_0xf8e3c.x2 / 100),
      "s",
      0,
      0
    );
    _0x2e8c0b(
      3 + Math.floor(_0xf8e3c.y1 / 100),
      -1 + Math.floor(_0xf8e3c.x2 / 100),
      "s",
      0,
      0
    );
    _0x2e8c0b(
      -3 + Math.floor(_0xf8e3c.y2 / 100),
      1 + Math.floor(_0xf8e3c.x1 / 100),
      "s",
      0,
      0
    );
    _0x2e8c0b(
      3 + Math.floor(_0xf8e3c.y1 / 100),
      1 + Math.floor(_0xf8e3c.x1 / 100),
      "s",
      0,
      0
    );
  }
  function _0x1423c3(_0x3e1220, _0x20274f, _0xd6344b, _0x5edecf, _0x58593b) {
    var _0x538843 = world.biomes[_0x3e1220],
      _0x52653a = Math.floor(_0x538843.x1 / 100),
      _0x4b1c8a = Math.floor(_0x538843.y1 / 100),
      _0x3b5315 = Math.floor(_0x538843.w / 100),
      _0x6bc758 = Math.floor(_0x538843.h / 100);
    if (_0x58593b !== undefined) {
      _0x58593b = 1 - _0x58593b;
      _0x52653a += Math.floor((_0x3b5315 * _0x58593b) / 2);
      _0x4b1c8a += Math.floor((_0x6bc758 * _0x58593b) / 2);
      _0x3b5315 -= Math.floor(_0x3b5315 * _0x58593b);
      _0x6bc758 -= Math.floor(_0x6bc758 * _0x58593b);
    }
    var _0x5c850b = MAP.tiles;
    for (var _0x3e3286 = 0, _0x34b632 = 0; _0x3e3286 < _0x5edecf; _0x34b632++) {
      if (_0x34b632 > 50000) {
        break;
      }
      var _0x1babb0 = _0x4b1c8a + Math.floor(world.RNG.get() * _0x6bc758),
        _0x19cd19 = _0x52653a + Math.floor(world.RNG.get() * _0x3b5315),
        _0x5495ec = world.dist_from_biome(
          _0x3e1220,
          _0x19cd19 * 100 + 50,
          _0x1babb0 * 100 + 50
        );
      if (_0x5495ec < 400) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0][_0x19cd19 + 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0][_0x19cd19 - 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 + 1][_0x19cd19];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 - 1][_0x19cd19];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 + 1][_0x19cd19 - 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 - 1][_0x19cd19 + 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 + 1][_0x19cd19 + 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      var _0x537a9a = _0x5c850b[_0x1babb0 - 1][_0x19cd19 - 1];
      if (
        _0x537a9a !== undefined &&
        _0x537a9a[_0x20274f] !== undefined &&
        _0x537a9a[_0x20274f][_0xd6344b] !== undefined
      ) {
        continue;
      }
      _0x5c850b[_0x1babb0][_0x19cd19] === undefined &&
        (_0x2e8c0b(_0x1babb0, _0x19cd19, _0x20274f, _0xd6344b, 1), _0x3e3286++);
    }
  }
  function _0x9ae71f(_0x349c76, _0x23f86a) {
    return (
      _0x349c76 >= 0 &&
      _0x23f86a >= 0 &&
      _0x349c76 < world.nh &&
      _0x23f86a < world.nw
    );
  }
  function _0x498e0c(_0x2178f8, _0xcb0319, _0x4b605f, _0xf0b72f) {
    if (!_0x9ae71f(_0x2178f8, _0xcb0319)) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[_0x2178f8][_0xcb0319] === undefined) {
      tiles[_0x2178f8][_0xcb0319] = {};
    }
    if (tiles[_0x2178f8][_0xcb0319].r !== undefined) {
      return;
    }
    var _0xb614d6 = 0;
    if (
      _0x9ae71f(_0x2178f8 - 1, _0xcb0319) &&
      tiles[_0x2178f8 - 1][_0xcb0319] !== undefined &&
      tiles[_0x2178f8 - 1][_0xcb0319].wtb !== undefined
    ) {
      _0xb614d6 += 2;
    }
    if (
      _0x9ae71f(_0x2178f8, _0xcb0319 - 1) &&
      tiles[_0x2178f8][_0xcb0319 - 1] !== undefined &&
      tiles[_0x2178f8][_0xcb0319 - 1].wtb !== undefined
    ) {
      _0xb614d6 += 8;
    }
    if (
      _0x9ae71f(_0x2178f8, _0xcb0319 + 1) &&
      tiles[_0x2178f8][_0xcb0319 + 1] !== undefined &&
      tiles[_0x2178f8][_0xcb0319 + 1].wtb !== undefined
    ) {
      _0xb614d6 += 16;
    }
    if (
      _0x9ae71f(_0x2178f8 + 1, _0xcb0319) &&
      tiles[_0x2178f8 + 1][_0xcb0319] !== undefined &&
      tiles[_0x2178f8 + 1][_0xcb0319].wtb !== undefined
    ) {
      _0xb614d6 += 64;
    }
    if (
      _0x9ae71f(_0x2178f8 - 1, _0xcb0319 - 1) &&
      (_0xb614d6 & 10) === 10 &&
      tiles[_0x2178f8 - 1][_0xcb0319 - 1] !== undefined &&
      tiles[_0x2178f8 - 1][_0xcb0319 - 1].wtb !== undefined
    ) {
      _0xb614d6 += 1;
    }
    if (
      _0x9ae71f(_0x2178f8 - 1, _0xcb0319 + 1) &&
      (_0xb614d6 & 18) === 18 &&
      tiles[_0x2178f8 - 1][_0xcb0319 + 1] !== undefined &&
      tiles[_0x2178f8 - 1][_0xcb0319 + 1].wtb !== undefined
    ) {
      _0xb614d6 += 4;
    }
    if (
      _0x9ae71f(_0x2178f8 + 1, _0xcb0319 - 1) &&
      (_0xb614d6 & 72) === 72 &&
      tiles[_0x2178f8 + 1][_0xcb0319 - 1] !== undefined &&
      tiles[_0x2178f8 + 1][_0xcb0319 - 1].wtb !== undefined
    ) {
      _0xb614d6 += 32;
    }
    if (
      _0x9ae71f(_0x2178f8 + 1, _0xcb0319 + 1) &&
      (_0xb614d6 & 80) === 80 &&
      tiles[_0x2178f8 + 1][_0xcb0319 + 1] !== undefined &&
      tiles[_0x2178f8 + 1][_0xcb0319 + 1].wtb !== undefined
    ) {
      _0xb614d6 += 128;
    }
    tiles[_0x2178f8][_0xcb0319].r = {};
    tiles[_0x2178f8][_0xcb0319].r.river = _0xb614d6;
    tiles[_0x2178f8][_0xcb0319].r.current = _0xf0b72f;
    tiles[_0x2178f8][_0xcb0319].r.dist =
      world.dist_from_biome(
        _0x4b605f,
        _0xcb0319 * 100 + 50,
        _0x2178f8 * 100 + 50
      ) - 400;
    tiles[_0x2178f8][_0xcb0319].r.x = _0xcb0319 * 100 + 50;
    tiles[_0x2178f8][_0xcb0319].r.y = _0x2178f8 * 100 + 50;
  }
  function _0x2e8c0b(_0xd6a761, _0x322c78, _0x2f92d3, _0x40c82a, _0x19192f) {
    if (
      _0xd6a761 < 0 ||
      _0x322c78 < 0 ||
      _0xd6a761 >= world.nh ||
      _0x322c78 >= world.nw
    ) {
      return;
    }
    tiles = MAP.tiles;
    if (tiles[_0xd6a761][_0x322c78] === undefined) {
      tiles[_0xd6a761][_0x322c78] = {};
    }
    if (tiles[_0xd6a761][_0x322c78][_0x2f92d3] !== undefined) {
      return 0;
    }
    tiles[_0xd6a761][_0x322c78][_0x2f92d3] = [];
    tiles[_0xd6a761][_0x322c78][_0x2f92d3][_0x40c82a] = [
      {
        x: _0x322c78 * 100 + 50,
        y: _0xd6a761 * 100 + 50,
      },
    ];
    if (_0x19192f === 1) {
      add_resource_minimap(_0x2f92d3, _0x40c82a, _0xd6a761, _0x322c78);
    }
    return 1;
  }
  this.render_single_resource = _0x2e8c0b;
  function _0x181a4b(_0x44d943, _0x4457b4, _0x2502b6) {
    if (_0x44d943[_0x4457b4]) {
      for (k = 0; k < _0x44d943[_0x4457b4].length; k++) {
        if (!_0x44d943[_0x4457b4][k]) {
          continue;
        }
        for (l = 0; l < _0x44d943[_0x4457b4][k].length; l++) {
          _0x44d943[_0x4457b4][k][l].hit = _0x2502b6;
          _0x44d943[_0x4457b4][k][l].update = false;
          _0x44d943[_0x4457b4][k][l].time = 0;
          _0x44d943[_0x4457b4][k][l].angle = 0;
        }
      }
    }
  }
  this.map_wrapper = function (_0x1010b0) {
    for (var _0x4bd06d = 0; _0x4bd06d < this.nh; _0x4bd06d++) {
      for (var _0x1fc391 = 0; _0x1fc391 < this.nw; _0x1fc391++) {
        if (!_0x1010b0.tiles[_0x4bd06d]) {
          _0x1010b0.tiles[_0x4bd06d] = [];
        }
        if (!_0x1010b0.tiles[_0x4bd06d][_0x1fc391]) {
          _0x1010b0.tiles[_0x4bd06d][_0x1fc391] = [];
          continue;
        }
        var _0xdc90dc = _0x1010b0.tiles[_0x4bd06d][_0x1fc391];
        if (_0xdc90dc.de && _0xdc90dc.de.length > 0) {
          for (
            var _0x306261 = 0;
            _0x306261 < _0xdc90dc.de.length;
            _0x306261++
          ) {
            if (_0xdc90dc.de[_0x306261] && _0xdc90dc.de[_0x306261].length > 0) {
              _0xdc90dc.de = _0xdc90dc.de[_0x306261][0];
              if (_0x306261 >= 41 && _0x306261 <= 49) {
                _0xdc90dc.de.scale = 3;
                var _0x6d0d55 = Math.floor(Math.random() * 3 + 1);
                _0xdc90dc.de.p = [];
                for (var _0x30cbce = 0; _0x30cbce < _0x6d0d55; _0x30cbce++) {
                  _0xdc90dc.de.p.push({
                    x: Math.random() * 120 - 60,
                    y: Math.random() * 120 - 60,
                    angle: Math.random() * Math.PI * 2,
                    _id: 41 + Math.floor(Math.random() * 9),
                  });
                }
              } else {
                if (_0x306261 >= 19 && _0x306261 <= 26) {
                  _0xdc90dc.de.scale = 3;
                  var _0x6d0d55 = Math.floor(Math.random() * 3 + 1);
                  _0xdc90dc.de.p = [];
                  for (var _0x30cbce = 0; _0x30cbce < _0x6d0d55; _0x30cbce++) {
                    _0xdc90dc.de.p.push({
                      x: Math.random() * 120 - 60,
                      y: Math.random() * 120 - 60,
                      angle: Math.random() * Math.PI * 2,
                      _id: 19 + Math.floor(Math.random() * 8),
                    });
                  }
                } else {
                  _0x306261 <= 15 || (_0x306261 >= 27 && _0x306261 <= 40)
                    ? ((_0xdc90dc.de.angle = 0),
                      (_0xdc90dc.de.scale = 2),
                      (_0xdc90dc.de["_id"] = _0x306261))
                    : ((_0xdc90dc.de.angle = Math.random() * Math.PI * 2),
                      (_0xdc90dc.de.scale = 1),
                      (_0xdc90dc.de["_id"] = _0x306261));
                }
              }
            }
          }
        }
        _0x181a4b(
          _0xdc90dc,
          "p",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "t",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "s",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "g",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "d",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "b",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "f",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "sw",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "gw",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "dw",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "a",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "cs",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "plm",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "re",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "c",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
        _0x181a4b(
          _0xdc90dc,
          "m",
          new Utils.LinearAnimation(false, 1, 1, 0, 10, 10)
        );
      }
    }
  };
  this.time = SPRITE.DAY;
  this.clock = {
    translate: {
      x: 0,
      y: 0,
    },
    init: 0,
    hour: 0,
    now: 0,
  };
  this.delete_all_units = function () {
    this.fast_units = [];
    this.units[ITEMS.PLAYERS] = [];
    this.units[ITEMS.WORKBENCH] = [];
    this.units[ITEMS.FIRE] = [];
    this.units[ITEMS.BIG_FIRE] = [];
    this.units[ITEMS.SEED] = [];
    this.units[ITEMS.SPIKE] = [];
    this.units[ITEMS.STONE_SPIKE] = [];
    this.units[ITEMS.GOLD_SPIKE] = [];
    this.units[ITEMS.DIAMOND_SPIKE] = [];
    this.units[ITEMS.AMETHYST_SPIKE] = [];
    this.units[ITEMS.REIDITE_SPIKE] = [];
    this.units[ITEMS.BRIDGE] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.ROOF] = [];
    this.units[ITEMS.PLOT] = [];
    this.units[ITEMS.WHEAT_SEED] = [];
    this.units[ITEMS.ALOE_VERA_SEED] = [];
    this.units[ITEMS.PUMPKIN_SEED] = [];
    this.units[ITEMS.TOMATO_SEED] = [];
    this.units[ITEMS.CARROT_SEED] = [];
    this.units[ITEMS.WATERMELON_SEED] = [];
    this.units[ITEMS.GARLIC_SEED] = [];
    this.units[ITEMS.THORNBUSH_SEED] = [];
    this.units[ITEMS.WINDMILL] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_STONE] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_GOLD] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_DIAMOND] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_AMETHYST] = [];
    this.units[ITEMS.EXTRACTOR_MACHINE_REIDITE] = [];
    this.units[ITEMS.WELL] = [];
    this.units[ITEMS.WALL] = [];
    this.units[ITEMS.STONE_WALL] = [];
    this.units[ITEMS.GOLD_WALL] = [];
    this.units[ITEMS.DIAMOND_WALL] = [];
    this.units[ITEMS.AMETHYST_WALL] = [];
    this.units[ITEMS.REIDITE_WALL] = [];
    this.units[ITEMS.BED] = [];
    this.units[ITEMS.WOOD_DOOR] = [];
    this.units[ITEMS.STONE_DOOR] = [];
    this.units[ITEMS.GOLD_DOOR] = [];
    this.units[ITEMS.DIAMOND_DOOR] = [];
    this.units[ITEMS.AMETHYST_DOOR] = [];
    this.units[ITEMS.REIDITE_DOOR] = [];
    this.units[ITEMS.WOOD_DOOR_SPIKE] = [];
    this.units[ITEMS.STONE_DOOR_SPIKE] = [];
    this.units[ITEMS.GOLD_DOOR_SPIKE] = [];
    this.units[ITEMS.DIAMOND_DOOR_SPIKE] = [];
    this.units[ITEMS.AMETHYST_DOOR_SPIKE] = [];
    this.units[ITEMS.REIDITE_DOOR_SPIKE] = [];
    this.units[ITEMS.FURNACE] = [];
    this.units[ITEMS.TOTEM] = [];
    this.units[ITEMS.WOOD_TOWER] = [];
    this.units[ITEMS.CHEST] = [];
    this.units[ITEMS.RESURRECTION] = [];
    this.units[ITEMS.EMERALD_MACHINE] = [];
    this.units[ITEMS.FRUIT] = [];
    this.units[ITEMS.RABBIT] = [];
    this.units[ITEMS.WOLF] = [];
    this.units[ITEMS.CRAB] = [];
    this.units[ITEMS.BOAR] = [];
    this.units[ITEMS.BABY_MAMMOTH] = [];
    this.units[ITEMS.CRAB_BOSS] = [];
    this.units[ITEMS.BABY_DRAGON] = [];
    this.units[ITEMS.BABY_LAVA] = [];
    this.units[ITEMS.HAWK] = [];
    this.units[ITEMS.PIRANHA] = [];
    this.units[ITEMS.KRAKEN] = [];
    this.units[ITEMS.FOX] = [];
    this.units[ITEMS.PENGUIN] = [];
    this.units[ITEMS.SPELL] = [];
    this.units[ITEMS.FIREFLY] = [];
    this.units[ITEMS.BEAR] = [];
    this.units[ITEMS.MAMMOTH] = [];
    this.units[ITEMS.VULTURE] = [];
    this.units[ITEMS.SAND_WORM] = [];
    this.units[ITEMS.DRAGON] = [];
    this.units[ITEMS.LAVA_DRAGON] = [];
    this.units[ITEMS.FLAME] = [];
    this.units[ITEMS.WHEAT_MOB] = [];
    this.units[ITEMS.ALOE_VERA_MOB] = [];
    this.units[ITEMS.PUMPKIN_MOB] = [];
    this.units[ITEMS.GARLIC_MOB] = [];
    this.units[ITEMS.THORNBUSH_MOB] = [];
    this.units[ITEMS.TREASURE_CHEST] = [];
    this.units[ITEMS.DEAD_BOX] = [];
    this.units[ITEMS.CRATE] = [];
    this.units[ITEMS.BREAD_OVEN] = [];
    this.units[ITEMS.SIGN] = [];
    this.units[ITEMS.SPIDER] = [];
    this.units[ITEMS.GIFT] = [];
    this.units[ITEMS.GARLAND] = [];
    return;
  };
  this.delete_units = function (_0x1ad7cc) {
    if (!this.fast_units[_0x1ad7cc]) {
      return;
    }
    type = this.fast_units[_0x1ad7cc].type;
    this.fast_units[_0x1ad7cc] = null;
    var _0x3de3b2 = this.units[type];
    for (var _0x517d80 = 0; _0x517d80 < _0x3de3b2.length; _0x517d80++) {
      if (_0x3de3b2[_0x517d80].uid == _0x1ad7cc) {
        _0x3de3b2.splice(_0x517d80, 1);
        return;
      }
    }
    return;
  };
  this.find_tower = function (_0x1e01ee, _0x27f06b) {
    for (
      var _0x3e24e8 = 0;
      _0x3e24e8 < this.units[ITEMS.WOOD_TOWER].length;
      _0x3e24e8++
    ) {
      var _0x19a956 = this.units[ITEMS.WOOD_TOWER][_0x3e24e8];
      if (
        Math.floor(_0x19a956.x / 100) === _0x27f06b &&
        Math.floor(_0x19a956.y / 100) === _0x1e01ee
      ) {
        return 1;
      }
    }
    return 0;
  };
  this.find_bridge = function (_0x55db22, _0x417182) {
    for (
      var _0x5f8422 = 0;
      _0x5f8422 < this.units[ITEMS.BRIDGE].length;
      _0x5f8422++
    ) {
      var _0x1e3d05 = this.units[ITEMS.BRIDGE][_0x5f8422];
      if (
        Math.floor(_0x1e3d05.x / 100) == _0x55db22 &&
        Math.floor(_0x1e3d05.y / 100) == _0x417182
      ) {
        return true;
      }
    }
    return false;
  };
  this.move_units = function (_0x238347) {
    for (var _0x5c5fee = 0; _0x5c5fee < _0x238347.length; _0x5c5fee++) {
      b = _0x238347[_0x5c5fee];
      if (b.angle != b.nangle) {
        var _0x1b0bbb = Math.PI * 2;
        b.angle = (b.angle + _0x1b0bbb) % _0x1b0bbb;
        b.nangle = (b.nangle + _0x1b0bbb) % _0x1b0bbb;
        if (b.angle != b.nangle) {
          var _0x8a04fc = b.nangle - b.angle;
          var _0x3f3b6d = Math.abs(_0x8a04fc);
          if (_0x3f3b6d > Math.PI) {
            _0x3f3b6d = Math.PI * 2 - _0x3f3b6d;
          }
          var _0x451876 = 3 * (_0x3f3b6d / Math.PI) * WORLD.ROTATE * delta;
          if (_0x8a04fc > Math.PI) {
            b.angle -= _0x451876;
          } else {
            if (_0x8a04fc < -Math.PI) {
              b.angle += _0x451876;
            } else {
              if (_0x8a04fc < 0) {
                b.angle -= _0x451876;
              } else {
                b.angle += _0x451876;
              }
            }
          }
          b.angle = (b.angle + _0x1b0bbb) % _0x1b0bbb;
          if (Math.abs(b.angle - b.nangle) < _0x451876) {
            b.angle = b.nangle;
          }
        }
      }
      var _0x48a759 = Math.floor(b.r.y / 100),
        _0x2e9b8a = Math.floor(b.r.x / 100);
      if (b.x != b.r.x || b.y != b.r.y) {
        if (b.action & STATE.IDLE) {
          b.action -= STATE.IDLE;
        }
        b.action |= STATE.WALK;
        var _0x4938a7 = Utils.get_std_angle(b, b.r) + Math.PI;
        var _0x530ab1 = delta * b.speed;
        var _0x200cc4 = Utils.build_vector(_0x530ab1, _0x4938a7);
        if (Utils.norm(_0x200cc4) < Utils.norm(Utils.get_vector(b, b.r))) {
          Utils.add_vector(b, _0x200cc4);
        } else {
          if (b.action & STATE.WALK) {
            b.action -= STATE.WALK;
          }
          b.action |= STATE.IDLE;
          Utils.copy_vector(b.r, b);
        }
      }
      if (b.ghost) {
        var _0x43ddce = b.bubbles,
          _0x338ed0 = _0x43ddce.length;
        if (
          _0x338ed0 === 0 ||
          (_0x338ed0 < SPRITE.GHOST_BUBBLES &&
            _0x43ddce[_0x338ed0 - 1].life < 0.95)
        ) {
          _0x43ddce.push({
            id: Math.floor(Math.random() * sprite[SPRITE.BUBBLES][0].length),
            x: Math.floor(b.x + Math.random() * 80 - 40),
            y: Math.floor(b.y + Math.random() * 80 - 40),
            life: 1,
          });
        }
        for (var _0x49f6ec = 0; _0x49f6ec < _0x338ed0; _0x49f6ec++) {
          _0x43ddce[_0x49f6ec].life = Math.max(
            0,
            _0x43ddce[_0x49f6ec].life - delta
          );
        }
        for (var _0x49f6ec = 0; _0x49f6ec < _0x338ed0; _0x49f6ec++) {
          if (_0x43ddce[_0x49f6ec].life === 0) {
            _0x43ddce.splice(_0x49f6ec, 1);
            break;
          }
        }
      }
      var _0x4c3348 = 0;
      if (b.move_effect && ui.quality) {
        var _0x39b6d8 = b.swim;
        var _0x338ed0 = _0x39b6d8.length;
        if (
          b.dist_water > 0 &&
          b.vehicle !== INV.BABY_DRAGON &&
          b.vehicle !== INV.BABY_LAVA &&
          b.vehicle !== INV.PLANE &&
          b.vehicle !== INV.HAWK &&
          b.vehicle !== INV.NIMBUS &&
          !b.ghost
        ) {
          _0x4c3348 = 1;
          if (
            _0x338ed0 === 0 ||
            Utils.dist(_0x39b6d8[_0x338ed0 - 1], b) > SPRITE.SWIM_SPACE
          ) {
            var _0x256630 = -b.angle;
            var _0x333a71 = Math.sin(_0x256630) * 45 * scale;
            var _0x178e22 = Math.cos(_0x256630) * 45 * scale;
            _0x39b6d8.push({
              x: b.x + _0x333a71,
              y: b.y + _0x178e22,
              r: 8,
              alpha: 0.8,
            });
            _0x39b6d8.push({
              x: b.x - _0x333a71,
              y: b.y - _0x178e22,
              r: 8,
              alpha: 0.8,
            });
            _0x39b6d8.push({
              x: b.x,
              y: b.y,
              r: 24,
              alpha: 1,
            });
          }
        }
        for (var _0x49f6ec = 0; _0x49f6ec < _0x338ed0; _0x49f6ec++) {
          _0x39b6d8[_0x49f6ec].alpha = Math.max(
            0,
            _0x39b6d8[_0x49f6ec].alpha - delta / 2.2
          );
          _0x39b6d8[_0x49f6ec].r += delta * 20;
        }
        if (_0x39b6d8.length > 0 && _0x39b6d8[0].alpha === 0) {
          _0x39b6d8.splice(0, 1);
        }
        var _0x2b588d = b.foot;
        var _0x338ed0 = _0x2b588d.length;
        var _0x24f9c2 = -1;
        var _0x117e27 = Math.max(0, Math.sign(b.dist_sand));
        var _0x5b1f90 = Math.max(0, Math.sign(b.dist_winter));
        var _0x88e157 = Math.max(0, Math.sign(b.dist_desert));
        var _0x24b5b3 = Math.max(0, Math.sign(b.dist_lava));
        var _0x52abf1 = Math.max(0, Math.sign(b.dist_dragon));
        if (b.dist_sand > 0 || b.dist_desert > 0) {
          var _0x24f9c2 = SPRITE.SAND_STEP;
        } else {
          if (b.dist_dragon > 0) {
            var _0x24f9c2 = SPRITE.CAVE_STEP;
          } else {
            if (b.dist_winter > 0) {
              var _0x24f9c2 = SPRITE.SNOW_STEP;
            } else {
              if (b.dist_lava > 0) {
                var _0x24f9c2 = SPRITE.LAVA_STEP;
              }
            }
          }
        }
        if (
          b.vehicle === INV.MOUNT_BOAR &&
          (_0x117e27 | _0x5b1f90 | _0x24b5b3 | _0x52abf1) === 1
        ) {
          _0x24f9c2 = SPRITE.BOAR_STEP;
          var _0x12a6c1 = b.vehicle_fx2 - Math.PI / 2;
          var _0xe09497 = 15;
          var _0x2f8473 = 11;
          var _0x5bc70b = SPRITE.STEP_SPACE;
        } else {
          if (
            b.vehicle === INV.BABY_MAMMOTH &&
            (_0x117e27 | _0x5b1f90 | _0x24b5b3 | _0x52abf1) === 1
          ) {
            _0x24f9c2 = SPRITE.BABY_MAMMOTH_STEP;
            var _0x12a6c1 = b.vehicle_fx2 - Math.PI / 2;
            var _0xe09497 = 21;
            var _0x2f8473 = 16;
            var _0x5bc70b = SPRITE.STEP_SPACE;
          } else {
            if (
              b.vehicle === INV.CRAB_BOSS &&
              (_0x117e27 | _0x5b1f90 | _0x24b5b3 | _0x52abf1) === 1
            ) {
              _0x24f9c2 = SPRITE.CRAB_STEP;
              var _0x12a6c1 = b.vehicle_fx2 - Math.PI / 2;
              var _0x13957c = Math.random() * 50;
              var _0xe09497 = 10 + _0x13957c;
              var _0x2f8473 = 0 + _0x13957c;
              var _0x5bc70b = SPRITE.STEP_SPACE * 0.9;
            } else {
              var _0x12a6c1 = b.angle,
                _0xe09497 = 15,
                _0x2f8473 = 11,
                _0x5bc70b = SPRITE.STEP_SPACE;
            }
          }
        }
        if (
          b.vehicle === INV.BABY_DRAGON ||
          b.vehicle === INV.BABY_LAVA ||
          b.vehicle === INV.NIMBUS ||
          b.vehicle === INV.HAWK ||
          b.vehicle === INV.PLANE ||
          b.ghost
        ) {
        } else {
          if (b.vehicle === INV.SLED) {
            if (
              _0x338ed0 === 0 ||
              Utils.dist(_0x2b588d[_0x338ed0 - 1], b) > SPRITE.TRAIL_SPACE
            ) {
              _0x2b588d.push({
                x: b.x,
                y: b.y,
                angle: b.vehicle_fx2,
                alpha: 1,
                id: SPRITE.SLED_WAVE,
              });
            }
          } else {
            if (_0x24f9c2 != -1 && _0x4c3348 === 0) {
              if (
                _0x338ed0 === 0 ||
                Utils.dist(_0x2b588d[_0x338ed0 - 1], b) > _0x5bc70b
              ) {
                b.id_foot++;
                if (Math.abs(b.x - b.r.x) > 1 && Math.abs(b.y - b.r.y) > 1) {
                  if (
                    (b.r.x > b.x && b.r.y < b.y) ||
                    (b.r.x < b.x && b.r.y > b.y)
                  ) {
                    if (b.id_foot % 2) {
                      var _0x333a71 = -_0x2f8473 * scale,
                        _0x178e22 = -_0x2f8473 * scale;
                    } else {
                      var _0x178e22 = _0x2f8473 * scale,
                        _0x333a71 = _0x2f8473 * scale;
                    }
                  } else {
                    if (b.id_foot % 2) {
                      var _0x333a71 = _0x2f8473 * scale,
                        _0x178e22 = -_0x2f8473 * scale;
                    } else {
                      var _0x178e22 = _0x2f8473 * scale,
                        _0x333a71 = -_0x2f8473 * scale;
                    }
                  }
                } else {
                  if (b.id_foot % 2) {
                    var _0x333a71 = Math.sin(_0x12a6c1) * _0xe09497 * scale,
                      _0x178e22 = Math.cos(_0x12a6c1) * _0xe09497 * scale;
                  } else {
                    var _0x333a71 = -Math.sin(_0x12a6c1) * _0xe09497 * scale,
                      _0x178e22 = -Math.cos(_0x12a6c1) * _0xe09497 * scale;
                  }
                }
                _0x2b588d.push({
                  x: b.x + _0x333a71,
                  y: b.y + _0x178e22,
                  angle: _0x12a6c1 + Math.PI / 2,
                  alpha: 1,
                  id: _0x24f9c2,
                });
              }
            }
          }
        }
        for (var _0x49f6ec = 0; _0x49f6ec < _0x338ed0; _0x49f6ec++) {
          if (_0x2b588d[_0x49f6ec].id === SPRITE.SLED_WAVE) {
            _0x2b588d[_0x49f6ec].alpha = Math.max(
              0,
              _0x2b588d[_0x49f6ec].alpha - delta * 1.5
            );
          } else {
            _0x2b588d[_0x49f6ec].alpha = Math.max(
              0,
              _0x2b588d[_0x49f6ec].alpha - delta / 2.85
            );
          }
        }
        if (_0x2b588d.length > 0 && _0x2b588d[0].alpha === 0) {
          _0x2b588d.splice(0, 1);
        }
      }
    }
  };
  this.update = function () {
    this.move_units(this.units[ITEMS.PLAYERS]);
    this.move_units(this.units[ITEMS.RABBIT]);
    this.move_units(this.units[ITEMS.WOLF]);
    this.move_units(this.units[ITEMS.CRAB]);
    this.move_units(this.units[ITEMS.BOAR]);
    this.move_units(this.units[ITEMS.BABY_MAMMOTH]);
    this.move_units(this.units[ITEMS.CRAB_BOSS]);
    this.move_units(this.units[ITEMS.BABY_DRAGON]);
    this.move_units(this.units[ITEMS.BABY_LAVA]);
    this.move_units(this.units[ITEMS.HAWK]);
    this.move_units(this.units[ITEMS.SPIDER]);
    this.move_units(this.units[ITEMS.FOX]);
    this.move_units(this.units[ITEMS.PENGUIN]);
    this.move_units(this.units[ITEMS.SPELL]);
    this.move_units(this.units[ITEMS.FIREFLY]);
    this.move_units(this.units[ITEMS.BEAR]);
    this.move_units(this.units[ITEMS.MAMMOTH]);
    this.move_units(this.units[ITEMS.VULTURE]);
    this.move_units(this.units[ITEMS.SAND_WORM]);
    this.move_units(this.units[ITEMS.DRAGON]);
    this.move_units(this.units[ITEMS.FLAME]);
    this.move_units(this.units[ITEMS.PIRANHA]);
    this.move_units(this.units[ITEMS.KRAKEN]);
    this.move_units(this.units[ITEMS.LAVA_DRAGON]);
  };
  this.breath = [];
  this.breath[SPRITE.LAKE] = new Utils.LinearAnimation(
    false,
    1,
    1.05,
    1,
    0.008,
    0.008
  );
  this.breath[SPRITE.LAKE_DEEP] = new Utils.LinearAnimation(
    false,
    1,
    1.08,
    1,
    0.006,
    0.006
  );
  this.breath[SPRITE.WAVE_ONE] = new Utils.LinearAnimation(
    false,
    1,
    1.02,
    1,
    0.008,
    0.008
  );
  this.breath[SPRITE.WAVE_TWO] = new Utils.LinearAnimation(
    false,
    1,
    1.08,
    1,
    0.006,
    0.006
  );
  this.lava = [];
  this.lava[0] = new Utils.LinearAnimation(false, 0.1, 1, 0, 0.6, 0.6);
  this.lava[1] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
  this.lava[2] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
  this.lava[3] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[4] = new Utils.LinearAnimation(false, 0.3, 1, 0, 0.6, 0.6);
  this.lava[5] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[6] = new Utils.LinearAnimation(false, 0.5, 1, 0, 0.6, 0.6);
  this.lava[7] = new Utils.LinearAnimation(false, 0.9, 1, 0, 0.6, 0.6);
  this.lava[8] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
  this.lava[9] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
  this.lava[10] = new Utils.LinearAnimation(false, 0.6, 1, 0, 0.6, 0.6);
  this.lava[11] = new Utils.LinearAnimation(false, 0.4, 1, 0, 0.6, 0.6);
  this.lava[12] = new Utils.LinearAnimation(false, 0.8, 1, 0, 0.6, 0.6);
  this.lava[13] = new Utils.LinearAnimation(false, 0.2, 1, 0, 0.6, 0.6);
  this.lava[14] = new Utils.LinearAnimation(false, 0.7, 1, 0, 0.6, 0.6);
}
function Flakes(_0x31dfc4, _0x5361df, _0xe35f18, _0x54b714) {
  this.id = _0x31dfc4;
  this.speed = (_0x31dfc4 + 5) * 8;
  this.life = canw / 1366;
  this.x = _0x5361df;
  this.y = _0xe35f18;
  this.c = Math.cos(_0x54b714);
  this.s = Math.sin(_0x54b714);
  this.alpha = 0;
}
mycyph1 = 1;
function User() {
  this.init = function () {};
  this.resurrection = {
    pid: 1,
    iid: 1,
    open: false,
  };
  this.well = {
    pid: 1,
    iid: -1,
    open: false,
  };
  this.windmill = {
    amount_wheat: 0,
    amount_flour: 0,
    pid: 1,
    iid: -1,
    open: false,
  };
  this.extractor = {
    amount_wood: 0,
    amount_mineral: 0,
    type: 0,
    mineral: 0,
    pid: 1,
    iid: -1,
    open: false,
  };
  this.bread_oven = {
    amount_wood: 0,
    amount_bread: 0,
    amount_flour: 0,
    pid: 1,
    iid: -1,
    open: false,
  };
  this.sign = {
    iid: -1,
    open: false,
  };
  this.furnace = {
    amount: 0,
    pid: 1,
    iid: -1,
    open: false,
  };
  this.ghost = {
    enabled: false,
    delay: -1,
    label: false,
    now: -1,
    draw: draw_alert_ghost,
  };
  this.chest = {
    id: -1,
    amount: 0,
    pid: 1,
    iid: -1,
    open: false,
    lock: false,
    locked: false,
    lockpick: false,
    padlock: false,
  };
  this.alive = true;
  this.reconnect = {
    enabled: false,
    rotate: 0,
  };
  this.key = Utils.gup("key", window.location.href);
  var e = Utils.gup("egg", window.location.href);
  if (e) {
    ui.skin = parseInt(e);
  }
  this.beta =
    0 === window.location.href.indexOf("http://starve.io/beta") ? 1 : 0;
  if (this.key && this.beta) {
    Cookies.set("starve_beta", this.key);
  } else {
    if (this.beta) {
      this.key = Cookies.get("starve_beta");
    }
  }
  this.token = Cookies.get("starve_token")
    ? Cookies.get("starve_token")
    : Utils.generate_token(CLIENT.TOKEN_LEN);
  window.baguette();
  var _0x5134b3 = window.kot2;
  this.token = _0x5134b3.substring(0, 6) + this.token.substring(6);
  this.token_id = Cookies.get("starve_token_id")
    ? Cookies.get("starve_token_id")
    : "";
  this.id = 0;
  this.uid = 0;
  this.day = 0;
  this.die = {
    howdie: "",
    score: 0,
    bank: 0,
    kill: 0,
  };
  this.account = {
    connected: 0,
    last: new Date().getTime(),
  };
  this.team = [];
  this.in_team = function (e) {
    for (var i = 0; i < this.team.length; i++) {
      if (this.team[i] == e) {
        return true;
      }
    }
    return false;
  };
  this.shop = {
    delay: 0,
    time: 0,
    value: 0,
    open: false,
    draw: function () {
      if (this.open) {
        var _0x2337f6 = new Date().getTime();
        this.time = Math.floor((_0x2337f6 - this.delay) / 1000);
        this.time < 60
          ? game.shop.button.draw(ctx)
          : ((document.getElementById("shop_starterkit").style.display =
              "none"),
            (this.open = false));
      }
    },
  };
  this.totem = {
    id: -1,
    pid: -1,
    lock: 0,
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 0.03333333333333333, 1),
    wait: false,
  };
  this.helmet = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 0.2, 1),
    wait: false,
  };
  this.build = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
    wait: false,
  };
  this.weapon = {
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 0.1, 1),
    wait: false,
  };
  this.cam = new Utils.Ease2d(
    Utils.ease_out_quad,
    0,
    0.4,
    0,
    0,
    canw2,
    canh2,
    canw2,
    canh2
  );
  this.cam.delay = 0;
  this.cam.forcedDelay = 0;
  this.cam.update = function () {
    if (this.forcedDelay > 0) {
      this.forcedDelay -= delta;
      return;
    }
    var _0x3f139b = world.fast_units[user.uid];
    if (_0x3f139b) {
      this.delay = 0;
      var _0x93e716 = Math.max(
          Math.min(canw2 - _0x3f139b.x, -2),
          -world.w + 2 + canw
        ),
        _0x1f2dc9 = Math.max(
          Math.min(canh2 - _0x3f139b.y, -2),
          -world.h + 2 + canh
        );
      this.ease({
        x: _0x93e716,
        y: _0x1f2dc9,
      });
    } else {
      this.delay += delta;
      if (this.delay > 3) {
        this.delay = 0;
        if (!user.reconnect.enabled) {
          client.get_focus();
        }
      }
    }
  };
  this.cam.w = screen.width;
  this.cam.h = screen.height;
  this.cam.rw = this.cam.w;
  this.cam.rh = this.cam.h;
  this.cam.rx = 0;
  this.cam.ry = 0;
  this.cam.rdw = 0;
  this.cam.rdh = 0;
  this.cam.change = function (_0x553d91, _0x565432) {
    this.x = -Math.min(
      Math.max(-world.dw * 2, _0x553d91 - world.dw - this.rw / 2),
      world.w - this.rw
    );
    this.y = -Math.min(
      Math.max(-world.dh * 2, _0x565432 - (world.dh + this.rh) / 2),
      world.h - this.rh + world.dh
    );
    this.ex = this.x;
    this.ey = this.y;
  };
  this.control = {
    angle: 0,
    timeout: 0,
    previous: 0,
    mouse: 0,
    attack: 0,
    update: function () {
      var t = world.fast_units[user.uid];
      if (t) {
        var e = {
          x: user.cam.x + t.x,
          y: user.cam.y + t.y,
        };
      } else {
        var e = canm;
      }

      var a;
      if (Settings.Aimbot.e && Settings.Aimbot.a != null)
      {
        a = Settings.Aimbot.a;
        t.nangle = Settings.Aimbot.a;
      } else {
        a = Utils.get_std_angle(mouse.pos, e);
      }

      var i = false;
      this.mouse += delta;
      if (!mouse.state && t && !(t.action & STATE.ATTACK) && this.mouse > CLIENT.ATTACK) {
        this.attack = 1;
        i = true;
        this.mouse = 0;
        client.send_attack(a);
      }
      if (t && Settings.Aimbot.a === null) {
        t.angle = a;
        t.nangle = a;
      }
      if (!i) {
        this.timeout += delta;
        if (this.timeout > CLIENT.ROTATE) {
          this.timeout = 0;
          if (Math.abs(this.angle - a) > 0.005) {
            client.send_angle(a);
            if (Settings.Aimbot.a === null) {
              this.angle = a;
            }
          }
        }
      }
      if (user.chat.open) {
        return;
      }
      if (user.terminal.open) {
        return;
      }
      var _0x45c02f = 0;
      var _0x31d606 = keyboard.is_left();
      if (_0x31d606) {
        _0x45c02f |= 1;
      }
      var _0x1be7cb = keyboard.is_right();
      if (_0x1be7cb) {
        _0x45c02f |= 2;
      }
      var _0x407833 = keyboard.is_bottom();
      if (_0x407833) {
        _0x45c02f |= 4;
      }
      var _0x498d6f = keyboard.is_top();
      if (_0x498d6f) {
        _0x45c02f |= 8;
      }
      if (this.previous != _0x45c02f) {
        client.send_move(_0x45c02f);
      }
      this.previous = _0x45c02f;
    },
  };
  this.gauges = {
    c: 1,
    l: 1,
    realhp: 200,
    h: 1,
    t: 1,
    o: 1,
    wa: 1,
    warn_cold: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_life: new Utils.LinearAnimation(true, 0, 1, 0, 2, 2),
    warn_hunger: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_thirst: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_oxygen: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    warn_warm: new Utils.LinearAnimation(true, 0, 1, 0, 3, 3),
    cold: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    life: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    hunger: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    thirst: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    oxygen: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    warm: new Utils.Ease(Utils.ease_out_quad, 0, 1, 0, 0, 1),
    update: function () {
      this.warn_cold.update();
      this.warn_life.update();
      this.warn_hunger.update();
      this.warn_thirst.update();
      this.warn_oxygen.update();
      this.warn_warm.update();
      this.cold.ease(this.c);
      this.life.ease(this.l);
      this.hunger.ease(this.h);
      this.thirst.ease(this.t);
      this.oxygen.ease(this.o);
      this.warm.ease(this.wa);
    },
  };
  this.bigmap = false;
  this.spectator = false;
  this.zombie = false;
  this.vampire = false;
  this.inv = {
    max: WORLD.WITHOUT_BAG,
    bonus: 0,
    bag: 0,
    n: [],
    can_select: [],
    update_bag_size: function (_0x4290b1, _0x33c7aa) {
      if (_0x4290b1 === 1) {
        this.bag = WORLD.BAG_SIZE;
      }
      this.bonus += _0x33c7aa;
      this.max = WORLD.WITHOUT_BAG + this.bonus + this.bag;
    },
    drag: {
      item: -1,
      img: null,
      _start: 0,
      _move: 0,
      _x: -1,
      _y: -1,
      move: function (_0x542931) {
        if (
          this["_start"] &&
          (_0x542931.x !== this["_x"] || _0x542931.y !== this["_y"])
        ) {
          this["_move"] = 1;
        }
      },
      start: function (_0x2ad0bb, _0x2acb49) {
        this["_x"] = _0x2acb49.x;
        this["_y"] = _0x2acb49.y;
        this.item = _0x2ad0bb;
        this.img = user.inv.can_select[_0x2ad0bb].info.img[2];
        this["_start"] = 1;
      },
      stop: function () {
        this["_start"] = 0;
        this["_move"] = 0;
        this["_x"] = -1;
        this["_y"] = -1;
      },
      release: function () {
        var _0x4a8c5a = -1,
          _0x12bf9b = user.inv.can_select,
          _0x42a29c = 0;
        if (this["_start"] && this["_move"]) {
          for (var _0xbbe857 = 0; _0xbbe857 < _0x12bf9b.length; _0xbbe857++) {
            if (_0x12bf9b[_0xbbe857].info.state === BUTTON_IN) {
              _0x4a8c5a = _0xbbe857;
              break;
            }
          }
          if (
            _0x4a8c5a !== -1 &&
            _0x4a8c5a !== this.item &&
            _0x12bf9b[this.item]
          ) {
            _0x42a29c = 1;
            var _0x2239c9 = _0x12bf9b[_0x4a8c5a];
            _0x12bf9b[_0x4a8c5a] = _0x12bf9b[this.item];
            _0x12bf9b[this.item] = _0x2239c9;
            game.update_inv_buttons();
          }
        }
        return this.stop(), _0x42a29c;
      },
      draw: function (_0x46ede8, _0x3f5318) {
        if (!this["_start"] || !this["_move"]) {
          return;
        }
        ctxDrawImage(
          ctx,
          this.img,
          Math.floor(_0x46ede8 - this.img.width / 2),
          Math.floor(_0x3f5318 - this.img.height / 2)
        );
      },
    },
    free_place: function (_0x322920) {
      for (_0x740df2 = 0; _0x740df2 < _0x322920.length; _0x740df2++) {
        if (this.n[_0x322920[_0x740df2][0]] == _0x322920[_0x740df2][1]) {
          return true;
        }
      }
      return false;
    },
    find_item: function (_0x55e00f) {
      for (var _0x4a10c5 = 0; _0x4a10c5 < this.can_select.length; _0x4a10c5++) {
        if (this.can_select[_0x4a10c5].id == _0x55e00f) {
          return _0x4a10c5;
        }
      }
      return -1;
    },
    delete_item: function (_0xd41357, _0x59bf68) {
      this.n[_0xd41357] = 0;
      this.can_select.splice(_0x59bf68, 1);
      game.update_inv_buttons();
    },
    decrease: function (_0x3494e6, _0x15cba8, _0x5c382a) {
      update = true;
      this.n[_0x3494e6] = Math.max(0, this.n[_0x3494e6] - _0x15cba8);
      if (!this.n[_0x3494e6] && _0x5c382a >= 0) {
        this.delete_item(_0x3494e6, _0x5c382a);
      }
    },
  };
  this.show_spectators = {
    enabled: false,
    translate: {
      x: 0,
      y: 0,
    },
    invert: function () {
      if (world.mode != WORLD.MODE_HUNGER_GAMES || user.spectator) {
        return;
      }
      user.show_spectators.enabled = !user.show_spectators.enabled;
      if (user.show_spectators.enabled) {
        game.options.spectator_agree.display = "inline-block";
      } else {
        game.options.spectator_agree.display = "none";
      }
    },
  };
  game.options.spectator_agree.display = "none";
  this.auto_feed = {
    enabled: false,
    translate: {
      x: 0,
      y: 0,
    },
    delay: 0,
    invert: function () {
      user.auto_feed.enabled = !user.auto_feed.enabled;
      if (user.auto_feed.enabled) {
        game.options.feed_agree.display = "inline-block";
      } else {
        game.options.feed_agree.display = "none";
      }
    },
    update: function () {
      if (!this.enabled || user.craft.id >= 0 || game.safe_delete.open) {
        return;
      }
      this.delay += delta;
      if (this.delay > 2) {
        this.delay = 0;
        if (user.gauges.h < 0.35) {
          if (user.inv.n[INV.PLANT]) {
            client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT));
          } else {
            if (user.inv.n[INV.GARLIC]) {
              client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC));
            } else {
              if (user.inv.n[INV.CRAB_STICK]) {
                client.select_inv(
                  INV.CRAB_STICK,
                  user.inv.find_item(INV.CRAB_STICK)
                );
              } else {
                if (user.inv.n[INV.PUMPKIN]) {
                  client.select_inv(
                    INV.PUMPKIN,
                    user.inv.find_item(INV.PUMPKIN)
                  );
                } else {
                  if (user.inv.n[INV.TOMATO]) {
                    client.select_inv(
                      INV.TOMATO,
                      user.inv.find_item(INV.TOMATO)
                    );
                  } else {
                    if (user.inv.n[INV.CARROT]) {
                      client.select_inv(
                        INV.CARROT,
                        user.inv.find_item(INV.CARROT)
                      );
                    } else {
                      if (user.inv.n[INV.WATERMELON]) {
                        client.select_inv(
                          INV.WATERMELON,
                          user.inv.find_item(INV.WATERMELON)
                        );
                      } else {
                        if (user.inv.n[INV.BREAD]) {
                          client.select_inv(
                            INV.BREAD,
                            user.inv.find_item(INV.BREAD)
                          );
                        } else {
                          if (user.inv.n[INV.COOKED_MEAT]) {
                            client.select_inv(
                              INV.COOKED_MEAT,
                              user.inv.find_item(INV.COOKED_MEAT)
                            );
                          } else {
                            if (user.inv.n[INV.FOODFISH_COOKED]) {
                              client.select_inv(
                                INV.FOODFISH_COOKED,
                                user.inv.find_item(INV.FOODFISH_COOKED)
                              );
                            } else {
                              if (user.inv.n[INV.COOKIE]) {
                                client.select_inv(
                                  INV.COOKIE,
                                  user.inv.find_item(INV.COOKIE)
                                );
                              } else {
                                if (user.inv.n[INV.SANDWICH]) {
                                  client.select_inv(
                                    INV.SANDWICH,
                                    user.inv.find_item(INV.SANDWICH)
                                  );
                                } else {
                                  if (user.inv.n[INV.CAKE]) {
                                    client.select_inv(
                                      INV.CAKE,
                                      user.inv.find_item(INV.CAKE)
                                    );
                                  } else {
                                    if (user.inv.n[INV.CRAB_LOOT]) {
                                      client.select_inv(
                                        INV.CRAB_LOOT,
                                        user.inv.find_item(INV.CRAB_LOOT)
                                      );
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          if (user.gauges.t < 0.35) {
            if (user.inv.n[INV.BOTTLE_FULL]) {
              client.select_inv(
                INV.BOTTLE_FULL,
                user.inv.find_item(INV.BOTTLE_FULL)
              );
            }
          }
        }
      }
    },
  };
  game.options.feed_agree.display = "none";
  this.craft = {
    id: -1,
    id2: -1,
    timeout: new Utils.LinearAnimation(false, 0, 1, 0, 1, 1),
    crafting: false,
    preview: -1,
    mode: 0,
    label: [],
    can_craft: [],
    workbench: false,
    fire: false,
    water: false,
    well: false,
    change_mode: function () {
      this.mode = this.mode === 0 ? 1 : 0;
    },
    set_workbench: function (_0x110b92) {
      this.workbench = _0x110b92;
      var _0x84e1cd = game.safe_delete;
      if (_0x84e1cd.open) {
        _0x84e1cd.del(_0x84e1cd.button);
      }
      this.update();
    },
    do_recycle: function (_0x39e849) {
      var _0xb5dedc = RECIPES[_0x39e849];
      this.id = _0x39e849;
      this.crafting = true;
      var _0x3eb5dc = world.fast_units[user.uid];
      this.timeout.max_speed = _0xb5dedc.time * 8;
      this.id2 = _0xb5dedc.id2;
    },
    do_craft: function (_0x58bf4c) {
      var _0x39b986 = RECIPES[_0x58bf4c];
      this.id = _0x58bf4c;
      this.crafting = true;
      var _0x5d893c = world.fast_units[user.uid];
      if (_0x5d893c && (user.inv.n[INV.BOOK] || _0x5d893c.right == INV.BOOK)) {
        this.timeout.max_speed = _0x39b986.time * 3;
      } else {
        this.timeout.max_speed = _0x39b986.time;
      }
      this.id2 = _0x39b986.id2;
      for (var _0x2bd552 = 0; _0x2bd552 < _0x39b986.r.length; _0x2bd552++) {
        var _0x120629 = _0x39b986.r[_0x2bd552];
        user.inv.decrease(
          _0x120629[0],
          _0x120629[1],
          user.inv.find_item(_0x120629[0])
        );
      }
      game.update_inv_buttons();
    },
    update: function () {
      this.can_craft = [];
      if (game.info_box.craft === 1) {
        game.info_box.display = 0;
      }
      for (var _0x26fd18 in RECIPES) {
        var _0x463516 = RECIPES[_0x26fd18],
          _0x426a8d = true;
        if (!_0x463516.r) {
          continue;
        }
        for (var _0x5e4c9b = 0; _0x5e4c9b < _0x463516.r.length; _0x5e4c9b++) {
          if (user.inv.max >= WORLD.WITH_BAG && _0x463516.id === CRAFT.BAG) {
            _0x426a8d = false;
            break;
          }
          if (
            _0x463516.w > this.workbench ||
            _0x463516.f > this.fire ||
            _0x463516.o > this.water ||
            _0x463516.e > this.well
          ) {
            _0x426a8d = false;
            break;
          }
          var _0x2aab36 = _0x463516.r[_0x5e4c9b];
          if (
            !user.inv.n[_0x2aab36[0]] ||
            user.inv.n[_0x2aab36[0]] < _0x2aab36[1]
          ) {
            _0x426a8d = false;
            break;
          }
        }
        if (_0x426a8d) {
          this.can_craft.push(game.craft_buttons[_0x463516.id]);
        }
      }
      game.update_craft_buttons();
      game.update_chest_buttons();
      game.update_furnace_button();
      game.update_windmill_button();
      game.update_extractor_button();
      game.update_bread_oven_button();
      game.sign.update_button();
    },
    restart: function () {
      this.id = -1;
      this.crafting = false;
      this.timeout.v = 0;
      this.timeout.o = false;
      this.update();
    },
  };
  this.welcome = {
    message: undefined,
    draw: draw_welcome_message,
  };
  this.alert = {
    timeout: new Utils.LinearAnimation(false, 1, 1, 0, 4, 0.3),
    text: "",
    label: null,
    draw: draw_alert,
    list: [],
  };
  this.ldb = {
    can: document.createElement("canvas"),
    ids: [],
    update: true,
    translate: {
      x: 0,
      y: 0,
    },
    sort: function () {
      var _0x7af4c7 = [];
      var _0x5ae97d = world.players;
      for (var _0x3d4bb3 = 0; _0x3d4bb3 < _0x5ae97d.length; _0x3d4bb3++) {
        if (_0x5ae97d[_0x3d4bb3].alive) {
          _0x7af4c7.push({
            id: _0x3d4bb3,
            s: _0x5ae97d[_0x3d4bb3].score,
          });
        }
      }
      _0x7af4c7.sort(function (_0x15f60e, _0x291892) {
        return _0x291892.s - _0x15f60e.s;
      });
      this.ids = [];
      for (
        var _0x3d4bb3 = 0;
        _0x3d4bb3 < _0x7af4c7.length && _0x3d4bb3 < 10;
        _0x3d4bb3++
      ) {
        this.ids.push(_0x7af4c7[_0x3d4bb3].id);
      }
      this.update = true;
    },
    init: function (_0x505c70) {
      var _0x38faf3 = world.players;
      for (var _0x3f084e = 0; _0x3f084e < _0x38faf3.length; _0x3f084e++) {
        _0x38faf3[_0x3f084e].score = 0;
      }
      _0x38faf3[user.id].score = Utils.restore_number(_0x505c70[1]);
      this.ids = [];
      for (var _0x3f084e = 2; _0x3f084e < _0x505c70.length; _0x3f084e += 2) {
        this.ids.push(_0x505c70[_0x3f084e]);
        _0x38faf3[_0x505c70[_0x3f084e]].score = Utils.restore_number(
          _0x505c70[_0x3f084e + 1]
        );
      }
      this.update = true;
    },
  };
  this.ldb.can.width = 180 * scale;
  this.ldb.can.height = 300 * scale;
  this.ldb.ctx = this.ldb.can.getContext("2d");
  this.terminal = {
    open: false,
    input: document.getElementById("commandInput"),
    contentBox: document.getElementById("commandsBox"),
    style: document.getElementById("commandMainBox").style,
    _print: function (_0x16d4ef) {
      this.contentBox.innerHTML += _0x16d4ef;
    },
    update: function () {
      this.style.left = Math.floor(canw / 2 - 300) + "px";
      this.style.top = Math.floor(canh / 2 - 250) + "px";
    },
    _clean: function () {
      this.contentBox.innerHTML = "";
    },
    quit: function () {
      this.open = false;
      this.style.display = "none";
    },
    create_array: function (_0xad6364) {
      var _0x14cde7 = '<table class="tableList">';
      for (var _0xc3378 = 0; _0xc3378 < _0xad6364.length; _0xc3378++) {
        if (_0xc3378 % 3 === 0) {
          _0x14cde7 += "<tr>";
        }
        _0x14cde7 += '<td class="tableList">' + _0xad6364[_0xc3378] + "</td>";
        if ((_0xc3378 + 1) % 3 === 0 || _0xc3378 + 1 === _0xad6364.length) {
          _0x14cde7 += "</tr>";
        }
      }
      return (_0x14cde7 += "</table>"), _0x14cde7;
    },
    write_command: function (_0x27c545, _0x176f7a, _0x312a69, _0x1c1bd7) {
      _0x27c545 = !_0x27c545 ? "" : _0x27c545;
      _0x176f7a = !_0x176f7a ? "" : _0x176f7a;
      _0x312a69 = !_0x312a69 ? "" : _0x312a69;
      _0x1c1bd7 = !_0x1c1bd7 ? "" : _0x1c1bd7;
      var _0x5a122f = "<div class=commandWritten>" + _0x27c545;
      if (_0x176f7a) {
        _0x5a122f += "<div class=commandValidated>";
      } else {
        _0x5a122f += "<div class=commandUnknown>";
      }
      _0x5a122f += _0x312a69 + "</div>" + _0x1c1bd7 + "</div>";
      this["_print"](_0x5a122f);
      this.scroll_down();
    },
    scroll_down: function () {
      this.contentBox.scrollTop = this.contentBox.scrollHeight;
      return;
    },
    commands: function (_0x5ddb6a) {
      switch (_0x5ddb6a) {
        case "clean":
          this["_clean"]();
          return true;
          break;
        case "list":
          var _0x2f6d00 = "",
            _0x1cc915 = world.players;
          for (var _0x13828f = 0; _0x13828f < _0x1cc915.length; _0x13828f++) {
            var _0x30668b = _0x1cc915[_0x13828f];
            _0x30668b.alive &&
              (_0x2f6d00 +=
                _0x30668b.nickname +
                ' <span style="color:green">#' +
                _0x13828f +
                "</span><br />");
          }
          this.write_command(
            "list",
            1,
            "List all connected players",
            _0x2f6d00
          );
          return true;
          break;
        case "weapon-list":
          this.write_command(
            "Weapons",
            1,
            "List all weapons in the game",
            this.create_array([
              "sword_wood",
              "sword",
              "sword_gold",
              "sword_diamond",
              "sword_amethyst",
              "sword_reidite",
              "dragon_sword",
              "lava_sword",
              "sword_pirate",
              "wood_spear",
              "spear",
              "gold_spear",
              "diamond_spear",
              "amethyst_spear",
              "reidite_spear",
              "dragon_spear",
              "lava_spear",
              "crab_spear",
              "wood_bow",
              "wood_arrow",
            ])
          );
          return true;
          break;
        case "tool-list":
          this.write_command(
            "Tools",
            1,
            "List all tools in the game",
            this.create_array([
              "pick_wood",
              "pick",
              "pick_gold",
              "pick_diamond",
              "pick_amethyst",
              "pick_reidite",
              "hammer",
              "hammer_gold",
              "hammer_diamond",
              "hammer_amethyst",
              "hammer_reidite",
              "super_hammer",
              "shovel",
              "shovel_gold",
              "shovel_diamond",
              "shovel_amethyst",
              "pitchfork",
              "pitchfork2",
              "spanner",
              "book",
            ])
          );
          return true;
          break;
        case "survival-list":
          this.write_command(
            "Survival Items",
            1,
            "List all survival items in the game",
            this.create_array([
              "fire",
              "workbench",
              "bandage",
              "big_fire",
              "furnace",
              "paper",
              "blue_cord",
              "lock",
              "lockpick",
              "totem",
              "resurrection",
              "bridge",
              "bottle_full",
              "bottle_empty",
              "watering_can",
              "watering_can_full",
              "windmill",
              "plot",
              "bread_oven",
              "chest",
              "bucket_empty",
              "bucket_full",
              "well",
              "sign",
              "roof",
              "bed",
              "boat",
              "sled",
              "boar",
              "saddle",
              "emerald_machine",
              "extractor_stone",
              "extractor_gold",
              "extractor_diamond",
              "extractor_amethyst",
              "extractor_reidite_button",
            ])
          );
          return true;
          break;
        case "resource-list":
          this.write_command(
            "Resources",
            1,
            "List all resources in the game",
            this.create_array([
              "wood",
              "stone",
              "gold",
              "diamond",
              "amethyst",
              "reidite",
              "fur",
              "fur_wolf",
              "fur_winter",
              "cord",
              "scales",
              "penguin_feather",
              "flame",
              "sand",
              "ground",
              "ice",
              "dragon_heart",
              "lava_heart",
              "kraken_skin",
              "special_fur",
              "special_fur_2",
              "gemme_green",
              "gemme_orange",
              "gemme_blue",
              "dragon_cube",
              "dragon_orb",
              "lava_cube",
              "lava_orb",
              "fur_boar",
              "pitchfork_part",
              "pilot_glasses",
              "fur_mammoth",
            ])
          );
          return true;
          break;
        case "food-list":
          this.write_command(
            "Food",
            1,
            "List all food in the game",
            this.create_array([
              "plant",
              "seed",
              "meat",
              "cooked_meat",
              "flour",
              "wheat_seed",
              "cookies",
              "wild_wheat",
              "cake",
              "fish",
              "cooked_fish",
              "bread",
              "sandwich",
              "pumpkin_seed",
              "pumpkin",
              "garlic_seed",
              "garlic",
              "thornbush_seed",
              "thornbush",
              "crab_stick",
              "claw",
              "carrot_seed",
              "carrot",
              "tomato_seed",
              "tomato",
              "watermelon_seed",
              "watermelon",
              "aloe_vera_seed",
              "aloe_vera",
              "cactus",
            ])
          );
          return true;
          break;
        case "hat-list":
          this.write_command(
            "Hats",
            1,
            "List all hats in the game",
            this.create_array([
              "earmuffs",
              "coat",
              "scarf",
              "fur_hat",
              "warm_protection",
              "warm_protection2",
              "warm_protection3",
              "explorer_hat",
              "pirate_hat",
              "wood_helmet",
              "stone_helmet",
              "gold_helmet",
              "diamond_helmet",
              "amethyst_helmet",
              "reidite_helmet",
              "dragon_helmet",
              "lava_helmet",
              "crab_helmet",
              "diving_mask",
              "super_diving_suit",
              "crown_green",
              "crown_orange",
              "crown_blue",
              "hood",
              "peasant",
              "winter_hood",
              "winter_peasant",
              "bag",
              "turban1",
              "turban2",
              "pilot_hat",
            ])
          );
          return true;
          break;
        case "building-list":
          this.write_command(
            "Buildings",
            1,
            "List all buildings in the game",
            this.create_array([
              "wall",
              "stone_wall",
              "gold_wall",
              "diamond_wall",
              "amethyst_wall",
              "reidite_wall",
              "spike",
              "stone_spike",
              "gold_spike",
              "diamond_spike",
              "amethyst_spike",
              "reidite_spike",
              "wood_door",
              "stone_door",
              "gold_door",
              "diamond_door",
              "amethyst_door",
              "reidite_door",
              "wood_spike_door",
              "stone_spike_door",
              "gold_spike_door",
              "diamond_spike_door",
              "amethyst_spike_door",
              "reidite_spike_door",
            ])
          );
          return true;
          break;
        case "biome-list":
          this.write_command(
            "Biomes list",
            1,
            "List all available biomes in the game",
            this.create_array([
              "forest",
              "winter",
              "lava",
              "sea",
              "beach",
              "island",
              "dragon",
            ])
          );
          return true;
          break;
        case "help-config":
          this.write_command(
            "Help Configuration",
            1,
            "Learn how to build your customized map",
            '<div class="specialCommandBox">To get the current map configuration, and modify it, copy the result of <span class="commandSynthax">get-config</span> in a text file and change every parameter you want.</div>To modify the settings, change a number to another with <span class="commandSynthax">set-config</span></br>To modify the map, modify "important" section (at the end)<div class="infoCommand">The minimum size of the map is 50x50.</div>"custom_map" is used to change the biomes and is written like this :<div class="commandSynthax" style="font-size:17px;">"custom_map":[["biome",width,height],...,["biome",width,height]]</div>Biomes are <span class="commandSynthax">"forest"</span>, <span class="commandSynthax">"lava"</span>, <span class="commandSynthax">"winter"</span>, and <span class="commandSynthax">"dragon"</span>.'
          );
          return true;
          break;
        case "pos":
          var _0x1cc915 = world.units[ITEMS.PLAYERS];
          for (var _0x13828f = 0; _0x13828f < _0x1cc915.length; _0x13828f++) {
            var _0xb8f793 = _0x1cc915[_0x13828f];
            if (_0xb8f793.pid === user.id) {
              return (
                this.write_command(
                  "pos",
                  1,
                  "Your position is " +
                    Math.floor(_0xb8f793.x / 100) +
                    ":" +
                    Math.floor(_0xb8f793.y / 100)
                ),
                true
              );
            }
          }
          break;
        case "help-admin":
          this.write_command(
            "help-admin",
            1,
            "List all available commands for admin only",
            this.create_array([
              "restart",
              "m | message",
              "mt | message-to",
              "w | welcome",
              "name",
              "password",
              "k | kick",
              "b | ban",
              "tp | teleport",
              "tpa | teleport-all",
              "tpt | teleport-to",
              "pos",
              "heal",
              "cancel-craft",
              "da | disable-attack",
              "pvp | disable-pvp",
              "dgs | disable-gather-score",
              "drs | disable-resource",
              "dms | disable-mob-safety",
              "ds | disable-shop",
              "dn | disable-nickname",
              "dch | disable-chat",
              "dq | disable-quest",
              "dd | disable-drop",
              "ddc | disable-drop-crate",
              "db | disable-crate",
              "dwg | disable-warm-gauge",
              "dk | disable-kit",
              "dc | disable-craft",
              "dr | disable-recycling",
              "disable-clock",
              "disable-recipes-book",
              "disable-market",
              "sb | spawn-building",
              "fsb | force-spawn-building",
              "sch | spawn-chest",
              "spawn-area",
              "spawn-area-team",
              "cl | clean-position",
              "cba | clean-building-all",
              "ci | clean-inventory",
              "cia | clean-inventory-all",
              "harvest",
              "gs | give-score",
              "gsa | give-score-all",
              "rs | reset-score",
              "rk | reset-kill",
              "gm | godmode",
              "instant-craft",
              "ka | kill-animals",
              "g | give",
              "ga | give-to-all",
              "ri | remove-item",
              "ria | remove-item-all",
              "spawn-location",
              "tm | team-mode",
              "default-nickname",
              "mm | murder-mode",
              "br | battle-royale",
              "help-config",
              "gc | get-config",
              "sc | set-config",
              "reset-config",
              "save-config",
              "reset-event-time",
            ])
          );
          return true;
          break;
        case "help":
          this.write_command(
            "help",
            1,
            "List all available commands",
            this.create_array([
              "clean",
              "list",
              "pos",
              "help-admin",
              "help",
              "weapon-list",
              "tool-list",
              "survival-list",
              "resource-list",
              "food-list",
              "hat-list",
              "building-list",
              "biome-list",
            ])
          );
          return true;
          break;
      }
      return false;
    },
    _open: function () {
      !this.open &&
        ((this.open = true),
        (this.style.display = "inline-block"),
        this.input.focus());
    },
    _send: function () {
      var _0x117b3e = this.input.value;
      if (_0x117b3e && _0x117b3e.length > 0) {
        if (!this.commands(_0x117b3e)) {
          client.send_command(this.input.value);
        }
        this.input.value = "";
      }
    },
  };
  this.chat = {
    open: false,
    input: document.getElementById("chat_input"),
    style: document.getElementById("chat_block").style,
    update: function () {
      this.style.left = Math.floor(canw / 2 - 150) + "px";
      this.style.top = Math.floor(canh / 2 + 80) + "px";
    },
    quit: function () {
      this.open = false;
      this.style.display = "none";
      this.input.value = "";
    },
    prefix: "!",
    cmd: {
      hud: function (_0x5101ec) {
        if (_0x5101ec === "off") {
          if (!user.alert.text) {
            user.alert.text =
              'Enter "!hud" without the quotes to restore the HUD';
          } else {
            user.alert.list.push(
              'Enter "!hud" without the quotes to restore the HUD'
            );
          }
          game.show_ui = 0;
        } else {
          game.show_ui = 1;
        }
      },
    },
    commands: function (_0x5c57d2) {
      if (_0x5c57d2.charAt(0) == this.prefix) {
        var _0x19e0a2 = "";
        var _0x3b6c11 = "";
        for (
          var _0x3b77fd = 1;
          _0x3b77fd < _0x5c57d2.length && _0x5c57d2.charAt(_0x3b77fd) != " ";
          _0x3b77fd++
        ) {
          _0x19e0a2 += _0x5c57d2.charAt(_0x3b77fd);
        }
        _0x3b77fd++;
        for (; _0x3b77fd < _0x5c57d2.length; _0x3b77fd++) {
          _0x3b6c11 += _0x5c57d2.charAt(_0x3b77fd);
        }
        var _0x461ef2 = this.cmd[_0x19e0a2];
        if (_0x461ef2) {
          _0x461ef2(_0x3b6c11);
        }
        return true;
      } else {
        return false;
      }
    },
    run: function () {
      if (!this.open) {
        this.open = true;
        this.style.display = "inline-block";
        this.input.focus();
      } else {
        this.open = false;
        this.style.display = "none";
        var _0x2c7175 = this.input.value;
        if (_0x2c7175) {
          if (!this.commands(_0x2c7175)) {
            client.send_chat(this.input.value);
          }
          this.input.value = "";
        }
      }
    },
  };
  this.ash = {
    flakes: [],
    update: function (_0x1788fc) {
      _0x1788fc.y += delta * 80 * _0x1788fc.s;
      _0x1788fc.x += delta * 80 * _0x1788fc.c;
      _0x1788fc.life -= delta / 6;
      if (_0x1788fc.life > 0.2) {
        _0x1788fc.alpha = Math.min(_0x1788fc.alpha + delta * 3, 1);
      } else {
        _0x1788fc.alpha = Math.max(_0x1788fc.alpha - delta * 1, 0);
      }
    },
    add: function (_0x580348) {
      var _0x5d5a2b = Math.floor(
        Math.min(
          SPRITE.ASHES_NUMBER * (canw / 1366),
          SPRITE.ASHES_NUMBER + 10
        ) * Math.max(Math.min(world.dist_lava + 1000, 3000) / 3000, 0)
      );
      if (this.flakes.length < _0x5d5a2b) {
        var _0x3e24ad = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
        var _0x8b3b76 = -user.cam.x + Math.floor(Math.random() * user.cam.w);
        var _0x982c66 = -user.cam.y + Math.floor(Math.random() * user.cam.h);
        var _0x43a8f4 = Math.random(Math.PI);
        this.flakes.push(
          new Flakes(_0x3e24ad, _0x8b3b76, _0x982c66, _0x43a8f4)
        );
      }
    },
  };
  this.blizzard = 0;
  this.bandage = 0;
  this.desert = {
    flakes: [],
    tempest: 0,
    tempest_speed: 0,
    update: function (_0x26d5c2) {
      _0x26d5c2.y += delta * (200 + 800 * this.tempest_speed) * _0x26d5c2.s;
      _0x26d5c2.x += delta * (200 + 800 * this.tempest_speed) * _0x26d5c2.c;
      _0x26d5c2.life -= delta / 6;
      if (_0x26d5c2.life > 0.2) {
        _0x26d5c2.alpha = Math.min(_0x26d5c2.alpha + delta * 3, 1);
      } else {
        _0x26d5c2.alpha = Math.max(_0x26d5c2.alpha - delta * 1, 0);
      }
    },
    add: function (_0x304332) {
      var _0x387346 = Math.floor(
        Math.min(
          (this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER * (canw / 1366),
          (this.tempest_speed + 0.1) * SPRITE.SAND_NUMBER + 10
        ) * Math.max(Math.min(world.dist_desert + 1000, 3000) / 3000, 0)
      );
      if (this.flakes.length < _0x387346) {
        var _0x4df1b8 = Math.floor(Math.random() * SPRITE.ASHES_SIZES);
        var _0x567510 = -user.cam.x + Math.floor(Math.random() * user.cam.w);
        var _0x199890 = -user.cam.y + Math.floor(Math.random() * user.cam.h);
        var _0x4f1ce8 = Math.random(Math.PI);
        if (user.desert.tempest !== 0) {
          _0x567510 -= user.cam.w / 2;
        }
        this.flakes.push(
          new Flakes(_0x4df1b8, _0x567510, _0x199890, _0x4f1ce8)
        );
      }
    },
  };
  this.winter = {
    flakes: [],
    tempest: 0,
    tempest_speed: 0,
    update: function (_0x547c62) {
      if (keyboard.is_bottom()) {
        _0x547c62.y +=
          delta * _0x547c62.speed * (5.5 + 10 * this.tempest_speed);
      } else {
        _0x547c62.y += delta * _0x547c62.speed * (5 + 10 * this.tempest_speed);
      }
      _0x547c62.life -= delta / 2;
      if (keyboard.is_left()) {
        _0x547c62.x += delta * (100 + 400 * this.tempest_speed);
      } else {
        if (keyboard.is_right()) {
          _0x547c62.x -= delta * (130 - 400 * this.tempest_speed);
        } else {
          _0x547c62.x -= delta * (30 - 400 * this.tempest_speed);
        }
      }
      if (_0x547c62.life > 0.2) {
        _0x547c62.alpha = Math.min(_0x547c62.alpha + delta * 3, 1);
      } else {
        _0x547c62.alpha = Math.max(_0x547c62.alpha - delta * 5, 0);
      }
    },
    add: function (_0x1907dc) {
      var _0x52c68f = Math.floor(
        Math.min(
          (this.tempest_speed * 1.5 + 0.5) *
            SPRITE.FLAKES_NUMBER *
            (canw / 1366),
          (this.tempest_speed * 1.5 + 0.5) * SPRITE.FLAKES_NUMBER + 10
        ) * Math.max(Math.min(world.dist_winter + 1000, 3000) / 3000, 0)
      );
      if (this.flakes.length < _0x52c68f) {
        var _0x4aff18 = Math.floor(Math.random() * SPRITE.FLAKES_SIZES),
          _0x5be654 = -user.cam.x + Math.floor(Math.random() * user.cam.w),
          _0x18f894 =
            -user.cam.y + Math.floor(Math.random() * 400 * scale - 200 * scale);
        this.flakes.push(new Flakes(_0x4aff18, _0x5be654, _0x18f894, 0));
      }
    },
  };
  function _0x4de060() {
    this.seed = 1;
    this.seed2 = 2;
    this.seed3 = 3;
    this.seedv = 1;
    this.seedv2 = 2;
    this.seedv3 = 3;
    this.new_seed = function (_0x22900a) {
      this.seed = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed2 = function (_0x8c5a44) {
      this.seed2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seed3 = function (_0x41e393) {
      this.seed3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv = function (_0x1e29b4) {
      this.seedv = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv2 = function (_0x4b9048) {
      this.seedv2 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.new_seedv3 = function (_0x10003f) {
      this.seedv3 = 2 + Math.floor(Math.random() * WORLD.SEED);
    };
    this.draw_foam_vert = function (
      _0x10eb4b,
      _0x1dcada,
      _0x5b666d,
      _0x246920,
      _0x58dfd6,
      _0x4fbb15,
      _0x36c009
    ) {
      for (var _0x48d639 = 1; _0x48d639 < _0x36c009; ) {
        var _0xf8071e = (_0x48d639 * _0x5b666d) % RAND_SIZE,
          _0x484260 = RANDOM[_0xf8071e];
        if (_0x484260 < 0.1) {
          _0x3fdd75 += 50;
          _0x48d639 += 50;
          continue;
        }
        var _0x3fdd75 = Math.floor(_0x484260 * _0x246920 + _0x58dfd6);
        if (_0x48d639 > _0x4fbb15 && _0x48d639 < _0x36c009) {
          var _0x26be06 = Math.random() > 0.5 ? -10 * delta : 10 * delta;
          var _0x3f18b7 = _0x3fdd75 * _0x1dcada;
          this.bxv[_0xf8071e] = Math.max(
            -WORLD.FLOAM_X,
            Math.min(WORLD.FLOAM_X, this.bxv[_0xf8071e] + _0x26be06)
          );
          this.byv[_0xf8071e] = Math.max(
            -WORLD.FLOAM_Y,
            Math.min(WORLD.FLOAM_Y, this.byv[_0xf8071e] + _0x26be06)
          );
          if (_0x3f18b7 > 0) {
            ctx.beginPath();
            ctx.arc(
              _0x48d639 + user.cam.x + this.byv[_0xf8071e],
              _0x10eb4b + this.bxv[_0xf8071e] - WORLD.FLOAM_X * 0.8,
              _0x3f18b7,
              0,
              Math.PI * 2
            );
            if (world.transition) {
              var _0x1ed118 = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(
                83,
                156,
                160,
                236,
                247,
                249,
                _0x1ed118
              );
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        _0x48d639 += 2 * _0x3fdd75;
      }
    };
    this.draw_foam = function (
      _0x29bce5,
      _0x1568dc,
      _0x2551f9,
      _0x1ae047,
      _0x4e5bdf,
      _0x4d8c6b,
      _0x50657c
    ) {
      for (var _0x290735 = 1; _0x290735 < _0x50657c; ) {
        var _0x1a2fe2 = (_0x290735 * _0x2551f9) % RAND_SIZE,
          _0x2514a5 = RANDOM[_0x1a2fe2];
        if (_0x2514a5 < 0.1) {
          _0x2add27 += 50;
          _0x290735 += 50;
          continue;
        }
        var _0x2add27 = Math.floor(_0x2514a5 * _0x1ae047 + _0x4e5bdf);
        if (_0x290735 > _0x4d8c6b && _0x290735 < _0x50657c) {
          var _0x2698e8 = Math.random() > 0.5 ? -10 * delta : 10 * delta;
          var _0x438d33 = _0x2add27 * _0x1568dc;
          this.bx[_0x1a2fe2] = Math.max(
            -WORLD.FLOAM_X,
            Math.min(WORLD.FLOAM_X, this.bx[_0x1a2fe2] + _0x2698e8)
          );
          this.by[_0x1a2fe2] = Math.max(
            -WORLD.FLOAM_Y,
            Math.min(WORLD.FLOAM_Y, this.by[_0x1a2fe2] + _0x2698e8)
          );
          if (_0x438d33 > 0) {
            ctx.beginPath();
            ctx.arc(
              _0x29bce5 + this.bx[_0x1a2fe2] - WORLD.FLOAM_X * 0.8,
              _0x290735 + user.cam.y + this.by[_0x1a2fe2],
              _0x438d33,
              0,
              Math.PI * 2
            );
            if (world.transition) {
              var _0x46e328 = world.time ? 1 - world.shade.v : world.shade.v;
              ctx.fillStyle = get_color_transition(
                83,
                156,
                160,
                236,
                247,
                249,
                _0x46e328
              );
            } else {
              ctx.fillStyle = SPRITE.FLOAM_COLOR[world.time];
            }
            ctx.fill();
          }
        }
        _0x290735 += 2 * _0x2add27;
      }
    };
    this.draw_foams_bottom = function (
      _0x3e1b8b,
      _0x249cc1,
      _0x366f28,
      _0x7cc46c,
      _0x276196,
      _0x70aec5
    ) {
      _0x276196 -= 30;
      _0x70aec5 += 30;
      var _0x3f51fd = -((_0x366f28 - WORLD.LW1SX - _0x7cc46c - 2) / WORLD.W1EX);
      if (_0x3f51fd === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x3f51fd);
      this.draw_foam_vert(
        _0x366f28,
        _0x3f51fd,
        this.seed3,
        18,
        16,
        _0x276196,
        _0x70aec5
      );
      ctx.globalAlpha = 1;
      var _0x3f51fd = -(
        (_0x3e1b8b - WORLD.LW2SX - _0x7cc46c + 500) /
        WORLD.W2EX
      );
      if (_0x3f51fd === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x3f51fd);
      this.draw_foam_vert(
        _0x3e1b8b,
        _0x3f51fd,
        this.seed,
        12,
        10,
        _0x276196,
        _0x70aec5
      );
      ctx.globalAlpha = 1;
      if (_0x249cc1 === -1) {
        return;
      }
      var _0x3f51fd = -(
        (_0x249cc1 - WORLD.LW3SX - _0x7cc46c + 698) /
        WORLD.W3EX
      );
      if (_0x3f51fd <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x3f51fd);
      this.draw_foam_vert(
        _0x249cc1,
        _0x3f51fd,
        this.seed2,
        6,
        6,
        _0x276196,
        _0x70aec5
      );
      ctx.globalAlpha = 1;
    };
    this.draw_foams_top = function (
      _0x2e91c5,
      _0x54db5a,
      _0x4f6f3d,
      _0x48b1cf,
      _0x47f3ce,
      _0xf56c3d
    ) {
      _0x47f3ce -= 30;
      _0xf56c3d += 30;
      var _0xbfa8ab = -(
        (-_0x4f6f3d + WORLD.LW1SX + _0x48b1cf + 2) /
        WORLD.W1EX
      );
      if (_0xbfa8ab === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0xbfa8ab);
      this.draw_foam_vert(
        _0x4f6f3d,
        _0xbfa8ab,
        this.seed3,
        18,
        16,
        _0x47f3ce,
        _0xf56c3d
      );
      ctx.globalAlpha = 1;
      var _0xbfa8ab = -((-_0x2e91c5 + WORLD.LW2SX + _0x48b1cf) / WORLD.W2EX);
      if (_0xbfa8ab === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0xbfa8ab);
      this.draw_foam_vert(
        _0x2e91c5,
        _0xbfa8ab,
        this.seed,
        12,
        10,
        _0x47f3ce,
        _0xf56c3d
      );
      ctx.globalAlpha = 1;
      if (_0x54db5a === -1) {
        return;
      }
      var _0xbfa8ab = -((-_0x54db5a + WORLD.LW3SX + _0x48b1cf) / WORLD.W3EX);
      if (_0xbfa8ab <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0xbfa8ab);
      this.draw_foam_vert(
        _0x54db5a,
        _0xbfa8ab,
        this.seed2,
        6,
        6,
        _0x47f3ce,
        _0xf56c3d
      );
      ctx.globalAlpha = 1;
    };
    this.draw_foams_left = function (
      _0x13f0f6,
      _0x9aaa60,
      _0x5f4d0d,
      _0x56762c,
      _0x295f19,
      _0x755da5
    ) {
      _0x295f19 -= 30;
      _0x755da5 += 30;
      var _0x4a1098 = -(
        (-_0x5f4d0d + WORLD.LW1SX + _0x56762c + 2) /
        WORLD.W1EX
      );
      if (_0x4a1098 === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4a1098);
      this.draw_foam(
        _0x5f4d0d,
        _0x4a1098,
        this.seed3,
        18,
        16,
        _0x295f19,
        _0x755da5
      );
      ctx.globalAlpha = 1;
      var _0x4a1098 = -((-_0x13f0f6 + WORLD.LW2SX + _0x56762c) / WORLD.W2EX);
      if (_0x4a1098 === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4a1098);
      this.draw_foam(
        _0x13f0f6,
        _0x4a1098,
        this.seed,
        12,
        10,
        _0x295f19,
        _0x755da5
      );
      ctx.globalAlpha = 1;
      if (_0x9aaa60 === -1) {
        return;
      }
      var _0x4a1098 = -((-_0x9aaa60 + WORLD.LW3SX + _0x56762c) / WORLD.W3EX);
      if (_0x4a1098 <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4a1098);
      this.draw_foam(
        _0x9aaa60,
        _0x4a1098,
        this.seed2,
        6,
        6,
        _0x295f19,
        _0x755da5
      );
      ctx.globalAlpha = 1;
    };
    this.draw_foams_right = function (
      _0x26eae1,
      _0x8777f3,
      _0x18f2d7,
      _0x6d1bbb,
      _0x2729d3,
      _0x407322
    ) {
      _0x2729d3 -= 30;
      _0x407322 += 30;
      var _0x4674f3 = -((_0x18f2d7 - WORLD.LW1SX - _0x6d1bbb - 2) / WORLD.W1EX);
      if (_0x4674f3 === 0) {
        this.new_seed3();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4674f3);
      this.draw_foam(
        _0x18f2d7,
        _0x4674f3,
        this.seed3,
        18,
        16,
        _0x2729d3,
        _0x407322
      );
      ctx.globalAlpha = 1;
      var _0x4674f3 = -(
        (_0x26eae1 - WORLD.LW2SX - _0x6d1bbb + 500) /
        WORLD.W2EX
      );
      if (_0x4674f3 === 0) {
        this.new_seed();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4674f3);
      this.draw_foam(
        _0x26eae1,
        _0x4674f3,
        this.seed,
        12,
        10,
        _0x2729d3,
        _0x407322
      );
      ctx.globalAlpha = 1;
      if (_0x8777f3 === -1) {
        return;
      }
      var _0x4674f3 = -(
        (_0x8777f3 - WORLD.LW3SX - _0x6d1bbb + 698) /
        WORLD.W3EX
      );
      if (_0x4674f3 <= 0.01) {
        this.new_seed2();
      }
      ctx.globalAlpha = Utils.ease_in_out_quad(_0x4674f3);
      this.draw_foam(
        _0x8777f3,
        _0x4674f3,
        this.seed2,
        6,
        6,
        _0x2729d3,
        _0x407322
      );
      ctx.globalAlpha = 1;
    };
    this.w1 = {
      r: new Utils.Ease(
        Utils.ease_out_cubic,
        0,
        10,
        WORLD.W1SX,
        WORLD.W1SX,
        WORLD.W1EX
      ),
      l: new Utils.Ease(
        Utils.ease_in_out_cubic,
        0,
        10,
        WORLD.W1EX,
        WORLD.W1EX,
        WORLD.W1SX
      ),
    };
    this.w2 = {
      r: new Utils.Ease(
        Utils.ease_out_quart,
        0,
        10,
        WORLD.W2SX,
        WORLD.W2SX,
        WORLD.W2EX
      ),
      l: new Utils.Ease(
        Utils.ease_in_out_quad,
        0,
        10,
        WORLD.W2EX,
        WORLD.W2EX,
        WORLD.W2SX
      ),
    };
    this.w3 = {
      r: new Utils.Ease(
        Utils.ease_out_quint,
        0,
        10,
        WORLD.W3SX,
        WORLD.W3SX,
        WORLD.W3EX
      ),
      l: new Utils.Ease(
        Utils.ease_in_out_quad,
        0,
        10,
        WORLD.W3EX,
        WORLD.W3EX,
        WORLD.W3SX
      ),
    };
    this.t_ = function (_0x1614ea) {
      var _0x42e934;
      if (_0x1614ea.r.x === _0x1614ea.r.ex) {
        if (_0x1614ea.l.x === _0x1614ea.l.ex) {
          _0x42e934 = _0x1614ea.r;
        } else {
          _0x42e934 = _0x1614ea.l;
        }
      } else {
        _0x42e934 = _0x1614ea.r;
      }
      return _0x42e934;
    };
    this.t = function (_0x4104d0) {
      var _0x2470e2;
      if (_0x4104d0.r.x === _0x4104d0.r.ex) {
        if (_0x4104d0.l.x === _0x4104d0.l.ex) {
          _0x4104d0.r.restart();
          _0x4104d0.l.restart();
          _0x2470e2 = _0x4104d0.r;
        } else {
          _0x2470e2 = _0x4104d0.l;
        }
      } else {
        _0x2470e2 = _0x4104d0.r;
      }
      return _0x2470e2.ease(_0x2470e2.ex), _0x2470e2;
    };
    this.bx = [];
    this.by = [];
    this.bxv = [];
    this.byv = [];
    this.init = function () {
      for (var _0x2641e1 = 0; _0x2641e1 < RAND_SIZE; _0x2641e1++) {
        this.bx[_0x2641e1] = Math.floor(RANDOM[_0x2641e1] * WORLD.FLOAM_X);
        this.by[_0x2641e1] = Math.floor(RANDOM[_0x2641e1] * WORLD.FLOAM_Y);
        this.bxv[_0x2641e1] = Math.floor(RANDOM[_0x2641e1] * WORLD.FLOAM_X);
        this.byv[_0x2641e1] = Math.floor(RANDOM[_0x2641e1] * WORLD.FLOAM_Y);
      }
      this.w1.r.x = this.w1.r.ex;
      this.w2.r.ed = 3.5;
      this.w3.r.ed = 2;
    };
    this.init();
  }
  this.beach = [];
  for (var _0x740df2 = 0; _0x740df2 < 4; _0x740df2++) {
    this.beach.push(new _0x4de060());
  }
}

function get__e() {
  var _0x33ca15 = Math.random();
  return "e";
}
function get__S() {
  var _0x4661e8 = Math.random();
  return "S";
}
function get__t() {
  var _0x46c6d1 = Math.random();
  return "t";
}
function get__d() {
  var _0xe2653e = Math.random();
  return "d";
}
function get__o() {
  var _0x194c34 = Math.random();
  return "o";
}
function get__r() {
  var _0x4e5700 = Math.random();
  return "r";
}
function get__a() {
  var _0x461683 = Math.random();
  return "a";
}
function get__w() {
  var _0x2a6520 = Math.random();
  return "w";
}
function get__I() {
  var _0x2ce7b9 = Math.random();
  return "I";
}
function get__k() {
  var _0x5734b8 = Math.random();
  return "k";
}
function get__W() {
  var _0x155c72 = Math.random();
  return "W";
}
function get__a() {
  var _0x55d602 = Math.random();
  return "a";
}
function get__s() {
  var _0x335aec = Math.random();
  return "s";
}
function get__n() {
  var _0x205a9c = Math.random();
  return "n";
}
function get__p() {
  var _0x1527bc = Math.random();
  return "p";
}
function get__2() {
  var _0x4757a1 = Math.random();
  return "2";
}
function get__g() {
  var _0x52eaa8 = Math.random();
  return "g";
}
function get__m() {
  var _0x1fc420 = Math.random();
  return "m";
}
function get__b() {
  var _0x386c84 = Math.random();
  return "b";
}
function get__o() {
  var _0x3b88ab = Math.random();
  return "o";
}
function get__t() {
  var _0x3b35e9 = Math.random();
  return "t";
}
function get__y() {
  var _0x1ca5e4 = Math.random();
  return "y";
}
function get__c() {
  var _0xcb2eab = Math.random();
  return "c";
}
function get__p() {
  var _0x10a3ca = Math.random();
  return "p";
}
function get__i() {
  var _0x3d3716 = Math.random();
  return "i";
}
function get__v() {
  var _0x2ce42f = Math.random();
  return "v";
}
function get__C() {
  var _0x52ae87 = Math.random();
  return "C";
}
function get__R() {
  var _0x1090ab = Math.random();
  return "R";
}
function get__x() {
  var _0x402f65 = Math.random();
  return "x";
}
function get__D() {
  var _0x208f15 = Math.random();
  return "D";
}
function fixNative() {
  var _0x259dcb = get__n() + get__a() + get__t() + get__i();
  var _0x4b4c78 =
    get__W() +
    get__e() +
    get__b() +
    get__S() +
    get__o() +
    get__c() +
    get__k() +
    get__e() +
    get__t();
  if (window[_0x4b4c78].toString().indexOf(_0x259dcb) === -1) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var _0x11619f = get__s() + get__e() + get__n() + get__d();
  var _0x4b3a21 =
    get__p() +
    get__r() +
    get__o() +
    get__t() +
    get__o() +
    get__t() +
    get__y() +
    get__p() +
    get__e();
  if (
    window[_0x4b4c78][_0x4b3a21][_0x11619f].toString().indexOf(_0x259dcb) === -1
  ) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  var _0x4b4c78 =
    get__d() +
    get__r() +
    get__a() +
    get__w() +
    get__I() +
    get__m() +
    get__a() +
    get__g() +
    get__e();
  var _0x11619f =
    get__C() +
    get__a() +
    get__n() +
    get__v() +
    get__a() +
    get__s() +
    get__R() +
    get__e() +
    get__n() +
    get__d() +
    get__e() +
    get__r() +
    get__i() +
    get__n() +
    get__g() +
    get__C() +
    get__o() +
    get__n() +
    get__t() +
    get__e() +
    get__x() +
    get__t() +
    get__2() +
    get__D();
  if (
    window[_0x11619f][_0x4b3a21][_0x4b4c78].toString().indexOf(_0x259dcb) === -1
  ) {
    Math.floor = function () {
      return Math.round() + 1;
    };
  }
  setTimeout(fixNative, 100000);
}

setTimeout(fixNative, 100000);
var SERVER_INFO_URL = "datas/info.json";
environment === environments.DEV && (SERVER_INFO_URL = "datas/info.local.json");
var LOADER = { SERVER_INFO_URL: SERVER_INFO_URL };

function Loader(e, t, i) {
  this.can = e;
  this.ctx = t;
  this.logo = {
    translate: {
      x: 0,
      y: 0,
    },
    style: document.getElementById("loading").style,
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    },
  };
  this.logo.style.position = "absolute";
  this.logo.style.display = "inline-block";
  this.logo.update();
  this.is_run = true;
  this.stop = function () {
    this.is_run = false;
  };
  this.loading = { total: 1 };
  var r = this,
    a = function () {},
    o = 0;
  this.quit_effect = function () {
    r.update();
    o++;
    if (o == 40) {
      r.stop();
      a();
      return;
    }
    window.setTimeout(r.quit_effect, 33);
  };
  this.quit = function (e) {
    a = e;
    r.quit_effect();
  };
  var _0x42581a = new Date().getTime();
  function s(e) {
    if (e.indexOf("normal-mode") !== -1 || e.indexOf("player0") !== -1) {
      return 1;
    }
    if (
      e.indexOf("day-bag") !== -1 ||
      e.indexOf("night-bag") !== -1 ||
      e.indexOf("day-book") !== -1 ||
      e.indexOf("night-book") !== -1 ||
      e.indexOf("day-player") !== -1 ||
      e.indexOf("night-player") !== -1 ||
      e.indexOf("day-accessory") !== -1 ||
      e.indexOf("night-accessory") !== -1 ||
      e.indexOf("day-crate") !== -1 ||
      e.indexOf("night-crate") !== -1 ||
      e.indexOf("day-skin") !== -1 ||
      e.indexOf("night-skin") !== -1 ||
      e.indexOf("day-river") !== -1 ||
      e.indexOf("night-river") !== -1 ||
      e.indexOf("day-river") !== -1 ||
      e.indexOf("night-river") !== -1 ||
      e.indexOf("day-rock") !== -1 ||
      e.indexOf("night-rock") !== -1 ||
      e.indexOf("day-flower") !== -1 ||
      e.indexOf("night-flower") !== -1 ||
      e.indexOf("day-leaf") !== -1 ||
      e.indexOf("night-leaf") !== -1 ||
      e.indexOf("day-herb") !== -1 ||
      e.indexOf("night-herb") !== -1 ||
      e.indexOf("day-shell") !== -1 ||
      e.indexOf("night-shell") !== -1 ||
      e.indexOf("day-hand-skin") !== -1 ||
      e.indexOf("night-hand-skin") !== -1 ||
      e.indexOf("bignight") !== -1 ||
      e.indexOf("bigday") !== -1 ||
      e.indexOf("bigzday") !== -1 ||
      e.indexOf("bigznight") !== -1 ||
      e.indexOf("tutorial-box") !== -1 ||
      e.indexOf("tuto-") !== -1 ||
      e.indexOf("-leaderboard-") !== -1 ||
      e.indexOf("-lead-") !== -1 ||
      e.indexOf("day-lava-") !== -1 ||
      e.indexOf("night-lava-") !== -1 ||
      e.indexOf("-click.png") !== -1 ||
      e.indexOf("-in.png") !== -1 ||
      e.indexOf("-fog") !== -1 ||
      e.indexOf("-lava") !== -1 ||
      e.indexOf("pebblecompo") !== -1 ||
      e.indexOf("avatar-player") !== -1
    ) {
      return 0;
    }
    return 1;
  }
  var T = Object.keys(IMAGES).length,
    _0x444fa4 = T;
  console.log("Image to load: ", T);
  for (var _0x158caa in IMAGES) {
    if (s(IMAGES[_0x158caa]) === 0) {
      T--;
    }
  }
  console.log("Image to load with high priority: ", T);
  var E = function () {
      if (this.isLoaded !== 0) {
        return this.isLoaded;
      }
      return (this.isLoaded = 2), (this.src = this["_src"]), 0;
    },
    I = function (_0x272e23) {
      this.isLoaded = 1;
    },
    l = 0,
    d = function () {
      console.log("Received server info");
      if (l === 1) {
        return;
      }
      l = 1;
      console.log(Date.now() - _0x42581a);
      if (next_lang !== set_english) {
        set_english();
      }
      next_lang();
      var e = Utils.getURLData("server");
      e !== null &&
        ((client.privateServer = 1),
        (client.server_list = [
          {
            nu: 0,
            m: 100,
            i: "server" + e + ".starve.io",
            p: 443,
            a: "Private Server " + e,
            ssl: 1,
          },
        ]));
      client.update_server_list();
      setTimeout(i, 100);
    },
    c = function () {
      let e = async () => {
        await client.fetch_server_list();
        d();
      };
      if (!document.fonts || !document.fonts.check) {
        setTimeout(e, 1000);
      } else {
        if (document.fonts.check("1em Baloo Paaji")) {
          setTimeout(e, 100);
        } else {
          setTimeout(c, 100);
        }
      }
    },
    _0x550201 = function () {
      this.loadAttempts++;
      console.warn(
        "Image (" + this.src + ") failed to load, attempt " + this.loadAttempts,
        this
      );
      this.loadAttempts > 3 &&
        console.warn("Failed to load image too many times");
      var _0x21198c = this.loadAttempts,
        _0x3fe910 = this.src,
        _0xe99a6a = s(_0x3fe910) === 0 ? 10000 : 2000;
      setTimeout(function () {
        for (var _0xd6205b in DUMP_IMAGES) {
          if (_0x3fe910.indexOf(DUMP_IMAGES[_0xd6205b]) !== -1) {
            IMAGES[_0xd6205b] = new Image();
            IMAGES[_0xd6205b].onload = I;
            IMAGES[_0xd6205b].onerror = _0x550201;
            IMAGES[_0xd6205b].loadAttempts = _0x21198c;
            IMAGES[_0xd6205b].src = _0x3fe910;
            break;
          }
        }
      }, _0xe99a6a);
    };
  function _0xc1ce8b(_0x26e35b) {
    for (var _0x5e1b6b in IMAGES) {
      var _0x34d27a = IMAGES[_0x5e1b6b];
      if (typeof _0x34d27a !== "string") {
        continue;
      }
      if (s(_0x34d27a) !== _0x26e35b) {
        continue;
      }
      IMAGES[_0x5e1b6b] = new Image();
      IMAGES[_0x5e1b6b].isLoaded = 0;
      IMAGES[_0x5e1b6b].loadAttempts = 0;
      IMAGES[_0x5e1b6b].onload = I;
      IMAGES[_0x5e1b6b].onerror = _0x550201;
      IMAGES[_0x5e1b6b].tryLoad = E;
      if (window.location.protocol !== "https:") {
        IMAGES[_0x5e1b6b]["_src"] = _0x34d27a;
      } else {
        IMAGES[_0x5e1b6b]["_src"] = "https://starve.io/" + _0x34d27a;
      }
    }
  }
  _0xc1ce8b(1);
  _0xc1ce8b(0);
  create_text(1, "l", 20, "#000");
  c();
  _load_images();
  this.update = function () {
    this.logo.translate.x = (canw - 500) / 2;
    this.logo.translate.y = (canh - 150) / 2;
    var _0x15bff6 = 2500 / (40 - o + 1) - 48;
    this.logo.translate.y -= _0x15bff6;
    this.logo.update();
  };
  this.logo.update();
  this.draw = function () {
    try {
      draw_fake_world();
    } catch (_0x1627f3) {}
    this.update();
  };
}
function UI(T, E) {
  this.can = T;
  this.ctx = E;
  window.navigator.userAgent.indexOf("Edge") > -1
    ? ((this.cursor0 = "default"), (this.cursor1 = "pointer"))
    : ((this.cursor0 = "url('img/cursor0.png'), default"),
      (this.cursor1 = "url('img/cursor1.png'), pointer"));
  var _0x17c2fe = this;
  this.waiting = false;
  this.in_this_view = 0;
  this.current_mode_score = -1;
  this.loading = {
    translate: {
      x: 0,
      y: 0,
    },
    angle: 0,
    img: sprite[SPRITE.GEAR2],
    draw: function () {
      this.angle += delta * 2;
      E.save();
      E.translate(
        this.translate.x + this.img.width / 2,
        this.translate.y + this.img.height / 2
      );
      E.rotate(this.angle);
      ctxDrawImage(E, this.img, -this.img.width / 2, -this.img.height / 2);
      E.restore();
    },
  };
  this.langselect = {
    id: document.getElementById("langselect"),
    style: document.getElementById("langselect").style,
    translate: {
      x: 0,
      y: 0,
    },
    update: function () {
      this.style.left = Math.floor(this.translate.x) + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    },
  };
  this.bread = 0;
  this.previous_bread = -1;
  this.bread_img = undefined;
  this.new_nickname = "";
  this.previous_new_nickname = "";
  this.new_nickname_img = undefined;
  this.lvl = 0;
  this.previous_lvl = -1;
  this.lvl_img = undefined;
  this.xp = 0;
  this.xp_dest = 0;
  this.firstName = 0;
  this.kill = 0;
  this.death = 0;
  this.time = 0;
  this.score = 0;
  this.scoreTotal = 0;
  this.bestKill = 0;
  this.bestTime = 0;
  this.bestScore = 0;
  this.seasons = [];
  this.kit = -1;
  this.previous_kit_hour = -1;
  this.previous_kit_min = -1;
  this.kit_img_min = undefined;
  this.kit_img_hour = undefined;
  this.privateServerTime = -1;
  this.previous_privateServerTime_day = -1;
  this.previous_privateServerTime_hour = -1;
  this.previous_privateServerTime_min = -1;
  this.privateServerTime_img_min = undefined;
  this.privateServerTime_img_hour = undefined;
  this.privateServerTime_img_day = undefined;
  this.cosmetic_name = undefined;
  this.cosmetic_author = undefined;
  this.leaderboard_range = undefined;
  this.leaderboard_mode = undefined;
  this.leaderboard_sorted = undefined;
  this.leaderboard_season = undefined;
  this.profile_season = 3;
  this.breath = 0;
  function _0x1162d0(_0xbf274, _0x131e25, _0x5b836d, _0x4f378a, _0xce351c) {
    var _0x3dd952 = this,
      _0x53e156 = _0x131e25 + 9,
      _0x272958 = 0,
      _0x46fd50 = _0x4f378a;
    for (var _0x309141 = _0x131e25; _0x309141 < _0x53e156; _0x309141++) {
      _0x17c2fe.buttons[_0x309141].info.callback = _0x327196;
      _0x17c2fe.buttons[_0x309141].info.cosmeticType = _0xbf274;
    }
    function _0x3b90ab() {
      var _0x25422b = _0xbf274[_0x46fd50];
      ui.cosmetic_name = gui_render_text(
        _0x25422b.name,
        "'Baloo Paaji', sans-serif",
        "#EFE4B4",
        30,
        350,
        undefined,
        10,
        8
      );
      if (_0x25422b.level !== undefined) {
        ui.cosmetic_author = gui_render_text(
          "Level " + _0x25422b.level,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          30,
          250,
          undefined,
          10,
          8
        );
      } else {
        ui.cosmetic_author = gui_render_text(
          "by " + _0x25422b.author,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          30,
          250,
          undefined,
          10,
          8
        );
      }
    }
    function _0x327196() {
      if (_0x46fd50 === this.cosmeticId || this.cosmeticId === -1) {
        return;
      }
      if (this.unlocked > 0) {
        if (_0x131e25 === FIRST_BUTTON_SKIN) {
          _0x180688(_0x26adac, 0, "none");
        } else {
          _0x180688(_0x4adb22, 0, "none");
        }
      } else {
        if (_0x131e25 === FIRST_BUTTON_SKIN) {
          _0x180688(_0x26adac, 1, "inline-block");
        } else {
          _0x180688(_0x4adb22, 1, "inline-block");
        }
      }
      _0x46fd50 = this.cosmeticId;
      _0x5b836d(this.cosmeticId);
      _0x3b90ab();
    }
    function _0xa29bc() {
      if (_0x272958 * 3 + 9 < _0xbf274.length) {
        _0x272958++;
      }
      _0x3dd952.initSelector();
    }
    function _0x3d0d00() {
      if (_0x272958 > 0) {
        _0x272958--;
      }
      _0x3dd952.initSelector();
    }
    function _0x1f2128() {
      for (
        var _0x1ca5a4 = _0x131e25, _0x3d527f = _0x272958 * 3;
        _0x1ca5a4 < _0x53e156 && _0x3d527f < _0xbf274.length;
        _0x1ca5a4++, _0x3d527f++
      ) {
        if (
          _0xbf274[_0x3d527f].rarity === RARITY.SPECIAL &&
          _0xce351c[_0x3d527f] === 0
        ) {
          _0x17c2fe.buttons[_0x1ca5a4].info.cosmeticId = -1;
          _0x17c2fe.buttons[_0x1ca5a4].info.active = 0;
          continue;
        }
        _0x17c2fe.buttons[_0x1ca5a4].info.cosmeticId = _0x3d527f;
        for (var _0x30b364 = 0; _0x30b364 < 3; _0x30b364++) {
          _0x17c2fe.buttons[_0x1ca5a4].info.img[_0x30b364] =
            RARITY_BUTTON[_0xbf274[_0x3d527f].rarity][_0x30b364];
          _0x17c2fe.buttons[_0x1ca5a4].info.active = 1;
          _0x17c2fe.buttons[_0x1ca5a4].info.unlocked = _0xce351c[_0x3d527f];
        }
      }
      for (; _0x1ca5a4 < _0x53e156; _0x1ca5a4++) {
        _0x17c2fe.buttons[_0x1ca5a4].info.cosmeticId = -1;
        _0x17c2fe.buttons[_0x1ca5a4].info.active = 0;
      }
      _0x3b90ab();
    }
    this.initSelector = _0x1f2128;
    _0x17c2fe.buttons[_0x53e156].info.callback = _0x3d0d00;
    _0x17c2fe.buttons[_0x53e156 + 1].info.callback = _0xa29bc;
  }
  this.settings = false;
  this.quality = Cookies.get("starve_quality")
    ? Cookies.get("starve_quality")
    : "high";
  this.quality === "high"
    ? ((document.getElementById("high_ing").style.backgroundColor = "#B56D18"),
      (document.getElementById("low_ing").style.backgroundColor = "#3A2A0D"),
      (this.quality = 1))
    : ((document.getElementById("low_ing").style.backgroundColor = "#B56D18"),
      (document.getElementById("high_ing").style.backgroundColor = "#3A2A0D"),
      (this.quality = 0));
  this.high_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#B56D18";
    document.getElementById("low_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_quality", "high", { expires: 30 });
    document.getElementById("input_ratio").value = 1;
    game.change_ratio();
    ui.quality = 1;
  };
  this.low_quality = function () {
    document.getElementById("high_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("low_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_quality", "low", { expires: 30 });
    document.getElementById("input_ratio").value =
      0.5 / (devicePixelRatio / backingStoreRatio);
    game.change_ratio();
    ui.quality = 0;
  };
  if (Cookies.get("starve_mapping") === undefined && lang === "FR") {
    keyboard.set_azerty();
    this.mapping = "azerty";
  } else {
    this.mapping = Cookies.get("starve_mapping")
      ? Cookies.get("starve_mapping")
      : "qwerty";
  }
  this.mapping == "azerty"
    ? (keyboard.set_azerty(),
      (document.getElementById("azerty_ing").style.backgroundColor = "#B56D18"),
      (document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D"))
    : ((document.getElementById("qwerty_ing").style.backgroundColor =
        "#B56D18"),
      (document.getElementById("azerty_ing").style.backgroundColor =
        "#3A2A0D"));
  this.set_azerty = function () {
    keyboard.set_azerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#B56D18";
    document.getElementById("qwerty_ing").style.backgroundColor = "#3A2A0D";
    Cookies.set("starve_mapping", "azerty", { expires: 30 });
  };
  this.set_qwerty = function () {
    keyboard.set_qwerty();
    document.getElementById("azerty_ing").style.backgroundColor = "#3A2A0D";
    document.getElementById("qwerty_ing").style.backgroundColor = "#B56D18";
    Cookies.set("starve_mapping", "qwerty", { expires: 30 });
  };
  this.all_rights_reserved = {
    id: document.getElementById("all_rights_reserved"),
    style: document.getElementById("all_rights_reserved").style,
    translate: {
      x: 0,
      y: 0,
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    },
  };
  function _0x52f43b() {
    var _0x4ac709 = Number(Cookies.get("starve_crate"));
    var _0x593f5c = Number(Cookies.get("starve_dead"));
    var _0x5dbcbc = Number(Cookies.get("starve_book"));
    var _0x478a6c = Number(Cookies.get("starve_bag"));
    var _0x5be752 = Number(Cookies.get("starve_skin"));
    var _0x31e982 = Number(Cookies.get("starve_accessory"));
    _0x17c2fe.skin = _0x5be752 ? _0x5be752 : 0;
    _0x17c2fe.book = _0x5dbcbc ? _0x5dbcbc : 0;
    _0x17c2fe.crate = _0x4ac709 ? _0x4ac709 : 1;
    _0x17c2fe.accessory = _0x31e982 ? _0x31e982 : 0;
    _0x17c2fe.bag = _0x478a6c ? _0x478a6c : 0;
    _0x17c2fe.dead = _0x593f5c ? _0x593f5c : 0;
  }
  _0x52f43b();
  this.unlock = {};
  this.unlock.skin = [];
  this.unlock.bag = [];
  this.unlock.book = [];
  this.unlock.crate = [];
  this.unlock.dead = [];
  this.unlock.accessory = [];
  this.day_mode = 0;
  function _0x2336c6() {
    var _0x569de6 = COSMETICS.SKIN;
    for (var _0x27b930 = 0; _0x27b930 < _0x569de6.length; _0x27b930++) {
      if (_0x569de6[_0x27b930].rarity === RARITY.FREE) {
        _0x17c2fe.unlock.skin[_0x27b930] = 1;
      } else {
        _0x17c2fe.unlock.skin[_0x27b930] = 0;
      }
    }
    var _0x569de6 = COSMETICS.ACCESSORY;
    for (var _0x27b930 = 0; _0x27b930 < _0x569de6.length; _0x27b930++) {
      if (_0x569de6[_0x27b930].rarity === RARITY.FREE) {
        _0x17c2fe.unlock.accessory[_0x27b930] = 1;
      } else {
        _0x17c2fe.unlock.accessory[_0x27b930] = 0;
      }
    }
    var _0x569de6 = COSMETICS.BAG;
    for (var _0x27b930 = 0; _0x27b930 < _0x569de6.length; _0x27b930++) {
      if (_0x569de6[_0x27b930].rarity === RARITY.FREE) {
        _0x17c2fe.unlock.bag[_0x27b930] = 1;
      } else {
        _0x17c2fe.unlock.bag[_0x27b930] = 0;
      }
    }
    var _0x569de6 = COSMETICS.BOOK;
    for (var _0x27b930 = 0; _0x27b930 < _0x569de6.length; _0x27b930++) {
      if (_0x569de6[_0x27b930].rarity === RARITY.FREE) {
        _0x17c2fe.unlock.book[_0x27b930] = 1;
      } else {
        _0x17c2fe.unlock.book[_0x27b930] = 0;
      }
    }
    var _0x569de6 = COSMETICS.CRATE;
    for (var _0x27b930 = 0; _0x27b930 < _0x569de6.length; _0x27b930++) {
      _0x569de6[_0x27b930].rarity === RARITY.FREE
        ? ((_0x17c2fe.unlock.crate[_0x27b930] = 1),
          (_0x17c2fe.unlock.dead[_0x27b930] = 1))
        : ((_0x17c2fe.unlock.crate[_0x27b930] = 0),
          (_0x17c2fe.unlock.dead[_0x27b930] = 0));
    }
  }
  this.unlock_cosmetics = _0x2336c6;
  _0x2336c6();
  this.trevda = {
    id: document.getElementById("trevda"),
    style: document.getElementById("trevda").style,
    translate: {
      x: 0,
      y: 0,
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = Math.floor(this.translate.y) + "px";
    },
  };
  var _0x435fda = 0,
    _0x4313e0 = function () {
      _0x17c2fe.update();
      _0x435fda++;
      if (_0x435fda == 30) {
        _0x17c2fe.add_event_listener();
        _0x17c2fe.in_this_view = true;
        _0x17c2fe.update();
        return;
      }
      window.setTimeout(_0x4313e0, 33);
    };
  this.quit = function (_0x1dcc49) {
    _0x21a61e = _0x1dcc49;
    _0x17c2fe.remove_event_listener();
    _0x17c2fe.in_this_view = 0;
    _0xa3786 = -1;
    _0x447c19();
  };
  var _0x21a61e,
    _0xa3786 = -1,
    _0x447c19 = function () {
      _0x17c2fe.update();
      _0xa3786++;
      if (_0xa3786 == 30) {
        Cookies.set("starve_nickname", _0x17c2fe.nickname.input.value, {
          expires: 30,
        });
        _0x17c2fe.nickname.style.display = "none";
        _0x17c2fe.server_list.style.display = "none";
        _0x17c2fe.langselect.style.display = "none";
        _0x17c2fe.all_rights_reserved.style.display = "none";
        _0x17c2fe.trevda.style.display = "none";
        _0x17c2fe.stop();
        _0x21a61e();
        return;
      }
      window.setTimeout(_0x447c19, 33);
    };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor =
      SPRITE.GROUND[fake_world.time];
    _0x17c2fe.nickname.style.display = "inline-block";
    _0x17c2fe.server_list.style.display = "inline-block";
    _0x17c2fe.langselect.style.display = "inline-block";
    _0x17c2fe.all_rights_reserved.style.display = "inline-block";
    _0x17c2fe.trevda.style.display = "inline-block";
    _0x17c2fe.waiting = false;
    _0x17c2fe.is_run = true;
    _0xa3786 = -1;
    _0x435fda = 0;
    _0x4313e0();
  };
  this.update_component = function (_0x5920c9, _0x58c4cf) {
    _0x58c4cf = _0x58c4cf < 0 ? -_0x58c4cf : _0x58c4cf;
    if ((_0x5920c9.position & 16) === 16) {
      if ((_0x5920c9.position & 1) === 1) {
        _0x5920c9.translate.x = canw2 + _0x5920c9.translate["_x"] - _0x58c4cf;
      } else {
        if ((_0x5920c9.position & 2) === 2) {
          _0x5920c9.translate.x = canw2 + _0x5920c9.translate["_x"] + _0x58c4cf;
        } else {
          _0x5920c9.translate.x = canw2 + _0x5920c9.translate["_x"];
        }
      }
    } else {
      if ((_0x5920c9.position & 1) === 1) {
        _0x5920c9.translate.x = _0x5920c9.translate["_x"] - _0x58c4cf;
      } else {
        if ((_0x5920c9.position & 2) === 2) {
          _0x5920c9.translate.x = canw - _0x5920c9.translate["_x"] + _0x58c4cf;
        } else {
          _0x5920c9.translate.x = _0x5920c9.translate["_x"];
        }
      }
    }
    if ((_0x5920c9.position & 32) === 32) {
      if ((_0x5920c9.position & 4) === 4) {
        _0x5920c9.translate.y = canh2 + _0x5920c9.translate["_y"] - _0x58c4cf;
      } else {
        if ((_0x5920c9.position & 8) === 8) {
          _0x5920c9.translate.y = canh2 + _0x5920c9.translate["_y"] + _0x58c4cf;
        } else {
          _0x5920c9.translate.y = canh2 + _0x5920c9.translate["_y"];
        }
      }
    } else {
      if ((_0x5920c9.position & 4) === 4) {
        _0x5920c9.translate.y = _0x5920c9.translate["_y"] - _0x58c4cf;
      } else {
        if ((_0x5920c9.position & 8) === 8) {
          _0x5920c9.translate.y = canh + _0x5920c9.translate["_y"] + _0x58c4cf;
        } else {
          _0x5920c9.translate.y = _0x5920c9.translate["_y"];
        }
      }
    }
    _0x5920c9.style !== undefined &&
      ((_0x5920c9.style.left = Math.floor(_0x5920c9.translate.x) + "px"),
      (_0x5920c9.style.top = Math.floor(_0x5920c9.translate.y) + "px"));
  };
  this.update = function () {
    var _0xa0094 = 0;
    if (_0x435fda != 30 || _0xa3786 != -1) {
      if (_0x435fda != 30) {
        var _0xa0094 = 1500 / (_0x435fda + 1) - 50;
      }
      if (_0xa3786 != -1) {
        var _0xa0094 = -(1750 / (30 - _0xa3786 + 1) - 48);
      }
    }
    for (var _0x35f35d = 0; _0x35f35d < this.bkgd.length; _0x35f35d++) {
      this.update_component(this.bkgd[_0x35f35d], _0xa0094);
    }
    for (var _0x35f35d = 0; _0x35f35d < this.buttons.length; _0x35f35d++) {
      this.update_component(this.buttons[_0x35f35d].info, _0xa0094);
    }
    for (var _0x35f35d = 0; _0x35f35d < this.css.length; _0x35f35d++) {
      this.update_component(this.css[_0x35f35d], _0xa0094);
    }
    this.loading.translate.x = (canw - this.loading.img.width) / 2;
    this.loading.translate.y = 0;
    this.langselect.translate.x = canw - 450;
    this.langselect.translate.y = canh - 40;
    this.all_rights_reserved.translate.x = canw - 340;
    this.all_rights_reserved.translate.y = canh - 25;
    this.trevda.translate.x = canw - 320;
    this.trevda.translate.y = 80;
    if (_0x435fda != 30 || _0xa3786 != -1) {
      var _0x1dfd6a = 0;
      if (_0x435fda != 30) {
        var _0x1dfd6a = 1500 / (_0x435fda + 1) - 50;
      }
      if (_0xa3786 != -1) {
        var _0x1dfd6a = -(1750 / (30 - _0xa3786 + 1) - 48);
      }
      this.loading.translate.y -= _0x1dfd6a > 0 ? _0x1dfd6a : -_0x1dfd6a;
      this.langselect.translate.y -= _0x1dfd6a < 0 ? _0x1dfd6a : -_0x1dfd6a;
      this.all_rights_reserved.translate.y -=
        _0x1dfd6a < 0 ? _0x1dfd6a : -_0x1dfd6a;
    }
    this.langselect.update();
    this.all_rights_reserved.update();
    this.trevda.update();
  };
  this.create_spin = function (_0x30b3e2) {
    var _0x50ed08 = document.createElement("canvas");
    var _0x33076b = _0x50ed08.getContext("2d");
    _0x50ed08.width = 342;
    _0x50ed08.height = 342;
    var _0x47e69a = -Math.PI / 2;
    for (var _0x2832af = 0; _0x2832af < _0x30b3e2.length; _0x2832af++) {
      var _0x49e2f2 = _0x30b3e2[_0x2832af][0];
      var _0x4b244d = (_0x30b3e2[_0x2832af][1] * Math.PI) / 180;
      _0x33076b.beginPath();
      _0x33076b.arc(171, 171, 170, _0x47e69a, _0x47e69a + _0x4b244d, false);
      _0x33076b.lineTo(171, 171);
      _0x33076b.fillStyle = _0x49e2f2;
      _0x33076b.fill();
      _0x47e69a += _0x4b244d;
    }
    return _0x50ed08;
  };
  this.generate_new_nickname = function () {
    this.new_nickname = document.getElementById("account_nickname_input").value;
    this.new_nickname !== this.previous_new_nickname &&
      ((this.previous_new_nickname = this.new_nickname),
      (this.new_nickname_img = gui_render_text(
        this.new_nickname,
        "'Baloo Paaji', sans-serif",
        "#EFE4B4",
        45,
        550
      )));
  };
  this.draw = function () {
    draw_fake_world();
    ui.xp = Utils.lerp(ui.xp, ui.xp_dest, 0.03);
    this.bkgd[LEVEL_GAUGE].translate.x =
      this.bkgd[0].translate.x + -72 + 165 * ui.xp;
    this.bkgd[LEVEL_GAUGE].translate["_x"] = this.bkgd[LEVEL_GAUGE].translate.x;
    this.bkgd[LEVEL_GAUGE].translate.y = this.bkgd[0].translate.y + 30;
    this.bkgd[LEVEL_GAUGE].translate["_y"] = this.bkgd[LEVEL_GAUGE].translate.y;
    for (var _0x42af8e = 2; _0x42af8e < this.bkgd.length; _0x42af8e++) {
      if (this.bkgd[_0x42af8e].active === 1) {
        this.bkgd[_0x42af8e].draw(E);
      }
    }
    var _0x2706cc = this.kit - Date.now();
    if (_0x2706cc > 0) {
      var _0x4e2aec = Math.floor(_0x2706cc / 60000);
      var _0x8a3b1 = Math.floor(_0x4e2aec / 60);
      _0x4e2aec %= 60;
      _0x4e2aec !== this.previous_kit_min &&
        ((this.previous_kit_min = _0x4e2aec),
        (_0x4e2aec = _0x4e2aec < 10 ? "0" + _0x4e2aec : "" + _0x4e2aec),
        (_0x17c2fe.kit_img_min = gui_render_text(
          _0x4e2aec,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          80,
          200
        )));
      _0x8a3b1 !== this.previous_kit_hour &&
        ((this.previous_kit_hour = _0x8a3b1),
        (_0x8a3b1 = _0x8a3b1 < 10 ? "0" + _0x8a3b1 : "" + _0x8a3b1),
        (_0x17c2fe.kit_img_hour = gui_render_text(
          _0x8a3b1,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          80,
          200
        )));
      var _0x341967 = this.bkgd[BAG_REMAIN_BOX];
      _0x341967.draw(E);
      var _0x108e03 = this.kit_img_hour;
      ctxDrawImage(
        E,
        _0x108e03,
        _0x341967.translate.x - _0x108e03.width / 4 + 182,
        _0x341967.translate.y - _0x108e03.height / 4 + 40,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = this.kit_img_min;
      ctxDrawImage(
        E,
        _0x108e03,
        _0x341967.translate.x - _0x108e03.width / 4 + 251,
        _0x341967.translate.y - _0x108e03.height / 4 + 40,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    var _0x2706cc = this.privateServerTime - Date.now();
    if (_0x2706cc > 0) {
      var _0x4e2aec = Math.floor(_0x2706cc / 60000);
      var _0x8a3b1 = Math.floor(_0x4e2aec / 60);
      var _0x30d56e = Math.floor(_0x8a3b1 / 24);
      _0x4e2aec %= 60;
      _0x8a3b1 %= 24;
      _0x4e2aec !== this.previous_privateServerTime_min &&
        ((this.previous_privateServerTime_min = _0x4e2aec),
        (_0x4e2aec = _0x4e2aec < 10 ? "0" + _0x4e2aec : "" + _0x4e2aec),
        (_0x17c2fe.privateServerTime_img_min = gui_render_text(
          _0x4e2aec,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          80,
          200
        )));
      _0x8a3b1 !== this.previous_privateServerTime_hour &&
        ((this.previous_privateServerTime_hour = _0x8a3b1),
        (_0x8a3b1 = _0x8a3b1 < 10 ? "0" + _0x8a3b1 : "" + _0x8a3b1),
        (_0x17c2fe.privateServerTime_img_hour = gui_render_text(
          _0x8a3b1,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          80,
          200
        )));
      _0x30d56e !== this.previous_privateServerTime_day &&
        ((this.previous_privateServerTime_day = _0x30d56e),
        (_0x30d56e = _0x30d56e < 10 ? "0" + _0x30d56e : "" + _0x30d56e),
        (_0x17c2fe.privateServerTime_img_day = gui_render_text(
          _0x30d56e,
          "'Baloo Paaji', sans-serif",
          "#EFE4B4",
          80,
          200
        )));
      var _0x341967 = this.bkgd[SERVER_REMAIN_BOX];
      _0x341967.draw(E);
      var _0x108e03 = this.privateServerTime_img_day;
      ctxDrawImage(
        E,
        _0x108e03,
        _0x341967.translate.x - _0x108e03.width / 4 + 113,
        _0x341967.translate.y - _0x108e03.height / 4 + 40,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = this.privateServerTime_img_hour;
      ctxDrawImage(
        E,
        _0x108e03,
        _0x341967.translate.x - _0x108e03.width / 4 + 182,
        _0x341967.translate.y - _0x108e03.height / 4 + 40,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = this.privateServerTime_img_min;
      ctxDrawImage(
        E,
        _0x108e03,
        _0x341967.translate.x - _0x108e03.width / 4 + 251,
        _0x341967.translate.y - _0x108e03.height / 4 + 40,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    if ((this.current_view & _0x5d5511) === _0x5d5511) {
      this.buttons[GAME_BUTTON].info.state = BUTTON_CLICK;
    } else {
      if ((this.current_view & _0x80e2f4) === _0x80e2f4) {
        this.buttons[LEADERBOARD_BUTTON].info.state = BUTTON_CLICK;
      } else {
        if ((this.current_view & _0xde81c8) === _0xde81c8) {
          this.buttons[COSMETICS_BUTTON].info.state = BUTTON_CLICK;
        } else {
          if ((this.current_view & _0x1ac43b) === _0x1ac43b) {
            this.buttons[PROFILE_BUTTON].info.state = BUTTON_CLICK;
          } else {
            if ((this.current_view & _0x476e4a) === _0x476e4a) {
              this.buttons[TUTORIAL_BUTTON].info.state = BUTTON_CLICK;
            } else {
              if ((this.current_view & _0x4aee28) === _0x4aee28) {
                this.buttons[LOGIN_BUTTON].info.state = BUTTON_CLICK;
              } else {
                if ((this.current_view & _0x420cd9) === _0x420cd9) {
                  this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                } else {
                  if ((this.current_view & _0x2e3869) === _0x2e3869) {
                    this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                  } else {
                    if ((this.current_view & _0x29174c) === _0x29174c) {
                      this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                    } else {
                      if ((this.current_view & _0x375aac) === _0x375aac) {
                        this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                      } else {
                        if ((this.current_view & _0xdf9170) === _0xdf9170) {
                          this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                        } else {
                          if ((this.current_view & _0x1fb928) === _0x1fb928) {
                            this.buttons[SHOP_BUTTON].info.state = BUTTON_CLICK;
                          } else {
                            if ((this.current_view & _0x361724) === _0x361724) {
                              this.buttons[SHOP_BUTTON].info.state =
                                BUTTON_CLICK;
                            } else {
                              if (
                                (this.current_view & _0x186fd7) ===
                                _0x186fd7
                              ) {
                                this.buttons[COSMETICS_BUTTON].info.state =
                                  BUTTON_CLICK;
                              } else {
                                if (
                                  (this.current_view & _0x5b3cf3) ===
                                  _0x5b3cf3
                                ) {
                                  this.buttons[COSMETICS_BUTTON].info.state =
                                    BUTTON_CLICK;
                                } else {
                                  if (
                                    (this.current_view & _0x28bc8a) ===
                                    _0x28bc8a
                                  ) {
                                    this.buttons[COSMETICS_BUTTON].info.state =
                                      BUTTON_CLICK;
                                  } else {
                                    if (
                                      (this.current_view & _0x2540d5) ===
                                      _0x2540d5
                                    ) {
                                      this.buttons[
                                        COSMETICS_BUTTON
                                      ].info.state = BUTTON_CLICK;
                                    } else {
                                      if (
                                        (this.current_view & _0x2c6c5b) ===
                                        _0x2c6c5b
                                      ) {
                                        this.buttons[
                                          COSMETICS_BUTTON
                                        ].info.state = BUTTON_CLICK;
                                      } else {
                                        if (
                                          (this.current_view & _0x696127) ===
                                          _0x696127
                                        ) {
                                          this.buttons[
                                            COSMETICS_BUTTON
                                          ].info.state = BUTTON_CLICK;
                                        } else {
                                          if (
                                            (this.current_view & _0x31ef04) ===
                                            _0x31ef04
                                          ) {
                                            this.buttons[
                                              SERVER_BUTTON
                                            ].info.state = BUTTON_CLICK;
                                          } else {
                                            if (
                                              (this.current_view &
                                                _0x2a634d) ===
                                              _0x2a634d
                                            ) {
                                              this.buttons[
                                                SERVER_BUTTON
                                              ].info.state = BUTTON_CLICK;
                                            } else {
                                              if (
                                                (this.current_view &
                                                  _0x45dddf) ===
                                                _0x45dddf
                                              ) {
                                                this.buttons[
                                                  SERVER_BUTTON
                                                ].info.state = BUTTON_CLICK;
                                              } else {
                                                if (
                                                  (this.current_view &
                                                    _0x3fbd88) ===
                                                  _0x3fbd88
                                                ) {
                                                  this.buttons[
                                                    PROFILE_BUTTON
                                                  ].info.state = BUTTON_CLICK;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ((this.current_view & _0x80e2f4) === _0x80e2f4) {
      this.leaderboard_mode === this.LEADERBOARD_TOTAL
        ? ((this.leaderboard_range = this.LEADERBOARD_ALL),
          (this.buttons[this.LEADERBOARD_ALL].info.active = 0),
          (this.buttons[this.LEADERBOARD_WEEK].info.active = 0),
          (this.buttons[this.LEADERBOARD_TODAY].info.active = 0))
        : ((this.buttons[this.LEADERBOARD_ALL].info.active = 1),
          (this.buttons[this.LEADERBOARD_WEEK].info.active = 1),
          (this.buttons[this.LEADERBOARD_TODAY].info.active = 1));
      if (this.leaderboard_mode === this.LEADERBOARD_NORMAL) {
        this.buttons[this.LEADERBOARD_NORMAL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_mode === this.LEADERBOARD_VAMPIRE) {
          this.buttons[this.LEADERBOARD_VAMPIRE].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_mode === this.LEADERBOARD_TOTAL) {
            this.buttons[this.LEADERBOARD_TOTAL].info.state = BUTTON_CLICK;
          } else {
            if (this.leaderboard_mode === this.LEADERBOARD_ZOMBIE) {
              this.buttons[this.LEADERBOARD_ZOMBIE].info.state = BUTTON_CLICK;
            } else {
              if (this.leaderboard_mode === this.LEADERBOARD_FOREST) {
                this.buttons[this.LEADERBOARD_FOREST].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
      if (this.leaderboard_range === this.LEADERBOARD_ALL) {
        this.buttons[this.LEADERBOARD_ALL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_range === this.LEADERBOARD_WEEK) {
          this.buttons[this.LEADERBOARD_WEEK].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_range === this.LEADERBOARD_TODAY) {
            this.buttons[this.LEADERBOARD_TODAY].info.state = BUTTON_CLICK;
          }
        }
      }
      if (this.leaderboard_sorted === this.LEADERBOARD_KILL) {
        this.buttons[this.LEADERBOARD_KILL].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_sorted === this.LEADERBOARD_SCORE) {
          this.buttons[this.LEADERBOARD_SCORE].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_sorted === this.LEADERBOARD_TIME) {
            this.buttons[this.LEADERBOARD_TIME].info.state = BUTTON_CLICK;
          }
        }
      }
      if (this.leaderboard_season === this.LEADERBOARD_SEASON1) {
        this.buttons[this.LEADERBOARD_SEASON1].info.state = BUTTON_CLICK;
      } else {
        if (this.leaderboard_season === this.LEADERBOARD_SEASON2) {
          this.buttons[this.LEADERBOARD_SEASON2].info.state = BUTTON_CLICK;
        } else {
          if (this.leaderboard_season === this.LEADERBOARD_SEASON3) {
            this.buttons[this.LEADERBOARD_SEASON3].info.state = BUTTON_CLICK;
          } else {
            if (this.leaderboard_season === this.LEADERBOARD_SEASON4) {
              this.buttons[this.LEADERBOARD_SEASON4].info.state = BUTTON_CLICK;
            } else {
              if (this.leaderboard_season === this.LEADERBOARD_SEASON5) {
                this.buttons[this.LEADERBOARD_SEASON5].info.state =
                  BUTTON_CLICK;
              }
            }
          }
        }
      }
    }
    if ((this.current_view & _0x1ac43b) === _0x1ac43b) {
      if (this.current_mode_score === -1) {
        this.buttons[_0x2ec218].info.state = BUTTON_CLICK;
      } else {
        if (this.current_mode_score === WORLD.MODE_PVP) {
          this.buttons[_0x1a3677].info.state = BUTTON_CLICK;
        } else {
          if (this.current_mode_score === WORLD.MODE_ZOMBIES) {
            this.buttons[_0xae4302].info.state = BUTTON_CLICK;
          } else {
            if (this.current_mode_score === WORLD.MODE_VAMPIRES) {
              this.buttons[_0x4e464d].info.state = BUTTON_CLICK;
            } else {
              if (this.current_mode_score === WORLD.MODE_LEGACY) {
                this.buttons[_0x13bc0e].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
      if (this.profile_season === 0) {
        this.buttons[_0x213433].info.state = BUTTON_CLICK;
      } else {
        if (this.profile_season === 1) {
          this.buttons[_0x56f308].info.state = BUTTON_CLICK;
        } else {
          if (this.profile_season === 2) {
            this.buttons[_0x3d9afb].info.state = BUTTON_CLICK;
          } else {
            if (this.profile_season === 3) {
              this.buttons[_0x40b56b].info.state = BUTTON_CLICK;
            } else {
              if (this.profile_season === 4) {
                this.buttons[_0x5bb3c1].info.state = BUTTON_CLICK;
              }
            }
          }
        }
      }
    }
    if (
      (this.current_view & _0x5d5511) === _0x5d5511 &&
      client.privateServer === 0
    ) {
      if (this.buttons[_0x368254].in_button(mouse.pos)) {
        this.buttons[_0x368254].hint = Math.min(
          1,
          this.buttons[_0x368254].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x368254].hint = Math.max(
          0,
          this.buttons[_0x368254].hint - delta * 1.5
        );
      }
      if (this.buttons[_0x3ab2c7].in_button(mouse.pos)) {
        this.buttons[_0x3ab2c7].hint = Math.min(
          1,
          this.buttons[_0x3ab2c7].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x3ab2c7].hint = Math.max(
          0,
          this.buttons[_0x3ab2c7].hint - delta * 1.5
        );
      }
      if (this.buttons[_0x37d275].in_button(mouse.pos)) {
        this.buttons[_0x37d275].hint = Math.min(
          1,
          this.buttons[_0x37d275].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x37d275].hint = Math.max(
          0,
          this.buttons[_0x37d275].hint - delta * 1.5
        );
      }
      if (this.buttons[_0x5a6620].in_button(mouse.pos)) {
        this.buttons[_0x5a6620].hint = Math.min(
          1,
          this.buttons[_0x5a6620].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x5a6620].hint = Math.max(
          0,
          this.buttons[_0x5a6620].hint - delta * 1.5
        );
      }
      if (this.buttons[_0x50b4c7].in_button(mouse.pos)) {
        this.buttons[_0x50b4c7].hint = Math.min(
          1,
          this.buttons[_0x50b4c7].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x50b4c7].hint = Math.max(
          0,
          this.buttons[_0x50b4c7].hint - delta * 1.5
        );
      }
      if (this.buttons[_0x57fbe1].in_button(mouse.pos)) {
        this.buttons[_0x57fbe1].hint = Math.min(
          1,
          this.buttons[_0x57fbe1].hint + delta * 1.5
        );
      } else {
        this.buttons[_0x57fbe1].hint = Math.max(
          0,
          this.buttons[_0x57fbe1].hint - delta * 1.5
        );
      }
    }
    var _0x1f22a9 = 1;
    if (
      (this.current_view &
        (_0x2e3869 |
          _0x29174c |
          _0x375aac |
          _0xdf9170 |
          _0x1fb928 |
          _0x361724)) >
      1
    ) {
      var _0x108e03 = IMAGES.ARROW_SPIN;
      E.save();
      E.translate(canw2, _0x37fc71 + _0x108e03.height / 4);
      this.spin === 1 &&
        ((this.spin_effect += delta / 3),
        (_0x1f22a9 =
          this.spin_target -
          100 / Math.pow(1 + this.spin_effect, 1 + this.spin_effect)),
        E.rotate(_0x1f22a9));
      ctxDrawImage(
        E,
        _0x108e03,
        -_0x108e03.width / 4,
        -_0x108e03.height / 4,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      E.restore();
    }
    if (client.privateServer === 0) {
      if (client.current_mode === WORLD.MODE_PVP) {
        this.buttons[_0x368254].info.state = BUTTON_CLICK;
      } else {
        if (client.current_mode === WORLD.MODE_LEGACY) {
          this.buttons[_0x3ab2c7].info.state = BUTTON_CLICK;
        } else {
          if (client.current_mode === WORLD.MODE_ZOMBIES) {
            this.buttons[_0x50b4c7].info.state = BUTTON_CLICK;
          } else {
            if (client.current_mode === WORLD.MODE_VAMPIRES) {
              this.buttons[_0x57fbe1].info.state = BUTTON_CLICK;
            } else {
              if (client.current_mode === WORLD.MODE_COMMUNITY) {
                this.buttons[_0x37d275].info.state = BUTTON_CLICK;
              } else {
                if (client.current_mode === WORLD.MODE_EXPERIMENTAL) {
                  this.buttons[_0x5a6620].info.state = BUTTON_CLICK;
                }
              }
            }
          }
        }
      }
    }
    for (var _0x42af8e = 1; _0x42af8e < this.buttons.length; _0x42af8e++) {
      if (this.buttons[_0x42af8e].info.active === 1) {
        this.buttons[_0x42af8e].draw(E);
      }
    }
    this.bkgd[0].draw(E);
    if ((this.current_view & (_0x324c72 | _0x203b91)) > 0) {
      var _0x108e03 = this.new_nickname_img;
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4,
        138,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    var _0x1cda44 = Math.max(1, Math.min(18, Math.floor((ui.lvl + 3) / 2)));
    this.bkgd[_0x1cda44].active = 1;
    this.bkgd[_0x1cda44].draw(E);
    this.bkgd[_0x1cda44].active = 0;
    this.buttons[0].draw(E);
    if (
      (this.current_view &
        (_0xde81c8 | _0x5b3cf3 | _0x2540d5 | _0x186fd7 | _0x2c6c5b)) >
      1
    ) {
      var _0x1782da =
        (this.current_view & (_0x5b3cf3 | _0x2540d5 | _0x186fd7 | _0x2c6c5b)) >
        1
          ? -190
          : 0;
      var _0x108e03 = sprite[SPRITE.BAG][this.bag][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 + _0x1782da,
        183,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      this.breath = (this.breath + delta * 1000) % 2000;
      var _0x114b73 =
        4.5 * (this.breath < 1000)
          ? this.breath / 1000
          : (2000 - this.breath) / 1000;
      var _0x108e03 = sprite[SPRITE.BOOK][this.book][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 - 62 + _0x114b73 + _0x1782da,
        240,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = sprite[SPRITE.HAND][this.skin][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 - 54 + _0x114b73 + _0x1782da,
        272,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 + 54 - _0x114b73 + _0x1782da,
        272,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = sprite[SPRITE.BODY][this.skin][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 + _0x1782da,
        222,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = sprite[SPRITE.ACCESSORY][this.accessory][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 + _0x1782da,
        222,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    if ((this.current_view & _0xde81c8) === _0xde81c8) {
      var _0x108e03 = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 - 61,
        406 - _0x108e03.height / 4,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 + 53,
        406 - _0x108e03.height / 4,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    if ((this.current_view & _0x28bc8a) === _0x28bc8a) {
      var _0x108e03 = sprite[SPRITE.CRATE][this.dead][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 - 200,
        268 - _0x108e03.height / 4,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    if ((this.current_view & _0x696127) === _0x696127) {
      var _0x108e03 = sprite[SPRITE.CRATE][this.crate][this.day_mode];
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4 - 200,
        268 - _0x108e03.height / 4,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    if (
      (this.current_view &
        (_0x5b3cf3 |
          _0x2540d5 |
          _0x186fd7 |
          _0x2c6c5b |
          _0x28bc8a |
          _0x696127)) >
      1
    ) {
      for (var _0x42af8e = 1; _0x42af8e < this.buttons.length; _0x42af8e++) {
        if ((this.buttons[_0x42af8e].view & this.current_view) === 0) {
          continue;
        }
        var _0x8562d = this.buttons[_0x42af8e].info;
        if (_0x8562d.cosmeticId >= 0) {
          var _0x108e03 = _0x8562d.cosmeticType[_0x8562d.cosmeticId].day;
          ctxDrawImage(
            E,
            _0x108e03,
            _0x8562d.translate.x - _0x108e03.width / 8 + 44.5,
            _0x8562d.translate.y - _0x108e03.height / 8 + 45.5,
            _0x108e03.width / 4,
            _0x108e03.height / 4
          );
          if (_0x8562d.unlocked !== 1) {
            var _0x108e03 = IMAGES.RED_LOCKED;
            ctxDrawImage(
              E,
              _0x108e03,
              _0x8562d.translate.x - _0x108e03.width / 4 + 44.5,
              _0x8562d.translate.y - _0x108e03.height / 4 + 44.5,
              _0x108e03.width / 2,
              _0x108e03.height / 2
            );
          }
        }
      }
      var _0x108e03 = this.cosmetic_name;
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - 312,
        375,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = this.cosmetic_author;
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - 312,
        395,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
    }
    this.bread !== this.previous_bread &&
      ((this.previous_bread = this.bread),
      (this.bread_img = gui_render_text(
        "" + this.bread,
        "'Baloo Paaji', sans-serif",
        "#EFE4B4",
        60,
        250
      )));
    ctxDrawImage(
      E,
      this.bread_img,
      this.bkgd[0].translate.x + 350,
      15,
      this.bread_img.w2,
      this.bread_img.h2
    );
    this.lvl !== this.previous_lvl &&
      ((this.previous_lvl = this.lvl),
      (this.lvl_img = gui_render_text(
        "LVL " + (this.lvl + 1),
        "'Baloo Paaji', sans-serif",
        "#EFE4B4",
        50,
        250,
        undefined,
        30,
        24,
        undefined,
        undefined,
        undefined,
        undefined,
        "#3F3019",
        20
      )));
    ctxDrawImage(
      E,
      this.lvl_img,
      this.bkgd[0].translate.x + 94,
      0,
      this.lvl_img.w2,
      this.lvl_img.h2
    );
    if (client.privateServer === 0) {
      var _0x33bff4 = this.buttons[_0x368254].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.NORMAL_MODE_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
      var _0x33bff4 = this.buttons[_0x3ab2c7].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.FOREST_MODE_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
      var _0x33bff4 = this.buttons[_0x37d275].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.MODE_COMMUNITY_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
      var _0x33bff4 = this.buttons[_0x5a6620].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.MODE_EXPERIMENTAL_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
      var _0x33bff4 = this.buttons[_0x57fbe1].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.VAMPIRE_MODE_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
      var _0x33bff4 = this.buttons[_0x50b4c7].hint;
      if (_0x33bff4 > 0) {
        var _0x108e03 = IMAGES.ZOMBIE_MODE_HOVER;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x108e03.width / 4,
          -36 - (_0x108e03.height * Utils.ease_in_out_quad(1 - _0x33bff4)) / 2,
          _0x108e03.width / 2,
          _0x108e03.height / 2
        );
      }
    }
    if (this.spin === 1 && Math.abs(_0x1f22a9 - this.spin_target) < 0.006) {
      E.globalAlpha = Math.min(1, this.spin_win_effect * 3);
      var _0x108e03 = IMAGES.SPIN_LIGHT;
      E.save();
      E.translate(canw2, 260);
      this.spin_win_effect += delta;
      E.rotate(this.spin_win_effect);
      ctxDrawImage(
        E,
        _0x108e03,
        -_0x108e03.width / 2,
        -_0x108e03.height / 2,
        _0x108e03.width,
        _0x108e03.height
      );
      E.restore();
      var _0x114b73 = 1.05 + 0.05 * Math.sin(this.spin_win_effect * 5);
      if (this.spin_type === 0) {
        _0x108e03 = COSMETICS.SKIN[this.spin_win].day;
        var _0x1bfa48 = _0x114b73 * _0x108e03.width,
          _0x34d0bc = _0x114b73 * _0x108e03.height;
        ctxDrawImage(
          E,
          _0x108e03,
          canw2 - _0x1bfa48 / 2,
          260 - _0x34d0bc / 2,
          _0x1bfa48,
          _0x34d0bc
        );
      } else {
        if (this.spin_type === 1) {
          _0x108e03 = COSMETICS.SKIN[0].day;
          var _0x1bfa48 = _0x114b73 * _0x108e03.width;
          var _0x34d0bc = _0x114b73 * _0x108e03.height;
          ctxDrawImage(
            E,
            _0x108e03,
            canw2 - _0x1bfa48 / 2,
            260 - _0x34d0bc / 2,
            _0x1bfa48,
            _0x34d0bc
          );
          _0x108e03 = COSMETICS.ACCESSORY[this.spin_win].day;
          var _0x1bfa48 = _0x114b73 * _0x108e03.width;
          var _0x34d0bc = _0x114b73 * _0x108e03.height;
          ctxDrawImage(
            E,
            _0x108e03,
            canw2 - _0x1bfa48 / 2,
            260 - _0x34d0bc / 2,
            _0x1bfa48,
            _0x34d0bc
          );
        } else {
          if (this.spin_type === 2) {
            _0x108e03 = COSMETICS.BAG[this.spin_win].day;
            var _0x1bfa48 = _0x114b73 * _0x108e03.width;
            var _0x34d0bc = _0x114b73 * _0x108e03.height;
            ctxDrawImage(
              E,
              _0x108e03,
              canw2 - _0x1bfa48 / 2,
              180 - _0x34d0bc / 2,
              _0x1bfa48,
              _0x34d0bc
            );
            _0x108e03 = COSMETICS.SKIN[0].day;
            var _0x1bfa48 = _0x114b73 * _0x108e03.width;
            var _0x34d0bc = _0x114b73 * _0x108e03.height;
            ctxDrawImage(
              E,
              _0x108e03,
              canw2 - _0x1bfa48 / 2,
              260 - _0x34d0bc / 2,
              _0x1bfa48,
              _0x34d0bc
            );
          } else {
            if (this.spin_type === 3) {
              _0x108e03 = COSMETICS.BOOK[this.spin_win].day;
              var _0x1bfa48 = _0x114b73 * _0x108e03.width;
              var _0x34d0bc = _0x114b73 * _0x108e03.height;
              E.save();
              E.translate(canw2, 260);
              E.rotate(Math.PI);
              ctxDrawImage(
                E,
                _0x108e03,
                -_0x1bfa48 / 2,
                -_0x34d0bc / 2,
                _0x1bfa48,
                _0x34d0bc
              );
              E.restore();
            } else {
              if (this.spin_type === 4) {
                _0x108e03 = COSMETICS.CRATE[this.spin_win].day;
                var _0x1bfa48 = _0x114b73 * _0x108e03.width,
                  _0x34d0bc = _0x114b73 * _0x108e03.height;
                ctxDrawImage(
                  E,
                  _0x108e03,
                  canw2 - _0x1bfa48 / 2,
                  260 - _0x34d0bc / 2,
                  _0x1bfa48,
                  _0x34d0bc
                );
              }
            }
          }
        }
      }
      var _0x108e03 = this.spin_name;
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4,
        340,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      var _0x108e03 = this.spin_author;
      ctxDrawImage(
        E,
        _0x108e03,
        canw2 - _0x108e03.width / 4,
        365,
        _0x108e03.width / 2,
        _0x108e03.height / 2
      );
      this.spin_win_effect > 6 && ((this.spin = 0), _0x23223b(_0x420cd9));
      E.globalAlpha = 1;
    }
    user.alert.draw("#FFF", "#000");
    if (_0x17c2fe.waiting) {
      this.loading.draw();
    }
  };
  var _0x5c9aca = 0,
    _0x5d5511 = Math.pow(2, _0x5c9aca++),
    _0x1ac43b = Math.pow(2, _0x5c9aca++);
  this["__PROFILE__"] = _0x1ac43b;
  var _0x4aee28 = Math.pow(2, _0x5c9aca++),
    _0xde81c8 = Math.pow(2, _0x5c9aca++),
    _0x420cd9 = Math.pow(2, _0x5c9aca++),
    _0x476e4a = Math.pow(2, _0x5c9aca++),
    _0x80e2f4 = Math.pow(2, _0x5c9aca++),
    _0x333258 = Math.pow(2, _0x5c9aca++);
  this["__BUY__"] = _0x333258;
  var _0x26adac = Math.pow(2, _0x5c9aca++),
    _0x4adb22 = Math.pow(2, _0x5c9aca++),
    _0x2e3869 = Math.pow(2, _0x5c9aca++),
    _0x29174c = Math.pow(2, _0x5c9aca++),
    _0x375aac = Math.pow(2, _0x5c9aca++),
    _0xdf9170 = Math.pow(2, _0x5c9aca++),
    _0x1fb928 = Math.pow(2, _0x5c9aca++),
    _0x361724 = Math.pow(2, _0x5c9aca++),
    _0x186fd7 = Math.pow(2, _0x5c9aca++),
    _0x28bc8a = Math.pow(2, _0x5c9aca++),
    _0x5b3cf3 = Math.pow(2, _0x5c9aca++),
    _0x2540d5 = Math.pow(2, _0x5c9aca++),
    _0x2c6c5b = Math.pow(2, _0x5c9aca++),
    _0x696127 = Math.pow(2, _0x5c9aca++),
    _0x203b91 = Math.pow(2, _0x5c9aca++),
    _0x324c72 = Math.pow(2, _0x5c9aca++),
    _0x31ef04 = Math.pow(2, _0x5c9aca++);
  this["__SERVER_LOCATION__"] = _0x31ef04;
  var _0x2a634d = Math.pow(2, _0x5c9aca++);
  this["__SERVER_DURATION__"] = _0x2a634d;
  var _0x45dddf = Math.pow(2, _0x5c9aca++);
  this["__SERVER_ACCESS__"] = _0x45dddf;
  var _0x3fbd88 = Math.pow(2, _0x5c9aca++);
  this.current_view = _0x5d5511;
  function _0x180688(_0x380dbd, _0x2a8e1d, _0x502091) {
    for (var _0x9cd19b = 0; _0x9cd19b < _0x17c2fe.bkgd.length; _0x9cd19b++) {
      if ((_0x17c2fe.bkgd[_0x9cd19b].view & _0x380dbd) !== 0) {
        _0x17c2fe.bkgd[_0x9cd19b].active = _0x2a8e1d;
      }
    }
    for (var _0x9cd19b = 0; _0x9cd19b < _0x17c2fe.buttons.length; _0x9cd19b++) {
      if ((_0x17c2fe.buttons[_0x9cd19b].view & _0x380dbd) !== 0) {
        _0x17c2fe.buttons[_0x9cd19b].info.active = _0x2a8e1d;
      }
    }
    for (var _0x9cd19b = 0; _0x9cd19b < _0x17c2fe.css.length; _0x9cd19b++) {
      if ((_0x17c2fe.css[_0x9cd19b].view & _0x380dbd) !== 0) {
        _0x17c2fe.css[_0x9cd19b].style.display = _0x502091;
      }
    }
  }
  var _0x2889c6 = [];
  this.hijackedAsset = 0;
  function _0x4b1ad4(_0x58af54, _0x2b2d2e) {
    _0x58af54 = _0x58af54.replace("Xday", "day");
    _0x58af54 = _0x58af54.replace("Xnight", "night");
    for (var _0x3cb4fa = 0; _0x3cb4fa < _0x2889c6.length; _0x3cb4fa++) {
      var _0x4315d6 = _0x2889c6[_0x3cb4fa];
      if (_0x4315d6[0] === _0x58af54) {
        if (_0x4315d6[1] !== _0x2b2d2e) {
          ui.hijackedAsset = 1;
        }
        return;
      }
    }
    _0x2889c6.push([_0x58af54, _0x2b2d2e]);
  }
  function _0x63af0b(_0x5109ac) {
    _0x5109ac = _0x5109ac.replace("http://starve.io", "https://starve.io");
    var _0x2dde64 = new XMLHttpRequest();
    _0x2dde64.open("HEAD", _0x5109ac, true);
    _0x2dde64.onreadystatechange = function () {
      if (_0x2dde64.readyState === 4) {
        if (_0x2dde64.status === 200) {
          var _0x28c8b0 = Number(_0x2dde64.getResponseHeader("Content-Length"));
          if (_0x28c8b0 > 0) {
            _0x4b1ad4(_0x5109ac, _0x28c8b0);
          }
        }
      }
    };
    _0x2dde64.send(null);
  }
  function _0x36aa75() {}
  function _0x1426c1() {
    var _0xabae95 = Number(Cookies.get("starve_crate"));
    var _0x1daff6 = Number(Cookies.get("starve_dead"));
    var _0x21c176 = Number(Cookies.get("starve_book"));
    var _0x51ac3f = Number(Cookies.get("starve_bag"));
    var _0x431831 = Number(Cookies.get("starve_skin"));
    var _0x258c82 = Number(Cookies.get("starve_accessory"));
    if (!(ui.unlock.skin[ui.skin] > 0)) {
      ui.skin = !(ui.unlock.skin[_0x431831] > 0) ? 0 : _0x431831;
    }
    if (!(ui.unlock.book[ui.book] > 0)) {
      ui.book = !(ui.unlock.book[_0x21c176] > 0) ? 0 : _0x21c176;
    }
    if (!(ui.unlock.dead[ui.dead] > 0)) {
      ui.dead = !(ui.unlock.dead[_0x1daff6] > 0) ? 0 : _0x1daff6;
    }
    if (!(ui.unlock.crate[ui.crate] > 0)) {
      ui.crate = !(ui.unlock.crate[_0xabae95] > 0) ? 0 : _0xabae95;
    }
    if (!(ui.unlock.accessory[ui.accessory] > 0)) {
      ui.accessory = !(ui.unlock.accessory[_0x258c82] > 0) ? 0 : _0x258c82;
    }
    if (!(ui.unlock.bag[ui.bag] > 0)) {
      ui.bag = !(ui.unlock.bag[_0x51ac3f] > 0) ? 0 : _0x51ac3f;
    }
  }
  function _0x23223b(_0x499165) {
    if (_0x17c2fe.in_this_view === false) {
      return;
    }
    _0x180688(_0x26adac, 0, "none");
    _0x180688(_0x4adb22, 0, "none");
    _0x1426c1();
    if (_0x499165 === _0x17c2fe.current_view || _0x17c2fe.spin >= 1) {
      return;
    }
    if (
      _0x499165 === _0x5d5511 ||
      _0x499165 === _0x420cd9 ||
      _0x499165 === _0x1ac43b ||
      _0x499165 === _0x80e2f4 ||
      _0x499165 === _0xde81c8 ||
      _0x499165 === _0x476e4a
    ) {
      _0x17c2fe.trevda.style.display = "inline-block";
    } else {
      _0x17c2fe.trevda.style.display = "none";
    }
    _0x180688(_0x17c2fe.current_view, 0, "none");
    _0x17c2fe.current_view = _0x499165;
    _0x180688(_0x17c2fe.current_view, 1, "inline-block");
  }
  this.select_subview = _0x23223b;
  function _0x4f145f() {
    _0x1426c1();
    !(___adsvid % 2) && isYolla === 1
      ? (console.log("Showing ads"),
        window.YMPB.que.push(function () {
          document.getElementById("preroll").style.display = "block";
          window.YMPB.preroll("preroll", yollaCallback);
        }))
      : (console.log("Connecting to game"), client.connect());
  }
  function _0x12bdb0(_0x2099e7, _0x32c02d, _0x1a0a07) {
    const _0x1ebf51 = new XMLHttpRequest();
    _0x1ebf51.open("GET", _0x2099e7);
    _0x1ebf51.setRequestHeader(
      "Content-Type",
      "application/x-www-form-urlencoded"
    );
    _0x1ebf51.onreadystatechange = function () {
      if (this.readyState == 4 && this.status == 200) {
        if (_0x32c02d !== undefined) {
          _0x32c02d(_0x1ebf51.responseText);
        }
      } else {
        if (this.readyState == 4) {
          if (_0x1a0a07 !== undefined) {
            _0x1a0a07();
          }
        }
      }
    };
    _0x1ebf51.send();
  }
  this.play_game = function () {
    if (_0x17c2fe.waiting === false) {
      user.reconnect.enabled = false;
      _0x17c2fe.waiting = true;
      if (user.newToken) {
        _0x4f145f();
      } else {
        _0x12bdb0(
          DB + "token",
          function (e) {
            console.log("::: [iandev] /token token :::", e);
            try {
              var t = e.split("_"),
                i = t[0] + "_",
                r = Number(t[1]),
                a = Math.abs(entrypoint(r));
              console.log("::: [iandev] /challenge token :::", a);
              user.newToken = i + a;
            } catch (_0xc391cc) {
              console.error("::: [iandev] /token error :::", _0xc391cc);
            }
            _0x4f145f();
          },
          function () {
            _0x17c2fe.waiting = false;
          }
        );
      }
    }
  };
  window.innerWidth < 1300
    ? (this.nickname = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: 1,
        position: 4 | 1,
        view: _0x5d5511,
        translate: {
          x: 0,
          y: 0,
          _x: 200,
          _y: 184,
        },
      })
    : (this.nickname = {
        id: document.getElementById("nickname_block"),
        style: document.getElementById("nickname_block").style,
        input: document.getElementById("nickname_input"),
        active: 1,
        position: 4 | 16,
        view: _0x5d5511,
        translate: {
          x: 0,
          y: 0,
          _x: -180,
          _y: 184,
        },
      });
  this.nickname.id.addEventListener("keyup", function (_0x3e51ad) {
    _0x3e51ad.preventDefault();
    if (_0x3e51ad.keyCode == 13 && !_0x17c2fe.waiting && !_0x17c2fe.settings) {
      _0x17c2fe.play_game();
    }
  });
  this.nickname.input.value = Cookies.get("starve_nickname")
    ? Cookies.get("starve_nickname")
    : "";
  this.account_nickname = {
    id: document.getElementById("account_nickname_block"),
    style: document.getElementById("account_nickname_block").style,
    input: document.getElementById("account_nickname_input"),
    active: 0,
    position: 4 | 16,
    view: _0x1ac43b,
    translate: {
      x: 0,
      y: 0,
      _x: -122,
      _y: 110,
    },
  };
  if (window.innerWidth < 1300) {
    this.server_list = {
      id: document.getElementById("servselect"),
      style: document.getElementById("servselect").style,
      active: 1,
      position: 4 | 1,
      view: _0x5d5511,
      translate: {
        x: 0,
        y: 0,
        _x: 208,
        _y: 225,
      },
    };
  } else {
    this.server_list = {
      id: document.getElementById("servselect"),
      style: document.getElementById("servselect").style,
      active: 1,
      position: 4 | 16,
      view: _0x5d5511,
      translate: {
        x: 0,
        y: 0,
        _x: -180,
        _y: 225,
      },
    };
  }
  this.leaderboard = {
    id: document.getElementById("leaderboard"),
    style: document.getElementById("leaderboard").style,
    active: 0,
    position: 4 | 16,
    view: _0x80e2f4,
    translate: {
      x: 0,
      y: 0,
      _x: -294.5,
      _y: 190,
    },
  };
  this.stats_box = {
    id: document.getElementById("stats_box"),
    style: document.getElementById("stats_box").style,
    active: 0,
    position: 4 | 16,
    view: _0x1ac43b,
    translate: {
      x: 0,
      y: 0,
      _x: 125,
      _y: 187,
    },
  };
  this.serverAddressBlock = {
    id: document.getElementById("serverAddressBlock"),
    style: document.getElementById("serverAddressBlock").style,
    input: document.getElementById("serverAddressInput"),
    active: 0,
    position: 4 | 16,
    view: _0x45dddf,
    translate: {
      x: 0,
      y: 0,
      _x: -220,
      _y: 350,
    },
  };
  _0x5c9aca = 0;
  this.css = [];
  this.css[_0x5c9aca++] = this.nickname;
  this.css[_0x5c9aca++] = this.server_list;
  this.css[_0x5c9aca++] = this.leaderboard;
  this.css[_0x5c9aca++] = this.account_nickname;
  this.css[_0x5c9aca++] = this.stats_box;
  this.css[_0x5c9aca++] = this.serverAddressBlock;
  _0x5c9aca = 0;
  this.bkgd = [];
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(
    IMAGES.AVATAR_RESUME,
    1,
    0,
    0,
    1
  );
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL1, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL2, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL3, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL4, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL5, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL6, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL7, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL8, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL9, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL10, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL11, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL12, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL13, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL14, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL15, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL16, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL17, 0, 0, 0, 1);
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.AVATAR_LVL18, 0, 0, 0, 1);
  if (window.innerWidth < 1300) {
    this.bkgd[_0x5c9aca] = gui_create_image_hd(
      IMAGES.LOGO_INTERFACE,
      1,
      200,
      100,
      4 | 1
    );
  } else {
    this.bkgd[_0x5c9aca] = gui_create_image_hd(
      IMAGES.LOGO_INTERFACE,
      1,
      -188.25,
      100,
      4 | 16
    );
  }
  this.bkgd[_0x5c9aca++].view = _0x5d5511;
  this.bkgd[_0x5c9aca++] = gui_create_image_hd(IMAGES.LINKS_BG, 1, 403, -10, 2);
  window.innerWidth > 1300 &&
    ((this.bkgd[_0x5c9aca] = gui_create_image_hd(
      IMAGES.CHANGELOG_BOX,
      1,
      -221.25,
      -159.5,
      8 | 16
    )),
    (this.bkgd[_0x5c9aca++].view = _0x5d5511));
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.PROFILE_BOX,
    0,
    -323.25,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x1ac43b;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SKINS_BOX,
    0,
    -356.25,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0xde81c8;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.ACCOUNT_BOX,
    0,
    -226.25,
    50,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x4aee28;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SHOP_BOX,
    0,
    -402,
    130,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x420cd9;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SERVER_LOCATION_BOX,
    0,
    -279.25,
    130,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x31ef04;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SERVER_DURATION_BOX,
    0,
    -305.5,
    130,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x2a634d;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SERVER_ACCESS_BOX,
    0,
    -305.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x45dddf;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SEASON5_BOX,
    0,
    -IMAGES.SEASON5_BOX.width / 4 - 350,
    -15,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x3fbd88;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.TUTORIAL_BOX,
    0,
    -374.25,
    110,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x476e4a;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.LEADERBOARD_BOX,
    0,
    -306.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x80e2f4;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.BUY_BREAD_BOX,
    0,
    -345.25,
    80,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x333258;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN1,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x2e3869;
  var _0x3f2110 = 3.6,
    _0x7ecb40 = this.create_spin([
      ["#25c5d6", _0x3f2110 * 3],
      ["#e2cf27", _0x3f2110 * 10],
      ["#afac98", _0x3f2110 * 30],
      ["#d88e23", _0x3f2110 * 57],
    ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x2e3869;
  this.play_spin = function (_0x1d5dce, _0x17a3d1, _0x6ffe59) {
    _0x17c2fe.spin = 1;
    _0x17c2fe.spin_effect = 0;
    _0x17c2fe.spin_win_effect = 0;
    _0x17c2fe.spin_target = _0x1d5dce;
    _0x17c2fe.spin_type = _0x17a3d1;
    var _0x21017b,
      _0x264693 = 0;
    if (_0x17a3d1 === 0) {
      for (_0x264693 = 0; _0x264693 < COSMETICS.SKIN.length; _0x264693++) {
        if (_0x6ffe59 === COSMETICS.SKIN[_0x264693].id) {
          break;
        }
      }
      _0x21017b = COSMETICS.SKIN[_0x264693];
      _0x17c2fe.unlock.skin[_0x264693] = 1;
    } else {
      if (_0x17a3d1 === 1) {
        for (
          _0x264693 = 0;
          _0x264693 < COSMETICS.ACCESSORY.length;
          _0x264693++
        ) {
          if (_0x6ffe59 === COSMETICS.ACCESSORY[_0x264693].id) {
            break;
          }
        }
        _0x21017b = COSMETICS.ACCESSORY[_0x264693];
        _0x17c2fe.unlock.accessory[_0x264693] = 1;
      } else {
        if (_0x17a3d1 === 2) {
          for (_0x264693 = 0; _0x264693 < COSMETICS.BAG.length; _0x264693++) {
            if (_0x6ffe59 === COSMETICS.BAG[_0x264693].id) {
              break;
            }
          }
          _0x21017b = COSMETICS.BAG[_0x264693];
          _0x17c2fe.unlock.bag[_0x264693] = 1;
        } else {
          if (_0x17a3d1 === 3) {
            for (
              _0x264693 = 0;
              _0x264693 < COSMETICS.BOOK.length;
              _0x264693++
            ) {
              if (_0x6ffe59 === COSMETICS.BOOK[_0x264693].id) {
                break;
              }
            }
            _0x21017b = COSMETICS.BOOK[_0x264693];
            _0x17c2fe.unlock.book[_0x264693] = 1;
          } else {
            if (_0x17a3d1 === 4) {
              for (
                _0x264693 = 0;
                _0x264693 < COSMETICS.CRATE.length;
                _0x264693++
              ) {
                if (_0x6ffe59 === COSMETICS.CRATE[_0x264693].id) {
                  break;
                }
              }
              _0x21017b = COSMETICS.CRATE[_0x264693];
              _0x17c2fe.unlock.crate[_0x264693] = 1;
              _0x17c2fe.unlock.dead[_0x264693] = 1;
            }
          }
        }
      }
    }
    _0x17c2fe.spin_win = _0x264693;
    _0x17c2fe.spin_author = gui_render_text(
      "by " + _0x21017b.author,
      "'Baloo Paaji', sans-serif",
      "#EFE4B4",
      40,
      500,
      undefined,
      30,
      24,
      undefined,
      undefined,
      undefined,
      undefined,
      "#000000",
      24
    );
    _0x17c2fe.spin_name = gui_render_text(
      _0x21017b.name,
      "'Baloo Paaji', sans-serif",
      "#EFE4B4",
      60,
      600,
      undefined,
      30,
      24,
      undefined,
      undefined,
      undefined,
      undefined,
      "#000000",
      20
    );
  };
  this.spin = 0;
  this.spin_effect = 0;
  this.spin_target = 0;
  this.spin_type = 0;
  this.spin_win_effect = 0;
  this.spin_author = undefined;
  this.spin_name = undefined;
  var _0x37fc71 = 197,
    _0x5a203f = -65;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN2,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x1fb928;
  var _0x7ecb40 = this.create_spin([
    ["#d45ce5", _0x3f2110 * 3],
    ["#25c5d6", _0x3f2110 * 10],
    ["#e2cf27", _0x3f2110 * 30],
    ["#afac98", _0x3f2110 * 57],
  ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x1fb928;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN3,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x375aac;
  var _0x7ecb40 = this.create_spin([
    ["#d33a2a", _0x3f2110 * 3],
    ["#d45ce5", _0x3f2110 * 10],
    ["#25c5d6", _0x3f2110 * 30],
    ["#e2cf27", _0x3f2110 * 57],
  ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x375aac;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN4,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0xdf9170;
  var _0x7ecb40 = this.create_spin([
    ["#25c5d6", _0x3f2110 * 3],
    ["#e2cf27", _0x3f2110 * 10],
    ["#afac98", _0x3f2110 * 30],
    ["#d88e23", _0x3f2110 * 57],
  ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0xdf9170;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN5,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x29174c;
  var _0x7ecb40 = this.create_spin([
    ["#d45ce5", _0x3f2110 * 3],
    ["#25c5d6", _0x3f2110 * 10],
    ["#e2cf27", _0x3f2110 * 30],
    ["#afac98", _0x3f2110 * 57],
  ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x29174c;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.SPIN6,
    0,
    -385.5,
    150,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x361724;
  var _0x7ecb40 = this.create_spin([
    ["#d33a2a", _0x3f2110 * 3],
    ["#d45ce5", _0x3f2110 * 10],
    ["#25c5d6", _0x3f2110 * 30],
    ["#e2cf27", _0x3f2110 * 57],
  ]);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    _0x7ecb40,
    0,
    -_0x7ecb40.width / 4,
    178,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x361724;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.CUSTOM_SKIN_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x186fd7;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.ACCESSORIES_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x2c6c5b;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.BAG_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x5b3cf3;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.BOOK_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x2540d5;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.CRATE_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x28bc8a;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.LOOT_BOX,
    0,
    -341.5,
    100,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x696127;
  BAG_REMAIN_BOX = _0x5c9aca++;
  this.bkgd[BAG_REMAIN_BOX] = gui_create_image_hd(
    IMAGES.BAG_REMAIN_BOX,
    0,
    484,
    0,
    4
  );
  SERVER_REMAIN_BOX = _0x5c9aca++;
  this.bkgd[SERVER_REMAIN_BOX] = gui_create_image_hd(
    IMAGES.SERVER_REMAIN_BOX,
    0,
    812.5,
    0,
    4
  );
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.LOCKED_CUSTOM_ALERT,
    0,
    -189.5,
    -5,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x4adb22;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.LOCKED_SKIN_ALERT,
    0,
    -189.5,
    -5,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x26adac;
  LEVEL_GAUGE = _0x5c9aca++;
  this.bkgd[LEVEL_GAUGE] = gui_create_image_hd(IMAGES.GAUGE, 1, 93, 30, 4);
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.CHANGE_NICKNAME1_BOX,
    0,
    -173,
    110,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x203b91;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.CHANGE_NICKNAME0_BOX,
    0,
    -173,
    110,
    4 | 16
  );
  this.bkgd[_0x5c9aca++].view = _0x324c72;
  var _0x4dfd4f = window.innerWidth < 1300 ? 500 : 310;
  this.bkgd[_0x5c9aca] = gui_create_image_hd(
    IMAGES.MOBILE_BOXAD,
    1,
    -153,
    _0x4dfd4f,
    4 | 16
  );
  this.bkgd[_0x5c9aca].view = _0x5d5511;
  _0x5c9aca = 0;
  this.buttons = [];
  this.buttons[_0x5c9aca] = gui_create_button(
    50,
    57,
    "",
    [IMAGES.BUY_BREAD_OUT, IMAGES.BUY_BREAD_IN, IMAGES.BUY_BREAD_CLICK],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        _0x23223b(_0x333258);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    320,
    0,
    1,
    1
  );
  _0x5c9aca++;
  if (window.innerWidth < 1300) {
    this.buttons[_0x5c9aca] = gui_create_button(
      202,
      97,
      "",
      [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK],
      1,
      0,
      this.play_game,
      462,
      235,
      4 | 1,
      1
    );
  } else {
    this.buttons[_0x5c9aca] = gui_create_button(
      202,
      97,
      "",
      [IMAGES.PLAY_BUTTON_OUT, IMAGES.PLAY_BUTTON_IN, IMAGES.PLAY_BUTTON_CLICK],
      1,
      0,
      this.play_game,
      74,
      235,
      4 | 16,
      1
    );
  }
  this.buttons[_0x5c9aca].view = _0x5d5511;
  _0x5c9aca++;
  this.buttons[_0x5c9aca] = gui_create_button(
    120,
    40,
    "",
    [IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE, IMAGES.APP_STORE_BADGE],
    0,
    0,
    () => window.open("https://apps.apple.com/us/app/id1538497844", "_blank"),
    -137,
    _0x4dfd4f + 200,
    4 | 16,
    1
  );
  this.buttons[_0x5c9aca].view = _0x5d5511;
  _0x5c9aca++;
  this.buttons[_0x5c9aca] = gui_create_button(
    135,
    40,
    "",
    [IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE, IMAGES.PLAY_STORE_BADGE],
    0,
    0,
    () =>
      window.open(
        "https://play.google.com/store/apps/details?id=com.addictinggames.starveio",
        "_blank"
      ),
    2,
    _0x4dfd4f + 200,
    4 | 16,
    1
  );
  this.buttons[_0x5c9aca].view = _0x5d5511;
  _0x5c9aca++;
  window.innerWidth > 1300 &&
    ((this.buttons[_0x5c9aca] = gui_create_button(
      355,
      168,
      "",
      [
        IMAGES.CHANGELOG_BUTTON_OUT,
        IMAGES.CHANGELOG_BUTTON_OUT,
        IMAGES.CHANGELOG_BUTTON_OUT,
      ],
      1,
      0,
      function () {
        window.open("./changelog.html", "_blank");
      },
      -195,
      -115,
      8 | 16,
      1
    )),
    (this.buttons[_0x5c9aca++].view = _0x5d5511),
    (this.buttons[_0x5c9aca] = gui_create_button(
      355,
      168,
      "",
      [
        IMAGES.DEVASTIO_BUTTON_OUT,
        IMAGES.DEVASTIO_BUTTON_OUT,
        IMAGES.DEVASTIO_BUTTON_OUT,
      ],
      1,
      0,
      function () {
        window.open("https://devast.io", "_blank");
      },
      20,
      -115,
      8 | 16,
      1
    )),
    (this.buttons[_0x5c9aca++].view = _0x5d5511));
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.MERCH_BUTTON_OUT,
      IMAGES.MERCH_BUTTON_IN,
      IMAGES.MERCH_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("https://shop.addictinggames.com/", "_blank");
    },
    380,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.DISCORD_BUTTON_OUT,
      IMAGES.DISCORD_BUTTON_IN,
      IMAGES.DISCORD_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("https://discord.gg/starveio", "_blank");
    },
    330,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.REDDIT_BUTTON_OUT,
      IMAGES.REDDIT_BUTTON_IN,
      IMAGES.REDDIT_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("https://reddit.com/r/starveio", "_blank");
    },
    280,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [IMAGES.WIKI_BUTTON_OUT, IMAGES.WIKI_BUTTON_IN, IMAGES.WIKI_BUTTON_CLICK],
    1,
    0,
    function () {
      window.open("https://starveiopro.wikia.com/wiki/", "_blank");
    },
    230,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.FACEBOOK_BUTTON_OUT,
      IMAGES.FACEBOOK_BUTTON_IN,
      IMAGES.FACEBOOK_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open(
        "https://www.facebook.com/pages/category/Video-Game/limaxio-571818073000979/",
        "_blank"
      );
    },
    155,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.TWITTER_BUTTON_OUT,
      IMAGES.TWITTER_BUTTON_IN,
      IMAGES.TWITTER_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("https://twitter.com/lapamauve", "_blank");
    },
    105,
    10,
    2,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    80,
    80,
    "",
    [
      IMAGES.YOUTUBE_BUTTON_OUT,
      IMAGES.YOUTUBE_BUTTON_IN,
      IMAGES.YOUTUBE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("https://youtube.com/c/lapamauve", "_blank");
    },
    55,
    10,
    2,
    1
  );
  LEADERBOARD_BUTTON = _0x5c9aca++;
  this.buttons[LEADERBOARD_BUTTON] = gui_create_button(
    232,
    142,
    "",
    [
      IMAGES.ICONS_BOTTOM_BG_BUTTON_OUT,
      IMAGES.ICONS_BOTTOM_BG_BUTTON_IN,
      IMAGES.ICONS_BOTTOM_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x80e2f4);
      getLeaderboard(
        ui.LEADERBOARD_ALL,
        ui.LEADERBOARD_TOTAL,
        ui.LEADERBOARD_SCORE,
        ui.LEADERBOARD_SEASON5
      );
    },
    -5,
    573,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON, IMAGES.LEADERBOARD_ICON],
    1,
    1,
    function () {
      _0x23223b(_0x80e2f4);
    },
    -5,
    566,
    1,
    1
  );
  TUTORIAL_BUTTON = _0x5c9aca++;
  this.buttons[TUTORIAL_BUTTON] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.ICONS_BG_BUTTON_OUT,
      IMAGES.ICONS_BG_BUTTON_IN,
      IMAGES.ICONS_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x476e4a);
    },
    -5,
    494,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON, IMAGES.TUTORIAL_ICON],
    1,
    1,
    function () {
      _0x23223b(_0x476e4a);
    },
    -5,
    494,
    1,
    1
  );
  SERVER_BUTTON = _0x5c9aca++;
  this.buttons[SERVER_BUTTON] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.ICONS_BG_BUTTON_OUT,
      IMAGES.ICONS_BG_BUTTON_IN,
      IMAGES.ICONS_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        if (ui.privateServerTime - Date.now() > 0) {
          _0x23223b(_0x45dddf);
        }
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -5,
    415,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.SERVER_ACCESS_ICON,
      IMAGES.SERVER_ACCESS_ICON,
      IMAGES.SERVER_ACCESS_ICON,
    ],
    1,
    1,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        if (ui.privateServerTime - Date.now() > 0) {
          _0x23223b(_0x45dddf);
        }
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -5,
    415,
    1,
    1
  );
  SHOP_BUTTON = _0x5c9aca++;
  this.buttons[SHOP_BUTTON] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.ICONS_BG_BUTTON_OUT,
      IMAGES.ICONS_BG_BUTTON_IN,
      IMAGES.ICONS_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    -5,
    336,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [IMAGES.SHOP_ICON, IMAGES.SHOP_ICON, IMAGES.SHOP_ICON],
    1,
    1,
    function () {
      _0x23223b(_0x420cd9);
    },
    -5,
    336,
    1,
    1
  );
  COSMETICS_BUTTON = _0x5c9aca++;
  this.buttons[COSMETICS_BUTTON] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.ICONS_BG_BUTTON_OUT,
      IMAGES.ICONS_BG_BUTTON_IN,
      IMAGES.ICONS_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -5,
    257,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [IMAGES.SKINS_ICON, IMAGES.SKINS_ICON, IMAGES.SKINS_ICON],
    1,
    1,
    function () {
      _0x23223b(_0xde81c8);
    },
    -5,
    257,
    1,
    1
  );
  GAME_BUTTON = _0x5c9aca++;
  this.buttons[GAME_BUTTON] = gui_create_button(
    236,
    165,
    "",
    [
      IMAGES.ICONS_BG_BUTTON_OUT,
      IMAGES.ICONS_BG_BUTTON_IN,
      IMAGES.ICONS_BG_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x5d5511);
    },
    -5,
    178,
    1,
    1
  );
  this.buttons[_0x5c9aca++] = gui_create_button(
    236,
    165,
    "",
    [IMAGES.START_ICON, IMAGES.START_ICON, IMAGES.START_ICON],
    1,
    1,
    function () {
      _0x23223b(_0x5d5511);
    },
    -5,
    178,
    1,
    1
  );
  LOGIN_BUTTON = _0x5c9aca++;
  this.LOGIN_BUTTON = LOGIN_BUTTON;
  this.buttons[LOGIN_BUTTON] = gui_create_button(
    324,
    222,
    "",
    [
      IMAGES.LOGIN_BUTTON_OUT,
      IMAGES.LOGIN_BUTTON_IN,
      IMAGES.LOGIN_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x4aee28);
    },
    0,
    70,
    1,
    1
  );
  PROFILE_BUTTON = _0x5c9aca++;
  PROFILE_BUTTON_2 = _0x5c9aca++;
  this.PROFILE_BUTTON = PROFILE_BUTTON;
  this.PROFILE_BUTTON_2 = PROFILE_BUTTON_2;
  this.buttons[PROFILE_BUTTON] = gui_create_button(
    324,
    222,
    "",
    [
      IMAGES.PROFILE_BUTTON_OUT,
      IMAGES.PROFILE_BUTTON_IN,
      IMAGES.PROFILE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x1ac43b);
      _0x19cab6(-1);
    },
    0,
    70,
    1,
    0
  );
  this.buttons[PROFILE_BUTTON_2] = gui_create_button(
    324,
    222,
    "",
    [IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON, IMAGES.PROFILE_ICON],
    1,
    1,
    function () {
      _0x23223b(_0x1ac43b);
      _0x19cab6(-1);
    },
    0,
    70,
    1,
    0
  );
  if (client.privateServer === 0) {
    var _0x368254 = _0x5c9aca++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x368254] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.NORMAL_MODE_OUT,
          IMAGES.NORMAL_MODE_IN,
          IMAGES.NORMAL_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_PVP);
        },
        150,
        300,
        1 | 4,
        1
      );
    } else {
      this.buttons[_0x368254] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.NORMAL_MODE_OUT,
          IMAGES.NORMAL_MODE_IN,
          IMAGES.NORMAL_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_PVP);
        },
        -340,
        100,
        16 | 4,
        1
      );
    }
    this.buttons[_0x368254].view = _0x5d5511;
    this.buttons[_0x368254].hint = 0;
    var _0x3ab2c7 = _0x5c9aca++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x3ab2c7] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.FOREST_MODE_OUT,
          IMAGES.FOREST_MODE_IN,
          IMAGES.FOREST_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_LEGACY);
        },
        150,
        400,
        1 | 4,
        1
      );
    } else {
      this.buttons[_0x3ab2c7] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.FOREST_MODE_OUT,
          IMAGES.FOREST_MODE_IN,
          IMAGES.FOREST_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_LEGACY);
        },
        -340,
        200,
        16 | 4,
        1
      );
    }
    this.buttons[_0x3ab2c7].view = _0x5d5511;
    this.buttons[_0x3ab2c7].hint = 0;
    var _0x37d275 = _0x5c9aca++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x37d275] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.MODE_COMMUNITY_OUT,
          IMAGES.MODE_COMMUNITY_IN,
          IMAGES.MODE_COMMUNITY_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_COMMUNITY);
        },
        450,
        300,
        1 | 4,
        1
      );
    } else {
      this.buttons[_0x37d275] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.MODE_COMMUNITY_OUT,
          IMAGES.MODE_COMMUNITY_IN,
          IMAGES.MODE_COMMUNITY_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_COMMUNITY);
        },
        -340,
        300,
        16 | 4,
        1
      );
    }
    this.buttons[_0x37d275].view = _0x5d5511;
    this.buttons[_0x37d275].hint = 0;
    var _0x50b4c7 = _0x5c9aca++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x50b4c7] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.ZOMBIE_MODE_OUT,
          IMAGES.ZOMBIE_MODE_IN,
          IMAGES.ZOMBIE_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_ZOMBIES);
        },
        300,
        300,
        1 | 4,
        1
      );
    } else {
      this.buttons[_0x50b4c7] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.ZOMBIE_MODE_OUT,
          IMAGES.ZOMBIE_MODE_IN,
          IMAGES.ZOMBIE_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_ZOMBIES);
        },
        204,
        100,
        16 | 4,
        1
      );
    }
    this.buttons[_0x50b4c7].view = _0x5d5511;
    this.buttons[_0x50b4c7].hint = 0;
    var _0x57fbe1 = _0x5c9aca++;
    if (window.innerWidth < 1300) {
      this.buttons[_0x57fbe1] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.VAMPIRE_MODE_OUT,
          IMAGES.VAMPIRE_MODE_IN,
          IMAGES.VAMPIRE_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_VAMPIRES);
        },
        300,
        400,
        1 | 4,
        1
      );
    } else {
      this.buttons[_0x57fbe1] = gui_create_button(
        266,
        176,
        "",
        [
          IMAGES.VAMPIRE_MODE_OUT,
          IMAGES.VAMPIRE_MODE_IN,
          IMAGES.VAMPIRE_MODE_CLICK,
        ],
        1,
        0,
        function () {
          client.select_gamemode(WORLD.MODE_VAMPIRES);
        },
        204,
        200,
        16 | 4,
        1
      );
    }
    this.buttons[_0x57fbe1].view = _0x5d5511;
    this.buttons[_0x57fbe1].hint = 0;
    var _0x5a6620 = _0x5c9aca++;
    this.buttons[_0x5a6620] = gui_create_button(
      266,
      176,
      "",
      [
        IMAGES.MODE_EXPERIMENTAL_OUT,
        IMAGES.MODE_EXPERIMENTAL_IN,
        IMAGES.MODE_EXPERIMENTAL_CLICK,
      ],
      1,
      0,
      function () {
        client.select_gamemode(WORLD.MODE_EXPERIMENTAL);
      },
      window.innerWidth < 1300 ? 450 : 204,
      window.innerWidth < 1300 ? 400 : 300,
      (window.innerWidth < 1300 ? 1 : 16) | 4,
      1
    );
    this.buttons[_0x5a6620].view = _0x5d5511;
    this.buttons[_0x5a6620].hint = 0;
  }
  this.buttons[_0x5c9aca] = gui_create_button(
    87,
    78,
    "",
    [IMAGES.MODIFY_NAME_OUT, IMAGES.MODIFY_NAME_IN, IMAGES.MODIFY_NAME_CLICK],
    1,
    0,
    function () {
      ui.generate_new_nickname();
      if (ui.firstName === 0) {
        _0x23223b(_0x324c72);
      } else {
        _0x23223b(_0x203b91);
      }
    },
    127,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  this.buttons[_0x5c9aca] = gui_create_button(
    87,
    78,
    "",
    [IMAGES.LOGOUT_OUT, IMAGES.LOGOUT_IN, IMAGES.LOGOUT_CLICK],
    1,
    0,
    function () {
      logout();
    },
    255,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  this.buttons[_0x5c9aca] = gui_create_button(
    58,
    64,
    "",
    [
      IMAGES.CLOSE_BUTTON_OUT,
      IMAGES.CLOSE_BUTTON_IN,
      IMAGES.CLOSE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x5d5511);
    },
    189,
    118,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x4aee28;
  this.buttons[_0x5c9aca] = gui_create_button(
    497,
    72,
    "",
    [
      IMAGES.LOGIN_GOOGLE_OUT,
      IMAGES.LOGIN_GOOGLE_IN,
      IMAGES.LOGIN_GOOGLE_CLICK,
    ],
    1,
    0,
    function () {
      loginWithGoogle();
    },
    -130,
    390,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x4aee28;
  this.buttons[_0x5c9aca] = gui_create_button(
    497,
    72,
    "",
    [
      IMAGES.LOGIN_FACEBOOK_OUT,
      IMAGES.LOGIN_FACEBOOK_IN,
      IMAGES.LOGIN_FACEBOOK_CLICK,
    ],
    1,
    0,
    function () {
      logWithFacebook();
    },
    -130,
    430,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x4aee28;
  __LEVEL_FACTOR__ = 20000;
  function _0xc18bb8(_0x5a4e0b) {
    var _0x3a6c55 = ui.level_formula(_0x5a4e0b);
    var _0x3b7293 = _0x3a6c55 * _0x3a6c55 * __LEVEL_FACTOR__;
    var _0x1e1e99 =
      (_0x3a6c55 + 1) * (_0x3a6c55 + 1) * __LEVEL_FACTOR__ - _0x3b7293;
    _0x5a4e0b -= _0x3b7293;
    return _0x5a4e0b / _0x1e1e99;
  }
  this.xp_formula = _0xc18bb8;
  function _0xd42fb8(_0x272460) {
    return Math.floor(Math.sqrt(_0x272460 / __LEVEL_FACTOR__));
  }
  this.level_formula = _0xd42fb8;
  this.update_score = function (_0x44065e) {
    ui.lvl = ui.level_formula(_0x44065e);
    ui.xp_dest = ui.xp_formula(_0x44065e);
    ui.xp = 0;
    ui.score = _0x44065e;
  };
  function _0x19cab6(_0xde076e, _0x370ecb) {
    if (_0x370ecb !== undefined) {
      ui.profile_season = _0x370ecb;
      var _0x30799c = ui.seasons[_0x370ecb];
      ui.score = _0x30799c.score;
      ui.kill = _0x30799c.kill;
      ui.death = _0x30799c.death;
      ui.time = _0x30799c.time;
      ui.bestScore = _0x30799c.bestScore;
      ui.bestKill = _0x30799c.bestKill;
      ui.bestTime = _0x30799c.bestTime;
      ui.scoreTotal = _0x30799c.scoreTotal;
    }
    if (_0xde076e === undefined) {
      _0xde076e = ui.current_mode_score;
    }
    ui.current_mode_score = _0xde076e;
    if (_0xde076e >= 0) {
      document.getElementById("stats_box_time").innerHTML =
        ui.bestTime[_0xde076e];
      document.getElementById("stats_box_kill").innerHTML =
        ui.bestKill[_0xde076e];
      document.getElementById("stats_box_score").innerHTML =
        ui.bestScore[_0xde076e];
    } else {
      var _0x3228cd = 0;
      for (var _0x226ef5 = 0; _0x226ef5 < ui.kill.length; _0x226ef5++) {
        _0x3228cd += ui.kill[_0x226ef5];
      }
      var _0x3160e2 = 0;
      for (var _0x226ef5 = 0; _0x226ef5 < ui.time.length; _0x226ef5++) {
        _0x3160e2 += ui.time[_0x226ef5];
      }
      document.getElementById("stats_box_time").innerHTML = _0x3160e2;
      document.getElementById("stats_box_kill").innerHTML = _0x3228cd;
      document.getElementById("stats_box_score").innerHTML = ui.score;
    }
  }
  this.login_restore_data = function (_0x165f31) {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 1;
    _0x52f43b();
    if (_0x165f31.name.indexOf("Starver#") === -1) {
      document.getElementById("account_nickname_input").value =
        window.decodeURIComponent(window.escape(window.atob(_0x165f31.name)));
    } else {
      document.getElementById("account_nickname_input").value = _0x165f31.name;
    }
    ui.bread = _0x165f31.bread;
    var _0x371c50 = _0x165f31.seasons;
    var _0x985c13 = _0x371c50[_0x371c50.length - 1];
    ui.seasons = _0x371c50;
    _0x17c2fe.update_score(_0x985c13.score);
    ui.score = _0x985c13.score;
    ui.kill = _0x985c13.kill;
    ui.death = _0x985c13.death;
    ui.time = _0x985c13.time;
    ui.bestScore = _0x985c13.bestScore;
    ui.bestKill = _0x985c13.bestKill;
    ui.bestTime = _0x985c13.bestTime;
    ui.scoreTotal = _0x985c13.scoreTotal;
    ui.firstName = _0x165f31.firstName;
    document.getElementById("serverAddressInput").value =
      "https://starve.io/?server=" + _0x165f31.privateServer;
    if (ui.firstName === undefined) {
      ui.firstName = 0;
    }
    ui.privateServerTime = Date.now() + _0x165f31.privateServerTime;
    if (Number(_0x165f31.privateServerTime) > 0) {
      ui.privateServerTime = Date.now() + Number(_0x165f31.privateServerTime);
    }
    ui.kit = Date.now() + _0x165f31.kit;
    if (Number(_0x165f31.kit) > 0) {
      ui.kit = Date.now() + Number(_0x165f31.kit);
    }
    var _0x495239 = COSMETICS.SKIN;
    for (var _0x59b238 = 0; _0x59b238 < _0x165f31.skins.length; _0x59b238++) {
      var _0x40b237 = _0x165f31.skins[_0x59b238];
      if (_0x40b237 > 0) {
        for (var _0x2a7088 = 0; _0x2a7088 < _0x495239.length; _0x2a7088++) {
          if (_0x495239[_0x2a7088].id === _0x59b238) {
            _0x17c2fe.unlock.skin[_0x2a7088] = 1;
          }
        }
      }
    }
    var _0x495239 = COSMETICS.ACCESSORY;
    for (
      var _0x59b238 = 0;
      _0x59b238 < _0x165f31.accessories.length;
      _0x59b238++
    ) {
      var _0x40b237 = _0x165f31.accessories[_0x59b238];
      if (_0x40b237 > 0) {
        for (var _0x2a7088 = 0; _0x2a7088 < _0x495239.length; _0x2a7088++) {
          if (_0x495239[_0x2a7088].id === _0x59b238) {
            _0x17c2fe.unlock.accessory[_0x2a7088] = 1;
          }
        }
      }
    }
    var _0x495239 = COSMETICS.BOOK;
    for (var _0x59b238 = 0; _0x59b238 < _0x165f31.books.length; _0x59b238++) {
      var _0x40b237 = _0x165f31.books[_0x59b238];
      if (_0x40b237 > 0) {
        for (var _0x2a7088 = 0; _0x2a7088 < _0x495239.length; _0x2a7088++) {
          if (_0x495239[_0x2a7088].id === _0x59b238) {
            _0x17c2fe.unlock.book[_0x2a7088] = 1;
          }
        }
      }
    }
    var _0x495239 = COSMETICS.BAG;
    for (var _0x59b238 = 0; _0x59b238 < _0x165f31.bags.length; _0x59b238++) {
      var _0x40b237 = _0x165f31.bags[_0x59b238];
      if (_0x40b237 > 0) {
        for (var _0x2a7088 = 0; _0x2a7088 < _0x495239.length; _0x2a7088++) {
          if (_0x495239[_0x2a7088].id === _0x59b238) {
            _0x17c2fe.unlock.bag[_0x2a7088] = 1;
          }
        }
      }
    }
    var _0x495239 = COSMETICS.CRATE;
    for (var _0x59b238 = 0; _0x59b238 < _0x165f31.crates.length; _0x59b238++) {
      var _0x40b237 = _0x165f31.crates[_0x59b238];
      if (_0x40b237 > 0) {
        for (var _0x2a7088 = 0; _0x2a7088 < _0x495239.length; _0x2a7088++) {
          _0x495239[_0x2a7088].id === _0x59b238 &&
            ((_0x17c2fe.unlock.crate[_0x2a7088] = 1),
            (_0x17c2fe.unlock.dead[_0x2a7088] = 1));
        }
      }
    }
  };
  this.login_after = function () {
    window.onUserLogin = function () {
      _0x23223b(_0x5d5511);
      getUserDetails(_0x17c2fe.login_restore_data);
    };
    if (userAlreadyLoggedIn === 1) {
      window.onUserLogin();
    }
  };
  window.onUserLogout = function () {
    ui.buttons[ui.LOGIN_BUTTON].info.active = 1;
    ui.buttons[ui.PROFILE_BUTTON].info.active = 0;
    ui.buttons[ui.PROFILE_BUTTON_2].info.active = 0;
    _0x23223b(_0x5d5511);
  };
  this.isUserLogged = function () {
    return ui.buttons[ui.PROFILE_BUTTON].info.active;
  };
  this.buttons[_0x5c9aca] = gui_create_button(
    461,
    105,
    "",
    [
      IMAGES.GET_MORE_BUTTON_OUT,
      IMAGES.GET_MORE_BUTTON_IN,
      IMAGES.GET_MORE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        _0x23223b(_0x333258);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -100,
    80,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    157,
    158,
    "",
    [IMAGES.TUTO_WIKI_OUT, IMAGES.TUTO_WIKI_IN, IMAGES.TUTO_WIKI_CLICK],
    1,
    0,
    function () {
      window.open("https://starveiopro.wikia.com/wiki/", "_blank");
    },
    -35,
    125,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x476e4a;
  this.buttons[_0x5c9aca] = gui_create_button(
    66,
    73,
    "",
    [
      IMAGES.TUTO_PREVIOUS_OUT,
      IMAGES.TUTO_PREVIOUS_IN,
      IMAGES.TUTO_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -68,
    340,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x476e4a;
  this.buttons[_0x5c9aca] = gui_create_button(
    66,
    73,
    "",
    [IMAGES.TUTO_NEXT_OUT, IMAGES.TUTO_NEXT_IN, IMAGES.TUTO_NEXT_CLICK],
    1,
    0,
    undefined,
    -30,
    340,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x476e4a;
  this.buttons[_0x5c9aca] = gui_create_button(
    97,
    66,
    "",
    [
      IMAGES.LVL_LEADERBOARD_OUT,
      IMAGES.LVL_LEADERBOARD_IN,
      IMAGES.LVL_LEADERBOARD_CLICK,
    ],
    1,
    0,
    undefined,
    -14,
    151,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_KILL = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    135,
    66,
    "",
    [
      IMAGES.KILL_LEADERBOARD_OUT,
      IMAGES.KILL_LEADERBOARD_IN,
      IMAGES.KILL_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, ui.LEADERBOARD_KILL);
    },
    37.5,
    151,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_TIME = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    160,
    66,
    "",
    [
      IMAGES.TIME_LEADERBOARD_OUT,
      IMAGES.TIME_LEADERBOARD_IN,
      IMAGES.TIME_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, ui.LEADERBOARD_TIME);
    },
    107.5,
    151,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SCORE = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    207,
    66,
    "",
    [
      IMAGES.SCORE_LEADERBOARD_OUT,
      IMAGES.SCORE_LEADERBOARD_IN,
      IMAGES.SCORE_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, ui.LEADERBOARD_SCORE);
    },
    190.5,
    151,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_TODAY = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    144,
    66,
    "",
    [
      IMAGES.TODAY_LEADERBOARD_OUT,
      IMAGES.TODAY_LEADERBOARD_IN,
      IMAGES.TODAY_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(ui.LEADERBOARD_TODAY);
    },
    103.5,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_WEEK = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    124,
    66,
    "",
    [
      IMAGES.WEEK_LEADERBOARD_OUT,
      IMAGES.WEEK_LEADERBOARD_IN,
      IMAGES.WEEK_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(ui.LEADERBOARD_WEEK);
    },
    177.5,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_ALL = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    104,
    66,
    "",
    [
      IMAGES.ALL_LEADERBOARD_OUT,
      IMAGES.ALL_LEADERBOARD_IN,
      IMAGES.ALL_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(ui.LEADERBOARD_ALL);
    },
    242,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SEASON1 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    183,
    66,
    "",
    [
      IMAGES.SEASON1_LEADERBOARD_OUT,
      IMAGES.SEASON1_LEADERBOARD_IN,
      IMAGES.SEASON1_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON1);
    },
    -290,
    521,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SEASON2 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    183,
    66,
    "",
    [
      IMAGES.SEASON2_LEADERBOARD_OUT,
      IMAGES.SEASON2_LEADERBOARD_IN,
      IMAGES.SEASON2_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON2);
    },
    -185,
    521,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SEASON3 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    183,
    66,
    "",
    [
      IMAGES.SEASON3_LEADERBOARD_OUT,
      IMAGES.SEASON3_LEADERBOARD_IN,
      IMAGES.SEASON3_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON3);
    },
    -80,
    521,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SEASON4 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    183,
    66,
    "",
    [
      IMAGES.SEASON4_LEADERBOARD_OUT,
      IMAGES.SEASON4_LEADERBOARD_IN,
      IMAGES.SEASON4_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON4);
    },
    25,
    521,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_SEASON5 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    183,
    66,
    "",
    [
      IMAGES.SEASON5_LEADERBOARD_OUT,
      IMAGES.SEASON5_LEADERBOARD_IN,
      IMAGES.SEASON5_LEADERBOARD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, undefined, undefined, ui.LEADERBOARD_SEASON5);
    },
    130,
    521,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.buttons[_0x5c9aca] = gui_create_button(
    232,
    352,
    "",
    [IMAGES.CURRENCY1_OUT, IMAGES.CURRENCY1_IN, IMAGES.CURRENCY1_CLICK],
    1,
    0,
    function () {
      openXsolla(300);
    },
    -330,
    135,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    232,
    352,
    "",
    [IMAGES.CURRENCY2_OUT, IMAGES.CURRENCY2_IN, IMAGES.CURRENCY2_CLICK],
    1,
    0,
    function () {
      openXsolla(600);
    },
    -195,
    135,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    243,
    374,
    "",
    [IMAGES.CURRENCY3_OUT, IMAGES.CURRENCY3_IN, IMAGES.CURRENCY3_CLICK],
    1,
    0,
    function () {
      openXsolla(2600);
    },
    -60,
    130,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    232,
    352,
    "",
    [IMAGES.CURRENCY4_OUT, IMAGES.CURRENCY4_IN, IMAGES.CURRENCY4_CLICK],
    1,
    0,
    function () {
      openXsolla(7000);
    },
    78,
    135,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    243,
    374,
    "",
    [IMAGES.CURRENCY5_OUT, IMAGES.CURRENCY5_IN, IMAGES.CURRENCY5_CLICK],
    1,
    0,
    function () {
      openXsolla(20000);
    },
    213,
    130,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    58,
    64,
    "",
    [
      IMAGES.CLOSE_BUTTON_OUT,
      IMAGES.CLOSE_BUTTON_IN,
      IMAGES.CLOSE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    300,
    88,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x333258;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [IMAGES.SKIN_BUTTON_OUT, IMAGES.SKIN_BUTTON_IN, IMAGES.SKIN_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x186fd7);
      _0x2dcdb0.initSelector();
    },
    -315,
    185,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [
      IMAGES.ACCESSORY_BUTTON_OUT,
      IMAGES.ACCESSORY_BUTTON_IN,
      IMAGES.ACCESSORY_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x2c6c5b);
      _0x1c4201.initSelector();
    },
    -315,
    321,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [IMAGES.BAG_BUTTON_OUT, IMAGES.BAG_BUTTON_IN, IMAGES.BAG_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x5b3cf3);
      _0x3c9432.initSelector();
    },
    153,
    185,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [IMAGES.BOOK_BUTTON_OUT, IMAGES.BOOK_BUTTON_IN, IMAGES.BOOK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x2540d5);
      _0x164ae2.initSelector();
    },
    153,
    321,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [
      IMAGES.CRATE_BUTTON_OUT,
      IMAGES.CRATE_BUTTON_IN,
      IMAGES.CRATE_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x28bc8a);
      _0x479f39.initSelector();
    },
    153,
    463,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    323,
    112,
    "",
    [IMAGES.LOOT_BUTTON_OUT, IMAGES.LOOT_BUTTON_IN, IMAGES.LOOT_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x696127);
      _0x200c0a.initSelector();
    },
    -315,
    463,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xde81c8;
  this.buttons[_0x5c9aca] = gui_create_button(
    327,
    117,
    "",
    [IMAGES.SEASON_5, IMAGES.SEASON_5_IN, IMAGES.SEASON_5_OUT],
    1,
    0,
    function () {
      _0x23223b(_0x3fbd88);
    },
    155,
    70,
    1,
    1
  );
  this.buttons[_0x5c9aca++].view = _0x5d5511;
  this.buttons[_0x5c9aca] = gui_create_button(
    130,
    129,
    "",
    [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x180688(_0x26adac, 0, "none");
      _0x23223b(_0x420cd9);
    },
    10,
    40,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x26adac;
  this.buttons[_0x5c9aca] = gui_create_button(
    130,
    129,
    "",
    [IMAGES.SHOP_BUTTON_OUT, IMAGES.SHOP_BUTTON_IN, IMAGES.SHOP_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x180688(_0x4adb22, 0, "none");
      _0x23223b(_0x420cd9);
    },
    10,
    40,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x4adb22;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    200,
    140,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.ATLANTA_OUT, IMAGES.ATLANTA_IN, IMAGES.ATLANTA_CLICK],
    1,
    0,
    function () {
      regionPreference("Atlanta");
    },
    -265,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.DALLAS_OUT, IMAGES.DALLAS_IN, IMAGES.DALLAS_CLICK],
    1,
    0,
    function () {
      regionPreference("Dallas");
    },
    -130,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.FREMONT_OUT, IMAGES.FREMONT_IN, IMAGES.FREMONT_CLICK],
    1,
    0,
    function () {
      regionPreference("Fremont");
    },
    5,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.NEWARK_OUT, IMAGES.NEWARK_IN, IMAGES.NEWARK_CLICK],
    1,
    0,
    function () {
      regionPreference("Newark");
    },
    140,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.LONDON_OUT, IMAGES.LONDON_IN, IMAGES.LONDON_CLICK],
    1,
    0,
    function () {
      regionPreference("London");
    },
    -265,
    365,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.FRANKFURT_OUT, IMAGES.FRANKFURT_IN, IMAGES.FRANKFURT_CLICK],
    1,
    0,
    function () {
      regionPreference("Frankfurt");
    },
    -130,
    365,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.SINGAPORE_OUT, IMAGES.SINGAPORE_IN, IMAGES.SINGAPORE_CLICK],
    1,
    0,
    function () {
      regionPreference("Singapore");
    },
    5,
    365,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.TOKYO_OUT, IMAGES.TOKYO_IN, IMAGES.TOKYO_CLICK],
    1,
    0,
    function () {
      regionPreference("Tokyo");
    },
    140,
    365,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.TORONTO_OUT, IMAGES.TORONTO_IN, IMAGES.TORONTO_CLICK],
    1,
    0,
    function () {
      regionPreference("Toronto");
    },
    -265,
    430,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    253,
    110,
    "",
    [IMAGES.MUMBAI_OUT, IMAGES.MUMBAI_IN, IMAGES.MUMBAI_CLICK],
    1,
    0,
    function () {
      regionPreference("Mumbai");
    },
    -130,
    430,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x31ef04;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x31ef04);
    },
    230,
    140,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2a634d;
  this.buttons[_0x5c9aca] = gui_create_button(
    230,
    352,
    "",
    [IMAGES.DAYS3_OUT, IMAGES.DAYS3_IN, IMAGES.DAYS3_CLICK],
    1,
    0,
    function () {
      openXsolla(350);
    },
    -280,
    240,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2a634d;
  this.buttons[_0x5c9aca] = gui_create_button(
    230,
    352,
    "",
    [IMAGES.DAYS7_OUT, IMAGES.DAYS7_IN, IMAGES.DAYS7_CLICK],
    1,
    0,
    function () {
      openXsolla(700);
    },
    -130,
    240,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2a634d;
  this.buttons[_0x5c9aca] = gui_create_button(
    230,
    352,
    "",
    [IMAGES.DAYS30_OUT, IMAGES.DAYS30_IN, IMAGES.DAYS30_CLICK],
    1,
    0,
    function () {
      openXsolla(1400);
    },
    20,
    240,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2a634d;
  this.buttons[_0x5c9aca] = gui_create_button(
    230,
    352,
    "",
    [IMAGES.DAYS90_OUT, IMAGES.DAYS90_IN, IMAGES.DAYS90_CLICK],
    1,
    0,
    function () {
      openXsolla(3000);
    },
    170,
    240,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2a634d;
  this.buttons[_0x5c9aca] = gui_create_button(
    105,
    119,
    "",
    [IMAGES.COPY_PASTE_OUT, IMAGES.COPY_PASTE_IN, IMAGES.COPY_PASTE_CLICK],
    1,
    0,
    function () {
      document.getElementById("serverAddressInput").select();
      document.execCommand("copy");
    },
    170,
    310,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x45dddf;
  this.buttons[_0x5c9aca] = gui_create_button(
    105,
    119,
    "",
    [IMAGES.RESTART_OUT, IMAGES.RESTART_IN, IMAGES.RESTART_CLICK],
    1,
    0,
    function () {
      rebootServer();
    },
    235,
    310,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x45dddf;
  this.buttons[_0x5c9aca] = gui_create_button(
    204,
    115,
    "",
    [IMAGES.GUIDE_OUT, IMAGES.GUIDE_IN, IMAGES.GUIDE_CLICK],
    1,
    0,
    function () {
      window.open("./commands.html", "_blank");
    },
    -265,
    490,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x45dddf;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE5_OUT, IMAGES.PRICE5_IN, IMAGES.PRICE5_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x2e3869);
    },
    -210,
    170,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE1_OUT, IMAGES.PRICE1_IN, IMAGES.PRICE1_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xdf9170);
    },
    70,
    170,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE2_OUT, IMAGES.PRICE2_IN, IMAGES.PRICE2_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x29174c);
    },
    70,
    204,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x1fb928);
    },
    -210,
    204,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x361724);
    },
    70,
    238,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE3_OUT, IMAGES.PRICE3_IN, IMAGES.PRICE3_CLICK],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buyKit(0, 300);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    307,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x375aac);
    },
    -210,
    238,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    145,
    69,
    "",
    [IMAGES.PRICE4_OUT, IMAGES.PRICE4_IN, IMAGES.PRICE4_CLICK],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buyKit(1, 600);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    307,
    239,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  this.buttons[_0x5c9aca] = gui_create_button(
    192,
    101,
    "",
    [IMAGES.YES_BUTTON_OUT, IMAGES.YES_BUTTON_IN, IMAGES.YES_BUTTON_CLICK],
    1,
    0,
    function () {
      buyNameChanger();
    },
    -100,
    250,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x324c72;
  this.buttons[_0x5c9aca] = gui_create_button(
    192,
    104,
    "",
    [
      IMAGES.YES_300_BUTTON_OUT,
      IMAGES.YES_300_BUTTON_IN,
      IMAGES.YES_300_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      buyNameChanger();
    },
    -100,
    239,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x203b91;
  this.buttons[_0x5c9aca] = gui_create_button(
    192,
    101,
    "",
    [IMAGES.NO_BUTTON_OUT, IMAGES.NO_BUTTON_IN, IMAGES.NO_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x1ac43b);
    },
    10,
    250,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x324c72;
  this.buttons[_0x5c9aca] = gui_create_button(
    192,
    104,
    "",
    [
      IMAGES.NO_THANKS_BUTTON_OUT,
      IMAGES.NO_THANKS_BUTTON_IN,
      IMAGES.NO_THANKS_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      _0x23223b(_0x1ac43b);
    },
    10,
    239,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x203b91;
  RARITY_BUTTON = [];
  RARITY_BUTTON[RARITY.FREE] = [
    IMAGES.FREE_ITEM_OUT,
    IMAGES.FREE_ITEM_IN,
    IMAGES.FREE_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.WOOD] = [
    IMAGES.WOOD_ITEM_OUT,
    IMAGES.WOOD_ITEM_IN,
    IMAGES.WOOD_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.STONE] = [
    IMAGES.STONE_ITEM_OUT,
    IMAGES.STONE_ITEM_IN,
    IMAGES.STONE_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.GOLD] = [
    IMAGES.GOLD_ITEM_OUT,
    IMAGES.GOLD_ITEM_IN,
    IMAGES.GOLD_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.DIAMOND] = [
    IMAGES.DIAMOND_ITEM_OUT,
    IMAGES.DIAMOND_ITEM_IN,
    IMAGES.DIAMOND_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.AMETHYST] = [
    IMAGES.AMETHYST_ITEM_OUT,
    IMAGES.AMETHYST_ITEM_IN,
    IMAGES.AMETHYST_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.REIDITE] = [
    IMAGES.REIDITE_ITEM_OUT,
    IMAGES.REIDITE_ITEM_IN,
    IMAGES.REIDITE_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.LEVEL] = [
    IMAGES.LEVEL_ITEM_OUT,
    IMAGES.LEVEL_ITEM_IN,
    IMAGES.LEVEL_ITEM_CLICK,
  ];
  RARITY_BUTTON[RARITY.SPECIAL] = [
    IMAGES.SPECIAL_ITEM_OUT,
    IMAGES.SPECIAL_ITEM_IN,
    IMAGES.SPECIAL_ITEM_CLICK,
  ];
  FIRST_BUTTON_SKIN = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x186fd7;
  FIRST_BUTTON_ACCESSORY = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2c6c5b;
  FIRST_BUTTON_LOOT = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x696127;
  FIRST_BUTTON_BAG = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x5b3cf3;
  FIRST_BUTTON_BOOK = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2540d5;
  FIRST_BUTTON_CRATE = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    -29,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    65,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    205,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    300,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    178,
    182,
    "",
    [IMAGES.WOOD_ITEM_OUT, IMAGES.WOOD_ITEM_IN, IMAGES.WOOD_ITEM_CLICK],
    1,
    0,
    undefined,
    159,
    395,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [
      IMAGES.SKIN_PREVIOUS_OUT,
      IMAGES.SKIN_PREVIOUS_IN,
      IMAGES.SKIN_PREVIOUS_CLICK,
    ],
    1,
    0,
    undefined,
    -61,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    39,
    122,
    "",
    [IMAGES.SKIN_NEXT_OUT, IMAGES.SKIN_NEXT_IN, IMAGES.SKIN_NEXT_CLICK],
    1,
    0,
    undefined,
    260,
    315,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0xde81c8);
    },
    -320,
    470,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x28bc8a;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_1_OUT,
      IMAGES.SPIN_BUTTON_1_IN,
      IMAGES.SPIN_BUTTON_1_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(3, 50);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xdf9170;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0xdf9170;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_2_OUT,
      IMAGES.SPIN_BUTTON_2_IN,
      IMAGES.SPIN_BUTTON_2_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(0, 100);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2e3869;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x2e3869;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_3_OUT,
      IMAGES.SPIN_BUTTON_3_IN,
      IMAGES.SPIN_BUTTON_3_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(4, 150);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x29174c;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x29174c;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_4_OUT,
      IMAGES.SPIN_BUTTON_4_IN,
      IMAGES.SPIN_BUTTON_4_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(1, 300);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1fb928;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1fb928;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_5_OUT,
      IMAGES.SPIN_BUTTON_5_IN,
      IMAGES.SPIN_BUTTON_5_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(2, 600);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x375aac;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x375aac;
  this.buttons[_0x5c9aca] = gui_create_button(
    260,
    260,
    "",
    [
      IMAGES.SPIN_BUTTON_4_OUT,
      IMAGES.SPIN_BUTTON_4_IN,
      IMAGES.SPIN_BUTTON_4_CLICK,
    ],
    1,
    0,
    function () {
      if (_0x17c2fe.isUserLogged()) {
        buySpin(5, 300);
      } else {
        _0x23223b(_0x4aee28);
      }
    },
    -65,
    197,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x361724;
  this.buttons[_0x5c9aca] = gui_create_button(
    115,
    73,
    "",
    [IMAGES.BACK_BUTTON_OUT, IMAGES.BACK_BUTTON_IN, IMAGES.BACK_BUTTON_CLICK],
    1,
    0,
    function () {
      _0x23223b(_0x420cd9);
    },
    309,
    180,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x361724;
  var _0x213433 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    205,
    67,
    "",
    [
      IMAGES.SEASON1_PROFILE_OUT,
      IMAGES.SEASON1_PROFILE_IN,
      IMAGES.SEASON1_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(undefined, 0);
    },
    -305,
    125,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x56f308 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    205,
    67,
    "",
    [
      IMAGES.SEASON2_PROFILE_OUT,
      IMAGES.SEASON2_PROFILE_IN,
      IMAGES.SEASON2_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(undefined, 1);
    },
    -305,
    170,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x3d9afb = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    205,
    67,
    "",
    [
      IMAGES.SEASON3_PROFILE_OUT,
      IMAGES.SEASON3_PROFILE_IN,
      IMAGES.SEASON3_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(undefined, 2);
    },
    -305,
    215,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x40b56b = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    205,
    67,
    "",
    [
      IMAGES.SEASON4_PROFILE_OUT,
      IMAGES.SEASON4_PROFILE_IN,
      IMAGES.SEASON4_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(undefined, 3);
    },
    -305,
    260,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x5bb3c1 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    205,
    67,
    "",
    [
      IMAGES.SEASON5_PROFILE_OUT,
      IMAGES.SEASON5_PROFILE_IN,
      IMAGES.SEASON5_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(undefined, 3);
    },
    -305,
    305,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x2ec218 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    460,
    73,
    "",
    [
      IMAGES.TOTAL_PROFILE_OUT,
      IMAGES.TOTAL_PROFILE_IN,
      IMAGES.TOTAL_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(-1);
    },
    -180,
    170,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x1a3677 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    222,
    68,
    "",
    [
      IMAGES.NORMAL_PROFILE_OUT,
      IMAGES.NORMAL_PROFILE_IN,
      IMAGES.NORMAL_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(WORLD.MODE_PVP);
    },
    -180,
    215,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x13bc0e = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    222,
    68,
    "",
    [
      IMAGES.FOREST_PROFILE_OUT,
      IMAGES.FOREST_PROFILE_IN,
      IMAGES.FOREST_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(WORLD.MODE_LEGACY);
    },
    -180,
    260,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0xae4302 = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    222,
    68,
    "",
    [
      IMAGES.ZOMBIE_PROFILE_OUT,
      IMAGES.ZOMBIE_PROFILE_IN,
      IMAGES.ZOMBIE_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(WORLD.MODE_ZOMBIES);
    },
    -60,
    215,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  var _0x4e464d = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    222,
    68,
    "",
    [
      IMAGES.VAMPIRE_PROFILE_OUT,
      IMAGES.VAMPIRE_PROFILE_IN,
      IMAGES.VAMPIRE_PROFILE_CLICK,
    ],
    1,
    0,
    function () {
      _0x19cab6(WORLD.MODE_VAMPIRES);
    },
    -60,
    260,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x1ac43b;
  this.LEADERBOARD_TOTAL = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    143,
    66,
    "",
    [IMAGES.TOTAL_LEAD_OUT, IMAGES.TOTAL_LEAD_IN, IMAGES.TOTAL_LEAD_CLICK],
    1,
    0,
    function () {
      getLeaderboard(undefined, ui.LEADERBOARD_TOTAL);
    },
    -298,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_NORMAL = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    104,
    66,
    "",
    [IMAGES.NORMAL_LEAD_OUT, IMAGES.NORMAL_LEAD_IN, IMAGES.NORMAL_LEAD_CLICK],
    1,
    0,
    function () {
      getLeaderboard(undefined, ui.LEADERBOARD_NORMAL);
    },
    -223,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_FOREST = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    110,
    66,
    "",
    [IMAGES.FOREST_LEAD_OUT, IMAGES.FOREST_LEAD_IN, IMAGES.FOREST_LEAD_CLICK],
    1,
    0,
    function () {
      getLeaderboard(undefined, ui.LEADERBOARD_FOREST);
    },
    -168,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_ZOMBIE = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    88,
    66,
    "",
    [IMAGES.ZOMBIE_LEAD_OUT, IMAGES.ZOMBIE_LEAD_IN, IMAGES.ZOMBIE_LEAD_CLICK],
    1,
    0,
    function () {
      getLeaderboard(undefined, ui.LEADERBOARD_ZOMBIE);
    },
    -110,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.LEADERBOARD_VAMPIRE = _0x5c9aca;
  this.buttons[_0x5c9aca] = gui_create_button(
    88,
    66,
    "",
    [
      IMAGES.VAMPIRE_LEAD_OUT,
      IMAGES.VAMPIRE_LEAD_IN,
      IMAGES.VAMPIRE_LEAD_CLICK,
    ],
    1,
    0,
    function () {
      getLeaderboard(undefined, ui.LEADERBOARD_VAMPIRE);
    },
    -63,
    110,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x80e2f4;
  this.buttons[_0x5c9aca] = gui_create_button(
    86,
    44,
    "",
    [
      IMAGES.TERMS_BUTTON_OUT,
      IMAGES.TERMS_BUTTON_IN,
      IMAGES.TERMS_BUTTON_CLICK,
    ],
    1,
    0,
    function () {
      window.open("./terms.html", "_blank");
    },
    349,
    290,
    16 | 4,
    0
  );
  this.buttons[_0x5c9aca++].view = _0x420cd9;
  var _0x2dcdb0 = new _0x1162d0(
      COSMETICS.SKIN,
      FIRST_BUTTON_SKIN,
      function (_0x5c71e1) {
        ui.skin = _0x5c71e1;
        if (ui.unlock.skin[_0x5c71e1] === 1) {
          Cookies.set("starve_skin", "" + _0x5c71e1, { expires: 30 });
        }
      },
      this.skin,
      this.unlock.skin
    ),
    _0x3c9432 = new _0x1162d0(
      COSMETICS.BAG,
      FIRST_BUTTON_BAG,
      function (_0x4182d7) {
        ui.bag = _0x4182d7;
        if (ui.unlock.bag[_0x4182d7] === 1) {
          Cookies.set("starve_bag", "" + _0x4182d7, { expires: 30 });
        }
      },
      this.bag,
      this.unlock.bag
    ),
    _0x164ae2 = new _0x1162d0(
      COSMETICS.BOOK,
      FIRST_BUTTON_BOOK,
      function (_0x25ed1c) {
        ui.book = _0x25ed1c;
        if (ui.unlock.book[_0x25ed1c] === 1) {
          Cookies.set("starve_book", "" + _0x25ed1c, { expires: 30 });
        }
      },
      this.book,
      this.unlock.book
    ),
    _0x479f39 = new _0x1162d0(
      COSMETICS.CRATE,
      FIRST_BUTTON_CRATE,
      function (_0x24a7c5) {
        ui.dead = _0x24a7c5;
        if (ui.unlock.dead[_0x24a7c5] === 1) {
          Cookies.set("starve_dead", "" + _0x24a7c5, { expires: 30 });
        }
      },
      this.dead,
      this.unlock.dead
    ),
    _0x200c0a = new _0x1162d0(
      COSMETICS.CRATE,
      FIRST_BUTTON_LOOT,
      function (_0x55232a) {
        ui.crate = _0x55232a;
        if (ui.unlock.crate[_0x55232a] === 1) {
          Cookies.set("starve_crate", "" + _0x55232a, { expires: 30 });
        }
      },
      this.crate,
      this.unlock.crate
    ),
    _0x1c4201 = new _0x1162d0(
      COSMETICS.ACCESSORY,
      FIRST_BUTTON_ACCESSORY,
      function (_0x40cb82) {
        ui.accessory = _0x40cb82;
        if (ui.unlock.accessory[_0x40cb82] === 1) {
          Cookies.set("starve_accessory", "" + _0x40cb82, { expires: 30 });
        }
      },
      this.accessory,
      this.unlock.accessory
    );
  this.trigger_mousedown = function (_0x1a6607) {
    mouse.pos = get_mouse_pos(_0x17c2fe.can, _0x1a6607);
    for (var _0x5b4f8e = 0; _0x5b4f8e < _0x17c2fe.buttons.length; _0x5b4f8e++) {
      if (_0x17c2fe.buttons[_0x5b4f8e].info.active === 1) {
        _0x17c2fe.buttons[_0x5b4f8e].trigger(
          _0x17c2fe.can,
          mouse.pos,
          MOUSE_DOWN
        );
      }
    }
  };
  this.trigger_mouseup = function (_0x154414) {
    mouse.pos = get_mouse_pos(_0x17c2fe.can, _0x154414);
    for (var _0x553d00 = 0; _0x553d00 < _0x17c2fe.buttons.length; _0x553d00++) {
      var _0x5b8d41 = _0x17c2fe.buttons[_0x553d00];
      if (_0x5b8d41.info.active === 1) {
        if (_0x5b8d41.trigger(_0x17c2fe.can, mouse.pos, MOUSE_UP)) {
          _0x5b8d41.info.callback();
          return;
        }
      }
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (_0x18993f) {
    mouse.pos = get_mouse_pos(_0x17c2fe.can, _0x18993f);
    var _0x189a74 = false;
    for (var _0x30d617 = 0; _0x30d617 < _0x17c2fe.buttons.length; _0x30d617++) {
      if (_0x17c2fe.buttons[_0x30d617].info.active === 1) {
        _0x189a74 |= _0x17c2fe.buttons[_0x30d617].trigger(
          _0x17c2fe.can,
          mouse.pos,
          MOUSE_MOVE
        );
      }
    }
    if (_0x17c2fe.current_cursor !== _0x189a74) {
      _0x17c2fe.current_cursor = _0x189a74;
      if (_0x189a74) {
        T.style.cursor = _0x17c2fe.cursor1;
      } else {
        T.style.cursor = _0x17c2fe.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
  };
}
function Game(n, t) {
  var _ = this;
  this.can = n;
  this.ctx = t;
  window.navigator.userAgent.indexOf("Edge") > -1
    ? ((this.cursor0 = "default"), (this.cursor1 = "pointer"))
    : ((this.cursor0 = "url('img/cursor0.png'), default"),
      (this.cursor1 = "url('img/cursor1.png'), pointer"));
  this.show_ui = 1;
  this.show_clock = 1;
  this.show_recipe_book = 1;
  this.show_quest = 1;
  this.team_box = {
    id: document.getElementById("team_box"),
    style: document.getElementById("team_box").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 125) + "px";
      this.style.top = "110px";
    },
  };
  this.audio = {
    button_on: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_ON]),
    button_off: gui_create_button(60, 60, "", sprite[SPRITE.SOUND_BUTTON_OFF]),
  };
  this.sign = {
    open: false,
    breads: 0,
    symbol: document.getElementById("sign_object"),
    symbol_id: 0,
    id: document.getElementById("sign_window"),
    style: document.getElementById("sign_window").style,
    button: gui_create_button(60, 60, "", sprite[SPRITE.SIGN_BUTTON]),
    update_button: function () {
      var e = Math.floor(
        Math.floor((3 + user.craft.can_craft.length) / 4) *
          (10 + sprite[SPRITE.INV_WOOD][0].width) +
          35
      );
      this.button.info.translate.x = e;
      this.button.info.translate.y = 22;
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 150) + "px";
      this.style.top = Math.floor(canh2 - 115) + "px";
    },
    quit: function () {
      game.sign.style.display = "none";
      game.sign.open = false;
    },
    select: function () {
      game.sign.open = !game.sign.open;
      if (game.sign.open) {
        game.sign.style.display = "inline-block";
      } else {
        game.sign.style.display = "none";
      }
    },
    ok: function () {
      client.update_sign(user.sign.iid, game.sign.symbol_id);
      game.sign.select();
    },
    up: function () {
      game.sign.symbol_id =
        game.sign.symbol_id === 0
          ? CLIENT.SYMBOL_MAX - 1
          : game.sign.symbol_id - 1;
      game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
    },
    down: function () {
      game.sign.symbol_id = (game.sign.symbol_id + 1) % CLIENT.SYMBOL_MAX;
      game.sign.symbol.src = "./img/sign" + game.sign.symbol_id + ".png";
    },
  };
  document
    .getElementById("quit_sign")
    .addEventListener("mouseup", this.sign.select, false);
  document
    .getElementById("ok_sign")
    .addEventListener("mouseup", this.sign.ok, false);
  document
    .getElementById("sign_up")
    .addEventListener("mouseup", this.sign.up, false);
  document
    .getElementById("sign_down")
    .addEventListener("mouseup", this.sign.down, false);
  this.market = {
    open: false,
    id: document.getElementById("shop_market"),
    style: document.getElementById("shop_market").style,
    items: [
      {
        id: 0,
        name: "wood",
        val: 1,
        b: 1,
        a: 3,
        img_item: SPRITE.INV_WOOD,
      },
      {
        id: 1,
        name: "stone",
        val: 1,
        b: 1,
        a: 4,
        img_item: SPRITE.INV_STONE,
      },
      {
        id: 2,
        name: "gold",
        val: 1,
        b: 1,
        a: 6,
        img_item: SPRITE.INV_GOLD,
      },
      {
        id: 3,
        name: "diamond",
        val: 4,
        b: 4,
        a: 1,
        img_item: SPRITE.INV_DIAMOND,
      },
      {
        id: 4,
        name: "amethyst",
        val: 8,
        b: 8,
        a: 1,
        img_item: SPRITE.INV_AMETHYST,
      },
      {
        id: 5,
        name: "reidite",
        val: 16,
        b: 16,
        a: 1,
        img_item: SPRITE.INV_REIDITE,
      },
      {
        id: 6,
        name: "pumpkin_seed",
        val: 10,
        b: 10,
        a: 1,
        img_item: SPRITE.INV_PUMPKIN_SEED,
      },
      {
        id: 7,
        name: "carrot_seed",
        val: 16,
        b: 16,
        a: 1,
        img_item: SPRITE.INV_CARROT_SEED,
      },
      {
        id: 8,
        name: "tomato_seed",
        val: 20,
        b: 20,
        a: 1,
        img_item: SPRITE.INV_TOMATO_SEED,
      },
      {
        id: 9,
        name: "thornbush_seed",
        val: 30,
        b: 30,
        a: 1,
        img_item: SPRITE.INV_THORNBUSH_SEED,
      },
      {
        id: 10,
        name: "garlic_seed",
        val: 40,
        b: 40,
        a: 1,
        img_item: SPRITE.INV_GARLIC_SEED,
      },
      {
        id: 11,
        name: "watermelon_seed",
        val: 60,
        b: 60,
        a: 1,
        img_item: SPRITE.INV_WATERMELON_SEED,
      },
    ],
    button: gui_create_button(60, 60, "", sprite[SPRITE.MARKET_BUTTON]),
    update: function () {
      this.style.left = Math.floor(canw2 - 450) + "px";
      this.style.top = Math.floor(canh2 - 270) + "px";
    },
    select: function () {
      game.market.open = !game.market.open;
      if (game.market.open) {
        game.market.style.display = "inline-block";
      } else {
        game.market.style.display = "none";
      }
    },
    quit: function () {
      game.market.style.display = "none";
      game.market.open = false;
    },
    buy: function () {
      client.buy_market(this.itemMarket);
    },
    change: function () {
      var e = this.id;
      if (this.itemMarket.a === 1) {
        var _0x2960e8 = Math.floor(Number(this.value) * this.itemMarket.b);
        this.itemMarket.val = _0x2960e8;
        document.getElementById(
          this.itemMarket.name + "_trad_number"
        ).innerHTML = _0x2960e8 + "";
      } else {
        var _0x2960e8 = Math.floor(Number(this.value) / this.itemMarket.a);
        this.itemMarket.val = _0x2960e8;
        document.getElementById(
          this.itemMarket.name + "_trad_number"
        ).innerHTML = _0x2960e8 + "";
      }
    },
  };
  document
    .getElementById("quit_market")
    .addEventListener("mouseup", this.market.quit, false);
  var _0x40a7d8 = [
    ["mouseup", this.market.buy, "buy_"],
    ["click", this.market.change, ""],
    ["change", this.market.change, ""],
    ["keypress", this.market.keypress, ""],
  ];
  for (var i = 0; i < this.market.items.length; i++) {
    var _0x48d0b1 = this.market.items[i];
    document.getElementById(_0x48d0b1.name + "_market").src =
      sprite[_0x48d0b1.img_item][0]["_src"] === undefined
        ? sprite[_0x48d0b1.img_item][0].src
        : sprite[_0x48d0b1.img_item][0]["_src"];
    if (_0x48d0b1.a === 1) {
      document.getElementById(_0x48d0b1.name + "_trad_number").innerHTML =
        _0x48d0b1.b;
      document.getElementById(_0x48d0b1.name + "_number").value = 1;
      document.getElementById(_0x48d0b1.name + "_number").step = 1;
      document.getElementById(_0x48d0b1.name + "_number").min = 1;
      document.getElementById(_0x48d0b1.name + "_number").max = Math.floor(
        255 / _0x48d0b1.b
      );
    } else {
      document.getElementById(_0x48d0b1.name + "_trad_number").innerHTML = 1;
      document.getElementById(_0x48d0b1.name + "_number").value = _0x48d0b1.a;
      document.getElementById(_0x48d0b1.name + "_number").step = _0x48d0b1.a;
      document.getElementById(_0x48d0b1.name + "_number").min = _0x48d0b1.a;
    }
    document.getElementById("buy_" + _0x48d0b1.name + "_number").itemMarket =
      _0x48d0b1;
    document.getElementById(_0x48d0b1.name + "_number").itemMarket = _0x48d0b1;
    for (var _0x297b64 = 0; _0x297b64 < _0x40a7d8.length; _0x297b64++) {
      document
        .getElementById(_0x40a7d8[_0x297b64][2] + _0x48d0b1.name + "_number")
        .addEventListener(
          _0x40a7d8[_0x297b64][0],
          _0x40a7d8[_0x297b64][1],
          false
        );
    }
  }
  $("[type='number']").keypress(function (_0x4ce970) {
    _0x4ce970.preventDefault();
  });
  this.options = {
    open: false,
    id: document.getElementById("option_in_game"),
    style: document.getElementById("option_in_game").style,
    agree: document.getElementById("agree_ing").style,
    cancel_agree: document.getElementById("cancel_agree_ing").style,
    quests_agree: document.getElementById("quest_agree_ing").style,
    spectator_agree: document.getElementById("spectator_agree_ing").style,
    feed_agree: document.getElementById("auto_feed_agree_ing").style,
    info_box_agree: document.getElementById("info_agree_ing").style,
    aliasing_agree: document.getElementById("pixelated_agree_ing").style,
    button: gui_create_button(60, 60, "", sprite[SPRITE.OPTION_BUTTON]),
    select_options: function () {
      game.options.open = !game.options.open;
      if (game.options.open) {
        game.options.style.display = "inline-block";
      } else {
        game.options.style.display = "none";
      }
    },
    azerty: function () {
      ui.set_azerty();
    },
    qwerty: function () {
      ui.set_qwerty();
    },
    high: function () {
      ui.high_quality();
    },
    low: function () {
      ui.low_quality();
    },
    checkbox: function () {
      game.safe_delete.checkbox();
    },
    cancel_checkbox: function () {
      game.safe_cancel.checkbox();
    },
    quest_checkbox: function () {
      game.quests.checkbox();
    },
    spectator_checkbox: function () {
      user.show_spectators.invert();
    },
    feed_checkbox: function () {
      user.auto_feed.invert();
    },
    quit: function () {
      game.options.style.display = "none";
      game.options.open = false;
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 170) + "px";
    },
  };
  document
    .getElementById("azerty_ing")
    .addEventListener("mouseup", this.options.azerty, false);
  document
    .getElementById("qwerty_ing")
    .addEventListener("mouseup", this.options.qwerty, false);
  document
    .getElementById("low_ing")
    .addEventListener("mouseup", this.options.low, false);
  document
    .getElementById("high_ing")
    .addEventListener("mouseup", this.options.high, false);
  document
    .getElementById("quit_opt")
    .addEventListener("mouseup", this.options.quit, false);
  document
    .getElementById("case_agree_opt")
    .addEventListener("mouseup", this.options.checkbox, false);
  document
    .getElementById("quest_case_agree_opt")
    .addEventListener("mouseup", this.options.quest_checkbox, false);
  document
    .getElementById("cancel_case_agree_opt")
    .addEventListener("mouseup", this.options.cancel_checkbox, false);
  document
    .getElementById("spectator_case_agree_opt")
    .addEventListener("mouseup", this.options.spectator_checkbox, false);
  document
    .getElementById("auto_feed_case_agree_opt")
    .addEventListener("mouseup", this.options.feed_checkbox, false);
  this.safe_cancel = {
    open: false,
    activated: Cookies.get("starve_cancel")
      ? Cookies.get("starve_cancel") === "0"
        ? 0
        : 1
      : 1,
    id: document.getElementById("cancel_sure_delete"),
    style: document.getElementById("cancel_sure_delete").style,
    agree: document.getElementById("cancel_agree").style,
    button: 0,
    i: 0,
    quit: function () {
      game.safe_cancel.style.display = "none";
      game.safe_cancel.open = false;
    },
    yes: function () {
      if (user.craft.crafting) {
        client.cancel_crafting();
      }
      game.safe_cancel.quit();
    },
    checkbox: function () {
      !game.safe_cancel.activated
        ? (Cookies.set("starve_cancel", "1"),
          (game.safe_cancel.agree.display = "none"),
          (game.options.cancel_agree.display = "inline-block"))
        : (Cookies.set("starve_cancel", "0"),
          (game.safe_cancel.agree.display = "inline-block"),
          (game.options.cancel_agree.display = "none"));
      game.safe_cancel.activated = !game.safe_cancel.activated;
    },
    del: function () {
      if (!this.activated) {
        this.yes();
      } else {
        this.style.display = "inline-block";
        this.open = true;
      }
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 130) + "px";
    },
  };
  this.safe_cancel.id.oncontextmenu = function () {
    return false;
  };
  this.safe_cancel.agree.display = "none";
  if (this.safe_cancel.activated) {
    this.options.cancel_agree.display = "inline-block";
  } else {
    this.options.cancel_agree.display = "none";
  }
  document
    .getElementById("cancel_yes_delete")
    .addEventListener("mouseup", this.safe_cancel.yes, false);
  document
    .getElementById("cancel_no_delete")
    .addEventListener("mouseup", this.safe_cancel.quit, false);
  document
    .getElementById("cancel_case_agree")
    .addEventListener("mouseup", this.safe_cancel.checkbox, false);
  document.addEventListener(
    "cancel_sure_delete",
    function (_0xb7d634) {
      _0xb7d634.preventDefault();
    },
    false
  );
  this.aliasing = {
    activated: Cookies.get("starve_aliasing")
      ? Cookies.get("starve_aliasing") === "0"
        ? 0
        : 1
      : 1,
    set_aliasing: function (_0x194760) {
      if (_0x194760) {
        document.getElementById("game_canvas").style.imageRendering =
          "pixelated";
      } else {
        document.getElementById("game_canvas").style.imageRendering = "auto";
      }
    },
    checkbox: function () {
      game.aliasing.activated === 0
        ? (Cookies.set("starve_aliasing", "1"),
          game.aliasing.set_aliasing(1),
          (game.options.aliasing_agree.display = "inline-block"))
        : (Cookies.set("starve_aliasing", "0"),
          game.aliasing.set_aliasing(0),
          (game.options.aliasing_agree.display = "none"));
      game.aliasing.activated = (game.aliasing.activated + 1) % 2;
    },
  };
  if (this.aliasing.activated === 1) {
    this.options.aliasing_agree.display = "inline-block";
  } else {
    this.aliasing.set_aliasing(0);
    this.options.aliasing_agree.display = "none";
  }
  document
    .getElementById("pixelated_case_agree_opt")
    .addEventListener("mouseup", this.aliasing.checkbox, false);
  this.info_box = {
    activated: Cookies.get("starve_info_box")
      ? Cookies.get("starve_info_box") === "0"
        ? 0
        : 1
      : 1,
    display: 0,
    x: 0,
    y: 0,
    id: 0,
    craft: 0,
    checkbox: function () {
      game.info_box.activated === 0
        ? (Cookies.set("starve_info_box", "1"),
          (game.options.info_box_agree.display = "inline-block"))
        : (Cookies.set("starve_info_box", "0"),
          (game.options.info_box_agree.display = "none"));
      game.info_box.activated = (game.info_box.activated + 1) % 2;
    },
    trigger: function (_0x5df514, _0x1b5b6d, _0x23ad51) {
      if (_0x5df514 && this.activated) {
        this.display = 1;
        if (_0x23ad51 === 0) {
          this.id = _0x1b5b6d.id;
        } else {
          this.id = RECIPES[_0x1b5b6d.id].id2;
        }
        this.x = _0x1b5b6d.info.translate.x + 80;
        this.y = _0x1b5b6d.info.translate.y;
        this.craft = _0x23ad51;
      }
      return _0x5df514;
    },
  };
  if (this.info_box.activated === 1) {
    this.options.info_box_agree.display = "inline-block";
  } else {
    this.options.info_box_agree.display = "none";
  }
  document
    .getElementById("info_case_agree_opt")
    .addEventListener("mouseup", this.info_box.checkbox, false);
  Cookies.get("starve_scale") &&
    ((ratio_opt = Number(Cookies.get("starve_scale"))),
    (document.getElementById("input_ratio").value = ratio_opt),
    (ratio_opt *= devicePixelRatio / backingStoreRatio),
    resize_canvas());
  this.change_ratio = function () {
    Cookies.set(
      "starve_scale",
      "" + document.getElementById("input_ratio").value
    );
    ratio_opt =
      document.getElementById("input_ratio").value *
      (devicePixelRatio / backingStoreRatio);
    resize_canvas();
  };
  document
    .getElementById("input_ratio")
    .addEventListener("input", this.change_ratio, false);
  this.safe_delete = {
    open: false,
    activated: Cookies.get("starve_safe")
      ? Cookies.get("starve_safe") === "0"
        ? 0
        : 1
      : 1,
    id: document.getElementById("sure_delete"),
    style: document.getElementById("sure_delete").style,
    agree: document.getElementById("agree").style,
    button: 0,
    i: 0,
    quit: function () {
      game.safe_delete.style.display = "none";
      game.safe_delete.open = false;
    },
    all: function () {
      if (!user.build.wait) {
        if (
          user.craft.preview < 0 &&
          user.craft.id < 0 &&
          !user.ghost.enabled
        ) {
          client.delete_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    recycle: function () {
      if (user.craft.workbench && !user.build.wait) {
        if (
          user.craft.preview < 0 &&
          user.craft.id < 0 &&
          !user.ghost.enabled
        ) {
          client.recycle_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    one: function () {
      if (!user.build.wait) {
        if (
          user.craft.preview < 0 &&
          user.craft.id < 0 &&
          !user.ghost.enabled
        ) {
          client.delete_one_inv(game.safe_delete.button);
        }
        game.safe_delete.quit();
      }
    },
    checkbox: function () {
      !game.safe_delete.activated
        ? (Cookies.set("starve_safe", "1"),
          (game.safe_delete.agree.display = "none"),
          (game.options.agree.display = "inline-block"))
        : (Cookies.set("starve_safe", "0"),
          (game.safe_delete.agree.display = "inline-block"),
          (game.options.agree.display = "none"));
      game.safe_delete.activated = !game.safe_delete.activated;
    },
    del: function (_0x249668) {
      this.button = _0x249668;
      document.getElementById("item_to_del").src =
        sprite[INV_INFOS[_0x249668].img][0]["_src"] === undefined
          ? sprite[INV_INFOS[_0x249668].img][0].src
          : sprite[INV_INFOS[_0x249668].img][0]["_src"];
      if (
        INV_INFOS[_0x249668].recycle &&
        !user.zombie &&
        user.craft.workbench
      ) {
        document.getElementById("recycle_delete").style.display =
          "inline-block";
      } else {
        document.getElementById("recycle_delete").style.display = "none";
      }
      if (!this.activated) {
        this.all();
      } else {
        this.style.display = "inline-block";
        this.open = true;
      }
    },
    update: function () {
      this.style.left = Math.floor(canw2 - 235) + "px";
      this.style.top = Math.floor(canh2 - 175) + "px";
    },
  };
  this.safe_delete.agree.display = "none";
  if (this.safe_delete.activated) {
    this.options.agree.display = "inline-block";
  } else {
    this.options.agree.display = "none";
  }
  document
    .getElementById("one_delete")
    .addEventListener("mouseup", this.safe_delete.one, false);
  document
    .getElementById("yes_delete")
    .addEventListener("mouseup", this.safe_delete.all, false);
  document
    .getElementById("recycle_delete")
    .addEventListener("mouseup", this.safe_delete.recycle, false);
  document
    .getElementById("no_delete")
    .addEventListener("mouseup", this.safe_delete.quit, false);
  document
    .getElementById("case_agree")
    .addEventListener("mouseup", this.safe_delete.checkbox, false);
  this.shop = {
    open: false,
    kit: -1,
    button: gui_create_button(60, 60, "", sprite[SPRITE.SHOP]),
    id: document.getElementById("shop_starterkit"),
    style: document.getElementById("shop_starterkit").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 300) + "px";
      this.style.top = Math.floor(canh2 - 215) + "px";
    },
    quit: function () {
      game.shop.open = false;
      game.shop.style.display = "none";
    },
    select: function () {
      game.shop.open = !game.shop.open;
      if (!game.shop.open) {
        game.shop.style.display = "none";
      } else {
        game.shop.style.display = "inline-block";
      }
    },
    buy: function () {
      if (game.shop.kit >= 0) {
        client.choose_kit(game.shop.kit);
        game.shop.quit();
        if (ga) {
          ga("send", "event", "Game", "kit", "" + game.shop.kit);
        }
      }
    },
    init: function () {
      var _0x17e302 = user.shop.value;
      document.getElementById("points_bank").innerHTML =
        Utils.simplify_number(_0x17e302) + " points";
      for (var _0x13394c = 0; _0x13394c < KIT.length; _0x13394c++) {
        if (KIT[_0x13394c].price > _0x17e302) {
          document.getElementById("starter" + (_0x13394c + 1)).style.opacity =
            "0.4";
        } else {
          document.getElementById("starter" + (_0x13394c + 1)).style.opacity =
            "1";
        }
      }
      for (_0x13394c = 1; _0x13394c < 13; _0x13394c++) {
        document.getElementById("inv_shop" + _0x13394c).src =
          "./img/empty-shop.png";
        document.getElementById("amount_shop" + _0x13394c).innerHTML = "";
      }
      document.getElementById("buy_kit").style.opacity = "0.2";
    },
    get_starter: function () {
      if (this.id.length > 8) {
        var _0x2eee59 = Number(this.id.charAt(7) + this.id.charAt(8));
      } else {
        var _0x2eee59 = Number(this.id.charAt(7));
      }
      var _0x1c3990 = KIT[_0x2eee59 - 1];
      user.shop.value >= _0x1c3990.price
        ? ((game.shop.kit = _0x2eee59),
          (document.getElementById("buy_kit").style.opacity = "1"))
        : ((game.shop.kit = -1),
          (document.getElementById("buy_kit").style.opacity = "0.2"));
      _0x1c3990 = _0x1c3990.items;
      for (
        var _0x43df3c = 1, _0x7594be = 1;
        _0x43df3c < _0x1c3990.length + 1;
        _0x43df3c++
      ) {
        if (_0x1c3990[_0x43df3c - 1][1] === INV.BAG) {
          continue;
        }
        document.getElementById("inv_shop" + _0x7594be).style.display =
          "inline-block";
        document.getElementById("inv_shop" + _0x7594be).src =
          sprite[INV_INFOS[_0x1c3990[_0x43df3c - 1][1]].img][0]["_src"] ===
          undefined
            ? sprite[INV_INFOS[_0x1c3990[_0x43df3c - 1][1]].img][0].src
            : sprite[INV_INFOS[_0x1c3990[_0x43df3c - 1][1]].img][0]["_src"];
        document.getElementById("amount_shop" + _0x7594be).innerHTML =
          "" + _0x1c3990[_0x43df3c - 1][0];
        _0x7594be++;
      }
      for (; _0x7594be < 13; _0x7594be++) {
        document.getElementById("inv_shop" + _0x7594be).src =
          "./img/empty-shop.png";
        document.getElementById("amount_shop" + _0x7594be).innerHTML = "";
      }
    },
  };
  document
    .getElementById("quit3")
    .addEventListener("mouseup", this.shop.quit, false);
  document
    .getElementById("buy_kit")
    .addEventListener("mouseup", this.shop.buy, false);
  for (var _0x297b64 = 1; _0x297b64 < 11; _0x297b64++) {
    document
      .getElementById("starter" + _0x297b64)
      .addEventListener("mouseup", this.shop.get_starter, false);
  }
  this.quests = {
    open: false,
    activated: Cookies.get("starve_quests")
      ? Cookies.get("starve_quests") === "1"
        ? 1
        : 0
      : 0,
    button: gui_create_button(60, 60, "", sprite[SPRITE.QUEST_BUTTON]),
    id: document.getElementById("chronoquest"),
    style: document.getElementById("chronoquest").style,
    update: function () {
      this.style.left = Math.floor(canw2 - 420) + "px";
      this.style.top = Math.floor(canh2 - 270) + "px";
    },
    quit: function () {
      game.quests.style.display = "none";
      game.quests.open = false;
    },
    select: function () {
      game.quests.open = !game.quests.open;
      if (!game.quests.open) {
        game.quests.style.display = "none";
      } else {
        game.quests.style.display = "inline-block";
      }
    },
    list: [],
    reset: function () {
      for (var _0x94226 = 0; _0x94226 < QUESTS.length; _0x94226++) {
        this.list[_0x94226] = 1;
        document.getElementById("timeremain_" + _0x94226).style.display =
          "inline-block";
        document.getElementById("time_finished_" + _0x94226).style.display =
          "none";
        document.getElementById("claim_reward_" + _0x94226).style.display =
          "none";
      }
    },
    timer: 0,
    born: 0,
    update_chrono: function () {
      if (!game.quests.open) {
        return;
      }
      var _0x481348 = new Date().getTime();
      if (_0x481348 - this.timer < 1000) {
        return;
      }
      this.timer = _0x481348;
      for (var _0xb3daf5 = 0; _0xb3daf5 < QUESTS.length; _0xb3daf5++) {
        if (!game.quests.list[_0xb3daf5]) {
          continue;
        }
        var _0x18bf31 =
          QUESTS[_0xb3daf5].time -
          (_0x481348 - world.clock.init + game.quests.born);
        if (_0x18bf31 > 960000) {
          document.getElementById("timeremain_" + _0xb3daf5).innerHTML =
            Math.floor(_0x18bf31 / 480000) + " days";
        } else {
          if (_0x18bf31 > 480000) {
            document.getElementById("timeremain_" + _0xb3daf5).innerHTML =
              Math.floor(_0x18bf31 / 480000) + " day";
          } else {
            if (_0x18bf31 > 60000) {
              document.getElementById("timeremain_" + _0xb3daf5).innerHTML =
                Math.floor(_0x18bf31 / 60000) + " min";
            } else {
              document.getElementById("timeremain_" + _0xb3daf5).innerHTML =
                Math.floor(_0x18bf31 / 1000) + " sec";
            }
          }
        }
      }
    },
    restore: function (_0x1f5b06) {
      for (var _0x5d85ce = 0; _0x5d85ce < _0x1f5b06.length; _0x5d85ce++) {
        if (_0x1f5b06[_0x5d85ce] != 1) {
          game.quests.modify_simple(_0x5d85ce, _0x1f5b06[_0x5d85ce]);
        }
      }
    },
    modify_simple: function (_0x3872dc, _0x34e766) {
      _0x34e766 === 3 &&
        (_0x3872dc === 11 || _0x3872dc === 12) &&
        (user.inv.update_bag_size(0, 1), game.update_inv_buttons());
      document.getElementById("timeremain_" + _0x3872dc).innerHTML =
        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
      if (_0x34e766 > 1) {
        document.getElementById("time_finished_" + _0x3872dc).innerHTML =
          "SUCCEED";
        document.getElementById("timeremain_" + _0x3872dc).style.display =
          "none";
      } else {
        _0x34e766 === 0 &&
          ((document.getElementById("time_finished_" + _0x3872dc).innerHTML =
            "FAILED"),
          (document.getElementById("timeremain_" + _0x3872dc).style.display =
            "none"));
      }
      if (_0x34e766 === 2) {
        document.getElementById("claim_reward_" + _0x3872dc).style.display =
          "inline-block";
      } else {
        document.getElementById("claim_reward_" + _0x3872dc).style.display =
          "none";
      }
      document.getElementById("time_finished_" + _0x3872dc).style.display =
        "inline";
      game.quests.list[_0x3872dc] = 0;
    },
    modify: function (_0x5ce373, _0x3629f6) {
      game.quests.modify_simple(_0x5ce373, _0x3629f6);
      game.quests.activated &&
        ((game.quests.open = true),
        (game.quests.style.display = "inline-block"));
    },
    checkbox: function () {
      !game.quests.activated
        ? (Cookies.set("starve_quests", "1"),
          (game.options.quests_agree.display = "inline-block"))
        : (Cookies.set("starve_quests", "0"),
          (game.options.quests_agree.display = "none"));
      game.quests.activated = !game.quests.activated;
    },
    claim: function () {
      var _0x562838 = Number(this.id.charAt(13)),
        _0x345fd3 = Number(this.id.charAt(14));
      if (this.id.charAt(14) !== "" && _0x345fd3 >= 0 && _0x345fd3 <= 9) {
        _0x562838 = _0x562838 * 10 + _0x345fd3;
      }
      client.claim_quest_reward(_0x562838);
    },
  };
  if (this.quests.activated) {
    this.options.quests_agree.display = "inline-block";
  } else {
    this.options.quests_agree.display = "none";
  }
  document
    .getElementById("quit_chronoquest")
    .addEventListener("mouseup", this.quests.quit, false);
  for (var _0x297b64 = 0; _0x297b64 < QUESTS.length; _0x297b64++) {
    document
      .getElementById("claim_reward_" + _0x297b64)
      .addEventListener("mouseup", this.quests.claim, false);
  }
  this.craft_list = {
    open: false,
    button: gui_create_button(60, 60, "", sprite[SPRITE.RECIPE_BUTTON]),
    list: {
      id: document.getElementById("recipe_craft"),
      style: document.getElementById("recipe_craft").style,
      recipes: [],
      category: 0,
      update: function () {
        this.style.left = Math.floor(canw2 - 335) + "px";
        this.style.top = Math.floor(canh2 - 215) + "px";
      },
      quit: function () {
        document.getElementById("recipe_craft").style.display = "none";
        game.craft_list.open = false;
      },
      previous: function () {
        document.getElementById("recipe_craft").style.display = "none";
        document.getElementById("home_craft").style.display = "inline-block";
      },
      get_recipe: function (_0x12a4a7) {
        var _0x341c20 = this.recipes[_0x12a4a7];
        if (_0x341c20.o) {
          document.getElementById("watercraft").style.display = "inline-block";
        } else {
          document.getElementById("watercraft").style.display = "none";
        }
        if (_0x341c20.f) {
          document.getElementById("firecraft").style.display = "inline-block";
        } else {
          document.getElementById("firecraft").style.display = "none";
        }
        if (_0x341c20.w) {
          document.getElementById("workcraft").style.display = "inline-block";
        } else {
          document.getElementById("workcraft").style.display = "none";
        }
        if (_0x341c20.e) {
          document.getElementById("wellcraft").style.display = "inline-block";
        } else {
          document.getElementById("wellcraft").style.display = "none";
        }
        var _0x341c20 = _0x341c20.r;
        for (
          var _0x12a4a7 = 0, _0x495269 = 1;
          _0x12a4a7 < _0x341c20.length;
          _0x12a4a7++
        ) {
          document.getElementById("inv" + _0x495269).style.display =
            "inline-block";
          document.getElementById("inv" + _0x495269).src =
            sprite[INV_INFOS[_0x341c20[_0x12a4a7][0]].img][0]["_src"] ===
            undefined
              ? sprite[INV_INFOS[_0x341c20[_0x12a4a7][0]].img][0].src
              : sprite[INV_INFOS[_0x341c20[_0x12a4a7][0]].img][0]["_src"];
          document.getElementById("numb" + _0x495269).innerHTML =
            "" + _0x341c20[_0x12a4a7][1];
          _0x495269++;
        }
        for (; _0x495269 < 6; _0x495269++) {
          document.getElementById("inv" + _0x495269).style.display = "none";
          document.getElementById("numb" + _0x495269).innerHTML = "";
        }
      },
      select: function (_0x2a8ebe) {
        this.category = _0x2a8ebe;
        document.getElementById("home_craft").style.display = "none";
        document.getElementById("workcraft").style.display = "none";
        document.getElementById("firecraft").style.display = "none";
        document.getElementById("watercraft").style.display = "none";
        document.getElementById("wellcraft").style.display = "none";
        document.getElementById("recipe_craft").style.display = "inline-block";
        document.getElementById("inv1").style.display = "none";
        document.getElementById("inv2").style.display = "none";
        document.getElementById("inv3").style.display = "none";
        document.getElementById("inv4").style.display = "none";
        document.getElementById("inv5").style.display = "none";
        document.getElementById("numb1").innerHTML = "";
        document.getElementById("numb2").innerHTML = "";
        document.getElementById("numb3").innerHTML = "";
        document.getElementById("numb4").innerHTML = "";
        document.getElementById("numb5").innerHTML = "";
        for (
          var _0x1061b3 = 0, _0x14e2cc = 0;
          _0x1061b3 < RECIPES.length;
          _0x1061b3++
        ) {
          var _0x15acee = RECIPES[_0x1061b3];
          _0x2a8ebe === _0x15acee.t &&
            ((this.recipes[_0x14e2cc] = _0x15acee),
            _0x14e2cc++,
            (document.getElementById("img_" + _0x14e2cc).style.display =
              "inline-block"),
            (document.getElementById("img_" + _0x14e2cc).src =
              sprite[INV_INFOS[_0x15acee.id2].img][0]["_src"] === undefined
                ? sprite[INV_INFOS[_0x15acee.id2].img][0].src
                : sprite[INV_INFOS[_0x15acee.id2].img][0]["_src"]));
        }
        for (_0x14e2cc++; _0x14e2cc < 49; _0x14e2cc++) {
          document.getElementById("img_" + _0x14e2cc).style.display = "none";
        }
      },
    },
    home: {
      id: document.getElementById("home_craft"),
      style: document.getElementById("home_craft").style,
      update: function () {
        this.style.left = Math.floor(canw2 - 285) + "px";
        this.style.top = Math.floor(canh2 - 170) + "px";
      },
      quit: function () {
        document.getElementById("home_craft").style.display = "none";
        game.craft_list.open = false;
      },
    },
    select_book: function () {
      this.open = !this.open;
      if (!this.open) {
        document.getElementById("home_craft").style.display = "none";
        document.getElementById("recipe_craft").style.display = "none";
      } else {
        document.getElementById("home_craft").style.display = "inline-block";
      }
    },
  };
  document
    .getElementById("quit")
    .addEventListener("mouseup", this.craft_list.home.quit, false);
  document
    .getElementById("quitmenu")
    .addEventListener("mouseup", this.craft_list.list.quit, false);
  document
    .getElementById("backhome")
    .addEventListener("mouseup", this.craft_list.list.previous, false);
  document.getElementById("hatcategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.CLOTHES);
    },
    false
  );
  document.getElementById("weaponcategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.WEAPONS);
    },
    false
  );
  document.getElementById("toolcategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.TOOLS);
    },
    false
  );
  document.getElementById("foodcategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.FOODS);
    },
    false
  );
  document.getElementById("placeablecategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.UTILS);
    },
    false
  );
  document.getElementById("constructioncategory").addEventListener(
    "mouseup",
    function () {
      game.craft_list.list.select(CATEGORY.BASES);
    },
    false
  );
  document.getElementById("img_1").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(0);
    },
    false
  );
  document.getElementById("img_2").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(1);
    },
    false
  );
  document.getElementById("img_3").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(2);
    },
    false
  );
  document.getElementById("img_4").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(3);
    },
    false
  );
  document.getElementById("img_5").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(4);
    },
    false
  );
  document.getElementById("img_6").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(5);
    },
    false
  );
  document.getElementById("img_7").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(6);
    },
    false
  );
  document.getElementById("img_8").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(7);
    },
    false
  );
  document.getElementById("img_9").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(8);
    },
    false
  );
  document.getElementById("img_10").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(9);
    },
    false
  );
  document.getElementById("img_11").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(10);
    },
    false
  );
  document.getElementById("img_12").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(11);
    },
    false
  );
  document.getElementById("img_13").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(12);
    },
    false
  );
  document.getElementById("img_14").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(13);
    },
    false
  );
  document.getElementById("img_15").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(14);
    },
    false
  );
  document.getElementById("img_16").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(15);
    },
    false
  );
  document.getElementById("img_17").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(16);
    },
    false
  );
  document.getElementById("img_18").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(17);
    },
    false
  );
  document.getElementById("img_19").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(18);
    },
    false
  );
  document.getElementById("img_20").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(19);
    },
    false
  );
  document.getElementById("img_21").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(20);
    },
    false
  );
  document.getElementById("img_22").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(21);
    },
    false
  );
  document.getElementById("img_23").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(22);
    },
    false
  );
  document.getElementById("img_24").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(23);
    },
    false
  );
  document.getElementById("img_25").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(24);
    },
    false
  );
  document.getElementById("img_26").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(25);
    },
    false
  );
  document.getElementById("img_27").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(26);
    },
    false
  );
  document.getElementById("img_28").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(27);
    },
    false
  );
  document.getElementById("img_29").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(28);
    },
    false
  );
  document.getElementById("img_30").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(29);
    },
    false
  );
  document.getElementById("img_31").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(30);
    },
    false
  );
  document.getElementById("img_32").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(31);
    },
    false
  );
  document.getElementById("img_33").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(32);
    },
    false
  );
  document.getElementById("img_34").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(33);
    },
    false
  );
  document.getElementById("img_35").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(34);
    },
    false
  );
  document.getElementById("img_36").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(35);
    },
    false
  );
  document.getElementById("img_37").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(36);
    },
    false
  );
  document.getElementById("img_38").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(37);
    },
    false
  );
  document.getElementById("img_39").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(38);
    },
    false
  );
  document.getElementById("img_40").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(39);
    },
    false
  );
  document.getElementById("img_41").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(40);
    },
    false
  );
  document.getElementById("img_42").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(41);
    },
    false
  );
  document.getElementById("img_43").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(42);
    },
    false
  );
  document.getElementById("img_44").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(43);
    },
    false
  );
  document.getElementById("img_45").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(44);
    },
    false
  );
  document.getElementById("img_46").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(45);
    },
    false
  );
  document.getElementById("img_47").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(46);
    },
    false
  );
  document.getElementById("img_48").addEventListener(
    "mousedown",
    function () {
      game.craft_list.list.get_recipe(47);
    },
    false
  );
  this.minimap = {
    translate: {
      x: 0,
      y: 0,
    },
    marker: {
      x: -1,
      y: -1,
    },
    players: [],
    focus: function (_0x21c1bc) {
      var _0x5ab883 =
        this.translate.y + (user.inv.can_select.length > 0 ? -120 : -50);
      _0x21c1bc.x > this.translate.x &&
        _0x21c1bc.x < this.translate.x + 193 &&
        _0x21c1bc.y > _0x5ab883 &&
        _0x21c1bc.y < _0x5ab883 + 193 &&
        ((this.marker.x = _0x21c1bc.x - this.translate.x),
        (this.marker.y = _0x21c1bc.y - _0x5ab883));
    },
  };
  this.leaderboard = {
    translate: {
      x: 0,
      y: 0,
    },
    img: sprite[SPRITE.LEADERBOARD],
    can: document.createElement("canvas"),
  };
  this.leaderboard.can.width = this.leaderboard.img.width;
  this.leaderboard.can.height = this.leaderboard.img.height;
  this.leaderboard.ctx = this.leaderboard.can.getContext("2d");
  this.gauges = {
    translate: {
      x: 0,
      y: 0,
    },
    img: sprite[SPRITE.GAUGES],
    draw: draw_gauges,
    y: 0,
  };
  this.leave_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML +=
      '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' +
      world.players[user.team[0]].nickname +
      "</div";
    for (var _0x437cb4 = 1; _0x437cb4 < user.team.length; _0x437cb4++) {
      div.innerHTML +=
        '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' +
        world.players[user.team[_0x437cb4]].nickname +
        "</div></div>";
    }
    div.innerHTML +=
      '<div id="leave" style="display:inline-block;">LEAVE</div></div>';
    div.style.display = "inline-block";
    document
      .getElementById("leave")
      .addEventListener("click", client.leave_team, false);
  };
  this.show_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML +=
      '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' +
      world.players[user.team[0]].nickname +
      "</div";
    for (var _0x4a819a = 1; _0x4a819a < user.team.length; _0x4a819a++) {
      div.innerHTML +=
        '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' +
        world.players[user.team[_0x4a819a]].nickname +
        "</div></div>";
    }
    div.innerHTML += "</div>";
    div.style.display = "inline-block";
  };
  this.manage_team = function () {
    div = document.getElementById("team_box");
    div.innerHTML = "";
    div.innerHTML +=
      '<div id="leader"><img src="./img/leaderlogo.png" style="width:25px;margin-right:5px;" ></img>' +
      world.players[user.team[0]].nickname +
      "</div";
    for (var _0x44ed48 = 1; _0x44ed48 < user.team.length; _0x44ed48++) {
      div.innerHTML +=
        '<div class="nicknames"> <div style="display:inline-block;padding-top:7px;">' +
        world.players[user.team[_0x44ed48]].nickname +
        '</div><div class="eject_member" id="eject_member' +
        _0x44ed48 +
        '"><img src="./img/close-team.png" style="width:20px;padding:5px;"></img></div>';
    }
    if (user.totem.lock === 0) {
      div.innerHTML +=
        '<div id="lock_team" style="display:inline-block;">LOCK</div></div>';
    } else {
      div.innerHTML +=
        '<div id="lock_team" style="display:inline-block;">UNLOCK</div></div>';
    }
    document
      .getElementById("lock_team")
      .addEventListener("click", client.lock_team, false);
    div.style.display = "inline-block";
    for (var _0x44ed48 = 1; _0x44ed48 < user.team.length; _0x44ed48++) {
      switch (_0x44ed48) {
        case 1:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(1);
            },
            false
          );
          break;
        case 2:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(2);
            },
            false
          );
          break;
        case 3:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(3);
            },
            false
          );
          break;
        case 4:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(4);
            },
            false
          );
          break;
        case 5:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(5);
            },
            false
          );
          break;
        case 6:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(6);
            },
            false
          );
          break;
        case 7:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(7);
            },
            false
          );
          break;
        case 8:
          document.getElementById("eject_member" + _0x44ed48).addEventListener(
            "click",
            function () {
              client.kick_team(8);
            },
            false
          );
          break;
      }
    }
  };
  this.team_buttons = [];
  this.team_buttons[CLIENT.TEAM_LEAVE] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
    action: this.leave_team,
  };
  this.team_buttons[CLIENT.TEAM_JOIN] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.TEAM_BUTTON]),
    action: client.join_team,
  };
  this.team_buttons[CLIENT.TEAM_MANAGE] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.MANAGE_TEAM_BUTTON]),
    action: this.manage_team,
  };
  this.team_buttons[CLIENT.TEAM_SHOW] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.SHOW_TEAM_BUTTON]),
    action: this.show_team,
  };
  this.team_buttons[CLIENT.TEAM_FULL] = {
    button: gui_create_button(60, 60, "", sprite[SPRITE.FULL_TEAM_BUTTON]),
    action: function () {},
  };
  this.team_buttons_id = -1;
  this.bread_oven_wood_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.BREAD_OVEN_WOOD]
  );
  this.bread_oven_bread_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.BREAD_OVEN_BREAD]
  );
  this.bread_oven_flour_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.WINDMILL_FLOUR]
  );
  this.windmill_wheat_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.WINDMILL_WHEAT_SEED]
  );
  this.windmill_flour_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.WINDMILL_FLOUR]
  );
  this.extractor_wood_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD]
  );
  this.extractor_stone_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE]
  );
  this.extractor_gold_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD]
  );
  this.extractor_diamond_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND]
  );
  this.extractor_amethyst_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST]
  );
  this.extractor_reidite_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE]
  );
  this.furnace_button = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.FURNACE_BUTTON]
  );
  this.chest_padlock = gui_create_button(60, 60, "", sprite[SPRITE.PADLOCK]);
  this.chest_lockpick = gui_create_button(60, 60, "", sprite[SPRITE.KEY]);
  this.chest_locked = gui_create_button(60, 60, "", sprite[SPRITE.LOCKED]);
  this.resurrection = gui_create_button(
    120,
    120,
    "",
    sprite[SPRITE.DRAGON_HEART]
  );
  this.resurrection.info.translate.x = 10;
  this.resurrection.info.translate.y = 10;
  this.chest_buttons = [];
  this.chest_buttons[INV.SWORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SWORD],
    3
  );
  this.chest_buttons[INV.SWORD].id = INV.SWORD;
  this.chest_buttons[INV.PICK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK],
    3
  );
  this.chest_buttons[INV.PICK].id = INV.PICK;
  this.chest_buttons[INV.STONE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE],
    3
  );
  this.chest_buttons[INV.STONE].id = INV.STONE;
  this.chest_buttons[INV.WOOD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD],
    3
  );
  this.chest_buttons[INV.WOOD].id = INV.WOOD;
  this.chest_buttons[INV.PLANT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PLANT],
    3
  );
  this.chest_buttons[INV.PLANT].id = INV.PLANT;
  this.chest_buttons[INV.CACTUS] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CACTUS],
    3
  );
  this.chest_buttons[INV.CACTUS].id = INV.CACTUS;
  this.chest_buttons[INV.GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD],
    3
  );
  this.chest_buttons[INV.GOLD].id = INV.GOLD;
  this.chest_buttons[INV.DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND],
    3
  );
  this.chest_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.chest_buttons[INV.PICK_GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK_GOLD],
    3
  );
  this.chest_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.chest_buttons[INV.PICK_DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK_DIAMOND],
    3
  );
  this.chest_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.chest_buttons[INV.SWORD_GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SWORD_GOLD],
    3
  );
  this.chest_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.chest_buttons[INV.SWORD_WOOD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SWORD_WOOD],
    3
  );
  this.chest_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.chest_buttons[INV.SWORD_DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SWORD_DIAMOND],
    3
  );
  this.chest_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.chest_buttons[INV.FIRE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FIRE],
    3
  );
  this.chest_buttons[INV.FIRE].id = INV.FIRE;
  this.chest_buttons[INV.WORKBENCH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WORKBENCH],
    3
  );
  this.chest_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.chest_buttons[INV.SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SEED],
    3
  );
  this.chest_buttons[INV.SEED].id = INV.SEED;
  this.chest_buttons[INV.WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WALL],
    3
  );
  this.chest_buttons[INV.WALL].id = INV.WALL;
  this.chest_buttons[INV.SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SPIKE],
    3
  );
  this.chest_buttons[INV.SPIKE].id = INV.SPIKE;
  this.chest_buttons[INV.PICK_WOOD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK_WOOD],
    3
  );
  this.chest_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.chest_buttons[INV.COOKED_MEAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_COOKED_MEAT],
    3
  );
  this.chest_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.chest_buttons[INV.MEAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_MEAT],
    3
  );
  this.chest_buttons[INV.MEAT].id = INV.MEAT;
  this.chest_buttons[INV.BIG_FIRE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BIG_FIRE],
    3
  );
  this.chest_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.chest_buttons[INV.BANDAGE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BANDAGE],
    3
  );
  this.chest_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.chest_buttons[INV.CORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CORD],
    3
  );
  this.chest_buttons[INV.CORD].id = INV.CORD;
  this.chest_buttons[INV.STONE_WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_WALL],
    3
  );
  this.chest_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.chest_buttons[INV.GOLD_WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_WALL],
    3
  );
  this.chest_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.chest_buttons[INV.DIAMOND_WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_WALL],
    3
  );
  this.chest_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.chest_buttons[INV.WOOD_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DOOR_WOOD_CLOSE],
    3
  );
  this.chest_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.chest_buttons[INV.CHEST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CHEST],
    3
  );
  this.chest_buttons[INV.CHEST].id = INV.CHEST;
  this.chest_buttons[INV.STONE_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_SPIKE],
    3
  );
  this.chest_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.chest_buttons[INV.GOLD_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_SPIKE],
    3
  );
  this.chest_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.chest_buttons[INV.DIAMOND_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_SPIKE],
    3
  );
  this.chest_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.chest_buttons[INV.FUR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR],
    3
  );
  this.chest_buttons[INV.FUR].id = INV.FUR;
  this.chest_buttons[INV.FUR_BOAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR_BOAR],
    3
  );
  this.chest_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.chest_buttons[INV.FUR_WOLF] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR_WOLF],
    3
  );
  this.chest_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.chest_buttons[INV.PENGUIN_FEATHER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PENGUIN_FEATHER],
    3
  );
  this.chest_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.chest_buttons[INV.HAWK_FEATHER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAWK_FEATHER],
    3
  );
  this.chest_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.chest_buttons[INV.VULTURE_FEATHER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_VULTURE_FEATHER],
    3
  );
  this.chest_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.chest_buttons[INV.EMERALD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EMERALD],
    3
  );
  this.chest_buttons[INV.EMERALD].id = INV.EMERALD;
  this.chest_buttons[INV.EARMUFFS] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EARMUFFS],
    3
  );
  this.chest_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.chest_buttons[INV.STONE_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DOOR_STONE_CLOSE],
    3
  );
  this.chest_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.chest_buttons[INV.GOLD_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DOOR_GOLD_CLOSE],
    3
  );
  this.chest_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.chest_buttons[INV.DIAMOND_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DOOR_DIAMOND_CLOSE],
    3
  );
  this.chest_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.chest_buttons[INV.COAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_COAT],
    3
  );
  this.chest_buttons[INV.COAT].id = INV.COAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_SPEAR],
    3
  );
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SPEAR],
    3
  );
  this.chest_buttons[INV.SPEAR].id = INV.SPEAR;
  this.chest_buttons[INV.GOLD_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_SPEAR],
    3
  );
  this.chest_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.chest_buttons[INV.DIAMOND_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_SPEAR],
    3
  );
  this.chest_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_SPEAR],
    3
  );
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.FURNACE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FURNACE],
    3
  );
  this.chest_buttons[INV.FURNACE].id = INV.FURNACE;
  this.chest_buttons[INV.EXPLORER_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXPLORER_HAT],
    3
  );
  this.chest_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.chest_buttons[INV.PIRATE_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PIRATE_HAT],
    3
  );
  this.chest_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.chest_buttons[INV.FLOWER_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FLOWER_HAT],
    3
  );
  this.chest_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.chest_buttons[INV.FUR_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR_HAT],
    3
  );
  this.chest_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.chest_buttons[INV.TURBAN1] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_TURBAN1],
    3
  );
  this.chest_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.chest_buttons[INV.TURBAN2] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_TURBAN2],
    3
  );
  this.chest_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.chest_buttons[INV.WOOD_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_ARROW],
    3
  );
  this.chest_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.chest_buttons[INV.WOOD_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_BOW],
    3
  );
  this.chest_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.chest_buttons[INV.WOOD_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_SHIELD],
    3
  );
  this.chest_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.chest_buttons[INV.STONE_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_ARROW],
    3
  );
  this.chest_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.chest_buttons[INV.STONE_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_BOW],
    3
  );
  this.chest_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.chest_buttons[INV.STONE_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_SHIELD],
    3
  );
  this.chest_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.chest_buttons[INV.GOLD_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_ARROW],
    3
  );
  this.chest_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.chest_buttons[INV.GOLD_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_BOW],
    3
  );
  this.chest_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.chest_buttons[INV.GOLD_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_SHIELD],
    3
  );
  this.chest_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.chest_buttons[INV.DIAMOND_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_ARROW],
    3
  );
  this.chest_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.chest_buttons[INV.DIAMOND_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_BOW],
    3
  );
  this.chest_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.chest_buttons[INV.DIAMOND_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_SHIELD],
    3
  );
  this.chest_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.chest_buttons[INV.AMETHYST_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_ARROW],
    3
  );
  this.chest_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.chest_buttons[INV.AMETHYST_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_BOW],
    3
  );
  this.chest_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.chest_buttons[INV.AMETHYST_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_SHIELD],
    3
  );
  this.chest_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.chest_buttons[INV.REIDITE_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_ARROW],
    3
  );
  this.chest_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.chest_buttons[INV.REIDITE_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_BOW],
    3
  );
  this.chest_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.chest_buttons[INV.REIDITE_SHIELD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_SHIELD],
    3
  );
  this.chest_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.chest_buttons[INV.DRAGON_ARROW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_ARROW],
    3
  );
  this.chest_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.chest_buttons[INV.DRAGON_BOW] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_BOW],
    3
  );
  this.chest_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.chest_buttons[INV.WOOD_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_HELMET],
    3
  );
  this.chest_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.chest_buttons[INV.STONE_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_HELMET],
    3
  );
  this.chest_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.chest_buttons[INV.GOLD_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_HELMET],
    3
  );
  this.chest_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.chest_buttons[INV.DIAMOND_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_HELMET],
    3
  );
  this.chest_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.chest_buttons[INV.BOOK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BOOK],
    3
  );
  this.chest_buttons[INV.BOOK].id = INV.BOOK;
  this.chest_buttons[INV.PAPER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PAPER],
    3
  );
  this.chest_buttons[INV.PAPER].id = INV.PAPER;
  this.chest_buttons[INV.BAG] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BAG],
    3
  );
  this.chest_buttons[INV.BAG].id = INV.BAG;
  this.chest_buttons[INV.AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST],
    3
  );
  this.chest_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.chest_buttons[INV.SWORD_AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SWORD_AMETHYST],
    3
  );
  this.chest_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.chest_buttons[INV.PIRATE_SWORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PIRATE_SWORD],
    3
  );
  this.chest_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.chest_buttons[INV.PICK_AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK_AMETHYST],
    3
  );
  this.chest_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.chest_buttons[INV.PICK_REIDITE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PICK_REIDITE],
    3
  );
  this.chest_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.chest_buttons[INV.AMETHYST_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_SPEAR],
    3
  );
  this.chest_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.chest_buttons[INV.HAMMER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAMMER],
    3
  );
  this.chest_buttons[INV.HAMMER].id = INV.HAMMER;
  this.chest_buttons[INV.HAMMER_GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAMMER_GOLD],
    3
  );
  this.chest_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.chest_buttons[INV.HAMMER_DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAMMER_DIAMOND],
    3
  );
  this.chest_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.chest_buttons[INV.HAMMER_AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAMMER_AMETHYST],
    3
  );
  this.chest_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.chest_buttons[INV.HAMMER_REIDITE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAMMER_REIDITE],
    3
  );
  this.chest_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.chest_buttons[INV.AMETHYST_WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_WALL],
    3
  );
  this.chest_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.chest_buttons[INV.AMETHYST_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_SPIKE],
    3
  );
  this.chest_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DOOR_AMETHYST_CLOSE],
    3
  );
  this.chest_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.chest_buttons[INV.CAP_SCARF] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CAP_SCARF],
    3
  );
  this.chest_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.chest_buttons[INV.FUR_WINTER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR_WINTER],
    3
  );
  this.chest_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.chest_buttons[INV.FUR_MAMMOTH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FUR_MAMMOTH],
    3
  );
  this.chest_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.chest_buttons[INV.BLUE_CORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BLUE_CORD],
    3
  );
  this.chest_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.chest_buttons[INV.LOCK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LOCK],
    3
  );
  this.chest_buttons[INV.LOCK].id = INV.LOCK;
  this.chest_buttons[INV.DRAGON_HEART] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_HEART],
    3
  );
  this.chest_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_HEART],
    3
  );
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.chest_buttons[INV.RESURRECTION] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_RESURRECTION],
    3
  );
  this.chest_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.chest_buttons[INV.LOCKPICK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LOCKPICK],
    3
  );
  this.chest_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.chest_buttons[INV.TOTEM] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_TOTEM],
    3
  );
  this.chest_buttons[INV.TOTEM].id = INV.TOTEM;
  this.chest_buttons[INV.AMETHYST_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_HELMET],
    3
  );
  this.chest_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.chest_buttons[INV.SUPER_HAMMER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SUPER_HAMMER],
    3
  );
  this.chest_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.chest_buttons[INV.BRIDGE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BRIDGE],
    3
  );
  this.chest_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.chest_buttons[INV.WOOD_TOWER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_TOWER],
    3
  );
  this.chest_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.chest_buttons[INV.BOAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BOAT],
    3
  );
  this.chest_buttons[INV.BOAT].id = INV.BOAT;
  this.chest_buttons[INV.SLED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SLED],
    3
  );
  this.chest_buttons[INV.SLED].id = INV.SLED;
  this.chest_buttons[INV.PLANE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PLANE],
    3
  );
  this.chest_buttons[INV.PLANE].id = INV.PLANE;
  this.chest_buttons[INV.SADDLE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SADDLE],
    3
  );
  this.chest_buttons[INV.SADDLE].id = INV.SADDLE;
  this.chest_buttons[INV.MOUNT_BOAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_MOUNT_BOAR],
    3
  );
  this.chest_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.chest_buttons[INV.BABY_DRAGON] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BABY_DRAGON],
    3
  );
  this.chest_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.chest_buttons[INV.BABY_MAMMOTH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BABY_MAMMOTH],
    3
  );
  this.chest_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.chest_buttons[INV.BABY_LAVA] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BABY_LAVA],
    3
  );
  this.chest_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.chest_buttons[INV.HAWK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HAWK],
    3
  );
  this.chest_buttons[INV.HAWK].id = INV.HAWK;
  this.chest_buttons[INV.CRAB_BOSS] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CRAB_BOSS],
    3
  );
  this.chest_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.chest_buttons[INV.SAND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SAND],
    3
  );
  this.chest_buttons[INV.SAND].id = INV.SAND;
  this.chest_buttons[INV.BOTTLE_FULL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BOTTLE_FULL],
    3
  );
  this.chest_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.chest_buttons[INV.BOTTLE_EMPTY] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BOTTLE_EMPTY],
    3
  );
  this.chest_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.chest_buttons[INV.SHOVEL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SHOVEL],
    3
  );
  this.chest_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.chest_buttons[INV.SHOVEL_GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SHOVEL_GOLD],
    3
  );
  this.chest_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.chest_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SHOVEL_DIAMOND],
    3
  );
  this.chest_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.chest_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SHOVEL_AMETHYST],
    3
  );
  this.chest_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.chest_buttons[INV.SPANNER] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SPANNER],
    3
  );
  this.chest_buttons[INV.SPANNER].id = INV.SPANNER;
  this.chest_buttons[INV.KRAKEN_SKIN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_KRAKEN_SKIN],
    3
  );
  this.chest_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.chest_buttons[INV.WATERING_CAN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WATERING_CAN],
    3
  );
  this.chest_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.chest_buttons[INV.FLOUR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FLOUR],
    3
  );
  this.chest_buttons[INV.FLOUR].id = INV.FLOUR;
  this.chest_buttons[INV.WHEAT_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WHEAT_SEED],
    3
  );
  this.chest_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.chest_buttons[INV.COOKIE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_COOKIE],
    3
  );
  this.chest_buttons[INV.COOKIE].id = INV.COOKIE;
  this.chest_buttons[INV.WILD_WHEAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WILD_WHEAT],
    3
  );
  this.chest_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.chest_buttons[INV.WINDMILL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WINDMILL],
    3
  );
  this.chest_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.chest_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SUPER_DIVING_SUIT],
    3
  );
  this.chest_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.chest_buttons[INV.DIVING_MASK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIVING_MASK],
    3
  );
  this.chest_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.chest_buttons[INV.WATERING_CAN_FULL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WATERING_CAN_FULL],
    3
  );
  this.chest_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.chest_buttons[INV.CAKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CAKE],
    3
  );
  this.chest_buttons[INV.CAKE].id = INV.CAKE;
  this.chest_buttons[INV.BREAD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BREAD],
    3
  );
  this.chest_buttons[INV.BREAD].id = INV.BREAD;
  this.chest_buttons[INV.FOODFISH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FOODFISH],
    3
  );
  this.chest_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.chest_buttons[INV.FOODFISH_COOKED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FOODFISH_COOKED],
    3
  );
  this.chest_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.chest_buttons[INV.SCALES] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SCALES],
    3
  );
  this.chest_buttons[INV.SCALES].id = INV.SCALES;
  this.chest_buttons[INV.GROUND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GROUND],
    3
  );
  this.chest_buttons[INV.GROUND].id = INV.GROUND;
  this.chest_buttons[INV.PLOT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PLOT],
    3
  );
  this.chest_buttons[INV.PLOT].id = INV.PLOT;
  this.chest_buttons[INV.ICE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_ICE],
    3
  );
  this.chest_buttons[INV.ICE].id = INV.ICE;
  this.chest_buttons[INV.BREAD_OVEN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BREAD_OVEN],
    3
  );
  this.chest_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.chest_buttons[INV.SANDWICH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SANDWICH],
    3
  );
  this.chest_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.chest_buttons[INV.DRAGON_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_HELMET],
    3
  );
  this.chest_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.chest_buttons[INV.DRAGON_SWORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_SWORD],
    3
  );
  this.chest_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.chest_buttons[INV.DRAGON_ORB] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_ORB],
    3
  );
  this.chest_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.chest_buttons[INV.DRAGON_CUBE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_CUBE],
    3
  );
  this.chest_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_ORB],
    3
  );
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.LAVA_CUBE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_CUBE],
    3
  );
  this.chest_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.chest_buttons[INV.CROWN_GREEN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CROWN_GREEN],
    3
  );
  this.chest_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.chest_buttons[INV.GEMME_GREEN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GEMME_GREEN],
    3
  );
  this.chest_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.chest_buttons[INV.GEMME_ORANGE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GEMME_ORANGE],
    3
  );
  this.chest_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.chest_buttons[INV.CROWN_ORANGE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CROWN_ORANGE],
    3
  );
  this.chest_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.chest_buttons[INV.GEMME_BLUE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GEMME_BLUE],
    3
  );
  this.chest_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.chest_buttons[INV.CROWN_BLUE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CROWN_BLUE],
    3
  );
  this.chest_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.chest_buttons[INV.HOOD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_HOOD],
    3
  );
  this.chest_buttons[INV.HOOD].id = INV.HOOD;
  this.chest_buttons[INV.PEASANT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PEASANT],
    3
  );
  this.chest_buttons[INV.PEASANT].id = INV.PEASANT;
  this.chest_buttons[INV.SPECIAL_FUR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SPECIAL_FUR],
    3
  );
  this.chest_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.chest_buttons[INV.SPECIAL_FUR_2] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SPECIAL_FUR_2],
    3
  );
  this.chest_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.chest_buttons[INV.WINTER_PEASANT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WINTER_PEASANT],
    3
  );
  this.chest_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.chest_buttons[INV.WINTER_HOOD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WINTER_HOOD],
    3
  );
  this.chest_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.chest_buttons[INV.BUCKET_FULL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BUCKET_FULL],
    3
  );
  this.chest_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.chest_buttons[INV.BUCKET_EMPTY] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BUCKET_EMPTY],
    3
  );
  this.chest_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.chest_buttons[INV.WELL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WELL],
    3
  );
  this.chest_buttons[INV.WELL].id = INV.WELL;
  this.chest_buttons[INV.SIGN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SIGN],
    3
  );
  this.chest_buttons[INV.SIGN].id = INV.SIGN;
  this.chest_buttons[INV.PUMPKIN_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PUMPKIN_SEED],
    3
  );
  this.chest_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.chest_buttons[INV.PUMPKIN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PUMPKIN],
    3
  );
  this.chest_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.chest_buttons[INV.ROOF] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_ROOF],
    3
  );
  this.chest_buttons[INV.ROOF].id = INV.ROOF;
  this.chest_buttons[INV.GARLIC_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GARLIC_SEED],
    3
  );
  this.chest_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.chest_buttons[INV.GARLIC] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GARLIC],
    3
  );
  this.chest_buttons[INV.GARLIC].id = INV.GARLIC;
  this.chest_buttons[INV.THORNBUSH_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_THORNBUSH_SEED],
    3
  );
  this.chest_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.chest_buttons[INV.THORNBUSH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_THORNBUSH],
    3
  );
  this.chest_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.chest_buttons[INV.TOMATO_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_TOMATO_SEED],
    3
  );
  this.chest_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.chest_buttons[INV.TOMATO] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_TOMATO],
    3
  );
  this.chest_buttons[INV.TOMATO].id = INV.TOMATO;
  this.chest_buttons[INV.CARROT_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CARROT_SEED],
    3
  );
  this.chest_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.chest_buttons[INV.CARROT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CARROT],
    3
  );
  this.chest_buttons[INV.CARROT].id = INV.CARROT;
  this.chest_buttons[INV.WATERMELON_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WATERMELON_SEED],
    3
  );
  this.chest_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.chest_buttons[INV.WATERMELON] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WATERMELON],
    3
  );
  this.chest_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.chest_buttons[INV.ALOE_VERA_SEED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_ALOE_VERA_SEED],
    3
  );
  this.chest_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.chest_buttons[INV.ALOE_VERA] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_ALOE_VERA],
    3
  );
  this.chest_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.chest_buttons[INV.CHRISTMAS_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CHRISTMAS_HAT],
    3
  );
  this.chest_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.chest_buttons[INV.ELF_HAT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_ELF_HAT],
    3
  );
  this.chest_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.chest_buttons[INV.WOOD_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_SPEAR],
    3
  );
  this.chest_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.chest_buttons[INV.DRAGON_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DRAGON_SPEAR],
    3
  );
  this.chest_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.chest_buttons[INV.CRAB_STICK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CRAB_STICK],
    3
  );
  this.chest_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.chest_buttons[INV.CRAB_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CRAB_SPEAR],
    3
  );
  this.chest_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.chest_buttons[INV.CRAB_LOOT] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CRAB_LOOT],
    3
  );
  this.chest_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.chest_buttons[INV.BED] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_BED],
    3
  );
  this.chest_buttons[INV.BED].id = INV.BED;
  this.chest_buttons[INV.CROWN_CRAB] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CROWN_CRAB],
    3
  );
  this.chest_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.chest_buttons[INV.GARLAND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GARLAND],
    3
  );
  this.chest_buttons[INV.GARLAND].id = INV.GARLAND;
  this.chest_buttons[INV.SUGAR_CAN] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SUGAR_CAN],
    3
  );
  this.chest_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.chest_buttons[INV.CANDY] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_CANDY],
    3
  );
  this.chest_buttons[INV.CANDY].id = INV.CANDY;
  this.plus_buttons = [];
  for (var _0x297b64 = 0; _0x297b64 < 250; _0x297b64++) {
    this.plus_buttons[_0x297b64] = gui_create_button(
      0,
      0,
      "",
      sprite[SPRITE.CHEST_PLUS]
    );
  }
  this.inv_buttons = [];
  this.inv_buttons[INV.SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SWORD],
    3
  );
  this.inv_buttons[INV.SWORD].id = INV.SWORD;
  this.inv_buttons[INV.PICK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK],
    3
  );
  this.inv_buttons[INV.PICK].id = INV.PICK;
  this.inv_buttons[INV.STONE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE],
    3
  );
  this.inv_buttons[INV.STONE].id = INV.STONE;
  this.inv_buttons[INV.STONE].info.img[2] =
    this.inv_buttons[INV.STONE].info.img[0];
  this.inv_buttons[INV.WOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD],
    3
  );
  this.inv_buttons[INV.WOOD].id = INV.WOOD;
  this.inv_buttons[INV.WOOD].info.img[2] =
    this.inv_buttons[INV.WOOD].info.img[0];
  this.inv_buttons[INV.PLANT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PLANT],
    3
  );
  this.inv_buttons[INV.PLANT].id = INV.PLANT;
  this.inv_buttons[INV.CACTUS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CACTUS],
    3
  );
  this.inv_buttons[INV.CACTUS].id = INV.CACTUS;
  this.inv_buttons[INV.GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD],
    3
  );
  this.inv_buttons[INV.GOLD].id = INV.GOLD;
  this.inv_buttons[INV.GOLD].info.img[2] =
    this.inv_buttons[INV.GOLD].info.img[0];
  this.inv_buttons[INV.DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND],
    3
  );
  this.inv_buttons[INV.DIAMOND].id = INV.DIAMOND;
  this.inv_buttons[INV.DIAMOND].info.img[2] =
    this.inv_buttons[INV.DIAMOND].info.img[0];
  this.inv_buttons[INV.PICK_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK_GOLD],
    3
  );
  this.inv_buttons[INV.PICK_GOLD].id = INV.PICK_GOLD;
  this.inv_buttons[INV.PICK_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK_DIAMOND],
    3
  );
  this.inv_buttons[INV.PICK_DIAMOND].id = INV.PICK_DIAMOND;
  this.inv_buttons[INV.SWORD_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SWORD_GOLD],
    3
  );
  this.inv_buttons[INV.SWORD_GOLD].id = INV.SWORD_GOLD;
  this.inv_buttons[INV.SWORD_WOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SWORD_WOOD],
    3
  );
  this.inv_buttons[INV.SWORD_WOOD].id = INV.SWORD_WOOD;
  this.inv_buttons[INV.SWORD_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SWORD_DIAMOND],
    3
  );
  this.inv_buttons[INV.SWORD_DIAMOND].id = INV.SWORD_DIAMOND;
  this.inv_buttons[INV.FIRE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FIRE],
    3
  );
  this.inv_buttons[INV.FIRE].id = INV.FIRE;
  this.inv_buttons[INV.WORKBENCH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WORK],
    3
  );
  this.inv_buttons[INV.WORKBENCH].id = INV.WORKBENCH;
  this.inv_buttons[INV.SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SEED],
    3
  );
  this.inv_buttons[INV.SEED].id = INV.SEED;
  this.inv_buttons[INV.WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WALL],
    3
  );
  this.inv_buttons[INV.WALL].id = INV.WALL;
  this.inv_buttons[INV.SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SPIKE],
    3
  );
  this.inv_buttons[INV.SPIKE].id = INV.SPIKE;
  this.inv_buttons[INV.PICK_WOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK_WOOD],
    3
  );
  this.inv_buttons[INV.PICK_WOOD].id = INV.PICK_WOOD;
  this.inv_buttons[INV.COOKED_MEAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_COOKED_MEAT],
    3
  );
  this.inv_buttons[INV.COOKED_MEAT].id = INV.COOKED_MEAT;
  this.inv_buttons[INV.MEAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_MEAT],
    3
  );
  this.inv_buttons[INV.MEAT].id = INV.MEAT;
  this.inv_buttons[INV.BIG_FIRE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BIG_FIRE],
    3
  );
  this.inv_buttons[INV.BIG_FIRE].id = INV.BIG_FIRE;
  this.inv_buttons[INV.BANDAGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BANDAGE],
    3
  );
  this.inv_buttons[INV.BANDAGE].id = INV.BANDAGE;
  this.inv_buttons[INV.CORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CORD],
    3
  );
  this.inv_buttons[INV.CORD].id = INV.CORD;
  this.inv_buttons[INV.CORD].info.img[2] =
    this.inv_buttons[INV.CORD].info.img[0];
  this.inv_buttons[INV.STONE_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_WALL],
    3
  );
  this.inv_buttons[INV.STONE_WALL].id = INV.STONE_WALL;
  this.inv_buttons[INV.GOLD_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_WALL],
    3
  );
  this.inv_buttons[INV.GOLD_WALL].id = INV.GOLD_WALL;
  this.inv_buttons[INV.DIAMOND_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_WALL],
    3
  );
  this.inv_buttons[INV.DIAMOND_WALL].id = INV.DIAMOND_WALL;
  this.inv_buttons[INV.WOOD_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DOOR_WOOD_CLOSE],
    3
  );
  this.inv_buttons[INV.WOOD_DOOR].id = INV.WOOD_DOOR;
  this.inv_buttons[INV.CHEST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CHEST],
    3
  );
  this.inv_buttons[INV.CHEST].id = INV.CHEST;
  this.inv_buttons[INV.STONE_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_SPIKE],
    3
  );
  this.inv_buttons[INV.STONE_SPIKE].id = INV.STONE_SPIKE;
  this.inv_buttons[INV.GOLD_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_SPIKE],
    3
  );
  this.inv_buttons[INV.GOLD_SPIKE].id = INV.GOLD_SPIKE;
  this.inv_buttons[INV.DIAMOND_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_SPIKE],
    3
  );
  this.inv_buttons[INV.DIAMOND_SPIKE].id = INV.DIAMOND_SPIKE;
  this.inv_buttons[INV.BAG] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BAG],
    3
  );
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EARMUFFS],
    3
  );
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.STONE_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DOOR_STONE_CLOSE],
    3
  );
  this.inv_buttons[INV.STONE_DOOR].id = INV.STONE_DOOR;
  this.inv_buttons[INV.GOLD_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DOOR_GOLD_CLOSE],
    3
  );
  this.inv_buttons[INV.GOLD_DOOR].id = INV.GOLD_DOOR;
  this.inv_buttons[INV.DIAMOND_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DOOR_DIAMOND_CLOSE],
    3
  );
  this.inv_buttons[INV.DIAMOND_DOOR].id = INV.DIAMOND_DOOR;
  this.inv_buttons[INV.FUR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR],
    3
  );
  this.inv_buttons[INV.FUR].id = INV.FUR;
  this.inv_buttons[INV.FUR].info.img[2] = this.inv_buttons[INV.FUR].info.img[0];
  this.inv_buttons[INV.FUR_BOAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR_BOAR],
    3
  );
  this.inv_buttons[INV.FUR_BOAR].id = INV.FUR_BOAR;
  this.inv_buttons[INV.FUR_BOAR].info.img[2] =
    this.inv_buttons[INV.FUR_BOAR].info.img[0];
  this.inv_buttons[INV.FUR_WOLF] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR_WOLF],
    3
  );
  this.inv_buttons[INV.FUR_WOLF].id = INV.FUR_WOLF;
  this.inv_buttons[INV.FUR_WOLF].info.img[2] =
    this.inv_buttons[INV.FUR_WOLF].info.img[0];
  this.inv_buttons[INV.PENGUIN_FEATHER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PENGUIN_FEATHER],
    3
  );
  this.inv_buttons[INV.PENGUIN_FEATHER].id = INV.PENGUIN_FEATHER;
  this.inv_buttons[INV.HAWK_FEATHER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAWK_FEATHER],
    3
  );
  this.inv_buttons[INV.HAWK_FEATHER].id = INV.HAWK_FEATHER;
  this.inv_buttons[INV.VULTURE_FEATHER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_VULTURE_FEATHER],
    3
  );
  this.inv_buttons[INV.VULTURE_FEATHER].id = INV.VULTURE_FEATHER;
  this.inv_buttons[INV.EMERALD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EMERALD],
    3
  );
  this.inv_buttons[INV.EMERALD].id = INV.EMERALD;
  this.inv_buttons[INV.EARMUFFS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EARMUFFS],
    3
  );
  this.inv_buttons[INV.EARMUFFS].id = INV.EARMUFFS;
  this.inv_buttons[INV.COAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_COAT],
    3
  );
  this.inv_buttons[INV.COAT].id = INV.COAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_SPEAR],
    3
  );
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SPEAR],
    3
  );
  this.inv_buttons[INV.SPEAR].id = INV.SPEAR;
  this.inv_buttons[INV.GOLD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_SPEAR],
    3
  );
  this.inv_buttons[INV.GOLD_SPEAR].id = INV.GOLD_SPEAR;
  this.inv_buttons[INV.DIAMOND_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_SPEAR],
    3
  );
  this.inv_buttons[INV.DIAMOND_SPEAR].id = INV.DIAMOND_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_SPEAR],
    3
  );
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.FURNACE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FURNACE],
    3
  );
  this.inv_buttons[INV.FURNACE].id = INV.FURNACE;
  this.inv_buttons[INV.EXPLORER_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXPLORER_HAT],
    3
  );
  this.inv_buttons[INV.EXPLORER_HAT].id = INV.EXPLORER_HAT;
  this.inv_buttons[INV.PIRATE_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PIRATE_HAT],
    3
  );
  this.inv_buttons[INV.PIRATE_HAT].id = INV.PIRATE_HAT;
  this.inv_buttons[INV.FLOWER_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FLOWER_HAT],
    3
  );
  this.inv_buttons[INV.FLOWER_HAT].id = INV.FLOWER_HAT;
  this.inv_buttons[INV.FUR_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR_HAT],
    3
  );
  this.inv_buttons[INV.FUR_HAT].id = INV.FUR_HAT;
  this.inv_buttons[INV.TURBAN1] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_TURBAN1],
    3
  );
  this.inv_buttons[INV.TURBAN1].id = INV.TURBAN1;
  this.inv_buttons[INV.TURBAN2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_TURBAN2],
    3
  );
  this.inv_buttons[INV.TURBAN2].id = INV.TURBAN2;
  this.inv_buttons[INV.WOOD_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_BOW],
    3
  );
  this.inv_buttons[INV.WOOD_BOW].id = INV.WOOD_BOW;
  this.inv_buttons[INV.WOOD_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_ARROW],
    3
  );
  this.inv_buttons[INV.WOOD_ARROW].id = INV.WOOD_ARROW;
  this.inv_buttons[INV.WOOD_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_SHIELD],
    3
  );
  this.inv_buttons[INV.WOOD_SHIELD].id = INV.WOOD_SHIELD;
  this.inv_buttons[INV.STONE_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_BOW],
    3
  );
  this.inv_buttons[INV.STONE_BOW].id = INV.STONE_BOW;
  this.inv_buttons[INV.STONE_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_ARROW],
    3
  );
  this.inv_buttons[INV.STONE_ARROW].id = INV.STONE_ARROW;
  this.inv_buttons[INV.STONE_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_SHIELD],
    3
  );
  this.inv_buttons[INV.STONE_SHIELD].id = INV.STONE_SHIELD;
  this.inv_buttons[INV.GOLD_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_BOW],
    3
  );
  this.inv_buttons[INV.GOLD_BOW].id = INV.GOLD_BOW;
  this.inv_buttons[INV.GOLD_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_ARROW],
    3
  );
  this.inv_buttons[INV.GOLD_ARROW].id = INV.GOLD_ARROW;
  this.inv_buttons[INV.GOLD_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_SHIELD],
    3
  );
  this.inv_buttons[INV.GOLD_SHIELD].id = INV.GOLD_SHIELD;
  this.inv_buttons[INV.DIAMOND_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_BOW],
    3
  );
  this.inv_buttons[INV.DIAMOND_BOW].id = INV.DIAMOND_BOW;
  this.inv_buttons[INV.DIAMOND_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_ARROW],
    3
  );
  this.inv_buttons[INV.DIAMOND_ARROW].id = INV.DIAMOND_ARROW;
  this.inv_buttons[INV.DIAMOND_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_SHIELD],
    3
  );
  this.inv_buttons[INV.DIAMOND_SHIELD].id = INV.DIAMOND_SHIELD;
  this.inv_buttons[INV.AMETHYST_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_BOW],
    3
  );
  this.inv_buttons[INV.AMETHYST_BOW].id = INV.AMETHYST_BOW;
  this.inv_buttons[INV.AMETHYST_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_ARROW],
    3
  );
  this.inv_buttons[INV.AMETHYST_ARROW].id = INV.AMETHYST_ARROW;
  this.inv_buttons[INV.AMETHYST_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_SHIELD],
    3
  );
  this.inv_buttons[INV.AMETHYST_SHIELD].id = INV.AMETHYST_SHIELD;
  this.inv_buttons[INV.REIDITE_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_BOW],
    3
  );
  this.inv_buttons[INV.REIDITE_BOW].id = INV.REIDITE_BOW;
  this.inv_buttons[INV.REIDITE_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_ARROW],
    3
  );
  this.inv_buttons[INV.REIDITE_ARROW].id = INV.REIDITE_ARROW;
  this.inv_buttons[INV.REIDITE_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_SHIELD],
    3
  );
  this.inv_buttons[INV.REIDITE_SHIELD].id = INV.REIDITE_SHIELD;
  this.inv_buttons[INV.DRAGON_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_BOW],
    3
  );
  this.inv_buttons[INV.DRAGON_BOW].id = INV.DRAGON_BOW;
  this.inv_buttons[INV.DRAGON_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_ARROW],
    3
  );
  this.inv_buttons[INV.DRAGON_ARROW].id = INV.DRAGON_ARROW;
  this.inv_buttons[INV.WOOD_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_HELMET],
    3
  );
  this.inv_buttons[INV.WOOD_HELMET].id = INV.WOOD_HELMET;
  this.inv_buttons[INV.STONE_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_HELMET],
    3
  );
  this.inv_buttons[INV.STONE_HELMET].id = INV.STONE_HELMET;
  this.inv_buttons[INV.GOLD_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_HELMET],
    3
  );
  this.inv_buttons[INV.GOLD_HELMET].id = INV.GOLD_HELMET;
  this.inv_buttons[INV.DIAMOND_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_HELMET],
    3
  );
  this.inv_buttons[INV.DIAMOND_HELMET].id = INV.DIAMOND_HELMET;
  this.inv_buttons[INV.BOOK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BOOK],
    3
  );
  this.inv_buttons[INV.BOOK].id = INV.BOOK;
  this.inv_buttons[INV.PAPER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PAPER],
    3
  );
  this.inv_buttons[INV.PAPER].id = INV.PAPER;
  this.inv_buttons[INV.PAPER].info.img[2] =
    this.inv_buttons[INV.PAPER].info.img[0];
  this.inv_buttons[INV.BAG] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BAG],
    3
  );
  this.inv_buttons[INV.BAG].id = INV.BAG;
  this.inv_buttons[INV.AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST],
    3
  );
  this.inv_buttons[INV.AMETHYST].id = INV.AMETHYST;
  this.inv_buttons[INV.AMETHYST].info.img[2] =
    this.inv_buttons[INV.AMETHYST].info.img[0];
  this.inv_buttons[INV.SWORD_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SWORD_AMETHYST],
    3
  );
  this.inv_buttons[INV.SWORD_AMETHYST].id = INV.SWORD_AMETHYST;
  this.inv_buttons[INV.PIRATE_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PIRATE_SWORD],
    3
  );
  this.inv_buttons[INV.PIRATE_SWORD].id = INV.PIRATE_SWORD;
  this.inv_buttons[INV.PICK_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK_AMETHYST],
    3
  );
  this.inv_buttons[INV.PICK_AMETHYST].id = INV.PICK_AMETHYST;
  this.inv_buttons[INV.PICK_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PICK_REIDITE],
    3
  );
  this.inv_buttons[INV.PICK_REIDITE].id = INV.PICK_REIDITE;
  this.inv_buttons[INV.AMETHYST_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_SPEAR],
    3
  );
  this.inv_buttons[INV.AMETHYST_SPEAR].id = INV.AMETHYST_SPEAR;
  this.inv_buttons[INV.HAMMER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAMMER],
    3
  );
  this.inv_buttons[INV.HAMMER].id = INV.HAMMER;
  this.inv_buttons[INV.HAMMER_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAMMER_GOLD],
    3
  );
  this.inv_buttons[INV.HAMMER_GOLD].id = INV.HAMMER_GOLD;
  this.inv_buttons[INV.HAMMER_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAMMER_DIAMOND],
    3
  );
  this.inv_buttons[INV.HAMMER_DIAMOND].id = INV.HAMMER_DIAMOND;
  this.inv_buttons[INV.HAMMER_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAMMER_AMETHYST],
    3
  );
  this.inv_buttons[INV.HAMMER_AMETHYST].id = INV.HAMMER_AMETHYST;
  this.inv_buttons[INV.HAMMER_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAMMER_REIDITE],
    3
  );
  this.inv_buttons[INV.HAMMER_REIDITE].id = INV.HAMMER_REIDITE;
  this.inv_buttons[INV.AMETHYST_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_WALL],
    3
  );
  this.inv_buttons[INV.AMETHYST_WALL].id = INV.AMETHYST_WALL;
  this.inv_buttons[INV.AMETHYST_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_SPIKE],
    3
  );
  this.inv_buttons[INV.AMETHYST_SPIKE].id = INV.AMETHYST_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DOOR_AMETHYST_CLOSE],
    3
  );
  this.inv_buttons[INV.AMETHYST_DOOR].id = INV.AMETHYST_DOOR;
  this.inv_buttons[INV.CAP_SCARF] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CAP_SCARF],
    3
  );
  this.inv_buttons[INV.CAP_SCARF].id = INV.CAP_SCARF;
  this.inv_buttons[INV.FUR_WINTER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR_WINTER],
    3
  );
  this.inv_buttons[INV.FUR_WINTER].id = INV.FUR_WINTER;
  this.inv_buttons[INV.FUR_WINTER].info.img[2] =
    this.inv_buttons[INV.FUR_WINTER].info.img[0];
  this.inv_buttons[INV.FUR_MAMMOTH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FUR_MAMMOTH],
    3
  );
  this.inv_buttons[INV.FUR_MAMMOTH].id = INV.FUR_MAMMOTH;
  this.inv_buttons[INV.FUR_MAMMOTH].info.img[2] =
    this.inv_buttons[INV.FUR_MAMMOTH].info.img[0];
  this.inv_buttons[INV.BLUE_CORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BLUE_CORD],
    3
  );
  this.inv_buttons[INV.BLUE_CORD].id = INV.BLUE_CORD;
  this.inv_buttons[INV.BLUE_CORD].info.img[2] =
    this.inv_buttons[INV.BLUE_CORD].info.img[0];
  this.inv_buttons[INV.LOCK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LOCK],
    3
  );
  this.inv_buttons[INV.LOCK].id = INV.LOCK;
  this.inv_buttons[INV.LOCK].info.img[2] =
    this.inv_buttons[INV.LOCK].info.img[0];
  this.inv_buttons[INV.DRAGON_HEART] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_HEART],
    3
  );
  this.inv_buttons[INV.DRAGON_HEART].id = INV.DRAGON_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_HEART],
    3
  );
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.RESURRECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_RESURRECTION],
    3
  );
  this.inv_buttons[INV.RESURRECTION].id = INV.RESURRECTION;
  this.inv_buttons[INV.LOCKPICK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LOCKPICK],
    3
  );
  this.inv_buttons[INV.LOCKPICK].id = INV.LOCKPICK;
  this.inv_buttons[INV.TOTEM] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_TOTEM],
    3
  );
  this.inv_buttons[INV.TOTEM].id = INV.TOTEM;
  this.inv_buttons[INV.AMETHYST_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_HELMET],
    3
  );
  this.inv_buttons[INV.AMETHYST_HELMET].id = INV.AMETHYST_HELMET;
  this.inv_buttons[INV.SUPER_HAMMER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SUPER_HAMMER],
    3
  );
  this.inv_buttons[INV.SUPER_HAMMER].id = INV.SUPER_HAMMER;
  this.inv_buttons[INV.BRIDGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BRIDGE],
    3
  );
  this.inv_buttons[INV.BRIDGE].id = INV.BRIDGE;
  this.inv_buttons[INV.WOOD_TOWER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_TOWER],
    3
  );
  this.inv_buttons[INV.WOOD_TOWER].id = INV.WOOD_TOWER;
  this.inv_buttons[INV.BOAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BOAT],
    3
  );
  this.inv_buttons[INV.BOAT].id = INV.BOAT;
  this.inv_buttons[INV.SLED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SLED],
    3
  );
  this.inv_buttons[INV.SLED].id = INV.SLED;
  this.inv_buttons[INV.PLANE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PLANE],
    3
  );
  this.inv_buttons[INV.PLANE].id = INV.PLANE;
  this.inv_buttons[INV.SADDLE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SADDLE],
    3
  );
  this.inv_buttons[INV.SADDLE].id = INV.SADDLE;
  this.inv_buttons[INV.MOUNT_BOAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_MOUNT_BOAR],
    3
  );
  this.inv_buttons[INV.MOUNT_BOAR].id = INV.MOUNT_BOAR;
  this.inv_buttons[INV.CRAB_BOSS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CRAB_BOSS],
    3
  );
  this.inv_buttons[INV.CRAB_BOSS].id = INV.CRAB_BOSS;
  this.inv_buttons[INV.BABY_DRAGON] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BABY_DRAGON],
    3
  );
  this.inv_buttons[INV.BABY_DRAGON].id = INV.BABY_DRAGON;
  this.inv_buttons[INV.BABY_MAMMOTH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BABY_MAMMOTH],
    3
  );
  this.inv_buttons[INV.BABY_MAMMOTH].id = INV.BABY_MAMMOTH;
  this.inv_buttons[INV.BABY_LAVA] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BABY_LAVA],
    3
  );
  this.inv_buttons[INV.BABY_LAVA].id = INV.BABY_LAVA;
  this.inv_buttons[INV.HAWK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HAWK],
    3
  );
  this.inv_buttons[INV.HAWK].id = INV.HAWK;
  this.inv_buttons[INV.SAND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SAND],
    3
  );
  this.inv_buttons[INV.SAND].id = INV.SAND;
  this.inv_buttons[INV.SAND].info.img[2] =
    this.inv_buttons[INV.SAND].info.img[0];
  this.inv_buttons[INV.BOTTLE_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BOTTLE_FULL],
    3
  );
  this.inv_buttons[INV.BOTTLE_FULL].id = INV.BOTTLE_FULL;
  this.inv_buttons[INV.BOTTLE_EMPTY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BOTTLE_EMPTY],
    3
  );
  this.inv_buttons[INV.BOTTLE_EMPTY].id = INV.BOTTLE_EMPTY;
  this.inv_buttons[INV.SHOVEL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SHOVEL],
    3
  );
  this.inv_buttons[INV.SHOVEL].id = INV.SHOVEL;
  this.inv_buttons[INV.SHOVEL_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SHOVEL_GOLD],
    3
  );
  this.inv_buttons[INV.SHOVEL_GOLD].id = INV.SHOVEL_GOLD;
  this.inv_buttons[INV.SHOVEL_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SHOVEL_DIAMOND],
    3
  );
  this.inv_buttons[INV.SHOVEL_DIAMOND].id = INV.SHOVEL_DIAMOND;
  this.inv_buttons[INV.SHOVEL_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SHOVEL_AMETHYST],
    3
  );
  this.inv_buttons[INV.SHOVEL_AMETHYST].id = INV.SHOVEL_AMETHYST;
  this.inv_buttons[INV.SPANNER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SPANNER],
    3
  );
  this.inv_buttons[INV.SPANNER].id = INV.SPANNER;
  this.inv_buttons[INV.KRAKEN_SKIN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_KRAKEN_SKIN],
    3
  );
  this.inv_buttons[INV.KRAKEN_SKIN].id = INV.KRAKEN_SKIN;
  this.inv_buttons[INV.KRAKEN_SKIN].info.img[2] =
    this.inv_buttons[INV.KRAKEN_SKIN].info.img[0];
  this.inv_buttons[INV.WATERING_CAN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WATERING_CAN],
    3
  );
  this.inv_buttons[INV.WATERING_CAN].id = INV.WATERING_CAN;
  this.inv_buttons[INV.FLOUR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FLOUR],
    3
  );
  this.inv_buttons[INV.FLOUR].id = INV.FLOUR;
  this.inv_buttons[INV.FLOUR].info.img[2] =
    this.inv_buttons[INV.FLOUR].info.img[0];
  this.inv_buttons[INV.WHEAT_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WHEAT_SEED],
    3
  );
  this.inv_buttons[INV.WHEAT_SEED].id = INV.WHEAT_SEED;
  this.inv_buttons[INV.COOKIE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_COOKIE],
    3
  );
  this.inv_buttons[INV.COOKIE].id = INV.COOKIE;
  this.inv_buttons[INV.WILD_WHEAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WILD_WHEAT],
    3
  );
  this.inv_buttons[INV.WILD_WHEAT].id = INV.WILD_WHEAT;
  this.inv_buttons[INV.WILD_WHEAT].info.img[2] =
    this.inv_buttons[INV.WILD_WHEAT].info.img[0];
  this.inv_buttons[INV.WINDMILL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WINDMILL],
    3
  );
  this.inv_buttons[INV.WINDMILL].id = INV.WINDMILL;
  this.inv_buttons[INV.SUPER_DIVING_SUIT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SUPER_DIVING_SUIT],
    3
  );
  this.inv_buttons[INV.SUPER_DIVING_SUIT].id = INV.SUPER_DIVING_SUIT;
  this.inv_buttons[INV.DIVING_MASK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIVING_MASK],
    3
  );
  this.inv_buttons[INV.DIVING_MASK].id = INV.DIVING_MASK;
  this.inv_buttons[INV.WATERING_CAN_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WATERING_CAN_FULL],
    3
  );
  this.inv_buttons[INV.WATERING_CAN_FULL].id = INV.WATERING_CAN_FULL;
  this.inv_buttons[INV.CAKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CAKE],
    3
  );
  this.inv_buttons[INV.CAKE].id = INV.CAKE;
  this.inv_buttons[INV.BREAD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BREAD],
    3
  );
  this.inv_buttons[INV.BREAD].id = INV.BREAD;
  this.inv_buttons[INV.FOODFISH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FOODFISH],
    3
  );
  this.inv_buttons[INV.FOODFISH].id = INV.FOODFISH;
  this.inv_buttons[INV.FOODFISH_COOKED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FOODFISH_COOKED],
    3
  );
  this.inv_buttons[INV.FOODFISH_COOKED].id = INV.FOODFISH_COOKED;
  this.inv_buttons[INV.SCALES] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SCALES],
    3
  );
  this.inv_buttons[INV.SCALES].id = INV.SCALES;
  this.inv_buttons[INV.SCALES].info.img[2] =
    this.inv_buttons[INV.SCALES].info.img[0];
  this.inv_buttons[INV.GROUND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GROUND],
    3
  );
  this.inv_buttons[INV.GROUND].id = INV.GROUND;
  this.inv_buttons[INV.GROUND].info.img[2] =
    this.inv_buttons[INV.GROUND].info.img[0];
  this.inv_buttons[INV.PLOT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PLOT],
    3
  );
  this.inv_buttons[INV.PLOT].id = INV.PLOT;
  this.inv_buttons[INV.ICE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_ICE],
    3
  );
  this.inv_buttons[INV.ICE].id = INV.ICE;
  this.inv_buttons[INV.ICE].info.img[2] = this.inv_buttons[INV.ICE].info.img[0];
  this.inv_buttons[INV.BREAD_OVEN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BREAD_OVEN],
    3
  );
  this.inv_buttons[INV.BREAD_OVEN].id = INV.BREAD_OVEN;
  this.inv_buttons[INV.SANDWICH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SANDWICH],
    3
  );
  this.inv_buttons[INV.SANDWICH].id = INV.SANDWICH;
  this.inv_buttons[INV.DRAGON_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_HELMET],
    3
  );
  this.inv_buttons[INV.DRAGON_HELMET].id = INV.DRAGON_HELMET;
  this.inv_buttons[INV.DRAGON_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_SWORD],
    3
  );
  this.inv_buttons[INV.DRAGON_SWORD].id = INV.DRAGON_SWORD;
  this.inv_buttons[INV.DRAGON_ORB] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_ORB],
    3
  );
  this.inv_buttons[INV.DRAGON_ORB].id = INV.DRAGON_ORB;
  this.inv_buttons[INV.DRAGON_ORB].info.img[2] =
    this.inv_buttons[INV.DRAGON_ORB].info.img[0];
  this.inv_buttons[INV.DRAGON_CUBE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_CUBE],
    3
  );
  this.inv_buttons[INV.DRAGON_CUBE].id = INV.DRAGON_CUBE;
  this.inv_buttons[INV.DRAGON_CUBE].info.img[2] =
    this.inv_buttons[INV.DRAGON_CUBE].info.img[0];
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_SPEAR],
    3
  );
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_SWORD],
    3
  );
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_ORB],
    3
  );
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB].info.img[2] =
    this.inv_buttons[INV.LAVA_ORB].info.img[0];
  this.inv_buttons[INV.LAVA_CUBE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_CUBE],
    3
  );
  this.inv_buttons[INV.LAVA_CUBE].id = INV.LAVA_CUBE;
  this.inv_buttons[INV.LAVA_CUBE].info.img[2] =
    this.inv_buttons[INV.LAVA_CUBE].info.img[0];
  this.inv_buttons[INV.CROWN_GREEN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CROWN_GREEN],
    3
  );
  this.inv_buttons[INV.CROWN_GREEN].id = INV.CROWN_GREEN;
  this.inv_buttons[INV.GEMME_GREEN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GEMME_GREEN],
    3
  );
  this.inv_buttons[INV.GEMME_GREEN].id = INV.GEMME_GREEN;
  this.inv_buttons[INV.GEMME_GREEN].info.img[2] =
    this.inv_buttons[INV.GEMME_GREEN].info.img[0];
  this.inv_buttons[INV.GEMME_ORANGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GEMME_ORANGE],
    3
  );
  this.inv_buttons[INV.GEMME_ORANGE].id = INV.GEMME_ORANGE;
  this.inv_buttons[INV.GEMME_ORANGE].info.img[2] =
    this.inv_buttons[INV.GEMME_ORANGE].info.img[0];
  this.inv_buttons[INV.CROWN_ORANGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CROWN_ORANGE],
    3
  );
  this.inv_buttons[INV.CROWN_ORANGE].id = INV.CROWN_ORANGE;
  this.inv_buttons[INV.GEMME_BLUE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GEMME_BLUE],
    3
  );
  this.inv_buttons[INV.GEMME_BLUE].id = INV.GEMME_BLUE;
  this.inv_buttons[INV.GEMME_BLUE].info.img[2] =
    this.inv_buttons[INV.GEMME_BLUE].info.img[0];
  this.inv_buttons[INV.CROWN_BLUE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CROWN_BLUE],
    3
  );
  this.inv_buttons[INV.CROWN_BLUE].id = INV.CROWN_BLUE;
  this.inv_buttons[INV.HOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_HOOD],
    3
  );
  this.inv_buttons[INV.HOOD].id = INV.HOOD;
  this.inv_buttons[INV.PEASANT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PEASANT],
    3
  );
  this.inv_buttons[INV.PEASANT].id = INV.PEASANT;
  this.inv_buttons[INV.SPECIAL_FUR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SPECIAL_FUR],
    3
  );
  this.inv_buttons[INV.SPECIAL_FUR].id = INV.SPECIAL_FUR;
  this.inv_buttons[INV.SPECIAL_FUR_2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SPECIAL_FUR_2],
    3
  );
  this.inv_buttons[INV.SPECIAL_FUR_2].id = INV.SPECIAL_FUR_2;
  this.inv_buttons[INV.WINTER_PEASANT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WINTER_PEASANT],
    3
  );
  this.inv_buttons[INV.WINTER_PEASANT].id = INV.WINTER_PEASANT;
  this.inv_buttons[INV.WINTER_HOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WINTER_HOOD],
    3
  );
  this.inv_buttons[INV.WINTER_HOOD].id = INV.WINTER_HOOD;
  this.inv_buttons[INV.BUCKET_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BUCKET_FULL],
    3
  );
  this.inv_buttons[INV.BUCKET_FULL].id = INV.BUCKET_FULL;
  this.inv_buttons[INV.BUCKET_EMPTY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BUCKET_EMPTY],
    3
  );
  this.inv_buttons[INV.BUCKET_EMPTY].id = INV.BUCKET_EMPTY;
  this.inv_buttons[INV.WELL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WELL],
    3
  );
  this.inv_buttons[INV.WELL].id = INV.WELL;
  this.inv_buttons[INV.SIGN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SIGN],
    3
  );
  this.inv_buttons[INV.SIGN].id = INV.SIGN;
  this.inv_buttons[INV.PUMPKIN_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PUMPKIN_SEED],
    3
  );
  this.inv_buttons[INV.PUMPKIN_SEED].id = INV.PUMPKIN_SEED;
  this.inv_buttons[INV.PUMPKIN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PUMPKIN],
    3
  );
  this.inv_buttons[INV.PUMPKIN].id = INV.PUMPKIN;
  this.inv_buttons[INV.GARLIC_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GARLIC_SEED],
    3
  );
  this.inv_buttons[INV.GARLIC_SEED].id = INV.GARLIC_SEED;
  this.inv_buttons[INV.GARLIC] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GARLIC],
    3
  );
  this.inv_buttons[INV.GARLIC].id = INV.GARLIC;
  this.inv_buttons[INV.ROOF] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_ROOF],
    3
  );
  this.inv_buttons[INV.ROOF].id = INV.ROOF;
  this.inv_buttons[INV.THORNBUSH_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_THORNBUSH_SEED],
    3
  );
  this.inv_buttons[INV.THORNBUSH_SEED].id = INV.THORNBUSH_SEED;
  this.inv_buttons[INV.THORNBUSH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_THORNBUSH],
    3
  );
  this.inv_buttons[INV.THORNBUSH].id = INV.THORNBUSH;
  this.inv_buttons[INV.CARROT_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CARROT_SEED],
    3
  );
  this.inv_buttons[INV.CARROT_SEED].id = INV.CARROT_SEED;
  this.inv_buttons[INV.CARROT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CARROT],
    3
  );
  this.inv_buttons[INV.CARROT].id = INV.CARROT;
  this.inv_buttons[INV.TOMATO_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_TOMATO_SEED],
    3
  );
  this.inv_buttons[INV.TOMATO_SEED].id = INV.TOMATO_SEED;
  this.inv_buttons[INV.TOMATO] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_TOMATO],
    3
  );
  this.inv_buttons[INV.TOMATO].id = INV.TOMATO;
  this.inv_buttons[INV.WATERMELON_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WATERMELON_SEED],
    3
  );
  this.inv_buttons[INV.WATERMELON_SEED].id = INV.WATERMELON_SEED;
  this.inv_buttons[INV.WATERMELON] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WATERMELON],
    3
  );
  this.inv_buttons[INV.WATERMELON].id = INV.WATERMELON;
  this.inv_buttons[INV.ALOE_VERA_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_ALOE_VERA_SEED],
    3
  );
  this.inv_buttons[INV.ALOE_VERA_SEED].id = INV.ALOE_VERA_SEED;
  this.inv_buttons[INV.ALOE_VERA] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_ALOE_VERA],
    3
  );
  this.inv_buttons[INV.ALOE_VERA].id = INV.ALOE_VERA;
  this.inv_buttons[INV.CHRISTMAS_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CHRISTMAS_HAT],
    3
  );
  this.inv_buttons[INV.CHRISTMAS_HAT].id = INV.CHRISTMAS_HAT;
  this.inv_buttons[INV.ELF_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_ELF_HAT],
    3
  );
  this.inv_buttons[INV.ELF_HAT].id = INV.ELF_HAT;
  this.inv_buttons[INV.WOOD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_SPEAR],
    3
  );
  this.inv_buttons[INV.WOOD_SPEAR].id = INV.WOOD_SPEAR;
  this.inv_buttons[INV.DRAGON_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_SPEAR],
    3
  );
  this.inv_buttons[INV.DRAGON_SPEAR].id = INV.DRAGON_SPEAR;
  this.inv_buttons[INV.CRAB_STICK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CRAB_STICK],
    3
  );
  this.inv_buttons[INV.CRAB_STICK].id = INV.CRAB_STICK;
  this.inv_buttons[INV.CRAB_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CRAB_SPEAR],
    3
  );
  this.inv_buttons[INV.CRAB_SPEAR].id = INV.CRAB_SPEAR;
  this.inv_buttons[INV.CRAB_LOOT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CRAB_LOOT],
    3
  );
  this.inv_buttons[INV.CRAB_LOOT].id = INV.CRAB_LOOT;
  this.inv_buttons[INV.BED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_BED],
    3
  );
  this.inv_buttons[INV.BED].id = INV.BED;
  this.inv_buttons[INV.CROWN_CRAB] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CROWN_CRAB],
    3
  );
  this.inv_buttons[INV.CROWN_CRAB].id = INV.CROWN_CRAB;
  this.inv_buttons[INV.GARLAND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GARLAND],
    3
  );
  this.inv_buttons[INV.GARLAND].id = INV.GARLAND;
  this.inv_buttons[INV.CANDY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_CANDY],
    3
  );
  this.inv_buttons[INV.CANDY].id = INV.CANDY;
  this.inv_buttons[INV.SUGAR_CAN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SUGAR_CAN],
    3
  );
  this.inv_buttons[INV.SUGAR_CAN].id = INV.SUGAR_CAN;
  this.craft_buttons = [];
  this.craft_buttons[CRAFT.SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SWORD],
    3
  );
  this.craft_buttons[CRAFT.SWORD].id = CRAFT.SWORD;
  this.craft_buttons[CRAFT.PICK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK],
    3
  );
  this.craft_buttons[CRAFT.PICK].id = CRAFT.PICK;
  this.craft_buttons[CRAFT.FIRE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FIRE],
    3
  );
  this.craft_buttons[CRAFT.FIRE].id = CRAFT.FIRE;
  this.craft_buttons[CRAFT.WORKBENCH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WORK],
    3
  );
  this.craft_buttons[CRAFT.WORKBENCH].id = CRAFT.WORKBENCH;
  this.craft_buttons[CRAFT.WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WALL],
    3
  );
  this.craft_buttons[CRAFT.WALL].id = CRAFT.WALL;
  this.craft_buttons[CRAFT.SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.SPIKE].id = CRAFT.SPIKE;
  this.craft_buttons[CRAFT.SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SEED],
    3
  );
  this.craft_buttons[CRAFT.SEED].id = CRAFT.SEED;
  this.craft_buttons[CRAFT.PICK_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK_GOLD],
    3
  );
  this.craft_buttons[CRAFT.PICK_GOLD].id = CRAFT.PICK_GOLD;
  this.craft_buttons[CRAFT.PICK_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK_DIAMOND],
    3
  );
  this.craft_buttons[CRAFT.PICK_DIAMOND].id = CRAFT.PICK_DIAMOND;
  this.craft_buttons[CRAFT.SWORD_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SWORD_GOLD],
    3
  );
  this.craft_buttons[CRAFT.SWORD_GOLD].id = CRAFT.SWORD_GOLD;
  this.craft_buttons[CRAFT.SWORD_WOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SWORD_WOOD],
    3
  );
  this.craft_buttons[CRAFT.SWORD_WOOD].id = CRAFT.SWORD_WOOD;
  this.craft_buttons[CRAFT.SWORD_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SWORD_DIAMOND],
    3
  );
  this.craft_buttons[CRAFT.SWORD_DIAMOND].id = CRAFT.SWORD_DIAMOND;
  this.craft_buttons[CRAFT.PICK_WOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK_WOOD],
    3
  );
  this.craft_buttons[CRAFT.PICK_WOOD].id = CRAFT.PICK_WOOD;
  this.craft_buttons[CRAFT.COOKED_MEAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_COOKED_MEAT],
    3
  );
  this.craft_buttons[CRAFT.COOKED_MEAT].id = CRAFT.COOKED_MEAT;
  this.craft_buttons[CRAFT.BIG_FIRE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BIG_FIRE],
    3
  );
  this.craft_buttons[CRAFT.BIG_FIRE].id = CRAFT.BIG_FIRE;
  this.craft_buttons[CRAFT.BANDAGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BANDAGE],
    3
  );
  this.craft_buttons[CRAFT.BANDAGE].id = CRAFT.BANDAGE;
  this.craft_buttons[CRAFT.STONE_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_WALL],
    3
  );
  this.craft_buttons[CRAFT.STONE_WALL].id = CRAFT.STONE_WALL;
  this.craft_buttons[CRAFT.GOLD_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_WALL],
    3
  );
  this.craft_buttons[CRAFT.GOLD_WALL].id = CRAFT.GOLD_WALL;
  this.craft_buttons[CRAFT.DIAMOND_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_WALL],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_WALL].id = CRAFT.DIAMOND_WALL;
  this.craft_buttons[CRAFT.WOOD_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DOOR_WOOD_CLOSE],
    3
  );
  this.craft_buttons[CRAFT.WOOD_DOOR].id = CRAFT.WOOD_DOOR;
  this.craft_buttons[CRAFT.CHEST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CHEST],
    3
  );
  this.craft_buttons[CRAFT.CHEST].id = CRAFT.CHEST;
  this.craft_buttons[CRAFT.STONE_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.STONE_SPIKE].id = CRAFT.STONE_SPIKE;
  this.craft_buttons[CRAFT.GOLD_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.GOLD_SPIKE].id = CRAFT.GOLD_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_SPIKE].id = CRAFT.DIAMOND_SPIKE;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BAG],
    3
  );
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EARMUFFS],
    3
  );
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.STONE_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DOOR_STONE_CLOSE],
    3
  );
  this.craft_buttons[CRAFT.STONE_DOOR].id = CRAFT.STONE_DOOR;
  this.craft_buttons[CRAFT.GOLD_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DOOR_GOLD_CLOSE],
    3
  );
  this.craft_buttons[CRAFT.GOLD_DOOR].id = CRAFT.GOLD_DOOR;
  this.craft_buttons[CRAFT.DIAMOND_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DOOR_DIAMOND_CLOSE],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_DOOR].id = CRAFT.DIAMOND_DOOR;
  this.craft_buttons[CRAFT.EARMUFFS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EARMUFFS],
    3
  );
  this.craft_buttons[CRAFT.EARMUFFS].id = CRAFT.EARMUFFS;
  this.craft_buttons[CRAFT.COAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_COAT],
    3
  );
  this.craft_buttons[CRAFT.COAT].id = CRAFT.COAT;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.SPEAR].id = CRAFT.SPEAR;
  this.craft_buttons[CRAFT.GOLD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.GOLD_SPEAR].id = CRAFT.GOLD_SPEAR;
  this.craft_buttons[CRAFT.DIAMOND_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_SPEAR].id = CRAFT.DIAMOND_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DRAGON_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.FURNACE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FURNACE],
    3
  );
  this.craft_buttons[CRAFT.FURNACE].id = CRAFT.FURNACE;
  this.craft_buttons[CRAFT.EXPLORER_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXPLORER_HAT],
    3
  );
  this.craft_buttons[CRAFT.EXPLORER_HAT].id = CRAFT.EXPLORER_HAT;
  this.craft_buttons[CRAFT.PIRATE_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PIRATE_HAT],
    3
  );
  this.craft_buttons[CRAFT.PIRATE_HAT].id = CRAFT.PIRATE_HAT;
  this.craft_buttons[CRAFT.FLOWER_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FLOWER_HAT],
    3
  );
  this.craft_buttons[CRAFT.FLOWER_HAT].id = CRAFT.FLOWER_HAT;
  this.craft_buttons[CRAFT.FUR_HAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FUR_HAT],
    3
  );
  this.craft_buttons[CRAFT.FUR_HAT].id = CRAFT.FUR_HAT;
  this.craft_buttons[CRAFT.TURBAN1] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_TURBAN1],
    3
  );
  this.craft_buttons[CRAFT.TURBAN1].id = CRAFT.TURBAN1;
  this.craft_buttons[CRAFT.TURBAN2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_TURBAN2],
    3
  );
  this.craft_buttons[CRAFT.TURBAN2].id = CRAFT.TURBAN2;
  this.craft_buttons[CRAFT.WOOD_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_BOW],
    3
  );
  this.craft_buttons[CRAFT.WOOD_BOW].id = CRAFT.WOOD_BOW;
  this.craft_buttons[CRAFT.WOOD_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_ARROW],
    3
  );
  this.craft_buttons[CRAFT.WOOD_ARROW].id = CRAFT.WOOD_ARROW;
  this.craft_buttons[CRAFT.WOOD_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.WOOD_SHIELD].id = CRAFT.WOOD_SHIELD;
  this.craft_buttons[CRAFT.STONE_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_BOW],
    3
  );
  this.craft_buttons[CRAFT.STONE_BOW].id = CRAFT.STONE_BOW;
  this.craft_buttons[CRAFT.STONE_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_ARROW],
    3
  );
  this.craft_buttons[CRAFT.STONE_ARROW].id = CRAFT.STONE_ARROW;
  this.craft_buttons[CRAFT.STONE_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.STONE_SHIELD].id = CRAFT.STONE_SHIELD;
  this.craft_buttons[CRAFT.GOLD_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_BOW],
    3
  );
  this.craft_buttons[CRAFT.GOLD_BOW].id = CRAFT.GOLD_BOW;
  this.craft_buttons[CRAFT.GOLD_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_ARROW],
    3
  );
  this.craft_buttons[CRAFT.GOLD_ARROW].id = CRAFT.GOLD_ARROW;
  this.craft_buttons[CRAFT.GOLD_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.GOLD_SHIELD].id = CRAFT.GOLD_SHIELD;
  this.craft_buttons[CRAFT.DIAMOND_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_BOW],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_BOW].id = CRAFT.DIAMOND_BOW;
  this.craft_buttons[CRAFT.DIAMOND_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_ARROW],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_ARROW].id = CRAFT.DIAMOND_ARROW;
  this.craft_buttons[CRAFT.DIAMOND_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_SHIELD].id = CRAFT.DIAMOND_SHIELD;
  this.craft_buttons[CRAFT.AMETHYST_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_BOW],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_BOW].id = CRAFT.AMETHYST_BOW;
  this.craft_buttons[CRAFT.AMETHYST_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_ARROW],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_ARROW].id = CRAFT.AMETHYST_ARROW;
  this.craft_buttons[CRAFT.AMETHYST_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_SHIELD].id = CRAFT.AMETHYST_SHIELD;
  this.craft_buttons[CRAFT.REIDITE_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_BOW],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_BOW].id = CRAFT.REIDITE_BOW;
  this.craft_buttons[CRAFT.REIDITE_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_ARROW],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_ARROW].id = CRAFT.REIDITE_ARROW;
  this.craft_buttons[CRAFT.REIDITE_SHIELD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_SHIELD],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_SHIELD].id = CRAFT.REIDITE_SHIELD;
  this.craft_buttons[CRAFT.DRAGON_BOW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DRAGON_BOW],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_BOW].id = CRAFT.DRAGON_BOW;
  this.craft_buttons[CRAFT.DRAGON_ARROW] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DRAGON_ARROW],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_ARROW].id = CRAFT.DRAGON_ARROW;
  this.craft_buttons[CRAFT.WOOD_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_HELMET],
    3
  );
  this.craft_buttons[CRAFT.WOOD_HELMET].id = CRAFT.WOOD_HELMET;
  this.craft_buttons[CRAFT.STONE_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_HELMET],
    3
  );
  this.craft_buttons[CRAFT.STONE_HELMET].id = CRAFT.STONE_HELMET;
  this.craft_buttons[CRAFT.GOLD_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_HELMET],
    3
  );
  this.craft_buttons[CRAFT.GOLD_HELMET].id = CRAFT.GOLD_HELMET;
  this.craft_buttons[CRAFT.DIAMOND_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_HELMET],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_HELMET].id = CRAFT.DIAMOND_HELMET;
  this.craft_buttons[CRAFT.BOOK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOOK],
    3
  );
  this.craft_buttons[CRAFT.BOOK].id = CRAFT.BOOK;
  this.craft_buttons[CRAFT.PAPER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PAPER],
    3
  );
  this.craft_buttons[CRAFT.PAPER].id = CRAFT.PAPER;
  this.craft_buttons[CRAFT.BAG] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BAG],
    3
  );
  this.craft_buttons[CRAFT.BAG].id = CRAFT.BAG;
  this.craft_buttons[CRAFT.SWORD_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SWORD_AMETHYST],
    3
  );
  this.craft_buttons[CRAFT.SWORD_AMETHYST].id = CRAFT.SWORD_AMETHYST;
  this.craft_buttons[CRAFT.PIRATE_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PIRATE_SWORD],
    3
  );
  this.craft_buttons[CRAFT.PIRATE_SWORD].id = CRAFT.PIRATE_SWORD;
  this.craft_buttons[CRAFT.PICK_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK_AMETHYST],
    3
  );
  this.craft_buttons[CRAFT.PICK_AMETHYST].id = CRAFT.PICK_AMETHYST;
  this.craft_buttons[CRAFT.PICK_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PICK_REIDITE],
    3
  );
  this.craft_buttons[CRAFT.PICK_REIDITE].id = CRAFT.PICK_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_SPEAR].id = CRAFT.AMETHYST_SPEAR;
  this.craft_buttons[CRAFT.HAMMER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HAMMER],
    3
  );
  this.craft_buttons[CRAFT.HAMMER].id = CRAFT.HAMMER;
  this.craft_buttons[CRAFT.HAMMER_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HAMMER_GOLD],
    3
  );
  this.craft_buttons[CRAFT.HAMMER_GOLD].id = CRAFT.HAMMER_GOLD;
  this.craft_buttons[CRAFT.HAMMER_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HAMMER_DIAMOND],
    3
  );
  this.craft_buttons[CRAFT.HAMMER_DIAMOND].id = CRAFT.HAMMER_DIAMOND;
  this.craft_buttons[CRAFT.HAMMER_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HAMMER_AMETHYST],
    3
  );
  this.craft_buttons[CRAFT.HAMMER_AMETHYST].id = CRAFT.HAMMER_AMETHYST;
  this.craft_buttons[CRAFT.HAMMER_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HAMMER_REIDITE],
    3
  );
  this.craft_buttons[CRAFT.HAMMER_REIDITE].id = CRAFT.HAMMER_REIDITE;
  this.craft_buttons[CRAFT.AMETHYST_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_WALL],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_WALL].id = CRAFT.AMETHYST_WALL;
  this.craft_buttons[CRAFT.AMETHYST_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_SPIKE].id = CRAFT.AMETHYST_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DOOR_AMETHYST_CLOSE],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_DOOR].id = CRAFT.AMETHYST_DOOR;
  this.craft_buttons[CRAFT.CAP_SCARF] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CAP_SCARF],
    3
  );
  this.craft_buttons[CRAFT.CAP_SCARF].id = CRAFT.CAP_SCARF;
  this.craft_buttons[CRAFT.BLUE_CORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BLUE_CORD],
    3
  );
  this.craft_buttons[CRAFT.BLUE_CORD].id = CRAFT.BLUE_CORD;
  this.craft_buttons[CRAFT.LOCK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_LOCK],
    3
  );
  this.craft_buttons[CRAFT.LOCK].id = CRAFT.LOCK;
  this.craft_buttons[CRAFT.RESURRECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_RESURRECTION],
    3
  );
  this.craft_buttons[CRAFT.RESURRECTION].id = CRAFT.RESURRECTION;
  this.craft_buttons[CRAFT.LOCKPICK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_LOCKPICK],
    3
  );
  this.craft_buttons[CRAFT.LOCKPICK].id = CRAFT.LOCKPICK;
  this.craft_buttons[CRAFT.TOTEM] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_TOTEM],
    3
  );
  this.craft_buttons[CRAFT.TOTEM].id = CRAFT.TOTEM;
  this.craft_buttons[CRAFT.AMETHYST_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_HELMET],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_HELMET].id = CRAFT.AMETHYST_HELMET;
  this.craft_buttons[CRAFT.SUPER_HAMMER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SUPER_HAMMER],
    3
  );
  this.craft_buttons[CRAFT.SUPER_HAMMER].id = CRAFT.SUPER_HAMMER;
  this.craft_buttons[CRAFT.BRIDGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BRIDGE],
    3
  );
  this.craft_buttons[CRAFT.BRIDGE].id = CRAFT.BRIDGE;
  this.craft_buttons[CRAFT.WOOD_TOWER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_TOWER],
    3
  );
  this.craft_buttons[CRAFT.WOOD_TOWER].id = CRAFT.WOOD_TOWER;
  this.craft_buttons[CRAFT.BOAT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOAT],
    3
  );
  this.craft_buttons[CRAFT.BOAT].id = CRAFT.BOAT;
  this.craft_buttons[CRAFT.SLED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SLED],
    3
  );
  this.craft_buttons[CRAFT.SLED].id = CRAFT.SLED;
  this.craft_buttons[CRAFT.PLANE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PLANE],
    3
  );
  this.craft_buttons[CRAFT.PLANE].id = CRAFT.PLANE;
  this.craft_buttons[CRAFT.SADDLE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SADDLE],
    3
  );
  this.craft_buttons[CRAFT.SADDLE].id = CRAFT.SADDLE;
  this.craft_buttons[CRAFT.MOUNT_BOAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_MOUNT_BOAR],
    3
  );
  this.craft_buttons[CRAFT.MOUNT_BOAR].id = CRAFT.MOUNT_BOAR;
  this.craft_buttons[CRAFT.BABY_DRAGON] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BABY_DRAGON],
    3
  );
  this.craft_buttons[CRAFT.BABY_DRAGON].id = CRAFT.BABY_DRAGON;
  this.craft_buttons[CRAFT.BABY_MAMMOTH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BABY_MAMMOTH],
    3
  );
  this.craft_buttons[CRAFT.BABY_MAMMOTH].id = CRAFT.BABY_MAMMOTH;
  this.craft_buttons[CRAFT.CRAB_BOSS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CRAB_BOSS],
    3
  );
  this.craft_buttons[CRAFT.CRAB_BOSS].id = CRAFT.CRAB_BOSS;
  this.craft_buttons[CRAFT.BOTTLE_EMPTY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOTTLE_EMPTY],
    3
  );
  this.craft_buttons[CRAFT.BOTTLE_EMPTY].id = CRAFT.BOTTLE_EMPTY;
  this.craft_buttons[CRAFT.BOTTLE_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOTTLE_FULL],
    3
  );
  this.craft_buttons[CRAFT.BOTTLE_FULL].id = CRAFT.BOTTLE_FULL;
  this.craft_buttons[CRAFT.BOTTLE_FULL_2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOTTLE_FULL],
    3
  );
  this.craft_buttons[CRAFT.BOTTLE_FULL_2].id = CRAFT.BOTTLE_FULL_2;
  this.craft_buttons[CRAFT.BOTTLE_FULL_3] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BOTTLE_FULL],
    3
  );
  this.craft_buttons[CRAFT.BOTTLE_FULL_3].id = CRAFT.BOTTLE_FULL_3;
  this.craft_buttons[CRAFT.SHOVEL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SHOVEL],
    3
  );
  this.craft_buttons[CRAFT.SHOVEL].id = CRAFT.SHOVEL;
  this.craft_buttons[CRAFT.SHOVEL_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SHOVEL_GOLD],
    3
  );
  this.craft_buttons[CRAFT.SHOVEL_GOLD].id = CRAFT.SHOVEL_GOLD;
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SHOVEL_DIAMOND],
    3
  );
  this.craft_buttons[CRAFT.SHOVEL_DIAMOND].id = CRAFT.SHOVEL_DIAMOND;
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SHOVEL_AMETHYST],
    3
  );
  this.craft_buttons[CRAFT.SHOVEL_AMETHYST].id = CRAFT.SHOVEL_AMETHYST;
  this.craft_buttons[CRAFT.SPANNER] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SPANNER],
    3
  );
  this.craft_buttons[CRAFT.SPANNER].id = CRAFT.SPANNER;
  this.craft_buttons[CRAFT.WATERING_CAN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WATERING_CAN],
    3
  );
  this.craft_buttons[CRAFT.WATERING_CAN].id = CRAFT.WATERING_CAN;
  this.craft_buttons[CRAFT.WHEAT_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WHEAT_SEED],
    3
  );
  this.craft_buttons[CRAFT.WHEAT_SEED].id = CRAFT.WHEAT_SEED;
  this.craft_buttons[CRAFT.COOKIE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_COOKIE],
    3
  );
  this.craft_buttons[CRAFT.COOKIE].id = CRAFT.COOKIE;
  this.craft_buttons[CRAFT.WINDMILL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WINDMILL],
    3
  );
  this.craft_buttons[CRAFT.WINDMILL].id = CRAFT.WINDMILL;
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SUPER_DIVING_SUIT],
    3
  );
  this.craft_buttons[CRAFT.SUPER_DIVING_SUIT].id = CRAFT.SUPER_DIVING_SUIT;
  this.craft_buttons[CRAFT.DIVING_MASK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIVING_MASK],
    3
  );
  this.craft_buttons[CRAFT.DIVING_MASK].id = CRAFT.DIVING_MASK;
  this.craft_buttons[CRAFT.WATERING_CAN_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WATERING_CAN_FULL],
    3
  );
  this.craft_buttons[CRAFT.WATERING_CAN_FULL].id = CRAFT.WATERING_CAN_FULL;
  this.craft_buttons[CRAFT.CAKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CAKE],
    3
  );
  this.craft_buttons[CRAFT.CAKE].id = CRAFT.CAKE;
  this.craft_buttons[CRAFT.BREAD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BREAD],
    3
  );
  this.craft_buttons[CRAFT.BREAD].id = CRAFT.BREAD;
  this.craft_buttons[CRAFT.FOODFISH_COOKED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FOODFISH_COOKED],
    3
  );
  this.craft_buttons[CRAFT.FOODFISH_COOKED].id = CRAFT.FOODFISH_COOKED;
  this.craft_buttons[CRAFT.PLOT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PLOT],
    3
  );
  this.craft_buttons[CRAFT.PLOT].id = CRAFT.PLOT;
  this.craft_buttons[CRAFT.BREAD_OVEN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BREAD_OVEN],
    3
  );
  this.craft_buttons[CRAFT.BREAD_OVEN].id = CRAFT.BREAD_OVEN;
  this.craft_buttons[CRAFT.SANDWICH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SANDWICH],
    3
  );
  this.craft_buttons[CRAFT.SANDWICH].id = CRAFT.SANDWICH;
  this.craft_buttons[CRAFT.DRAGON_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DRAGON_HELMET],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_HELMET].id = CRAFT.DRAGON_HELMET;
  this.craft_buttons[CRAFT.DRAGON_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DRAGON_SWORD],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_SWORD].id = CRAFT.DRAGON_SWORD;
  this.craft_buttons[CRAFT.CROWN_GREEN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CROWN_GREEN],
    3
  );
  this.craft_buttons[CRAFT.CROWN_GREEN].id = CRAFT.CROWN_GREEN;
  this.craft_buttons[CRAFT.CROWN_ORANGE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CROWN_ORANGE],
    3
  );
  this.craft_buttons[CRAFT.CROWN_ORANGE].id = CRAFT.CROWN_ORANGE;
  this.craft_buttons[CRAFT.CROWN_BLUE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CROWN_BLUE],
    3
  );
  this.craft_buttons[CRAFT.CROWN_BLUE].id = CRAFT.CROWN_BLUE;
  this.craft_buttons[CRAFT.HOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_HOOD],
    3
  );
  this.craft_buttons[CRAFT.HOOD].id = CRAFT.HOOD;
  this.craft_buttons[CRAFT.PEASANT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PEASANT],
    3
  );
  this.craft_buttons[CRAFT.PEASANT].id = CRAFT.PEASANT;
  this.craft_buttons[CRAFT.WINTER_PEASANT] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WINTER_PEASANT],
    3
  );
  this.craft_buttons[CRAFT.WINTER_PEASANT].id = CRAFT.WINTER_PEASANT;
  this.craft_buttons[CRAFT.WINTER_HOOD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WINTER_HOOD],
    3
  );
  this.craft_buttons[CRAFT.WINTER_HOOD].id = CRAFT.WINTER_HOOD;
  this.craft_buttons[CRAFT.BUCKET_FULL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BUCKET_FULL],
    3
  );
  this.craft_buttons[CRAFT.BUCKET_FULL].id = CRAFT.BUCKET_FULL;
  this.craft_buttons[CRAFT.BUCKET_EMPTY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BUCKET_EMPTY],
    3
  );
  this.craft_buttons[CRAFT.BUCKET_EMPTY].id = CRAFT.BUCKET_EMPTY;
  this.craft_buttons[CRAFT.WELL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WELL],
    3
  );
  this.craft_buttons[CRAFT.WELL].id = CRAFT.WELL;
  this.craft_buttons[CRAFT.SIGN] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_SIGN],
    3
  );
  this.craft_buttons[CRAFT.SIGN].id = CRAFT.SIGN;
  this.craft_buttons[CRAFT.PUMPKIN_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PUMPKIN_SEED],
    3
  );
  this.craft_buttons[CRAFT.PUMPKIN_SEED].id = CRAFT.PUMPKIN_SEED;
  this.craft_buttons[CRAFT.GARLIC_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GARLIC_SEED],
    3
  );
  this.craft_buttons[CRAFT.GARLIC_SEED].id = CRAFT.GARLIC_SEED;
  this.craft_buttons[CRAFT.ROOF] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_ROOF],
    3
  );
  this.craft_buttons[CRAFT.ROOF].id = CRAFT.ROOF;
  this.craft_buttons[CRAFT.THORNBUSH_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_THORNBUSH_SEED],
    3
  );
  this.craft_buttons[CRAFT.THORNBUSH_SEED].id = CRAFT.THORNBUSH_SEED;
  this.craft_buttons[CRAFT.TOMATO_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_TOMATO_SEED],
    3
  );
  this.craft_buttons[CRAFT.TOMATO_SEED].id = CRAFT.TOMATO_SEED;
  this.craft_buttons[CRAFT.CARROT_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CARROT_SEED],
    3
  );
  this.craft_buttons[CRAFT.CARROT_SEED].id = CRAFT.CARROT_SEED;
  this.craft_buttons[CRAFT.WATERMELON_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WATERMELON_SEED],
    3
  );
  this.craft_buttons[CRAFT.WATERMELON_SEED].id = CRAFT.WATERMELON_SEED;
  this.craft_buttons[CRAFT.ALOE_VERA_SEED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_ALOE_VERA_SEED],
    3
  );
  this.craft_buttons[CRAFT.ALOE_VERA_SEED].id = CRAFT.ALOE_VERA_SEED;
  this.craft_buttons[CRAFT.WOOD_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.WOOD_SPEAR].id = CRAFT.WOOD_SPEAR;
  this.craft_buttons[CRAFT.DRAGON_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DRAGON_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.DRAGON_SPEAR].id = CRAFT.DRAGON_SPEAR;
  this.craft_buttons[CRAFT.CRAB_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CRAB_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.CRAB_SPEAR].id = CRAFT.CRAB_SPEAR;
  this.craft_buttons[CRAFT.BED] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_BED],
    3
  );
  this.craft_buttons[CRAFT.BED].id = CRAFT.BED;
  this.craft_buttons[CRAFT.CROWN_CRAB] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_CROWN_CRAB],
    3
  );
  this.craft_buttons[CRAFT.CROWN_CRAB].id = CRAFT.CROWN_CRAB;
  this.chest_buttons[INV.PITCHFORK] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PITCHFORK],
    3
  );
  this.chest_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.inv_buttons[INV.PITCHFORK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PITCHFORK],
    3
  );
  this.inv_buttons[INV.PITCHFORK].id = INV.PITCHFORK;
  this.craft_buttons[CRAFT.PITCHFORK] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PITCHFORK],
    3
  );
  this.craft_buttons[CRAFT.PITCHFORK].id = CRAFT.PITCHFORK;
  this.chest_buttons[INV.PITCHFORK2] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PITCHFORK2],
    3
  );
  this.chest_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.inv_buttons[INV.PITCHFORK2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PITCHFORK2],
    3
  );
  this.inv_buttons[INV.PITCHFORK2].id = INV.PITCHFORK2;
  this.craft_buttons[CRAFT.PITCHFORK2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PITCHFORK2],
    3
  );
  this.craft_buttons[CRAFT.PITCHFORK2].id = CRAFT.PITCHFORK2;
  this.chest_buttons[INV.MACHETE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_MACHETE],
    3
  );
  this.chest_buttons[INV.MACHETE].id = INV.MACHETE;
  this.inv_buttons[INV.MACHETE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_MACHETE],
    3
  );
  this.inv_buttons[INV.MACHETE].id = INV.MACHETE;
  this.craft_buttons[CRAFT.MACHETE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_MACHETE],
    3
  );
  this.craft_buttons[CRAFT.MACHETE].id = CRAFT.MACHETE;
  this.chest_buttons[INV.PILOT_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PILOT_HELMET],
    3
  );
  this.chest_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.inv_buttons[INV.PILOT_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PILOT_HELMET],
    3
  );
  this.inv_buttons[INV.PILOT_HELMET].id = INV.PILOT_HELMET;
  this.craft_buttons[CRAFT.PILOT_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_PILOT_HELMET],
    3
  );
  this.craft_buttons[CRAFT.PILOT_HELMET].id = CRAFT.PILOT_HELMET;
  this.chest_buttons[INV.PITCHFORK_PART] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PITCHFORK_PART],
    3
  );
  this.chest_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.inv_buttons[INV.PITCHFORK_PART] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PITCHFORK_PART],
    3
  );
  this.inv_buttons[INV.PITCHFORK_PART].id = INV.PITCHFORK_PART;
  this.chest_buttons[INV.SANDWORM_JUICE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_SANDWORM_JUICE],
    3
  );
  this.chest_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.inv_buttons[INV.SANDWORM_JUICE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_SANDWORM_JUICE],
    3
  );
  this.inv_buttons[INV.SANDWORM_JUICE].id = INV.SANDWORM_JUICE;
  this.chest_buttons[INV.PILOT_GLASSES] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_PILOT_GLASSES],
    3
  );
  this.chest_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.inv_buttons[INV.PILOT_GLASSES] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_PILOT_GLASSES],
    3
  );
  this.inv_buttons[INV.PILOT_GLASSES].id = INV.PILOT_GLASSES;
  this.chest_buttons[INV.EMERALD_MACHINE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EMERALD_MACHINE],
    3
  );
  this.chest_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.inv_buttons[INV.EMERALD_MACHINE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EMERALD_MACHINE],
    3
  );
  this.inv_buttons[INV.EMERALD_MACHINE].id = INV.EMERALD_MACHINE;
  this.craft_buttons[CRAFT.EMERALD_MACHINE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EMERALD_MACHINE],
    3
  );
  this.craft_buttons[CRAFT.EMERALD_MACHINE].id = CRAFT.EMERALD_MACHINE;
  this.chest_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WOOD_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.inv_buttons[INV.WOOD_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WOOD_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.WOOD_DOOR_SPIKE].id = INV.WOOD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WOOD_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.WOOD_DOOR_SPIKE].id = CRAFT.WOOD_DOOR_SPIKE;
  this.chest_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_STONE_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.inv_buttons[INV.STONE_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_STONE_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.STONE_DOOR_SPIKE].id = INV.STONE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_STONE_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.STONE_DOOR_SPIKE].id = CRAFT.STONE_DOOR_SPIKE;
  this.chest_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_GOLD_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.inv_buttons[INV.GOLD_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_GOLD_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.GOLD_DOOR_SPIKE].id = INV.GOLD_DOOR_SPIKE;
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_GOLD_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.GOLD_DOOR_SPIKE].id = CRAFT.GOLD_DOOR_SPIKE;
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.DIAMOND_DOOR_SPIKE].id = INV.DIAMOND_DOOR_SPIKE;
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_DOOR_SPIKE].id = CRAFT.DIAMOND_DOOR_SPIKE;
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.AMETHYST_DOOR_SPIKE].id = INV.AMETHYST_DOOR_SPIKE;
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_DOOR_SPIKE].id = CRAFT.AMETHYST_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_DOOR_SPIKE],
    3
  );
  this.chest_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_DOOR_SPIKE],
    3
  );
  this.inv_buttons[INV.REIDITE_DOOR_SPIKE].id = INV.REIDITE_DOOR_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_DOOR_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_DOOR_SPIKE].id = CRAFT.REIDITE_DOOR_SPIKE;
  this.chest_buttons[INV.REIDITE_WALL] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_WALL],
    3
  );
  this.chest_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.inv_buttons[INV.REIDITE_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_WALL],
    3
  );
  this.inv_buttons[INV.REIDITE_WALL].id = INV.REIDITE_WALL;
  this.craft_buttons[CRAFT.REIDITE_WALL] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_WALL],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_WALL].id = CRAFT.REIDITE_WALL;
  this.chest_buttons[INV.REIDITE_SPIKE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_SPIKE],
    3
  );
  this.chest_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.inv_buttons[INV.REIDITE_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_SPIKE],
    3
  );
  this.inv_buttons[INV.REIDITE_SPIKE].id = INV.REIDITE_SPIKE;
  this.craft_buttons[CRAFT.REIDITE_SPIKE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_SPIKE],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_SPIKE].id = CRAFT.REIDITE_SPIKE;
  this.chest_buttons[INV.REIDITE_DOOR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_DOOR],
    3
  );
  this.chest_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.inv_buttons[INV.REIDITE_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_DOOR],
    3
  );
  this.inv_buttons[INV.REIDITE_DOOR].id = INV.REIDITE_DOOR;
  this.craft_buttons[CRAFT.REIDITE_DOOR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_DOOR],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_DOOR].id = CRAFT.REIDITE_DOOR;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_STONE],
    3
  );
  this.chest_buttons[INV.EXTRACTOR_MACHINE_STONE].id =
    INV.EXTRACTOR_MACHINE_STONE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_STONE],
    3
  );
  this.inv_buttons[INV.EXTRACTOR_MACHINE_STONE].id =
    INV.EXTRACTOR_MACHINE_STONE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_STONE],
    3
  );
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_STONE].id =
    CRAFT.EXTRACTOR_MACHINE_STONE;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_GOLD],
    3
  );
  this.chest_buttons[INV.EXTRACTOR_MACHINE_GOLD].id =
    INV.EXTRACTOR_MACHINE_GOLD;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_GOLD],
    3
  );
  this.inv_buttons[INV.EXTRACTOR_MACHINE_GOLD].id = INV.EXTRACTOR_MACHINE_GOLD;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_GOLD],
    3
  );
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_GOLD].id =
    CRAFT.EXTRACTOR_MACHINE_GOLD;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_DIAMOND],
    3
  );
  this.chest_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id =
    INV.EXTRACTOR_MACHINE_DIAMOND;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_DIAMOND],
    3
  );
  this.inv_buttons[INV.EXTRACTOR_MACHINE_DIAMOND].id =
    INV.EXTRACTOR_MACHINE_DIAMOND;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_DIAMOND],
    3
  );
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_DIAMOND].id =
    CRAFT.EXTRACTOR_MACHINE_DIAMOND;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_AMETHYST],
    3
  );
  this.chest_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id =
    INV.EXTRACTOR_MACHINE_AMETHYST;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_AMETHYST],
    3
  );
  this.inv_buttons[INV.EXTRACTOR_MACHINE_AMETHYST].id =
    INV.EXTRACTOR_MACHINE_AMETHYST;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_AMETHYST],
    3
  );
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_AMETHYST].id =
    CRAFT.EXTRACTOR_MACHINE_AMETHYST;
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EXTRACTOR_MACHINE_REIDITE],
    3
  );
  this.chest_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id =
    INV.EXTRACTOR_MACHINE_REIDITE;
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EXTRACTOR_MACHINE_REIDITE],
    3
  );
  this.inv_buttons[INV.EXTRACTOR_MACHINE_REIDITE].id =
    INV.EXTRACTOR_MACHINE_REIDITE;
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_EXTRACTOR_MACHINE_REIDITE],
    3
  );
  this.craft_buttons[CRAFT.EXTRACTOR_MACHINE_REIDITE].id =
    CRAFT.EXTRACTOR_MACHINE_REIDITE;
  this.chest_buttons[INV.FLAME] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FLAME],
    3
  );
  this.chest_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FLAME],
    3
  );
  this.inv_buttons[INV.FLAME].id = INV.FLAME;
  this.inv_buttons[INV.FLAME].info.img[2] =
    this.inv_buttons[INV.FLAME].info.img[0];
  this.chest_buttons[INV.LAVA_HEART] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_HEART],
    3
  );
  this.chest_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_HEART],
    3
  );
  this.inv_buttons[INV.LAVA_HEART].id = INV.LAVA_HEART;
  this.inv_buttons[INV.LAVA_HEART].info.img[2] =
    this.inv_buttons[INV.LAVA_HEART].info.img[0];
  this.chest_buttons[INV.REIDITE] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE],
    3
  );
  this.chest_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE],
    3
  );
  this.inv_buttons[INV.REIDITE].id = INV.REIDITE;
  this.inv_buttons[INV.REIDITE].info.img[2] =
    this.inv_buttons[INV.REIDITE].info.img[0];
  this.chest_buttons[INV.REIDITE_SWORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_SWORD],
    3
  );
  this.chest_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.inv_buttons[INV.REIDITE_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_SWORD],
    3
  );
  this.inv_buttons[INV.REIDITE_SWORD].id = INV.REIDITE_SWORD;
  this.craft_buttons[CRAFT.REIDITE_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_SWORD],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_SWORD].id = CRAFT.REIDITE_SWORD;
  this.chest_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_DIAMOND_PROTECTION],
    3
  );
  this.chest_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.inv_buttons[INV.DIAMOND_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_DIAMOND_PROTECTION],
    3
  );
  this.inv_buttons[INV.DIAMOND_PROTECTION].id = INV.DIAMOND_PROTECTION;
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_DIAMOND_PROTECTION],
    3
  );
  this.craft_buttons[CRAFT.DIAMOND_PROTECTION].id = CRAFT.DIAMOND_PROTECTION;
  this.chest_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_AMETHYST_PROTECTION],
    3
  );
  this.chest_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.inv_buttons[INV.AMETHYST_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_AMETHYST_PROTECTION],
    3
  );
  this.inv_buttons[INV.AMETHYST_PROTECTION].id = INV.AMETHYST_PROTECTION;
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_AMETHYST_PROTECTION],
    3
  );
  this.craft_buttons[CRAFT.AMETHYST_PROTECTION].id = CRAFT.AMETHYST_PROTECTION;
  this.chest_buttons[INV.REIDITE_PROTECTION] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_PROTECTION],
    3
  );
  this.chest_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.inv_buttons[INV.REIDITE_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_PROTECTION],
    3
  );
  this.inv_buttons[INV.REIDITE_PROTECTION].id = INV.REIDITE_PROTECTION;
  this.craft_buttons[CRAFT.REIDITE_PROTECTION] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_PROTECTION],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_PROTECTION].id = CRAFT.REIDITE_PROTECTION;
  this.chest_buttons[INV.LAVA_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_HELMET],
    3
  );
  this.chest_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.inv_buttons[INV.LAVA_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_HELMET],
    3
  );
  this.inv_buttons[INV.LAVA_HELMET].id = INV.LAVA_HELMET;
  this.craft_buttons[CRAFT.LAVA_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_LAVA_HELMET],
    3
  );
  this.craft_buttons[CRAFT.LAVA_HELMET].id = CRAFT.LAVA_HELMET;
  this.chest_buttons[INV.WITCH] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WITCH],
    3
  );
  this.chest_buttons[INV.WITCH].id = INV.WITCH;
  this.inv_buttons[INV.WITCH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WITCH],
    3
  );
  this.inv_buttons[INV.WITCH].id = INV.WITCH;
  this.craft_buttons[CRAFT.WITCH] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WITCH],
    3
  );
  this.craft_buttons[CRAFT.WITCH].id = CRAFT.WITCH;
  this.chest_buttons[INV.WAND1] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WAND1],
    3
  );
  this.chest_buttons[INV.WAND1].id = INV.WAND1;
  this.inv_buttons[INV.WAND1] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WAND1],
    3
  );
  this.inv_buttons[INV.WAND1].id = INV.WAND1;
  this.craft_buttons[CRAFT.WAND1] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WAND1],
    3
  );
  this.craft_buttons[CRAFT.WAND1].id = CRAFT.WAND1;
  this.chest_buttons[INV.WAND2] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_WAND2],
    3
  );
  this.chest_buttons[INV.WAND2].id = INV.WAND2;
  this.inv_buttons[INV.WAND2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_WAND2],
    3
  );
  this.inv_buttons[INV.WAND2].id = INV.WAND2;
  this.craft_buttons[CRAFT.WAND2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_WAND2],
    3
  );
  this.craft_buttons[CRAFT.WAND2].id = CRAFT.WAND2;
  this.chest_buttons[INV.NIMBUS] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_NIMBUS],
    3
  );
  this.chest_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.inv_buttons[INV.NIMBUS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_NIMBUS],
    3
  );
  this.inv_buttons[INV.NIMBUS].id = INV.NIMBUS;
  this.craft_buttons[CRAFT.NIMBUS] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_NIMBUS],
    3
  );
  this.craft_buttons[CRAFT.NIMBUS].id = CRAFT.NIMBUS;
  this.chest_buttons[INV.FIREFLY] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_FIREFLY],
    3
  );
  this.chest_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.inv_buttons[INV.FIREFLY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_FIREFLY],
    3
  );
  this.inv_buttons[INV.FIREFLY].id = INV.FIREFLY;
  this.craft_buttons[CRAFT.FIREFLY] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_FIREFLY],
    3
  );
  this.craft_buttons[CRAFT.FIREFLY].id = CRAFT.FIREFLY;
  this.chest_buttons[INV.REIDITE_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_SPEAR],
    3
  );
  this.chest_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.inv_buttons[INV.REIDITE_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_SPEAR],
    3
  );
  this.inv_buttons[INV.REIDITE_SPEAR].id = INV.REIDITE_SPEAR;
  this.craft_buttons[CRAFT.REIDITE_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_SPEAR].id = CRAFT.REIDITE_SPEAR;
  this.chest_buttons[INV.REIDITE_HELMET] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_REIDITE_HELMET],
    3
  );
  this.chest_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.inv_buttons[INV.REIDITE_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_REIDITE_HELMET],
    3
  );
  this.inv_buttons[INV.REIDITE_HELMET].id = INV.REIDITE_HELMET;
  this.craft_buttons[CRAFT.REIDITE_HELMET] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_REIDITE_HELMET],
    3
  );
  this.craft_buttons[CRAFT.REIDITE_HELMET].id = CRAFT.REIDITE_HELMET;
  this.chest_buttons[INV.LAVA_SPEAR] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_SPEAR],
    3
  );
  this.chest_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.inv_buttons[INV.LAVA_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_SPEAR],
    3
  );
  this.inv_buttons[INV.LAVA_SPEAR].id = INV.LAVA_SPEAR;
  this.craft_buttons[CRAFT.LAVA_SPEAR] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_LAVA_SPEAR],
    3
  );
  this.craft_buttons[CRAFT.LAVA_SPEAR].id = CRAFT.LAVA_SPEAR;
  this.chest_buttons[INV.LAVA_SWORD] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_SWORD],
    3
  );
  this.chest_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.inv_buttons[INV.LAVA_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_SWORD],
    3
  );
  this.inv_buttons[INV.LAVA_SWORD].id = INV.LAVA_SWORD;
  this.craft_buttons[CRAFT.LAVA_SWORD] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.CRAFT_LAVA_SWORD],
    3
  );
  this.craft_buttons[CRAFT.LAVA_SWORD].id = CRAFT.LAVA_SWORD;
  this.chest_buttons[INV.LAVA_ORB] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_LAVA_ORB],
    3
  );
  this.chest_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.inv_buttons[INV.LAVA_ORB] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_LAVA_ORB],
    3
  );
  this.inv_buttons[INV.LAVA_ORB].id = INV.LAVA_ORB;
  this.chest_buttons[INV.EGG0] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EGG0],
    3
  );
  this.chest_buttons[INV.EGG0].id = INV.EGG0;
  this.inv_buttons[INV.EGG0] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EGG0],
    3
  );
  this.inv_buttons[INV.EGG0].id = INV.EGG0;
  this.chest_buttons[INV.EGG1] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EGG1],
    3
  );
  this.chest_buttons[INV.EGG1].id = INV.EGG1;
  this.inv_buttons[INV.EGG1] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EGG1],
    3
  );
  this.inv_buttons[INV.EGG1].id = INV.EGG1;
  this.chest_buttons[INV.EGG2] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EGG2],
    3
  );
  this.chest_buttons[INV.EGG2].id = INV.EGG2;
  this.inv_buttons[INV.EGG2] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EGG2],
    3
  );
  this.inv_buttons[INV.EGG2].id = INV.EGG2;
  this.chest_buttons[INV.EGG3] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EGG3],
    3
  );
  this.chest_buttons[INV.EGG3].id = INV.EGG3;
  this.inv_buttons[INV.EGG3] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EGG3],
    3
  );
  this.inv_buttons[INV.EGG3].id = INV.EGG3;
  this.chest_buttons[INV.EGG4] = gui_create_button(
    68,
    68,
    "",
    sprite[SPRITE.CHEST_EGG4],
    3
  );
  this.chest_buttons[INV.EGG4].id = INV.EGG4;
  this.inv_buttons[INV.EGG4] = gui_create_button(
    60,
    60,
    "",
    sprite[SPRITE.INV_EGG4],
    3
  );
  this.inv_buttons[INV.EGG4].id = INV.EGG4;
  this.update_craft_buttons = function () {
    var _0x5e0504 = user.craft.can_craft,
      _0x546ef7 = 10,
      _0x44d5df = 10;
    for (var _0x32ec6e = 0; _0x32ec6e < _0x5e0504.length; _0x32ec6e++) {
      _0x32ec6e > 0 &&
        !(_0x32ec6e % 4) &&
        ((_0x546ef7 += _0x5e0504[0].info.width + 10), (_0x44d5df = 10));
      _0x5e0504[_0x32ec6e].info.translate.x = _0x546ef7;
      _0x5e0504[_0x32ec6e].info.translate.y = _0x44d5df;
      _0x44d5df += 10 + _0x5e0504[_0x32ec6e].info.height;
    }
  };
  this.update_chest_buttons = function () {
    var _0x2ec705 = Math.floor(
      Math.floor((3 + user.craft.can_craft.length) / 4) *
        (10 + this.chest_buttons[0].info.img[0].width) +
        35
    );
    for (
      var _0xf46dae = 0;
      _0xf46dae < this.chest_buttons.length;
      _0xf46dae++
    ) {
      if (!this.chest_buttons[_0xf46dae]) {
        continue;
      }
      this.chest_buttons[_0xf46dae].info.translate.x = _0x2ec705;
      this.chest_buttons[_0xf46dae].info.translate.y = 22;
    }
    this.chest_lockpick.info.translate.x = _0x2ec705 + 17;
    this.chest_lockpick.info.translate.y =
      22 + sprite[SPRITE.CHEST_SLOT].height;
    this.chest_locked.info.translate.x = _0x2ec705 + 17;
    this.chest_locked.info.translate.y = 30;
    this.chest_padlock.info.translate.x = _0x2ec705 + 17;
    this.chest_padlock.info.translate.y = 22 + sprite[SPRITE.CHEST_SLOT].height;
  };
  this.update_team_buttons = function () {
    var _0x30b39f = Math.floor(
      (canw - sprite[SPRITE.TEAM_BUTTON][0].width) / 2
    );
    for (var _0x35f53a = 0; _0x35f53a < this.team_buttons.length; _0x35f53a++) {
      this.team_buttons[_0x35f53a].button.info.translate.x = _0x30b39f;
      this.team_buttons[_0x35f53a].button.info.translate.y = -13;
    }
  };
  this.update_bread_oven_button = function () {
    var _0x1c22c1 =
      12 +
      Math.floor(
        Math.floor((3 + user.craft.can_craft.length) / 4) *
          (10 + this.bread_oven_wood_button.info.img[0].width) +
          35
      );
    this.bread_oven_wood_button.info.translate.x = _0x1c22c1;
    this.bread_oven_wood_button.info.translate.y = 33;
    this.bread_oven_flour_button.info.translate.x =
      this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_flour_button.info.translate.y = 137;
    this.bread_oven_bread_button.info.translate.x =
      this.bread_oven_wood_button.info.translate.x;
    this.bread_oven_bread_button.info.translate.y = 240;
  };
  this.update_extractor_button = function () {
    var _0x59abe3 =
      12 +
      Math.floor(
        Math.floor((3 + user.craft.can_craft.length) / 4) *
          (10 + this.extractor_wood_button.info.img[0].width) +
          35
      );
    this.extractor_wood_button.info.translate.x = _0x59abe3;
    this.extractor_wood_button.info.translate.y = 36;
    _0x59abe3 += 83;
    this.extractor_stone_button.info.translate.x = _0x59abe3;
    this.extractor_stone_button.info.translate.y = 36;
    this.extractor_gold_button.info.translate.x = _0x59abe3;
    this.extractor_gold_button.info.translate.y = 36;
    this.extractor_diamond_button.info.translate.x = _0x59abe3;
    this.extractor_diamond_button.info.translate.y = 36;
    this.extractor_amethyst_button.info.translate.x = _0x59abe3;
    this.extractor_amethyst_button.info.translate.y = 36;
    this.extractor_reidite_button.info.translate.x = _0x59abe3;
    this.extractor_reidite_button.info.translate.y = 36;
  };
  this.update_windmill_button = function () {
    var _0x1aed84 =
      12 +
      Math.floor(
        Math.floor((3 + user.craft.can_craft.length) / 4) *
          (10 + this.windmill_wheat_button.info.img[0].width) +
          35
      );
    this.windmill_wheat_button.info.translate.x = _0x1aed84;
    this.windmill_wheat_button.info.translate.y = 36;
    _0x1aed84 += 83;
    this.windmill_flour_button.info.translate.x = _0x1aed84;
    this.windmill_flour_button.info.translate.y = 36;
  };
  this.update_furnace_button = function () {
    var _0x5851ac = Math.floor(
      Math.floor((3 + user.craft.can_craft.length) / 4) *
        (10 + this.furnace_button.info.img[0].width) +
        35
    );
    this.furnace_button.info.translate.x = _0x5851ac;
    this.furnace_button.info.translate.y = 22;
  };
  this.update_inv_buttons = function () {
    var _0x27526b = user.inv.can_select;
    if (_0x27526b.length > 0) {
      var _0x186cf6 = Math.floor(
        (canw - (_0x27526b[0].info.width + 5) * user.inv.max) / 2
      );
    }
    for (var _0x187826 = 0; _0x187826 < _0x27526b.length; _0x187826++) {
      _0x27526b[_0x187826].info.translate.x =
        _0x186cf6 + (_0x27526b[_0x187826].info.width + 5) * _0x187826;
      _0x27526b[_0x187826].info.translate.y =
        canh - _0x27526b[_0x187826].info.width - 10;
      this.plus_buttons[_0x27526b[_0x187826].id].info.translate.x =
        _0x27526b[_0x187826].info.translate.x + 13;
      this.plus_buttons[_0x27526b[_0x187826].id].info.translate.y =
        _0x27526b[_0x187826].info.translate.y -
        this.plus_buttons[_0x27526b[_0x187826].id].info.img[0].height -
        6;
    }
  };
  var _0x3f494d = 0,
    _0x3ca7af = function () {
      _.update();
      _0x3f494d++;
      if (_0x3f494d == 30) {
        _.add_event_listener();
        _.update();
        return;
      }
      window.setTimeout(_0x3ca7af, 33);
    };
  this.quit = function (_0x11b885) {
    if (user.chat.open) {
      user.chat.quit();
    }
    if (user.terminal.open) {
      user.terminal.quit();
    }
    document.getElementById("team_box").style.display = "none";
    _.market.style.display = "none";
    _.market.open = false;
    _.sign.style.display = "none";
    _.sign.open = false;
    document.getElementById("shop_starterkit").style.display = "none";
    document.getElementById("home_craft").style.display = "none";
    document.getElementById("recipe_craft").style.display = "none";
    _.craft_list.open = false;
    document.getElementById("option_in_game").style.display = "none";
    _.options.open = false;
    document.getElementById("sure_delete").style.display = "none";
    _.safe_delete.open = false;
    document.getElementById("cancel_sure_delete").style.display = "none";
    _.safe_cancel.open = false;
    document.getElementById("chronoquest").style.display = "none";
    _.quests.open = false;
    _0x4241c4 = _0x11b885;
    _.remove_event_listener();
    _.can.style.cursor = _.cursor0;
    audio.quit();
    _0x1dc84b = -1;
    _0x15faaa();
    //refreshAds();
  };
  var _0x4241c4,
    _0x1dc84b = -1,
    _0x15faaa = function () {
      _.update();
      _0x1dc84b++;
      if (_0x1dc84b == 30) {
        _.stop();
        _0x4241c4();
        return;
      }
      window.setTimeout(_0x15faaa, 33);
    };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    client.change_ground();
    _.is_run = true;
    _0x1dc84b = -1;
    _0x3f494d = 0;
    _0x3ca7af();
  };
  this.update = function () {
    this.leaderboard.translate.x = canw - this.leaderboard.img.width - 10;
    this.leaderboard.translate.y = 5;
    world.clock.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.CLOCK][0].width - 85;
    world.clock.translate.y = 10;
    this.craft_list.button.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.RECIPE_BUTTON][0].width - 10;
    this.craft_list.button.info.translate.y = 10;
    this.quests.button.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.QUEST_BUTTON][0].width - 20;
    this.quests.button.info.translate.y =
      this.craft_list.button.info.translate.y +
      sprite[SPRITE.RECIPE_BUTTON][0].height +
      5;
    this.options.button.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.options.button.info.translate.y =
      this.quests.button.info.translate.y +
      sprite[SPRITE.OPTION_BUTTON][0].height +
      18;
    this.audio.button_on.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_on.info.translate.y =
      this.options.button.info.translate.y +
      sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.audio.button_off.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.OPTION_BUTTON][0].width - 20;
    this.audio.button_off.info.translate.y =
      this.options.button.info.translate.y +
      sprite[SPRITE.SOUND_BUTTON_OFF][0].height;
    this.market.button.info.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.MARKET_BUTTON][0].width - 20;
    this.market.button.info.translate.y =
      this.audio.button_on.info.translate.y +
      sprite[SPRITE.MARKET_BUTTON][0].height;
    user.auto_feed.translate.x = this.leaderboard.translate.x - 63 - 85;
    user.auto_feed.translate.y = 100;
    user.show_spectators.translate.x =
      this.leaderboard.translate.x - sprite[SPRITE.SHOW_SPECTATORS].width - 85;
    user.show_spectators.translate.y =
      user.auto_feed.translate.y + 10 + sprite[SPRITE.AUTO_FEED].height;
    this.minimap.translate.y = canh - 3 - 193;
    this.minimap.translate.x = canw - 3 - 193;
    this.gauges.translate.x = 5;
    this.gauges.translate.y = canh - this.gauges.img.height - 5;
    this.shop.button.info.translate.x = canw2 - 45.5;
    this.shop.button.info.translate.y = 50;
    this.update_craft_buttons();
    this.update_inv_buttons();
    this.update_chest_buttons();
    this.update_furnace_button();
    this.update_windmill_button();
    this.update_extractor_button();
    this.update_bread_oven_button();
    this.update_team_buttons();
    this.sign.update_button();
    draw_team_buttons();
    user.chat.update();
    user.terminal.update();
    this.team_box.update();
    this.craft_list.home.update();
    this.craft_list.list.update();
    this.safe_delete.update();
    this.safe_cancel.update();
    this.quests.update();
    this.shop.update();
    this.options.update();
    this.market.update();
    this.sign.update();
    var _0x28d294 = 0;
    if (_0x3f494d != 30) {
      var _0x28d294 = 1500 / (_0x3f494d + 1) - 50;
    }
    if (_0x1dc84b != -1) {
      var _0x28d294 = -(1500 / (30 - _0x1dc84b + 1) - 48);
    }
    this.shop.button.info.translate.y -= _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.leaderboard.translate.y -= _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    user.auto_feed.translate.y -= _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    user.show_spectators.translate.y -= _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.craft_list.button.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.quests.button.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.options.button.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.market.button.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.audio.button_on.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.audio.button_off.info.translate.y -=
      _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    world.clock.translate.y -= _0x28d294 > 0 ? _0x28d294 : -_0x28d294;
    this.gauges.translate.y -= _0x28d294 < 0 ? _0x28d294 : -_0x28d294;
    this.minimap.translate.y -= _0x28d294 < 0 ? _0x28d294 : -_0x28d294;
  };
  this.draw_UI = function () {
    if (!user.ghost.enabled && this.show_ui && !user.zombie) {
      draw_ui_crafting();
    }
    draw_ui_gear();
    draw_ui_chat();
    if (this.show_ui) {
      draw_minimap();
      if (this.show_recipe_book === 1) {
        this.craft_list.button.draw(t);
      }
      if (
        world.mode !== WORLD.MODE_ZOMBIES &&
        world.mode !== WORLD.MODE_LEGACY &&
        world.mode !== WORLD.MODE_BR &&
        this.show_quest === 1
      ) {
        this.quests.button.draw(t);
      }
      this.options.button.draw(t);
      if (this.show_market === 1) {
        this.market.button.draw(t);
      }
      if (audio.run) {
        this.audio.button_on.draw(t);
      } else {
        this.audio.button_off.draw(t);
      }
      draw_leaderboard();
      draw_status();
      this.gauges.draw();
      draw_weapon_switch_delay();
      draw_helmet_switch_delay();
      draw_build_delay();
      draw_totem_delay();
      draw_ui_inventory();
      draw_chest_inventory();
      draw_furnace_inventory();
      draw_well_inventory();
      draw_windmill_inventory();
      draw_extractor_inventory();
      draw_bread_oven_inventory();
      draw_sign_button();
      draw_team_buttons();
      draw_info_box();
    }
    if (user.ghost.enabled) {
      draw_resurrection_inventory();
    }
    draw_bigmap();
    if (this.show_ui && this.show_clock === 1) {
      draw_clock();
    }
    user.welcome.draw();
    user.alert.draw("#FFF", "#000");
    this.show_ui &&
      (user.ghost.draw(),
      user.shop.draw(),
      user.inv.drag.draw(mouse.pos.x, mouse.pos.y));
    draw_reconnect();
  };
  this.update_scene = function () {
    user.cam.update();
    user.gauges.update();
    !user.reconnect.enabled &&
      user.alive &&
      (user.control.update(), user.auto_feed.update());
    world.update();
    this.quests.update_chrono();
  };
  this.draw_scene = function () {
    draw_world_with_effect();
  };
  this.update_connection = function () {
    client.check_state();
    client.check_pong();
    client.try_ping();
    client.update_cam();
  };
  this.draw = function () {
    if (!user.reconnect.enabled && user.alive) {
      this.update_connection();
    }
    audio.scheduler();
    this.update_scene();
    if (ui.hijackedAsset === 1) {
      var _0xfc29ab = IMAGES.CHEATING_BOX;
      ctxDrawImage(
        t,
        _0xfc29ab,
        canw2 - _0xfc29ab.width / 4,
        canh2 - _0xfc29ab.height / 4,
        _0xfc29ab.width / 2,
        _0xfc29ab.height / 2
      );
      return;
    }
    this.draw_scene();
    this.draw_UI();
  };
  this.trigger_keyup = function (_0x14e190) {
    if (user.chat.open && _0x14e190.keyCode === 27) {
      user.chat.quit();
    } else {
      if (user.terminal.open && _0x14e190.keyCode === 27) {
        user.terminal.quit();
      } else {
        if (
          !user.chat.open &&
          !user.terminal.open &&
          _0x14e190.keyCode == 79 &&
          _0x1dc84b == -1
        ) {
          user.terminal["_open"]();
        } else {
          if (_0x14e190.keyCode == 13 && _0x1dc84b == -1) {
            if (user.terminal.open) {
              user.terminal["_send"]();
            } else {
              user.chat.run();
            }
          } else {
            if (!user.chat.open && !user.terminal.open) {
              if (_0x14e190.keyCode === 82) {
                user.auto_feed.invert();
              } else {
                if (
                  _0x14e190.keyCode === 80 &&
                  world.mode === WORLD.MODE_HUNGER_GAMES &&
                  !user.spectator
                ) {
                  user.show_spectators.invert();
                } else {
                  if (_0x14e190.keyCode >= 49 && _0x14e190.keyCode <= 57) {
                    if (user.craft.id < 0) {
                      var _0x7d76a1 = _0x14e190.keyCode - 49,
                        _0x57d095 = user.inv.can_select[_0x7d76a1];
                      if (_0x57d095) {
                        client.select_inv(_0x57d095.id, _0x7d76a1);
                      }
                    }
                  } else {
                    if (_0x14e190.keyCode == 89) {
                      user.bigmap = !user.bigmap;
                    } else {
                      if (_0x14e190.keyCode == 71) {
                        user.craft.change_mode();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    keyboard.up(_0x14e190);
  };
  this.trigger_keydown = function (e) {
    keyboard.down(e);
    if (e.keyCode == 8 && !user.chat.open && !user.terminal.open) {
      e.preventDefault();
    }
    var t;
    if (e.code === Settings.DropSword.k &&
      (t = world.fast_units[user.uid]) &&
      HoldWeapon(t.right)
    ) {
      client.socket.send(JSON.stringify([6, t.right]));
    }
    if (e.code === Settings.Aimbot.k) {
      Settings.Aimbot.e = !Settings.Aimbot.e;
    }
    if (e.code === Settings.AutoCraft.k) {
      Settings.AutoCraft.e = !Settings.AutoCraft.e;
    }
    if (e.code === Settings.AutoRecycle.k) {
      Settings.AutoRecycle.e = !Settings.AutoRecycle.e;
    }
  };
  this.trigger_mousedown = function (_0x50c9c9) {
    mouse.pos = get_mouse_pos(_.can, _0x50c9c9);
    var _0x17cce9 = false;
    if (user.craft.preview < 0) {
      _.minimap.focus(mouse.pos);
    }
    var _0x1d4ad9 = user.chest;
    if (user.craft.id < 0 && _0x1d4ad9.id >= 0) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        _0x17cce9 |= _.chest_buttons[user.chest.id].trigger(
          _.can,
          mouse.pos,
          MOUSE_DOWN
        );
      }
    }
    var _0x4d9901 = user.windmill;
    _0x4d9901.open &&
      _0x4d9901.amount_flour > 0 &&
      (_0x17cce9 |= _.windmill_flour_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      ));
    var _0x1c4c39 = user.extractor;
    if (_0x1c4c39.open && _0x1c4c39.amount_mineral > 0) {
      _0x17cce9 |= _.extractor_stone_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
      _0x17cce9 |= _.extractor_gold_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
      _0x17cce9 |= _.extractor_diamond_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
      _0x17cce9 |= _.extractor_amethyst_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
      _0x17cce9 |= _.extractor_reidite_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
    }
    var _0x102e17 = user.bread_oven;
    _0x102e17.open &&
      _0x102e17.amount_bread > 0 &&
      (_0x17cce9 |= _.bread_oven_bread_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      ));
    if (user.sign.open) {
      _0x17cce9 |= _.sign.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (!user.chest.lock) {
      if (user.chest.padlock) {
        _0x17cce9 |= _.chest_padlock.trigger(_.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (user.chest.lockpick) {
      _0x17cce9 |= _.chest_lockpick.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      user.craft.id < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open &&
      !_.market.open
    ) {
      var _0xf8dd4d = user.inv.can_select;
      for (var _0x30fd8f = 0; _0x30fd8f < _0xf8dd4d.length; _0x30fd8f++) {
        var _0x312540 = _0xf8dd4d[_0x30fd8f].trigger(
          _.can,
          mouse.pos,
          MOUSE_DOWN
        );
        _0x17cce9 |= _0x312540;
        if (_0x312540) {
          user.inv.drag.start(_0x30fd8f, mouse.pos);
        }
        ((_0x1d4ad9.open &&
          (_0x1d4ad9.id < 0 || _0x1d4ad9.id == _0xf8dd4d[_0x30fd8f].id)) ||
          (user.furnace.open && _0xf8dd4d[_0x30fd8f].id === INV.WOOD) ||
          (user.well.open && _0xf8dd4d[_0x30fd8f].id === INV.BUCKET_FULL) ||
          (user.bread_oven.open &&
            (_0xf8dd4d[_0x30fd8f].id === INV.WOOD ||
              _0xf8dd4d[_0x30fd8f].id === INV.FLOUR)) ||
          (user.windmill.open && _0xf8dd4d[_0x30fd8f].id === INV.WILD_WHEAT) ||
          (user.extractor.open && _0xf8dd4d[_0x30fd8f].id === INV.WOOD)) &&
          (_0x17cce9 |= _.plus_buttons[_0xf8dd4d[_0x30fd8f].id].trigger(
            _.can,
            mouse.pos,
            MOUSE_DOWN
          ));
      }
    }
    if (user.resurrection.open) {
      _0x17cce9 |= _.resurrection.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (_.team_buttons_id != -1) {
      _0x17cce9 |= _.team_buttons[_.team_buttons_id].button.trigger(
        _.can,
        mouse.pos,
        MOUSE_DOWN
      );
      if (_0x17cce9) {
        var _0x1865df = true;
      }
    } else {
      var _0x1865df = false;
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      !_0x1865df &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.market.open &&
      !user.zombie
    ) {
      var _0xf8dd4d = user.craft.can_craft;
      for (var _0x30fd8f = 0; _0x30fd8f < _0xf8dd4d.length; _0x30fd8f++) {
        _0x17cce9 |= _0xf8dd4d[_0x30fd8f].trigger(_.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      user.shop.open &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      _0x17cce9 |= _.shop.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      user.craft.preview < 0 &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      _0x17cce9 |= _.craft_list.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      _0x17cce9 |= _.options.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open
    ) {
      _0x17cce9 |= _.market.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open &&
      !_.market.open
    ) {
      if (audio.run) {
        _0x17cce9 |= _.audio.button_on.trigger(_.can, mouse.pos, MOUSE_DOWN);
      } else {
        _0x17cce9 |= _.audio.button_off.trigger(_.can, mouse.pos, MOUSE_DOWN);
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.market.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      world.mode !== WORLD.MODE_ZOMBIES &&
      world.mode !== WORLD.MODE_LEGACY &&
      world.mode !== WORLD.MODE_BR
    ) {
      _0x17cce9 |= _.quests.button.trigger(_.can, mouse.pos, MOUSE_DOWN);
    }
    if (
      !_0x17cce9 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open &&
      !_.sign.open
    ) {
      if (user.craft.preview >= 0) {
        client.send_build();
      } else {
        if (!_0x1865df) {
          mouse.down();
        }
      }
    }
  };
  this.trigger_mouseup = function (_0x39db94) {
    mouse.pos = get_mouse_pos(_.can, _0x39db94);
    mouse.up();
    if (user.inv.drag.release()) {
      return;
    }
    var _0x4d7fa2 = user.chest,
      _0x228561 = user.furnace,
      _0x364cc9 = user.well,
      _0x2d8492 = user.windmill,
      _0x50ad67 = user.extractor,
      _0x44bfef = user.bread_oven;
    user.control.attack && ((user.control.attack = 0), client.stop_attack());
    if (_.team_buttons_id != -1) {
      var _0x3c5a89 = _.team_buttons[_.team_buttons_id].button.trigger(
          _.can,
          mouse.pos,
          MOUSE_UP
        ),
        _0x69a89b = document.getElementById("team_box").style;
      if (_0x3c5a89 && _0x69a89b.display == "inline-block") {
        _0x69a89b.display = "none";
        return;
      } else {
        if (_0x3c5a89) {
          _.team_buttons[_.team_buttons_id].action();
        }
      }
    }
    if (user.craft.id < 0 && _0x4d7fa2.id >= 0 && !_.safe_delete.open) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        var _0x3c5a89 = _.chest_buttons[user.chest.id].trigger(
          _.can,
          mouse.pos,
          MOUSE_UP
        );
        if (_0x3c5a89) {
          client.take_chest(_0x4d7fa2);
        }
      }
    }
    var _0x2d8492 = user.windmill;
    if (_0x2d8492.open && _0x2d8492.amount_flour > 0 && !_.safe_delete.open) {
      var _0x3c5a89 = _.windmill_flour_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_UP
      );
      if (_0x3c5a89) {
        client.take_flour(_0x2d8492);
      }
    }
    var _0x50ad67 = user.extractor;
    if (_0x50ad67.open && _0x50ad67.amount_mineral > 0 && !_.safe_delete.open) {
      switch (_0x50ad67.type) {
        case ITEMS.EXTRACTOR_MACHINE_STONE:
          var _0x3c5a89 = _.extractor_stone_button.trigger(
            _.can,
            mouse.pos,
            MOUSE_UP
          );
          if (_0x3c5a89) {
            client.take_extractor(_0x50ad67);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_GOLD:
          var _0x3c5a89 = _.extractor_gold_button.trigger(
            _.can,
            mouse.pos,
            MOUSE_UP
          );
          if (_0x3c5a89) {
            client.take_extractor(_0x50ad67);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_DIAMOND:
          var _0x3c5a89 = _.extractor_diamond_button.trigger(
            _.can,
            mouse.pos,
            MOUSE_UP
          );
          if (_0x3c5a89) {
            client.take_extractor(_0x50ad67);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_AMETHYST:
          var _0x3c5a89 = _.extractor_amethyst_button.trigger(
            _.can,
            mouse.pos,
            MOUSE_UP
          );
          if (_0x3c5a89) {
            client.take_extractor(_0x50ad67);
          }
          break;
        case ITEMS.EXTRACTOR_MACHINE_REIDITE:
          var _0x3c5a89 = _.extractor_reidite_button.trigger(
            _.can,
            mouse.pos,
            MOUSE_UP
          );
          if (_0x3c5a89) {
            client.take_extractor(_0x50ad67);
          }
          break;
      }
    }
    var _0x44bfef = user.bread_oven;
    if (_0x44bfef.open && _0x44bfef.amount_bread > 0 && !_.safe_delete.open) {
      var _0x3c5a89 = _.bread_oven_bread_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_UP
      );
      if (_0x3c5a89) {
        client.take_bread(_0x44bfef);
      }
    }
    if (user.sign.open && !_.safe_delete.open) {
      var _0x3c5a89 = _.sign.button.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        _.sign.select();
      }
    }
    if (!user.chest.lock && !_.safe_delete.open) {
      if (user.chest.padlock) {
        _0x3c5a89 = _.chest_padlock.trigger(_.can, mouse.pos, MOUSE_UP);
        if (_0x3c5a89) {
          client.lock_chest(_0x4d7fa2);
        }
      }
    }
    if (user.chest.lockpick && !_.safe_delete.open) {
      _0x3c5a89 = _.chest_lockpick.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        client.unlock_chest(_0x4d7fa2);
        if (ga) {
          ga("send", "event", "Game", "lockpick");
        }
      }
    }
    if (user.resurrection.open) {
      var _0x3c5a89 = _.resurrection.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        client.resurrection();
        if (ga) {
          ga("send", "event", "Game", "resurrection");
        }
      }
    }
    if (user.craft.id < 0 && !user.ghost.enabled && !_.safe_delete.open) {
      var _0x5c5005 = user.inv.can_select;
      for (var _0x50d7ba = 0; _0x50d7ba < _0x5c5005.length; _0x50d7ba++) {
        var _0x3c5a89 = _0x5c5005[_0x50d7ba].trigger(
          _.can,
          mouse.pos,
          MOUSE_UP
        );
        if (!_0x3c5a89) {
          if (
            _0x4d7fa2.open &&
            (_0x4d7fa2.id < 0 || _0x4d7fa2.id === _0x5c5005[_0x50d7ba].id)
          ) {
            var _0x3c5a89 = _.plus_buttons[_0x5c5005[_0x50d7ba].id].trigger(
              _.can,
              mouse.pos,
              MOUSE_UP
            );
            if (_0x3c5a89 && user.craft.preview < 0) {
              client.give_item(
                _0x4d7fa2,
                _0x5c5005[_0x50d7ba].id,
                _0x39db94.shiftKey ? 10 : 1
              );
            }
          } else {
            if (_0x364cc9.open && _0x5c5005[_0x50d7ba].id === INV.BUCKET_FULL) {
              var _0x3c5a89 = _.plus_buttons[_0x5c5005[_0x50d7ba].id].trigger(
                _.can,
                mouse.pos,
                MOUSE_UP
              );
              if (_0x3c5a89 && user.craft.preview < 0) {
                client.give_well(_0x364cc9);
              }
            } else {
              if (_0x228561.open && _0x5c5005[_0x50d7ba].id === INV.WOOD) {
                var _0x3c5a89 = _.plus_buttons[_0x5c5005[_0x50d7ba].id].trigger(
                  _.can,
                  mouse.pos,
                  MOUSE_UP
                );
                if (_0x3c5a89 && user.craft.preview < 0) {
                  client.give_wood(_0x228561, _0x39db94.shiftKey ? 10 : 1);
                }
              } else {
                if (
                  _0x2d8492.open &&
                  _0x5c5005[_0x50d7ba].id === INV.WILD_WHEAT
                ) {
                  var _0x3c5a89 = _.plus_buttons[
                    _0x5c5005[_0x50d7ba].id
                  ].trigger(_.can, mouse.pos, MOUSE_UP);
                  if (_0x3c5a89 && user.craft.preview < 0) {
                    client.give_wheat(_0x2d8492, _0x39db94.shiftKey ? 10 : 1);
                  }
                } else {
                  if (_0x50ad67.open && _0x5c5005[_0x50d7ba].id === INV.WOOD) {
                    var _0x3c5a89 = _.plus_buttons[
                      _0x5c5005[_0x50d7ba].id
                    ].trigger(_.can, mouse.pos, MOUSE_UP);
                    if (_0x3c5a89 && user.craft.preview < 0) {
                      client.give_wood_extractor(
                        _0x50ad67,
                        _0x39db94.shiftKey ? 10 : 1
                      );
                    }
                  } else {
                    if (
                      _0x44bfef.open &&
                      (_0x5c5005[_0x50d7ba].id === INV.WOOD ||
                        _0x5c5005[_0x50d7ba].id === INV.FLOUR)
                    ) {
                      var _0x3c5a89 = _.plus_buttons[
                        _0x5c5005[_0x50d7ba].id
                      ].trigger(_.can, mouse.pos, MOUSE_UP);
                      if (_0x3c5a89 && user.craft.preview < 0) {
                        if (_0x5c5005[_0x50d7ba].id === INV.WOOD) {
                          client.give_bread_oven(
                            _0x44bfef,
                            _0x39db94.shiftKey ? 10 : 1,
                            0
                          );
                        } else {
                          client.give_bread_oven(
                            _0x44bfef,
                            0,
                            _0x39db94.shiftKey ? 10 : 1
                          );
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          continue;
        } else {
          if (_0x39db94.which == 1 && !_0x39db94.shiftKey) {
            client.select_inv(_0x5c5005[_0x50d7ba].id, _0x50d7ba);
          } else {
            if (
              ((_0x39db94.which == 1 && _0x39db94.shiftKey) ||
                _0x39db94.which == 3) &&
              user.craft.preview < 0
            ) {
              _.safe_delete.del(_0x5c5005[_0x50d7ba].id);
            }
          }
        }
      }
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      !user.ghost.enabled &&
      !_.safe_delete.open &&
      !user.zombie
    ) {
      var _0x5c5005 = user.craft.can_craft;
      for (var _0x50d7ba = 0; _0x50d7ba < _0x5c5005.length; _0x50d7ba++) {
        var _0x3c5a89 = _0x5c5005[_0x50d7ba].trigger(
          _.can,
          mouse.pos,
          MOUSE_UP
        );
        if (!_0x3c5a89) {
          continue;
        }
        ret = client.select_craft(_0x5c5005[_0x50d7ba].id);
        if (ret && ga) {
          ga(
            "send",
            "event",
            "Game",
            "craft",
            INV_INFOS[RECIPES[_0x5c5005[_0x50d7ba].id].id2].name
          );
        }
      }
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      user.shop.open &&
      !_.market.open &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open
    ) {
      var _0x3c5a89 = _.shop.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
      if (_0x3c5a89) {
        game.shop.select();
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.market.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open
    ) {
      if (audio.run) {
        var _0x3c5a89 = _.audio.button_on.trigger(_.can, mouse.pos, MOUSE_UP);
        if (_0x3c5a89) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound on");
          }
        }
      } else {
        var _0x3c5a89 = _.audio.button_off.trigger(_.can, mouse.pos, MOUSE_UP);
        if (_0x3c5a89) {
          audio.select();
          if (ga) {
            ga("send", "event", "Game", "sound off");
          }
        }
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      var _0x3c5a89 = _.options.button.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        _.options.select_options();
        if (ga) {
          ga("send", "event", "Game", "options");
        }
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open &&
      _.show_market === 1
    ) {
      var _0x3c5a89 = _.market.button.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        _.market.select();
        if (ga) {
          ga("send", "event", "Game", "market");
        }
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.safe_delete.open &&
      !_.market.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      _.show_recipe_book === 1
    ) {
      var _0x3c5a89 = _.craft_list.button.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        _.craft_list.select_book();
        if (ga) {
          ga("send", "event", "Game", "recipe");
        }
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.market.open &&
      world.mode !== WORLD.MODE_ZOMBIES &&
      world.mode !== WORLD.MODE_LEGACY &&
      world.mode !== WORLD.MODE_BR &&
      _.show_quest === 1
    ) {
      var _0x3c5a89 = _.quests.button.trigger(_.can, mouse.pos, MOUSE_UP);
      if (_0x3c5a89) {
        _.quests.select();
        if (ga) {
          ga("send", "event", "Game", "quests");
        }
      }
    }
    if (user.craft.crafting && _0x39db94.which == 3) {
      _.safe_cancel.del();
    }
  };
  this.current_cursor = false;
  this.trigger_mousemove = function (_0x4ec92d) {
    mouse.pos = get_mouse_pos(_.can, _0x4ec92d);
    var _0x4df9d8 = false;
    game.info_box.display = 0;
    user.inv.drag.move(mouse.pos);
    if (_.team_buttons_id != -1) {
      _0x4df9d8 |= _.team_buttons[_.team_buttons_id].button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
    }
    var _0xd40191 = user.windmill;
    if (_0xd40191.open && _0xd40191.amount_flour > 0) {
      _0x4df9d8 |= _.windmill_flour_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
    }
    var _0x1c7f69 = user.extractor;
    if (_0x1c7f69.open && _0x1c7f69.amount_mineral > 0) {
      _0x4df9d8 |= _.extractor_stone_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
      _0x4df9d8 |= _.extractor_gold_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
      _0x4df9d8 |= _.extractor_diamond_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
      _0x4df9d8 |= _.extractor_amethyst_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
      _0x4df9d8 |= _.extractor_reidite_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
    }
    var _0x166a31 = user.bread_oven;
    if (_0x166a31.open && _0x166a31.amount_bread > 0) {
      _0x4df9d8 |= _.bread_oven_bread_button.trigger(
        _.can,
        mouse.pos,
        MOUSE_MOVE
      );
    }
    if (user.sign.open) {
      _0x4df9d8 |= _.sign.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    var _0x441926 = user.chest;
    if (user.craft.id < 0 && _0x441926.id >= 0 && !user.ghost.enabled) {
      if (!user.chest.lock || user.chest.pid === user.id) {
        _0x4df9d8 |= _.chest_buttons[_0x441926.id].trigger(
          _.can,
          mouse.pos,
          MOUSE_MOVE
        );
      }
    }
    if (user.resurrection.open) {
      _0x4df9d8 |= _.resurrection.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (!user.chest.lock && !user.ghost.enabled) {
      if (user.chest.padlock) {
        _0x4df9d8 |= _.chest_padlock.trigger(_.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (user.chest.lockpick && !user.ghost.enabled) {
      _0x4df9d8 |= _.chest_lockpick.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (user.craft.id < 0 && !user.ghost.enabled) {
      var _0x7af890 = user.inv.can_select;
      for (var _0x3f8d9e = 0; _0x3f8d9e < _0x7af890.length; _0x3f8d9e++) {
        var _0x418e66 = _0x7af890[_0x3f8d9e].trigger(
          _.can,
          mouse.pos,
          MOUSE_MOVE
        );
        _0x4df9d8 |= game.info_box.trigger(_0x418e66, _0x7af890[_0x3f8d9e], 0);
        ((_0x441926.open &&
          (_0x441926.id < 0 || _0x441926.id == _0x7af890[_0x3f8d9e].id)) ||
          (user.furnace.open && _0x7af890[_0x3f8d9e].id == INV.WOOD) ||
          (user.well.open && _0x7af890[_0x3f8d9e].id === INV.BUCKET_FULL) ||
          (user.bread_oven.open &&
            (_0x7af890[_0x3f8d9e].id == INV.WOOD ||
              _0x7af890[_0x3f8d9e].id == INV.FLOUR)) ||
          (user.windmill.open && _0x7af890[_0x3f8d9e].id == INV.WILD_WHEAT) ||
          (user.extractor.open && _0x7af890[_0x3f8d9e].id == INV.WOOD)) &&
          (_0x4df9d8 |= _.plus_buttons[_0x7af890[_0x3f8d9e].id].trigger(
            _.can,
            mouse.pos,
            MOUSE_MOVE
          ));
      }
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      !user.ghost.enabled &&
      !user.zombie
    ) {
      var _0x7af890 = user.craft.can_craft;
      for (var _0x3f8d9e = 0; _0x3f8d9e < _0x7af890.length; _0x3f8d9e++) {
        var _0x418e66 = false;
        _0x418e66 = _0x7af890[_0x3f8d9e].trigger(_.can, mouse.pos, MOUSE_MOVE);
        _0x4df9d8 |= game.info_box.trigger(_0x418e66, _0x7af890[_0x3f8d9e], 1);
      }
    }
    if (
      user.craft.id < 0 &&
      user.craft.preview < 0 &&
      user.shop.open &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      _0x4df9d8 |= _.shop.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (
      user.craft.preview < 0 &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open &&
      _.show_recipe_book === 1
    ) {
      _0x4df9d8 |= _.craft_list.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.market.open
    ) {
      _0x4df9d8 |= _.options.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open &&
      _.show_market === 1
    ) {
      _0x4df9d8 |= _.market.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.safe_cancel.open &&
      !_.quests.open &&
      !_.options.open &&
      !_.market.open
    ) {
      if (audio.run) {
        _0x4df9d8 |= _.audio.button_on.trigger(_.can, mouse.pos, MOUSE_MOVE);
      } else {
        _0x4df9d8 |= _.audio.button_off.trigger(_.can, mouse.pos, MOUSE_MOVE);
      }
    }
    if (
      user.craft.preview < 0 &&
      !_.craft_list.open &&
      !_.safe_delete.open &&
      !_.options.open &&
      !_.safe_cancel.open &&
      !_.market.open &&
      world.mode !== WORLD.MODE_ZOMBIES &&
      world.mode !== WORLD.MODE_LEGACY &&
      world.mode !== WORLD.MODE_B &&
      _.show_quest === 1
    ) {
      _0x4df9d8 |= _.quests.button.trigger(_.can, mouse.pos, MOUSE_MOVE);
    }
    if (_.current_cursor !== _0x4df9d8) {
      _.current_cursor = _0x4df9d8;
      if (_0x4df9d8) {
        n.style.cursor = _.cursor1;
      } else {
        n.style.cursor = _.cursor0;
      }
    }
  };
  this.add_event_listener = function () {
    window.addEventListener("mousedown", this.trigger_mousedown, false);
    window.addEventListener("mouseup", this.trigger_mouseup, false);
    window.addEventListener("mousemove", this.trigger_mousemove, false);
    window.addEventListener("keyup", this.trigger_keyup, false);
    window.addEventListener("keydown", this.trigger_keydown, false);
  };
  this.remove_event_listener = function () {
    window.removeEventListener("mousedown", this.trigger_mousedown, false);
    window.removeEventListener("mouseup", this.trigger_mouseup, false);
    window.removeEventListener("mousemove", this.trigger_mousemove, false);
    window.removeEventListener("keyup", this.trigger_keyup, false);
    window.removeEventListener("keydown", this.trigger_keydown, false);
  };
}
function open_twitter() {
  Utils.open_in_new_box(
    "https://twitter.com/intent/tweet?text=I%20survived%20" +
      user.day +
      "%20days%20with%20" +
      user.die.score +
      "%20points%20in%20http%3A%2F%2Fstarve.io%2F%20%23starve.io"
  );
}
function open_facebook() {
  Utils.open_in_new_box(
    "https://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.starve.io%2F&display=popup&ref=plugin&src=like&kid_directed_site=0"
  );
}
function Scoreboard(e, t) {
  this.can = e;
  this.ctx = t;
  var _0x557af1 = this;
  this.enable_interface = false;
  this.sb = {
    id: document.getElementById("scoreboard"),
    style: document.getElementById("scoreboard").style,
    height: 0,
    translate: {
      x: 0,
      y: 0,
    },
    update: function () {
      this.style.left = this.translate.x + "px";
      this.style.top = this.translate.y + "px";
    },
    init: function () {
      this.id.innerHTML =
        '<div style="position:absolute;"> <img src="./img/scoreboard.png"style="width:250px;transform:translate(125px, -80px);"> </img> </div><div><div id="whokilled">' +
        user.die.howdie +
        '</div></div><div class="deco" style="margin-top:35px;"></div><div class="deco"></div><div><div class="stats"> ' +
        LANG[TEXT.DAYS_SURVIVED] +
        " : " +
        user.day +
        '</div><div class="stats"> ' +
        LANG[TEXT.KILL] +
        " : " +
        user.die.kill +
        "</div></div>" +
        '<div id="flexDisplay"><div id="score"> ' +
        LANG[TEXT.SCORE] +
        " : " +
        user.die.score +
        '</div><div id="breadWon"><span id="breadWonInner">0</span><img src="./img/golden-bread.png" style="width:50px;margin-left:-25px;transform: translate(37px, 8px);"></img></div></div><div><div id="points"> ' +
        user.die.bank +
        " " +
        LANG[TEXT.POINTS] +
        '</div></div><div id="shop_points">' +
        LANG[TEXT.KIT_NEXT] +
        '</div><div style="display:inline-block;"><div class="social" id="tttwitter">' +
        LANG[TEXT.TWITTER] +
        '</div><div class="social" id="fffacebook">' +
        LANG[TEXT.FACEBOOK] +
        '</div></div><div id="bbback">' +
        LANG[TEXT.BACK_TO_THE_GAME] +
        "</div>";
      this.style.display = "inline-block";
      document
        .getElementById("tttwitter")
        .addEventListener("mouseup", open_twitter, false);
      document.getElementById("bbback").addEventListener(
        "mouseup",
        function () {
          scoreboard.quit(ui.run);
        },
        false
      );
      document
        .getElementById("fffacebook")
        .addEventListener("mouseup", open_facebook, false);
      this.height = Math.floor(this.id.clientHeight / 2);
      getBreadAndScore();
    },
  };
  var _0x432d5f = 0;
  var _0x3f3bdb = function () {
    _0x557af1.update();
    _0x432d5f++;
    if (_0x432d5f == 30) {
      _0x557af1.update();
      return;
    }
    window.setTimeout(_0x3f3bdb, 33);
  };
  this.quit = function (_0x4da77d) {
    if (_0x557af1.enable_interface === true) {
      _0x557af1.enable_interface = false;
      _0x290942 = _0x4da77d;
      _0x2d55f2 = -1;
      _0x2a4515();
      //refreshAds();
    }
  };
  var _0x290942;
  var _0x2d55f2 = -1;
  var _0x2a4515 = function () {
    _0x557af1.update();
    _0x2d55f2++;
    if (_0x2d55f2 == 30) {
      _0x557af1.stop();
      _0x557af1.sb.style.display = "none";
      _0x290942();
      return;
    }
    window.setTimeout(_0x2a4515, 33);
  };
  this.is_run = false;
  this.stop = function () {
    this.is_run = false;
  };
  this.run = function () {
    check_ads();
    document.getElementById("game_body").style.backgroundColor =
      SPRITE.GROUND[fake_world.time];
    _0x557af1.sb.init();
    ui.trevda.style.display = "inline-block";
    _0x557af1.is_run = true;
    _0x557af1.enable_interface = true;
    _0x2d55f2 = -1;
    _0x432d5f = 0;
    _0x3f3bdb();
  };
  this.update = function () {
    this.sb.translate.x = Math.floor(canw2 - 275);
    this.sb.translate.y = Math.floor(canh2 - this.sb.height - 28);
    ui.trevda.translate.x = this.sb.translate.x - 350;
    ui.trevda.translate.y = this.sb.translate.y + 0;
    ui.trevda.update();
    if (_0x432d5f != 30 || _0x2d55f2 != -1) {
      var _0x2e287b = 0;
      if (_0x432d5f != 30) {
        var _0x2e287b = 1500 / (_0x432d5f + 1) - 50;
      }
      if (_0x2d55f2 != -1) {
        var _0x2e287b = -(1750 / (30 - _0x2d55f2 + 1) - 48);
      }
      this.sb.translate.y -= _0x2e287b;
    }
    this.sb.update();
  };
  this.draw = function () {
    draw_fake_world();
    user.alert.draw("#FFF", "#000");
  };
}

!(function () {
  "use strict";
  var _0x305be5 = function () {
    this.init();
  };
  _0x305be5.prototype = {
    init: function () {
      var _0x56a439 = this || _0x53250d;
      return (
        (_0x56a439["_counter"] = 1000),
        (_0x56a439["_codecs"] = {}),
        (_0x56a439["_howls"] = []),
        (_0x56a439["_muted"] = false),
        (_0x56a439["_volume"] = 1),
        (_0x56a439["_canPlayEvent"] = "canplaythrough"),
        (_0x56a439["_navigator"] =
          "undefined" != typeof window && window.navigator
            ? window.navigator
            : null),
        (_0x56a439.masterGain = null),
        (_0x56a439.noAudio = false),
        (_0x56a439.usingWebAudio = true),
        (_0x56a439.autoSuspend = true),
        (_0x56a439.ctx = null),
        (_0x56a439.mobileAutoEnable = true),
        _0x56a439["_setup"](),
        _0x56a439
      );
    },
    volume: function (_0x12ec49) {
      var _0x2c5c78 = this || _0x53250d;
      if (
        ((_0x12ec49 = parseFloat(_0x12ec49)),
        _0x2c5c78.ctx || _0x2c4d6c(),
        void 0 !== _0x12ec49 && _0x12ec49 >= 0 && _0x12ec49 <= 1)
      ) {
        if (((_0x2c5c78["_volume"] = _0x12ec49), _0x2c5c78["_muted"])) {
          return _0x2c5c78;
        }
        _0x2c5c78.usingWebAudio &&
          (_0x2c5c78.masterGain.gain.value = _0x12ec49);
        for (
          var _0x572191 = 0;
          _0x572191 < _0x2c5c78["_howls"].length;
          _0x572191++
        ) {
          if (!_0x2c5c78["_howls"][_0x572191]["_webAudio"]) {
            for (
              var _0x4d6548 = _0x2c5c78["_howls"][_0x572191]["_getSoundIds"](),
                _0x4a7da6 = 0;
              _0x4a7da6 < _0x4d6548.length;
              _0x4a7da6++
            ) {
              var _0x4ff840 = _0x2c5c78["_howls"][_0x572191]["_soundById"](
                _0x4d6548[_0x4a7da6]
              );
              _0x4ff840 &&
                _0x4ff840["_node"] &&
                (_0x4ff840["_node"].volume = _0x4ff840["_volume"] * _0x12ec49);
            }
          }
        }
        return _0x2c5c78;
      }
      return _0x2c5c78["_volume"];
    },
    mute: function (_0x446eb3) {
      var _0xb218c8 = this || _0x53250d;
      _0xb218c8.ctx || _0x2c4d6c();
      _0xb218c8["_muted"] = _0x446eb3;
      _0xb218c8.usingWebAudio &&
        (_0xb218c8.masterGain.gain.value = _0x446eb3
          ? 0
          : _0xb218c8["_volume"]);
      for (
        var _0x3e44e0 = 0;
        _0x3e44e0 < _0xb218c8["_howls"].length;
        _0x3e44e0++
      ) {
        if (!_0xb218c8["_howls"][_0x3e44e0]["_webAudio"]) {
          for (
            var _0xd438f0 = _0xb218c8["_howls"][_0x3e44e0]["_getSoundIds"](),
              _0x2710b9 = 0;
            _0x2710b9 < _0xd438f0.length;
            _0x2710b9++
          ) {
            var _0x109dd6 = _0xb218c8["_howls"][_0x3e44e0]["_soundById"](
              _0xd438f0[_0x2710b9]
            );
            _0x109dd6 &&
              _0x109dd6["_node"] &&
              (_0x109dd6["_node"].muted = !!_0x446eb3 || _0x109dd6["_muted"]);
          }
        }
      }
      return _0xb218c8;
    },
    unload: function () {
      for (
        var _0x1c89a8 = this || _0x53250d,
          _0x15dfe1 = _0x1c89a8["_howls"].length - 1;
        _0x15dfe1 >= 0;
        _0x15dfe1--
      ) {
        _0x1c89a8["_howls"][_0x15dfe1].unload();
      }
      return (
        _0x1c89a8.usingWebAudio &&
          _0x1c89a8.ctx &&
          void 0 !== _0x1c89a8.ctx.close &&
          (_0x1c89a8.ctx.close(), (_0x1c89a8.ctx = null), _0x2c4d6c()),
        _0x1c89a8
      );
    },
    codecs: function (_0x135332) {
      return (this || _0x53250d)["_codecs"][_0x135332.replace(/^x-/, "")];
    },
    _setup: function () {
      var _0xab9aad = this || _0x53250d;
      if (
        ((_0xab9aad.state = _0xab9aad.ctx
          ? _0xab9aad.ctx.state || "running"
          : "running"),
        _0xab9aad["_autoSuspend"](),
        !_0xab9aad.usingWebAudio)
      ) {
        if ("undefined" != typeof Audio) {
          try {
            var _0x2f148e = new Audio();
            void 0 === _0x2f148e.oncanplaythrough &&
              (_0xab9aad["_canPlayEvent"] = "canplay");
          } catch (_0x1d47a8) {
            _0xab9aad.noAudio = true;
          }
        } else {
          _0xab9aad.noAudio = true;
        }
      }
      try {
        var _0x2f148e = new Audio();
        _0x2f148e.muted && (_0xab9aad.noAudio = true);
      } catch (_0x108849) {}
      return _0xab9aad.noAudio || _0xab9aad["_setupCodecs"](), _0xab9aad;
    },
    _setupCodecs: function () {
      var _0x2f18c1 = this || _0x53250d,
        _0x4c90f9 = null;
      try {
        _0x4c90f9 = "undefined" != typeof Audio ? new Audio() : null;
      } catch (_0x153050) {
        return _0x2f18c1;
      }
      if (!_0x4c90f9 || "function" != typeof _0x4c90f9.canPlayType) {
        return _0x2f18c1;
      }
      var _0x3a19db = _0x4c90f9.canPlayType("audio/mpeg;").replace(/^no$/, ""),
        _0x112c2e =
          _0x2f18c1["_navigator"] &&
          _0x2f18c1["_navigator"].userAgent.match(/OPR\/([0-6].)/g),
        _0x1a362a = _0x112c2e && parseInt(_0x112c2e[0].split("/")[1], 10) < 33;
      return (
        (_0x2f18c1["_codecs"] = {
          mp3: !(
            _0x1a362a ||
            (!_0x3a19db &&
              !_0x4c90f9.canPlayType("audio/mp3;").replace(/^no$/, ""))
          ),
          mpeg: !!_0x3a19db,
          opus: !!_0x4c90f9
            .canPlayType('audio/ogg; codecs="opus"')
            .replace(/^no$/, ""),
          ogg: !!_0x4c90f9
            .canPlayType('audio/ogg; codecs="vorbis"')
            .replace(/^no$/, ""),
          oga: !!_0x4c90f9
            .canPlayType('audio/ogg; codecs="vorbis"')
            .replace(/^no$/, ""),
          wav: !!_0x4c90f9
            .canPlayType('audio/wav; codecs="1"')
            .replace(/^no$/, ""),
          aac: !!_0x4c90f9.canPlayType("audio/aac;").replace(/^no$/, ""),
          caf: !!_0x4c90f9.canPlayType("audio/x-caf;").replace(/^no$/, ""),
          m4a: !!(
            _0x4c90f9.canPlayType("audio/x-m4a;") ||
            _0x4c90f9.canPlayType("audio/m4a;") ||
            _0x4c90f9.canPlayType("audio/aac;")
          ).replace(/^no$/, ""),
          mp4: !!(
            _0x4c90f9.canPlayType("audio/x-mp4;") ||
            _0x4c90f9.canPlayType("audio/mp4;") ||
            _0x4c90f9.canPlayType("audio/aac;")
          ).replace(/^no$/, ""),
          weba: !!_0x4c90f9
            .canPlayType('audio/webm; codecs="vorbis"')
            .replace(/^no$/, ""),
          webm: !!_0x4c90f9
            .canPlayType('audio/webm; codecs="vorbis"')
            .replace(/^no$/, ""),
          dolby: !!_0x4c90f9
            .canPlayType('audio/mp4; codecs="ec-3"')
            .replace(/^no$/, ""),
          flac: !!(
            _0x4c90f9.canPlayType("audio/x-flac;") ||
            _0x4c90f9.canPlayType("audio/flac;")
          ).replace(/^no$/, ""),
        }),
        _0x2f18c1
      );
    },
    _enableMobileAudio: function () {
      var _0x1ddb5c = this || _0x53250d,
        _0x27ba56 = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(
          _0x1ddb5c["_navigator"] && _0x1ddb5c["_navigator"].userAgent
        ),
        _0x18e1a7 = !!(
          "ontouchend" in window ||
          (_0x1ddb5c["_navigator"] &&
            _0x1ddb5c["_navigator"].maxTouchPoints > 0) ||
          (_0x1ddb5c["_navigator"] &&
            _0x1ddb5c["_navigator"].msMaxTouchPoints > 0)
        );
      if (
        !_0x1ddb5c["_mobileEnabled"] &&
        _0x1ddb5c.ctx &&
        (_0x27ba56 || _0x18e1a7)
      ) {
        _0x1ddb5c["_mobileEnabled"] = false;
        _0x1ddb5c["_mobileUnloaded"] ||
          44100 === _0x1ddb5c.ctx.sampleRate ||
          ((_0x1ddb5c["_mobileUnloaded"] = true), _0x1ddb5c.unload());
        _0x1ddb5c["_scratchBuffer"] = _0x1ddb5c.ctx.createBuffer(1, 1, 22050);
        var _0x4631c3 = function () {
          _0x53250d["_autoResume"]();
          var _0xf981b6 = _0x1ddb5c.ctx.createBufferSource();
          _0xf981b6.buffer = _0x1ddb5c["_scratchBuffer"];
          _0xf981b6.connect(_0x1ddb5c.ctx.destination);
          void 0 === _0xf981b6.start ? _0xf981b6.noteOn(0) : _0xf981b6.start(0);
          "function" == typeof _0x1ddb5c.ctx.resume && _0x1ddb5c.ctx.resume();
          _0xf981b6.onended = function () {
            _0xf981b6.disconnect(0);
            _0x1ddb5c["_mobileEnabled"] = true;
            _0x1ddb5c.mobileAutoEnable = false;
            document.removeEventListener("touchend", _0x4631c3, true);
          };
        };
        return (
          document.addEventListener("touchend", _0x4631c3, true), _0x1ddb5c
        );
      }
    },
    _autoSuspend: function () {
      var _0x19c3ae = this;
      if (
        _0x19c3ae.autoSuspend &&
        _0x19c3ae.ctx &&
        void 0 !== _0x19c3ae.ctx.suspend &&
        _0x53250d.usingWebAudio
      ) {
        for (
          var _0x33d44b = 0;
          _0x33d44b < _0x19c3ae["_howls"].length;
          _0x33d44b++
        ) {
          if (_0x19c3ae["_howls"][_0x33d44b]["_webAudio"]) {
            for (
              var _0x4c24fc = 0;
              _0x4c24fc < _0x19c3ae["_howls"][_0x33d44b]["_sounds"].length;
              _0x4c24fc++
            ) {
              if (
                !_0x19c3ae["_howls"][_0x33d44b]["_sounds"][_0x4c24fc]["_paused"]
              ) {
                return _0x19c3ae;
              }
            }
          }
        }
        return (
          _0x19c3ae["_suspendTimer"] &&
            clearTimeout(_0x19c3ae["_suspendTimer"]),
          (_0x19c3ae["_suspendTimer"] = setTimeout(function () {
            _0x19c3ae.autoSuspend &&
              ((_0x19c3ae["_suspendTimer"] = null),
              (_0x19c3ae.state = "suspending"),
              _0x19c3ae.ctx.suspend().then(function () {
                _0x19c3ae.state = "suspended";
                _0x19c3ae["_resumeAfterSuspend"] &&
                  (delete _0x19c3ae["_resumeAfterSuspend"],
                  _0x19c3ae["_autoResume"]());
              }));
          }, 30000)),
          _0x19c3ae
        );
      }
    },
    _autoResume: function () {
      var _0x26e6dc = this;
      if (
        _0x26e6dc.ctx &&
        void 0 !== _0x26e6dc.ctx.resume &&
        _0x53250d.usingWebAudio
      ) {
        return (
          "running" === _0x26e6dc.state && _0x26e6dc["_suspendTimer"]
            ? (clearTimeout(_0x26e6dc["_suspendTimer"]),
              (_0x26e6dc["_suspendTimer"] = null))
            : "suspended" === _0x26e6dc.state
            ? (_0x26e6dc.ctx.resume().then(function () {
                _0x26e6dc.state = "running";
                for (
                  var _0x501f4f = 0;
                  _0x501f4f < _0x26e6dc["_howls"].length;
                  _0x501f4f++
                ) {
                  _0x26e6dc["_howls"][_0x501f4f]["_emit"]("resume");
                }
              }),
              _0x26e6dc["_suspendTimer"] &&
                (clearTimeout(_0x26e6dc["_suspendTimer"]),
                (_0x26e6dc["_suspendTimer"] = null)))
            : "suspending" === _0x26e6dc.state &&
              (_0x26e6dc["_resumeAfterSuspend"] = true),
          _0x26e6dc
        );
      }
    },
  };
  var _0x53250d = new _0x305be5(),
    _0x16c56f = function (_0x48f1bd) {
      var _0x46c6f5 = this;
      if (!_0x48f1bd.src || 0 === _0x48f1bd.src.length) {
        return void console.error(
          "An array of source files must be passed with any new Howl."
        );
      }
      _0x46c6f5.init(_0x48f1bd);
    };
  _0x16c56f.prototype = {
    init: function (_0x33bd67) {
      var _0x251f10 = this;
      return (
        _0x53250d.ctx || _0x2c4d6c(),
        (_0x251f10["_autoplay"] = _0x33bd67.autoplay || false),
        (_0x251f10["_format"] =
          "string" != typeof _0x33bd67.format
            ? _0x33bd67.format
            : [_0x33bd67.format]),
        (_0x251f10["_html5"] = _0x33bd67.html5 || false),
        (_0x251f10["_muted"] = _0x33bd67.mute || false),
        (_0x251f10["_loop"] = _0x33bd67.loop || false),
        (_0x251f10["_pool"] = _0x33bd67.pool || 5),
        (_0x251f10["_preload"] =
          "boolean" != typeof _0x33bd67.preload || _0x33bd67.preload),
        (_0x251f10["_rate"] = _0x33bd67.rate || 1),
        (_0x251f10["_sprite"] = _0x33bd67.sprite || {}),
        (_0x251f10["_src"] =
          "string" != typeof _0x33bd67.src ? _0x33bd67.src : [_0x33bd67.src]),
        (_0x251f10["_volume"] =
          void 0 !== _0x33bd67.volume ? _0x33bd67.volume : 1),
        (_0x251f10["_duration"] = 0),
        (_0x251f10["_state"] = "unloaded"),
        (_0x251f10["_sounds"] = []),
        (_0x251f10["_endTimers"] = {}),
        (_0x251f10["_queue"] = []),
        (_0x251f10["_onend"] = _0x33bd67.onend
          ? [{ fn: _0x33bd67.onend }]
          : []),
        (_0x251f10["_onfade"] = _0x33bd67.onfade
          ? [{ fn: _0x33bd67.onfade }]
          : []),
        (_0x251f10["_onload"] = _0x33bd67.onload
          ? [{ fn: _0x33bd67.onload }]
          : []),
        (_0x251f10["_onloaderror"] = _0x33bd67.onloaderror
          ? [{ fn: _0x33bd67.onloaderror }]
          : []),
        (_0x251f10["_onpause"] = _0x33bd67.onpause
          ? [{ fn: _0x33bd67.onpause }]
          : []),
        (_0x251f10["_onplay"] = _0x33bd67.onplay
          ? [{ fn: _0x33bd67.onplay }]
          : []),
        (_0x251f10["_onstop"] = _0x33bd67.onstop
          ? [{ fn: _0x33bd67.onstop }]
          : []),
        (_0x251f10["_onmute"] = _0x33bd67.onmute
          ? [{ fn: _0x33bd67.onmute }]
          : []),
        (_0x251f10["_onvolume"] = _0x33bd67.onvolume
          ? [{ fn: _0x33bd67.onvolume }]
          : []),
        (_0x251f10["_onrate"] = _0x33bd67.onrate
          ? [{ fn: _0x33bd67.onrate }]
          : []),
        (_0x251f10["_onseek"] = _0x33bd67.onseek
          ? [{ fn: _0x33bd67.onseek }]
          : []),
        (_0x251f10["_onresume"] = []),
        (_0x251f10["_webAudio"] =
          _0x53250d.usingWebAudio && !_0x251f10["_html5"]),
        void 0 !== _0x53250d.ctx &&
          _0x53250d.ctx &&
          _0x53250d.mobileAutoEnable &&
          _0x53250d["_enableMobileAudio"](),
        _0x53250d["_howls"].push(_0x251f10),
        _0x251f10["_autoplay"] &&
          _0x251f10["_queue"].push({
            event: "play",
            action: function () {
              _0x251f10.play();
            },
          }),
        _0x251f10["_preload"] && _0x251f10.load(),
        _0x251f10
      );
    },
    load: function () {
      var _0x2e5c19 = this,
        _0x4dffe9 = null;
      if (_0x53250d.noAudio) {
        return void _0x2e5c19["_emit"]("loaderror", null, "No audio support.");
      }
      "string" == typeof _0x2e5c19["_src"] &&
        (_0x2e5c19["_src"] = [_0x2e5c19["_src"]]);
      for (
        var _0x4f4326 = 0;
        _0x4f4326 < _0x2e5c19["_src"].length;
        _0x4f4326++
      ) {
        var _0x5b44a7, _0x504da4;
        if (_0x2e5c19["_format"] && _0x2e5c19["_format"][_0x4f4326]) {
          _0x5b44a7 = _0x2e5c19["_format"][_0x4f4326];
        } else {
          if ("string" != typeof (_0x504da4 = _0x2e5c19["_src"][_0x4f4326])) {
            _0x2e5c19["_emit"](
              "loaderror",
              null,
              "Non-string found in selected audio sources - ignoring."
            );
            continue;
          }
          _0x5b44a7 = /^data:audio\/([^;,]+);/i.exec(_0x504da4);
          _0x5b44a7 ||
            (_0x5b44a7 = /\.([^.]+)$/.exec(_0x504da4.split("?", 1)[0]));
          _0x5b44a7 && (_0x5b44a7 = _0x5b44a7[1].toLowerCase());
        }
        if (
          (_0x5b44a7 ||
            console.warn(
              'No file extension was found. Consider using the "format" property or specify an extension.'
            ),
          _0x5b44a7 && _0x53250d.codecs(_0x5b44a7))
        ) {
          _0x4dffe9 = _0x2e5c19["_src"][_0x4f4326];
          break;
        }
      }
      return _0x4dffe9
        ? ((_0x2e5c19["_src"] = _0x4dffe9),
          (_0x2e5c19["_state"] = "loading"),
          "https:" === window.location.protocol &&
            "http:" === _0x4dffe9.slice(0, 5) &&
            ((_0x2e5c19["_html5"] = true), (_0x2e5c19["_webAudio"] = false)),
          new _0x180015(_0x2e5c19),
          _0x2e5c19["_webAudio"] && _0x1feee8(_0x2e5c19),
          _0x2e5c19)
        : void _0x2e5c19["_emit"](
            "loaderror",
            null,
            "No codec support for selected audio sources."
          );
    },
    play: function (_0x5d649f, _0x57c040) {
      var _0xdbc912 = this,
        _0xd8c99b = null;
      if ("number" == typeof _0x5d649f) {
        _0xd8c99b = _0x5d649f;
        _0x5d649f = null;
      } else {
        if (
          "string" == typeof _0x5d649f &&
          "loaded" === _0xdbc912["_state"] &&
          !_0xdbc912["_sprite"][_0x5d649f]
        ) {
          return null;
        }
        if (void 0 === _0x5d649f) {
          _0x5d649f = "__default";
          for (
            var _0x4677b2 = 0, _0x1cb37c = 0;
            _0x1cb37c < _0xdbc912["_sounds"].length;
            _0x1cb37c++
          ) {
            _0xdbc912["_sounds"][_0x1cb37c]["_paused"] &&
              !_0xdbc912["_sounds"][_0x1cb37c]["_ended"] &&
              (_0x4677b2++,
              (_0xd8c99b = _0xdbc912["_sounds"][_0x1cb37c]["_id"]));
          }
          1 === _0x4677b2 ? (_0x5d649f = null) : (_0xd8c99b = null);
        }
      }
      var _0x3e35c2 = _0xd8c99b
        ? _0xdbc912["_soundById"](_0xd8c99b)
        : _0xdbc912["_inactiveSound"]();
      if (!_0x3e35c2) {
        return null;
      }
      if (
        (_0xd8c99b &&
          !_0x5d649f &&
          (_0x5d649f = _0x3e35c2["_sprite"] || "__default"),
        "loaded" !== _0xdbc912["_state"])
      ) {
        _0x3e35c2["_sprite"] = _0x5d649f;
        _0x3e35c2["_ended"] = false;
        var _0x4ae9c0 = _0x3e35c2["_id"];
        return (
          _0xdbc912["_queue"].push({
            event: "play",
            action: function () {
              _0xdbc912.play(_0x4ae9c0);
            },
          }),
          _0x4ae9c0
        );
      }
      if (_0xd8c99b && !_0x3e35c2["_paused"]) {
        return (
          _0x57c040 ||
            setTimeout(function () {
              _0xdbc912["_emit"]("play", _0x3e35c2["_id"]);
            }, 0),
          _0x3e35c2["_id"]
        );
      }
      _0xdbc912["_webAudio"] && _0x53250d["_autoResume"]();
      var _0x484b2f = Math.max(
          0,
          _0x3e35c2["_seek"] > 0
            ? _0x3e35c2["_seek"]
            : _0xdbc912["_sprite"][_0x5d649f][0] / 1000
        ),
        _0x269ff6 = Math.max(
          0,
          (_0xdbc912["_sprite"][_0x5d649f][0] +
            _0xdbc912["_sprite"][_0x5d649f][1]) /
            1000 -
            _0x484b2f
        ),
        _0x5b71ac = (1000 * _0x269ff6) / Math.abs(_0x3e35c2["_rate"]);
      _0x3e35c2["_paused"] = false;
      _0x3e35c2["_ended"] = false;
      _0x3e35c2["_sprite"] = _0x5d649f;
      _0x3e35c2["_seek"] = _0x484b2f;
      _0x3e35c2["_start"] = _0xdbc912["_sprite"][_0x5d649f][0] / 1000;
      _0x3e35c2["_stop"] =
        (_0xdbc912["_sprite"][_0x5d649f][0] +
          _0xdbc912["_sprite"][_0x5d649f][1]) /
        1000;
      _0x3e35c2["_loop"] = !(
        !_0x3e35c2["_loop"] && !_0xdbc912["_sprite"][_0x5d649f][2]
      );
      var _0xd6b0d0 = _0x3e35c2["_node"];
      if (_0xdbc912["_webAudio"]) {
        var _0x5519e3 = function () {
            _0xdbc912["_refreshBuffer"](_0x3e35c2);
            var _0x43e487 =
              _0x3e35c2["_muted"] || _0xdbc912["_muted"]
                ? 0
                : _0x3e35c2["_volume"];
            _0xd6b0d0.gain.setValueAtTime(_0x43e487, _0x53250d.ctx.currentTime);
            _0x3e35c2["_playStart"] = _0x53250d.ctx.currentTime;
            void 0 === _0xd6b0d0.bufferSource.start
              ? _0x3e35c2["_loop"]
                ? _0xd6b0d0.bufferSource.noteGrainOn(0, _0x484b2f, 86400)
                : _0xd6b0d0.bufferSource.noteGrainOn(0, _0x484b2f, _0x269ff6)
              : _0x3e35c2["_loop"]
              ? _0xd6b0d0.bufferSource.start(0, _0x484b2f, 86400)
              : _0xd6b0d0.bufferSource.start(0, _0x484b2f, _0x269ff6);
            _0x5b71ac !== 1e400 &&
              (_0xdbc912["_endTimers"][_0x3e35c2["_id"]] = setTimeout(
                _0xdbc912["_ended"].bind(_0xdbc912, _0x3e35c2),
                _0x5b71ac
              ));
            _0x57c040 ||
              setTimeout(function () {
                _0xdbc912["_emit"]("play", _0x3e35c2["_id"]);
              }, 0);
          },
          _0x341fc0 = "running" === _0x53250d.state;
        if ("loaded" === _0xdbc912["_state"] && _0x341fc0) {
          _0x5519e3();
        } else {
          var _0x225591 =
            _0x341fc0 || "loaded" !== _0xdbc912["_state"] ? "load" : "resume";
          _0xdbc912.once(
            _0x225591,
            _0x5519e3,
            _0x341fc0 ? _0x3e35c2["_id"] : null
          );
          _0xdbc912["_clearTimer"](_0x3e35c2["_id"]);
        }
      } else {
        var _0x3317e6 = function () {
            _0xd6b0d0.currentTime = _0x484b2f;
            _0xd6b0d0.muted =
              _0x3e35c2["_muted"] ||
              _0xdbc912["_muted"] ||
              _0x53250d["_muted"] ||
              _0xd6b0d0.muted;
            _0xd6b0d0.volume = _0x3e35c2["_volume"] * _0x53250d.volume();
            _0xd6b0d0.playbackRate = _0x3e35c2["_rate"];
            _0xd6b0d0.play();
            _0x5b71ac !== 1e400 &&
              (_0xdbc912["_endTimers"][_0x3e35c2["_id"]] = setTimeout(
                _0xdbc912["_ended"].bind(_0xdbc912, _0x3e35c2),
                _0x5b71ac
              ));
            _0x57c040 || _0xdbc912["_emit"]("play", _0x3e35c2["_id"]);
          },
          _0xfbbcb5 =
            "loaded" === _0xdbc912["_state"] &&
            ((window && window.ejecta) ||
              (!_0xd6b0d0.readyState && _0x53250d["_navigator"].isCocoonJS));
        if (4 === _0xd6b0d0.readyState || _0xfbbcb5) {
          _0x3317e6();
        } else {
          var _0x538a1f = function () {
            _0x3317e6();
            _0xd6b0d0.removeEventListener(
              _0x53250d["_canPlayEvent"],
              _0x538a1f,
              false
            );
          };
          _0xd6b0d0.addEventListener(
            _0x53250d["_canPlayEvent"],
            _0x538a1f,
            false
          );
          _0xdbc912["_clearTimer"](_0x3e35c2["_id"]);
        }
      }
      return _0x3e35c2["_id"];
    },
    pause: function (_0x45e57) {
      var _0x2f49ce = this;
      if ("loaded" !== _0x2f49ce["_state"]) {
        return (
          _0x2f49ce["_queue"].push({
            event: "pause",
            action: function () {
              _0x2f49ce.pause(_0x45e57);
            },
          }),
          _0x2f49ce
        );
      }
      for (
        var _0x4ed2be = _0x2f49ce["_getSoundIds"](_0x45e57), _0x5737d4 = 0;
        _0x5737d4 < _0x4ed2be.length;
        _0x5737d4++
      ) {
        _0x2f49ce["_clearTimer"](_0x4ed2be[_0x5737d4]);
        var _0x5551f3 = _0x2f49ce["_soundById"](_0x4ed2be[_0x5737d4]);
        if (
          _0x5551f3 &&
          !_0x5551f3["_paused"] &&
          ((_0x5551f3["_seek"] = _0x2f49ce.seek(_0x4ed2be[_0x5737d4])),
          (_0x5551f3["_rateSeek"] = 0),
          (_0x5551f3["_paused"] = true),
          _0x2f49ce["_stopFade"](_0x4ed2be[_0x5737d4]),
          _0x5551f3["_node"])
        ) {
          if (_0x2f49ce["_webAudio"]) {
            if (!_0x5551f3["_node"].bufferSource) {
              continue;
            }
            void 0 === _0x5551f3["_node"].bufferSource.stop
              ? _0x5551f3["_node"].bufferSource.noteOff(0)
              : _0x5551f3["_node"].bufferSource.stop(0);
            _0x2f49ce["_cleanBuffer"](_0x5551f3["_node"]);
          } else {
            (isNaN(_0x5551f3["_node"].duration) &&
              _0x5551f3["_node"].duration !== 1e400) ||
              _0x5551f3["_node"].pause();
          }
        }
        arguments[1] ||
          _0x2f49ce["_emit"]("pause", _0x5551f3 ? _0x5551f3["_id"] : null);
      }
      return _0x2f49ce;
    },
    stop: function (_0x1ac9af, _0x1e3357) {
      var _0x5c11bb = this;
      if ("loaded" !== _0x5c11bb["_state"]) {
        return (
          _0x5c11bb["_queue"].push({
            event: "stop",
            action: function () {
              _0x5c11bb.stop(_0x1ac9af);
            },
          }),
          _0x5c11bb
        );
      }
      for (
        var _0x25c916 = _0x5c11bb["_getSoundIds"](_0x1ac9af), _0x2447b3 = 0;
        _0x2447b3 < _0x25c916.length;
        _0x2447b3++
      ) {
        _0x5c11bb["_clearTimer"](_0x25c916[_0x2447b3]);
        var _0x3a7814 = _0x5c11bb["_soundById"](_0x25c916[_0x2447b3]);
        _0x3a7814 &&
          ((_0x3a7814["_seek"] = _0x3a7814["_start"] || 0),
          (_0x3a7814["_rateSeek"] = 0),
          (_0x3a7814["_paused"] = true),
          (_0x3a7814["_ended"] = true),
          _0x5c11bb["_stopFade"](_0x25c916[_0x2447b3]),
          _0x3a7814["_node"] &&
            (_0x5c11bb["_webAudio"]
              ? _0x3a7814["_node"].bufferSource &&
                (void 0 === _0x3a7814["_node"].bufferSource.stop
                  ? _0x3a7814["_node"].bufferSource.noteOff(0)
                  : _0x3a7814["_node"].bufferSource.stop(0),
                _0x5c11bb["_cleanBuffer"](_0x3a7814["_node"]))
              : (isNaN(_0x3a7814["_node"].duration) &&
                  _0x3a7814["_node"].duration !== 1e400) ||
                ((_0x3a7814["_node"].currentTime = _0x3a7814["_start"] || 0),
                _0x3a7814["_node"].pause())),
          _0x1e3357 || _0x5c11bb["_emit"]("stop", _0x3a7814["_id"]));
      }
      return _0x5c11bb;
    },
    mute: function (_0x3ac0bc, _0x4a4bfc) {
      var _0x2dc937 = this;
      if ("loaded" !== _0x2dc937["_state"]) {
        return (
          _0x2dc937["_queue"].push({
            event: "mute",
            action: function () {
              _0x2dc937.mute(_0x3ac0bc, _0x4a4bfc);
            },
          }),
          _0x2dc937
        );
      }
      if (void 0 === _0x4a4bfc) {
        if ("boolean" != typeof _0x3ac0bc) {
          return _0x2dc937["_muted"];
        }
        _0x2dc937["_muted"] = _0x3ac0bc;
      }
      for (
        var _0x446a9c = _0x2dc937["_getSoundIds"](_0x4a4bfc), _0x34f825 = 0;
        _0x34f825 < _0x446a9c.length;
        _0x34f825++
      ) {
        var _0x3be975 = _0x2dc937["_soundById"](_0x446a9c[_0x34f825]);
        _0x3be975 &&
          ((_0x3be975["_muted"] = _0x3ac0bc),
          _0x2dc937["_webAudio"] && _0x3be975["_node"]
            ? _0x3be975["_node"].gain.setValueAtTime(
                _0x3ac0bc ? 0 : _0x3be975["_volume"],
                _0x53250d.ctx.currentTime
              )
            : _0x3be975["_node"] &&
              (_0x3be975["_node"].muted = !!_0x53250d["_muted"] || _0x3ac0bc),
          _0x2dc937["_emit"]("mute", _0x3be975["_id"]));
      }
      return _0x2dc937;
    },
    volume: function () {
      var _0x1c0f84,
        _0x199e98,
        _0x3fa09b = this,
        _0xd122c3 = arguments;
      if (0 === _0xd122c3.length) {
        return _0x3fa09b["_volume"];
      }
      if (
        1 === _0xd122c3.length ||
        (2 === _0xd122c3.length && void 0 === _0xd122c3[1])
      ) {
        _0x3fa09b["_getSoundIds"]().indexOf(_0xd122c3[0]) >= 0
          ? (_0x199e98 = parseInt(_0xd122c3[0], 10))
          : (_0x1c0f84 = parseFloat(_0xd122c3[0]));
      } else {
        _0xd122c3.length >= 2 &&
          ((_0x1c0f84 = parseFloat(_0xd122c3[0])),
          (_0x199e98 = parseInt(_0xd122c3[1], 10)));
      }
      var _0x1f8b9a;
      if (!(void 0 !== _0x1c0f84 && _0x1c0f84 >= 0 && _0x1c0f84 <= 1)) {
        return (
          (_0x1f8b9a = _0x199e98
            ? _0x3fa09b["_soundById"](_0x199e98)
            : _0x3fa09b["_sounds"][0]),
          _0x1f8b9a ? _0x1f8b9a["_volume"] : 0
        );
      }
      if ("loaded" !== _0x3fa09b["_state"]) {
        return (
          _0x3fa09b["_queue"].push({
            event: "volume",
            action: function () {
              _0x3fa09b.volume.apply(_0x3fa09b, _0xd122c3);
            },
          }),
          _0x3fa09b
        );
      }
      void 0 === _0x199e98 && (_0x3fa09b["_volume"] = _0x1c0f84);
      _0x199e98 = _0x3fa09b["_getSoundIds"](_0x199e98);
      for (var _0x3c6392 = 0; _0x3c6392 < _0x199e98.length; _0x3c6392++) {
        (_0x1f8b9a = _0x3fa09b["_soundById"](_0x199e98[_0x3c6392])) &&
          ((_0x1f8b9a["_volume"] = _0x1c0f84),
          _0xd122c3[2] || _0x3fa09b["_stopFade"](_0x199e98[_0x3c6392]),
          _0x3fa09b["_webAudio"] && _0x1f8b9a["_node"] && !_0x1f8b9a["_muted"]
            ? _0x1f8b9a["_node"].gain.setValueAtTime(
                _0x1c0f84,
                _0x53250d.ctx.currentTime
              )
            : _0x1f8b9a["_node"] &&
              !_0x1f8b9a["_muted"] &&
              (_0x1f8b9a["_node"].volume = _0x1c0f84 * _0x53250d.volume()),
          _0x3fa09b["_emit"]("volume", _0x1f8b9a["_id"]));
      }
      return _0x3fa09b;
    },
    fade: function (_0x320740, _0x1af600, _0x3db133, _0x756c6c) {
      var _0x305ed9 = this,
        _0x29edeb = Math.abs(_0x320740 - _0x1af600),
        _0x41dd11 = _0x320740 > _0x1af600 ? "out" : "in",
        _0x14516f = _0x29edeb / 0.01,
        _0x1f07f4 = _0x14516f > 0 ? _0x3db133 / _0x14516f : _0x3db133;
      if (
        (_0x1f07f4 < 4 &&
          ((_0x14516f = Math.ceil(_0x14516f / (4 / _0x1f07f4))),
          (_0x1f07f4 = 4)),
        "loaded" !== _0x305ed9["_state"])
      ) {
        return (
          _0x305ed9["_queue"].push({
            event: "fade",
            action: function () {
              _0x305ed9.fade(_0x320740, _0x1af600, _0x3db133, _0x756c6c);
            },
          }),
          _0x305ed9
        );
      }
      _0x305ed9.volume(_0x320740, _0x756c6c);
      for (
        var _0x53eac0 = _0x305ed9["_getSoundIds"](_0x756c6c), _0x13d649 = 0;
        _0x13d649 < _0x53eac0.length;
        _0x13d649++
      ) {
        var _0x41ada2 = _0x305ed9["_soundById"](_0x53eac0[_0x13d649]);
        if (_0x41ada2) {
          if (
            (_0x756c6c || _0x305ed9["_stopFade"](_0x53eac0[_0x13d649]),
            _0x305ed9["_webAudio"] && !_0x41ada2["_muted"])
          ) {
            var _0x1b56ee = _0x53250d.ctx.currentTime,
              _0x4ac451 = _0x1b56ee + _0x3db133 / 1000;
            _0x41ada2["_volume"] = _0x320740;
            _0x41ada2["_node"].gain.setValueAtTime(_0x320740, _0x1b56ee);
            _0x41ada2["_node"].gain.linearRampToValueAtTime(
              _0x1af600,
              _0x4ac451
            );
          }
          var _0x3c80bb = _0x320740;
          _0x41ada2["_interval"] = setInterval(
            function (_0x239f68, _0x3920d1) {
              _0x14516f > 0 && (_0x3c80bb += "in" === _0x41dd11 ? 0.01 : -0.01);
              _0x3c80bb = Math.max(0, _0x3c80bb);
              _0x3c80bb = Math.min(1, _0x3c80bb);
              _0x3c80bb = Math.round(100 * _0x3c80bb) / 100;
              _0x305ed9["_webAudio"]
                ? (void 0 === _0x756c6c && (_0x305ed9["_volume"] = _0x3c80bb),
                  (_0x3920d1["_volume"] = _0x3c80bb))
                : _0x305ed9.volume(_0x3c80bb, _0x239f68, true);
              ((_0x1af600 < _0x320740 && _0x3c80bb <= _0x1af600) ||
                (_0x1af600 > _0x320740 && _0x3c80bb >= _0x1af600)) &&
                (clearInterval(_0x3920d1["_interval"]),
                (_0x3920d1["_interval"] = null),
                _0x305ed9.volume(_0x1af600, _0x239f68),
                _0x305ed9["_emit"]("fade", _0x239f68));
            }.bind(_0x305ed9, _0x53eac0[_0x13d649], _0x41ada2),
            _0x1f07f4
          );
        }
      }
      return _0x305ed9;
    },
    _stopFade: function (_0x5c2dd2) {
      var _0x92f9bf = this,
        _0x3c12cf = _0x92f9bf["_soundById"](_0x5c2dd2);
      return (
        _0x3c12cf &&
          _0x3c12cf["_interval"] &&
          (_0x92f9bf["_webAudio"] &&
            _0x3c12cf["_node"].gain.cancelScheduledValues(
              _0x53250d.ctx.currentTime
            ),
          clearInterval(_0x3c12cf["_interval"]),
          (_0x3c12cf["_interval"] = null),
          _0x92f9bf["_emit"]("fade", _0x5c2dd2)),
        _0x92f9bf
      );
    },
    loop: function () {
      var _0x2dfd27,
        _0x55b062,
        _0x27bc1c,
        _0x151508 = this,
        _0x529c24 = arguments;
      if (0 === _0x529c24.length) {
        return _0x151508["_loop"];
      }
      if (1 === _0x529c24.length) {
        if ("boolean" != typeof _0x529c24[0]) {
          return (
            !!(_0x27bc1c = _0x151508["_soundById"](
              parseInt(_0x529c24[0], 10)
            )) && _0x27bc1c["_loop"]
          );
        }
        _0x2dfd27 = _0x529c24[0];
        _0x151508["_loop"] = _0x2dfd27;
      } else {
        2 === _0x529c24.length &&
          ((_0x2dfd27 = _0x529c24[0]),
          (_0x55b062 = parseInt(_0x529c24[1], 10)));
      }
      for (
        var _0x16c8f6 = _0x151508["_getSoundIds"](_0x55b062), _0x4199a7 = 0;
        _0x4199a7 < _0x16c8f6.length;
        _0x4199a7++
      ) {
        (_0x27bc1c = _0x151508["_soundById"](_0x16c8f6[_0x4199a7])) &&
          ((_0x27bc1c["_loop"] = _0x2dfd27),
          _0x151508["_webAudio"] &&
            _0x27bc1c["_node"] &&
            _0x27bc1c["_node"].bufferSource &&
            ((_0x27bc1c["_node"].bufferSource.loop = _0x2dfd27),
            _0x2dfd27 &&
              ((_0x27bc1c["_node"].bufferSource.loopStart =
                _0x27bc1c["_start"] || 0),
              (_0x27bc1c["_node"].bufferSource.loopEnd = _0x27bc1c["_stop"]))));
      }
      return _0x151508;
    },
    rate: function () {
      var _0x5b1fe9,
        _0x459fcf,
        _0x3f8820 = this,
        _0xd75ba5 = arguments;
      if (0 === _0xd75ba5.length) {
        _0x459fcf = _0x3f8820["_sounds"][0]["_id"];
      } else {
        if (1 === _0xd75ba5.length) {
          var _0x13d312 = _0x3f8820["_getSoundIds"](),
            _0x223b1d = _0x13d312.indexOf(_0xd75ba5[0]);
          _0x223b1d >= 0
            ? (_0x459fcf = parseInt(_0xd75ba5[0], 10))
            : (_0x5b1fe9 = parseFloat(_0xd75ba5[0]));
        } else {
          2 === _0xd75ba5.length &&
            ((_0x5b1fe9 = parseFloat(_0xd75ba5[0])),
            (_0x459fcf = parseInt(_0xd75ba5[1], 10)));
        }
      }
      var _0xab5dd9;
      if ("number" != typeof _0x5b1fe9) {
        return (
          (_0xab5dd9 = _0x3f8820["_soundById"](_0x459fcf)),
          _0xab5dd9 ? _0xab5dd9["_rate"] : _0x3f8820["_rate"]
        );
      }
      if ("loaded" !== _0x3f8820["_state"]) {
        return (
          _0x3f8820["_queue"].push({
            event: "rate",
            action: function () {
              _0x3f8820.rate.apply(_0x3f8820, _0xd75ba5);
            },
          }),
          _0x3f8820
        );
      }
      void 0 === _0x459fcf && (_0x3f8820["_rate"] = _0x5b1fe9);
      _0x459fcf = _0x3f8820["_getSoundIds"](_0x459fcf);
      for (var _0x322ba5 = 0; _0x322ba5 < _0x459fcf.length; _0x322ba5++) {
        if ((_0xab5dd9 = _0x3f8820["_soundById"](_0x459fcf[_0x322ba5]))) {
          _0xab5dd9["_rateSeek"] = _0x3f8820.seek(_0x459fcf[_0x322ba5]);
          _0xab5dd9["_playStart"] = _0x3f8820["_webAudio"]
            ? _0x53250d.ctx.currentTime
            : _0xab5dd9["_playStart"];
          _0xab5dd9["_rate"] = _0x5b1fe9;
          _0x3f8820["_webAudio"] &&
          _0xab5dd9["_node"] &&
          _0xab5dd9["_node"].bufferSource
            ? (_0xab5dd9["_node"].bufferSource.playbackRate.value = _0x5b1fe9)
            : _0xab5dd9["_node"] &&
              (_0xab5dd9["_node"].playbackRate = _0x5b1fe9);
          var _0xbb4c25 = _0x3f8820.seek(_0x459fcf[_0x322ba5]),
            _0x4aee15 =
              (_0x3f8820["_sprite"][_0xab5dd9["_sprite"]][0] +
                _0x3f8820["_sprite"][_0xab5dd9["_sprite"]][1]) /
                1000 -
              _0xbb4c25,
            _0x1ce7c2 = (1000 * _0x4aee15) / Math.abs(_0xab5dd9["_rate"]);
          (!_0x3f8820["_endTimers"][_0x459fcf[_0x322ba5]] &&
            _0xab5dd9["_paused"]) ||
            (_0x3f8820["_clearTimer"](_0x459fcf[_0x322ba5]),
            (_0x3f8820["_endTimers"][_0x459fcf[_0x322ba5]] = setTimeout(
              _0x3f8820["_ended"].bind(_0x3f8820, _0xab5dd9),
              _0x1ce7c2
            )));
          _0x3f8820["_emit"]("rate", _0xab5dd9["_id"]);
        }
      }
      return _0x3f8820;
    },
    seek: function () {
      var _0x85d4c,
        _0xbe6c3f,
        _0x3c1095 = this,
        _0x4046ca = arguments;
      if (0 === _0x4046ca.length) {
        _0xbe6c3f = _0x3c1095["_sounds"][0]["_id"];
      } else {
        if (1 === _0x4046ca.length) {
          var _0x4b599c = _0x3c1095["_getSoundIds"](),
            _0x2ab30e = _0x4b599c.indexOf(_0x4046ca[0]);
          _0x2ab30e >= 0
            ? (_0xbe6c3f = parseInt(_0x4046ca[0], 10))
            : ((_0xbe6c3f = _0x3c1095["_sounds"][0]["_id"]),
              (_0x85d4c = parseFloat(_0x4046ca[0])));
        } else {
          2 === _0x4046ca.length &&
            ((_0x85d4c = parseFloat(_0x4046ca[0])),
            (_0xbe6c3f = parseInt(_0x4046ca[1], 10)));
        }
      }
      if (void 0 === _0xbe6c3f) {
        return _0x3c1095;
      }
      if ("loaded" !== _0x3c1095["_state"]) {
        return (
          _0x3c1095["_queue"].push({
            event: "seek",
            action: function () {
              _0x3c1095.seek.apply(_0x3c1095, _0x4046ca);
            },
          }),
          _0x3c1095
        );
      }
      var _0x4ef801 = _0x3c1095["_soundById"](_0xbe6c3f);
      if (_0x4ef801) {
        if (!("number" == typeof _0x85d4c && _0x85d4c >= 0)) {
          if (_0x3c1095["_webAudio"]) {
            var _0x738ac5 = _0x3c1095.playing(_0xbe6c3f)
                ? _0x53250d.ctx.currentTime - _0x4ef801["_playStart"]
                : 0,
              _0x3a3ba9 = _0x4ef801["_rateSeek"]
                ? _0x4ef801["_rateSeek"] - _0x4ef801["_seek"]
                : 0;
            return (
              _0x4ef801["_seek"] +
              (_0x3a3ba9 + _0x738ac5 * Math.abs(_0x4ef801["_rate"]))
            );
          }
          return _0x4ef801["_node"].currentTime;
        }
        var _0x42c4a7 = _0x3c1095.playing(_0xbe6c3f);
        _0x42c4a7 && _0x3c1095.pause(_0xbe6c3f, true);
        _0x4ef801["_seek"] = _0x85d4c;
        _0x4ef801["_ended"] = false;
        _0x3c1095["_clearTimer"](_0xbe6c3f);
        _0x42c4a7 && _0x3c1095.play(_0xbe6c3f, true);
        !_0x3c1095["_webAudio"] &&
          _0x4ef801["_node"] &&
          (_0x4ef801["_node"].currentTime = _0x85d4c);
        _0x3c1095["_emit"]("seek", _0xbe6c3f);
      }
      return _0x3c1095;
    },
    playing: function (_0x59a48b) {
      var _0x2c611b = this;
      if ("number" == typeof _0x59a48b) {
        var _0x2e02b5 = _0x2c611b["_soundById"](_0x59a48b);
        return !!_0x2e02b5 && !_0x2e02b5["_paused"];
      }
      for (
        var _0x308da2 = 0;
        _0x308da2 < _0x2c611b["_sounds"].length;
        _0x308da2++
      ) {
        if (!_0x2c611b["_sounds"][_0x308da2]["_paused"]) {
          return true;
        }
      }
      return false;
    },
    duration: function (_0x97e8f0) {
      var _0x223fdd = this,
        _0x446a9d = _0x223fdd["_duration"],
        _0xf976be = _0x223fdd["_soundById"](_0x97e8f0);
      return (
        _0xf976be &&
          (_0x446a9d = _0x223fdd["_sprite"][_0xf976be["_sprite"]][1] / 1000),
        _0x446a9d
      );
    },
    state: function () {
      return this["_state"];
    },
    unload: function () {
      for (
        var _0x2214c8 = this, _0x3be47b = _0x2214c8["_sounds"], _0x242d29 = 0;
        _0x242d29 < _0x3be47b.length;
        _0x242d29++
      ) {
        (_0x3be47b[_0x242d29]["_paused"] ||
          _0x2214c8.stop(_0x3be47b[_0x242d29]["_id"]),
        !_0x2214c8["_webAudio"]) &&
          (/MSIE |Trident\//.test(
            _0x53250d["_navigator"] && _0x53250d["_navigator"].userAgent
          ) ||
            (_0x3be47b[_0x242d29]["_node"].src =
              "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),
          _0x3be47b[_0x242d29]["_node"].removeEventListener(
            "error",
            _0x3be47b[_0x242d29]["_errorFn"],
            false
          ),
          _0x3be47b[_0x242d29]["_node"].removeEventListener(
            _0x53250d["_canPlayEvent"],
            _0x3be47b[_0x242d29]["_loadFn"],
            false
          ));
        delete _0x3be47b[_0x242d29]["_node"];
        _0x2214c8["_clearTimer"](_0x3be47b[_0x242d29]["_id"]);
        var _0x21a851 = _0x53250d["_howls"].indexOf(_0x2214c8);
        _0x21a851 >= 0 && _0x53250d["_howls"].splice(_0x21a851, 1);
      }
      var _0x3cb5c4 = true;
      for (_0x242d29 = 0; _0x242d29 < _0x53250d["_howls"].length; _0x242d29++) {
        if (_0x53250d["_howls"][_0x242d29]["_src"] === _0x2214c8["_src"]) {
          _0x3cb5c4 = false;
          break;
        }
      }
      return (
        _0x1a5fd4 && _0x3cb5c4 && delete _0x1a5fd4[_0x2214c8["_src"]],
        (_0x53250d.noAudio = false),
        (_0x2214c8["_state"] = "unloaded"),
        (_0x2214c8["_sounds"] = []),
        (_0x2214c8 = null),
        null
      );
    },
    on: function (_0x10a3fc, _0x4303a6, _0x160022, _0x22c5d3) {
      var _0x431656 = this,
        _0x2190ba = _0x431656["_on" + _0x10a3fc];
      return (
        "function" == typeof _0x4303a6 &&
          _0x2190ba.push(
            _0x22c5d3
              ? {
                  id: _0x160022,
                  fn: _0x4303a6,
                  once: _0x22c5d3,
                }
              : {
                  id: _0x160022,
                  fn: _0x4303a6,
                }
          ),
        _0x431656
      );
    },
    off: function (_0x28185a, _0x382d5f, _0x8fca7b) {
      var _0x3293ea = this,
        _0x2a8cf7 = _0x3293ea["_on" + _0x28185a],
        _0x55eafb = 0;
      if (
        ("number" == typeof _0x382d5f &&
          ((_0x8fca7b = _0x382d5f), (_0x382d5f = null)),
        _0x382d5f || _0x8fca7b)
      ) {
        for (_0x55eafb = 0; _0x55eafb < _0x2a8cf7.length; _0x55eafb++) {
          var _0x4b25ff = _0x8fca7b === _0x2a8cf7[_0x55eafb].id;
          if (
            (_0x382d5f === _0x2a8cf7[_0x55eafb].fn && _0x4b25ff) ||
            (!_0x382d5f && _0x4b25ff)
          ) {
            _0x2a8cf7.splice(_0x55eafb, 1);
            break;
          }
        }
      } else {
        if (_0x28185a) {
          _0x3293ea["_on" + _0x28185a] = [];
        } else {
          var _0x205ec7 = Object.keys(_0x3293ea);
          for (_0x55eafb = 0; _0x55eafb < _0x205ec7.length; _0x55eafb++) {
            0 === _0x205ec7[_0x55eafb].indexOf("_on") &&
              Array.isArray(_0x3293ea[_0x205ec7[_0x55eafb]]) &&
              (_0x3293ea[_0x205ec7[_0x55eafb]] = []);
          }
        }
      }
      return _0x3293ea;
    },
    once: function (_0x135eea, _0x271c51, _0x4e7a81) {
      var _0x4c216c = this;
      return _0x4c216c.on(_0x135eea, _0x271c51, _0x4e7a81, 1), _0x4c216c;
    },
    _emit: function (_0x46dcb2, _0x4a43c5, _0x10ae3c) {
      for (
        var _0x294964 = this,
          _0x513e76 = _0x294964["_on" + _0x46dcb2],
          _0x46a929 = _0x513e76.length - 1;
        _0x46a929 >= 0;
        _0x46a929--
      ) {
        (_0x513e76[_0x46a929].id &&
          _0x513e76[_0x46a929].id !== _0x4a43c5 &&
          "load" !== _0x46dcb2) ||
          (setTimeout(
            function (_0x474c65) {
              _0x474c65.call(this, _0x4a43c5, _0x10ae3c);
            }.bind(_0x294964, _0x513e76[_0x46a929].fn),
            0
          ),
          _0x513e76[_0x46a929].once &&
            _0x294964.off(
              _0x46dcb2,
              _0x513e76[_0x46a929].fn,
              _0x513e76[_0x46a929].id
            ));
      }
      return _0x294964;
    },
    _loadQueue: function () {
      var _0x4d7caa = this;
      if (_0x4d7caa["_queue"].length > 0) {
        var _0x406df4 = _0x4d7caa["_queue"][0];
        _0x4d7caa.once(_0x406df4.event, function () {
          _0x4d7caa["_queue"].shift();
          _0x4d7caa["_loadQueue"]();
        });
        _0x406df4.action();
      }
      return _0x4d7caa;
    },
    _ended: function (_0x44f986) {
      var _0x6efb8f = this,
        _0x50b5e5 = _0x44f986["_sprite"];
      if (
        !_0x6efb8f["_webAudio"] &&
        _0x6efb8f["_node"] &&
        !_0x6efb8f["_node"].ended
      ) {
        return (
          setTimeout(_0x6efb8f["_ended"].bind(_0x6efb8f, _0x44f986), 100),
          _0x6efb8f
        );
      }
      var _0x3dfbdb = !(
        !_0x44f986["_loop"] && !_0x6efb8f["_sprite"][_0x50b5e5][2]
      );
      if (
        (_0x6efb8f["_emit"]("end", _0x44f986["_id"]),
        !_0x6efb8f["_webAudio"] &&
          _0x3dfbdb &&
          _0x6efb8f.stop(_0x44f986["_id"], true).play(_0x44f986["_id"]),
        _0x6efb8f["_webAudio"] && _0x3dfbdb)
      ) {
        _0x6efb8f["_emit"]("play", _0x44f986["_id"]);
        _0x44f986["_seek"] = _0x44f986["_start"] || 0;
        _0x44f986["_rateSeek"] = 0;
        _0x44f986["_playStart"] = _0x53250d.ctx.currentTime;
        var _0x56fc0c =
          (1000 * (_0x44f986["_stop"] - _0x44f986["_start"])) /
          Math.abs(_0x44f986["_rate"]);
        _0x6efb8f["_endTimers"][_0x44f986["_id"]] = setTimeout(
          _0x6efb8f["_ended"].bind(_0x6efb8f, _0x44f986),
          _0x56fc0c
        );
      }
      return (
        _0x6efb8f["_webAudio"] &&
          !_0x3dfbdb &&
          ((_0x44f986["_paused"] = true),
          (_0x44f986["_ended"] = true),
          (_0x44f986["_seek"] = _0x44f986["_start"] || 0),
          (_0x44f986["_rateSeek"] = 0),
          _0x6efb8f["_clearTimer"](_0x44f986["_id"]),
          _0x6efb8f["_cleanBuffer"](_0x44f986["_node"]),
          _0x53250d["_autoSuspend"]()),
        _0x6efb8f["_webAudio"] || _0x3dfbdb || _0x6efb8f.stop(_0x44f986["_id"]),
        _0x6efb8f
      );
    },
    _clearTimer: function (_0x2363a1) {
      var _0x3c7e03 = this;
      return (
        _0x3c7e03["_endTimers"][_0x2363a1] &&
          (clearTimeout(_0x3c7e03["_endTimers"][_0x2363a1]),
          delete _0x3c7e03["_endTimers"][_0x2363a1]),
        _0x3c7e03
      );
    },
    _soundById: function (_0x53d7c5) {
      for (
        var _0x3b56c8 = this, _0x3db309 = 0;
        _0x3db309 < _0x3b56c8["_sounds"].length;
        _0x3db309++
      ) {
        if (_0x53d7c5 === _0x3b56c8["_sounds"][_0x3db309]["_id"]) {
          return _0x3b56c8["_sounds"][_0x3db309];
        }
      }
      return null;
    },
    _inactiveSound: function () {
      var _0x3331bc = this;
      _0x3331bc["_drain"]();
      for (
        var _0x3159e3 = 0;
        _0x3159e3 < _0x3331bc["_sounds"].length;
        _0x3159e3++
      ) {
        if (_0x3331bc["_sounds"][_0x3159e3]["_ended"]) {
          return _0x3331bc["_sounds"][_0x3159e3].reset();
        }
      }
      return new _0x180015(_0x3331bc);
    },
    _drain: function () {
      var _0x11aae7 = this,
        _0x2e0a04 = _0x11aae7["_pool"],
        _0x10d041 = 0,
        _0x1761de = 0;
      if (!(_0x11aae7["_sounds"].length < _0x2e0a04)) {
        for (
          _0x1761de = 0;
          _0x1761de < _0x11aae7["_sounds"].length;
          _0x1761de++
        ) {
          _0x11aae7["_sounds"][_0x1761de]["_ended"] && _0x10d041++;
        }
        for (
          _0x1761de = _0x11aae7["_sounds"].length - 1;
          _0x1761de >= 0;
          _0x1761de--
        ) {
          if (_0x10d041 <= _0x2e0a04) {
            return;
          }
          _0x11aae7["_sounds"][_0x1761de]["_ended"] &&
            (_0x11aae7["_webAudio"] &&
              _0x11aae7["_sounds"][_0x1761de]["_node"] &&
              _0x11aae7["_sounds"][_0x1761de]["_node"].disconnect(0),
            _0x11aae7["_sounds"].splice(_0x1761de, 1),
            _0x10d041--);
        }
      }
    },
    _getSoundIds: function (_0x5e6467) {
      var _0x3c60be = this;
      if (void 0 === _0x5e6467) {
        for (
          var _0x4a7fbe = [], _0x1cd379 = 0;
          _0x1cd379 < _0x3c60be["_sounds"].length;
          _0x1cd379++
        ) {
          _0x4a7fbe.push(_0x3c60be["_sounds"][_0x1cd379]["_id"]);
        }
        return _0x4a7fbe;
      }
      return [_0x5e6467];
    },
    _refreshBuffer: function (_0x5e35b0) {
      var _0x2eb739 = this;
      return (
        (_0x5e35b0["_node"].bufferSource = _0x53250d.ctx.createBufferSource()),
        (_0x5e35b0["_node"].bufferSource.buffer = _0x1a5fd4[_0x2eb739["_src"]]),
        _0x5e35b0["_panner"]
          ? _0x5e35b0["_node"].bufferSource.connect(_0x5e35b0["_panner"])
          : _0x5e35b0["_node"].bufferSource.connect(_0x5e35b0["_node"]),
        (_0x5e35b0["_node"].bufferSource.loop = _0x5e35b0["_loop"]),
        _0x5e35b0["_loop"] &&
          ((_0x5e35b0["_node"].bufferSource.loopStart =
            _0x5e35b0["_start"] || 0),
          (_0x5e35b0["_node"].bufferSource.loopEnd = _0x5e35b0["_stop"])),
        (_0x5e35b0["_node"].bufferSource.playbackRate.value =
          _0x5e35b0["_rate"]),
        _0x2eb739
      );
    },
    _cleanBuffer: function (_0x2ad01b) {
      var _0x3f4259 = this;
      if (_0x3f4259["_scratchBuffer"]) {
        _0x2ad01b.bufferSource.onended = null;
        _0x2ad01b.bufferSource.disconnect(0);
        try {
          _0x2ad01b.bufferSource.buffer = _0x3f4259["_scratchBuffer"];
        } catch (_0xb979da) {}
      }
      return (_0x2ad01b.bufferSource = null), _0x3f4259;
    },
  };
  var _0x180015 = function (_0x432b50) {
    this["_parent"] = _0x432b50;
    this.init();
  };
  _0x180015.prototype = {
    init: function () {
      var _0x56e2ff = this,
        _0xb71ad8 = _0x56e2ff["_parent"];
      return (
        (_0x56e2ff["_muted"] = _0xb71ad8["_muted"]),
        (_0x56e2ff["_loop"] = _0xb71ad8["_loop"]),
        (_0x56e2ff["_volume"] = _0xb71ad8["_volume"]),
        (_0x56e2ff["_rate"] = _0xb71ad8["_rate"]),
        (_0x56e2ff["_seek"] = 0),
        (_0x56e2ff["_paused"] = true),
        (_0x56e2ff["_ended"] = true),
        (_0x56e2ff["_sprite"] = "__default"),
        (_0x56e2ff["_id"] = ++_0x53250d["_counter"]),
        _0xb71ad8["_sounds"].push(_0x56e2ff),
        _0x56e2ff.create(),
        _0x56e2ff
      );
    },
    create: function () {
      var _0x66b5a4 = this,
        _0x1b6eb2 = _0x66b5a4["_parent"],
        _0x171e42 =
          _0x53250d["_muted"] ||
          _0x66b5a4["_muted"] ||
          _0x66b5a4["_parent"]["_muted"]
            ? 0
            : _0x66b5a4["_volume"];
      return (
        _0x1b6eb2["_webAudio"]
          ? ((_0x66b5a4["_node"] =
              void 0 === _0x53250d.ctx.createGain
                ? _0x53250d.ctx.createGainNode()
                : _0x53250d.ctx.createGain()),
            _0x66b5a4["_node"].gain.setValueAtTime(
              _0x171e42,
              _0x53250d.ctx.currentTime
            ),
            (_0x66b5a4["_node"].paused = true),
            _0x66b5a4["_node"].connect(_0x53250d.masterGain))
          : ((_0x66b5a4["_node"] = new Audio()),
            (_0x66b5a4["_errorFn"] =
              _0x66b5a4["_errorListener"].bind(_0x66b5a4)),
            _0x66b5a4["_node"].addEventListener(
              "error",
              _0x66b5a4["_errorFn"],
              false
            ),
            (_0x66b5a4["_loadFn"] = _0x66b5a4["_loadListener"].bind(_0x66b5a4)),
            _0x66b5a4["_node"].addEventListener(
              _0x53250d["_canPlayEvent"],
              _0x66b5a4["_loadFn"],
              false
            ),
            (_0x66b5a4["_node"].src = _0x1b6eb2["_src"]),
            (_0x66b5a4["_node"].preload = "auto"),
            (_0x66b5a4["_node"].volume = _0x171e42 * _0x53250d.volume()),
            _0x66b5a4["_node"].load()),
        _0x66b5a4
      );
    },
    reset: function () {
      var _0x2fb6c3 = this,
        _0x4d5894 = _0x2fb6c3["_parent"];
      return (
        (_0x2fb6c3["_muted"] = _0x4d5894["_muted"]),
        (_0x2fb6c3["_loop"] = _0x4d5894["_loop"]),
        (_0x2fb6c3["_volume"] = _0x4d5894["_volume"]),
        (_0x2fb6c3["_rate"] = _0x4d5894["_rate"]),
        (_0x2fb6c3["_seek"] = 0),
        (_0x2fb6c3["_rateSeek"] = 0),
        (_0x2fb6c3["_paused"] = true),
        (_0x2fb6c3["_ended"] = true),
        (_0x2fb6c3["_sprite"] = "__default"),
        (_0x2fb6c3["_id"] = ++_0x53250d["_counter"]),
        _0x2fb6c3
      );
    },
    _errorListener: function () {
      var _0x2de524 = this;
      _0x2de524["_parent"]["_emit"](
        "loaderror",
        _0x2de524["_id"],
        _0x2de524["_node"].error ? _0x2de524["_node"].error.code : 0
      );
      _0x2de524["_node"].removeEventListener(
        "error",
        _0x2de524["_errorFn"],
        false
      );
    },
    _loadListener: function () {
      var _0x123c09 = this,
        _0x502a42 = _0x123c09["_parent"];
      _0x502a42["_duration"] = Math.ceil(10 * _0x123c09["_node"].duration) / 10;
      0 === Object.keys(_0x502a42["_sprite"]).length &&
        (_0x502a42["_sprite"] = {
          __default: [0, 1000 * _0x502a42["_duration"]],
        });
      "loaded" !== _0x502a42["_state"] &&
        ((_0x502a42["_state"] = "loaded"),
        _0x502a42["_emit"]("load"),
        _0x502a42["_loadQueue"]());
      _0x123c09["_node"].removeEventListener(
        _0x53250d["_canPlayEvent"],
        _0x123c09["_loadFn"],
        false
      );
    },
  };
  var _0x1a5fd4 = {},
    _0x1feee8 = function (_0x54cca3) {
      var _0x2ff33e = _0x54cca3["_src"];
      if (_0x1a5fd4[_0x2ff33e]) {
        return (
          (_0x54cca3["_duration"] = _0x1a5fd4[_0x2ff33e].duration),
          void _0x56862a(_0x54cca3)
        );
      }
      if (/^data:[^;]+;base64,/.test(_0x2ff33e)) {
        for (
          var _0x1b1139 = atob(_0x2ff33e.split(",")[1]),
            _0x4845c4 = new Uint8Array(_0x1b1139.length),
            _0x400a05 = 0;
          _0x400a05 < _0x1b1139.length;
          ++_0x400a05
        ) {
          _0x4845c4[_0x400a05] = _0x1b1139.charCodeAt(_0x400a05);
        }
        _0x308703(_0x4845c4.buffer, _0x54cca3);
      } else {
        var _0x124b14 = new XMLHttpRequest();
        _0x124b14.open("GET", _0x2ff33e, true);
        _0x124b14.responseType = "arraybuffer";
        _0x124b14.onload = function () {
          var _0x157ca1 = (_0x124b14.status + "")[0];
          if ("0" !== _0x157ca1 && "2" !== _0x157ca1 && "3" !== _0x157ca1) {
            return void _0x54cca3["_emit"](
              "loaderror",
              null,
              "Failed loading audio file with status: " + _0x124b14.status + "."
            );
          }
          _0x308703(_0x124b14.response, _0x54cca3);
        };
        _0x124b14.onerror = function () {
          _0x54cca3["_webAudio"] &&
            ((_0x54cca3["_html5"] = true),
            (_0x54cca3["_webAudio"] = false),
            (_0x54cca3["_sounds"] = []),
            delete _0x1a5fd4[_0x2ff33e],
            _0x54cca3.load());
        };
        _0x512f32(_0x124b14);
      }
    },
    _0x512f32 = function (_0x3ae683) {
      try {
        _0x3ae683.send();
      } catch (_0x53a63b) {
        _0x3ae683.onerror();
      }
    },
    _0x308703 = function (_0x1e4250, _0x269e82) {
      _0x53250d.ctx.decodeAudioData(
        _0x1e4250,
        function (_0x321882) {
          _0x321882 &&
            _0x269e82["_sounds"].length > 0 &&
            ((_0x1a5fd4[_0x269e82["_src"]] = _0x321882),
            _0x56862a(_0x269e82, _0x321882));
        },
        function () {
          _0x269e82["_emit"]("loaderror", null, "Decoding audio data failed.");
        }
      );
    },
    _0x56862a = function (_0xf76575, _0x4d7100) {
      _0x4d7100 &&
        !_0xf76575["_duration"] &&
        (_0xf76575["_duration"] = _0x4d7100.duration);
      0 === Object.keys(_0xf76575["_sprite"]).length &&
        (_0xf76575["_sprite"] = {
          __default: [0, 1000 * _0xf76575["_duration"]],
        });
      "loaded" !== _0xf76575["_state"] &&
        ((_0xf76575["_state"] = "loaded"),
        _0xf76575["_emit"]("load"),
        _0xf76575["_loadQueue"]());
    },
    _0x2c4d6c = function () {
      try {
        "undefined" != typeof AudioContext
          ? (_0x53250d.ctx = new AudioContext())
          : "undefined" != typeof webkitAudioContext
          ? (_0x53250d.ctx = new webkitAudioContext())
          : (_0x53250d.usingWebAudio = false);
      } catch (_0x526792) {
        _0x53250d.usingWebAudio = false;
      }
      var _0x252f07 = /iP(hone|od|ad)/.test(
          _0x53250d["_navigator"] && _0x53250d["_navigator"].platform
        ),
        _0x174069 =
          _0x53250d["_navigator"] &&
          _0x53250d["_navigator"].appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),
        _0x16f9a9 = _0x174069 ? parseInt(_0x174069[1], 10) : null;
      if (_0x252f07 && _0x16f9a9 && _0x16f9a9 < 9) {
        var _0x1b49a0 = /safari/.test(
          _0x53250d["_navigator"] &&
            _0x53250d["_navigator"].userAgent.toLowerCase()
        );
        ((_0x53250d["_navigator"] &&
          _0x53250d["_navigator"].standalone &&
          !_0x1b49a0) ||
          (_0x53250d["_navigator"] &&
            !_0x53250d["_navigator"].standalone &&
            !_0x1b49a0)) &&
          (_0x53250d.usingWebAudio = false);
      }
      _0x53250d.usingWebAudio &&
        ((_0x53250d.masterGain =
          void 0 === _0x53250d.ctx.createGain
            ? _0x53250d.ctx.createGainNode()
            : _0x53250d.ctx.createGain()),
        (_0x53250d.masterGain.gain.value = _0x53250d["_muted"] ? 0 : 1),
        _0x53250d.masterGain.connect(_0x53250d.ctx.destination));
      _0x53250d["_setup"]();
    };
  "function" == typeof define &&
    define.amd &&
    define([], function () {
      return {
        Howler: _0x53250d,
        Howl: _0x16c56f,
      };
    });
  "undefined" != typeof exports &&
    ((exports.Howler = _0x53250d), (exports.Howl = _0x16c56f));
  "undefined" != typeof window
    ? ((window.HowlerGlobal = _0x305be5),
      (window.Howler = _0x53250d),
      (window.Howl = _0x16c56f),
      (window.Sound = _0x180015))
    : "undefined" != typeof global &&
      ((global.HowlerGlobal = _0x305be5),
      (global.Howler = _0x53250d),
      (global.Howl = _0x16c56f),
      (global.Sound = _0x180015));
})();
!(function () {
  "use strict";
  HowlerGlobal.prototype["_pos"] = [0, 0, 0];
  HowlerGlobal.prototype["_orientation"] = [0, 0, -1, 0, 1, 0];
  HowlerGlobal.prototype.stereo = function (_0x49023c) {
    var _0x4de55f = this;
    if (!_0x4de55f.ctx || !_0x4de55f.ctx.listener) {
      return _0x4de55f;
    }
    for (
      var _0x282f59 = _0x4de55f["_howls"].length - 1;
      _0x282f59 >= 0;
      _0x282f59--
    ) {
      _0x4de55f["_howls"][_0x282f59].stereo(_0x49023c);
    }
    return _0x4de55f;
  };
  HowlerGlobal.prototype.pos = function (_0x6028b6, _0x36f889, _0x597ead) {
    var _0x28efca = this;
    return _0x28efca.ctx && _0x28efca.ctx.listener
      ? ((_0x36f889 =
          "number" != typeof _0x36f889 ? _0x28efca["_pos"][1] : _0x36f889),
        (_0x597ead =
          "number" != typeof _0x597ead ? _0x28efca["_pos"][2] : _0x597ead),
        "number" != typeof _0x6028b6
          ? _0x28efca["_pos"]
          : ((_0x28efca["_pos"] = [_0x6028b6, _0x36f889, _0x597ead]),
            _0x28efca.ctx.listener.setPosition(
              _0x28efca["_pos"][0],
              _0x28efca["_pos"][1],
              _0x28efca["_pos"][2]
            ),
            _0x28efca))
      : _0x28efca;
  };
  HowlerGlobal.prototype.orientation = function (
    _0x4467ae,
    _0x4a8bd8,
    _0x3b82eb,
    _0x4ddae6,
    _0x529f63,
    _0x18b447
  ) {
    var _0x5ce09e = this;
    if (!_0x5ce09e.ctx || !_0x5ce09e.ctx.listener) {
      return _0x5ce09e;
    }
    var _0x2a7902 = _0x5ce09e["_orientation"];
    return (
      (_0x4a8bd8 = "number" != typeof _0x4a8bd8 ? _0x2a7902[1] : _0x4a8bd8),
      (_0x3b82eb = "number" != typeof _0x3b82eb ? _0x2a7902[2] : _0x3b82eb),
      (_0x4ddae6 = "number" != typeof _0x4ddae6 ? _0x2a7902[3] : _0x4ddae6),
      (_0x529f63 = "number" != typeof _0x529f63 ? _0x2a7902[4] : _0x529f63),
      (_0x18b447 = "number" != typeof _0x18b447 ? _0x2a7902[5] : _0x18b447),
      "number" != typeof _0x4467ae
        ? _0x2a7902
        : ((_0x5ce09e["_orientation"] = [
            _0x4467ae,
            _0x4a8bd8,
            _0x3b82eb,
            _0x4ddae6,
            _0x529f63,
            _0x18b447,
          ]),
          _0x5ce09e.ctx.listener.setOrientation(
            _0x4467ae,
            _0x4a8bd8,
            _0x3b82eb,
            _0x4ddae6,
            _0x529f63,
            _0x18b447
          ),
          _0x5ce09e)
    );
  };
  Howl.prototype.init = (function (_0x3cdece) {
    return function (_0x1c0f10) {
      var _0x15b097 = this;
      return (
        (_0x15b097["_orientation"] = _0x1c0f10.orientation || [1, 0, 0]),
        (_0x15b097["_stereo"] = _0x1c0f10.stereo || null),
        (_0x15b097["_pos"] = _0x1c0f10.pos || null),
        (_0x15b097["_pannerAttr"] = {
          coneInnerAngle:
            void 0 !== _0x1c0f10.coneInnerAngle
              ? _0x1c0f10.coneInnerAngle
              : 360,
          coneOuterAngle:
            void 0 !== _0x1c0f10.coneOuterAngle
              ? _0x1c0f10.coneOuterAngle
              : 360,
          coneOuterGain:
            void 0 !== _0x1c0f10.coneOuterGain ? _0x1c0f10.coneOuterGain : 0,
          distanceModel:
            void 0 !== _0x1c0f10.distanceModel
              ? _0x1c0f10.distanceModel
              : "inverse",
          maxDistance:
            void 0 !== _0x1c0f10.maxDistance ? _0x1c0f10.maxDistance : 10000,
          panningModel:
            void 0 !== _0x1c0f10.panningModel ? _0x1c0f10.panningModel : "HRTF",
          refDistance:
            void 0 !== _0x1c0f10.refDistance ? _0x1c0f10.refDistance : 1,
          rolloffFactor:
            void 0 !== _0x1c0f10.rolloffFactor ? _0x1c0f10.rolloffFactor : 1,
        }),
        (_0x15b097["_onstereo"] = _0x1c0f10.onstereo
          ? [{ fn: _0x1c0f10.onstereo }]
          : []),
        (_0x15b097["_onpos"] = _0x1c0f10.onpos
          ? [{ fn: _0x1c0f10.onpos }]
          : []),
        (_0x15b097["_onorientation"] = _0x1c0f10.onorientation
          ? [{ fn: _0x1c0f10.onorientation }]
          : []),
        _0x3cdece.call(this, _0x1c0f10)
      );
    };
  })(Howl.prototype.init);
  Howl.prototype.stereo = function (_0x253044, _0x52bf70) {
    var _0x50a7a1 = this;
    if (!_0x50a7a1["_webAudio"]) {
      return _0x50a7a1;
    }
    if ("loaded" !== _0x50a7a1["_state"]) {
      return (
        _0x50a7a1["_queue"].push({
          event: "stereo",
          action: function () {
            _0x50a7a1.stereo(_0x253044, _0x52bf70);
          },
        }),
        _0x50a7a1
      );
    }
    var _0x10067b =
      void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
    if (void 0 === _0x52bf70) {
      if ("number" != typeof _0x253044) {
        return _0x50a7a1["_stereo"];
      }
      _0x50a7a1["_stereo"] = _0x253044;
      _0x50a7a1["_pos"] = [_0x253044, 0, 0];
    }
    for (
      var _0x1ab117 = _0x50a7a1["_getSoundIds"](_0x52bf70), _0x4c8c48 = 0;
      _0x4c8c48 < _0x1ab117.length;
      _0x4c8c48++
    ) {
      var _0x5289d7 = _0x50a7a1["_soundById"](_0x1ab117[_0x4c8c48]);
      if (_0x5289d7) {
        if ("number" != typeof _0x253044) {
          return _0x5289d7["_stereo"];
        }
        _0x5289d7["_stereo"] = _0x253044;
        _0x5289d7["_pos"] = [_0x253044, 0, 0];
        _0x5289d7["_node"] &&
          ((_0x5289d7["_pannerAttr"].panningModel = "equalpower"),
          (_0x5289d7["_panner"] && _0x5289d7["_panner"].pan) ||
            _0x5266a0(_0x5289d7, _0x10067b),
          "spatial" === _0x10067b
            ? _0x5289d7["_panner"].setPosition(_0x253044, 0, 0)
            : (_0x5289d7["_panner"].pan.value = _0x253044));
        _0x50a7a1["_emit"]("stereo", _0x5289d7["_id"]);
      }
    }
    return _0x50a7a1;
  };
  Howl.prototype.pos = function (_0x16e6b8, _0x16ca31, _0xacb1e6, _0x3ee014) {
    var _0x22efbc = this;
    if (!_0x22efbc["_webAudio"]) {
      return _0x22efbc;
    }
    if ("loaded" !== _0x22efbc["_state"]) {
      return (
        _0x22efbc["_queue"].push({
          event: "pos",
          action: function () {
            _0x22efbc.pos(_0x16e6b8, _0x16ca31, _0xacb1e6, _0x3ee014);
          },
        }),
        _0x22efbc
      );
    }
    if (
      ((_0x16ca31 = "number" != typeof _0x16ca31 ? 0 : _0x16ca31),
      (_0xacb1e6 = "number" != typeof _0xacb1e6 ? -0.5 : _0xacb1e6),
      void 0 === _0x3ee014)
    ) {
      if ("number" != typeof _0x16e6b8) {
        return _0x22efbc["_pos"];
      }
      _0x22efbc["_pos"] = [_0x16e6b8, _0x16ca31, _0xacb1e6];
    }
    for (
      var _0x5359c2 = _0x22efbc["_getSoundIds"](_0x3ee014), _0x36342f = 0;
      _0x36342f < _0x5359c2.length;
      _0x36342f++
    ) {
      var _0x3aecc2 = _0x22efbc["_soundById"](_0x5359c2[_0x36342f]);
      if (_0x3aecc2) {
        if ("number" != typeof _0x16e6b8) {
          return _0x3aecc2["_pos"];
        }
        _0x3aecc2["_pos"] = [_0x16e6b8, _0x16ca31, _0xacb1e6];
        _0x3aecc2["_node"] &&
          ((_0x3aecc2["_panner"] && !_0x3aecc2["_panner"].pan) ||
            _0x5266a0(_0x3aecc2, "spatial"),
          _0x3aecc2["_panner"].setPosition(_0x16e6b8, _0x16ca31, _0xacb1e6));
        _0x22efbc["_emit"]("pos", _0x3aecc2["_id"]);
      }
    }
    return _0x22efbc;
  };
  Howl.prototype.orientation = function (
    _0x288f8e,
    _0x4d3cf7,
    _0x186c8e,
    _0x1ea3b8
  ) {
    var _0x4667f0 = this;
    if (!_0x4667f0["_webAudio"]) {
      return _0x4667f0;
    }
    if ("loaded" !== _0x4667f0["_state"]) {
      return (
        _0x4667f0["_queue"].push({
          event: "orientation",
          action: function () {
            _0x4667f0.orientation(_0x288f8e, _0x4d3cf7, _0x186c8e, _0x1ea3b8);
          },
        }),
        _0x4667f0
      );
    }
    if (
      ((_0x4d3cf7 =
        "number" != typeof _0x4d3cf7
          ? _0x4667f0["_orientation"][1]
          : _0x4d3cf7),
      (_0x186c8e =
        "number" != typeof _0x186c8e
          ? _0x4667f0["_orientation"][2]
          : _0x186c8e),
      void 0 === _0x1ea3b8)
    ) {
      if ("number" != typeof _0x288f8e) {
        return _0x4667f0["_orientation"];
      }
      _0x4667f0["_orientation"] = [_0x288f8e, _0x4d3cf7, _0x186c8e];
    }
    for (
      var _0x4df4bc = _0x4667f0["_getSoundIds"](_0x1ea3b8), _0x216095 = 0;
      _0x216095 < _0x4df4bc.length;
      _0x216095++
    ) {
      var _0x405469 = _0x4667f0["_soundById"](_0x4df4bc[_0x216095]);
      if (_0x405469) {
        if ("number" != typeof _0x288f8e) {
          return _0x405469["_orientation"];
        }
        _0x405469["_orientation"] = [_0x288f8e, _0x4d3cf7, _0x186c8e];
        _0x405469["_node"] &&
          (_0x405469["_panner"] ||
            (_0x405469["_pos"] ||
              (_0x405469["_pos"] = _0x4667f0["_pos"] || [0, 0, -0.5]),
            _0x5266a0(_0x405469, "spatial")),
          _0x405469["_panner"].setOrientation(_0x288f8e, _0x4d3cf7, _0x186c8e));
        _0x4667f0["_emit"]("orientation", _0x405469["_id"]);
      }
    }
    return _0x4667f0;
  };
  Howl.prototype.pannerAttr = function () {
    var _0x450d49,
      _0x25567d,
      _0x252744,
      _0x2958bf = this,
      _0x276466 = arguments;
    if (!_0x2958bf["_webAudio"]) {
      return _0x2958bf;
    }
    if (0 === _0x276466.length) {
      return _0x2958bf["_pannerAttr"];
    }
    if (1 === _0x276466.length) {
      if ("object" != typeof _0x276466[0]) {
        return (
          (_0x252744 = _0x2958bf["_soundById"](parseInt(_0x276466[0], 10))),
          _0x252744 ? _0x252744["_pannerAttr"] : _0x2958bf["_pannerAttr"]
        );
      }
      _0x450d49 = _0x276466[0];
      void 0 === _0x25567d &&
        (_0x2958bf["_pannerAttr"] = {
          coneInnerAngle:
            void 0 !== _0x450d49.coneInnerAngle
              ? _0x450d49.coneInnerAngle
              : _0x2958bf["_coneInnerAngle"],
          coneOuterAngle:
            void 0 !== _0x450d49.coneOuterAngle
              ? _0x450d49.coneOuterAngle
              : _0x2958bf["_coneOuterAngle"],
          coneOuterGain:
            void 0 !== _0x450d49.coneOuterGain
              ? _0x450d49.coneOuterGain
              : _0x2958bf["_coneOuterGain"],
          distanceModel:
            void 0 !== _0x450d49.distanceModel
              ? _0x450d49.distanceModel
              : _0x2958bf["_distanceModel"],
          maxDistance:
            void 0 !== _0x450d49.maxDistance
              ? _0x450d49.maxDistance
              : _0x2958bf["_maxDistance"],
          panningModel:
            void 0 !== _0x450d49.panningModel
              ? _0x450d49.panningModel
              : _0x2958bf["_panningModel"],
          refDistance:
            void 0 !== _0x450d49.refDistance
              ? _0x450d49.refDistance
              : _0x2958bf["_refDistance"],
          rolloffFactor:
            void 0 !== _0x450d49.rolloffFactor
              ? _0x450d49.rolloffFactor
              : _0x2958bf["_rolloffFactor"],
        });
    } else {
      2 === _0x276466.length &&
        ((_0x450d49 = _0x276466[0]), (_0x25567d = parseInt(_0x276466[1], 10)));
    }
    for (
      var _0x1ee3cc = _0x2958bf["_getSoundIds"](_0x25567d), _0x208163 = 0;
      _0x208163 < _0x1ee3cc.length;
      _0x208163++
    ) {
      if ((_0x252744 = _0x2958bf["_soundById"](_0x1ee3cc[_0x208163]))) {
        var _0x13045a = _0x252744["_pannerAttr"];
        _0x13045a = {
          coneInnerAngle:
            void 0 !== _0x450d49.coneInnerAngle
              ? _0x450d49.coneInnerAngle
              : _0x13045a.coneInnerAngle,
          coneOuterAngle:
            void 0 !== _0x450d49.coneOuterAngle
              ? _0x450d49.coneOuterAngle
              : _0x13045a.coneOuterAngle,
          coneOuterGain:
            void 0 !== _0x450d49.coneOuterGain
              ? _0x450d49.coneOuterGain
              : _0x13045a.coneOuterGain,
          distanceModel:
            void 0 !== _0x450d49.distanceModel
              ? _0x450d49.distanceModel
              : _0x13045a.distanceModel,
          maxDistance:
            void 0 !== _0x450d49.maxDistance
              ? _0x450d49.maxDistance
              : _0x13045a.maxDistance,
          panningModel:
            void 0 !== _0x450d49.panningModel
              ? _0x450d49.panningModel
              : _0x13045a.panningModel,
          refDistance:
            void 0 !== _0x450d49.refDistance
              ? _0x450d49.refDistance
              : _0x13045a.refDistance,
          rolloffFactor:
            void 0 !== _0x450d49.rolloffFactor
              ? _0x450d49.rolloffFactor
              : _0x13045a.rolloffFactor,
        };
        var _0x197544 = _0x252744["_panner"];
        _0x197544
          ? ((_0x197544.coneInnerAngle = _0x13045a.coneInnerAngle),
            (_0x197544.coneOuterAngle = _0x13045a.coneOuterAngle),
            (_0x197544.coneOuterGain = _0x13045a.coneOuterGain),
            (_0x197544.distanceModel = _0x13045a.distanceModel),
            (_0x197544.maxDistance = _0x13045a.maxDistance),
            (_0x197544.panningModel = _0x13045a.panningModel),
            (_0x197544.refDistance = _0x13045a.refDistance),
            (_0x197544.rolloffFactor = _0x13045a.rolloffFactor))
          : (_0x252744["_pos"] ||
              (_0x252744["_pos"] = _0x2958bf["_pos"] || [0, 0, -0.5]),
            _0x5266a0(_0x252744, "spatial"));
      }
    }
    return _0x2958bf;
  };
  Sound.prototype.init = (function (_0x167115) {
    return function () {
      var _0x19595f = this,
        _0x1df225 = _0x19595f["_parent"];
      _0x19595f["_orientation"] = _0x1df225["_orientation"];
      _0x19595f["_stereo"] = _0x1df225["_stereo"];
      _0x19595f["_pos"] = _0x1df225["_pos"];
      _0x19595f["_pannerAttr"] = _0x1df225["_pannerAttr"];
      _0x167115.call(this);
      _0x19595f["_stereo"]
        ? _0x1df225.stereo(_0x19595f["_stereo"])
        : _0x19595f["_pos"] &&
          _0x1df225.pos(
            _0x19595f["_pos"][0],
            _0x19595f["_pos"][1],
            _0x19595f["_pos"][2],
            _0x19595f["_id"]
          );
    };
  })(Sound.prototype.init);
  Sound.prototype.reset = (function (_0x5693de) {
    return function () {
      var _0x2ce5e0 = this,
        _0x1af883 = _0x2ce5e0["_parent"];
      return (
        (_0x2ce5e0["_orientation"] = _0x1af883["_orientation"]),
        (_0x2ce5e0["_pos"] = _0x1af883["_pos"]),
        (_0x2ce5e0["_pannerAttr"] = _0x1af883["_pannerAttr"]),
        _0x5693de.call(this)
      );
    };
  })(Sound.prototype.reset);
  var _0x5266a0 = function (_0x38dc6a, _0x1dbea7) {
    _0x1dbea7 = _0x1dbea7 || "spatial";
    "spatial" === _0x1dbea7
      ? ((_0x38dc6a["_panner"] = Howler.ctx.createPanner()),
        (_0x38dc6a["_panner"].coneInnerAngle =
          _0x38dc6a["_pannerAttr"].coneInnerAngle),
        (_0x38dc6a["_panner"].coneOuterAngle =
          _0x38dc6a["_pannerAttr"].coneOuterAngle),
        (_0x38dc6a["_panner"].coneOuterGain =
          _0x38dc6a["_pannerAttr"].coneOuterGain),
        (_0x38dc6a["_panner"].distanceModel =
          _0x38dc6a["_pannerAttr"].distanceModel),
        (_0x38dc6a["_panner"].maxDistance =
          _0x38dc6a["_pannerAttr"].maxDistance),
        (_0x38dc6a["_panner"].panningModel =
          _0x38dc6a["_pannerAttr"].panningModel),
        (_0x38dc6a["_panner"].refDistance =
          _0x38dc6a["_pannerAttr"].refDistance),
        (_0x38dc6a["_panner"].rolloffFactor =
          _0x38dc6a["_pannerAttr"].rolloffFactor),
        _0x38dc6a["_panner"].setPosition(
          _0x38dc6a["_pos"][0],
          _0x38dc6a["_pos"][1],
          _0x38dc6a["_pos"][2]
        ),
        _0x38dc6a["_panner"].setOrientation(
          _0x38dc6a["_orientation"][0],
          _0x38dc6a["_orientation"][1],
          _0x38dc6a["_orientation"][2]
        ))
      : ((_0x38dc6a["_panner"] = Howler.ctx.createStereoPanner()),
        (_0x38dc6a["_panner"].pan.value = _0x38dc6a["_stereo"]));
    _0x38dc6a["_panner"].connect(_0x38dc6a["_node"]);
    _0x38dc6a["_paused"] ||
      _0x38dc6a["_parent"].pause(_0x38dc6a["_id"], true).play(_0x38dc6a["_id"]);
  };
})();

var VOLUME = {
    AMB: 1,
    FX: 1,
  },
  CONST_AUDIO = {
    SEA_DELAY: 12,
    SEA_FADE: 5000,
    FOREST_DELAY: 12,
    FOREST_FADE: 5000,
    SNOW_DELAY: 12,
    SNOW_FADE: 5000,
    TRANSITION: 3000,
    DISABLE_EFFECT: 460000,
    PLAYERS: 8,
    ITEMS: 6,
    HAND: 1,
    MISC: 2,
    SHOVEL: 3,
  },
  SOUND = [];
SOUND[-1] = CONST_AUDIO.HAND;
SOUND[INV.BOOK] = CONST_AUDIO.HAND;
SOUND[INV.WATERING_CAN_FULL] = CONST_AUDIO.HAND;
SOUND[INV.WRENCH] = CONST_AUDIO.MISC;
SOUND[INV.PICK_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.PICK] = CONST_AUDIO.MISC;
SOUND[INV.PICK_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.PICK_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.PICK_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.PICK_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.PIRATE_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_WOOD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.LAVA_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.SWORD_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.CRAB_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.WOOD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.GOLD_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DIAMOND_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_SPEAR] = CONST_AUDIO.MISC;
SOUND[INV.AMETHYST_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_GOLD] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_DIAMOND] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_AMETHYST] = CONST_AUDIO.MISC;
SOUND[INV.HAMMER_REIDITE] = CONST_AUDIO.MISC;
SOUND[INV.SUPER_HAMMER] = CONST_AUDIO.MISC;
SOUND[INV.DRAGON_SWORD] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK2] = CONST_AUDIO.MISC;
SOUND[INV.PITCHFORK] = CONST_AUDIO.MISC;
SOUND[INV.SHOVEL] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_GOLD] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_DIAMOND] = CONST_AUDIO.SHOVEL;
SOUND[INV.SHOVEL_AMETHYST] = CONST_AUDIO.SHOVEL;
SOUND_NATURE = [];
SOUND_NATURE[0] = 0;
SOUND_NATURE[1] = 1;
SOUND_NATURE[2] = 1;
SOUND_NATURE[3] = 1;
SOUND_NATURE[4] = 0;
SOUND_NATURE[5] = 0;
SOUND_NATURE[6] = 0;
SOUND_NATURE[7] = 0;
SOUND_NATURE[8] = 0;
SOUND_NATURE[9] = 0;
SOUND_NATURE[10] = 1;
SOUND_NATURE[11] = 1;
SOUND_NATURE[12] = 1;
SOUND_NATURE[13] = 1;
SOUND_NATURE[14] = 1;
SOUND_NATURE[15] = 1;
SOUND_NATURE[16] = 0;
SOUND_NATURE[17] = 0;
SOUND_NATURE[18] = 0;
SOUND_NATURE[19] = 0;
SOUND_NATURE[20] = 0;
SOUND_NATURE[21] = 0;
SOUND_NATURE[22] = 0;
SOUND_NATURE[23] = 1;
SOUND_NATURE[24] = 1;
SOUND_NATURE[25] = 1;
SOUND_NATURE[26] = 1;
SOUND_NATURE[27] = 1;
SOUND_NATURE[28] = 1;
SOUND_NATURE[29] = 1;
SOUND_NATURE[30] = 1;
SOUND_NATURE[31] = 1;
SOUND_NATURE[32] = 1;
SOUND_NATURE[33] = 1;
SOUND_NATURE[34] = 1;
SOUND_NATURE[35] = 1;
SOUND_NATURE[36] = 1;
SOUND_NATURE[37] = 1;
SOUND_NATURE[38] = 1;
SOUND_NATURE[40] = 0;
SOUND_NATURE[41] = 0;
SOUND_NATURE[42] = 0;
SOUND_NATURE[50] = 1;
SOUND_NATURE[51] = 1;
SOUND_NATURE[52] = 1;
SOUND_NATURE[55] = 0;
SOUND_NATURE[56] = 0;
SOUND_NATURE[57] = 0;
SOUND_NATURE[58] = 0;
SOUND_BUILD = [];
SOUND_BUILD[ITEMS.PLANT] = 0;
SOUND_BUILD[ITEMS.FIRE] = 0;
SOUND_BUILD[ITEMS.TOTEM] = 0;
SOUND_BUILD[ITEMS.BIG_FIRE] = 0;
SOUND_BUILD[ITEMS.SEED] = -1;
SOUND_BUILD[ITEMS.WHEAT_SEED] = -1;
SOUND_BUILD[ITEMS.WORKBENCH] = 0;
SOUND_BUILD[ITEMS.WALL] = 0;
SOUND_BUILD[ITEMS.BRIDGE] = 0;
SOUND_BUILD[ITEMS.PLOT] = 0;
SOUND_BUILD[ITEMS.WINDMILL] = 1;
SOUND_BUILD[ITEMS.WELL] = 1;
SOUND_BUILD[ITEMS.STONE_WALL] = 1;
SOUND_BUILD[ITEMS.GOLD_WALL] = 1;
SOUND_BUILD[ITEMS.DIAMOND_WALL] = 1;
SOUND_BUILD[ITEMS.AMETHYST_WALL] = 1;
SOUND_BUILD[ITEMS.REIDITE_WALL] = 1;
SOUND_BUILD[ITEMS.SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_SPIKE] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR] = 1;
SOUND_BUILD[ITEMS.WOOD_DOOR_SPIKE] = 0;
SOUND_BUILD[ITEMS.STONE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.GOLD_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.DIAMOND_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.AMETHYST_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.REIDITE_DOOR_SPIKE] = 1;
SOUND_BUILD[ITEMS.FURNACE] = 1;
SOUND_BUILD[ITEMS.RESURRECTION] = 1;
SOUND_BUILD[ITEMS.EMERALD_MACHINE] = 1;
SOUND_BUILD[ITEMS.CHEST] = 0;
SOUND_BUILD[ITEMS.BREAD_OVEN] = 1;
var AUDIO = {
    DIG: {
      sound: null,
      path: ["audio/ambience.mp3"],
      sprite: {
        d0: [90086, 300, false],
        d1: [90391, 300, false],
        d2: [90684, 300, false],
      },
      sample: {
        d0: CONST_AUDIO.PLAYERS,
        d1: CONST_AUDIO.PLAYERS,
        d2: CONST_AUDIO.PLAYERS,
      },
    },
    PUNCH: {
      sound: null,
      path: ["audio/ambience.mp3"],
      sprite: {
        p0: [89303, 300, false],
        p1: [89549, 300, false],
        p2: [89815, 300, false],
      },
      sample: {
        p0: CONST_AUDIO.PLAYERS,
        p1: CONST_AUDIO.PLAYERS,
        p2: CONST_AUDIO.PLAYERS,
      },
    },
    WEAPON: {
      sound: null,
      path: ["audio/ambience.mp3"],
      sprite: {
        w0: [88195, 300, false],
        w1: [88473, 300, false],
        w2: [88751, 300, false],
        w3: [89025, 300, false],
      },
      sample: {
        w0: CONST_AUDIO.PLAYERS,
        w1: CONST_AUDIO.PLAYERS,
        w2: CONST_AUDIO.PLAYERS,
        w3: CONST_AUDIO.PLAYERS,
      },
    },
    AMBIENCE: {
      sound: null,
      path: ["audio/ambience.mp3"],
      sprite: {
        cook: [100, 2800, true],
        seaday: [3100, 8800, true],
        seanight: [19882, 8301, true],
        forestday: [32604, 21890, true],
        forestnight: [54524, 11393, true],
        snowday: [66961, 21223, true],
        snownight: [66961, 21223, true],
        fire: [12356, 6965, true],
        swim: [28380, 1797, true],
        sand: [30562, 655, true],
        walk: [31658, 813, true],
        snow: [66014, 925, true],
        hwood: [91022, 400, false],
        hand: [91431, 400, false],
        hstone: [92249, 500, false],
      },
      sample: {
        cook: 1,
        seaday: 1,
        seanight: 1,
        forestday: 1,
        forestnight: 1,
        snowday: 1,
        snownight: 1,
        fire: CONST_AUDIO.PLAYERS,
        swim: CONST_AUDIO.PLAYERS,
        sand: CONST_AUDIO.PLAYERS,
        walk: CONST_AUDIO.PLAYERS,
        snow: CONST_AUDIO.PLAYERS,
        hwood: CONST_AUDIO.ITEMS,
        hand: CONST_AUDIO.ITEMS,
        hstone: CONST_AUDIO.ITEMS,
      },
    },
  },
  SoundArea = function (
    _0x430f45,
    _0x45e663,
    _0x2b5eb2,
    _0x20ef50,
    _0x2d4661,
    _0x57192a,
    _0x5b16bb,
    _0x2b2ca1,
    _0x58fd22,
    _0xe819d8,
    _0x421b4e
  ) {
    this.r = 1;
    this.delay = _0x430f45;
    this.max_delay = _0x430f45;
    this.night = _0x45e663;
    this.day = _0x2b5eb2;
    this.fade = _0x20ef50;
    this.r_base = _0x2d4661;
    this.r_seed = _0x57192a;
    this.player = _0x5b16bb;
    this.transition_delay = _0x2b2ca1;
    this.source = _0x58fd22;
    this.source.lx = _0x58fd22.x + _0x58fd22.w;
    this.source.by = _0x58fd22.y + _0x58fd22.h;
    this.outside_box = _0xe819d8;
    this.inside_box = _0x421b4e;
    this.inside = 0;
    this.hackish = {
      d: 5,
      m: 5,
    };
    this.effect = function () {
      this.delay -= delta;
      if (this.delay < 0) {
        this.delay = this.max_delay;
        var _0x11d6e5 = AUDIO.AMBIENCE.sound.playing(this.night),
          _0x7b8138 = AUDIO.AMBIENCE.sound.playing(this.day);
        if (_0x11d6e5 && !_0x7b8138) {
          var _0x368d7f = this.player.volume(this.night) * VOLUME.AMB,
            _0xef56ae =
              (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
          this.player.fade(_0x368d7f, _0xef56ae, this.fade, this.night);
        } else {
          if (!_0x11d6e5 && _0x7b8138) {
            var _0x368d7f = this.player.volume(this.day) * VOLUME.AMB,
              _0xef56ae =
                (Math.random() * this.r_seed + this.r_base) * VOLUME.AMB;
            this.player.fade(_0x368d7f, _0xef56ae, this.fade, this.day);
          }
        }
      }
    };
    this.transition = function () {
      this.delay = this.max_delay;
      this.hackish.d = this.hackish.m;
      if (world.time) {
        this.player.fade(
          0,
          this.r_base * VOLUME.AMB,
          this.transition_delay,
          this.night
        );
        this.player.play(this.night);
        if (this.player.playing(this.day)) {
          var _0x43f29a = this.player.volume(this.day) * VOLUME.AMB;
          this.player.fade(_0x43f29a, 0, this.transition_delay, this.day);
        }
      } else {
        this.player.fade(
          0,
          this.r_base * VOLUME.AMB,
          this.transition_delay,
          this.day
        );
        this.player.play(this.day);
        if (this.player.playing(this.night)) {
          var _0x43f29a = this.player.volume(this.night) * VOLUME.AMB;
          this.player.fade(_0x43f29a, 0, this.transition_delay, this.night);
        }
      }
    };
    this.check = function (_0x283c44) {
      if (this.inside) {
        if (!Utils.inside_box(_0x283c44, this.outside_box)) {
          this.inside = 0;
          if (this.player.playing(this.night)) {
            var _0x47256a = this.player.volume(this.night) * VOLUME.AMB;
            this.player.fade(_0x47256a, 0, this.transition_delay, this.night);
          }
          if (this.player.playing(this.day)) {
            var _0x47256a = this.player.volume(this.day) * VOLUME.AMB;
            this.player.fade(_0x47256a, 0, this.transition_delay, this.day);
          }
        } else {
          if (
            !audio.transition &&
            world.clock.now < CONST_AUDIO.DISABLE_EFFECT
          ) {
            if (world.time) {
              if (!this.player.playing(this.night)) {
                this.hackish.d -= delta;
                if (this.hackish.d < 0) {
                  this.transition();
                }
              }
            } else {
              if (!this.player.playing(this.day)) {
                this.hackish.d -= delta;
                if (this.hackish.d < 0) {
                  this.transition();
                }
              }
            }
          }
        }
      } else {
        if (Utils.inside_box(_0x283c44, this.inside_box)) {
          this.inside = 1;
          if (
            !audio.transition &&
            world.clock.now < CONST_AUDIO.DISABLE_EFFECT
          ) {
            this.transition();
          }
        }
      }
    };
    this.update = function (_0x446a5a, _0x4b0024) {
      var _0x17ed54, _0x2b044d;
      if (_0x446a5a.x < this.source.x) {
        _0x17ed54 = audio.get_x(this.source.x);
      } else {
        if (_0x446a5a.x > this.source.lx) {
          _0x17ed54 = audio.get_x(this.source.lx);
        } else {
          _0x17ed54 = _0x4b0024.x;
        }
      }
      if (_0x446a5a.y < this.source.y) {
        _0x2b044d = audio.get_y(this.source.y);
      } else {
        if (_0x446a5a.y > this.source.by) {
          _0x2b044d = audio.get_y(this.source.by);
        } else {
          _0x2b044d = _0x4b0024.y;
        }
      }
      this.player.pos(_0x17ed54, _0x2b044d, -0.5, this.night);
      this.player.pos(_0x17ed54, _0x2b044d, -0.5, this.day);
    };
  };
SOUND_PLAYER = {
  DELAY_SWIM: 0.4,
  DELAY_SAND: 0.2,
  DELAY_WALK: 0.2,
  DELAY_SNOW: 0.2,
  FADE_SWIM: 300,
  FADE_SAND: 100,
  FADE_WALK: 100,
  FADE_SNOW: 100,
  WALK: 0,
  SWIM: 1,
  SAND: 2,
  SNOW: 3,
  FACTOR: 4,
  FACTOR2: 2,
};
var SoundPlayerEffect = function (_0x40a42a, _0xd5783b, _0x324fee) {
    this.mom = _0x40a42a;
    this.c = 0;
    this.player = _0xd5783b;
    this.ids = _0x324fee;
    this.max = _0x324fee.length;
    this.play = function () {
      this.c = (this.c + 1) % this.max;
      var _0x3d1f74 = this.ids[this.c];
      this.mom.update_pos(this.player, _0x3d1f74);
      this.player.play(_0x3d1f74);
    };
  },
  SoundPlayer = function (_0x57f8cf) {
    this.free = 1;
    this.uid = 0;
    this.mode = -1;
    this.swim = audio.sample.swim[_0x57f8cf];
    this.sand = audio.sample.sand[_0x57f8cf];
    this.walk = audio.sample.walk[_0x57f8cf];
    this.snow = audio.sample.snow[_0x57f8cf];
    this.punch = new SoundPlayerEffect(
      this,
      AUDIO.PUNCH.sound,
      audio.samples.punch[_0x57f8cf]
    );
    this.weapon = new SoundPlayerEffect(
      this,
      AUDIO.WEAPON.sound,
      audio.samples.weapon[_0x57f8cf]
    );
    this.dig = new SoundPlayerEffect(
      this,
      AUDIO.DIG.sound,
      audio.samples.dig[_0x57f8cf]
    );
    this.sid = _0x57f8cf;
    this.x = 0;
    this.y = 0;
    this.move = 0;
    this.delay = SOUND_PLAYER.DELAY;
    this.pos = {
      x: 0,
      y: 0,
    };
    this.ambience = AUDIO.AMBIENCE.sound;
    this.swing = function (_0x133466) {
      if (_0x133466 === CONST_AUDIO.HAND) {
        this.punch.play();
      } else {
        if (_0x133466 === CONST_AUDIO.MISC) {
          this.weapon.play();
        } else {
          if (_0x133466 === CONST_AUDIO.SHOVEL) {
            this.dig.play();
          }
        }
      }
    };
    this.detect_position = function (_0x275fb4) {
      if (_0x275fb4.dist_sand > 0) {
        return SOUND_PLAYER.SAND;
      } else {
        if (_0x275fb4.dist_water > 0) {
          return SOUND_PLAYER.SWIM;
        } else {
          if (_0x275fb4.dist_winter > 0 || _0x275fb4.dist_lava > 0) {
            return SOUND_PLAYER.SNOW;
          } else {
            return SOUND_PLAYER.WALK;
          }
        }
      }
    };
    this.init = function (_0x3e79ae) {
      this.free = 0;
      this.uid = _0x3e79ae;
      var _0x29b9db = world.fast_units[_0x3e79ae];
      _0x29b9db.sid = this.sid;
      this.mode = this.detect_position(_0x29b9db);
      this.pos.x = _0x29b9db.x;
      this.pos.y = _0x29b9db.y;
    };
    this.clean = function () {
      this.free = 1;
      this.mode = -1;
      this.ambience.stop(this.swim);
      this.ambience.stop(this.sand);
      this.ambience.stop(this.walk);
      this.ambience.stop(this.snow);
    };
    this.fade = function (_0x1c40ab, _0xe3625c) {
      var _0x5e6b28 = this.ambience.volume(_0x1c40ab) * VOLUME.FX;
      this.ambience.fade(_0x5e6b28, 0, _0xe3625c, _0x1c40ab);
    };
    this.update_pos = function (_0x39993c, _0x2b99ab) {
      this.move && this.sid && _0x39993c.pos(this.x, this.y, -0.5, _0x2b99ab);
    };
    this.effect = function (
      _0x5944e0,
      _0x11c03d,
      _0x99285,
      _0xc03699,
      _0x1c6f40,
      _0x413b00,
      _0x21d902
    ) {
      this.delay = _0x413b00;
      if (_0xc03699 && this.mode === _0x1c6f40) {
        var _0xe192f = this.ambience.volume(_0x5944e0) * VOLUME.FX;
        if (this.move) {
          var _0x140d3d = (Math.random() * _0x99285 + _0x11c03d) * VOLUME.FX;
          this.ambience.fade(_0xe192f, _0x140d3d, _0x21d902, _0x5944e0);
        } else {
          this.ambience.fade(_0xe192f, 0, _0x21d902, _0x5944e0);
        }
      } else {
        if (this.mode != _0x1c6f40 && this.move) {
          this.ambience.fade(
            0,
            (_0x11c03d + _0x99285) * VOLUME.FX,
            _0x21d902,
            _0x5944e0
          );
        } else {
          if (this.move) {
            var _0xe192f = this.ambience.volume(_0x5944e0) * VOLUME.FX,
              _0x140d3d = (Math.random() * _0x99285 + _0x11c03d) * VOLUME.FX;
            this.ambience.fade(_0xe192f, _0x140d3d, _0x21d902, _0x5944e0);
          }
        }
      }
      this.update_pos(this.ambience, _0x5944e0);
      this.ambience.play(_0x5944e0);
    };
    this.update = function () {
      var _0x39fb82 = world.fast_units[this.uid];
      this.delay -= delta;
      if (this.delay > 0) {
        return;
      }
      var _0x104339 = 0;
      _0x39fb82.x != this.pos.x || _0x39fb82.y != this.pos.y
        ? (!this.move && ((_0x104339 = 1), (this.move = 1)),
          (this.x = audio.get_x_ext(_0x39fb82.x, SOUND_PLAYER.FACTOR2)),
          (this.y = audio.get_y_ext(_0x39fb82.y, SOUND_PLAYER.FACTOR2)))
        : this.move && ((_0x104339 = 1), (this.move = 0));
      this.pos.x = _0x39fb82.x;
      this.pos.y = _0x39fb82.y;
      mode = this.detect_position(_0x39fb82);
      if (mode != this.mode) {
        if (this.mode === SOUND_PLAYER.SWIM) {
          this.fade(this.swim, SOUND_PLAYER.FADE_SWIM);
        } else {
          if (this.mode === SOUND_PLAYER.SAND) {
            this.fade(this.sand, SOUND_PLAYER.FADE_SAND);
          } else {
            if (this.mode === SOUND_PLAYER.WALK) {
              this.fade(this.walk, SOUND_PLAYER.FADE_WALK);
            } else {
              if (this.mode === SOUND_PLAYER.SNOW) {
                this.fade(this.snow, SOUND_PLAYER.FADE_SNOW);
              }
            }
          }
        }
      }
      if (mode === SOUND_PLAYER.SWIM) {
        this.effect(
          this.swim,
          0.08,
          0.3,
          _0x104339,
          mode,
          SOUND_PLAYER.DELAY_SWIM,
          SOUND_PLAYER.FADE_SWIM
        );
      } else {
        if (mode === SOUND_PLAYER.SAND) {
          this.effect(
            this.sand,
            0.2,
            0.3,
            _0x104339,
            mode,
            SOUND_PLAYER.DELAY_SAND,
            SOUND_PLAYER.FADE_SAND
          );
        } else {
          if (mode === SOUND_PLAYER.WALK) {
            this.effect(
              this.walk,
              0.3,
              0.6,
              _0x104339,
              mode,
              SOUND_PLAYER.DELAY_WALK,
              SOUND_PLAYER.FADE_WALK
            );
          } else {
            if (mode === SOUND_PLAYER.SNOW) {
              this.effect(
                this.snow,
                0.1,
                0.25,
                _0x104339,
                mode,
                SOUND_PLAYER.DELAY_SNOW,
                SOUND_PLAYER.FADE_SNOW
              );
            }
          }
        }
      }
      this.mode = mode;
    };
    this.check = function () {
      var _0xb2f1fe = world.fast_units[this.uid];
      if (!_0xb2f1fe) {
        return this.clean(_0xb2f1fe), false;
      }
      return true;
    };
  },
  MyAudio = function () {
    this.run = 0;
    this.loaded = 0;
    this.transition = 0;
    this.get_x = function (_0x53469c) {
      return 100 * (_0x53469c / world.w);
    };
    this.get_y = function (_0x53911c) {
      return 100 * (_0x53911c / world.h);
    };
    this.get_x_ext = function (_0x4990f3, _0x251b35) {
      return (
        (_0x4990f3 = this.get_x(_0x4990f3) - this.ltr.x),
        this.ltr.x + _0x251b35 * _0x4990f3
      );
    };
    this.get_y_ext = function (_0xd5e8ab, _0x23d5c0) {
      return (
        (_0xd5e8ab = Math.abs(this.get_y(_0xd5e8ab) - this.ltr.y)),
        this.ltr.y + _0x23d5c0 * _0xd5e8ab
      );
    };
    this.sample = {};
    this.samples = {};
    this.player = {};
    this.play_sample = function (_0x15d336, _0x429dea, _0x4c964e, _0x1b9189) {
      for (var _0x490e8b = 0; _0x490e8b < _0x429dea.length; _0x490e8b++) {
        var _0x28f42c = _0x429dea[_0x490e8b];
        if (_0x15d336.playing(_0x28f42c)) {
          continue;
        }
        return (
          _0x15d336.pos(_0x4c964e, _0x1b9189, -0.5, _0x28f42c),
          _0x15d336.play(_0x28f42c),
          true
        );
      }
      return false;
    };
    this.hit = function (_0x14ff74, _0x4bfbf1, _0x59c9e4, _0x520b23) {
      _0x59c9e4 = this.get_x_ext(_0x59c9e4, SOUND_PLAYER.FACTOR);
      _0x520b23 = this.get_y_ext(_0x520b23, SOUND_PLAYER.FACTOR);
      console.log(
        "HIT",
        _0x14ff74,
        _0x4bfbf1,
        _0x59c9e4,
        _0x520b23,
        SOUND_PLAYER.FACTOR
      );
      if (!_0x14ff74) {
        this.play_sample(
          this.player.hand,
          this.sample.hand,
          _0x59c9e4,
          _0x520b23
        );
      } else {
        if (_0x4bfbf1 === 1) {
          this.play_sample(
            this.player.hstone,
            this.sample.hstone,
            _0x59c9e4,
            _0x520b23
          );
        } else {
          if (_0x4bfbf1 === 0) {
            this.play_sample(
              this.player.hwood,
              this.sample.hwood,
              _0x59c9e4,
              _0x520b23
            );
          }
        }
      }
    };
    this.ltr = {
      x: 0,
      y: 0,
    };
    this.oldp = {
      x: 0,
      y: 0,
    };
    this.area = {};
    this.players = [];
    this.ambience = function (_0x20a11a, _0x2bc87e) {
      for (var _0x297899 in this.area) {
        var _0x46e63d = this.area[_0x297899];
        _0x46e63d.check(_0x20a11a);
        if (_0x46e63d.inside) {
          if (world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
            _0x46e63d.effect();
          }
          if (_0x2bc87e) {
            _0x46e63d.update(_0x20a11a, this.ltr);
          }
          if (this.transition) {
            _0x46e63d.transition();
          }
        }
      }
      if (this.transition) {
        this.transition = 0;
      }
    };
    this.hook_players = function () {
      var _0xeac4bc = [];
      for (var _0x4447d2 = 0; _0x4447d2 < this.players.length; _0x4447d2++) {
        var _0x38df73 = this.players[_0x4447d2];
        if (_0x38df73.free) {
          _0xeac4bc.push(_0x4447d2);
        } else {
          !_0x38df73.free &&
            !world.fast_units[_0x38df73.uid] &&
            (_0x38df73.clean(), _0xeac4bc.push(_0x4447d2));
        }
      }
      var _0x1fa47e = world.units[ITEMS.PLAYERS];
      for (
        var _0x4447d2 = 0, _0x30d8f2 = 0;
        _0x4447d2 < _0x1fa47e.length && _0x30d8f2 < _0xeac4bc.length;
        _0x4447d2++
      ) {
        var _0x38df73 = _0x1fa47e[_0x4447d2];
        if (
          (world.mode == WORLD.MODE_HUNGER_GAMES &&
            world.players[_0x38df73.id].nickname === "spectator") ||
          _0x38df73.sid !== -1 ||
          _0x38df73.uid === user.uid
        ) {
          continue;
        }
        this.players[_0xeac4bc[_0x30d8f2]].init(_0x38df73.uid);
        _0x30d8f2++;
      }
    };
    this.players_effect = function () {
      this.hook_players();
      for (var _0x53dd99 = 0; _0x53dd99 < this.players.length; _0x53dd99++) {
        var _0x4c5f8a = this.players[_0x53dd99];
        if (_0x4c5f8a.free || !_0x4c5f8a.check()) {
          continue;
        }
        _0x4c5f8a.update();
      }
    };
    this.update_listener = function (_0x39ed69) {
      if (this.oldp.x === _0x39ed69.x && this.oldp.y === _0x39ed69.y) {
        return 0;
      }
      this.oldp.x = _0x39ed69.x;
      this.oldp.y = _0x39ed69.y;
      this.ltr.x = this.get_x(_0x39ed69.x);
      this.ltr.y = this.get_y(_0x39ed69.y);
      Howler.pos(this.ltr.x, this.ltr.y, 0);
      return 1;
    };
    this.scheduler = function () {
      if (!this.run || !this.loaded) {
        return;
      }
      var _0x48dd1b = world.fast_units[user.uid];
      if (!_0x48dd1b) {
        return;
      }
      _0x48dd1b.sid = 0;
      var _0x37292b = this.update_listener(_0x48dd1b);
      if (
        world.mode !== WORLD.MODE_ZOMBIES &&
        world.mode !== WORLD.MODE_LEGACY &&
        world.mode !== WORLD.MODE_BR
      ) {
        this.ambience(_0x48dd1b, _0x37292b);
      }
      this.players_effect();
    };
    this.load_sound = function () {
      for (var _0x27e520 in AUDIO) {
        var _0x5cedc6 = AUDIO[_0x27e520];
        typeof _0x5cedc6 === "object" &&
          _0x5cedc6.path &&
          (_0x5cedc6.sound = new Howl({
            src: _0x5cedc6.path,
            volume: 0,
            sprite: _0x5cedc6.sprite,
          }));
        for (var _0x25f454 in _0x5cedc6.sample) {
          var _0x42a055 = _0x5cedc6.sample[_0x25f454];
          var _0x4b1de3 = [];
          console.log(_0x25f454);
          for (var _0x576360 = 0; _0x576360 < _0x42a055; _0x576360++) {
            var _0x24fec2 = _0x5cedc6.sound.play(_0x25f454);
            _0x5cedc6.sound.stop(_0x24fec2);
            _0x5cedc6.sound.on(
              "fade",
              function (_0x3013fc) {
                !this.volume(_0x3013fc) &&
                  (console.log(_0x3013fc, "OUT"), this.stop(_0x3013fc));
              },
              _0x24fec2
            );
            _0x4b1de3.push(_0x24fec2);
          }
          if (_0x4b1de3.length > 1) {
            audio.sample[_0x25f454] = _0x4b1de3;
          } else {
            audio.sample[_0x25f454] = _0x4b1de3[0];
          }
          audio.player[_0x25f454] = _0x5cedc6.sound;
        }
      }
    };
    this.volume_sample = function (_0x116055, _0x5221f7, _0x3be61c) {
      for (var _0xf3993b = 0; _0xf3993b < _0x116055.length; _0xf3993b++) {
        _0x5221f7.volume(_0x3be61c, _0x116055[_0xf3993b]);
      }
    };
    this.organize_samples = function (
      _0x5c1b47,
      _0x441edc,
      _0x5baa6f,
      _0x172b52,
      _0x3659c6,
      _0x42e227
    ) {
      var _0x553d66 = _0x5c1b47;
      for (var _0x410155 = 0; _0x410155 < _0x5baa6f; _0x410155++) {
        var _0x7d9365 = (_0x553d66[_0x410155] = []);
        for (j = 0; j < _0x172b52; j++) {
          _0x7d9365[j] = audio.sample[_0x3659c6 + j][_0x410155];
          _0x441edc.sound.volume(_0x42e227, _0x7d9365[j]);
        }
      }
    };
    this.init = function () {
      audio.load_sound();
      audio.samples.punch = [];
      audio.samples.weapon = [];
      audio.samples.dig = [];
      audio.organize_samples(
        audio.samples.punch,
        AUDIO.PUNCH,
        CONST_AUDIO.PLAYERS,
        3,
        "p",
        0.15
      );
      audio.organize_samples(
        audio.samples.weapon,
        AUDIO.WEAPON,
        CONST_AUDIO.PLAYERS,
        4,
        "w",
        0.15
      );
      audio.organize_samples(
        audio.samples.dig,
        AUDIO.DIG,
        CONST_AUDIO.PLAYERS,
        3,
        "d",
        0.09
      );
      audio.volume_sample(audio.sample.hand, audio.player.hand, 0.15);
      audio.volume_sample(audio.sample.hwood, audio.player.hwood, 0.2);
      audio.volume_sample(audio.sample.hstone, audio.player.hstone, 1);
      audio.area.sea = new SoundArea(
        CONST_AUDIO.SEA_DELAY,
        this.sample.seanight,
        this.sample.seaday,
        CONST_AUDIO.SEA_FADE,
        0.05,
        0.4,
        AUDIO.AMBIENCE.sound,
        CONST_AUDIO.TRANSITION,
        {
          x: SPRITE.SEE_BIOME_X,
          y: SPRITE.WINTER_BIOME_Y,
          w: world.w,
          h: world.h,
        },
        {
          x: SPRITE.SEE_BIOME_X - 2300,
          y: SPRITE.WINTER_BIOME_Y - 4000,
          w: world.w,
          h: world.h,
        },
        {
          x: SPRITE.SEE_BIOME_X - 1500,
          y: SPRITE.WINTER_BIOME_Y - 2000,
          w: world.w,
          h: world.h,
        }
      );
      audio.area.forest = new SoundArea(
        CONST_AUDIO.FOREST_DELAY,
        this.sample.forestnight,
        this.sample.forestday,
        CONST_AUDIO.FOREST_FADE,
        0.03,
        0.25,
        AUDIO.AMBIENCE.sound,
        CONST_AUDIO.TRANSITION,
        {
          x: 0,
          y: SPRITE.WINTER_BIOME_Y + 800,
          w: SPRITE.SEE_BIOME_X - 2300,
          h: world.h,
        },
        {
          x: -100,
          y: SPRITE.WINTER_BIOME_Y - 300,
          w: SPRITE.SEE_BIOME_X - 100,
          h: world.h,
        },
        {
          x: -100,
          y: SPRITE.WINTER_BIOME_Y + 400,
          w: SPRITE.SEE_BIOME_X - 1400,
          h: world.h,
        }
      );
      audio.area.snow = new SoundArea(
        CONST_AUDIO.FOREST_DELAY,
        this.sample.snownight,
        this.sample.snowday,
        CONST_AUDIO.SNOW_FADE,
        0.01,
        0.22,
        AUDIO.AMBIENCE.sound,
        CONST_AUDIO.TRANSITION,
        {
          x: -100,
          y: -100,
          w: world.w + 200,
          h: SPRITE.WINTER_BIOME_Y - 1000,
        },
        {
          x: -100,
          y: -100,
          w: world.w + 200,
          h: SPRITE.WINTER_BIOME_Y + 600,
        },
        {
          x: -100,
          y: -100,
          w: world.w + 200,
          h: SPRITE.WINTER_BIOME_Y + 100,
        }
      );
      for (var _0xc314cc = 0; _0xc314cc < CONST_AUDIO.PLAYERS; _0xc314cc++) {
        audio.players[_0xc314cc] = new SoundPlayer(_0xc314cc);
      }
      audio.players[0].init(user.uid);
      audio.loaded = 1;
    };
    this.launch = function () {
      if (!this.transition && world.clock.now < CONST_AUDIO.DISABLE_EFFECT) {
        this.transition = 1;
      }
    };
    this.quit = function () {
      if (!this.run || !this.loaded) {
        return;
      }
      for (var _0x5a7e4c in audio.sample) {
        var _0x42decd = audio.sample[_0x5a7e4c];
        if (typeof _0x42decd === "object") {
          for (var _0xa8b165 = 0; _0xa8b165 < _0x42decd.length; _0xa8b165++) {
            audio.player[_0x5a7e4c].stop(_0x42decd[_0xa8b165]);
          }
        } else {
          audio.player[_0x5a7e4c].stop(_0x42decd);
        }
      }
      for (var _0xa8b165 = 0; _0xa8b165 < audio.players.length; _0xa8b165++) {
        audio.players[_0xa8b165].clean();
      }
    };
    this.select = function () {
      if (!audio.run) {
        if (!audio.loaded) {
          audio.init();
        }
        audio.players[0].uid = user.uid;
        audio.players[0].free = 0;
        audio.launch();
      } else {
        audio.quit();
      }
      audio.run = !audio.run;
    };
  };

mobile = 0;
document.getElementById("version").innerHTML =
  "" + CLIENT.VERSION_NUMBER + ".3";
var MAP = [],
  fake_world = {
    time: Math.floor(Math.random() * 2),
    items: [],
  };
init_fake_world();

client = new NetworkClient();
var ui,
  game = { is_run: false },
  world,
  user,
  scoreboard,
  audio = new MyAudio(),
  keyboard = new Keyboard(),
  mouse = new Mouse(),
  delta = 0,
  old_timestamp = 0,
  fps = {
    img: false,
    counter: 0,
    delay: 0,
    cycle: 60,
    display: true,
  },
  loader = new Loader(can, ctx, function () {
    create_images();
    game = new Game(can, ctx);
    ui = new UI(can, ctx);
    ui.login_after();
    scoreboard = new Scoreboard(can, ctx);
    world = new World();
    user = new User();
    loader.quit(function () {
      loader.logo.style.display = "none";
      ui.run();
    });
  });
//================================================
let TimerTools = {
  HPTimer: 0,
  GaugeTimer: 0,
};
let FpsData = 0;
let PingData = -1;
let iea = -1;
let CurrentlyPlaying = false;
let JoinLeave = {
  Join: [],
  Leave: [],
  toggle1: false,
  toggle2: false,
  toggle11: false,
  toggle22: false,
}
let AutoEatWait = false;
let AutoDrinkWait = false;
let LastCrafted = null,
  LastRecycled = null;
  
let Settings = {
  Timer: true,
  showFps: true,
  showPing: true,
  JoinLeave: true,
  DropSword: { k: "KeyV" },
  Aimbot: { e: false, k: "KeyF", a: null, autoHit: true },
  ListEnabledHacks: true,
  AutoCraft: { e: false, k: "KeyK" },
  AutoRecycle: { e: false, k: "KeyL" },
  AutoFoodRange: 0.5,
};
//===============================================================
let times = [];
let timeVar = Date.now();
function draw(e) {
  for (var t = performance.now(); 0 < times.length && times[0] <= t - 1e3; ) {
    times.shift();
  }
  times.push(t);
  if (Date.now() - timeVar >= 1e3) {
    timeVar = Date.now();
    window.FpsData = times.length - 1;
  }

  window.requestAnimationFrame(draw);
  delta = (e - old_timestamp) / 1000;
  old_timestamp = e;
  delta = delta > 1 ? 1 : delta;
  if (game.is_run) {
    game.draw();
  } else {
    ctx.clearRect(0, 0, canw, canh);
    if (loader.is_run) {
      loader.draw();
    } else {
      if (ui.is_run) {
        ui.draw();
      } else {
        if (scoreboard.is_run) {
          scoreboard.draw();
        }
      }
    }
  }

  if (Settings.ListEnabledHacks) {
    ctx.save();
    let YEnabled = 20;
    for (hack in Settings) {
      if (Settings[hack].e && Settings[hack].k) {
        ctx.font = "18px Baloo Paaji";
        ctx.strokeStyle = "black";
        ctx.lineWidth = 7;
        ctx.fillStyle = "white";
        ctx.strokeText(hack, 5, YEnabled);
        ctx.fillText(hack, 5, YEnabled);
        YEnabled += 20;
      }
    }
    ctx.restore();
  }
}
window.onbeforeunload = function () {
  if (game.is_run) {
    return "Are you sure you want quit starve.io ;-; ?";
  }
};
resize_canvas();
draw(0);
if (!window.YMPB) {
  window.YMPB = window.YMPB || {};
  isYolla = 0;
} else {
  isYolla = 1;
}
window.YMPB.que = window.YMPB.que || [];
window.aiptag = window.aiptag || {};
window.aiptag.consented = true;
window.aiptag.cmd = window.aiptag.cmd || [];
window.aiptag.cmd.display = window.aiptag.cmd.display || [];
window.aiptag.cmd.player = window.aiptag.cmd.player || [];
function refreshAds() {
  window.YMPB.refresh();
}
function yollaCallback() {
  document.getElementById("preroll").style.display = "none";
  client.connect();
}
var fun = function () {
  adplayer = new aipPlayer({
    AD_WIDTH: 960,
    AD_HEIGHT: 540,
    AD_FULLSCREEN: true,
    AD_CENTERPLAYER: true,
    LOADING_TEXT: "loading advertisement",
    PREROLL_ELEM: function () {
      return document.getElementById("preroll");
    },
    AIP_COMPLETE: function () {
      client.connect();
    },
    AIP_REMOVE: function () {},
  });
};
window.aiptag.cmd.player.push(fun);
var ___adsvid = 0;
function check_ads() {
  xhttp.open(
    "GET",
    "https://cdn.jsdelivr.net/gh/prebid/currency-file@1/latest.json?date=20190929",
    true
  );
  xhttp.send();
}
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function () {
  if (this.readyState === 4 && this.status === 0) {
  }
};
var DB = "https://token.starve.io/";
if (environment === environments.DEV) {
  var DB = "http://localhost:3002/";
}
var __GOOGLE_LOGIN__ = 0,
  __FACEBOOK_LOGIN__ = 1,
  userLoginType = undefined,
  userToken = undefined,
  userId = undefined,
  userData = undefined,
  userAlreadyLoggedIn = 0;
window.onUserLogin = function () {
  userAlreadyLoggedIn = 1;
};
function loginWithGoogle() {
  window.gapi.auth2.getAuthInstance().signIn();
}
var ip = undefined,
  xsolla_options = { access_token: "ACCESS_TOKEN" },
  s = document.createElement("script");
s.type = "text/javascript";
s.async = true;
s.src = "https://static.xsolla.com/embed/paystation/1.0.7/widget.min.js";
s.addEventListener(
  "load",
  function (e) {
    window.XPayStationWidget.init(xsolla_options);
    window.XPayStationWidget.on("status-done", claimBread);
  },
  false
);
var head = document.getElementsByTagName("head")[0];
head.appendChild(s);

window.fbAsyncInit = function () {
  login();
  console.log("fb async init called");
};

(function (e, t, _0x547807) {
  var i,
    _0x4c66ca = e.getElementsByTagName(t)[0];
  if (e.getElementById(_0x547807)) {
    return;
  }
  i = e.createElement(t);
  i.id = _0x547807;
  i.src = "https://connect.facebook.net/en_US/sdk.js";
  _0x4c66ca.parentNode.insertBefore(i, _0x4c66ca);
})(document, "script", "facebook-jssdk");
function logWithFacebook() {
  window.FB.login(function (_0x5adc5c) {
    if (_0x5adc5c.authResponse) {
      window.FB.api("/me", function (_0x387488) {
        userLoginType = __FACEBOOK_LOGIN__;
        userToken = window.FB.getAuthResponse().accessToken;
        login();
        window.onUserLogin(userId);
      });
    } else {
    }
  });
}
var auth2 = undefined,
  googleUser = undefined,
  appStart = function () {
    window.gapi.load("auth2", initSigninV2);
  },
  initSigninV2 = function () {
    window.gapi.auth2
      .init({
        client_id:
          "604822901057-k3dp7j5qpl6pnfr86rvi4r2qp20nk1oh.apps.googleusercontent.com",
        scope: "https://www.googleapis.com/auth/userinfo.profile",
      })
      .then((e) => {
        auth2 = e;
        auth2.isSignedIn.listen(signinChanged);
        auth2.currentUser.listen(userChanged);
        const _0x4a8d2c = auth2.isSignedIn.get();
        if (_0x4a8d2c) {
          auth2.signIn();
        }
        refreshValues();
      });
  },
  signinChanged = function (_0x271ed3) {},
  userChanged = function (e) {
    login();
    userToken === undefined &&
      googleUser !== undefined &&
      ((userToken = googleUser.getAuthResponse().id_token),
      console.log("::: iandev userToken :::", userToken),
      userToken !== undefined &&
        ((userLoginType = __GOOGLE_LOGIN__), window.onUserLogin(userId)));
    e !== undefined &&
      e.isSignedIn() === true &&
      ((googleUser = e), window.onUserLogin(e.id));
  },
  refreshValues = function () {
    if (auth2) {
      googleUser = auth2.currentUser.get();
    }
  };
window.onload = function () {
  appStart();
};
function logout() {
  if (userLoginType === __FACEBOOK_LOGIN__ && window.FB.getUserID()) {
    window.FB.logout();
  }
  userLoginType === __GOOGLE_LOGIN__ &&
    googleUser !== undefined &&
    (window.gapi.auth2.getAuthInstance().signOut(), (googleUser = undefined));
  userId = undefined;
  userToken = undefined;
  userLoginType = undefined;
  ui.kit = 0;
  ui.bread = 0;
  ui.score = 0;
  ui.unlock_cosmetics();
  onUserLogout();
}
function login() {
  window.FB.init({
    appId: "642017356260407",
    cookie: true,
    xfbml: true,
    version: "v15.0",
  });
  if (userId !== undefined) {
    return;
  }
  getUserId();
  if (!userId) {
    return;
  }
}
function getUserId() {
  try {
    window.FB &&
      window.FB.getUserID() &&
      ((userId = window.FB.getUserID()),
      userToken === undefined &&
        window.FB.getLoginStatus(function () {
          userLoginType = __FACEBOOK_LOGIN__;
          userToken = window.FB.getAuthResponse().accessToken;
          window.onUserLogin(userId);
        }));
  } catch (_0xf6ce30) {}
  try {
    userId = googleUser.getBasicProfile().getId();
  } catch (_0x53e146) {}
}
function openXsolla(_0x5d9273) {
  if (!userId) {
    return;
  }
  var _0x5d2869 = new XMLHttpRequest();
  _0x5d2869.open("GET", DB + "xsolla?userid=" + userId + "&item=" + _0x5d9273);
  _0x5d2869.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x5d2869.onreadystatechange = function () {
    this.readyState == 4 &&
      this.status == 200 &&
      _0x5d2869.responseText !== "0" &&
      ((xsolla_options.access_token = _0x5d2869.responseText),
      window.XPayStationWidget.init(xsolla_options),
      window.XPayStationWidget.open());
  };
  _0x5d2869.send();
}
function getUserDetails(_0x2ea652) {
  var _0x267e70 = new XMLHttpRequest();
  _0x267e70.open(
    "GET",
    DB + "login?token=" + userToken + "&type=" + userLoginType
  );
  _0x267e70.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x267e70.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0x267e70.responseText !== "0") {
        _0x2ea652(JSON.parse(_0x267e70.responseText));
      }
    }
  };
  _0x267e70.send();
}
function rebootServer() {
  var _0x30dd8d = new XMLHttpRequest();
  _0x30dd8d.open(
    "GET",
    DB + "rebootServer?token=" + userToken + "&userid=" + userId
  );
  _0x30dd8d.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x30dd8d.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0x30dd8d.responseText !== "0") {
        location.href = document.getElementById("serverAddressInput").value;
      }
    }
  };
  _0x30dd8d.send();
}
function regionPreference(_0x2a99ba) {
  var _0x43db85 = new XMLHttpRequest();
  _0x43db85.open(
    "GET",
    DB +
      "setRegion?token=" +
      userToken +
      "&userid=" +
      userId +
      "&region=" +
      _0x2a99ba
  );
  _0x43db85.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x43db85.onreadystatechange = function () {
    if (this.readyState === 4 && this.status === 200) {
      if (_0x43db85.responseText !== "0") {
        ui.select_subview(ui["__SERVER_DURATION__"]);
      } else {
        ui.select_subview(ui["__GAME__"]);
      }
    }
  };
  _0x43db85.send();
}
function buySpin(_0x48573a, _0x506e13) {
  if (ui.spin > 0) {
    return;
  }
  if (ui.bread < _0x506e13) {
    ui.select_subview(ui["__BUY__"]);
    return;
  }
  ui.spin = 2;
  ui.spin_effect = 0;
  ui.spin_target = 100;
  var _0x55eb3b = new XMLHttpRequest();
  _0x55eb3b.open(
    "GET",
    DB +
      "buySpin?token=" +
      userToken +
      "&userid=" +
      userId +
      "&spin=" +
      _0x48573a
  );
  _0x55eb3b.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x55eb3b.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x55eb3b.responseText !== "0") {
        var _0x455fac = JSON.parse(_0x55eb3b.responseText);
        ui.play_spin(
          _0x455fac.rand * Math.PI * 2,
          _0x455fac.type,
          _0x455fac.id
        );
        ui.bread -= _0x506e13;
      } else {
        ui.spin = 0;
      }
    }
  };
  _0x55eb3b.send();
}
function buyNameChanger() {
  if (ui.bread < 300 && ui.firstName > 0) {
    return;
  }
  var _0x59c95a = document
    .getElementById("account_nickname_input")
    .value.trim();
  document.getElementById("account_nickname_input").value = _0x59c95a;
  if (_0x59c95a.length < 1 || _0x59c95a.length > 20) {
    return;
  }
  var _0x8a3c82 = new XMLHttpRequest();
  _0x8a3c82.open(
    "GET",
    DB +
      "changeNickname?token=" +
      userToken +
      "&userid=" +
      userId +
      "&nickname=" +
      encodeURIComponent(_0x59c95a)
  );
  _0x8a3c82.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x8a3c82.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x8a3c82.responseText !== "0") {
        var _0x2d67a5 = Number(_0x8a3c82.responseText);
        if (_0x2d67a5 > 0) {
          ui.bread -= _0x2d67a5;
        }
        ui.firstName = 1;
        ui.select_subview(ui["__PROFILE__"]);
      }
    }
  };
  _0x8a3c82.send();
}
function buyKit(_0x32d78c, _0x528b72) {
  if (ui.bread < _0x528b72) {
    ui.select_subview(ui["__BUY__"]);
    return;
  }
  var _0x329c2d = new XMLHttpRequest();
  _0x329c2d.open(
    "GET",
    DB + "buyKit?token=" + userToken + "&userid=" + userId + "&kit=" + _0x32d78c
  );
  _0x329c2d.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x329c2d.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x329c2d.responseText !== "0") {
        var _0x4e358c = JSON.parse(_0x329c2d.responseText);
        ui.bread -= _0x528b72;
        ui.kit = Date.now() + Number(_0x4e358c);
      }
    }
  };
  _0x329c2d.send();
}
function claimBread() {
  var _0x37418b = new XMLHttpRequest();
  _0x37418b.open("GET", DB + "claimBread?userid=" + userId);
  _0x37418b.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x37418b.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x37418b.responseText !== "0") {
        var _0x75d0f9 = Number(_0x37418b.responseText);
        if (!isNaN(_0x75d0f9)) {
          ui.bread = _0x75d0f9;
        }
      }
    }
  };
  _0x37418b.send();
}
function getBreadAndScore() {
  var _0x23850b = new XMLHttpRequest();
  _0x23850b.open("GET", DB + "getBreadAndScore?userid=" + userId);
  _0x23850b.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x23850b.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x23850b.responseText !== "0") {
        var _0x193713 = JSON.parse(_0x23850b.responseText);
        var _0x592a5f = _0x193713.b - ui.bread;
        ui.bread = _0x193713.b;
        ui.score = _0x193713.s;
        ui.lvl = ui.level_formula(ui.score);
        ui.xp_dest = ui.xp_formula(ui.score);
        ui.xp = 0;
        document.getElementById("breadWonInner").innerHTML = "" + _0x592a5f;
      }
    }
  };
  _0x23850b.send();
}
function sendCheat() {
  xhr.open("GET", DB + "getScore?userid=" + userId);
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  xhr.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (xhr.responseText !== "0") {
        var _0x1794f2 = JSON.parse(xhr.responseText);
      }
    }
  };
  xhr.send();
}
function getLeaderboard(_0x4c49e1, _0x51dd70, _0x1934e0, _0x3b45bf) {
  _0x4c49e1 = _0x4c49e1 === undefined ? ui.leaderboard_range : _0x4c49e1;
  _0x51dd70 = _0x51dd70 === undefined ? ui.leaderboard_mode : _0x51dd70;
  _0x1934e0 = _0x1934e0 === undefined ? ui.leaderboard_sorted : _0x1934e0;
  _0x3b45bf = _0x3b45bf === undefined ? ui.leaderboard_season : _0x3b45bf;
  if (
    _0x4c49e1 === ui.leaderboard_range &&
    _0x51dd70 === ui.leaderboard_mode &&
    _0x1934e0 === ui.leaderboard_sorted &&
    _0x3b45bf === ui.leaderboard_season
  ) {
    return;
  }
  ui.leaderboard_range = _0x4c49e1;
  ui.leaderboard_mode = _0x51dd70;
  ui.leaderboard_sorted = _0x1934e0;
  ui.leaderboard_season = _0x3b45bf;
  if (ui.LEADERBOARD_SEASON1 === _0x3b45bf) {
    _0x3b45bf = "0";
  } else {
    if (ui.LEADERBOARD_SEASON2 === _0x3b45bf) {
      _0x3b45bf = "1";
    } else {
      if (ui.LEADERBOARD_SEASON3 === _0x3b45bf) {
        _0x3b45bf = "2";
      } else {
        if (ui.LEADERBOARD_SEASON4 === _0x3b45bf) {
          _0x3b45bf = "3";
        }
      }
    }
  }
  if (ui.LEADERBOARD_TOTAL === _0x51dd70) {
    _0x51dd70 = "total";
  } else {
    if (ui.LEADERBOARD_NORMAL === _0x51dd70) {
      _0x51dd70 = "normal";
    } else {
      if (ui.LEADERBOARD_ZOMBIE === _0x51dd70) {
        _0x51dd70 = "zombie";
      } else {
        if (ui.LEADERBOARD_VAMPIRE === _0x51dd70) {
          _0x51dd70 = "vampire";
        } else {
          if (ui.LEADERBOARD_FOREST === _0x51dd70) {
            _0x51dd70 = "forest";
          }
        }
      }
    }
  }
  if (ui.LEADERBOARD_ALL === _0x4c49e1) {
    _0x4c49e1 = "all";
  }
  if (ui.LEADERBOARD_WEEK === _0x4c49e1) {
    _0x4c49e1 = "week";
  }
  if (ui.LEADERBOARD_TODAY === _0x4c49e1) {
    _0x4c49e1 = "today";
  }
  if (ui.LEADERBOARD_KILL === _0x1934e0) {
    _0x1934e0 = "kill";
  } else {
    if (ui.LEADERBOARD_SCORE === _0x1934e0) {
      _0x1934e0 = "score";
    } else {
      if (ui.LEADERBOARD_TIME === _0x1934e0) {
        _0x1934e0 = "time";
      }
    }
  }
  var _0x32b93f = new XMLHttpRequest();
  _0x32b93f.open(
    "GET",
    DB +
      "leaderboard?range=" +
      _0x4c49e1 +
      "&mode=" +
      _0x51dd70 +
      "&sort=" +
      _0x1934e0 +
      "&season=" +
      _0x3b45bf
  );
  _0x32b93f.setRequestHeader(
    "Content-Type",
    "application/x-www-form-urlencoded"
  );
  _0x32b93f.onreadystatechange = function () {
    if (this.readyState == 4 && this.status == 200) {
      if (_0x32b93f.responseText !== "0") {
        var _0x2925b5 = JSON.parse(_0x32b93f.responseText),
          _0x5b383d = "";
        for (var _0x2814db = 0; _0x2814db < _0x2925b5.length; _0x2814db++) {
          line = _0x2925b5[_0x2814db];
          var _0x24ede8 = line[1];
          if (_0x24ede8.indexOf("Starver#") === -1) {
            _0x24ede8 = window.decodeURIComponent(
              window.escape(window.atob(_0x24ede8))
            );
          }
          _0x5b383d += '<div class="lineLeaderboard">';
          _0x5b383d += '<div class="rank">';
          _0x5b383d += _0x2814db + 1 + "";
          _0x5b383d += "</div>";
          _0x5b383d += '<div class="name">';
          _0x5b383d += _0x24ede8;
          _0x5b383d += "</div>";
          _0x5b383d += '<div class="lvl">';
          _0x5b383d += ui.level_formula(line[6]) + 1 + "";
          _0x5b383d += "</div>";
          _0x5b383d += '<div class="kills">';
          _0x5b383d += line[5] + "";
          _0x5b383d += "</div>";
          _0x5b383d += '<div class="time">';
          _0x5b383d += line[4] + "";
          _0x5b383d += "</div>";
          _0x5b383d += '<div class="score">';
          _0x5b383d += line[3] + "";
          _0x5b383d += "</div>";
          _0x5b383d += "</div>";
        }
        document.getElementById("leaderboard").innerHTML = _0x5b383d;
      }
    }
  };
  _0x32b93f.send();
}

function HoldWeapon(e, t) {
  switch (e) {
    case 34:
    case 18:
    case 33:
    case 15:
    case 14:
    case 13:
    case 12:
    case 16:
    case 17:
      return 2;
    case 57:
    case 5:
    case 6:
    case 30:
    case 62:
    case 9:
    case 0:
    case 63:
    case 19:
      return 1;
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 69:
      return 3;
    case 45:
      if (t) return 4;
    case -1:
      if (t) return 5;
  }
  return 0;
}
function EnemyToAttack(myPlayer, PlayerList) {
  let nearest = null;
  let distSqrd = -1;
  let HoldingSpear = HoldWeapon(myPlayer.right, false) === 2 ? true : false;
  for (var i = 0, len = PlayerList.length, obj = null, d = null; i < len; ++i) {
    obj = PlayerList[i];
    if (obj.pid === myPlayer.pid) continue;
    if (
      (!obj.ally) &&
      myPlayer.fly === obj.fly &&
      !obj.ghost
    ) {
      d = (myPlayer.x - obj.x) ** 2 + (myPlayer.y - obj.y) ** 2;
      if (HoldingSpear && d < 330) continue;
      if (distSqrd === -1 || d < distSqrd) {
        distSqrd = d;
        nearest = obj;
      }
    }
  }
  return nearest;
}
function calcAngle(p1, p2, type) {
  if (p1 && p2) {
    if (type) return Math.atan2(p2.r.y - p1.r.y, p2.r.x - p1.r.x);
    return Math.atan2(p2.y - p1.y, p2.x - p1.x);
  }
  return null;
}

window.UtilsUI = {
  initUI: () => {
    let container = document.body;
    let gui = new guify({
      title: "LMB Tools beta",
      theme: {
        name: "LMB Tools",
        colors: {
          panelBackground: "rgb(0,0,0)",
          componentBackground: "rgb(3, 16, 34)",
          componentForeground: "rgb(0, 255, 38)",
          textPrimary: "rgb(0, 255, 38)",
          textSecondary: "rgb(0, 255, 38)",
          textHover: "rgb(255, 0, 0)",
        },
        font: {
          fontFamily: "Baloo Paaji",
          fontSize: "20px",
          fontWeight: "1",
        },
      },
      align: "right",
      width: 500,
      barMode: "none",
      opacity: 0.6,
      root: window.container,
      open: true,
    });
    gui.Register({ type: "folder", label: "Visuals", open: false });
    gui.Register({ type: "folder", label: "Main", open: false });
    gui.Register({ type: "folder", label: "Key Binds", open: false });
    gui.Register({ type: "folder", label: "PvP", open: false });
    gui.Register({ type: "folder", label: "Auto Craft&Recycle", open: false });
    gui.Register(
      [
        {
          type: "checkbox",
          label: "Timers",
          object: Settings,
          property: "Timer",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
        {
          type: "checkbox",
          label: "Show FPS",
          object: Settings,
          property: "showFps",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
        {
          type: "checkbox",
          label: "Show Ping",
          object: Settings,
          property: "showPing",
          onChange: (e) => {
            UtilsUI.saveSettings();
          }
        },
        {
          type: "checkbox",
          label: "Show Join&Leaves",
          object: Settings,
          property: "JoinLeave",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
        {
          type: "checkbox",
          label: "ListEnabledHacks",
          object: Settings,
          property: "ListEnabledHacks",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
      ],
      { folder: "Visuals" }
    );
    gui.Register(
      [
        {
          type: "range",
          label: "Auto Food Range",
          min: 0.1,
          max: 1,
          step: 0.1,
          object: Settings,
          property: "AutoFoodRange",
          onChange: (e) => {
            UtilsUI.saveSettings();
          }
        }
      ],
      { folder: "Main"}
    );
    gui.Register(
      [
        {
          type: "display",
          label: "DropSword Key:",
          object: Settings.DropSword,
          property: "k",
        },
        {
          type: "button",
          label: "SET",
          action: (e) => {
            UtilsUI.controls.setKeyBind("DropSword");
          },
        },
      ],
      { folder: "Key Binds" }
    );
    gui.Register(
      [
        {
          type: "folder",
          label: "Aimbot",
          open: false,
        }
      ],
      { folder: "PvP" }
    );
    gui.Register(
      [
        {
          type: "checkbox",
          label: "Aimbot",
          object: Settings.Aimbot,
          property: "e",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
        {
          type: "checkbox",
          label: "AutoHit",
          object: Settings.Aimbot,
          property: "autoHit",
          onChange: (e) => {
            UtilsUI.saveSettings();
          },
        },
        {
          type: "display",
          label: "Aimbot Key:",
          object: Settings.Aimbot,
          property: "k",
        },
        {
          type: "button",
          label: "SET",
          action: (e) => {
            UtilsUI.controls.setKeyBind("Aimbot");
          },
        },
      ],
      { folder: "Aimbot" }
    );
    gui.Register(
      [
        {
          type: "folder",
          label: "Auto Craft",
          open: false,
        },
        {
          type: "folder",
          label: "Auto Recycle",
          open: false,
        },
      ],
      { folder: "Auto Craft&Recycle" }
    );
    gui.Register(
      [
        {
          type: "checkbox",
          label: "Auto Craft",
          object: Settings.AutoCraft,
          property: "e",
        },
        {
          type: "display",
          label: "Key:",
          object: Settings.AutoCraft,
          property: "k",
        },
        {
          type: "button",
          label: "SET",
          action: (e) => {
            UtilsUI.controls.setKeyBind("AutoCraft");
          },
        },
      ],
      { folder: "Auto Craft" },
    );
    gui.Register(
      [
        {
          type: "checkbox",
          label: "Auto Recycle",
          object: Settings.AutoRecycle,
          property: "e",
        },
        {
          type: "display",
          label: "Key:",
          object: Settings.AutoRecycle,
          property: "k",
        },
        {
          type: "button",
          label: "SET",
          action: (e) => {
            UtilsUI.controls.setKeyBind("AutoRecycle");
          },
        },
      ],
      { folder: "Auto Recycle" },
    );
  },
  controls: null,
  controller: class {
    setKeyBind(callback) {
      Settings[callback].k = "Press any key";
      let click = 0;
      document.addEventListener("keydown", function abc(event) {
        click++;
        if (click >= 1) {
          if (event.code == "Escape") {
            Settings[callback].k = "NONE";
          } else {
            Settings[callback].k = event.code;
          }
          document.removeEventListener("keydown", abc);
          UtilsUI.saveSettings();
        }
      });
    }
  },
  saveSettings: () => {
    for (let HACK in Settings) {
      localStorage.setItem(HACK + "lmb1", JSON.stringify(Settings[HACK]));
    }
  },
  loadSettings: () => {
    for (let HACK in Settings) {
      let data = localStorage.getItem(HACK + "lmb1");
      if (data) Settings[HACK] = JSON.parse(data);
    }
  },
  LoadHack: () => {
    UtilsUI.loadSettings();
    Settings.AutoCraft.e = false;
    Settings.AutoRecycle.e = false;
    UtilsUI.controls = new UtilsUI.controller();
    let script = document.createElement("script");
    script.onload = function () {
      UtilsUI.initUI();
    };
    script.src = "https://unpkg.com/guify@0.12.0/lib/guify.min.js";
    document.body.appendChild(script);
  },
};
UtilsUI.LoadHack();

function AutoFood() {
  if (client.socket && client.socket.readyState === 1) {
    client.ping();
    if (user.gauges.h < Settings.AutoFoodRange && !user.craft.crafting) {
      window.AutoEatWait = true;
      if (user.inv.n[INV.PLANT]) {
        client.select_inv(INV.PLANT, user.inv.find_item(INV.PLANT));
      } else if (user.inv.n[INV.GARLIC]) {
        client.select_inv(INV.GARLIC, user.inv.find_item(INV.GARLIC));
      } else if (user.inv.n[INV.CRAB_STICK]) {
        client.select_inv(INV.CRAB_STICK, user.inv.find_item(INV.CRAB_STICK));
      } else if (user.inv.n[INV.PUMPKIN]) {
        client.select_inv(INV.PUMPKIN, user.inv.find_item(INV.PUMPKIN));
      } else if (user.inv.n[INV.TOMATO]) {
        client.select_inv(INV.TOMATO, user.inv.find_item(INV.TOMATO));
      } else if (user.inv.n[INV.CARROT]) {
        client.select_inv(INV.CARROT, user.inv.find_item(INV.CARROT));
      } else if (user.inv.n[INV.WATERMELON]) {
        client.select_inv(INV.WATERMELON, user.inv.find_item(INV.WATERMELON));
      } else if (user.inv.n[INV.BREAD]) {
        client.select_inv(INV.BREAD, user.inv.find_item(INV.BREAD));
      } else if (user.inv.n[INV.COOKED_MEAT]) {
        client.select_inv(INV.COOKED_MEAT, user.inv.find_item(INV.COOKED_MEAT));
      } else if (user.inv.n[INV.FOODFISH_COOKED]) {
        client.select_inv(INV.FOODFISH_COOKED, user.inv.find_item(INV.ODFISH_COOKED));
      } else if (user.inv.n[INV.COOKIE]) {
        client.select_inv(INV.COOKIE, user.inv.find_item(INV.COOKIE));
      } else if (user.inv.n[INV.SANDWICH]) {
        client.select_inv(INV.SANDWICH, user.inv.find_item(INV.SANDWICH));
      } else if (user.inv.n[INV.CAKE]) {
        client.select_inv(INV.CAKE, user.inv.find_item(INV.CAKE));
      } else if (user.inv.n[INV.CRAB_LOOT]) {
        client.select_inv(INV.CRAB_LOOT, user.inv.find_item(INV.CRAB_LOOT));
      }
      client.ping();
      workerTimers.setTimeout(AutoFood, 300);
    } else {
      window.AutoEatWait = false;
    }
  }
}
function AutoThings() {
  if (client.socket && client.socket.readyState === 1 && user && user.alive) {
    let myPlayer = world.fast_units[user.uid];
    if (myPlayer) {
      if (Settings.Aimbot.e) {
        switch (HoldWeapon(myPlayer.right, true)) {
          case 1:
            var myRange = myPlayer.fly ? 196.8 : 157.6;
            break;
          case 2:
            var myRange = myPlayer.fly ? 291.8 : 227.6;
            break;
          case 3:
            var myRange = 620;
            break;
          case 4:
            var myRange = myPlayer.fly ? 140 : 125;
            break;
          case 5:
            if (myPlayer.clothe == INV.WINTER_HOOD || myPlayer.clothe == INV.HOOD) {
              var myRange  = myPlayer.fly ? 120.8 : 97.6;
            } else {
              Settings.Aimbot.a = null;
            }
            break;
          default:
            Settings.Aimbot.a = null;
        }
        if (myRange) {
          let Enemy = EnemyToAttack(myPlayer, world.units[ITEMS.PLAYERS]);
          if (Enemy) {
            let RangeBetweenMeAndEnemy = Utils.dist(myPlayer, Enemy);
            if (RangeBetweenMeAndEnemy <= myRange) {
              Settings.Aimbot.a = calcAngle(myPlayer, Enemy, true);
              let e = 2 * Math.PI;
              let Angle255 = Math.floor(
                (((Settings.Aimbot.a + e) % e) * 255) / e
              );
              client.socket.send(JSON.stringify([3, Angle255]));
              if (Settings.Aimbot.autoHit &&
                Settings.Aimbot.a &&
                RangeBetweenMeAndEnemy <= myRange - 22
              ) {
                client.socket.send(JSON.stringify([4, Angle255]));
                client.socket.send(JSON.stringify([14]));
              }
            } else {
              Settings.Aimbot.a = null;
            }
          } else {
            Settings.Aimbot.a = null;
          }
        }
      }
      if (Settings.AutoCraft.e && !user.craft.crafting) {
        if (user.gauges.h < Settings.AutoFoodRange && !window.AutoEatWait) {
          AutoFood();
        } else if (user.gauges.t < 0.45 && !window.AutoDrinkWait) {
          window.AutoDrinkWait = true;
          if (user.inv.n[INV.BOTTLE_FULL]) {
            client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL));
          }
          client.ping();
          workerTimers.setTimeout(() => {
            window.AutoDrinkWait = false;
          }, 300);
        } else {
          if (!window.LastCrafted !== null) {
            client.socket.send(JSON.stringify([7, window.LastCrafted]));
          }
        }
      }
      if (Settings.AutoRecycle.e && !user.craft.crafting) {
        if (user.gauges.h < Settings.AutoFoodRange && !window.AutoEatWait) {
          AutoFood();
        } else if (user.gauges.t < 0.45 && !window.AutoDrinkWait) {
          window.AutoDrinkWait = true;
          if (user.inv.n[INV.BOTTLE_FULL]) {
            client.select_inv(INV.BOTTLE_FULL, user.inv.find_item(INV.BOTTLE_FULL));
          }
          client.ping();
          workerTimers.setTimeout(() => {
            window.AutoDrinkWait = false;
          }, 300);
        } else {
          if (window.LastRecycled !== null) {
            client.socket.send(JSON.stringify([29, window.LastRecycled]));
          }
        }
      }

    }
  }
}

function ShowPing() {
  if (Settings.showPing &&
    client.socket &&
    client.socket.readyState === 1 &&
    CurrentlyPlaying &&
    world.fast_units[user.uid]
  ) {
    iea = Date.now();
    client.socket.send(JSON.stringify([11]));
  }
}

let AutoThingsInterval;
let ShowPingInterval;
let AutoFoodInterval;
setTimeout(() => {
  AutoThingsInterval = workerTimers.setInterval(AutoThings, 1e3 / 30);
  AutoFeedInterval = workerTimers.setInterval(AutoFood, 8e3);
  ShowPingInterval = workerTimers.setInterval(ShowPing, 2e3);
}, 5e3);
